#ifndef __TASK_MONITOR_CFG_H
#define __TASK_MONITOR_CFG_H


#include "autoconf.h"
#if defined(CONFIG_LIB_CLASS_B_PERIODIC_CHECK)
#include "LIB_TaskMonitoringExp.h"
#endif
/** Tesk IDs */
enum tm_id_enum{
#ifdef CONFIG_MAIN_APPLICATION_TASK_TASKMONITOR_ENABLE
	MAIN_TASK_ID,
#endif
#ifdef CONFIG_MAIN_ANALOG_TASK_TASKMONITOR_ENABLE
    ANALOG_TASK_ID,
#endif

#ifdef CONFIG_LIB_TM_LIVE
    LIVE_TASK_ID,
#endif 

#ifdef CONFIG_LIB_TM_BACKUP
    BACKUP_TASK_ID,
#endif

#ifdef CONFIG_LIB_TM_OUTPUT
    OUTPUT_TASK_ID,
#endif

#if defined(CONFIG_MAIN_NORMAL_FEEDBACKS_READ_ENABLE) && defined(CONFIG_MAIN_FEEDBACKS_TASK_TASKMONITOR_ENABLE)
    MAIN_FEEDBACKS_ID,
#endif
#if defined(CONFIG_MAIN_DELAYED_FEEDBACKS_READ_ENABLE) && defined(CONFIG_MAIN_FEEDBACKS_TASK_TASKMONITOR_ENABLE)
    MAIN_FEEDBACKS_DELAYED_ID,
#endif

#if defined(CONFIG_MAIN_SEQUENCER_TASK_SUPPORT) && defined(CONFIG_MAIN_SEQUENCER_TASK_TASKMONITOR_ENABLE)
    SEQUENCER_TASK_ID,
#endif
#if defined(CONFIG_LIB_PRODUCTSAFETY_SUPPORT) && defined(CONFIG_LIB_TM_PRODUCTSAFETY)
    PRODUCT_SAFETY_ID,
#endif
#if defined(CONFIG_LIB_LOADSREQUEST_SUPPORT)
    LOADSREQUEST_ID,
#endif
    NUM_TASKS_TO_MONITOR
};

#if defined( LIB_TASKMONITORING_C )
#if defined(CONFIG_LIB_CLASS_B_PERIODIC_CHECK_STATIC_CONF)

const static uint8_t CheckTasksMaxTimeout[NUM_TASKS_TO_MONITOR] = {

#ifdef CONFIG_MAIN_APPLICATION_TASK_TASKMONITOR_ENABLE
	(uint8_t)CONFIG_LIB_TM_MAIN_TIMEOUT,
#endif
#ifdef CONFIG_MAIN_ANALOG_TASK_TASKMONITOR_ENABLE
	(uint8_t)CONFIG_LIB_TM_ANALOG_TIMEOUT,
#endif

#ifdef CONFIG_LIB_TM_LIVE
	(uint8_t)CONFIG_LIB_TM_LIVE_TIMEOUT,
#endif

#ifdef CONFIG_LIB_TM_BACKUP
	(uint8_t)CONFIG_LIB_TM_BACKUP_TIMEOUT,
#endif

#ifdef CONFIG_LIB_TM_OUTPUT
	(uint8_t)CONFIG_LIB_TM_BACKUP_TIMEOUT,
#endif

#if defined(CONFIG_MAIN_NORMAL_FEEDBACKS_READ_ENABLE) && defined(CONFIG_MAIN_FEEDBACKS_TASK_TASKMONITOR_ENABLE)
	(uint8_t)CONFIG_LIB_TM_FEEDBACKS_TIMEOUT,
#endif
#if defined(CONFIG_MAIN_DELAYED_FEEDBACKS_READ_ENABLE) && defined(CONFIG_MAIN_FEEDBACKS_TASK_TASKMONITOR_ENABLE)
	(uint8_t)CONFIG_LIB_TM_FEEDBACKS_TIMEOUT,
#endif

#if defined(CONFIG_MAIN_SEQUENCER_TASK_SUPPORT) && defined(CONFIG_MAIN_SEQUENCER_TASK_TASKMONITOR_ENABLE)
	(uint8_t)CONFIG_LIB_TM_SEQUENCER_TIMEOUT,
#endif

#if defined(CONFIG_LIB_PRODUCTSAFETY_SUPPORT) && defined(CONFIG_LIB_TM_PRODUCTSAFETY)
	CONFIG_LIB_TM_PRODUCT_SAFETY_TIMEOUT,
#endif
#if defined(CONFIG_LIB_TM_LOADSREQUEST)
	CONFIG_LIB_TM_LOADSREQUEST_TIMEOUT,
#endif
	/* Application defined ***************************/

	/* ***********************************************/
    /* NUM_TASKS_TO_MONITOR */
};
#endif /* CONFIG_LIB_CLASS_B_PERIODIC_CHECK_STATIC_CONF */
#endif /* defined( LIB_TASKMONNITORING_C ) */

#if defined(CONFIG_MAIN_APPLICATION_TASK_TASKMONITOR_ENABLE)
#if defined(CONFIG_LIB_CLASS_B_PERIODIC_CHECK)
#define MAIN_APP_PERIODICASYN_TASK__MONITORING()	LIB_TaskMonitoringConfig( MAIN_TASK_ID, CONFIG_LIB_TM_MAIN_TIMEOUT, TRUE)
#define MAIN_APP_PERIODICASYN_TASK__MONITOR_IN()	LIB_TaskStartActivity( MAIN_TASK_ID )
#define MAIN_APP_PERIODICASYN_TASK__MONITOR_OUT()	LIB_TaskEndActivity( MAIN_TASK_ID )
#elif defined(CONFIG_PM_TASK_MONITOR_SUPPORT)
#define MAIN_APP_PERIODICASYN_TASK__MONITORING()	{}
#define MAIN_APP_PERIODICASYN_TASK__MONITOR_IN()	{}
#define MAIN_APP_PERIODICASYN_TASK__MONITOR_OUT()	PM_TM_HelloTaskMonitor( MAIN_TASK_ID )
#else
#error " unexpected condition"
#endif
#endif

#if defined(CONFIG_MAIN_SEQUENCER_TASK_SUPPORT) && defined(CONFIG_MAIN_SEQUENCER_TASK_TASKMONITOR_ENABLE)
#if defined(CONFIG_LIB_CLASS_B_PERIODIC_CHECK)
#define START_SEQUENCER_TASK_MONITORING()			LIB_TaskMonitoringConfig( SEQUENCER_TASK_ID, CONFIG_LIB_TM_SEQUENCER_TIMEOUT, FALSE)
#define MAIN_SEQUENCER_TASK__MONITOR_IN()			{ LIB_SetTask(SEQUENCER_TASK_ID, TRUE); LIB_TaskStartActivity( SEQUENCER_TASK_ID ); }
#define MAIN_SEQUENCER_TASK__MONITOR_OUT()			LIB_TaskEndActivity(SEQUENCER_TASK_ID)

#elif defined(CONFIG_PM_TASK_MONITOR_SUPPORT)
#define START_SEQUENCER_TASK_MONITORING()			{}
#define MAIN_SEQUENCER_TASK__MONITOR_IN()			{}
#define MAIN_SEQUENCER_TASK__MONITOR_OUT()			PM_TM_HelloTaskMonitor( SEQUENCER_TASK_ID )
#else
#error " unexpected condition"
#endif
#endif

#if defined(CONFIG_MAIN_ANALOG_TASK_TASKMONITOR_ENABLE)
#if defined(CONFIG_LIB_CLASS_B_PERIODIC_CHECK)
#define START_ANALOG_TASK_MONITORING()				LIB_TaskMonitoringConfig( ANALOG_TASK_ID, CONFIG_LIB_TM_ANALOG_TIMEOUT, FALSE)
#define MAIN_ANALOG_INPUTS_TASK__MONITOR_IN()		{ LIB_SetTask(ANALOG_TASK_ID, TRUE); LIB_TaskStartActivity( ANALOG_TASK_ID ); }
#define MAIN_ANALOG_INPUTS_TASK__MONITOR_OUT()		LIB_TaskEndActivity( ANALOG_TASK_ID )
#elif defined(CONFIG_PM_TASK_MONITOR_SUPPORT)
#define START_ANALOG_TASK_MONITORING()				{}
#define MAIN_ANALOG_INPUTS_TASK__MONITOR_IN()		{}
#define MAIN_ANALOG_INPUTS_TASK__MONITOR_OUT()		PM_TM_HelloTaskMonitor( ANALOG_TASK_ID )
#else
#error " unexpected condition"
#endif
#endif


#if (defined(CONFIG_MAIN_NORMAL_FEEDBACKS_READ_ENABLE) || defined(CONFIG_MAIN_DELAYED_FEEDBACKS_READ_ENABLE)) && defined(CONFIG_MAIN_FEEDBACKS_TASK_TASKMONITOR_ENABLE)
#if defined(CONFIG_LIB_CLASS_B_PERIODIC_CHECK)
#define START_FEEDBACKS_TASK_MONITORING(mode)		LIB_TaskMonitoringConfig( MAIN_FEEDBACKS_ID + mode, CONFIG_LIB_TM_FEEDBACKS_TIMEOUT, FALSE)
#define MAIN_FEEDBACKS_TASK__MONITOR_IN(mode)		{ LIB_SetTask(MAIN_FEEDBACKS_ID + mode, TRUE); LIB_TaskStartActivity( MAIN_FEEDBACKS_ID + mode ); }
#define MAIN_FEEDBACKS_TASK__MONITOR_OUT(mode)		LIB_TaskEndActivity( MAIN_FEEDBACKS_ID + mode )
#elif defined(CONFIG_PM_TASK_MONITOR_SUPPORT)
#define START_FEEDBACKS_TASK_MONITORING(mode)		{}
#define MAIN_FEEDBACKS_TASK__MONITOR_IN(mode)		{}
#define MAIN_FEEDBACKS_TASK__MONITOR_OUT(mode)		PM_TM_HelloTaskMonitor(MAIN_FEEDBACKS_ID + mode)
#else
#error " unexpected condition"
#endif
#endif

#if defined(CONFIG_LIB_TM_LIVE)
#define START_LIVE_TASK_MONITORING()				LIB_TaskMonitoringConfig( LIVE_TASK_ID, CONFIG_LIB_TM_LIVE_TIMEOUT, FALSE)
#define MAIN_LIVE_TASK__MONITOR_IN()				LIB_SetTask(LIVE_TASK_ID, TRUE); LIB_TaskStartActivity( LIVE_TASK_ID )
#define MAIN_LIVE_TASK__MONITOR_OUT()				LIB_TaskEndActivity( LIVE_TASK_ID )
#endif

#if defined(CONFIG_LIB_TM_BACKUP)
#define START_BACKUP_TASK_MONITORING()				LIB_TaskMonitoringConfig( BACKUP_TASK_ID, CONFIG_LIB_TM_BACKUP_TIMEOUT, FALSE)
#define MAIN_BACKUP_TASK__MONITOR_IN()				{ LIB_SetTask(BACKUP_TASK_ID, TRUE); LIB_TaskStartActivity( BACKUP_TASK_ID ); }
#define MAIN_BACKUP_TASK__MONITOR_OUT()				LIB_TaskEndActivity( BACKUP_TASK_ID )
#endif

#if defined(CONFIG_LIB_TM_PRODUCTSAFETY)
#if defined(CONFIG_LIB_CLASS_B_PERIODIC_CHECK)
#define CONFIG_LIB_PRODUCTSAFETY_TASK_MONITORING()	LIB_TaskMonitoringConfig( PRODUCT_SAFETY_ID, CONFIG_LIB_TM_PRODUCT_SAFETY_TIMEOUT, FALSE)
#define START_LIB_PRODUCTSAFETY_TASK_MONITORING()	LIB_SetTask( PRODUCT_SAFETY_ID, TRUE)
#define LIB_PRODUCTSAFETY_TASK__MONITOR_IN()		LIB_TaskStartActivity(PRODUCT_SAFETY_ID)
#define LIB_PRODUCTSAFETY_TASK__MONITOR_OUT()		LIB_TaskEndActivity(PRODUCT_SAFETY_ID)
#else
#define CONFIG_LIB_PRODUCTSAFETY_TASK_MONITORING()	{}
#define START_LIB_PRODUCTSAFETY_TASK_MONITORING()	{}
#define LIB_PRODUCTSAFETY_TASK__MONITOR_IN()		{}
#define LIB_PRODUCTSAFETY_TASK__MONITOR_OUT()		PM_TM_HelloTaskMonitor( PRODUCT_SAFETY_ID )
#endif
#else
#define CONFIG_LIB_PRODUCTSAFETY_TASK_MONITORING()	{}
#define START_LIB_PRODUCTSAFETY_TASK_MONITORING()	{}
#define LIB_PRODUCTSAFETY_TASK__MONITOR_IN()		{}
#define LIB_PRODUCTSAFETY_TASK__MONITOR_OUT()		{}
#endif

#if defined(CONFIG_LIB_TM_LOADSREQUEST)
#if defined(CONFIG_LIB_CLASS_B_PERIODIC_CHECK)
#define CONFIG_LIB_LOADSREQUEST_MONITORING()		LIB_TaskMonitoringConfig( LOADSREQUEST_ID, CONFIG_LIB_TM_LOADSREQUEST_TIMEOUT, FALSE)
#define START_LIB_LOADSREQUEST_MONITORING()			LIB_SetTask( LOADSREQUEST_ID, TRUE)
#define LIB_LOADSREQUEST__MONITOR_IN()				LIB_TaskStartActivity(LOADSREQUEST_ID)
#define LIB_LOADSREQUEST__MONITOR_OUT()				LIB_TaskEndActivity(LOADSREQUEST_ID)
#else
#define CONFIG_LIB_LOADSREQUEST_MONITORING()		{}
#define START_LIB_LOADSREQUEST_MONITORING()			{}
#define LIB_LOADSREQUEST__MONITOR_IN()				{}
#define LIB_LOADSREQUEST__MONITOR_OUT()				PM_TM_HelloTaskMonitor( LOADSREQUEST_ID )
#endif
#else
#define CONFIG_LIB_LOADSREQUEST_MONITORING()		{}
#define START_LIB_LOADSREQUEST_MONITORING()			{}
#define LIB_LOADSREQUEST__MONITOR_IN()				{}
#define LIB_LOADSREQUEST__MONITOR_OUT()				{}
#endif

#if defined(CONFIG_LIB_CLASS_B_IRQ_CHECK)
#define		IRQ_MONITOR_ENTER()		LIB_IRQMonitor_Enter()
#define		IRQ_MONITOR_EXIT()		LIB_IRQMonitor_Exit()
#endif

#if defined(CONFIG_LIB_TM_OUTPUT)
#define START_OUTPUT_TASK_MONITORING()				LIB_TaskMonitoringConfig( OUTPUT_TASK_ID, CONFIG_LIB_TM_BACKUP_TIMEOUT, FALSE)
#define MAIN_OUTPUT_TASK__MONITOR_IN()				LIB_SetTask(OUTPUT_TASK_ID, TRUE); LIB_TaskStartActivity( OUTPUT_TASK_ID )
#define MAIN_OUTPUT_TASK__MONITOR_OUT()				LIB_TaskEndActivity( OUTPUT_TASK_ID )
#endif

#endif  /* __TASK_MONITOR_CFG_H */

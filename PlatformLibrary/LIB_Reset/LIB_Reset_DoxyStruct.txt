/**
\defgroup	LIB_Reset Reset
@{
\n			This module checks for M.C.U. reset's source and decides the type of
\n          reset for the Application and the starting mode of operation.
\n
\n          Possibles types of reset for the Application are:
\n\li       "cold reset" M.C.U. comes from a power on reset or Keywords after start up are corrupted
\n\li       "hot reset" M.C.U. comes from a no power on reset and Keywords are o.k.
\n
\n          Possibles types of operations'mode are:
\n\li       SYSTEM_NORMAL_MODE
\n\li       SYSTEM_PROGRAMMING_MODE
\n\li       SYSTEM_UNCONSISTENT_SETTING_FILE_MODE
\n
\n          For statistics you can view hom many resets happened since last power on reset
\n          and the source of reset looking at \b ResetCnt[] vector.
\n
\version 01.00
\n

\par Exported Functions (Application Level):
\li LIB_Reset_GetPOR_flag()
\li LIB_Reset_GetSystemMode()
\li LIB_Reset_GetSystemSubMode()
\li LIB_Reset_GetNewSystemMode()
\li LIB_Reset_GetIsColdReset()
\li LIB_Reset_ForceColdReset()
\li LIB_Reset_ForceReset()

\par Exported Functions (Platform Level):
\li __ram_initialization()
\li __initialize_hardware()
\li __lib_reset_manager()
\li LIB_CheckKeywordsRam()
\li LIB_SetKeywordsRam()
\li LIB_KeywordsRamCorruption()
\li LIB_Reset_SetNewSystemMode()
\li LIB_Reset_SetNewSubSystemMode()
\li LIB_Reset_IsColdReset()
\li LIB_Reset_SetSystemModeRequest()
\li LIB_Reset_SetTimedRequest()
\li LIB_Reset_ResetTimedRequest()
\li LIB_Reset_ChkTimedRequest()
\li LIB_Reset_SetResetTimeout()
\li LIB_Reset_IsTimeToReset()
\li LIB_Reset_IsTimeoutSet()
\li LIB_Reset_EnterRemoteControl()
\li LIB_Reset_IsRemoteControl()
\li LIB_Reset_GetResetTimeout()

\par Exported Variables
\li #ResetCtrl
\li #ResetCnt[NUM_RST_SOURCE]

\par Architecture Requirements ID:
\li SARS_WMMT_MN_RST_1
\li SARS_WMMT_MN_RST_2
\li SARS_WMMT_MN_RST_3
\li SARS_WMMT_MN_RST_4
\li SARS_WMMT_MN_RST_5
\li SARS_WMMT_MN_RST_6



@}
\ingroup   	PlatformLibrary
*/

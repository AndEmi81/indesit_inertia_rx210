   1                             		.file	"Load.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.LOA_waterInDW_defUpdate,"ax",@progbits
   6                             	_LOA_waterInDW_defUpdate:
   7                             	.LFB6:
   8                             		.file 1 "C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules/Load.c"
   1:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /*
   2:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** ** **************************************************************************
   3:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** ** **************************************************************************
   4:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** */ 
   5:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /** 
   6:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
   7:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
   8:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** Source File
   9:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
  10:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \file    Load.c
  11:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \ingroup Load
  12:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \date    11/03/2008
  13:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \author  Valeria Catani
  14:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \version 1.0.0
  15:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** */
  16:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
  17:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /*
  18:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** Copyright (c) 2004-2008, Indesit Company, IDD.
  19:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** Tutti i diritti sono riservati. All rights reserved.
  20:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** */
  21:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
  22:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* Old Versions
  23:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \version 
  24:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \date    
  25:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \author  
  26:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** */
  27:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
  28:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
  29:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* ******** */
  30:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* Includes */
  31:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* ******** */
  32:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
  33:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
  34:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** #include "CstmHeaders.h"
  35:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** #include "PM_PulseCounterExp.h"
  36:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
  37:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* ****************** */
  38:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* Defines and Macros */
  39:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* ****************** */
  40:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
  41:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /**DEBUG*/
  42:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /*#define PUMP_CTRL_UP_RUNNING_MSK     1*/  /*E' nel modulo Pump Control*/
  43:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /**DEBUG END*/
  44:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* *************************** */
  45:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* Typedef, Structs and Unions */
  46:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* *************************** */
  47:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
  48:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* **************************** */
  49:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* Prototype of local functions */
  50:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* **************************** */
  51:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** static void LOA_levTOtimeRef_Update(void);
  52:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** static void LOA_timeLoad_Init(void);
  53:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** static uint8_t LOA_timeLoadEnd_Check(void);
  54:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** static void LOA_waterInDW_defUpdate(void);
  55:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** static void LOA_disableLoadCounters(void);
  56:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
  57:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* ****************** */
  58:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* Exported variables */
  59:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* ****************** */
  60:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
  61:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* **************** */
  62:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* Global variables */
  63:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* **************** */
  64:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
  65:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
  66:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* ***************** */
  67:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* Exported function */
  68:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* ***************** */
  69:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
  70:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****  /**
  71:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** Gestisce l'esecuzione del microprogramma Load .
  72:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****  
  73:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \param [in] HighStatement specifica l'high statement (opcode +  modificatori F0-F1 + N flag + T fla
  74:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \param [in] LowStatement specifica il low statement (displacement ai dati) del microprogramma.
  75:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****  
  76:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \return S_OK se la condizione di avanzamento passo per il microprogramma è verificata (caricamento
  77:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \return S_FALSE se non è ancora verificata(caricamento acqua in corso),
  78:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \return codice di errore in altri casi
  79:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****  
  80:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****  
  81:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \version		1.0.0
  82:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \date 			11/03/2008
  83:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \author			Valeria Catani
  84:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
  85:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \note	in sospeso pressostato lineare
  86:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
  87:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** */
  88:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** uint8_t LOA_uP_Load_Exe (uint8_t HighStatement,uint8_t LowStatement)
  89:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** {
  90:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
  91:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** uint8_t loadingWater;
  92:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
  93:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** uint8_t res;
  94:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** int8_t variation;
  95:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** int16_t delta;
  96:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** uint8_t loadMode;
  97:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** bool_t isFullRequested;
  98:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
  99:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	
 100:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (Interpreter_Data[0].stepInitialized == FALSE )
 101:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	{
 102:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/* Prima iterazione del passo */
 103:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 104:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		uP_Load_Data.status = LOAD_INIT;
 105:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		uP_Load_Data.VS_check=FALSE;
 106:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	
 107:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	}
 108:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if(Interpreter_Data[0].optionalStepInitialized == FALSE)
 109:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	{
 110:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		uP_Load_Data.VS_check=FALSE;
 111:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	}
 112:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 113:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	/* passaggio per uP Load */
 114:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	FltLoadToutData.uP_exe = TRUE;
 115:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	
 116:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	/*Analisi modalità di caricamento richiesta */
 117:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	loadMode = HighStatement & (F1|F0);
 118:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	
 119:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (( loadMode== LOA_PS_CHECK_MODE) && ( HWC_Flags.bit.vs_wash_presence == 0))
 120:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	{/* non c'è il sensore virtuale*/
 121:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		uP_Load_Data.status = LOAD_TRUE;
 122:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		uP_Load_Data.pump_act=FALSE;
 123:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		return S_OK;	
 124:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	}
 125:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	
 126:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if ( (uPDoorStatus == UP_DOOR_WAIT)||
 127:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	((loadMode== LOA_PS_CHECK_MODE)&&(Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==5)&& uP_Load_Data.
 128:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	{/* porta aperta o in attesa di timeout dopo la chiusura o delay MR -> il uP va sospeso */
 129:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	 /* sospensione anche con lo stato 5 del sensore virtuale che non ferma la pompa lavaggio ma solo 
 130:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		
 131:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		LOA_disableLoadCounters();  /*disabilitazione contatori*/
 132:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		(void)SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
 133:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		(void)SWTC_Stop((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER);
 134:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 135:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		uP_Load_Data.init = TRUE;
 136:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		(void)Set_SmallCounter((SWTC_CountersType)MP_LOAD_PUMP_ACTIVATION, (SWTC_PrescalerType)COUNTERS2_
 137:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		return S_FALSE;
 138:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	}
 139:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 140:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 141:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	
 142:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 143:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	
 144:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	isFullRequested = ( ( loadMode == LOA_PP_CHECK_MODE )? TRUE : FALSE );
 145:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 146:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	/* ********************************************************* */
 147:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	/* Aggiornamento stato pressostato per l'iterazione in corso */
 148:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	/* ********************************************************* */
 149:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 150:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	/* Test validità stato criteri - solo in caso di calcolo portata o caricamento a PP, condizioni i
 151:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	conoscere lo stato del pressostato */			 
 152:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	                                       
 153:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 154:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (( (Flag_levTOtimeRef_update == TRUE) || (uP_Load_Data.status == LOAD_EXE_PP) )&& ( loadMode!=L
 155:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	{		
 156:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	  	if ( (TESTBIT (GIValid, (GI_FIRST_CRITERION_BIT + GI_PRESS_SENS_CR_FULL_IND) ) == 0) || (TESTBI
 157:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	  	{
 158:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	  		/*
 159:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	  		Uno dei due criteri è in uno stato non valido o non è presente:
 160:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	  		stato pressostato indeterminato
 161:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	  		*/
 162:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 163:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	  		LOA_disableLoadCounters();  /*disabilitazione contatori*/
 164:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   		
 165:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	  		/* Non eseguo il uP, ma abilito avanzamento passo */
 166:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	  		return S_OK;
 167:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	  	}
 168:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	}
 169:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 170:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	/* Stato valido criteri pressostato */
 171:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 172:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	/* Criterio Overflow */
 173:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	 
 174:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if ( TESTBIT (GICriteria,GI_CR_OVFL_IND) != 0 )
 175:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	{
 176:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/* Overflow: interrompe caricamento ma non abilita avanzamento passo */
 177:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		
 178:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		LOA_disableLoadCounters();  /*disabilitazione contatori*/
 179:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		
 180:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		return S_FALSE;
 181:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	}
 182:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	
 183:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	
 184:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* ******************************** */
 185:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* Inizializzazione dati da setting */
 186:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* ******************************** */
 187:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	
 188:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (uP_Load_Data.status == LOAD_INIT)
 189:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	{
 190:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		CLRBIT(Flags_1, JIF_FLAG1_UP_TERMINATED_KO_POS);
 191:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		
 192:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/* default : disabilitazione timeout di caricamento */
 193:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		FltLoadToutData.state = FLT_LOAD_TOUT_DISABLE;
 194:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 195:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/* QI - 26.10.09 - init timer per F06 - sub 1 e F05 - sub 3 : (tout caricamento fino a P.P. in ca
 196:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 197:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if ( isFullRequested  )
 198:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		{ /* richiesto controllo su pieno pressostato per eventuale F06 : 
 199:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			configurazione timer per timeout caricamento */
 200:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 201:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			FltLoadToutData.state = FLT_LOAD_TOUT_INIT;
 202:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		}
 203:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/* END QI - 26.10.09 */
 204:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 205:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/* nuovo caricamento: reset var per F05 */
 206:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		CLRBIT(FltFlagsKO,WARNING_LOADPP_KO);
 207:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 208:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if ( TESTBIT(Flags_1, JIF_FLAG1_REGENERATE_OK_POS)!=0 )
 209:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		{/* è stata completata l'operazione di rigenera -> devo resettare la variabile litri caricati*/
 210:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 211:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			clearRegWaterLoaded();
 212:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 213:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			CLRBIT(Flags_1, JIF_FLAG1_REGENERATE_OK_POS);  
 214:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		}
 215:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 216:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 217:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/* Inizializzazione timer per calcolo tempo raggiungimento p.p. (portata) */
 218:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 219:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/*if (Flag_levTOtimeRef_update == TRUE)*/		 /* IL FLAG VIENE SETTATO DAL UP ATTIVA FUNZIONE CHE D
 220:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/* la presenza del uP Attiva funzione garantisce anche il vuoto */
 221:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		                  
 222:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/* Config+init timer calcolo portata, senza test su Flag che ancora non � impostato in questa i
 223:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		(void)Set_SmallCounter((SWTC_CountersType)MP_LOAD_LEVTOTIME_S_COUNTER, (SWTC_PrescalerType)COUNTE
 224:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 225:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/* Caricamento dati dalla flash */
 226:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if( BasicLoader (PTR_UP_LOAD, LowStatement, &uPLoad_setting_data) != S_OK )
 227:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		{
 228:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			/* Non eseguo il uP, ma abilito avanzamento passo */
 229:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			return S_OK;
 230:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		}
 231:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 232:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		loadingWater =  OFFS_B(uPLoad_setting_data.Data,0);
 233:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 234:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/* Gestione modificatori */
 235:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 236:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		res = GetModifierValue (OFFS_B(uPLoad_setting_data.Data,1), &variation);
 237:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 238:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if( ( MOD_DONT_CARE == res ) || ( S_FALSE == res ) )
 239:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		{/* Se non è attivo nessun modificatore la variazione viene posta a zero */
 240:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 241:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			variation=0;
 242:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		}
 243:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 244:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if( variation )
 245:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		{/* variazione != 0 va applicata*/
 246:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 247:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			/* calcolo delta */                      
 248:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			delta = GetDeltaFromVariation(loadingWater,variation);
 249:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 250:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			/* aggiornamento */
 251:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			loadingWater += (uint8_t)delta;         
 252:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		}
 253:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 254:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/* End Gestione modificatori */    
 255:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 256:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		uP_Load_Data.tgWater = ( loadingWater + WaterInDW );
 257:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 258:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/* Init variabili per caricamento a turbina */
 259:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 260:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/*uP_Load_Data.waterInDWInit = WaterInDW;*/ /* questa var è utile soprattutto per Debug*/
 261:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/*PulseCounter_SetCount(0);*/               /* init pulse counter per nuovo conteggio */
 262:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 263:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 264:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		PM_PulseCounter_Reset_Warning(PULSECOUNTER_RESET_BOTH_WARNING);          /* Reset di eventuali wa
 265:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 266:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 267:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		(void)FLT_CheckPulseCounterStill(PULSE_COUNTER_STILL_INIT); /* init funzione controllo turbina bl
 268:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 269:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		CLRBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS);
 270:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		
 271:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if(loadMode == LOA_PS_CHECK_MODE )
 272:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		{
 273:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			if ( OFFS_B(uPLoad_setting_data.Data, 2)==0)
 274:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			{/* EA problema rigenere: se la velocità  è 0 non fa il controllo */
 275:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			/* EA reinizializza conteggio in caso di rigenere*/
 276:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 277:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				FltLoadToutData.state = FLT_LOAD_TOUT_INIT;
 278:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 279:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				SFT_Timeout_4Loadrestore_Mgmt(FLT_PUMP_LOAD_INIT);
 280:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 281:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				uP_Load_Data.status = LOAD_EXE;	
 282:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			}else
 283:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			{
 284:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				uP_Load_Data.VS_check=FALSE;	
 285:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				/* se non ho ancora eseguito l'accensione della pompa */
 286:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				uP_Load_Data.status = LOAD_WAIT_PUMP;	
 287:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			}	
 288:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		}else
 289:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		{
 290:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			uP_Load_Data.status = LOAD_EXE;	
 291:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		}
 292:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		uP_Load_Data.init = TRUE;		              /* per init della variabile waterInDWInit */
 293:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if (HWC_Flags.bit.vs_wash_presence )		
 294:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		{
 295:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			CLRBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS); /* reset flag overflow ripristini */	
 296:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		}
 297:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/* Nella prima iterazione non vengono pilotati i carichi */
 298:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		return S_FALSE;
 299:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	}
 300:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	/*LOAD_INIT*/
 301:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 302:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	/* Gestione timer per calcolo portata successiva a LOAD_INIT */
 303:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if ((Flag_levTOtimeRef_update == TRUE)&& ( loadMode!=LOA_PS_CHECK_MODE ))
 304:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	{/* Richiesto calcolo portata */
 305:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 306:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if ( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) != 0 )
 307:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		{/* pieno pressostato -> disabilito counter */
 308:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 309:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			(void)SWTC_Stop((SWTC_CountersType)MP_LOAD_LEVTOTIME_S_COUNTER);
 310:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		}
 311:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		else
 312:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		{/* vuoto pressostato -> abilito counter */
 313:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			(void)SWTC_Run((SWTC_CountersType)MP_LOAD_LEVTOTIME_S_COUNTER);
 314:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		}
 315:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	}
 316:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	
 317:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	/* QI - 26.10.09 - disabilitazione tout statico durante caricamento dinamico 
 318:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	(non ci fidiamo del flag IsFullRequested per identificazione dei caricamenti statici)  */
 319:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	
 320:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	/* QI 05.11.09 gestione timeout caricamento dinamico */
 321:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 322:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if ( TESTBIT (uP_PumpCtrl_Data.flags,PUMP_CTRL_UP_RUNNING_BIT) != 0 )
 323:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	{/* è in esecuzione il uP Pump Control -> si tratta di un caricamento dinamico */
 324:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	    /* il timeout relativo al P.P. in caricamento statico viene disabilitato */
 325:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   		if ( loadMode!=LOA_PS_CHECK_MODE )
 326:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		{
 327:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     		FltLoadToutData.state = FLT_LOAD_TOUT_DISABLE;		
 328:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		}
 329:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 330:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		 /* QI 05.11.09 gestione timeout caricamento dinamico: vale in Load + Pump Control e in caricamen
 331:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   		SFT_Timeout_4Loadrestore_Mgmt(FLT_PUMP_LOAD_EXE);
 332:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 333:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   	}
 334:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 335:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	else
 336:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	{/* QI 05.11.09 gestione timeout caricamento dinamico : init al P.P. in statico : vale in EXE e in
 337:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	/* con i sensori virtuali questo non conta */
 338:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if ( loadMode!=LOA_PS_CHECK_MODE )
 339:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		{
 340:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			SFT_Timeout_4Loadrestore_Mgmt(FLT_PUMP_LOAD_INIT);
 341:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		}else
 342:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		{ /* modifica brevetti: IL timeout di apertura dell'elettriovalvola diventa comunue al caricament
 343:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			SFT_Timeout_4Loadrestore_Mgmt(FLT_PUMP_LOAD_EXE);
 344:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				
 345:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		}	
 346:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	}
 347:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 348:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if ( TESTBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS) )
 349:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	{
 350:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/* in analogia con la dichiarazione del KO Restore per WaterInDW > maxWater in Load Restore
 351:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		non si prosegue nel caricamento e viene abilitato avanzamento passo 
 352:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		Il Jump su KO Restore verrà processato nel passo successivo 
 353:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		se Load Restore è l'unico uP del passo*/	 
 354:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 355:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		uP_Load_Data.status = LOAD_TRUE;
 356:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	}
 357:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	
 358:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	
 359:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* *************** */
 360:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* Esecuzione uP   */
 361:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* *************** */
 362:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** #if (VIRTUAL_SENSOR_ENABLE == 1)
 363:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (uP_Load_Data.status == LOAD_WAIT_PUMP)
 364:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	{
 365:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if ( !uP_Load_Data.VS_check)
 366:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		{
 367:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			(void)Set_SmallCounter((SWTC_CountersType)MP_LOAD_PUMP_ACTIVATION, (SWTC_PrescalerType)COUNTERS2
 368:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			uP_Load_Data.VS_check=TRUE;
 369:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		}	
 370:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if ( SWTC_IsExpired((SWTC_CountersType)MP_LOAD_PUMP_ACTIVATION))  
 371:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		{/* conteggio concluso */
 372:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			if ( TESTBIT (uP_PumpCtrl_Data.flags,PUMP_CTRL_UP_RUNNING_BIT) == 0 )
 373:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			{/* si tratta di caricamento statico */
 374:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				uP_Load_Data.pump_act=FALSE;
 375:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				/* ad ogni caricamento statico azzero questa variabile
 376:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				si presuppone che prima di ogni caricamento dinamico ci sia uno statico */
 377:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				uP_Load_Data.turbina_KO=FALSE;
 378:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				uP_Load_Data.status = LOAD_EXE;
 379:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		
 380:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				/* EA modifica brevetto_ il calcolo del fault f06 deve essere fatto sia in statico che in dinam
 381:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				solo nello statico , cioè ad ogni fase di lavaggio */
 382:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 383:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				SFT_Timeout_4Loadrestore_Mgmt(FLT_PUMP_LOAD_INIT);
 384:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 385:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				if ( (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]!=0) || (!TESTBIT(GIValid, (GI_FIRST_VIRTSENS
 386:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				{
 387:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					/* corrisponde ad una prima fase di caricamento statico, se non siamo in vuoto sensore il uP t
 388:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					    if (TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_WASH)))
 389:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 						{
 390:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 							SETBIT(Flags_1,JIF_FLAG1_UP_TERMINATED_KO_POS);
 391:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** #ifdef _STATISTICS_ON_
 392:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 						
 393:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 							IncByteWithCheck(&MachineStatistics.lastCycles[MOST_RECENT_STAT_CYCLE_POS].load_ko);
 394:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** #endif	
 395:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 							
 396:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 						}	
 397:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 						uP_Load_Data.status = LOAD_TRUE;
 398:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 						uP_Load_Data.pump_act=FALSE;
 399:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				}		
 400:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			}else
 401:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			{
 402:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				uP_Load_Data.pump_act=TRUE;	
 403:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				/* sono in grado di determinare il valore del sensore con acqua in vasca
 404:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				al termine del caricamento statico invece non attivo + la pompa*/
 405:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				
 406:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				/* EA : cambuara gestione dell'accension della spia filtro otturato. impostato ad ogni riconosc
 407:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				resettato ad ogni inizio del caricamento dinamico*/
 408:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				CLRBIT(Flags_2, FLAG2_CLOGGED_FILTER);			
 409:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			
 410:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				if ( uP_Load_Data.turbina_KO)
 411:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				{
 412:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					/*uP_Load_Data.pump_act=FALSE;*/ /* aumento velocità , tramite pump control*/
 413:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					uP_Load_Data.status = LOAD_PS_DINAMIC;	
 414:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					(void)Set_SmallCounter((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER, (SWTC_PrescalerType
 415:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					 (void)SWTC_Stop((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER);
 416:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					 
 417:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					 
 418:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					if (((Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==2) || (Virtual_Sensor_Value[GI_VIRTUAL_SEN
 419:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					{/* vedo il pieno */
 420:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 						uP_Load_Data.pump_act=FALSE;	
 421:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					}
 422:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					 
 423:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					 
 424:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				}else
 425:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				{
 426:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					uP_Load_Data.status = LOAD_EXE;
 427:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				}
 428:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				uP_Load_Data.init = TRUE;	
 429:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					
 430:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			}
 431:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			(void)SWTC_Stop((SWTC_CountersType)MP_LOAD_PUMP_ACTIVATION); 
 432:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			 FltLoadToutData.state = FLT_LOAD_TOUT_INIT;
 433:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			 uP_Load_Data.time= OFFS_B(Tab_HWCVS_data.Data, 1)& 0x7F;
 434:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			 LOA_timeLoad_Init();  /*Inizializzazione caricamento a tempo*/
 435:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 436:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		}else
 437:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		{	
 438:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			uP_Load_Data.pump_act=TRUE;
 439:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			(void)SWTC_Run((SWTC_CountersType)MP_LOAD_PUMP_ACTIVATION);
 440:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			
 441:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		} 
 442:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		return S_FALSE;
 443:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	}
 444:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 445:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** #endif /*#if (VIRTUAL_SENSOR_ENABLE == 1)*/
 446:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 447:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (uP_Load_Data.status == LOAD_EXE) 
 448:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	{ /* esecuzione caricamento a turbina */
 449:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****    		
 450:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if ( loadMode==LOA_PS_CHECK_MODE )
 451:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		{
 452:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			if (TESTBIT (uP_PumpCtrl_Data.flags,PUMP_CTRL_UP_RUNNING_BIT) == 0 )
 453:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			{/* si tratta di caricamento statico */
 454:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				(void)SWTC_Run((SWTC_CountersType)MP_LOAD_TIMELOAD_S_COUNTER);
 455:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				/* il contatore di timeout elettrovavola parte lo stesso, così, se la turbina funziona non 
 456:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				viene analizzato , ma se la turbina non funziona non carica più dei dl impostati da setting 
 457:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				corrispondenti al timeout 
 458:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				considerare anche le tolleranze*/
 459:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			}else
 460:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			{ 
 461:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				/* se la turbina funziona in dinamico si carica la quantità d'acqua voluta a velocità ridotta
 462:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				uP_Load_Data.pump_act=TRUE;
 463:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				if ((Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==0)&&(TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_B
 464:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				{/* vedo il vuoto*/
 465:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 						
 466:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					SETBIT(Flags_1,JIF_FLAG1_UP_TERMINATED_KO_POS);
 467:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** #ifdef _STATISTICS_ON_			
 468:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					IncByteWithCheck(&MachineStatistics.lastCycles[MOST_RECENT_STAT_CYCLE_POS].load_ko);
 469:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** #endif	
 470:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			
 471:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					uP_Load_Data.status = LOAD_TRUE;
 472:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					uP_Load_Data.pump_act=FALSE;
 473:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					return S_FALSE;			
 474:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				}
 475:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			}
 476:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		}			
 477:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	
 478:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	    if ( (PM_PulseCounter_GetWarning() == NO_PULSE_COUNTER_WARNING) && (TESTBIT(Flags_1,JIF_FLAG1_
 479:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	    {/* Contatore impulsi turbina OK && NO turbina bloccata */
 480:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****         
 481:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	        /* controllo turbina bloccata */
 482:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	        if ( FLT_CheckPulseCounterStill(PULSE_COUNTER_STILL_EXE) == TRUE )
 483:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	        {
 484:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				SETBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS); 
 485:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				/* EA modifica per brevetto. al prefault la visual deve segnalare mancanza acqua */
 486:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				if (HWC_Flags.bit.vs_wash_presence)
 487:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				{
 488:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					FltWarning.load=TRUE;
 489:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				}
 490:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				/* salva nella pila dei last prefault*/
 491:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				FLT_warningSave(FLT_CODE_PULSE_COUNTER, FLT_SUBCODE_PULSE_COUNTER, WRN_PREFAULT);
 492:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 493:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				return S_FALSE; /*alla prox iterazione entra con bit = 1 e cambia modalit� di caricamento*/
 494:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****          
 495:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	        }
 496:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****         
 497:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	        if (uP_Load_Data.init == TRUE)
 498:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	        {
 499:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	          uP_Load_Data.waterInDWInit = WaterInDW; 
 500:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****           
 501:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	          WaterLoadedReset();
 502:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****           
 503:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	          /* QI 27.10.09 init finestra di buio su controllo turbina. Messo qui per reinizializzare
 504:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 505:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	         (void)SWTC_SetSValue((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER, (SWTC_SCounterValue)
 506:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 507:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	          uP_Load_Data.init = FALSE;
 508:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****             
 509:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	        }
 510:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****         
 511:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	        /* QI 27.10.09 gestione finestra di buio su check turbina */
 512:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****         
 513:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	        FLT_PulseCounterCheckDelay_Mgmt();
 514:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****          	
 515:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	        WaterInDW = ( uP_Load_Data.waterInDWInit + GIWaterLoaded );		 /* aggiornamento acqua in va
 516:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****         
 517:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			if ( WaterInDW >= uP_Load_Data.tgWater )
 518:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			{/* caricamento a turbina concluso - non piloto EV */
 519:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 520:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				TempCycle_Stats.loaded_water += WaterInDW;		/* Aggiornamento statistica acqua caricata*/
 521:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				cycle_loaded_water += GIWaterLoaded;
 522:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				/* Aggiornamento portata storica - se richiesto */
 523:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				LOA_levTOtimeRef_Update(); 
 524:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 525:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				(void)SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
 526:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 527:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				/* Caricamento a turbina concluso : 
 528:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				controllo sul pieno pressostato per F05 se richiesto dal setting */
 529:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 530:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				if ( isFullRequested )
 531:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				{ /* richiesto controllo su pieno pressostato per eventuale F05 */
 532:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 533:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					if (TESTBIT (uP_PumpCtrl_Data.flags,PUMP_CTRL_UP_RUNNING_BIT) == 0)
 534:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					{/* carico statico (verifica, ma dovrebbe essere implicito nel flag) */
 535:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 536:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 						FltLoadToutData.state = FLT_LOAD_TOUT_DISABLE;		 /* disabilito Tout F05 - sub 3 perch� � 
 537:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* da modificare.*/
 538:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 						if ( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )
 539:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 						{/* vuoto -> anomalia pressostato : condizione per F05 - sub 1 */
 540:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   		      
 541:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 							SETBIT(FltFlagsKO,WARNING_LOADPP_KO);
 542:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****       		         
 543:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****       		    		}
 544:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****       		  		}
 545:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****       			}
 546:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****  
 547:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****           		uP_Load_Data.status = LOAD_TRUE;
 548:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****         	}
 549:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			else
 550:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			{/* else caricamento non concluso */
 551:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 552:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				
 553:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			}
 554:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			/* carico pilotato comunque per continuità */
 555:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	        LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b = EV_ON; /* pilotaggio EV*/ 
 556:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	   	} 
 557:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		else
 558:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		{/* Warning Pulse Counter: il conteggio dell'acqua in ingresso non è affidabile 
 559:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****         o Turbina bloccata: non leggo impulsi */
 560:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****       		
 561:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	   		if (( loadMode==LOA_PS_CHECK_MODE )&& (TESTBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS)))
 562:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			{
 563:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				/* modifica per brevetto : in caso di turbina ko ( NO IMPULSI)  rimane in questo stato fino a f
 564:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				Se la turbina è fuori range, va avanti comunque sensore o a tempo */
 565:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				uP_Load_Data.init = TRUE;
 566:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b = EV_ON; /* pilotaggio EV*/ 
 567:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				return S_FALSE;		
 568:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			}
 569:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			if ( TESTBIT (uP_PumpCtrl_Data.flags,PUMP_CTRL_UP_RUNNING_BIT) != 0 )
 570:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			{/* è in esecuzione il uP Pump Control -> si tratta di un caricamento dinamico */
 571:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			/* il caricamento alternativo alla turbina è a pressostato */
 572:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				if ( loadMode==LOA_PS_CHECK_MODE )
 573:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				{/* EA qui non ci dovrei mai andare perchè l'ho discriminato prima */
 574:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					(void)Set_SmallCounter((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER, (SWTC_PrescalerType
 575:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					 (void)SWTC_Stop((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER);
 576:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					uP_Load_Data.status = LOAD_PS_DINAMIC;
 577:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				}else
 578:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				{	
 579:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			      /* config + init Down counter per tempo stabilità pressostato in pieno */
 580:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				   (void)Set_SmallCounter((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER, (SWTC_PrescalerTy
 581:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 582:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			   		uP_Load_Data.status = LOAD_EXE_PP; 		
 583:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				}
 584:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			  /*posso proseguire con LOAD_EXE_PP senza effettuare return */
 585:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			}
 586:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			else
 587:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****        		{/* NON è in esecuzione il uP Pump Control -> si tratta di un caricamento statico */
 588:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	        	/* il caricamento alternativo alla turbina è a tempo, in base alla portata storica */
 589:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****        
 590:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				loadingWater =  (uP_Load_Data.tgWater - WaterInDW);	 /* cos� si tiene conto dell'acqua carica
 591:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****           
 592:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	          /* Calcolo tempo di caricamento residuo */
 593:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				if (  loadMode!=LOA_PS_CHECK_MODE )
 594:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				{
 595:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		          /*loadingWater =  OFFS_B(uPLoad_setting_data.Data,0);*/		/*var locale utile per debug*/
 596:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****      
 597:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				    uP_Load_Data.time = LOA_levTOtime_Conv(loadingWater); /* Calcolo tempo totale di caricament
 598:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					LOA_timeLoad_Init();  /*Inizializzazione caricamento a tempo*/	  
 599:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					
 600:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				}		  	  
 601:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	            uP_Load_Data.status = LOAD_EXE_TIME;
 602:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****           
 603:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****          		 /*posso proseguire con LOAD_EXE_TIME senza effettuare return*/
 604:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****         
 605:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****        		} 
 606:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	}
 607:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****  	
 608:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	}/* LOAD_EXE */
 609:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   
 610:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (uP_Load_Data.status == LOAD_EXE_PP)
 611:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	{/*caricamento a pressostato (dinamico)*/
 612:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 613:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   		
 614:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	if ( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) != 0 )
 615:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	{/* pieno pressostato */
 616:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	  
 617:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	  (void)SWTC_Run((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER);
 618:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		  
 619:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	  if ( SWTC_IsExpired((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER) )
 620:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	  { /* caricamento a P.P. concluso (end conteggio per stabilità pressostato in pieno) */
 621:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	   
 622:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				(void)SWTC_Stop((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER);
 623:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 624:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				/* Aggiornamento portata storica - se richiesto */
 625:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				LOA_levTOtimeRef_Update(); 
 626:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 627:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				  /* Aggiornamento acqua in vasca */
 628:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				LOA_waterInDW_defUpdate();
 629:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	
 630:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				/* disabilitazione timeout di caricamento */  /*NON SERVE: Se sono qui nessuno lo ha abilitato*
 631:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		       /*FltLoadToutData.state = FLT_LOAD_TOUT_DISABLE;*/
 632:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   	    
 633:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	    	uP_Load_Data.status = LOAD_TRUE;  
 634:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	    
 635:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	  }
 636:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	  
 637:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	}
 638:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	else
 639:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	{/* vuoto - continuo caricamento */
 640:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	 
 641:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	 /* re-inizializzo counter per tempo stabilità pressostato in pieno */
 642:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		 
 643:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		  (void) SWTC_SetSValue ((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER, (SWTC_SCounterValue)
 644:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	 
 645:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	}
 646:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		
 647:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/* carico pilotato comunque per continuità */
 648:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b = EV_ON; /* pilotaggio EV*/
 649:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		
 650:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   }
 651:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   
 652:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (uP_Load_Data.status == LOAD_EXE_TIME)
 653:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	{/* caricamento a tempo (statico)*/
 654:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	    if ( LOA_timeLoadEnd_Check() == S_OK )
 655:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	    { /* caricamento a tempo concluso */
 656:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			uP_Load_Data.turbina_KO=TRUE;
 657:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			/* 11.02.10 - controllo sul pieno richiesto */
 658:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			if (isFullRequested)
 659:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			/* EA, variabile mai impostata a 1 se ci sono i sensori virtuali*/
 660:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			{/* pieno richiesto */
 661:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			
 662:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				if ( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) != 0 )	
 663:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				{/* pieno raggiunto */
 664:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					/* Aggiornamento portata storica - se richiesto */
 665:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****         			LOA_levTOtimeRef_Update(); 
 666:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 667:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   					/* Aggiornamento acqua in vasca */
 668:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   					LOA_waterInDW_defUpdate();
 669:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   			      
 670:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****         			uP_Load_Data.status = LOAD_TRUE;			
 671:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					
 672:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				}
 673:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				else if (FltLoadToutData.state == FLT_LOAD_TOUT_END)
 674:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				{/* pieno richiesto e non raggiunto - esaurito timeout di caricamento 
 675:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 						(in realtà non dovrebbe verificarsi perchè vado in fault): termina uP e non piloto EV */
 676:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****         
 677:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****         			uP_Load_Data.status = LOAD_TRUE;
 678:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****         
 679:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****         			return S_OK; 	
 680:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				}
 681:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				else
 682:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				{
 683:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					/* Do nothing */
 684:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				}
 685:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			}
 686:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			else
 687:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			{/* pieno non richiesto */
 688:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				
 689:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				/* Aggiornamento portata storica - se richiesto */
 690:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****         		LOA_levTOtimeRef_Update(); 
 691:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 692:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   				/* Aggiornamento acqua in vasca */
 693:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   				LOA_waterInDW_defUpdate();
 694:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   			      
 695:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****         		uP_Load_Data.status = LOAD_TRUE;				
 696:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			}
 697:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			
 698:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		}
 699:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/* else caricamento a tempo non concluso -> pilotaggio EV*/
 700:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	
 701:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			/* QI 29.01.10 ELIMINATO */
 702:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			/*QI 07.01.10 - quando è in esecuzione il uP Load è attivo il Tout di caricamento (se non scad
 703:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			ribadito lo stato di EXE per assicurare la ripresa dopo PAUSE  */
 704:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 705:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/* carico pilotato comunque per continuità */
 706:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b = EV_ON; /* pilotaggio EV*/
 707:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 708:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	}
 709:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   
 710:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   
 711:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****  #if (VIRTUAL_SENSOR_ENABLE == 1) 
 712:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (uP_Load_Data.status == LOAD_PS_DINAMIC)
 713:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	{
 714:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/*uP_Load_Data.pump_act=FALSE;*/
 715:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/* la velocità qui dovrebbe essere quella di lavaggio*/
 716:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/*EA: rivedere la logica dell'ativazione del motore*/
 717:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		
 718:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		
 719:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if (TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_WASH)) )
 720:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		{/* se lo stato del sensore non è valido aspetta che torni tale*/
 721:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			if ((Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==0) )
 722:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			{/* vedo il vuoto*/
 723:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				if ( !uP_Load_Data.pump_act)
 724:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				{/* esce dal uP */	
 725:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					SETBIT(Flags_1,JIF_FLAG1_UP_TERMINATED_KO_POS);
 726:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** #ifdef _STATISTICS_ON_
 727:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 						
 728:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					IncByteWithCheck(&MachineStatistics.lastCycles[MOST_RECENT_STAT_CYCLE_POS].load_ko);
 729:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** #endif	
 730:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 731:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				  	/* Aggiornamento acqua in vasca */
 732:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					LOA_waterInDW_defUpdate();
 733:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	
 734:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					uP_Load_Data.status = LOAD_TRUE;
 735:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					return S_FALSE;
 736:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					
 737:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				}
 738:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			}
 739:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			if ((Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==2) || (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR
 740:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			{/* vedo il pieno */
 741:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				if ( uP_Load_Data.pump_act)
 742:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				{
 743:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					uP_Load_Data.pump_act=FALSE;
 744:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				}else
 745:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				{				
 746:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					(void)SWTC_Run((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER);
 747:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				}	
 748:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			}
 749:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			if ( SWTC_IsExpired((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER) )
 750:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			{ /* caricamento a P.P. concluso (end conteggio per stabilità pressostato in pieno) */
 751:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 752:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				(void)SWTC_Stop((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER);
 753:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				/* Aggiornamento acqua in vasca */
 754:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				LOA_waterInDW_defUpdate();
 755:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	
 756:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				uP_Load_Data.status = LOAD_TRUE;
 757:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			}
 758:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			
 759:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			/* carico pilotato comunque per continuità */
 760:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b = EV_ON; /* pilotaggio EV*/
 761:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		}else
 762:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		{
 763:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			 (void)SWTC_Stop((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER);
 764:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		 }	 
 765:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			
 766:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		
 767:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	}	
 768:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** #endif /*#if (VIRTUAL_SENSOR_ENABLE == 1)*/			
 769:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   if (uP_Load_Data.status == LOAD_TRUE)
 770:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   {    
 771:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     /*
 772:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		Lo stato LOAD_TRUE corrisponde a return S_OK
 773:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		(OK avanzamento passo) e impedisce di riprendere il caricamento
 774:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		*/
 775:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		Flag_levTOtimeRef_update = FALSE;
 776:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		
 777:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		LOA_disableLoadCounters();  /* disabilitazione contatori */
 778:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		
 779:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/*AE TODO Prendere temperatura APP tramite gitemp*/
 780:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		WaterTemp_At_CycleStart = GITemp;
 781:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 782:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 783:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		return S_OK;
 784:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     
 785:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   } /* LOAD_TRUE */
 786:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 787:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   return S_FALSE;
 788:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 789:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 790:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** }
 791:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /**/
 792:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 793:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 794:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 795:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* ************** */
 796:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* Local Function */
 797:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* ************** */
 798:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 799:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 800:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /**
 801:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** Gestisce aggiornamento fattore di conversione tra livello acqua e tempo ("portata") .
 802:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****  
 803:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \note :	Aggiorna direttamente variabili globali. viene chiamata solo una volta in un caso specifico
 804:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		Fondamentale inizializzare (WM_Hound?) la var globale uP_Load_Data.levTOtimeRef al LEV_TO_TIME_MI
 805:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****  
 806:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \version		1.0.0
 807:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \date 			12/03/2008
 808:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \author			Valeria Catani
 809:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 810:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** */
 811:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 812:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** static void LOA_levTOtimeRef_Update(void)
 813:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** {
 814:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** uint8_t levTOtime_tmp;
 815:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 816:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (Flag_levTOtimeRef_update == TRUE)	
 817:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	{
 818:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	  
 819:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	  	if ( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) != 0 )
 820:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	  	{/* pieno pressostato */
 821:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   	     	(void)SWTC_Stop((SWTC_CountersType)MP_LOAD_LEVTOTIME_S_COUNTER);
 822:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 823:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     		levTOtime_tmp = ( (SWTC_TimeType)SWTC_GetElapsedTime((SWTC_CountersType)MP_LOAD_LEVTOTIME_S_C
 824:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		
 825:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****       		/* QI - 13.10.09 */
 826:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****       
 827:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			if (levTOtime_tmp < LEV_TO_TIME_MIN )
 828:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			{/* valore inferiore al minimo -> uso il minimo */
 829:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 830:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				levTOtime_tmp = LEV_TO_TIME_MIN;
 831:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			}
 832:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			else if (levTOtime_tmp > LEV_TO_TIME_MAX) 
 833:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			{/* valore superiore al max -> uso il max */
 834:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 835:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				levTOtime_tmp = LEV_TO_TIME_MAX;   
 836:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			}
 837:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			else
 838:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			{
 839:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				/* Do nothing */
 840:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			}
 841:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 842:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	    	/* aggiornamento portata storica con il nuovo valore calcolato (o con min/max se out of range
 843:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	    	uP_Load_Data.levTOtimeRef = ( (((uint16_t)uP_Load_Data.levTOtimeRef*7) + levTOtime_tmp)/8 );
 844:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	
 845:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	
 846:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   		}
 847:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   	
 848:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   		Flag_levTOtimeRef_update = FALSE;
 849:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   	
 850:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	}
 851:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 852:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** }
 853:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /**/
 854:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 855:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /**
 856:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** Gestisce conversione da livello d'acqua in dl a tempo in secondi in base alla portata
 857:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 858:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \param [in]		level : livello acqua in dl
 859:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \return 		tempo in secondi corrispondente ad un caricamento da vuoto a pieno pressostato
 860:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				(dato aggiornato o default)
 861:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****  
 862:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \version		1.0.0
 863:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \date 			12/03/2008
 864:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \author			Valeria Catani
 865:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				
 866:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** */
 867:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** uint16_t LOA_levTOtime_Conv(uint8_t level)
 868:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** {
 869:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	
 870:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	/* EA mettere qui l'impostazione del tempo in fuznione del nuovo parametro in Editor*/
 871:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	
 872:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	return ((uint16_t)(((uint32_t)level * uP_Load_Data.levTOtimeRef)/(FULL_REF_LEVEL)));
 873:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** }
 874:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /**/
 875:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 876:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /**
 877:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** Gestisce conversione da tempo in secondi a livello d'acqua in dl in base alla portata
 878:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 879:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \param [in]	  tempo in secondi corrispondente ad un caricamento da vuoto a pieno pressostato
 880:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				(dato aggiornato o default)
 881:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 882:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \return       level : livello acqua in dl	
 883:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****  
 884:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \version		1.0.0
 885:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \date 			28/08/2008
 886:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \author			Valeria Catani
 887:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				
 888:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** */
 889:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** uint8_t LOA_timeTOlev_Conv(uint16_t time)
 890:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** {
 891:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	return ((uint8_t)(((uint32_t)time * (FULL_REF_LEVEL)) / uP_Load_Data.levTOtimeRef));
 892:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** }
 893:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /**/
 894:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 895:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 896:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 897:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /**
 898:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** Inizializza up counter per caricamento a tempo
 899:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 900:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \param [in]		
 901:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 902:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \note: devo utilizzare un contatore diverso (timeLoad_counter) da quello 
 903:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \       del cacolo portata per la modalità con cui l'aggiornamento della portata viene gestita
 904:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \version		1.0.0
 905:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \date 			15/02/2006
 906:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \author			Valeria Catani
 907:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 908:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** */
 909:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** static void LOA_timeLoad_Init(void)
 910:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** {
 911:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	uP_Load_Data.timeAcc = 0;
 912:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 913:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	/* config + init UP counter per conteggio caricamento a tempo */
 914:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	(void)Set_SmallCounter((SWTC_CountersType)MP_LOAD_TIMELOAD_S_COUNTER, (SWTC_PrescalerType)COUNTERS
 915:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 916:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** }
 917:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /**/
 918:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 919:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 920:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /**
 921:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** Valuta se il target per il caricamento a tempo è  stato raggiunto
 922:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 923:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \param [in]		
 924:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \return 		S_OK se il target � stato raggiunto
 925:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				S_FALSE se il target non � ancora raggiunto
 926:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				 
 927:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \version		1.0.0
 928:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \date 			14/03/2008
 929:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \author			Valeria Catani
 930:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 931:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** */
 932:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 933:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** static uint8_t LOA_timeLoadEnd_Check(void)
 934:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** {
 935:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** uint16_t timeElapsed_tmp;
 936:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 937:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	/* Caricamento in base alla portata (a tempo) */
 938:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 939:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	timeElapsed_tmp = (uP_Load_Data.timeAcc + (SWTC_TimeType)SWTC_GetElapsedTime((SWTC_CountersType)MP
 940:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 941:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (timeElapsed_tmp >= uP_Load_Data.time)
 942:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	{
 943:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		/* End counting */
 944:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 945:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		(void)SWTC_Stop((SWTC_CountersType)MP_LOAD_TIMELOAD_S_COUNTER);
 946:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 947:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		return S_OK;
 948:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	}
 949:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	else
 950:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	{
 951:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if ( SWTC_IsExpired((SWTC_CountersType)MP_LOAD_TIMELOAD_S_COUNTER) )
 952:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		{
 953:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			/* Restart counter */
 954:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 955:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			/* Update timeAcc */
 956:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			uP_Load_Data.timeAcc += TOUT_MAX_COUNTER;
 957:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 958:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			/* Restart timer */
 959:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 960:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			(void)SWTC_SetSValue ((SWTC_CountersType)MP_LOAD_TIMELOAD_S_COUNTER,(SWTC_SCounterValue)TOUT_MAX
 961:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		}
 962:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****  		(void)SWTC_Run((SWTC_CountersType)MP_LOAD_TIMELOAD_S_COUNTER);
 963:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		
 964:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	}
 965:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 966:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	return S_FALSE;
 967:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** }
 968:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /**/
 969:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 970:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /**
 971:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** Aggiorna la quantità di acqua in vasca con la quantità che è stato
 972:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** richiesto di caricare nel dato del uP.
 973:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** Viene fatto anche in caso di caricamento a pressostato perch�, pur commettendo un errore,
 974:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** è la scelta più prudente in caso di un ripristino successivo.
 975:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 976:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \param [in]		
 977:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \return 		
 978:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 								 
 979:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \version		1.0.0
 980:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \date 			17/03/2008
 981:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \author			Valeria Catani
 982:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 983:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** */
 984:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 985:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 986:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** static void LOA_waterInDW_defUpdate(void)
 987:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** {
   9                             		.loc 1 987 0
  10 0000 7E A7                   		push.l	r7
  11                             	.LCFI0:
 988:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 989:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /* Aggiornamento acqua in vasca con la quantità che avrei dovuto caricare a turbina */
 990:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 991:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	 WaterInDW =  uP_Load_Data.tgWater; 			/* QI - 13.10.09*/
  12                             		.loc 1 991 0
  13 0002 FB E2 00 00 00 00       		mov.L	#_uP_Load_Data, r14
  14 0008 59 E4 02                		movu.B	2[r14], r4
  15                             	.LVL0:
  16 000b FB E2 00 00 00 00       		mov.L	#_WaterInDW, r14
  17 0011 C3 E4                   		mov.B	r4, [r14]
 992:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	 TempCycle_Stats.loaded_water += WaterInDW;
  18                             		.loc 1 992 0
  19 0013 FB E2 00 00 00 00       		mov.L	#_TempCycle_Stats, r14
  20 0019 06 49 E4 06             		add	12[r14].W, r4
  21 001d D7 E4 06                		mov.W	r4, 12[r14]
 993:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	 cycle_loaded_water += GIWaterLoaded;
  22                             		.loc 1 993 0
  23 0020 FB 42 00 00 00 00       		mov.L	#_cycle_loaded_water, r4
  24 0026 FB E2 00 00 00 00       		mov.L	#_GIWaterLoaded, r14
  25 002c 5C EE                   		movu.W	[r14], r14
  26 002e 06 88 4E                		add	[r4].L, r14
  27 0031 E3 4E                   		mov.L	r14, [r4]
 994:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   
 995:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** }
  28                             		.loc 1 995 0
  29 0033 3F 77 01                		rtsd	#4, r7-r7
  30                             	.LFE6:
  32                             		.section	.text.LOA_disableLoadCounters,"ax",@progbits
  34                             	_LOA_disableLoadCounters:
  35                             	.LFB7:
 996:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /**/
 997:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
 998:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** /**
 999:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** Disabilita i contatori utilizzati nel uP
1000:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \param [in]		
1001:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \return 		
1002:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 								 
1003:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \version		1.0.0
1004:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \date 			03/04/2008
1005:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** \author			Valeria Catani
1006:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 
1007:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** */
1008:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** static void LOA_disableLoadCounters(void)
1009:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** {
  36                             		.loc 1 1009 0
1010:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****    (void)SWTC_Stop((SWTC_CountersType)MP_LOAD_LEVTOTIME_S_COUNTER);
  37                             		.loc 1 1010 0
  38 0000 66 C1                   		mov	#12, r1
  39 0002 05 00 00 00             		bsr	_SWTC_Stop
  40                             	.LVL1:
1011:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****    (void)SWTC_Stop((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER);
  41                             		.loc 1 1011 0
  42 0006 66 D1                   		mov	#13, r1
  43 0008 05 00 00 00             		bsr	_SWTC_Stop
  44                             	.LVL2:
1012:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****    (void)SWTC_Stop((SWTC_CountersType)MP_LOAD_TIMELOAD_S_COUNTER);
  45                             		.loc 1 1012 0
  46 000c 66 E1                   		mov	#14, r1
  47 000e 05 00 00 00             		bsr	_SWTC_Stop
  48                             	.LVL3:
1013:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****    
1014:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****    (void)SWTC_Stop((SWTC_CountersType)MP_LOAD_PUMP_ACTIVATION); 
  49                             		.loc 1 1014 0
  50 0012 66 F1                   		mov	#15, r1
  51 0014 04 00 00 00             		bra	_SWTC_Stop
  52                             	.LVL4:
  53                             	.LFE7:
  55                             		.section	.text.LOA_levTOtimeRef_Update,"ax",@progbits
  57                             	_LOA_levTOtimeRef_Update:
  58                             	.LFB1:
 813:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** {
  59                             		.loc 1 813 0
 816:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (Flag_levTOtimeRef_update == TRUE)	
  60                             		.loc 1 816 0
  61 0000 FB E2 00 00 00 00       		mov.L	#_Flag_levTOtimeRef_update, r14
  62 0006 EC EE                   		mov.L	[r14], r14
  63 0008 61 1E                   		cmp	#1, r14
  64 000a 21 5F                   		bne	.L4
  65                             	.LBB4:
 819:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	  	if ( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) != 0 )
  66                             		.loc 1 819 0
  67 000c FB E2 00 00 00 00       		mov.L	#_GICriteria, r14
  68 0012 CC EE                   		mov.B	[r14], r14
  69                             	.LBB5:
  70 0014 FD 74 CE 01             		tst	#1, r14
  71 0018 20 48                   		beq	.L6
 821:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   	     	(void)SWTC_Stop((SWTC_CountersType)MP_LOAD_LEVTOTIME_S_COUNTER);
  72                             		.loc 1 821 0
  73 001a 66 C1                   		mov	#12, r1
  74 001c 05 00 00 00             		bsr	_SWTC_Stop
  75                             	.LVL5:
 823:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     		levTOtime_tmp = ( (SWTC_TimeType)SWTC_GetElapsedTime((SWTC_CountersType)MP_LOAD_LEVTOTIME_S_C
  76                             		.loc 1 823 0
  77 0020 66 C1                   		mov	#12, r1
  78 0022 05 00 00 00             		bsr	_SWTC_GetElapsedTime
  79                             	.LVL6:
 827:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			if (levTOtime_tmp < LEV_TO_TIME_MIN )
  80                             		.loc 1 827 0
  81 0026 EF 14                   		mov.L	r1, r4
  82 0028 76 24 FF 00             		and #0xff, r4
  83 002c FB E2 00 00 00 00       		mov.L	#_Tab_HWCPressSensorData, r14
  84 0032 EC E3                   		mov.L	[r14], r3
  85                             	.LBE5:
  86 0034 CD 3E 01                		mov.B	1[r3], r14
  87 0037 75 2E 7F                		and #0x7f, r14
  88                             	.LBB6:
  89 003a 5B E2                   		movu.B	r14, r2
  90 003c 47 24                   		cmp	r2, r4
  91 003e 29 10                   		blt	.L7
  92                             	.LBE6:
 832:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			else if (levTOtime_tmp > LEV_TO_TIME_MAX) 
  93                             		.loc 1 832 0
  94 0040 CD 3E 02                		mov.B	2[r3], r14
  95 0043 75 2E 7F                		and #0x7f, r14
  96                             	.LBB7:
  97 0046 5B E3                   		movu.B	r14, r3
  98 0048 47 34                   		cmp	r3, r4
  99 004a 2A 04                   		bgt	.L7
 823:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     		levTOtime_tmp = ( (SWTC_TimeType)SWTC_GetElapsedTime((SWTC_CountersType)MP_LOAD_LEVTOTIME_S_C
 100                             		.loc 1 823 0
 101 004c CF 1E                   		mov.B	r1, r14
 102                             		.balign 2,3,5
 103                             	.L7:
 104                             	.LVL7:
 843:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	    	uP_Load_Data.levTOtimeRef = ( (((uint16_t)uP_Load_Data.levTOtimeRef*7) + levTOtime_tmp)/8 );
 105                             		.loc 1 843 0
 106 004e FB 32 00 00 00 00       		mov.L	#_uP_Load_Data, r3
 107 0054 58 34                   		movu.B	[r3], r4
 108 0056 63 74                   		mul	#7, r4
 109 0058 5B EE                   		movu.B	r14, r14
 110 005a 4B E4                   		add	r14, r4
 111 005c 6A 34                   		shar	#3, r4
 112 005e C3 34                   		mov.B	r4, [r3]
 113                             	.LVL8:
 114                             		.balign 2,3,5
 115                             	.L6:
 848:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   		Flag_levTOtimeRef_update = FALSE;
 116                             		.loc 1 848 0
 117 0060 FB E2 00 00 00 00       		mov.L	#_Flag_levTOtimeRef_update, r14
 118 0066 F8 E6 00                		mov.L	#0, [r14]
 119                             	.L4:
 120 0069 02                      		rts
 121                             	.LBE7:
 122                             	.LBE4:
 123                             	.LFE1:
 125                             		.section	.text.LOA_levTOtime_Conv,"ax",@progbits
 126                             		.global	_LOA_levTOtime_Conv
 128                             	_LOA_levTOtime_Conv:
 129                             	.LFB2:
 868:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** {
 130                             		.loc 1 868 0
 131                             	.LVL9:
 872:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	return ((uint16_t)(((uint32_t)level * uP_Load_Data.levTOtimeRef)/(FULL_REF_LEVEL)));
 132                             		.loc 1 872 0
 133 0000 5B 11                   		movu.B	r1, r1
 134 0002 FB E2 00 00 00 00       		mov.L	#_uP_Load_Data, r14
 135 0008 4C E1                   		mul	[r14].UB, r1
 136                             	.LVL10:
 137 000a FB E2 00 00 00 00       		mov.L	#_Tab_HWCPressSensorData, r14
 138 0010 EC EE                   		mov.L	[r14], r14
 873:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** }
 139                             		.loc 1 873 0
 140 0012 FC 25 E1 05             		divu	5[r14].UB, r1
 141 0016 02                      		rts
 142                             	.LFE2:
 144                             		.section	.text.LOA_uP_Load_Exe,"ax",@progbits
 145                             		.global	_LOA_uP_Load_Exe
 147                             	_LOA_uP_Load_Exe:
 148                             	.LFB0:
  89:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** {
 149                             		.loc 1 89 0
 150                             	.LVL11:
 151 0000 6E 7D                   		pushm	r7-r13
 152                             	.LCFI1:
 153 0002 60 40                   		sub	#4, r0
 154                             	.LCFI2:
 155 0004 CF 2D                   		mov.B	r2, r13
 100:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (Interpreter_Data[0].stepInitialized == FALSE )
 156                             		.loc 1 100 0
 157 0006 FB 72 00 00 00 00       		mov.L	#_Interpreter_Data, r7
 158 000c CD 7A 04                		mov.B	4[r7], r10
 159 000f EF A7                   		mov.L	r10, r7
 160 0011 64 27                   		and #2, r7
 161 0013 21 13                   		bne	.L13
 104:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		uP_Load_Data.status = LOAD_INIT;
 162                             		.loc 1 104 0
 163 0015 FB B2 00 00 00 00       		mov.L	#_uP_Load_Data, r11
 164 001b CD BC 03                		mov.B	3[r11], r12
 105:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		uP_Load_Data.VS_check=FALSE;
 165                             		.loc 1 105 0
 166 001e 75 2C 1F                		and #31, r12
 167 0021 7A 2C                   		bclr	#2, r12
 168 0023 C7 BC 03                		mov.B	r12, 3[r11]
 169                             		.balign 2,3,1
 170                             	.L13:
 108:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if(Interpreter_Data[0].optionalStepInitialized == FALSE)
 171                             		.loc 1 108 0
 172 0026 64 4A                   		and #4, r10
 173 0028 21 10                   		bne	.L14
 110:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		uP_Load_Data.VS_check=FALSE;
 174                             		.loc 1 110 0
 175 002a FB A2 00 00 00 00       		mov.L	#_uP_Load_Data, r10
 176 0030 CD AB 03                		mov.B	3[r10], r11
 177 0033 7A 2B                   		bclr	#2, r11
 178 0035 C7 AB 03                		mov.B	r11, 3[r10]
 179                             		.balign 2,3,5
 180                             	.L14:
 114:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	FltLoadToutData.uP_exe = TRUE;
 181                             		.loc 1 114 0
 182 0038 FB A2 00 00 00 00       		mov.L	#_FltLoadToutData, r10
 183 003e CC AB                   		mov.B	[r10], r11
 184 0040 78 7B                   		bset	#7, r11
 185 0042 C3 AB                   		mov.B	r11, [r10]
 117:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	loadMode = HighStatement & (F1|F0);
 186                             		.loc 1 117 0
 187 0044 EF 17                   		mov.L	r1, r7
 188 0046 75 27 30                		and #48, r7
 189                             	.LVL12:
 119:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (( loadMode== LOA_PS_CHECK_MODE) && ( HWC_Flags.bit.vs_wash_presence == 0))
 190                             		.loc 1 119 0
 191 0049 5B 7A                   		movu.B	r7, r10
 192 004b 75 5A 20                		cmp	#32, r10
 193 004e 21 27                   		bne	.L15
 119:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (( loadMode== LOA_PS_CHECK_MODE) && ( HWC_Flags.bit.vs_wash_presence == 0))
 194                             		.loc 1 119 0 is_stmt 0 discriminator 1
 195 0050 FB A2 00 00 00 00       		mov.L	#_HWC_Flags, r10
 196 0056 DC A1                   		mov.W	[r10], r1
 197                             	.LVL13:
 198 0058 75 21 10                		and #16, r1
 199 005b 5F 11                   		movu.W	r1, r1
 200 005d 61 01                   		cmp	#0, r1
 201 005f 21 16                   		bne	.L15
 121:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		uP_Load_Data.status = LOAD_TRUE;
 202                             		.loc 1 121 0 is_stmt 1
 203 0061 FB 72 00 00 00 00       		mov.L	#_uP_Load_Data, r7
 204                             	.LVL14:
 205 0067 CD 7A 03                		mov.B	3[r7], r10
 206 006a 75 2A 1F                		and #31, r10
 122:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		uP_Load_Data.pump_act=FALSE;
 207                             		.loc 1 122 0
 208 006d 75 3A 80                		or	#0xffffff80, r10
 209 0070 7A 1A                   		bclr	#1, r10
 210 0072 38 2E 07                		bra	.L156
 211                             	.LVL15:
 212                             	.L15:
 126:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if ( (uPDoorStatus == UP_DOOR_WAIT)||
 213                             		.loc 1 126 0
 214 0075 FB A2 00 00 00 00       		mov.L	#_uPDoorStatus, r10
 215 007b 58 AA                   		movu.B	[r10], r10
 216 007d 61 0A                   		cmp	#0, r10
 217 007f 20 23                   		beq	.L17
 126:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if ( (uPDoorStatus == UP_DOOR_WAIT)||
 218                             		.loc 1 126 0 is_stmt 0 discriminator 1
 219 0081 5B 7A                   		movu.B	r7, r10
 220 0083 75 5A 20                		cmp	#32, r10
 221 0086 21 50                   		bne	.L18
 127:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	((loadMode== LOA_PS_CHECK_MODE)&&(Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==5)&& uP_Load_Data.
 222                             		.loc 1 127 0 is_stmt 1
 223 0088 FB A2 00 00 00 00       		mov.L	#_Virtual_Sensor_Value, r10
 224 008e 58 AA                   		movu.B	[r10], r10
 225 0090 61 5A                   		cmp	#5, r10
 226 0092 21 44                   		bne	.L18
 127:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	((loadMode== LOA_PS_CHECK_MODE)&&(Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==5)&& uP_Load_Data.
 227                             		.loc 1 127 0 is_stmt 0 discriminator 1
 228 0094 FB A2 00 00 00 00       		mov.L	#_uP_Load_Data, r10
 229 009a CD AA 03                		mov.B 3[r10], r10
 230 009d 64 4A                   		and #4, r10
 231 009f 20 37                   		beq	.L18
 232 00a1 03                      		.balign 2,3,3
 233                             	.L17:
 131:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		LOA_disableLoadCounters();  /*disabilitazione contatori*/
 234                             		.loc 1 131 0 is_stmt 1
 235 00a2 05 00 00 00             		bsr	_LOA_disableLoadCounters
 236                             	.LVL16:
 132:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		(void)SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
 237                             		.loc 1 132 0
 238 00a6 75 41 23                		mov	#35, r1
 239 00a9 05 00 00 00             		bsr	_SWTC_Stop
 240                             	.LVL17:
 133:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		(void)SWTC_Stop((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER);
 241                             		.loc 1 133 0
 242 00ad 75 41 22                		mov	#34, r1
 243 00b0 05 00 00 00             		bsr	_SWTC_Stop
 244                             	.LVL18:
 135:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		uP_Load_Data.init = TRUE;
 245                             		.loc 1 135 0
 246 00b4 FB 72 00 00 00 00       		mov.L	#_uP_Load_Data, r7
 247                             	.LVL19:
 248 00ba CD 7A 03                		mov.B	3[r7], r10
 249 00bd 78 0A                   		bset	#0, r10
 250 00bf C7 7A 03                		mov.B	r10, 3[r7]
 136:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		(void)Set_SmallCounter((SWTC_CountersType)MP_LOAD_PUMP_ACTIVATION, (SWTC_PrescalerType)COUNTERS2_
 251                             		.loc 1 136 0
 252 00c2 FB 72 00 00 00 00       		mov.L	#_uPLoad_setting_data, r7
 253 00c8 EC 77                   		mov.L	[r7], r7
 254 00ca 89 7B                   		mov.B	5[r7], r3
 255 00cc 66 F1                   		mov	#15, r1
 256 00ce 66 32                   		mov	#3, r2
 257 00d0 75 23 7F                		and #0x7f, r3
 258 00d3 38 59 03                		bra	.L158
 259                             	.LVL20:
 260                             	.L18:
 154:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (( (Flag_levTOtimeRef_update == TRUE) || (uP_Load_Data.status == LOAD_EXE_PP) )&& ( loadMode!=L
 261                             		.loc 1 154 0
 262 00d6 FB A2 00 00 00 00       		mov.L	#_Flag_levTOtimeRef_update, r10
 263 00dc EC AE                   		mov.L	[r10], r14
 264 00de 61 1E                   		cmp	#1, r14
 265 00e0 20 14                   		beq	.L19
 154:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (( (Flag_levTOtimeRef_update == TRUE) || (uP_Load_Data.status == LOAD_EXE_PP) )&& ( loadMode!=L
 266                             		.loc 1 154 0 is_stmt 0 discriminator 2
 267 00e2 FB A2 00 00 00 00       		mov.L	#_uP_Load_Data, r10
 268 00e8 CD AA 03                		mov.B	3[r10], r10
 269 00eb 76 2A E0 00             		and #0xe0, r10
 270 00ef 75 5A 60                		cmp	#0x60, r10
 271 00f2 21 1D                   		bne	.L20
 272                             		.balign 2,3,1
 273                             	.L19:
 154:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (( (Flag_levTOtimeRef_update == TRUE) || (uP_Load_Data.status == LOAD_EXE_PP) )&& ( loadMode!=L
 274                             		.loc 1 154 0 discriminator 1
 275 00f4 5B 7A                   		movu.B	r7, r10
 276 00f6 75 5A 20                		cmp	#32, r10
 277 00f9 20 16                   		beq	.L20
 156:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	  	if ( (TESTBIT (GIValid, (GI_FIRST_CRITERION_BIT + GI_PRESS_SENS_CR_FULL_IND) ) == 0) || (TESTBI
 278                             		.loc 1 156 0 is_stmt 1
 279 00fb FB A2 00 00 00 00       		mov.L	#_GIValid, r10
 280 0101 DC AA                   		mov.W	[r10], r10
 281 0103 64 3A                   		and #3, r10
 282 0105 61 3A                   		cmp	#3, r10
 283 0107 10                      		beq	.L20
 163:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	  		LOA_disableLoadCounters();  /*disabilitazione contatori*/
 284                             		.loc 1 163 0
 285 0108 05 00 00 00             		bsr	_LOA_disableLoadCounters
 286                             	.LVL21:
 287 010c 38 B2 07                		bra	.L81
 288                             	.LVL22:
 289                             	.L20:
 174:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if ( TESTBIT (GICriteria,GI_CR_OVFL_IND) != 0 )
 290                             		.loc 1 174 0
 291 010f FB A2 00 00 00 00       		mov.L	#_GICriteria, r10
 292 0115 CC AA                   		mov.B	[r10], r10
 293 0117 EF AB                   		mov.L	r10, r11
 294 0119 64 2B                   		and #2, r11
 295 011b 10                      		beq	.L21
 178:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		LOA_disableLoadCounters();  /*disabilitazione contatori*/
 296                             		.loc 1 178 0
 297 011c 05 00 00 00             		bsr	_LOA_disableLoadCounters
 298                             	.LVL23:
 299 0120 38 0C 07                		bra	.L157
 300                             	.LVL24:
 301                             	.L21:
 144:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	isFullRequested = ( ( loadMode == LOA_PP_CHECK_MODE )? TRUE : FALSE );
 302                             		.loc 1 144 0
 303 0123 5B 7C                   		movu.B	r7, r12
 304 0125 75 5C 10                		cmp	#16, r12
 305 0128 FC DB B0                		sceq.L	r11
 188:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (uP_Load_Data.status == LOAD_INIT)
 306                             		.loc 1 188 0
 307 012b FB 42 00 00 00 00       		mov.L	#_uP_Load_Data, r4
 308 0131 88 CC                   		mov.B	3[r4], r4
 309 0133 76 24 E0 00             		and	#0xe0, r4
 310 0137 3B 26 01                		bne	.L22
 190:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		CLRBIT(Flags_1, JIF_FLAG1_UP_TERMINATED_KO_POS);
 311                             		.loc 1 190 0
 312 013a FB A2 00 00 00 00       		mov.L	#_Flags_1, r10
 313 0140 CC AC                   		mov.B	[r10], r12
 314 0142 EF CE                   		mov.L	r12, r14
 315 0144 7A 4E                   		bclr #4, r14
 316 0146 C3 AE                   		mov.B	r14, [r10]
 317 0148 FB A2 00 00 00 00       		mov.L	#_FltLoadToutData, r10
 197:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if ( isFullRequested  )
 318                             		.loc 1 197 0
 319 014e 61 0B                   		cmp	#0, r11
 201:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			FltLoadToutData.state = FLT_LOAD_TOUT_INIT;
 320                             		.loc 1 201 0
 321 0150 CC AB                   		mov.B	[r10], r11
 197:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if ( isFullRequested  )
 322                             		.loc 1 197 0
 323 0152 1D                      		bne	.L23
 193:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		FltLoadToutData.state = FLT_LOAD_TOUT_DISABLE;
 324                             		.loc 1 193 0
 325 0153 75 2B 80                		and #0xffffff80, r11
 326 0156 0E                      		bra	.L150
 327                             	.L23:
 201:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			FltLoadToutData.state = FLT_LOAD_TOUT_INIT;
 328                             		.loc 1 201 0
 329 0157 75 2B 80                		and #0xffffff80, r11
 330 015a 78 0B                   		bset #0, r11
 331                             		.balign 2,3,1
 332                             	.L150:
 333 015c C3 AB                   		mov.B	r11, [r10]
 206:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		CLRBIT(FltFlagsKO,WARNING_LOADPP_KO);
 334                             		.loc 1 206 0
 335 015e FB A2 00 00 00 00       		mov.L	#_FltFlagsKO, r10
 336 0164 DC AB                   		mov.W	[r10], r11
 337 0166 7A 2B                   		bclr #2, r11
 338 0168 D3 AB                   		mov.W	r11, [r10]
 208:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if ( TESTBIT(Flags_1, JIF_FLAG1_REGENERATE_OK_POS)!=0 )
 339                             		.loc 1 208 0
 340 016a 64 2C                   		and #2, r12
 341 016c 20 0E                   		beq	.L25
 211:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			clearRegWaterLoaded();
 342                             		.loc 1 211 0
 343 016e 05 00 00 00             		bsr	_clearRegWaterLoaded
 344                             	.LVL25:
 213:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			CLRBIT(Flags_1, JIF_FLAG1_REGENERATE_OK_POS);  
 345                             		.loc 1 213 0
 346 0172 FB A2 00 00 00 00       		mov.L	#_Flags_1, r10
 347 0178 F0 A9                   		bclr #1, [r10].B
 348                             		.balign 2,3,1
 349                             	.L25:
 223:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		(void)Set_SmallCounter((SWTC_CountersType)MP_LOAD_LEVTOTIME_S_COUNTER, (SWTC_PrescalerType)COUNTE
 350                             		.loc 1 223 0
 351 017a 66 C1                   		mov	#12, r1
 352 017c 66 32                   		mov	#3, r2
 353 017e 75 43 7F                		mov	#0x7f, r3
 354 0181 05 00 00 00             		bsr	_Set_SmallCounter
 355                             	.LVL26:
 226:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if( BasicLoader (PTR_UP_LOAD, LowStatement, &uPLoad_setting_data) != S_OK )
 356                             		.loc 1 226 0
 357 0185 5B D2                   		movu.B	r13, r2
 358 0187 75 41 11                		mov	#17, r1
 359 018a FB 32 00 00 00 00       		mov.L	#_uPLoad_setting_data, r3
 360 0190 05 00 00 00             		bsr	_BasicLoader
 361                             	.LVL27:
 362 0194 76 21 FF 00             		and #0xff, r1
 363 0198 3B 26 07                		bne	.L81
 232:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		loadingWater =  OFFS_B(uPLoad_setting_data.Data,0);
 364                             		.loc 1 232 0
 365 019b FB A2 00 00 00 00       		mov.L	#_uPLoad_setting_data, r10
 366 01a1 EC AA                   		mov.L	[r10], r10
 367 01a3 CC AB                   		mov.B	[r10], r11
 368                             	.LVL28:
 236:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		res = GetModifierValue (OFFS_B(uPLoad_setting_data.Data,1), &variation);
 369                             		.loc 1 236 0
 370 01a5 CD A1 01                		mov.B	1[r10], r1
 371 01a8 EF 02                   		mov.L	r0, r2
 372 01aa 05 00 00 00             		bsr	_GetModifierValue
 373                             	.LVL29:
 238:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if( ( MOD_DONT_CARE == res ) || ( S_FALSE == res ) )
 374                             		.loc 1 238 0
 375 01ae 5B 11                   		movu.B	r1, r1
 376 01b0 75 51 7F                		cmp	#0x7f, r1
 377 01b3 15                      		beq	.L26
 238:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if( ( MOD_DONT_CARE == res ) || ( S_FALSE == res ) )
 378                             		.loc 1 238 0 is_stmt 0 discriminator 1
 379 01b4 61 11                   		cmp	#1, r1
 380 01b6 1E                      		bne	.L27
 381 01b7 03                      		.balign 2,3,4
 382                             	.L26:
 241:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			variation=0;
 383                             		.loc 1 241 0 is_stmt 1
 384 01b8 3C 00 00                		mov.B	#0, [r0]
 385                             	.LVL30:
 386 01bb 03                      		.balign 2,3,5
 387                             	.L27:
 244:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if( variation )
 388                             		.loc 1 244 0
 389 01bc CC 02                   		mov.B	[r0], r2
 390 01be CF 2A                   		mov.B	r2, r10
 391 01c0 61 0A                   		cmp	#0, r10
 392 01c2 12                      		beq	.L28
 248:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			delta = GetDeltaFromVariation(loadingWater,variation);
 393                             		.loc 1 248 0
 394 01c3 5B B1                   		movu.B	r11, r1
 395                             	.LVL31:
 396 01c5 05 00 00 00             		bsr	_GetDeltaFromVariation
 397                             	.LVL32:
 251:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			loadingWater += (uint8_t)delta;         
 398                             		.loc 1 251 0
 399 01c9 4B 1B                   		add	r1, r11
 400                             	.LVL33:
 401 01cb 03                      		.balign 2,3,5
 402                             	.L28:
 256:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		uP_Load_Data.tgWater = ( loadingWater + WaterInDW );
 403                             		.loc 1 256 0
 404 01cc FB A2 00 00 00 00       		mov.L	#_uP_Load_Data, r10
 405 01d2 FB C2 00 00 00 00       		mov.L	#_WaterInDW, r12
 406 01d8 06 08 CB                		add	[r12].B, r11
 407                             	.LVL34:
 408 01db C7 AB 02                		mov.B	r11, 2[r10]
 264:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		PM_PulseCounter_Reset_Warning(PULSECOUNTER_RESET_BOTH_WARNING);          /* Reset di eventuali wa
 409                             		.loc 1 264 0
 410 01de 66 21                   		mov	#2, r1
 411 01e0 05 00 00 00             		bsr	_PM_PulseCounter_Reset_Warning
 412                             	.LVL35:
 267:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		(void)FLT_CheckPulseCounterStill(PULSE_COUNTER_STILL_INIT); /* init funzione controllo turbina bl
 413                             		.loc 1 267 0
 414 01e4 66 01                   		mov	#0, r1
 415 01e6 05 00 00 00             		bsr	_FLT_CheckPulseCounterStill
 416                             	.LVL36:
 269:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		CLRBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS);
 417                             		.loc 1 269 0
 418 01ea FB B2 00 00 00 00       		mov.L	#_Flags_1, r11
 419 01f0 F0 BA                   		bclr #2, [r11].B
 271:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if(loadMode == LOA_PS_CHECK_MODE )
 420                             		.loc 1 271 0
 421 01f2 5B 77                   		movu.B	r7, r7
 422                             	.LVL37:
 423 01f4 75 57 20                		cmp	#32, r7
 424 01f7 21 2F                   		bne	.L29
 273:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			if ( OFFS_B(uPLoad_setting_data.Data, 2)==0)
 425                             		.loc 1 273 0
 426 01f9 FB 72 00 00 00 00       		mov.L	#_uPLoad_setting_data, r7
 427                             	.LVL38:
 428 01ff EC 77                   		mov.L	[r7], r7
 429 0201 B0 F1                   		movu.B	2[r7], r1
 430 0203 61 01                   		cmp	#0, r1
 431 0205 21 17                   		bne	.L30
 277:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				FltLoadToutData.state = FLT_LOAD_TOUT_INIT;
 432                             		.loc 1 277 0
 433 0207 FB B2 00 00 00 00       		mov.L	#_FltLoadToutData, r11
 434 020d CC B7                   		mov.B	[r11], r7
 435 020f 75 27 80                		and #0xffffff80, r7
 436 0212 78 07                   		bset #0, r7
 437 0214 C3 B7                   		mov.B	r7, [r11]
 279:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				SFT_Timeout_4Loadrestore_Mgmt(FLT_PUMP_LOAD_INIT);
 438                             		.loc 1 279 0
 439 0216 05 00 00 00             		bsr	_SFT_Timeout_4Loadrestore_Mgmt
 440                             	.LVL39:
 441 021a 2E 0C                   		bra	.L29
 442                             	.L30:
 284:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				uP_Load_Data.VS_check=FALSE;	
 443                             		.loc 1 284 0
 444 021c CD A7 03                		mov.B	3[r10], r7
 286:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				uP_Load_Data.status = LOAD_WAIT_PUMP;	
 445                             		.loc 1 286 0
 446 021f 75 27 1B                		and #27, r7
 447 0222 75 37 C0                		or	#-64, r7
 448 0225 09                      		bra	.L151
 449                             	.L29:
 290:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			uP_Load_Data.status = LOAD_EXE;	
 450                             		.loc 1 290 0
 451 0226 CD A7 03                		mov.B	3[r10], r7
 452 0229 75 27 1F                		and #31, r7
 453 022c 78 57                   		bset #5, r7
 454                             		.balign 2,3,5
 455                             	.L151:
 456 022e C7 A7 03                		mov.B	r7, 3[r10]
 292:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		uP_Load_Data.init = TRUE;		              /* per init della variabile waterInDWInit */
 457                             		.loc 1 292 0
 458 0231 FB 72 00 00 00 00       		mov.L	#_uP_Load_Data, r7
 459 0237 CD 7A 03                		mov.B	3[r7], r10
 460 023a 78 0A                   		bset	#0, r10
 461 023c C7 7A 03                		mov.B	r10, 3[r7]
 293:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if (HWC_Flags.bit.vs_wash_presence )		
 462                             		.loc 1 293 0
 463 023f FB 72 00 00 00 00       		mov.L	#_HWC_Flags, r7
 464 0245 DC 77                   		mov.W	[r7], r7
 465 0247 75 27 10                		and #16, r7
 466 024a 5F 77                   		movu.W	r7, r7
 467 024c 61 07                   		cmp	#0, r7
 468 024e 1C                      		bne	.L32
 469 024f 38 DD 05                		bra	.L157
 470                             	.L32:
 295:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			CLRBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS); /* reset flag overflow ripristini */	
 471                             		.loc 1 295 0
 472 0252 FB 72 00 00 00 00       		mov.L	#_Flags_1, r7
 473 0258 F0 78                   		bclr #0, [r7].B
 474 025a 38 D2 05                		bra	.L157
 475                             	.LVL40:
 476                             	.L22:
 303:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if ((Flag_levTOtimeRef_update == TRUE)&& ( loadMode!=LOA_PS_CHECK_MODE ))
 477                             		.loc 1 303 0
 478 025d 61 1E                   		cmp	#1, r14
 479 025f 21 17                   		bne	.L33
 303:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if ((Flag_levTOtimeRef_update == TRUE)&& ( loadMode!=LOA_PS_CHECK_MODE ))
 480                             		.loc 1 303 0 is_stmt 0 discriminator 1
 481 0261 75 5C 20                		cmp	#32, r12
 482 0264 20 12                   		beq	.L33
 309:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			(void)SWTC_Stop((SWTC_CountersType)MP_LOAD_LEVTOTIME_S_COUNTER);
 483                             		.loc 1 309 0 is_stmt 1
 484 0266 66 C1                   		mov	#12, r1
 306:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if ( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) != 0 )
 485                             		.loc 1 306 0
 486 0268 FD 74 CA 01             		tst	#1, r10
 487 026c 16                      		beq	.L34
 309:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			(void)SWTC_Stop((SWTC_CountersType)MP_LOAD_LEVTOTIME_S_COUNTER);
 488                             		.loc 1 309 0
 489 026d 05 00 00 00             		bsr	_SWTC_Stop
 490                             	.LVL41:
 491 0271 0D                      		bra	.L33
 492                             	.LVL42:
 493                             	.L34:
 313:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			(void)SWTC_Run((SWTC_CountersType)MP_LOAD_LEVTOTIME_S_COUNTER);
 494                             		.loc 1 313 0
 495 0272 05 00 00 00             		bsr	_SWTC_Run
 496                             	.LVL43:
 497                             		.balign 2,3,5
 498                             	.L33:
 322:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if ( TESTBIT (uP_PumpCtrl_Data.flags,PUMP_CTRL_UP_RUNNING_BIT) != 0 )
 499                             		.loc 1 322 0
 500 0276 FB A2 00 00 00 00       		mov.L	#_uP_PumpCtrl_Data, r10
 501 027c CD A1 01                		mov.B 1[r10], r1
 502 027f 64 21                   		and #2, r1
 503 0281 5B 7A                   		movu.B	r7, r10
 504 0283 61 01                   		cmp	#0, r1
 505 0285 20 18                   		beq	.L35
 325:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   		if ( loadMode!=LOA_PS_CHECK_MODE )
 506                             		.loc 1 325 0
 507 0287 75 5A 20                		cmp	#32, r10
 508 028a 20 10                   		beq	.L36
 327:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     		FltLoadToutData.state = FLT_LOAD_TOUT_DISABLE;		
 509                             		.loc 1 327 0
 510 028c FB A2 00 00 00 00       		mov.L	#_FltLoadToutData, r10
 511 0292 CC AC                   		mov.B	[r10], r12
 512 0294 75 2C 80                		and #0xffffff80, r12
 513 0297 C3 AC                   		mov.B	r12, [r10]
 514 0299 03                      		.balign 2,3,1
 515                             	.L36:
 331:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   		SFT_Timeout_4Loadrestore_Mgmt(FLT_PUMP_LOAD_EXE);
 516                             		.loc 1 331 0
 517 029a 66 11                   		mov	#1, r1
 518 029c 0E                      		bra	.L152
 519                             	.L35:
 338:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if ( loadMode!=LOA_PS_CHECK_MODE )
 520                             		.loc 1 338 0
 521 029d 75 5A 20                		cmp	#32, r10
 522 02a0 20 FA                   		beq	.L36
 523                             		.balign 2,3,3
 524                             	.L152:
 340:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			SFT_Timeout_4Loadrestore_Mgmt(FLT_PUMP_LOAD_INIT);
 525                             		.loc 1 340 0
 526 02a2 05 00 00 00             		bsr	_SFT_Timeout_4Loadrestore_Mgmt
 527                             	.LVL44:
 348:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if ( TESTBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS) )
 528                             		.loc 1 348 0
 529 02a6 FB A2 00 00 00 00       		mov.L	#_Flags_1, r10
 530 02ac CC AC                   		mov.B	[r10], r12
 531 02ae FD 74 CC 01             		tst	#1, r12
 532 02b2 20 14                   		beq	.L38
 355:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		uP_Load_Data.status = LOAD_TRUE;
 533                             		.loc 1 355 0
 534 02b4 FB E2 00 00 00 00       		mov.L	#_uP_Load_Data, r14
 535 02ba CD EA 03                		mov.B	3[r14], r10
 536 02bd 75 2A 1F                		and #31, r10
 537 02c0 75 3A 80                		or	#0xffffff80, r10
 538 02c3 C7 EA 03                		mov.B	r10, 3[r14]
 539                             		.balign 2,3,5
 540                             	.L38:
 363:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (uP_Load_Data.status == LOAD_WAIT_PUMP)
 541                             		.loc 1 363 0
 542 02c6 FB A2 00 00 00 00       		mov.L	#_uP_Load_Data, r10
 543 02cc CD AE 03                		mov.B	3[r10], r14
 544 02cf EF E4                   		mov.L	r14, r4
 545 02d1 76 24 E0 00             		and #0xe0, r4
 546 02d5 75 54 C0                		cmp	#0xc0, r4
 547 02d8 3B 72 01                		bne	.L39
 365:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if ( !uP_Load_Data.VS_check)
 548                             		.loc 1 365 0
 549 02db 64 4E                   		and #4, r14
 550 02dd 21 1F                   		bne	.L40
 367:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			(void)Set_SmallCounter((SWTC_CountersType)MP_LOAD_PUMP_ACTIVATION, (SWTC_PrescalerType)COUNTERS2
 551                             		.loc 1 367 0
 552 02df FB 72 00 00 00 00       		mov.L	#_uPLoad_setting_data, r7
 553                             	.LVL45:
 554 02e5 EC 77                   		mov.L	[r7], r7
 555 02e7 89 7B                   		mov.B	5[r7], r3
 556 02e9 66 F1                   		mov	#15, r1
 557 02eb 66 32                   		mov	#3, r2
 558 02ed 75 23 7F                		and #0x7f, r3
 559 02f0 05 00 00 00             		bsr	_Set_SmallCounter
 560                             	.LVL46:
 368:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			uP_Load_Data.VS_check=TRUE;
 561                             		.loc 1 368 0
 562 02f4 CD A7 03                		mov.B	3[r10], r7
 563 02f7 78 27                   		bset	#2, r7
 564 02f9 C7 A7 03                		mov.B	r7, 3[r10]
 565                             		.balign 2,3,1
 566                             	.L40:
 370:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if ( SWTC_IsExpired((SWTC_CountersType)MP_LOAD_PUMP_ACTIVATION))  
 567                             		.loc 1 370 0
 568 02fc 66 F1                   		mov	#15, r1
 569 02fe 05 00 00 00             		bsr	_SWTC_IsExpired
 570                             	.LVL47:
 571 0302 61 01                   		cmp	#0, r1
 572 0304 3A 2F 01                		beq	.L41
 372:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			if ( TESTBIT (uP_PumpCtrl_Data.flags,PUMP_CTRL_UP_RUNNING_BIT) == 0 )
 573                             		.loc 1 372 0
 574 0307 FB 72 00 00 00 00       		mov.L	#_uP_PumpCtrl_Data, r7
 575 030d 88 79                   		mov.B 1[r7], r1
 576 030f 64 21                   		and #2, r1
 577 0311 FB 72 00 00 00 00       		mov.L	#_uP_Load_Data, r7
 374:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				uP_Load_Data.pump_act=FALSE;
 578                             		.loc 1 374 0
 579 0317 CD 7A 03                		mov.B	3[r7], r10
 372:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			if ( TESTBIT (uP_PumpCtrl_Data.flags,PUMP_CTRL_UP_RUNNING_BIT) == 0 )
 580                             		.loc 1 372 0
 581 031a 61 01                   		cmp	#0, r1
 582 031c 21 65                   		bne	.L42
 378:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				uP_Load_Data.status = LOAD_EXE;
 583                             		.loc 1 378 0
 584 031e 75 2A 15                		and #21, r10
 585 0321 78 5A                   		bset #5, r10
 586 0323 C7 7A 03                		mov.B	r10, 3[r7]
 383:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				SFT_Timeout_4Loadrestore_Mgmt(FLT_PUMP_LOAD_INIT);
 587                             		.loc 1 383 0
 588 0326 05 00 00 00             		bsr	_SFT_Timeout_4Loadrestore_Mgmt
 589                             	.LVL48:
 385:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				if ( (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]!=0) || (!TESTBIT(GIValid, (GI_FIRST_VIRTSENS
 590                             		.loc 1 385 0
 591 032a FB 72 00 00 00 00       		mov.L	#_Virtual_Sensor_Value, r7
 592 0330 58 77                   		movu.B	[r7], r7
 593 0332 61 07                   		cmp	#0, r7
 594 0334 21 16                   		bne	.L43
 385:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				if ( (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]!=0) || (!TESTBIT(GIValid, (GI_FIRST_VIRTSENS
 595                             		.loc 1 385 0 is_stmt 0 discriminator 1
 596 0336 FB 72 00 00 00 00       		mov.L	#_GIValid, r7
 597 033c DC 77                   		mov.W	[r7], r7
 598 033e 76 27 00 04             		and #0x400, r7
 599 0342 5F 77                   		movu.W	r7, r7
 600 0344 61 07                   		cmp	#0, r7
 601 0346 3B B0 00                		bne	.L44
 602 0349 03                      		.balign 2,3,5
 603                             	.L43:
 388:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					    if (TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_WASH)))
 604                             		.loc 1 388 0 is_stmt 1
 605 034a FB 72 00 00 00 00       		mov.L	#_GIValid, r7
 606 0350 DC 77                   		mov.W	[r7], r7
 607 0352 76 27 00 04             		and #0x400, r7
 608 0356 5F 77                   		movu.W	r7, r7
 609 0358 61 07                   		cmp	#0, r7
 610 035a 20 14                   		beq	.L45
 390:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 							SETBIT(Flags_1,JIF_FLAG1_UP_TERMINATED_KO_POS);
 611                             		.loc 1 390 0
 612 035c FB 72 00 00 00 00       		mov.L	#_Flags_1, r7
 613 0362 F0 74                   		bset #4, [r7].B
 393:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 							IncByteWithCheck(&MachineStatistics.lastCycles[MOST_RECENT_STAT_CYCLE_POS].load_ko);
 614                             		.loc 1 393 0
 615 0364 FB 12 00 00 00 00       		mov.L	#_MachineStatistics+132, r1
 616 036a 05 00 00 00             		bsr	_IncByteWithCheck
 617                             	.LVL49:
 618                             		.balign 2,3,5
 619                             	.L45:
 397:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 						uP_Load_Data.status = LOAD_TRUE;
 620                             		.loc 1 397 0
 621 036e FB 72 00 00 00 00       		mov.L	#_uP_Load_Data, r7
 622 0374 CD 7A 03                		mov.B	3[r7], r10
 623 0377 75 2A 1F                		and #31, r10
 398:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 						uP_Load_Data.pump_act=FALSE;
 624                             		.loc 1 398 0
 625 037a 75 3A 80                		or	#0xffffff80, r10
 626 037d 7A 1A                   		bclr	#1, r10
 627 037f 2E 73                   		bra	.L154
 628                             	.L42:
 402:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				uP_Load_Data.pump_act=TRUE;	
 629                             		.loc 1 402 0
 630 0381 78 1A                   		bset	#1, r10
 408:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				CLRBIT(Flags_2, FLAG2_CLOGGED_FILTER);			
 631                             		.loc 1 408 0
 632 0383 FB B2 00 00 00 00       		mov.L	#_Flags_2, r11
 633 0389 F0 BD                   		bclr #5, [r11].B
 410:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				if ( uP_Load_Data.turbina_KO)
 634                             		.loc 1 410 0
 635 038b EF AB                   		mov.L	r10, r11
 636 038d 64 8B                   		and #8, r11
 413:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					uP_Load_Data.status = LOAD_PS_DINAMIC;	
 637                             		.loc 1 413 0
 638 038f 75 2A 1F                		and #31, r10
 410:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				if ( uP_Load_Data.turbina_KO)
 639                             		.loc 1 410 0
 640 0392 61 0B                   		cmp	#0, r11
 641 0394 20 4C                   		beq	.L46
 413:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					uP_Load_Data.status = LOAD_PS_DINAMIC;	
 642                             		.loc 1 413 0
 643 0396 75 3A A0                		or	#0xffffffa0, r10
 644 0399 C7 7A 03                		mov.B	r10, 3[r7]
 414:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					(void)Set_SmallCounter((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER, (SWTC_PrescalerType
 645                             		.loc 1 414 0
 646 039c FB A2 00 00 00 00       		mov.L	#_uPLoad_setting_data, r10
 647 03a2 EC AA                   		mov.L	[r10], r10
 648 03a4 CD A3 04                		mov.B	4[r10], r3
 649 03a7 66 D1                   		mov	#13, r1
 650 03a9 66 32                   		mov	#3, r2
 651 03ab 75 23 7F                		and #0x7f, r3
 652 03ae 05 00 00 00             		bsr	_Set_SmallCounter
 653                             	.LVL50:
 415:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					 (void)SWTC_Stop((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER);
 654                             		.loc 1 415 0
 655 03b2 66 D1                   		mov	#13, r1
 656 03b4 05 00 00 00             		bsr	_SWTC_Stop
 657                             	.LVL51:
 418:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					if (((Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==2) || (Virtual_Sensor_Value[GI_VIRTUAL_SEN
 658                             		.loc 1 418 0
 659 03b8 FB A2 00 00 00 00       		mov.L	#_Virtual_Sensor_Value, r10
 660 03be CC AA                   		mov.B	[r10], r10
 661 03c0 60 1A                   		sub	#1, r10
 662 03c2 5B AA                   		movu.B	r10, r10
 663 03c4 61 1A                   		cmp	#1, r10
 664 03c6 24 20                   		bgtu	.L47
 418:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					if (((Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==2) || (Virtual_Sensor_Value[GI_VIRTUAL_SEN
 665                             		.loc 1 418 0 is_stmt 0 discriminator 1
 666 03c8 FB A2 00 00 00 00       		mov.L	#_GIValid, r10
 667 03ce DC AA                   		mov.W	[r10], r10
 668 03d0 76 2A 00 04             		and #0x400, r10
 669 03d4 5F AA                   		movu.W	r10, r10
 670 03d6 61 0A                   		cmp	#0, r10
 671 03d8 20 0E                   		beq	.L47
 420:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 						uP_Load_Data.pump_act=FALSE;	
 672                             		.loc 1 420 0 is_stmt 1
 673 03da CD 7A 03                		mov.B	3[r7], r10
 674 03dd 7A 1A                   		bclr	#1, r10
 675 03df 0B                      		bra	.L153
 676                             	.L46:
 426:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					uP_Load_Data.status = LOAD_EXE;
 677                             		.loc 1 426 0
 678 03e0 78 5A                   		bset #5, r10
 679                             		.balign 2,3,5
 680                             	.L153:
 681 03e2 C7 7A 03                		mov.B	r10, 3[r7]
 682 03e5 03                      		.balign 2,3,5
 683                             	.L47:
 428:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				uP_Load_Data.init = TRUE;	
 684                             		.loc 1 428 0
 685 03e6 FB 72 00 00 00 00       		mov.L	#_uP_Load_Data, r7
 686 03ec CD 7A 03                		mov.B	3[r7], r10
 687 03ef 78 0A                   		bset	#0, r10
 688 03f1 03                      		.balign 2,3,5
 689                             	.L154:
 690 03f2 C7 7A 03                		mov.B	r10, 3[r7]
 691 03f5 03                      		.balign 2,3,1
 692                             	.L44:
 431:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			(void)SWTC_Stop((SWTC_CountersType)MP_LOAD_PUMP_ACTIVATION); 
 693                             		.loc 1 431 0
 694 03f6 66 F1                   		mov	#15, r1
 695 03f8 05 00 00 00             		bsr	_SWTC_Stop
 696                             	.LVL52:
 432:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			 FltLoadToutData.state = FLT_LOAD_TOUT_INIT;
 697                             		.loc 1 432 0
 698 03fc FB A2 00 00 00 00       		mov.L	#_FltLoadToutData, r10
 699 0402 CC A7                   		mov.B	[r10], r7
 700 0404 75 27 80                		and #0xffffff80, r7
 701 0407 78 07                   		bset #0, r7
 702 0409 C3 A7                   		mov.B	r7, [r10]
 433:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			 uP_Load_Data.time= OFFS_B(Tab_HWCVS_data.Data, 1)& 0x7F;
 703                             		.loc 1 433 0
 704 040b FB 72 00 00 00 00       		mov.L	#_uP_Load_Data, r7
 705 0411 FB A2 00 00 00 00       		mov.L	#_Tab_HWCVS_data, r10
 706 0417 EC AA                   		mov.L	[r10], r10
 707 0419 CD AA 01                		mov.B	1[r10], r10
 708 041c 75 2A 7F                		and #0x7f, r10
 709 041f D7 7A 06                		mov.W	r10, 12[r7]
 710                             	.LBB14:
 711                             	.LBB15:
 911:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	uP_Load_Data.timeAcc = 0;
 712                             		.loc 1 911 0
 713 0422 3D 77 00                		mov.W	#0, 14[r7]
 914:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	(void)Set_SmallCounter((SWTC_CountersType)MP_LOAD_TIMELOAD_S_COUNTER, (SWTC_PrescalerType)COUNTERS
 714                             		.loc 1 914 0
 715 0425 66 E1                   		mov	#14, r1
 716 0427 66 32                   		mov	#3, r2
 717 0429 75 43 7F                		mov	#0x7f, r3
 718                             		.balign 2,3,3
 719                             	.L158:
 720 042c 05 00 00 00             		bsr	_Set_SmallCounter
 721                             	.LVL53:
 722 0430 38 FC 03                		bra	.L157
 723                             	.L41:
 724                             	.LBE15:
 725                             	.LBE14:
 438:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			uP_Load_Data.pump_act=TRUE;
 726                             		.loc 1 438 0
 727 0433 FB 72 00 00 00 00       		mov.L	#_uP_Load_Data, r7
 728 0439 CD 7A 03                		mov.B	3[r7], r10
 729 043c 78 1A                   		bset	#1, r10
 730 043e C7 7A 03                		mov.B	r10, 3[r7]
 439:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			(void)SWTC_Run((SWTC_CountersType)MP_LOAD_PUMP_ACTIVATION);
 731                             		.loc 1 439 0
 732 0441 66 F1                   		mov	#15, r1
 733 0443 05 00 00 00             		bsr	_SWTC_Run
 734                             	.LVL54:
 735 0447 38 E5 03                		bra	.L157
 736                             	.LVL55:
 737                             	.L39:
 447:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (uP_Load_Data.status == LOAD_EXE) 
 738                             		.loc 1 447 0
 739 044a 75 54 20                		cmp	#32, r4
 740 044d 3B 6D 02                		bne	.L48
 450:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if ( loadMode==LOA_PS_CHECK_MODE )
 741                             		.loc 1 450 0
 742 0450 5B 7D                   		movu.B	r7, r13
 743                             	.LVL56:
 744 0452 75 5D 20                		cmp	#32, r13
 745 0455 21 5E                   		bne	.L51
 452:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			if (TESTBIT (uP_PumpCtrl_Data.flags,PUMP_CTRL_UP_RUNNING_BIT) == 0 )
 746                             		.loc 1 452 0
 747 0457 FB D2 00 00 00 00       		mov.L	#_uP_PumpCtrl_Data, r13
 748 045d CD DD 01                		mov.B 1[r13], r13
 749 0460 64 2D                   		and #2, r13
 750 0462 19                      		bne	.L50
 454:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				(void)SWTC_Run((SWTC_CountersType)MP_LOAD_TIMELOAD_S_COUNTER);
 751                             		.loc 1 454 0
 752 0463 66 E1                   		mov	#14, r1
 753 0465 05 00 00 00             		bsr	_SWTC_Run
 754                             	.LVL57:
 755 0469 2E 4A                   		bra	.L51
 756                             	.L50:
 462:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				uP_Load_Data.pump_act=TRUE;
 757                             		.loc 1 462 0
 758 046b 78 1E                   		bset	#1, r14
 759 046d C7 AE 03                		mov.B	r14, 3[r10]
 463:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				if ((Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==0)&&(TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_B
 760                             		.loc 1 463 0
 761 0470 FB D2 00 00 00 00       		mov.L	#_Virtual_Sensor_Value, r13
 762 0476 58 DD                   		movu.B	[r13], r13
 763 0478 61 0D                   		cmp	#0, r13
 764 047a 21 39                   		bne	.L51
 463:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				if ((Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==0)&&(TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_B
 765                             		.loc 1 463 0 is_stmt 0 discriminator 1
 766 047c FB D2 00 00 00 00       		mov.L	#_GIValid, r13
 767 0482 DC DD                   		mov.W	[r13], r13
 768 0484 76 2D 00 04             		and #0x400, r13
 769 0488 5F DD                   		movu.W	r13, r13
 770 048a 61 0D                   		cmp	#0, r13
 771 048c 20 27                   		beq	.L51
 466:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					SETBIT(Flags_1,JIF_FLAG1_UP_TERMINATED_KO_POS);
 772                             		.loc 1 466 0 is_stmt 1
 773 048e 78 4C                   		bset #4, r12
 774 0490 FB 72 00 00 00 00       		mov.L	#_Flags_1, r7
 775                             	.LVL58:
 776 0496 C3 7C                   		mov.B	r12, [r7]
 468:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					IncByteWithCheck(&MachineStatistics.lastCycles[MOST_RECENT_STAT_CYCLE_POS].load_ko);
 777                             		.loc 1 468 0
 778 0498 FB 12 00 00 00 00       		mov.L	#_MachineStatistics+132, r1
 779 049e 05 00 00 00             		bsr	_IncByteWithCheck
 780                             	.LVL59:
 471:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					uP_Load_Data.status = LOAD_TRUE;
 781                             		.loc 1 471 0
 782 04a2 CD A7 03                		mov.B	3[r10], r7
 783 04a5 75 27 1F                		and #31, r7
 472:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					uP_Load_Data.pump_act=FALSE;
 784                             		.loc 1 472 0
 785 04a8 75 37 80                		or	#0xffffff80, r7
 786 04ab 7A 17                   		bclr	#1, r7
 787 04ad C7 A7 03                		mov.B	r7, 3[r10]
 788 04b0 38 7C 03                		bra	.L157
 789                             	.LVL60:
 790                             	.L51:
 478:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	    if ( (PM_PulseCounter_GetWarning() == NO_PULSE_COUNTER_WARNING) && (TESTBIT(Flags_1,JIF_FLAG1_
 791                             		.loc 1 478 0
 792 04b3 05 00 00 00             		bsr	_PM_PulseCounter_GetWarning
 793                             	.LVL61:
 794 04b7 76 21 FF 00             		and #0xff, r1
 795 04bb 3B 2B 01                		bne	.L52
 478:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	    if ( (PM_PulseCounter_GetWarning() == NO_PULSE_COUNTER_WARNING) && (TESTBIT(Flags_1,JIF_FLAG1_
 796                             		.loc 1 478 0 is_stmt 0 discriminator 1
 797 04be FB A2 00 00 00 00       		mov.L	#_Flags_1, r10
 798 04c4 CC AC                   		mov.B [r10], r12
 799 04c6 64 4C                   		and #4, r12
 800 04c8 3B 1E 01                		bne	.L52
 482:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	        if ( FLT_CheckPulseCounterStill(PULSE_COUNTER_STILL_EXE) == TRUE )
 801                             		.loc 1 482 0 is_stmt 1
 802 04cb 66 11                   		mov	#1, r1
 803 04cd 05 00 00 00             		bsr	_FLT_CheckPulseCounterStill
 804                             	.LVL62:
 805 04d1 5B 11                   		movu.B	r1, r1
 806 04d3 61 11                   		cmp	#1, r1
 807 04d5 21 2E                   		bne	.L53
 484:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				SETBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS); 
 808                             		.loc 1 484 0
 809                             	.LVL63:
 810 04d7 F0 A2                   		bset #2, [r10].B
 486:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				if (HWC_Flags.bit.vs_wash_presence)
 811                             		.loc 1 486 0
 812 04d9 FB 72 00 00 00 00       		mov.L	#_HWC_Flags, r7
 813 04df DC 77                   		mov.W	[r7], r7
 814 04e1 75 27 10                		and #16, r7
 815 04e4 5F 77                   		movu.W	r7, r7
 816 04e6 61 07                   		cmp	#0, r7
 817 04e8 20 0E                   		beq	.L54
 488:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					FltWarning.load=TRUE;
 818                             		.loc 1 488 0
 819 04ea FB 72 00 00 00 00       		mov.L	#_FltWarning, r7
 820 04f0 DC 7A                   		mov.W	[r7], r10
 821 04f2 78 0A                   		bset	#0, r10
 822 04f4 D3 7A                   		mov.W	r10, [r7]
 823                             		.balign 2,3,1
 824                             	.L54:
 491:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				FLT_warningSave(FLT_CODE_PULSE_COUNTER, FLT_SUBCODE_PULSE_COUNTER, WRN_PREFAULT);
 825                             		.loc 1 491 0
 826 04f6 66 71                   		mov	#7, r1
 827 04f8 66 12                   		mov	#1, r2
 828 04fa 66 03                   		mov	#0, r3
 829 04fc 05 00 00 00             		bsr	_FLT_warningSave
 830                             	.LVL64:
 831 0500 38 2C 03                		bra	.L157
 832                             	.LVL65:
 833                             	.L53:
 497:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	        if (uP_Load_Data.init == TRUE)
 834                             		.loc 1 497 0
 835 0503 FB 72 00 00 00 00       		mov.L	#_uP_Load_Data, r7
 836                             	.LVL66:
 837 0509 CD 7A 03                		mov.B	3[r7], r10
 838 050c FD 74 CA 01             		tst	#1, r10
 839 0510 20 2C                   		beq	.L55
 499:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	          uP_Load_Data.waterInDWInit = WaterInDW; 
 840                             		.loc 1 499 0
 841 0512 FB A2 00 00 00 00       		mov.L	#_WaterInDW, r10
 842 0518 C4 A7 01                		mov.B	[r10], 1[r7]
 501:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	          WaterLoadedReset();
 843                             		.loc 1 501 0
 844 051b 05 00 00 00             		bsr	_WaterLoadedReset
 845                             	.LVL67:
 505:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	         (void)SWTC_SetSValue((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER, (SWTC_SCounterValue)
 846                             		.loc 1 505 0
 847 051f FB A2 00 00 00 00       		mov.L	#_Tab_LoadFault, r10
 848 0525 EC AA                   		mov.L	[r10], r10
 849 0527 CD A2 09                		mov.B	9[r10], r2
 850 052a 75 41 22                		mov	#34, r1
 851 052d 75 22 7F                		and #0x7f, r2
 852 0530 05 00 00 00             		bsr	_SWTC_SetSValue
 853                             	.LVL68:
 507:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	          uP_Load_Data.init = FALSE;
 854                             		.loc 1 507 0
 855 0534 CD 7A 03                		mov.B	3[r7], r10
 856 0537 7A 0A                   		bclr	#0, r10
 857 0539 C7 7A 03                		mov.B	r10, 3[r7]
 858                             		.balign 2,3,3
 859                             	.L55:
 513:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	        FLT_PulseCounterCheckDelay_Mgmt();
 860                             		.loc 1 513 0
 861 053c 05 00 00 00             		bsr	_FLT_PulseCounterCheckDelay_Mgmt
 862                             	.LVL69:
 515:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	        WaterInDW = ( uP_Load_Data.waterInDWInit + GIWaterLoaded );		 /* aggiornamento acqua in va
 863                             		.loc 1 515 0
 864 0540 FB 72 00 00 00 00       		mov.L	#_GIWaterLoaded, r7
 865 0546 DC 77                   		mov.W	[r7], r7
 866 0548 FB A2 00 00 00 00       		mov.L	#_uP_Load_Data, r10
 867 054e CD AC 01                		mov.B	1[r10], r12
 868 0551 4B 7C                   		add	r7, r12
 869 0553 FB D2 00 00 00 00       		mov.L	#_WaterInDW, r13
 870 0559 C3 DC                   		mov.B	r12, [r13]
 517:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			if ( WaterInDW >= uP_Load_Data.tgWater )
 871                             		.loc 1 517 0
 872 055b 5B CC                   		movu.B	r12, r12
 873                             	.LVL70:
 874 055d 45 AC 02                		cmp	2[r10].UB, r12
 875                             	.LVL71:
 876 0560 23 70                   		bltu	.L56
 520:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				TempCycle_Stats.loaded_water += WaterInDW;		/* Aggiornamento statistica acqua caricata*/
 877                             		.loc 1 520 0
 878 0562 FB A2 00 00 00 00       		mov.L	#_TempCycle_Stats, r10
 879 0568 06 49 AC 06             		add	12[r10].W, r12
 880                             	.LVL72:
 881 056c D7 AC 06                		mov.W	r12, 12[r10]
 521:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				cycle_loaded_water += GIWaterLoaded;
 882                             		.loc 1 521 0
 883 056f FB A2 00 00 00 00       		mov.L	#_cycle_loaded_water, r10
 884 0575 5F 77                   		movu.W	r7, r7
 885 0577 06 88 A7                		add	[r10].L, r7
 886 057a E3 A7                   		mov.L	r7, [r10]
 523:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				LOA_levTOtimeRef_Update(); 
 887                             		.loc 1 523 0
 888 057c 05 00 00 00             		bsr	_LOA_levTOtimeRef_Update
 889                             	.LVL73:
 525:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				(void)SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
 890                             		.loc 1 525 0
 891 0580 75 41 23                		mov	#35, r1
 892 0583 05 00 00 00             		bsr	_SWTC_Stop
 893                             	.LVL74:
 530:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				if ( isFullRequested )
 894                             		.loc 1 530 0
 895 0587 61 0B                   		cmp	#0, r11
 896 0589 20 35                   		beq	.L58
 533:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					if (TESTBIT (uP_PumpCtrl_Data.flags,PUMP_CTRL_UP_RUNNING_BIT) == 0)
 897                             		.loc 1 533 0
 898 058b FB 72 00 00 00 00       		mov.L	#_uP_PumpCtrl_Data, r7
 899 0591 88 7F                   		mov.B 1[r7], r7
 900 0593 64 27                   		and #2, r7
 901 0595 21 29                   		bne	.L58
 536:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 						FltLoadToutData.state = FLT_LOAD_TOUT_DISABLE;		 /* disabilito Tout F05 - sub 3 perch� � 
 902                             		.loc 1 536 0
 903 0597 FB 72 00 00 00 00       		mov.L	#_FltLoadToutData, r7
 904 059d CC 7A                   		mov.B	[r7], r10
 905 059f 75 2A 80                		and #0xffffff80, r10
 906 05a2 C3 7A                   		mov.B	r10, [r7]
 538:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 						if ( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )
 907                             		.loc 1 538 0
 908 05a4 FB 72 00 00 00 00       		mov.L	#_GICriteria, r7
 909 05aa CC 77                   		mov.B	[r7], r7
 910 05ac FD 74 C7 01             		tst	#1, r7
 911 05b0 21 0E                   		bne	.L58
 541:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 							SETBIT(FltFlagsKO,WARNING_LOADPP_KO);
 912                             		.loc 1 541 0
 913 05b2 FB 72 00 00 00 00       		mov.L	#_FltFlagsKO, r7
 914 05b8 DC 7A                   		mov.W	[r7], r10
 915 05ba 78 2A                   		bset #2, r10
 916 05bc D3 7A                   		mov.W	r10, [r7]
 917                             		.balign 2,3,5
 918                             	.L58:
 547:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****           		uP_Load_Data.status = LOAD_TRUE;
 919                             		.loc 1 547 0
 920 05be FB A2 00 00 00 00       		mov.L	#_uP_Load_Data, r10
 921 05c4 CD A7 03                		mov.B	3[r10], r7
 922 05c7 75 27 1F                		and #31, r7
 923 05ca 75 37 80                		or	#0xffffff80, r7
 924 05cd C7 A7 03                		mov.B	r7, 3[r10]
 925                             	.LVL75:
 926                             		.balign 2,3,5
 927                             	.L56:
 555:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	        LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b = EV_ON; /* pilotaggio EV*/ 
 928                             		.loc 1 555 0
 929 05d0 FB 72 00 00 00 00       		mov.L	#_EV_Pos, r7
 930 05d6 58 77                   		movu.B	[r7], r7
 931 05d8 FB A2 00 00 00 00       		mov.L	#_LoadsReq_New, r10
 932 05de 66 1C                   		mov	#1, r12
 933                             	.LVL76:
 934 05e0 FE 07 AC                		mov.B	r12, [r7,r10]
 935 05e3 38 D7 00                		bra	.L48
 936                             	.LVL77:
 937                             	.L52:
 561:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	   		if (( loadMode==LOA_PS_CHECK_MODE )&& (TESTBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS)))
 938                             		.loc 1 561 0
 939 05e6 5B 7A                   		movu.B	r7, r10
 940 05e8 75 5A 20                		cmp	#32, r10
 941 05eb 21 32                   		bne	.L60
 561:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	   		if (( loadMode==LOA_PS_CHECK_MODE )&& (TESTBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS)))
 942                             		.loc 1 561 0 is_stmt 0 discriminator 1
 943 05ed FB A2 00 00 00 00       		mov.L	#_Flags_1, r10
 944 05f3 CC AA                   		mov.B [r10], r10
 945 05f5 64 4A                   		and #4, r10
 946 05f7 20 26                   		beq	.L60
 565:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				uP_Load_Data.init = TRUE;
 947                             		.loc 1 565 0 is_stmt 1
 948 05f9 FB 72 00 00 00 00       		mov.L	#_uP_Load_Data, r7
 949                             	.LVL78:
 950 05ff CD 7A 03                		mov.B	3[r7], r10
 951 0602 78 0A                   		bset	#0, r10
 952 0604 C7 7A 03                		mov.B	r10, 3[r7]
 566:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b = EV_ON; /* pilotaggio EV*/ 
 953                             		.loc 1 566 0
 954 0607 FB 72 00 00 00 00       		mov.L	#_EV_Pos, r7
 955 060d 58 77                   		movu.B	[r7], r7
 956 060f FB A2 00 00 00 00       		mov.L	#_LoadsReq_New, r10
 957 0615 66 1D                   		mov	#1, r13
 958 0617 FE 07 AD                		mov.B	r13, [r7,r10]
 959 061a 38 12 02                		bra	.L157
 960                             	.LVL79:
 961                             	.L60:
 569:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			if ( TESTBIT (uP_PumpCtrl_Data.flags,PUMP_CTRL_UP_RUNNING_BIT) != 0 )
 962                             		.loc 1 569 0
 963 061d FB A2 00 00 00 00       		mov.L	#_uP_PumpCtrl_Data, r10
 964 0623 CD AC 01                		mov.B 1[r10], r12
 965 0626 64 2C                   		and #2, r12
 966 0628 20 51                   		beq	.L61
 572:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				if ( loadMode==LOA_PS_CHECK_MODE )
 967                             		.loc 1 572 0
 968 062a 5B 77                   		movu.B	r7, r7
 969                             	.LVL80:
 970 062c 75 57 20                		cmp	#32, r7
 971 062f 21 2E                   		bne	.L62
 574:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					(void)Set_SmallCounter((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER, (SWTC_PrescalerType
 972                             		.loc 1 574 0
 973 0631 FB 72 00 00 00 00       		mov.L	#_uPLoad_setting_data, r7
 974                             	.LVL81:
 975 0637 EC 77                   		mov.L	[r7], r7
 976 0639 89 73                   		mov.B	4[r7], r3
 977 063b 66 D1                   		mov	#13, r1
 978 063d 66 32                   		mov	#3, r2
 979 063f 75 23 7F                		and #0x7f, r3
 980 0642 05 00 00 00             		bsr	_Set_SmallCounter
 981                             	.LVL82:
 575:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					 (void)SWTC_Stop((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER);
 982                             		.loc 1 575 0
 983 0646 66 D1                   		mov	#13, r1
 984 0648 05 00 00 00             		bsr	_SWTC_Stop
 985                             	.LVL83:
 576:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					uP_Load_Data.status = LOAD_PS_DINAMIC;
 986                             		.loc 1 576 0
 987 064c FB A2 00 00 00 00       		mov.L	#_uP_Load_Data, r10
 988 0652 CD A7 03                		mov.B	3[r10], r7
 989 0655 75 27 1F                		and #31, r7
 990 0658 75 37 A0                		or	#0xffffffa0, r7
 991 065b 2E 5B                   		bra	.L155
 992                             	.LVL84:
 993                             	.L62:
 580:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				   (void)Set_SmallCounter((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER, (SWTC_PrescalerTy
 994                             		.loc 1 580 0
 995 065d 66 D1                   		mov	#13, r1
 996 065f 66 12                   		mov	#1, r2
 997 0661 75 43 28                		mov	#40, r3
 998 0664 05 00 00 00             		bsr	_Set_SmallCounter
 999                             	.LVL85:
 582:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			   		uP_Load_Data.status = LOAD_EXE_PP; 		
 1000                             		.loc 1 582 0
 1001 0668 FB A2 00 00 00 00       		mov.L	#_uP_Load_Data, r10
 1002 066e CD A7 03                		mov.B	3[r10], r7
 1003                             	.LVL86:
 1004 0671 75 27 1F                		and #31, r7
 1005 0674 75 37 60                		or	#0x60, r7
 1006 0677 2E 3F                   		bra	.L155
 1007                             	.LVL87:
 1008                             	.L61:
 590:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				loadingWater =  (uP_Load_Data.tgWater - WaterInDW);	 /* cos� si tiene conto dell'acqua carica
 1009                             		.loc 1 590 0
 1010 0679 FB A2 00 00 00 00       		mov.L	#_uP_Load_Data, r10
 1011 067f CD A1 02                		mov.B	2[r10], r1
 1012 0682 FB D2 00 00 00 00       		mov.L	#_WaterInDW, r13
 1013 0688 CC DD                   		mov.B	[r13], r13
 1014                             	.LVL88:
 593:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				if (  loadMode!=LOA_PS_CHECK_MODE )
 1015                             		.loc 1 593 0
 1016 068a 5B 77                   		movu.B	r7, r7
 1017                             	.LVL89:
 1018 068c 75 57 20                		cmp	#32, r7
 1019 068f 20 19                   		beq	.L63
 597:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				    uP_Load_Data.time = LOA_levTOtime_Conv(loadingWater); /* Calcolo tempo totale di caricament
 1020                             		.loc 1 597 0
 1021 0691 43 D1                   		sub	r13, r1
 1022                             	.LVL90:
 1023 0693 05 00 00 00             		bsr	_LOA_levTOtime_Conv
 1024                             	.LVL91:
 1025 0697 D7 A1 06                		mov.W	r1, 12[r10]
 1026                             	.LBB16:
 1027                             	.LBB17:
 911:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	uP_Load_Data.timeAcc = 0;
 1028                             		.loc 1 911 0
 1029 069a D7 AC 07                		mov.W	r12, 14[r10]
 914:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	(void)Set_SmallCounter((SWTC_CountersType)MP_LOAD_TIMELOAD_S_COUNTER, (SWTC_PrescalerType)COUNTERS
 1030                             		.loc 1 914 0
 1031 069d 66 E1                   		mov	#14, r1
 1032 069f 66 32                   		mov	#3, r2
 1033 06a1 75 43 7F                		mov	#0x7f, r3
 1034 06a4 05 00 00 00             		bsr	_Set_SmallCounter
 1035                             	.LVL92:
 1036                             		.balign 2,3,5
 1037                             	.L63:
 1038                             	.LBE17:
 1039                             	.LBE16:
 601:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	            uP_Load_Data.status = LOAD_EXE_TIME;
 1040                             		.loc 1 601 0
 1041 06a8 FB A2 00 00 00 00       		mov.L	#_uP_Load_Data, r10
 1042 06ae CD A7 03                		mov.B	3[r10], r7
 1043                             	.LVL93:
 1044 06b1 75 27 1F                		and #31, r7
 1045 06b4 78 67                   		bset #6, r7
 1046                             		.balign 2,3,5
 1047                             	.L155:
 1048 06b6 C7 A7 03                		mov.B	r7, 3[r10]
 1049 06b9 03                      		.balign 2,3,5
 1050                             	.L48:
 610:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (uP_Load_Data.status == LOAD_EXE_PP)
 1051                             		.loc 1 610 0
 1052 06ba FB 72 00 00 00 00       		mov.L	#_uP_Load_Data, r7
 1053 06c0 CD 7A 03                		mov.B	3[r7], r10
 1054 06c3 76 2A E0 00             		and #0xe0, r10
 1055 06c7 75 5A 60                		cmp	#0x60, r10
 1056 06ca 21 56                   		bne	.L64
 614:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	if ( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) != 0 )
 1057                             		.loc 1 614 0
 1058 06cc FB A2 00 00 00 00       		mov.L	#_GICriteria, r10
 1059 06d2 CC AA                   		mov.B	[r10], r10
 617:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	  (void)SWTC_Run((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER);
 1060                             		.loc 1 617 0
 1061 06d4 66 D1                   		mov	#13, r1
 614:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	if ( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) != 0 )
 1062                             		.loc 1 614 0
 1063 06d6 FD 74 CA 01             		tst	#1, r10
 1064 06da 20 2B                   		beq	.L65
 617:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	  (void)SWTC_Run((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER);
 1065                             		.loc 1 617 0
 1066 06dc 05 00 00 00             		bsr	_SWTC_Run
 1067                             	.LVL94:
 619:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	  if ( SWTC_IsExpired((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER) )
 1068                             		.loc 1 619 0
 1069 06e0 66 D1                   		mov	#13, r1
 1070 06e2 05 00 00 00             		bsr	_SWTC_IsExpired
 1071                             	.LVL95:
 1072 06e6 61 01                   		cmp	#0, r1
 1073 06e8 20 24                   		beq	.L66
 622:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				(void)SWTC_Stop((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER);
 1074                             		.loc 1 622 0
 1075 06ea 66 D1                   		mov	#13, r1
 1076 06ec 05 00 00 00             		bsr	_SWTC_Stop
 1077                             	.LVL96:
 625:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				LOA_levTOtimeRef_Update(); 
 1078                             		.loc 1 625 0
 1079 06f0 05 00 00 00             		bsr	_LOA_levTOtimeRef_Update
 1080                             	.LVL97:
 628:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				LOA_waterInDW_defUpdate();
 1081                             		.loc 1 628 0
 1082 06f4 05 00 00 00             		bsr	_LOA_waterInDW_defUpdate
 1083                             	.LVL98:
 633:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****     	    	uP_Load_Data.status = LOAD_TRUE;  
 1084                             		.loc 1 633 0
 1085 06f8 CD 7A 03                		mov.B	3[r7], r10
 1086 06fb 75 2A 1F                		and #31, r10
 1087 06fe 75 3A 80                		or	#0xffffff80, r10
 1088 0701 C7 7A 03                		mov.B	r10, 3[r7]
 1089 0704 08                      		bra	.L66
 1090                             	.L65:
 643:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		  (void) SWTC_SetSValue ((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER, (SWTC_SCounterValue)
 1091                             		.loc 1 643 0
 1092 0705 75 42 28                		mov	#40, r2
 1093 0708 05 00 00 00             		bsr	_SWTC_SetSValue
 1094                             	.LVL99:
 1095                             		.balign 2,3,5
 1096                             	.L66:
 648:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b = EV_ON; /* pilotaggio EV*/
 1097                             		.loc 1 648 0
 1098 070c FB 72 00 00 00 00       		mov.L	#_EV_Pos, r7
 1099 0712 58 77                   		movu.B	[r7], r7
 1100 0714 FB A2 00 00 00 00       		mov.L	#_LoadsReq_New, r10
 1101 071a 66 1C                   		mov	#1, r12
 1102 071c FE 07 AC                		mov.B	r12, [r7,r10]
 1103 071f 03                      		.balign 2,3,5
 1104                             	.L64:
 652:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (uP_Load_Data.status == LOAD_EXE_TIME)
 1105                             		.loc 1 652 0
 1106 0720 FB 72 00 00 00 00       		mov.L	#_uP_Load_Data, r7
 1107 0726 CD 7A 03                		mov.B	3[r7], r10
 1108 0729 76 2A E0 00             		and #0xe0, r10
 1109 072d 75 5A 40                		cmp	#64, r10
 1110 0730 3B 9E 00                		bne	.L67
 1111                             	.LBB18:
 1112                             	.LBB19:
 939:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	timeElapsed_tmp = (uP_Load_Data.timeAcc + (SWTC_TimeType)SWTC_GetElapsedTime((SWTC_CountersType)MP
 1113                             		.loc 1 939 0
 1114 0733 DD 7A 07                		mov.W	14[r7], r10
 1115 0736 66 E1                   		mov	#14, r1
 1116 0738 05 00 00 00             		bsr	_SWTC_GetElapsedTime
 1117                             	.LVL100:
 1118 073c 4B A1                   		add	r10, r1
 1119                             	.LVL101:
 941:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (timeElapsed_tmp >= uP_Load_Data.time)
 1120                             		.loc 1 941 0
 1121 073e 5D 7C 06                		movu.W	12[r7], r12
 1122 0741 5F 1A                   		movu.W	r1, r10
 945:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		(void)SWTC_Stop((SWTC_CountersType)MP_LOAD_TIMELOAD_S_COUNTER);
 1123                             		.loc 1 945 0
 1124 0743 66 E1                   		mov	#14, r1
 941:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (timeElapsed_tmp >= uP_Load_Data.time)
 1125                             		.loc 1 941 0
 1126 0745 47 AC                   		cmp	r10, r12
 1127 0747 24 14                   		bgtu	.L68
 945:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		(void)SWTC_Stop((SWTC_CountersType)MP_LOAD_TIMELOAD_S_COUNTER);
 1128                             		.loc 1 945 0
 1129 0749 05 00 00 00             		bsr	_SWTC_Stop
 1130                             	.LVL102:
 1131                             	.LBE19:
 1132                             	.LBE18:
 656:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			uP_Load_Data.turbina_KO=TRUE;
 1133                             		.loc 1 656 0
 1134 074d CD 7A 03                		mov.B	3[r7], r10
 1135 0750 78 3A                   		bset	#3, r10
 1136 0752 C7 7A 03                		mov.B	r10, 3[r7]
 658:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			if (isFullRequested)
 1137                             		.loc 1 658 0
 1138 0755 61 0B                   		cmp	#0, r11
 1139 0757 21 27                   		bne	.L69
 1140 0759 2E 4D                   		bra	.L148
 1141                             	.L68:
 1142                             	.LBB21:
 1143                             	.LBB20:
 951:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if ( SWTC_IsExpired((SWTC_CountersType)MP_LOAD_TIMELOAD_S_COUNTER) )
 1144                             		.loc 1 951 0
 1145 075b 05 00 00 00             		bsr	_SWTC_IsExpired
 1146                             	.LVL103:
 1147 075f 61 01                   		cmp	#0, r1
 1148 0761 20 15                   		beq	.L71
 956:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			uP_Load_Data.timeAcc += TOUT_MAX_COUNTER;
 1149                             		.loc 1 956 0
 1150 0763 DD 7A 07                		mov.W	14[r7], r10
 1151 0766 71 AA 7F                		add	#0x7f, r10
 1152 0769 D7 7A 07                		mov.W	r10, 14[r7]
 960:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			(void)SWTC_SetSValue ((SWTC_CountersType)MP_LOAD_TIMELOAD_S_COUNTER,(SWTC_SCounterValue)TOUT_MAX
 1153                             		.loc 1 960 0
 1154 076c 66 E1                   		mov	#14, r1
 1155 076e 75 42 7F                		mov	#0x7f, r2
 1156 0771 05 00 00 00             		bsr	_SWTC_SetSValue
 1157                             	.LVL104:
 1158 0775 03                      		.balign 2,3,1
 1159                             	.L71:
 962:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****  		(void)SWTC_Run((SWTC_CountersType)MP_LOAD_TIMELOAD_S_COUNTER);
 1160                             		.loc 1 962 0
 1161 0776 66 E1                   		mov	#14, r1
 1162 0778 05 00 00 00             		bsr	_SWTC_Run
 1163                             	.LVL105:
 1164 077c 2E 3E                   		bra	.L72
 1165                             	.L69:
 1166                             	.LBE20:
 1167                             	.LBE21:
 662:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				if ( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) != 0 )	
 1168                             		.loc 1 662 0
 1169 077e FB B2 00 00 00 00       		mov.L	#_GICriteria, r11
 1170 0784 CC B1                   		mov.B	[r11], r1
 1171 0786 64 11                   		and	#1, r1
 1172 0788 13                      		beq	.L73
 1173 0789 2E 1D                   		bra	.L148
 1174                             	.L73:
 673:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				else if (FltLoadToutData.state == FLT_LOAD_TOUT_END)
 1175                             		.loc 1 673 0
 1176 078b FB B2 00 00 00 00       		mov.L	#_FltLoadToutData, r11
 1177 0791 CC BB                   		mov.B	[r11], r11
 1178 0793 75 2B 7F                		and #0x7f, r11
 1179 0796 61 3B                   		cmp	#3, r11
 1180 0798 21 22                   		bne	.L72
 677:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****         			uP_Load_Data.status = LOAD_TRUE;
 1181                             		.loc 1 677 0
 1182 079a 75 2A 1F                		and #31, r10
 1183 079d 75 3A 80                		or	#0xffffff80, r10
 1184                             		.balign 2,3,5
 1185                             	.L156:
 1186 07a0 C7 7A 03                		mov.B	r10, 3[r7]
 1187 07a3 38 1D 01                		bra	.L16
 1188                             	.L148:
 690:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****         		LOA_levTOtimeRef_Update(); 
 1189                             		.loc 1 690 0
 1190 07a6 05 00 00 00             		bsr	_LOA_levTOtimeRef_Update
 1191                             	.LVL106:
 693:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   				LOA_waterInDW_defUpdate();
 1192                             		.loc 1 693 0
 1193 07aa 05 00 00 00             		bsr	_LOA_waterInDW_defUpdate
 1194                             	.LVL107:
 695:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****         		uP_Load_Data.status = LOAD_TRUE;				
 1195                             		.loc 1 695 0
 1196 07ae CD 7A 03                		mov.B	3[r7], r10
 1197 07b1 75 2A 1F                		and #31, r10
 1198 07b4 75 3A 80                		or	#0xffffff80, r10
 1199 07b7 C7 7A 03                		mov.B	r10, 3[r7]
 1200                             		.balign 2,3,5
 1201                             	.L72:
 706:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b = EV_ON; /* pilotaggio EV*/
 1202                             		.loc 1 706 0
 1203 07ba FB 72 00 00 00 00       		mov.L	#_EV_Pos, r7
 1204 07c0 58 77                   		movu.B	[r7], r7
 1205 07c2 FB A2 00 00 00 00       		mov.L	#_LoadsReq_New, r10
 1206 07c8 66 1D                   		mov	#1, r13
 1207 07ca FE 07 AD                		mov.B	r13, [r7,r10]
 1208 07cd 03                      		.balign 2,3,5
 1209                             	.L67:
 712:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	if (uP_Load_Data.status == LOAD_PS_DINAMIC)
 1210                             		.loc 1 712 0
 1211 07ce FB 72 00 00 00 00       		mov.L	#_uP_Load_Data, r7
 1212 07d4 CD 7A 03                		mov.B	3[r7], r10
 1213 07d7 EF AB                   		mov.L	r10, r11
 1214 07d9 76 2B E0 00             		and #0xe0, r11
 1215 07dd 75 5B A0                		cmp	#0xa0, r11
 1216 07e0 3B B2 00                		bne	.L74
 719:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		if (TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_WASH)) )
 1217                             		.loc 1 719 0
 1218 07e3 FB B2 00 00 00 00       		mov.L	#_GIValid, r11
 1219 07e9 DC BB                   		mov.W	[r11], r11
 1220 07eb 76 2B 00 04             		and #0x400, r11
 1221 07ef 5F BB                   		movu.W	r11, r11
 1222 07f1 61 0B                   		cmp	#0, r11
 1223 07f3 3A 99 00                		beq	.L75
 721:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			if ((Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==0) )
 1224                             		.loc 1 721 0
 1225 07f6 FB B2 00 00 00 00       		mov.L	#_Virtual_Sensor_Value, r11
 1226 07fc CC BB                   		mov.B	[r11], r11
 1227 07fe 5B BC                   		movu.B	r11, r12
 1228 0800 61 0C                   		cmp	#0, r12
 1229 0802 21 2F                   		bne	.L76
 723:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				if ( !uP_Load_Data.pump_act)
 1230                             		.loc 1 723 0
 1231 0804 EF AC                   		mov.L	r10, r12
 1232 0806 64 2C                   		and #2, r12
 1233 0808 21 29                   		bne	.L76
 725:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					SETBIT(Flags_1,JIF_FLAG1_UP_TERMINATED_KO_POS);
 1234                             		.loc 1 725 0
 1235 080a FB A2 00 00 00 00       		mov.L	#_Flags_1, r10
 1236 0810 F0 A4                   		bset #4, [r10].B
 728:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					IncByteWithCheck(&MachineStatistics.lastCycles[MOST_RECENT_STAT_CYCLE_POS].load_ko);
 1237                             		.loc 1 728 0
 1238 0812 FB 12 00 00 00 00       		mov.L	#_MachineStatistics+132, r1
 1239 0818 05 00 00 00             		bsr	_IncByteWithCheck
 1240                             	.LVL108:
 732:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					LOA_waterInDW_defUpdate();
 1241                             		.loc 1 732 0
 1242 081c 05 00 00 00             		bsr	_LOA_waterInDW_defUpdate
 1243                             	.LVL109:
 734:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					uP_Load_Data.status = LOAD_TRUE;
 1244                             		.loc 1 734 0
 1245 0820 CD 7A 03                		mov.B	3[r7], r10
 1246 0823 75 2A 1F                		and #31, r10
 1247 0826 75 3A 80                		or	#0xffffff80, r10
 1248 0829 C7 7A 03                		mov.B	r10, 3[r7]
 1249                             	.LVL110:
 1250                             		.balign 2,3,1
 1251                             	.L157:
 735:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					return S_FALSE;
 1252                             		.loc 1 735 0
 1253 082c 66 11                   		mov	#1, r1
 1254 082e 38 92 00                		bra	.L16
 1255                             	.LVL111:
 1256                             	.L76:
 739:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			if ((Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==2) || (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR
 1257                             		.loc 1 739 0
 1258 0831 60 1B                   		sub	#1, r11
 1259 0833 5B BB                   		movu.B	r11, r11
 1260 0835 61 1B                   		cmp	#1, r11
 1261 0837 24 1B                   		bgtu	.L77
 741:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				if ( uP_Load_Data.pump_act)
 1262                             		.loc 1 741 0
 1263 0839 64 2A                   		and #2, r10
 1264 083b 20 11                   		beq	.L78
 743:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					uP_Load_Data.pump_act=FALSE;
 1265                             		.loc 1 743 0
 1266 083d FB 72 00 00 00 00       		mov.L	#_uP_Load_Data, r7
 1267 0843 CD 7A 03                		mov.B	3[r7], r10
 1268 0846 7A 1A                   		bclr	#1, r10
 1269 0848 C7 7A 03                		mov.B	r10, 3[r7]
 1270 084b 0F                      		bra	.L77
 1271                             	.L78:
 746:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 					(void)SWTC_Run((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER);
 1272                             		.loc 1 746 0
 1273 084c 66 D1                   		mov	#13, r1
 1274 084e 05 00 00 00             		bsr	_SWTC_Run
 1275                             	.LVL112:
 1276                             		.balign 2,3,1
 1277                             	.L77:
 749:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			if ( SWTC_IsExpired((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER) )
 1278                             		.loc 1 749 0
 1279 0852 66 D1                   		mov	#13, r1
 1280 0854 05 00 00 00             		bsr	_SWTC_IsExpired
 1281                             	.LVL113:
 1282 0858 61 01                   		cmp	#0, r1
 1283 085a 20 1E                   		beq	.L79
 752:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				(void)SWTC_Stop((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER);
 1284                             		.loc 1 752 0
 1285 085c 66 D1                   		mov	#13, r1
 1286 085e 05 00 00 00             		bsr	_SWTC_Stop
 1287                             	.LVL114:
 754:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				LOA_waterInDW_defUpdate();
 1288                             		.loc 1 754 0
 1289 0862 05 00 00 00             		bsr	_LOA_waterInDW_defUpdate
 1290                             	.LVL115:
 756:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 				uP_Load_Data.status = LOAD_TRUE;
 1291                             		.loc 1 756 0
 1292 0866 FB A2 00 00 00 00       		mov.L	#_uP_Load_Data, r10
 1293 086c CD A7 03                		mov.B	3[r10], r7
 1294 086f 75 27 1F                		and #31, r7
 1295 0872 75 37 80                		or	#0xffffff80, r7
 1296 0875 C7 A7 03                		mov.B	r7, 3[r10]
 1297                             		.balign 2,3,5
 1298                             	.L79:
 760:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b = EV_ON; /* pilotaggio EV*/
 1299                             		.loc 1 760 0
 1300 0878 FB 72 00 00 00 00       		mov.L	#_EV_Pos, r7
 1301 087e 58 77                   		movu.B	[r7], r7
 1302 0880 FB A2 00 00 00 00       		mov.L	#_LoadsReq_New, r10
 1303 0886 66 1B                   		mov	#1, r11
 1304 0888 FE 07 AB                		mov.B	r11, [r7,r10]
 1305 088b 0F                      		bra	.L74
 1306                             	.L75:
 763:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			 (void)SWTC_Stop((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER);
 1307                             		.loc 1 763 0
 1308 088c 66 D1                   		mov	#13, r1
 1309 088e 05 00 00 00             		bsr	_SWTC_Stop
 1310                             	.LVL116:
 1311                             		.balign 2,3,5
 1312                             	.L74:
 769:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c ****   if (uP_Load_Data.status == LOAD_TRUE)
 1313                             		.loc 1 769 0
 1314 0892 FB 72 00 00 00 00       		mov.L	#_uP_Load_Data, r7
 1315 0898 88 FF                   		mov.B	3[r7], r7
 1316 089a 76 27 E0 00             		and #0xe0, r7
 1317 089e 75 57 80                		cmp	#0x80, r7
 1318 08a1 21 8B                   		bne	.L157
 775:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		Flag_levTOtimeRef_update = FALSE;
 1319                             		.loc 1 775 0
 1320 08a3 FB 72 00 00 00 00       		mov.L	#_Flag_levTOtimeRef_update, r7
 1321 08a9 3E 70 00                		mov.L	#0, [r7]
 777:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		LOA_disableLoadCounters();  /* disabilitazione contatori */
 1322                             		.loc 1 777 0
 1323 08ac 05 00 00 00             		bsr	_LOA_disableLoadCounters
 1324                             	.LVL117:
 780:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 		WaterTemp_At_CycleStart = GITemp;
 1325                             		.loc 1 780 0
 1326 08b0 FB A2 00 00 00 00       		mov.L	#_GITemp, r10
 1327 08b6 FB 72 00 00 00 00       		mov.L	#_WaterTemp_At_CycleStart, r7
 1328 08bc C0 A7                   		mov.B	[r10], [r7]
 1329                             		.balign 2,3,1
 1330                             	.L81:
 229:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 			return S_OK;
 1331                             		.loc 1 229 0
 1332 08be 66 01                   		mov	#0, r1
 1333                             	.LVL118:
 1334                             		.balign 2,3,2
 1335                             	.L16:
 790:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** }
 1336                             		.loc 1 790 0
 1337 08c0 75 21 11                		and #17, r1
 1338 08c3 3F 7D 08                		rtsd	#32, r7-r13
 1339                             	.LFE0:
 1341                             		.section	.text.LOA_timeTOlev_Conv,"ax",@progbits
 1342                             		.global	_LOA_timeTOlev_Conv
 1344                             	_LOA_timeTOlev_Conv:
 1345                             	.LFB3:
 890:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** {
 1346                             		.loc 1 890 0
 1347                             	.LVL119:
 891:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** 	return ((uint8_t)(((uint32_t)time * (FULL_REF_LEVEL)) / uP_Load_Data.levTOtimeRef));
 1348                             		.loc 1 891 0
 1349 0000 5F 11                   		movu.W	r1, r1
 1350 0002 FB E2 00 00 00 00       		mov.L	#_Tab_HWCPressSensorData, r14
 1351 0008 EC EE                   		mov.L	[r14], r14
 1352 000a 4D E1 05                		mul	5[r14].UB, r1
 1353                             	.LVL120:
 1354 000d FB E2 00 00 00 00       		mov.L	#_uP_Load_Data, r14
 1355 0013 FC 24 E1                		divu	[r14].UB, r1
 892:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Load.c **** }
 1356                             		.loc 1 892 0
 1357 0016 5B 11                   		movu.B	r1, r1
 1358 0018 02                      		rts
 1359                             	.LFE3:
 1455                             	.Letext0:
 1456                             		.file 2 "C:\\Workspace\\FW_Inertia\\branch_indesit\\HAL\\HAL_General/StandardTypes.h"
 1457                             		.file 3 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_SwTimersCounters/SwTimersCo
 1458                             		.file 4 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_Library/LIB_Utilities.h"
 1459                             		.file 5 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\General/CstmDefines.h"
 1460                             		.file 6 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Application_Platform/APP_Types.h"
 1461                             		.file 7 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_BusCOMM/BCP_General.h"
 1462                             		.file 8 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\General/CstmTypes.h"
 1463                             		.file 9 "C:\\Workspace\\FW_Inertia\\branch_indesit\\PlatformLibrary\\LIB_IOManager/OutputManagerEx
 1464                             		.file 10 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\General/CstmGlobal.h"
 1465                             		.file 11 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_BusCOMM/BCP_BusCommMng.h"
 1466                             		.file 12 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Application_Platform/APP_Global.h"
 1467                             		.file 13 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Application_Platform/APP_FuncLib.h"
 1468                             		.file 14 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\General/CstmFuncLib.h"
 1469                             		.file 15 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_PulseCounter/PM_PulseCount
 1470                             		.file 16 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\Control/DW_Fault.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Load.c
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6      .text.LOA_waterInDW_defUpdate:00000000 _LOA_waterInDW_defUpdate
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:10     .text.LOA_waterInDW_defUpdate:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:34     .text.LOA_disableLoadCounters:00000000 _LOA_disableLoadCounters
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:38     .text.LOA_disableLoadCounters:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:57     .text.LOA_levTOtimeRef_Update:00000000 _LOA_levTOtimeRef_Update
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:61     .text.LOA_levTOtimeRef_Update:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:128    .text.LOA_levTOtime_Conv:00000000 _LOA_levTOtime_Conv
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:133    .text.LOA_levTOtime_Conv:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:147    .text.LOA_uP_Load_Exe:00000000 _LOA_uP_Load_Exe
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:151    .text.LOA_uP_Load_Exe:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1344   .text.LOA_timeTOlev_Conv:00000000 _LOA_timeTOlev_Conv
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1349   .text.LOA_timeTOlev_Conv:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1362   .debug_frame:00000000 .Lframe0
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7      .text.LOA_waterInDW_defUpdate:00000000 .LFB6
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:35     .text.LOA_disableLoadCounters:00000000 .LFB7
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:58     .text.LOA_levTOtimeRef_Update:00000000 .LFB1
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:129    .text.LOA_levTOtime_Conv:00000000 .LFB2
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:148    .text.LOA_uP_Load_Exe:00000000 .LFB0
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1345   .text.LOA_timeTOlev_Conv:00000000 .LFB3
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:5109   .debug_abbrev:00000000 .Ldebug_abbrev0
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6657   .debug_str:00000496 .LASF352
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6677   .debug_str:00000563 .LASF353
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6473   .debug_ranges:00000000 .Ldebug_ranges0
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6509   .debug_line:00000000 .Ldebug_line0
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6549   .debug_str:0000012e .LASF0
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7009   .debug_str:000010b9 .LASF2
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6991   .debug_str:00001014 .LASF1
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7097   .debug_str:000013b1 .LASF3
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7163   .debug_str:000015b0 .LASF4
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6647   .debug_str:00000450 .LASF5
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6919   .debug_str:00000da4 .LASF6
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7075   .debug_str:000012ec .LASF7
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6997   .debug_str:00001044 .LASF8
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6683   .debug_str:000005b2 .LASF9
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6875   .debug_str:00000bed .LASF10
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6839   .debug_str:00000ab5 .LASF11
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7099   .debug_str:000013ba .LASF12
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6797   .debug_str:0000098c .LASF13
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7159   .debug_str:0000159e .LASF14
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6753   .debug_str:00000809 .LASF15
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6623   .debug_str:000003ab .LASF20
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7219   .debug_str:000017a5 .LASF16
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6883   .debug_str:00000c46 .LASF17
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7019   .debug_str:00001104 .LASF18
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7065   .debug_str:0000129b .LASF19
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6963   .debug_str:00000f36 .LASF21
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6789   .debug_str:00000941 .LASF22
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6939   .debug_str:00000e56 .LASF23
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6965   .debug_str:00000f48 .LASF24
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6807   .debug_str:000009e1 .LASF25
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7203   .debug_str:00001725 .LASF26
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7029   .debug_str:00001155 .LASF27
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6741   .debug_str:000007a3 .LASF28
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7207   .debug_str:00001749 .LASF29
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6697   .debug_str:0000061a .LASF30
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6737   .debug_str:0000078b .LASF32
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7145   .debug_str:0000152e .LASF31
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6595   .debug_str:000002ba .LASF33
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6961   .debug_str:00000f18 .LASF34
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6547   .debug_str:00000120 .LASF35
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6851   .debug_str:00000b01 .LASF250
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7037   .debug_str:000011b0 .LASF36
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6887   .debug_str:00000c61 .LASF37
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6613   .debug_str:00000353 .LASF38
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6791   .debug_str:00000946 .LASF39
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6847   .debug_str:00000adf .LASF40
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7117   .debug_str:00001460 .LASF41
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7215   .debug_str:0000177c .LASF42
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7151   .debug_str:00001561 .LASF43
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7107   .debug_str:000013f5 .LASF44
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6631   .debug_str:000003e2 .LASF45
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7045   .debug_str:000011f1 .LASF46
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7013   .debug_str:000010ca .LASF47
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6751   .debug_str:000007ef .LASF48
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6633   .debug_str:000003ef .LASF49
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6903   .debug_str:00000d00 .LASF50
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7229   .debug_str:000017e1 .LASF51
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6561   .debug_str:00000178 .LASF52
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6889   .debug_str:00000c77 .LASF53
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6701   .debug_str:00000645 .LASF54
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6981   .debug_str:00000fc4 .LASF55
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6577   .debug_str:00000215 .LASF56
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6593   .debug_str:000002a7 .LASF57
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6749   .debug_str:000007dc .LASF58
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6687   .debug_str:000005e3 .LASF59
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6511   .debug_str:00000000 .LASF60
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6927   .debug_str:00000dfa .LASF61
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6515   .debug_str:00000022 .LASF62
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6705   .debug_str:0000067a .LASF63
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6605   .debug_str:0000030a .LASF64
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7053   .debug_str:0000124c .LASF65
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6671   .debug_str:00000536 .LASF66
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7141   .debug_str:0000151e .LASF67
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7133   .debug_str:000014db .LASF68
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7217   .debug_str:00001791 .LASF69
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6831   .debug_str:00000a7d .LASF70
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7225   .debug_str:000017c0 .LASF71
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6523   .debug_str:00000074 .LASF72
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6609   .debug_str:00000331 .LASF73
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6747   .debug_str:000007d0 .LASF74
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6905   .debug_str:00000d0f .LASF75
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6629   .debug_str:000003d6 .LASF76
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6907   .debug_str:00000d25 .LASF77
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7033   .debug_str:00001190 .LASF78
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6843   .debug_str:00000ac4 .LASF79
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7157   .debug_str:00001589 .LASF80
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7201   .debug_str:0000171c .LASF81
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6787   .debug_str:0000092e .LASF82
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6643   .debug_str:00000437 .LASF83
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6765   .debug_str:0000086d .LASF84
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6619   .debug_str:0000038c .LASF85
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7023   .debug_str:00001121 .LASF86
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6835   .debug_str:00000a94 .LASF87
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6725   .debug_str:00000718 .LASF88
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6517   .debug_str:00000031 .LASF89
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6535   .debug_str:000000ca .LASF90
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6615   .debug_str:00000369 .LASF91
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6565   .debug_str:000001a3 .LASF92
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6587   .debug_str:0000027b .LASF93
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6621   .debug_str:0000039d .LASF94
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7211   .debug_str:00001762 .LASF95
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6841   .debug_str:00000abd .LASF96
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6599   .debug_str:000002e4 .LASF97
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6659   .debug_str:000004bc .LASF98
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6951   .debug_str:00000eb9 .LASF99
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6679   .debug_str:000005a1 .LASF100
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7061   .debug_str:00001281 .LASF101
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7123   .debug_str:00001487 .LASF102
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6947   .debug_str:00000e8f .LASF103
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6897   .debug_str:00000cca .LASF104
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6949   .debug_str:00000ea8 .LASF105
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6611   .debug_str:00000341 .LASF106
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7077   .debug_str:000012f4 .LASF107
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7205   .debug_str:00001738 .LASF108
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7015   .debug_str:000010de .LASF109
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6713   .debug_str:000006c6 .LASF110
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6799   .debug_str:00000993 .LASF111
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6929   .debug_str:00000e10 .LASF112
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6689   .debug_str:000005fa .LASF113
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7187   .debug_str:000016a0 .LASF114
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6931   .debug_str:00000e1f .LASF115
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7115   .debug_str:00001456 .LASF116
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6551   .debug_str:0000013b .LASF117
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6987   .debug_str:00000ffe .LASF118
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7125   .debug_str:0000149c .LASF119
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7089   .debug_str:00001359 .LASF120
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6773   .debug_str:000008b3 .LASF121
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6827   .debug_str:00000a66 .LASF122
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7223   .debug_str:000017b2 .LASF123
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7011   .debug_str:000010c1 .LASF124
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6833   .debug_str:00000a8b .LASF125
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6771   .debug_str:000008a6 .LASF168
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7085   .debug_str:0000133a .LASF126
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6995   .debug_str:00001031 .LASF127
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6571   .debug_str:000001e4 .LASF128
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7063   .debug_str:00001286 .LASF129
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6525   .debug_str:0000007a .LASF130
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6637   .debug_str:00000409 .LASF131
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7143   .debug_str:00001527 .LASF132
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7129   .debug_str:000014c5 .LASF133
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6539   .debug_str:000000e1 .LASF134
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7209   .debug_str:0000175c .LASF135
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6575   .debug_str:00000206 .LASF136
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6819   .debug_str:00000a28 .LASF137
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6921   .debug_str:00000db6 .LASF138
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6627   .debug_str:000003ca .LASF139
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7005   .debug_str:00001095 .LASF140
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6715   .debug_str:000006cb .LASF141
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6845   .debug_str:00000ad4 .LASF142
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7073   .debug_str:000012db .LASF143
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6861   .debug_str:00000b61 .LASF144
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6813   .debug_str:000009fe .LASF145
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6783   .debug_str:0000090a .LASF146
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7181   .debug_str:00001664 .LASF147
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7197   .debug_str:000016f1 .LASF148
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6583   .debug_str:00000246 .LASF149
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6779   .debug_str:000008e0 .LASF150
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7199   .debug_str:0000170a .LASF151
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6743   .debug_str:000007b1 .LASF152
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6529   .debug_str:00000096 .LASF153
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6983   .debug_str:00000fd9 .LASF154
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6591   .debug_str:00000297 .LASF155
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7139   .debug_str:0000150d .LASF156
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7227   .debug_str:000017c6 .LASF157
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6513   .debug_str:00000018 .LASF158
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6563   .debug_str:0000018d .LASF159
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7193   .debug_str:000016c6 .LASF160
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6829   .debug_str:00000a70 .LASF161
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7057   .debug_str:00001267 .LASF162
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6625   .debug_str:000003b2 .LASF163
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6675   .debug_str:0000054b .LASF164
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6733   .debug_str:00000768 .LASF165
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6559   .debug_str:0000016f .LASF166
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7103   .debug_str:000013da .LASF167
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7047   .debug_str:0000120b .LASF169
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7031   .debug_str:00001167 .LASF170
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7175   .debug_str:00001606 .LASF171
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6603   .debug_str:000002fe .LASF172
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6649   .debug_str:00000459 .LASF173
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6855   .debug_str:00000b1d .LASF174
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6545   .debug_str:0000010b .LASF175
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6879   .debug_str:00000c1a .LASF176
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6731   .debug_str:0000075e .LASF177
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6945   .debug_str:00000e87 .LASF178
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6867   .debug_str:00000b9c .LASF179
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7001   .debug_str:00001069 .LASF180
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6985   .debug_str:00000fe4 .LASF181
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6681   .debug_str:000005aa .LASF182
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6531   .debug_str:000000ad .LASF183
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6719   .debug_str:000006ee .LASF184
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6999   .debug_str:0000104d .LASF185
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6555   .debug_str:00000154 .LASF186
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6873   .debug_str:00000bde .LASF187
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7043   .debug_str:000011de .LASF188
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7021   .debug_str:00001112 .LASF189
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7035   .debug_str:000011a8 .LASF190
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6543   .debug_str:00000103 .LASF191
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6541   .debug_str:000000ee .LASF192
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6953   .debug_str:00000ec2 .LASF193
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7049   .debug_str:00001236 .LASF194
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6911   .debug_str:00000d52 .LASF195
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7179   .debug_str:0000164c .LASF196
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6979   .debug_str:00000fb4 .LASF197
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6871   .debug_str:00000bbe .LASF198
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6721   .debug_str:000006f8 .LASF199
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6673   .debug_str:00000542 .LASF200
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6817   .debug_str:00000a1a .LASF201
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6639   .debug_str:00000419 .LASF202
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6967   .debug_str:00000f5a .LASF203
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6915   .debug_str:00000d80 .LASF204
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6917   .debug_str:00000d97 .LASF205
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7055   .debug_str:0000125d .LASF206
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6837   .debug_str:00000aa5 .LASF207
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6891   .debug_str:00000c92 .LASF208
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6989   .debug_str:0000100c .LASF209
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7079   .debug_str:0000130a .LASF210
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6869   .debug_str:00000bb6 .LASF211
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7091   .debug_str:0000136b .LASF212
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7137   .debug_str:000014ff .LASF213
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6663   .debug_str:000004e4 .LASF214
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6853   .debug_str:00000b13 .LASF215
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6651   .debug_str:00000463 .LASF216
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7007   .debug_str:000010a2 .LASF217
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6691   .debug_str:000005ff .LASF218
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7101   .debug_str:000013c8 .LASF219
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6863   .debug_str:00000b70 .LASF220
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6667   .debug_str:0000050e .LASF221
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6589   .debug_str:00000288 .LASF222
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7183   .debug_str:00001676 .LASF223
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6849   .debug_str:00000af4 .LASF224
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6755   .debug_str:00000810 .LASF225
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7171   .debug_str:000015e6 .LASF226
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6795   .debug_str:00000980 .LASF227
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6653   .debug_str:0000046f .LASF228
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6757   .debug_str:00000822 .LASF229
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6775   .debug_str:000008c4 .LASF230
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6893   .debug_str:00000ca3 .LASF231
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7221   .debug_str:000017aa .LASF232
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7105   .debug_str:000013e9 .LASF233
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6735   .debug_str:0000077c .LASF234
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6695   .debug_str:0000060e .LASF235
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7155   .debug_str:0000157f .LASF236
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7131   .debug_str:000014cb .LASF237
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7177   .debug_str:00001630 .LASF238
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6825   .debug_str:00000a4b .LASF239
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6993   .debug_str:0000101e .LASF240
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7041   .debug_str:000011d2 .LASF241
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6635   .debug_str:000003fe .LASF242
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7111   .debug_str:00001428 .LASF243
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7039   .debug_str:000011c5 .LASF244
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6975   .debug_str:00000f9e .LASF245
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7147   .debug_str:00001548 .LASF246
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7213   .debug_str:0000176a .LASF247
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6977   .debug_str:00000fad .LASF248
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7165   .debug_str:000015c3 .LASF249
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7191   .debug_str:000016b8 .LASF251
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6955   .debug_str:00000ed3 .LASF252
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6803   .debug_str:000009ad .LASF253
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6805   .debug_str:000009c7 .LASF254
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7025   .debug_str:00001132 .LASF255
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7113   .debug_str:00001432 .LASF256
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6767   .debug_str:00000878 .LASF257
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7083   .debug_str:00001325 .LASF258
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6669   .debug_str:00000514 .LASF259
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7109   .debug_str:0000140c .LASF260
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7195   .debug_str:000016d1 .LASF261
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6761   .debug_str:00000842 .LASF262
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6709   .debug_str:00000696 .LASF263
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6717   .debug_str:000006d3 .LASF264
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6769   .debug_str:0000088c .LASF265
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6661   .debug_str:000004c7 .LASF266
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6685   .debug_str:000005c9 .LASF267
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6793   .debug_str:0000095b .LASF268
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7003   .debug_str:0000107b .LASF269
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6973   .debug_str:00000f85 .LASF270
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7093   .debug_str:00001373 .LASF271
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6785   .debug_str:0000090f .LASF272
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7127   .debug_str:000014a7 .LASF273
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6913   .debug_str:00000d68 .LASF274
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6745   .debug_str:000007b8 .LASF275
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6943   .debug_str:00000e77 .LASF276
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6607   .debug_str:00000319 .LASF277
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7173   .debug_str:000015f0 .LASF278
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6759   .debug_str:0000082a .LASF279
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6957   .debug_str:00000ee9 .LASF280
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6877   .debug_str:00000bfb .LASF281
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6665   .debug_str:000004f2 .LASF282
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6781   .debug_str:000008f4 .LASF283
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6581   .debug_str:00000230 .LASF284
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6881   .debug_str:00000c31 .LASF285
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6519   .debug_str:00000036 .LASF286
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6703   .debug_str:00000656 .LASF287
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6585   .debug_str:00000259 .LASF288
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6923   .debug_str:00000dcc .LASF289
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7095   .debug_str:00001393 .LASF290
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6567   .debug_str:000001b3 .LASF291
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6933   .debug_str:00000e24 .LASF292
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6521   .debug_str:0000004d .LASF293
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6711   .debug_str:000006ae .LASF354
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7087   .debug_str:0000134b .LASF294
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6699   .debug_str:0000062d .LASF355
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:30     .text.LOA_waterInDW_defUpdate:00000036 .LFE6
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6007   .debug_loc:00000000 .LLST0
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6959   .debug_str:00000f00 .LASF356
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:53     .text.LOA_disableLoadCounters:00000018 .LFE7
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:40     .text.LOA_disableLoadCounters:00000006 .LVL1
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:44     .text.LOA_disableLoadCounters:0000000c .LVL2
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:48     .text.LOA_disableLoadCounters:00000012 .LVL3
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:52     .text.LOA_disableLoadCounters:00000018 .LVL4
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:123    .text.LOA_levTOtimeRef_Update:0000006a .LFE1
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:65     .text.LOA_levTOtimeRef_Update:0000000c .LBB4
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:122    .text.LOA_levTOtimeRef_Update:0000006a .LBE4
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6020   .debug_loc:00000020 .LLST1
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:75     .text.LOA_levTOtimeRef_Update:00000020 .LVL5
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:79     .text.LOA_levTOtimeRef_Update:00000026 .LVL6
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6777   .debug_str:000008cd .LASF296
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:142    .text.LOA_levTOtime_Conv:00000017 .LFE2
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6579   .debug_str:0000022a .LASF298
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6031   .debug_loc:0000003e .LLST2
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6801   .debug_str:0000099b .LASF357
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7067   .debug_str:000012a4 .LASF358
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6739   .debug_str:00000793 .LASF295
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6597   .debug_str:000002d4 .LASF297
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1339   .text.LOA_uP_Load_Exe:000008c6 .LFE0
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6045   .debug_loc:0000005f .LLST3
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7169   .debug_str:000015d8 .LASF299
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6063   .debug_loc:0000008b .LLST4
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6617   .debug_str:0000037f .LASF300
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6077   .debug_loc:000000ac .LLST5
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7071   .debug_str:000012ce .LASF301
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6135   .debug_loc:00000146 .LLST6
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6162   .debug_loc:0000017b .LLST7
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7121   .debug_str:0000147d .LASF302
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6169   .debug_loc:0000018e .LLST8
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7161   .debug_str:000015aa .LASF303
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6187   .debug_loc:000001ba .LLST9
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6693   .debug_str:00000605 .LASF304
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6194   .debug_loc:000001cd .LLST10
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6763   .debug_str:0000085d .LASF305
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6253   .debug_loc:0000026f .LLST11
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:710    .text.LOA_uP_Load_Exe:00000422 .LBB14
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:725    .text.LOA_uP_Load_Exe:00000433 .LBE14
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:721    .text.LOA_uP_Load_Exe:00000430 .LVL53
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1026   .text.LOA_uP_Load_Exe:0000069a .LBB16
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1039   .text.LOA_uP_Load_Exe:000006a8 .LBE16
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1035   .text.LOA_uP_Load_Exe:000006a8 .LVL92
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1111   .text.LOA_uP_Load_Exe:00000733 .LBB18
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6424   .debug_loc:00000373 .LLST12
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1117   .text.LOA_uP_Load_Exe:0000073c .LVL100
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1130   .text.LOA_uP_Load_Exe:0000074d .LVL102
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1146   .text.LOA_uP_Load_Exe:0000075f .LVL103
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1157   .text.LOA_uP_Load_Exe:00000775 .LVL104
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1163   .text.LOA_uP_Load_Exe:0000077c .LVL105
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:236    .text.LOA_uP_Load_Exe:000000a6 .LVL16
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:240    .text.LOA_uP_Load_Exe:000000ad .LVL17
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:244    .text.LOA_uP_Load_Exe:000000b4 .LVL18
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:286    .text.LOA_uP_Load_Exe:0000010c .LVL21
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:298    .text.LOA_uP_Load_Exe:00000120 .LVL23
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:344    .text.LOA_uP_Load_Exe:00000172 .LVL25
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:355    .text.LOA_uP_Load_Exe:00000185 .LVL26
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:361    .text.LOA_uP_Load_Exe:00000194 .LVL27
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:373    .text.LOA_uP_Load_Exe:000001ae .LVL29
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:397    .text.LOA_uP_Load_Exe:000001c9 .LVL32
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:412    .text.LOA_uP_Load_Exe:000001e4 .LVL35
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:416    .text.LOA_uP_Load_Exe:000001ea .LVL36
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:440    .text.LOA_uP_Load_Exe:0000021a .LVL39
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:490    .text.LOA_uP_Load_Exe:00000271 .LVL41
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:496    .text.LOA_uP_Load_Exe:00000276 .LVL43
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:527    .text.LOA_uP_Load_Exe:000002a6 .LVL44
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:560    .text.LOA_uP_Load_Exe:000002f4 .LVL46
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:570    .text.LOA_uP_Load_Exe:00000302 .LVL47
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:589    .text.LOA_uP_Load_Exe:0000032a .LVL48
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:617    .text.LOA_uP_Load_Exe:0000036e .LVL49
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:653    .text.LOA_uP_Load_Exe:000003b2 .LVL50
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:657    .text.LOA_uP_Load_Exe:000003b8 .LVL51
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:696    .text.LOA_uP_Load_Exe:000003fc .LVL52
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:734    .text.LOA_uP_Load_Exe:00000447 .LVL54
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:754    .text.LOA_uP_Load_Exe:00000469 .LVL57
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:780    .text.LOA_uP_Load_Exe:000004a2 .LVL59
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:793    .text.LOA_uP_Load_Exe:000004b7 .LVL61
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:804    .text.LOA_uP_Load_Exe:000004d1 .LVL62
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:830    .text.LOA_uP_Load_Exe:00000500 .LVL64
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:845    .text.LOA_uP_Load_Exe:0000051f .LVL67
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:853    .text.LOA_uP_Load_Exe:00000534 .LVL68
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:862    .text.LOA_uP_Load_Exe:00000540 .LVL69
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:889    .text.LOA_uP_Load_Exe:00000580 .LVL73
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:893    .text.LOA_uP_Load_Exe:00000587 .LVL74
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:981    .text.LOA_uP_Load_Exe:00000646 .LVL82
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:985    .text.LOA_uP_Load_Exe:0000064c .LVL83
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:999    .text.LOA_uP_Load_Exe:00000668 .LVL85
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1024   .text.LOA_uP_Load_Exe:00000697 .LVL91
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1067   .text.LOA_uP_Load_Exe:000006e0 .LVL94
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1071   .text.LOA_uP_Load_Exe:000006e6 .LVL95
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1077   .text.LOA_uP_Load_Exe:000006f0 .LVL96
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1080   .text.LOA_uP_Load_Exe:000006f4 .LVL97
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1083   .text.LOA_uP_Load_Exe:000006f8 .LVL98
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1094   .text.LOA_uP_Load_Exe:0000070c .LVL99
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1191   .text.LOA_uP_Load_Exe:000007aa .LVL106
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1194   .text.LOA_uP_Load_Exe:000007ae .LVL107
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1240   .text.LOA_uP_Load_Exe:0000081c .LVL108
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1243   .text.LOA_uP_Load_Exe:00000820 .LVL109
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1275   .text.LOA_uP_Load_Exe:00000852 .LVL112
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1281   .text.LOA_uP_Load_Exe:00000858 .LVL113
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1287   .text.LOA_uP_Load_Exe:00000862 .LVL114
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1290   .text.LOA_uP_Load_Exe:00000866 .LVL115
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1310   .text.LOA_uP_Load_Exe:00000892 .LVL116
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1324   .text.LOA_uP_Load_Exe:000008b0 .LVL117
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6899   .debug_str:00000cde .LASF306
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1359   .text.LOA_timeTOlev_Conv:00000019 .LFE3
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6436   .debug_loc:0000038b .LLST13
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7153   .debug_str:00001577 .LASF307
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6557   .debug_str:0000015e .LASF308
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7189   .debug_str:000016a6 .LASF309
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6969   .debug_str:00000f67 .LASF310
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6925   .debug_str:00000def .LASF311
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7119   .debug_str:00001476 .LASF312
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6707   .debug_str:00000688 .LASF313
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7059   .debug_str:00001279 .LASF314
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6601   .debug_str:000002e9 .LASF315
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6857   .debug_str:00000b35 .LASF316
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6645   .debug_str:00000449 .LASF317
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6553   .debug_str:00000147 .LASF318
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7069   .debug_str:000012ba .LASF319
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6655   .debug_str:0000047f .LASF320
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6811   .debug_str:000009f0 .LASF321
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6941   .debug_str:00000e5e .LASF322
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6901   .debug_str:00000cf1 .LASF323
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6809   .debug_str:000009e6 .LASF324
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6971   .debug_str:00000f7a .LASF325
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7149   .debug_str:00001556 .LASF326
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6885   .debug_str:00000c51 .LASF327
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6729   .debug_str:0000074d .LASF328
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7167   .debug_str:000015cb .LASF329
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6937   .debug_str:00000e4c .LASF330
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6533   .debug_str:000000ba .LASF331
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7081   .debug_str:00001318 .LASF332
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6821   .debug_str:00000a3b .LASF333
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6823   .debug_str:00000a43 .LASF334
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6527   .debug_str:0000008c .LASF335
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6859   .debug_str:00000b4d .LASF337
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6573   .debug_str:000001f5 .LASF336
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6935   .debug_str:00000e3d .LASF338
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6723   .debug_str:00000709 .LASF339
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7051   .debug_str:00001243 .LASF340
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6569   .debug_str:000001d0 .LASF349
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6815   .debug_str:00000a0e .LASF341
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7017   .debug_str:000010f3 .LASF342
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6895   .debug_str:00000cb4 .LASF343
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6727   .debug_str:0000072f .LASF344
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6865   .debug_str:00000b81 .LASF345
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7135   .debug_str:000014e1 .LASF346
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6641   .debug_str:00000426 .LASF347
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6909   .debug_str:00000d37 .LASF359
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7027   .debug_str:00001145 .LASF348
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:6537   .debug_str:000000d0 .LASF350
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:7185   .debug_str:00001680 .LASF351
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:11     .text.LOA_waterInDW_defUpdate:00000002 .LCFI0
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:104    .text.LOA_levTOtimeRef_Update:0000004e .LVL7
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:113    .text.LOA_levTOtimeRef_Update:00000060 .LVL8
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:131    .text.LOA_levTOtime_Conv:00000000 .LVL9
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:136    .text.LOA_levTOtime_Conv:0000000a .LVL10
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:152    .text.LOA_uP_Load_Exe:00000002 .LCFI1
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:154    .text.LOA_uP_Load_Exe:00000004 .LCFI2
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:150    .text.LOA_uP_Load_Exe:00000000 .LVL11
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:197    .text.LOA_uP_Load_Exe:00000058 .LVL13
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:259    .text.LOA_uP_Load_Exe:000000d6 .LVL20
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:288    .text.LOA_uP_Load_Exe:0000010f .LVL22
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:300    .text.LOA_uP_Load_Exe:00000123 .LVL24
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:475    .text.LOA_uP_Load_Exe:0000025d .LVL40
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:492    .text.LOA_uP_Load_Exe:00000272 .LVL42
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:743    .text.LOA_uP_Load_Exe:00000452 .LVL56
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:368    .text.LOA_uP_Load_Exe:000001a5 .LVL28
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:407    .text.LOA_uP_Load_Exe:000001db .LVL34
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1014   .text.LOA_uP_Load_Exe:0000068a .LVL88
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1022   .text.LOA_uP_Load_Exe:00000693 .LVL90
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:395    .text.LOA_uP_Load_Exe:000001c5 .LVL31
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:385    .text.LOA_uP_Load_Exe:000001bb .LVL30
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1249   .text.LOA_uP_Load_Exe:0000082c .LVL110
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1255   .text.LOA_uP_Load_Exe:00000831 .LVL111
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1333   .text.LOA_uP_Load_Exe:000008c0 .LVL118
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:400    .text.LOA_uP_Load_Exe:000001cb .LVL33
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:189    .text.LOA_uP_Load_Exe:00000049 .LVL12
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:204    .text.LOA_uP_Load_Exe:00000067 .LVL14
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:211    .text.LOA_uP_Load_Exe:00000075 .LVL15
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:247    .text.LOA_uP_Load_Exe:000000ba .LVL19
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:422    .text.LOA_uP_Load_Exe:000001f4 .LVL37
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:427    .text.LOA_uP_Load_Exe:000001ff .LVL38
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:553    .text.LOA_uP_Load_Exe:000002e5 .LVL45
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:736    .text.LOA_uP_Load_Exe:0000044a .LVL55
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:775    .text.LOA_uP_Load_Exe:00000496 .LVL58
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:789    .text.LOA_uP_Load_Exe:000004b3 .LVL60
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:809    .text.LOA_uP_Load_Exe:000004d7 .LVL63
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:832    .text.LOA_uP_Load_Exe:00000503 .LVL65
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:836    .text.LOA_uP_Load_Exe:00000509 .LVL66
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:936    .text.LOA_uP_Load_Exe:000005e6 .LVL77
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:949    .text.LOA_uP_Load_Exe:000005ff .LVL78
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:960    .text.LOA_uP_Load_Exe:0000061d .LVL79
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:969    .text.LOA_uP_Load_Exe:0000062c .LVL80
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:974    .text.LOA_uP_Load_Exe:00000637 .LVL81
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:992    .text.LOA_uP_Load_Exe:0000065d .LVL84
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1003   .text.LOA_uP_Load_Exe:00000671 .LVL86
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1007   .text.LOA_uP_Load_Exe:00000679 .LVL87
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1017   .text.LOA_uP_Load_Exe:0000068c .LVL89
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1043   .text.LOA_uP_Load_Exe:000006b1 .LVL93
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1119   .text.LOA_uP_Load_Exe:0000073e .LVL101
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1347   .text.LOA_timeTOlev_Conv:00000000 .LVL119
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1353   .text.LOA_timeTOlev_Conv:0000000d .LVL120
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1472   .debug_info:00000000 .Ldebug_info0
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:69     .text.LOA_levTOtimeRef_Update:00000014 .LBB5
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:85     .text.LOA_levTOtimeRef_Update:00000034 .LBE5
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:88     .text.LOA_levTOtimeRef_Update:0000003a .LBB6
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:92     .text.LOA_levTOtimeRef_Update:00000040 .LBE6
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:96     .text.LOA_levTOtimeRef_Update:00000046 .LBB7
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:121    .text.LOA_levTOtimeRef_Update:0000006a .LBE7
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1132   .text.LOA_uP_Load_Exe:0000074d .LBE18
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1142   .text.LOA_uP_Load_Exe:0000075b .LBB21
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1167   .text.LOA_uP_Load_Exe:0000077e .LBE21
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1112   .text.LOA_uP_Load_Exe:00000733 .LBB19
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1131   .text.LOA_uP_Load_Exe:0000074d .LBE19
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1143   .text.LOA_uP_Load_Exe:0000075b .LBB20
C:\Users\Andrea\AppData\Local\Temp\ccqFdO3n.s:1166   .text.LOA_uP_Load_Exe:0000077e .LBE20

UNDEFINED SYMBOLS
_uP_Load_Data
_WaterInDW
_TempCycle_Stats
_cycle_loaded_water
_GIWaterLoaded
_SWTC_Stop
_Flag_levTOtimeRef_update
_GICriteria
_SWTC_GetElapsedTime
_Tab_HWCPressSensorData
_Interpreter_Data
_FltLoadToutData
_HWC_Flags
_uPDoorStatus
_Virtual_Sensor_Value
_uPLoad_setting_data
_GIValid
_Flags_1
_FltFlagsKO
_clearRegWaterLoaded
_Set_SmallCounter
_BasicLoader
_GetModifierValue
_GetDeltaFromVariation
_PM_PulseCounter_Reset_Warning
_FLT_CheckPulseCounterStill
_SFT_Timeout_4Loadrestore_Mgmt
_SWTC_Run
_uP_PumpCtrl_Data
_SWTC_IsExpired
_MachineStatistics
_IncByteWithCheck
_Flags_2
_Tab_HWCVS_data
_PM_PulseCounter_GetWarning
_FltWarning
_FLT_warningSave
_WaterLoadedReset
_Tab_LoadFault
_SWTC_SetSValue
_FLT_PulseCounterCheckDelay_Mgmt
_EV_Pos
_LoadsReq_New
_GITemp
_WaterTemp_At_CycleStart

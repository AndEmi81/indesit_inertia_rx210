   1                             		.file	"DW_Safety.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.SFT_uPdoorStatus_Mgmt,"ax",@progbits
   5                             		.global	_SFT_uPdoorStatus_Mgmt
   7                             	_SFT_uPdoorStatus_Mgmt:
   8                             	.LFB2:
   9                             		.file 1 "C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control/DW_Safety.c"
   1:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /*
   2:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** Copyright (c) 2004-2005, Indesit Company, I.D.D..
   3:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** Tutti i diritti sono riservati. All rights reserved.
   4:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** */
   5:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /**
   6:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \defgroup	CK_Safety.c
   7:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \ingroup	ApplControl
   8:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
   9:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** Il modulo contiene le funzioni di gestione delle azioni di sicurezza
  10:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** */
  11:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  12:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /**
  13:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  14:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \file    DW_Safety.c
  15:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \ingroup DW_Safety
  16:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \date    11/04/2008
  17:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \author  Valeria Catani
  18:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \version 1.0.0
  19:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  20:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  21:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \Par		History (titolo)
  22:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  23:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \n	to do 	
  24:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  25:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  26:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** */
  27:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  28:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  29:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* ******** */
  30:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* Includes */
  31:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* ******** */
  32:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  33:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** #include "CstmHeaders.h"
  34:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** #include "LIB_ZeroCrossingExp.h"
  35:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** #include "PM_PulseCounterExp.h"
  36:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** #if ( ITP_ZC_ENABLE== 1)
  37:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  38:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** #include "OCUART_drv.h"
  39:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  40:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** #endif /*ITP_ZC_ENABLE */
  41:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  42:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  43:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* ****************** */
  44:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* Defines and Macros */
  45:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* ****************** */
  46:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  47:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* *************************** */
  48:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* Typedef, Structs and Unions */
  49:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* *************************** */
  50:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  51:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* **************************** */
  52:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* Prototype of local functions */
  53:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* **************************** */
  54:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /*void SFT_backupManagement(void);*/
  55:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  56:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** static void SFT_7liter_Mgmt(void);
  57:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** static void SFT_washResManagement(void);
  58:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** static void SFT_WashPump_ResSafetymanagement(void);
  59:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  60:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** static void SFT_drainPump_Mgmt(void);
  61:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** void SFT_LoadEV_Mgmt(void);
  62:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  63:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** static void SFT_salt_Activation(void);
  64:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  65:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** static void SFT_dry_sincronizyng ( void) ;
  66:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  67:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** #if ( ITP_ZC_ENABLE== 1)
  68:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** static void SFT_checkGoodZC(void);
  69:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** #endif /* ITP_ZC_ENABLE */
  70:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  71:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** #if (VIRTUAL_SENSOR_ENABLE == 1)
  72:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** void SFT_Sensor_EV_Unblock(void);
  73:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** void SFT_drainPump_EVOFH_Mgmt(void);
  74:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** #endif
  75:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  76:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* ****************** */
  77:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* Exported variables */
  78:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* ****************** */
  79:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  80:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* **************** */
  81:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* Global variables */
  82:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* **************** */
  83:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  84:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  85:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* ***************** */
  86:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* Exported function */
  87:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* ***************** */
  88:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  89:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /**
  90:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** Gestisce controlli e azioni di sicurezza.
  91:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****  
  92:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****  
  93:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \version		1.0.0
  94:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \date 			30/06/2006
  95:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \author			Valeria Catani
  96:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
  97:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** */
  98:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** void SFT_safetyManagement(void)
  99:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** {
 100:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 101:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	/** Gestione Res Lavaggio */
 102:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if (Res_Pos[LD_WASH_RES_IND] != NO_LD_POS)
 103:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{/* Resistenza lavaggio presente */
 104:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		
 105:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		SFT_washResManagement();
 106:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 107:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		if( ( HWC_Flags.bit.bldc1 != 0 ) && ( Sft_WashPumpSpeedLow != 0 ) )
 108:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		{
 109:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			/* Presente pompa lavaggio BLAC e sicurezza abilitata */
 110:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 111:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			SFT_WashPump_ResSafetymanagement();
 112:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		}
 113:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 114:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 115:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if ( RegDev_Pos[LD_SALT_ACTIVATION_REG_IND] != NO_LD_POS)
 116:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{
 117:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	  SFT_salt_Activation();
 118:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 119:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	/** Gestione 7 litri */
 120:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	SFT_7liter_Mgmt();
 121:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 122:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	/** Gestione pompa scarico in stati stazionari (con p.p.) */
 123:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	SFT_drainPump_Mgmt();
 124:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 125:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 126:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	/** Gestione sblocco EV in caso di warning turbina */
 127:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	SFT_LoadEV_Mgmt();
 128:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 129:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if (( Fan_Pos[LD_DRY_FAN_IND] != NO_LD_POS) && ( Res_Pos[LD_DRY_RES_IND] != NO_LD_POS) )
 130:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{
 131:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		SFT_dry_sincronizyng();
 132:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 133:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 134:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** #if (VIRTUAL_SENSOR_ENABLE == 1)
 135:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	/* EA nuovo aprocedura di attivazione della pompa scarico in caso di turbina oUT of range*/
 136:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if ( HWC_Flags.bit.vs_drain_presence  )
 137:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{
 138:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		SFT_drainPump_EVOFH_Mgmt();
 139:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 140:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if ( HWC_Flags.bit.vs_wash_presence )
 141:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{
 142:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		SFT_Sensor_EV_Unblock();
 143:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 144:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** #endif
 145:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 146:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 147:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** #if ( ITP_ZC_ENABLE== 1)
 148:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	/* Verifica la corretta presenza dello ZC per controllare l'oscillatore */
 149:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	SFT_checkGoodZC();
 150:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** #endif /* ITP_ZC_ENABLE */
 151:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 152:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** }
 153:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /**/
 154:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 155:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 156:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 157:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 158:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** static void SFT_7liter_Mgmt()
 159:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** {
 160:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if(SWTC_IsExpired((SWTC_CountersType)SLITER_DIRTYWATER_TIMEOUT_M_COUNTER))
 161:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{
 162:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****        SETBIT(Flags_1,JIF_FLAG1_7LITER_TIMER_EXPIRED_POS);
 163:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 164:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	else
 165:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{
 166:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	   CLRBIT(Flags_1,JIF_FLAG1_7LITER_TIMER_EXPIRED_POS);
 167:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 168:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** }
 169:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 170:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 171:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 172:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /**
 173:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** Aggiorna la variabile che indica che la porta è aperta o che
 174:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** è stata chiusa ma siamo in attesa che il timeout scada.
 175:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** Gestisce il Timeout a porta chiusa.
 176:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 177:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \return 			none
 178:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 179:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \version		1.0.0
 180:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \date 			14/05/2008
 181:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \author			Valeria Catani
 182:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 183:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** */
 184:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** void SFT_uPdoorStatus_Mgmt(void)
 185:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** {
  10                             		.loc 1 185 0
 186:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 187:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	/* Gestione counter e Gestione stato porta per uP */
 188:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 189:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	uPDoorStatus = UP_DOOR_CLOSE;
  11                             		.loc 1 189 0
  12 0000 FB E2 00 00 00 00       		mov.L	#_uPDoorStatus, r14
  13 0006 F8 E4 01                		mov.B	#1, [r14]
 190:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 191:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if ( (GICriteria & MASK_B(GI_CR_DOOR_IND)) == GI_DOOR_CLOSE )
  14                             		.loc 1 191 0
  15 0009 FB 42 00 00 00 00       		mov.L	#_GICriteria, r4
  16 000f CC 44                   		mov.B	[r4], r4
  17 0011 64 44                   		and	#4, r4
  18 0013 20 45                   		beq	.L2
 192:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{
 193:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		if (( GICriteriaOld & MASK_B(GI_CR_DOOR_IND ))== GI_DOOR_OPEN )
  19                             		.loc 1 193 0
  20 0015 FB E2 00 00 00 00       		mov.L	#_GICriteriaOld, r14
  21 001b CC EE                   		mov.B [r14], r14
  22 001d 64 4E                   		and #4, r14
  23 001f 21 19                   		bne	.L3
 194:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		{/* transizione porta aperta - porta chiusa */
 195:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 196:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			(void)Set_SmallCounter((SWTC_CountersType)SFT_DOOR_CLOSE_PAUSE_S_COUNTER, (SWTC_PrescalerType)CO
  24                             		.loc 1 196 0
  25 0021 FB E2 00 00 00 00       		mov.L	#_Tab_SFT_Door, r14
  26 0027 EC EE                   		mov.L	[r14], r14
  27 0029 CC E3                   		mov.B	[r14], r3
  28 002b 75 41 18                		mov	#24, r1
  29 002e 66 32                   		mov	#3, r2
  30 0030 75 23 7F                		and #0x7f, r3
  31 0033 05 00 00 00             		bsr	_Set_SmallCounter
  32                             	.LVL0:
  33 0037 03                      		.balign 2,3,2
  34                             	.L3:
 197:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		}
 198:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 199:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		if(SWTC_IsExpired((SWTC_CountersType)SFT_DOOR_CLOSE_PAUSE_S_COUNTER))
  35                             		.loc 1 199 0
  36 0038 75 41 18                		mov	#24, r1
  37 003b 05 00 00 00             		bsr	_SWTC_IsExpired
  38                             	.LVL1:
  39 003f 61 01                   		cmp	#0, r1
  40 0041 10                      		beq	.L4
 200:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		{ /* porta chiusa e timeout scaduto */
 201:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 202:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			(void)SWTC_Stop((SWTC_CountersType)SFT_DOOR_CLOSE_PAUSE_S_COUNTER);
  41                             		.loc 1 202 0
  42 0042 75 41 18                		mov	#24, r1
  43 0045 04 00 00 00             		bra	_SWTC_Stop
  44                             	.LVL2:
  45                             	.L4:
 203:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		}
 204:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		else
 205:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		{/* porta chiusa e timeout non scaduto */
 206:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 207:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			uPDoorStatus = UP_DOOR_WAIT;
  46                             		.loc 1 207 0
  47 0049 FB E2 00 00 00 00       		mov.L	#_uPDoorStatus, r14
  48 004f C3 E1                   		mov.B	r1, [r14]
 208:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 209:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			(void)SWTC_Run((SWTC_CountersType)SFT_DOOR_CLOSE_PAUSE_S_COUNTER);
  49                             		.loc 1 209 0
  50 0051 75 41 18                		mov	#24, r1
  51 0054 04 00 00 00             		bra	_SWTC_Run
  52                             	.LVL3:
  53                             	.L2:
 210:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		}
 211:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 212:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	else
 213:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{/* porta aperta */
 214:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 215:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		uPDoorStatus = UP_DOOR_WAIT;
  54                             		.loc 1 215 0
  55 0058 C3 E4                   		mov.B	r4, [r14]
  56 005a 02                      		rts
  57                             	.LFE2:
  59 005b 03                      		.section	.text.SFT_drainPump_EVOFH_Mgmt,"ax",@progbits
  60                             		.global	_SFT_drainPump_EVOFH_Mgmt
  62                             	_SFT_drainPump_EVOFH_Mgmt:
  63                             	.LFB9:
 216:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 217:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 218:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** }
 219:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 220:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* ************** */
 221:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* Local Function */
 222:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* ************** */
 223:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /**
 224:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** - Gestisce l'attivazione della lettura del sensore sale:
 225:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** viene sempre pilotato ad eccezione dello stato di OFF logico ( ciclo 0 fase 0)
 226:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** La disablitazione del sensore è necessaria per il risparmio energetico, anche se non c'è lo stand
 227:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** il sensore deve essere disabilitato in caso di standby "virtuale" ( solo visual)
 228:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 229:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 230:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \version		1.0.0
 231:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \date 			25/8/2010
 232:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \author			Emanuela Antognoli
 233:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 234:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** -created
 235:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** */
 236:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** static void SFT_salt_Activation( void )
 237:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** {
 238:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if ( ( Interpreter_Data[0].completeLabel.s.label == LBL_PROGRAMMING) &&
 239:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	 (Interpreter_Data[0].phase == 0) )
 240:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	 /* standby virtuale o OFF logico*/
 241:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{
 242:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		LoadsReq_New[RegDev_Pos[LD_SALT_ACTIVATION_REG_IND]].b = LOAD_OFF;
 243:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 244:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}else
 245:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{
 246:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		LoadsReq_New[RegDev_Pos[LD_SALT_ACTIVATION_REG_IND]].b = LOAD_ON;
 247:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 248:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 249:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 250:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** }
 251:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 252:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /**/
 253:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* ************** */
 254:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* Local Function */
 255:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* ************** */
 256:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 257:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 258:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 259:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /**
 260:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** Controlla condizioni di sicurezza per la resistenza lavaggio
 261:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** (attivazione della resistenza lavaggio possibile solo con il pieno pressostato).
 262:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 263:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** Viene verificato lo stato richiesto per la RES da uP/algoritmi processati in precedenza
 264:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** nella stessa iterazione del main.
 265:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 266:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** Se richiesta RES on può venir imposto stato di RES OFF e questo verrà effettivamente
 267:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** applicato nella ActivateLoads. 
 268:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 269:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** Il caso di Porta Aperta (disabilitazione timer) ricade nel caso di richiesta RES OFF
 270:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****  
 271:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \version		1.0.0
 272:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \date 			23/08/2006
 273:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \author			Valeria Catani
 274:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 275:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \note
 276:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** - è corretto spegnere la resistenza anche in caso di stato non valido sul pressostato?
 277:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				 
 278:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** */
 279:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** static void SFT_washResManagement(void)
 280:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** {
 281:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** static uint8_t pressStatus_Old = 0;
 282:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** uint8_t pressStatus;
 283:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** uint8_t pressValid;
 284:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 285:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if (LoadsReq_New[Res_Pos[LD_WASH_RES_IND]].b == RES_ON)
 286:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{/* il controllo va fatto solo in caso di richiesta RES ON */
 287:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         if(HWC_Flags.bit.vs_wash_presence)
 288:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		{ /* è valido se sto alternando o è valido il criterio  */
 289:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		   pressValid = ( GET_BLDC_SPEED(BLDC_PumpReq_Old[WASH_BLDC_PUMP])>0);
 290:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		   				 
 291:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		   /* se il timer è spirato e la pompa gira*/
 292:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		}
 293:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		else
 294:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		{
 295:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		   pressValid = TESTBIT (GIValid, (GI_FIRST_CRITERION_BIT + GI_PRESS_SENS_CR_FULL_IND) ) != 0;
 296:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		}
 297:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 298:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		if (!pressValid)
 299:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		{/* stato criterio non valido  - la res lavaggio viene spenta precauzionalmente */
 300:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		/* questo caso copre il criterio invalido senza che si stia alternando*/	
 301:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 302:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			LoadsReq_New[Res_Pos[LD_WASH_RES_IND]].b = RES_OFF;	
 303:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			if(HWC_Flags.bit.vs_wash_presence)
 304:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			{
 305:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				pressStatus_Old=0;
 306:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			}
 307:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 308:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		}
 309:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		else
 310:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		{/* stato criterio valido - test sul valore  */
 311:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** #if (VIRTUAL_SENSOR_ENABLE == 1)
 312:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****             if(HWC_Flags.bit.vs_wash_presence)
 313:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			{
 314:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			   if ( ( (uP_AltCtrl_Data.SV_invalid_4alt==TRUE)||(!SWTC_IsExpired((SWTC_CountersType)HIO_STABI
 315:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			   ( Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]!=0 )) 
 316:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			   {/* se sta alternando o il criterio non è valido  attiva comunque la resistenza se deve farl
 317:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			   		if ( MAKEWORD(BLDC_Pump_InfoBuffer[WASH_BLDC_PUMP][BLDC_VS_STATE_MSB], BLDC_Pump_InfoBuffer
 318:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					{ 
 319:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						/* se il senore virtuale manda uno 0 la resistenza deve comunque spegnersi 
 320:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						NB: virtual_sensor_data non viene aggiornata mentre il c'è il filtro di stabilità attivo.*/
 321:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						pressStatus = 0;
 322:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					}else
 323:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					{	
 324:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						pressStatus= pressStatus_Old;	
 325:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						LoadsReq_New[Res_Pos[LD_WASH_RES_IND]].b = LoadsReq_Old[Res_Pos[LD_WASH_RES_IND]].b;  /* new 
 326:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					}	
 327:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 								
 328:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			   }else
 329:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			   {
 330:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			   
 331:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				   switch(Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH])
 332:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				   {
 333:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					   default:/* comprende stato 3 e 5 */
 334:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					   case 0:
 335:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					   case 1:
 336:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					   	 /* stato pressostato = vuoto -> RES OFF forzatamente */
 337:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					     pressStatus = 0;
 338:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						 break;
 339:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					
 340:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					   case 2:
 341:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					     pressStatus = 1;
 342:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						 break;
 343:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					 
 344:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				   }
 345:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			   }
 346:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 347:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			}
 348:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			else
 349:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** #endif  /*#if (VIRTUAL_SENSOR_ENABLE == 1)*/
 350:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			{
 351:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			   pressStatus = TESTBIT(GICriteria,GI_PRESS_SENS_CR_FULL_IND);
 352:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			}
 353:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			
 354:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			if ( pressStatus != pressStatus_Old )
 355:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			{/* cambiamento di stato pressostato - init timer stabilità  pressostato */
 356:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 357:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				if (pressStatus == 0)
 358:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				{/* stato attuale = vuoto */
 359:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 360:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					(void)Set_SmallCounter((SWTC_CountersType)SFT_RES_PRES_STABLE_S_COUNTER, (SWTC_PrescalerType)C
 361:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				}
 362:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				else
 363:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				{ /* stato attuale = pieno */
 364:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 365:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					(void)Set_SmallCounter((SWTC_CountersType)SFT_RES_PRES_STABLE_S_COUNTER, (SWTC_PrescalerType)C
 366:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				}
 367:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 368:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				LoadsReq_New[Res_Pos[LD_WASH_RES_IND]].b = LoadsReq_Old[Res_Pos[LD_WASH_RES_IND]].b;  /* new st
 369:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			}
 370:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			else
 371:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			{/* stato stabile pressostato */
 372:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 373:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				if( SWTC_IsExpired((SWTC_CountersType)SFT_RES_PRES_STABLE_S_COUNTER)  )
 374:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				{/* conteggio stabilità concluso */
 375:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 376:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					if (pressStatus == 0)
 377:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					{ /* stato pressostato = vuoto -> RES OFF forzatamente */
 378:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 379:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						LoadsReq_New[Res_Pos[LD_WASH_RES_IND]].b = RES_OFF;    
 380:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					}
 381:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					/* else stato resistenza invariato (RES ON) */
 382:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 383:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					(void)SWTC_Stop((SWTC_CountersType)SFT_RES_PRES_STABLE_S_COUNTER);
 384:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				}
 385:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				else
 386:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				{/* conteggio in corso */
 387:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 388:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					(void)SWTC_Run((SWTC_CountersType)SFT_RES_PRES_STABLE_S_COUNTER);
 389:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 390:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					LoadsReq_New[Res_Pos[LD_WASH_RES_IND]].b = LoadsReq_Old[Res_Pos[LD_WASH_RES_IND]].b;  /* new s
 391:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				}
 392:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 393:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			}
 394:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 395:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			pressStatus_Old = pressStatus;    /* aggiornamento old status press */ 
 396:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		}
 397:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 398:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	else
 399:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{/* se richiedo RES OFF, comprende anche caso di porta aperta */
 400:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 401:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		(void)SWTC_Stop((SWTC_CountersType)SFT_RES_PRES_STABLE_S_COUNTER);
 402:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		if(HWC_Flags.bit.vs_wash_presence)
 403:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		 {
 404:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			 pressStatus_Old=0;
 405:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		 }
 406:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 407:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	
 408:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** }
 409:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 410:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 411:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 412:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** #if ( ITP_ZC_ENABLE== 1)
 413:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /* Verifica la corretta presenza dello ZC per controllare l'oscillatore */
 414:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** static void SFT_checkGoodZC(void)
 415:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** {
 416:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** bool_t goodZC;
 417:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** static bool_t oldGoodZC = 1;
 418:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** static uint8_t filterCounter = 0;
 419:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** static uint8_t old_Sft_FilteredGoodZC = 1;
 420:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 421:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 422:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	/* valore corrente dello Zero Crossing*/
 423:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	goodZC = goodZCSignal();
 424:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 425:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if( goodZC != oldGoodZC )
 426:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{
 427:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		filterCounter = 0;
 428:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 429:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	else
 430:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{
 431:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		if( filterCounter < SFT_ZC_GOOD_FILTER_TIME )
 432:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		{
 433:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			filterCounter ++;
 434:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		}
 435:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		else
 436:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		{
 437:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			/* Stato filtrato Zero Crossing = stato corrente zero crossing */
 438:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			if (goodZC )
 439:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			{/* logica negata.*/
 440:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				Interpreter_Data[0].ZC_not_good = FALSE;
 441:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			}else
 442:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			{
 443:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				Interpreter_Data[0].ZC_not_good = TRUE;
 444:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			}
 445:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		}
 446:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 447:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 448:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	oldGoodZC = goodZC;
 449:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 450:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 451:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if( Interpreter_Data[0].ZC_not_good  )
 452:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{
 453:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		/* Stato filtrato: Zero Crossing assente */
 454:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 455:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		/* Viene disabilitata la UART */
 456:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 457:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		OCUART_DisableSync();
 458:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 459:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		/*
 460:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		Viene resettato il buffer condiviso (info buffer), in modo da far intervenire la
 461:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		sicurezza sul motore
 462:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		*/
 463:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		{
 464:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		   uint8_t cnt;
 465:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			for(cnt=0; cnt< NR_OF_BLDC_PUMPS; cnt++)
 466:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			{
 467:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				memset(&BLDC_Pump_InfoBuffer[cnt][0], 0, IOM_EXTERNAL_0_INFOBUFFER_SIZE);
 468:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			}
 469:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		}
 470:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 471:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	else
 472:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{
 473:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		/* Stato filtrato: Zero Crossing presente */
 474:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 475:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		if( old_Sft_FilteredGoodZC )
 476:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		{
 477:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			/*
 478:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			Solo se provengo da Zero Crossing assente (==UART disabilitata) riabilito
 479:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			la UART, altrimenti starei sempre a resettare la periferica
 480:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			*/
 481:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 482:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			/* Riabilito la UART */
 483:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 484:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			OCUART_EnableSync();
 485:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 486:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		}
 487:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 488:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 489:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	old_Sft_FilteredGoodZC = Interpreter_Data[0].ZC_not_good;
 490:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** }
 491:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** #endif /*ITP_ZC_ENABLE */
 492:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 493:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /**
 494:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** Controlla condizioni di sicurezza per la resistenza lavaggio:
 495:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** se la velocita' della pompa lavaggio e' minore di un parametro specificato
 496:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** nel file di setting la resistenza lavaggio viene forzatamente spenta.
 497:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 498:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \return 			none
 499:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				
 500:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \version		1.0.0
 501:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \date 			13/04/2011
 502:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \author			Marco Quintini
 503:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** */
 504:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** static void SFT_WashPump_ResSafetymanagement(void)
 505:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** {
 506:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** int16_t currentSpeed;
 507:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** static uint8_t speedUnderThreshold = TRUE;
 508:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 509:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	currentSpeed = ((int16_t)(BLDC_Pump_InfoBuffer[WASH_BLDC_PUMP][BLDC_VCURR_MSB] << 8) + (int16_t)BL
 510:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 511:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if( currentSpeed < 0 )
 512:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{
 513:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		/* La velocità viene considerata in valore assoluto */
 514:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		currentSpeed = -currentSpeed;	
 515:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 516:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 517:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	/* Stato della velocità della pompa rispetto alla soglia */
 518:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /*lint -e574
 519:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	currentSpeed non può essere negativa perchè c'è un controllo in precedenza
 520:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** */
 521:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if( currentSpeed < Sft_WashPumpSpeedLow )
 522:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{
 523:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		/* Velocità sotto soglia */
 524:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		speedUnderThreshold = TRUE;	
 525:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 526:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	else if( currentSpeed > Sft_WashPumpSpeedHigh )
 527:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /*lint +e574 */
 528:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{
 529:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		/* Velocità sopra soglia */
 530:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		speedUnderThreshold = FALSE;	
 531:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 532:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	else
 533:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{
 534:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		/* speedUnderThreshold invariato, siamo nella fascia dell'isteresi */
 535:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 536:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	
 537:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if( ( speedUnderThreshold == TRUE )
 538:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		 && ( TESTBIT(FltBLDCUnblock.flags,PUMP_TRES_OFF)	== 0) && ( FltWarning.bldc_low_voltage == 0) &&
 539:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			 
 540:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		 )
 541:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 542:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{
 543:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		/*
 544:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		Se lo stato della velocità è sotto soglia, la resistenza
 545:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		viene spenta per sicurezza, ma solo se non ne è gia richiesto
 546:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		lo spegnimento a causa di un'anomalia segnalata dal DSP.
 547:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		In questo modo, ad esempio in condizioni di Under Voltage,
 548:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		questa sicurezza non interviene e la routine FLT_bldcFaultLoadMgmt()
 549:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		può vedere LoadsReq_New[Res_Pos[LD_WASH_RES_IND]].b = RES_ON,
 550:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		altrimenti, dato che in Under Voltage il motore viene fermato,
 551:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		la suddetta routine vedrebbe sempre lo stato richiesto uguale a
 552:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		OFF a causa di questa routine di sicurezza.
 553:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		*/
 554:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		LoadsReq_New[Res_Pos[LD_WASH_RES_IND]].b = RES_OFF;    
 555:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 556:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	
 557:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** }
 558:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 559:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 560:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /**
 561:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** Controllo delle condizioni (stato + PP) per innescare verifica
 562:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** su acqua entrante e gestione eventuale scarico
 563:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** (eseguito indipendentemente dalle condizioni della turbina)
 564:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 565:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \return 			none
 566:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 567:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \version		1.0.0
 568:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \date 			05/09/2008
 569:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \author			Valeria Catani
 570:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 571:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \ revisione QI 28.10.09
 572:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** */
 573:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** static void SFT_drainPump_Mgmt(void)
 574:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** {
 575:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 576:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****   CLRBIT(Flags_2,FLAG2_SAFETY_DRAIN_PP_ON_POS);
 577:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 578:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****   if( (Interpreter_Data[0].completeLabel.s.label == LBL_PROGRAMMING) ||
 579:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****       (Interpreter_Data[0].completeLabel.s.label == LBL_END) ||
 580:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****       (Interpreter_Data[0].completeLabel.s.label == LBL_DELAY)||
 581:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****       (Interpreter_Data[0].completeLabel.s.label == LBL_FAULT) )
 582:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****   { /* stati stazionari (con EV OFF) in cui va monitorato il pressostato */
 583:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 584:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****     if ( (TESTBIT (GIValid, (GI_FIRST_CRITERION_BIT + GI_PRESS_SENS_CR_FULL_IND) ) != 0)||
 585:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	HWC_Flags.bit.vs_drain_presence )
 586:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****     {/* criterio pressostato valido */
 587:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 588:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****       if ( (TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) != 0 )|| (  HWC_Flags.bit.vs_drain_prese
 589:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****       {/* pieno pressostato -> attivazione pompa scarico + disabilitazione standby */
 590:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 591:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****          /* pieno pressostato -> attivazione pompa scarico + disabilitazione standby */
 592:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 593:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         /* QI 28.10.09 */
 594:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         if (Sft_DrainPP.init_full == 0)
 595:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         {
 596:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****           Sft_DrainPP.cnt = 0;
 597:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 598:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****           if (Tab_SFT_EV.DataLenght == 2)
 599:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****           {/* nuovi setting file : nuova gestione con ritardo */
 600:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 601:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****             Sft_DrainPP.cnt = CNT_DRAIN_DELAY;
 602:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 603:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****           }/* else contatore ritardo = 0, rimane la vecchia gestione */
 604:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 605:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****           Sft_DrainPP.init_full = 1;
 606:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         }
 607:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 608:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         if (Sft_DrainPP.cnt > 0)
 609:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         {/*conteggio delay in corso : PUMP OFF */
 610:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****           Sft_DrainPP.cnt--;
 611:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         }
 612:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         else
 613:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         {/* conteggio delay concluso : PUMP ON */
 614:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****           DrainSftReq_New.b = LOAD_ON;
 615:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 616:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****           Sft_DrainPP.init_empty = 1;
 617:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		  if ( (TESTBIT(GIValid, GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_DRAIN))&& (Virtual_Sensor_Valu
 618:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		  {/* NB: 28/11/11 il valore del sensore virtuale della pompa scarico ha valori:0-2-3-5*/
 619:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 620:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****      		 WaterInDW=0;
 621:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	      }
 622:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         }
 623:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         SETBIT(Flags_2,FLAG2_SAFETY_DRAIN_PP_ON_POS);
 624:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 625:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         /* END QI 28.10.09 */
 626:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 627:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****       }
 628:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****       else
 629:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****       {/* vuoto -> attivo pompa per 1 sec in pi� per evitare On-OFF */
 630:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 631:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         if (Sft_DrainPP.init_empty == 1)
 632:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         {
 633:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****           Sft_DrainPP.cnt = CNT_DRAIN_EMPTY;
 634:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 635:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****           Sft_DrainPP.init_empty = 0;
 636:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         }
 637:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 638:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         if (Sft_DrainPP.cnt > 0)
 639:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****   	    {
 640:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****   	      	DrainSftReq_New.b = LOAD_ON;
 641:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 642:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****   	      	SETBIT(Flags_2,FLAG2_SAFETY_DRAIN_PP_ON_POS);
 643:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 644:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****   	    	if ( (TESTBIT(GIValid, GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_DRAIN))&& (Virtual_Sensor_
 645:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		    {/* NB: 28/11/11 il valore del sensore virtuale della pompa scarico ha valori:0-2-3-5*/
 646:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 647:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****      		   WaterInDW=0xFF;/* valore per far ripartire lo scarico a sensore , perch� ancora non ved
 648:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	        }
 649:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 650:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			if ( (Sft_DrainPP.cnt == 1) && (WaterInDW!=0xFF) )
 651:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			{/*ultima iterazione - eseguo reset dati acqua caricata e turbina */
 652:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 653:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****   				updateRegWaterLoaded(); /*?? vedere se va inserito anche questo!!*/
 654:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****   				WaterInDW = 0;
 655:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 656:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				/* restart dati turbina: OK, una singola iterazione non altera il funzionamento delle
 657:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						altre procedure di Fault e Safety */
 658:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				WaterLoadedReset();
 659:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 660:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			}
 661:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 662:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****   	      	Sft_DrainPP.cnt --;
 663:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 664:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****   	    }
 665:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		/* else scarico concluso */
 666:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 667:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		Sft_DrainPP.init_full = 0;
 668:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 669:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****       }
 670:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****     }
 671:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****     else
 672:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****     {
 673:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****       /* criterio non valido */
 674:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 675:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****       Sft_DrainPP.init_full = 0; /* init solo per contatore in pieno, se rientrassi da stato invali
 676:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****                                     in vuoto scaricherei per il tempo aggiuntivo, ma senza essere p
 677:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****     }
 678:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****   }
 679:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****   else
 680:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****   {/* RUN - PAUSE */
 681:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****     Sft_DrainPP.init_full = 0;
 682:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 683:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****   }
 684:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 685:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** }
 686:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 687:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 688:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 689:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /**
 690:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** Sincronizzazione ventola asciugatura e resistenza asciugatura.
 691:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** Per evitare shock termici e permettere ai flussi d'aria di stabilizzarsi la resistenza asciugatura 
 692:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** accendersi solo qualche secondo dopo la ventola di asciugatura.
 693:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** Se invece la ventola è spenta non può accendersi la resistenza.
 694:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 695:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 696:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** -in ( stato ventola, parametro in setting( Dry_SfyTime_Res_On) )
 697:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** -out stato resistenza
 698:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 699:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 700:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \version		1.0.0
 701:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \date 			1/9/2010
 702:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \author			Emanuela Antognoli
 703:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 704:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** -created
 705:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** */
 706:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 707:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** static void SFT_dry_sincronizyng ( void)
 708:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** {
 709:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 710:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if ( LoadsReq_New[Fan_Pos[LD_DRY_FAN_IND]].b == 0)
 711:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{/* ventola spenta -> resistenza asciugatura spenta*/
 712:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		LoadsReq_New[Res_Pos[LD_DRY_RES_IND]].b	= RES_OFF;
 713:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 714:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		(void)SWTC_Stop((SWTC_CountersType)SFT_DRY_RES_DELAYACT_S_COUNTER);
 715:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		return;
 716:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 717:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 718:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if (( LoadsReq_Old[Fan_Pos[LD_DRY_FAN_IND]].b ==  LOAD_OFF ) &&  (LoadsReq_New[Fan_Pos[LD_DRY_FAN_
 719:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{
 720:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		(void)Set_SmallCounter((SWTC_CountersType)SFT_DRY_RES_DELAYACT_S_COUNTER, (SWTC_PrescalerType)COU
 721:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 722:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 723:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if  (SWTC_IsExpired((SWTC_CountersType)SFT_DRY_RES_DELAYACT_S_COUNTER) )
 724:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****     {/* conteggio transizione OFF -> ON concluso -> La resistenza asciugatura può accendersi se vu
 725:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 726:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****        (void)SWTC_Stop((SWTC_CountersType)SFT_DRY_RES_DELAYACT_S_COUNTER);
 727:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 728:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****     }
 729:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****     else
 730:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****     {	/*conteggio in corso*/
 731:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         /*  La Resistenza asciugatura deve rimanere spenta  */
 732:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 733:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         (void)SWTC_Run((SWTC_CountersType)SFT_DRY_RES_DELAYACT_S_COUNTER);
 734:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 735:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		LoadsReq_New[Res_Pos[LD_DRY_RES_IND]].b= RES_OFF;
 736:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		 	/*la resistenza deve accendersi, ma solo  tot secondi dopo la ventola.*/
 737:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 738:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** }
 739:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 740:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 741:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 742:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 743:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 744:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** #if (VIRTUAL_SENSOR_ENABLE == 1)
 745:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /**
 746:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****  attivazione della pompa di scarico nel caso di impulsi della turbina fuori range, nelle macchine c
 747:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** la variabile New_safety_VS.drain_act viene attivata quando si rilevano inpulsi out of range e si av
 748:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** contremporaneamente si attua un duty cycle per la pompa scarico.
 749:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 750:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 751:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \return 			none
 752:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 753:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \version		1.0.0
 754:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \date 			26/08/13
 755:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \author			Emanuela Antognoli
 756:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 757:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \ revisione QI 28.10.09
 758:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** */
 759:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** void SFT_drainPump_EVOFH_Mgmt(void)
 760:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** {
  64                             		.loc 1 760 0
 761:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 762:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if( (Interpreter_Data[0].completeLabel.s.label == LBL_PROGRAMMING) ||
  65                             		.loc 1 762 0
  66 0000 FB E2 00 00 00 00       		mov.L	#_Interpreter_Data, r14
  67 0006 CC E4                   		mov.B	[r14], r4
  68 0008 64 F4                   		and	#15, r4
  69 000a FB E2 00 00 00 00       		mov.L	#_New_safety_VS, r14
  70 0010 12                      		beq	.L6
  71                             		.loc 1 762 0 is_stmt 0 discriminator 1
  72 0011 61 34                   		cmp	#3, r4
  73 0013 17                      		beq	.L6
 763:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	(Interpreter_Data[0].completeLabel.s.label == LBL_END) ||
  74                             		.loc 1 763 0 is_stmt 1
  75 0014 61 24                   		cmp	#2, r4
  76 0016 3B 78 01                		bne	.L7
  77 0019 03                      		.balign 2,3,5
  78                             	.L6:
 764:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	(Interpreter_Data[0].completeLabel.s.label == LBL_DELAY) )
 765:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{
 766:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	  if (  New_safety_VS.drain_act )
  79                             		.loc 1 766 0
  80 001a FB 42 00 00 00 00       		mov.L	#_New_safety_VS, r4
  81 0020 CC EE                   		mov.B	[r14], r14
  82 0022 FD 74 CE 01             		tst	#1, r14
  83 0026 3A 62 01                		beq	.L8
 767:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	  {
 768:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		  /* impulsi out of range rilevati */
 769:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		  	switch ( New_safety_VS.drainStatus)
  84                             		.loc 1 769 0
  85 0029 58 4E                   		movu.B	[r4], r14
  86 002b 68 1E                   		shlr	#1, r14
  87 002d 64 7E                   		and #7, r14
  88 002f 61 1E                   		cmp	#1, r14
  89 0031 20 40                   		beq	.L11
  90 0033 61 2E                   		cmp	#2, r14
  91 0035 3A F1 00                		beq	.L12
  92 0038 61 0E                   		cmp	#0, r14
  93 003a 3B 63 01                		bne	.L5
 770:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			{
 771:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				case VS_DRAINSTATUS_IDLE:
 772:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				/* attivazione della pompa scarico per dilevazione impulsi out of range.*/
 773:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					(void)Set_SmallCounter((SWTC_CountersType)SFT_EVOORDRAIN_COUNTER, (SWTC_PrescalerType)COUNTERS
  94                             		.loc 1 773 0
  95 003d FB E2 00 00 00 00       		mov.L	#_Tab_SFT_EV, r14
  96 0043 5D E4 02                		movu.W	4[r14], r4
  97 0046 61 34                   		cmp	#3, r4
  98 0048 25 0B                   		bleu	.L22
  99                             		.loc 1 773 0 is_stmt 0 discriminator 1
 100 004a EC EE                   		mov.L	[r14], r14
 101 004c CD E3 05                		mov.B	5[r14], r3
 102 004f 75 23 7F                		and #0x7f, r3
 103 0052 0C                      		bra	.L13
 104                             	.L22:
 105                             		.loc 1 773 0
 106 0053 75 43 28                		mov	#40, r3
 107                             		.balign 2,3,2
 108                             	.L13:
 109                             		.loc 1 773 0 discriminator 3
 110 0056 75 41 20                		mov	#32, r1
 111 0059 66 32                   		mov	#3, r2
 112 005b 05 00 00 00             		bsr	_Set_SmallCounter
 113                             	.LVL4:
 774:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		 			 New_safety_VS.drainStatus=VS_DRAINSTATUS_ON;
 114                             		.loc 1 774 0 is_stmt 1 discriminator 3
 115 005f FB 42 00 00 00 00       		mov.L	#_New_safety_VS, r4
 116 0065 CC 4E                   		mov.B	[r4], r14
 117 0067 75 2E F1                		and #-15, r14
 118 006a 78 1E                   		bset #1, r14
 119 006c C3 4E                   		mov.B	r14, [r4]
 120 006e 38 13 01                		bra	.L19
 121                             	.L11:
 775:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					 (void)SWTC_Run((SWTC_CountersType)SFT_EVOORDRAIN_COUNTER);
 776:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				break;
 777:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				case VS_DRAINSTATUS_ON:
 778:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						 SET_PUMP(LD_DRAIN_PUMP_IND, LOAD_ON);
 122                             		.loc 1 778 0
 123 0071 FB 42 00 00 00 00       		mov.L	#_Pump_Pos, r4
 124 0077 B0 4C                   		movu.B	1[r4], r4
 125 0079 FB 32 00 00 00 00       		mov.L	#_LoadsReq_New, r3
 126 007f FE 04 3E                		mov.B	r14, [r4,r3]
 779:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						 SET_BLDC_SPEED(BLDC_PumpReq_New[DRAIN_BLDC_PUMP],DRAIN_SFT_REQ_SPEED);
 127                             		.loc 1 779 0
 128 0082 FB 42 00 00 00 00       		mov.L	#_Tab_SFT_EV, r4
 129 0088 DD 4E 02                		mov.W	4[r4], r14
 130 008b 5F E3                   		movu.W	r14, r3
 131 008d 61 23                   		cmp	#2, r3
 132 008f 25 0C                   		bleu	.L23
 133                             		.loc 1 779 0 is_stmt 0 discriminator 1
 134 0091 EC 44                   		mov.L	[r4], r4
 135 0093 B1 44                   		movu.B	4[r4], r4
 136 0095 75 14 19                		mul	#25, r4
 137 0098 68 84                   		shlr	#8, r4
 138 009a 0C                      		bra	.L14
 139                             	.L23:
 140                             		.loc 1 779 0
 141 009b 66 C4                   		mov	#12, r4
 142 009d 03                      		.balign 2,3,5
 143                             	.L14:
 144                             		.loc 1 779 0 discriminator 3
 145 009e FB 32 00 00 00 00       		mov.L	#_BLDC_PumpReq_New, r3
 146 00a4 83 B4                   		mov.B	r4, 14[r3]
 147 00a6 5F E4                   		movu.W	r14, r4
 148 00a8 61 24                   		cmp	#2, r4
 149 00aa 25 10                   		bleu	.L24
 150                             		.loc 1 779 0 discriminator 4
 151 00ac FB 42 00 00 00 00       		mov.L	#_Tab_SFT_EV, r4
 152 00b2 EC 44                   		mov.L	[r4], r4
 153 00b4 89 44                   		mov.B	4[r4], r4
 154 00b6 75 14 19                		mul	#25, r4
 155 00b9 0D                      		bra	.L15
 156                             	.L24:
 157                             		.loc 1 779 0
 158 00ba FB 46 80                		mov	#0xffffff80, r4
 159 00bd 03                      		.balign 2,3,5
 160                             	.L15:
 161                             		.loc 1 779 0 discriminator 6
 162 00be FB 32 00 00 00 00       		mov.L	#_BLDC_PumpReq_New, r3
 163 00c4 83 BC                   		mov.B	r4, 15[r3]
 164 00c6 5F E4                   		movu.W	r14, r4
 165 00c8 61 24                   		cmp	#2, r4
 166 00ca 25 12                   		bleu	.L25
 167                             		.loc 1 779 0 discriminator 8
 168 00cc FB 42 00 00 00 00       		mov.L	#_Tab_SFT_EV, r4
 169 00d2 EC 44                   		mov.L	[r4], r4
 170 00d4 B1 44                   		movu.B	4[r4], r4
 171 00d6 61 04                   		cmp	#0, r4
 172 00d8 FC DB 41                		scne.L	r4
 173 00db 0B                      		bra	.L16
 174                             	.L25:
 175                             		.loc 1 779 0
 176 00dc 66 14                   		mov.L	#1, r4
 177                             		.balign 2,3,5
 178                             	.L16:
 179                             		.loc 1 779 0 discriminator 10
 180 00de FB 32 00 00 00 00       		mov.L	#_BLDC_PumpReq_New, r3
 181 00e4 83 3C                   		mov.B	r4, 13[r3]
 780:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						 SET_BLDC_TIME(BLDC_PumpReq_New[DRAIN_BLDC_PUMP],DRAIN_SFT_REQ_TIME);
 182                             		.loc 1 780 0 is_stmt 1 discriminator 10
 183 00e6 5F E4                   		movu.W	r14, r4
 184 00e8 61 24                   		cmp	#2, r4
 185 00ea 25 11                   		bleu	.L26
 186                             		.loc 1 780 0 is_stmt 0 discriminator 1
 187 00ec FB 42 00 00 00 00       		mov.L	#_Tab_SFT_EV, r4
 188 00f2 EC 44                   		mov.L	[r4], r4
 189 00f4 B0 CC                   		movu.B	3[r4], r4
 190 00f6 63 54                   		mul	#5, r4
 191 00f8 68 84                   		shlr	#8, r4
 192 00fa 0C                      		bra	.L17
 193                             	.L26:
 194                             		.loc 1 780 0
 195 00fb 66 04                   		mov	#0, r4
 196 00fd 03                      		.balign 2,3,5
 197                             	.L17:
 198                             		.loc 1 780 0 discriminator 3
 199 00fe FB 32 00 00 00 00       		mov.L	#_BLDC_PumpReq_New, r3
 200 0104 84 34                   		mov.B	r4, 16[r3]
 201 0106 5F EE                   		movu.W	r14, r14
 202 0108 61 2E                   		cmp	#2, r14
 203 010a 25 10                   		bleu	.L27
 204                             		.loc 1 780 0 discriminator 4
 205 010c FB E2 00 00 00 00       		mov.L	#_Tab_SFT_EV, r14
 206 0112 EC EE                   		mov.L	[r14], r14
 207 0114 CD EE 03                		mov.B	3[r14], r14
 208 0117 63 5E                   		mul	#5, r14
 209 0119 0B                      		bra	.L18
 210                             	.L27:
 211                             		.loc 1 780 0
 212 011a 66 1E                   		mov	#1, r14
 213                             		.balign 2,3,5
 214                             	.L18:
 215                             		.loc 1 780 0 discriminator 6
 216 011c FB 42 00 00 00 00       		mov.L	#_BLDC_PumpReq_New, r4
 217 0122 C7 4E 11                		mov.B	r14, 17[r4]
 218 0125 03                      		.balign 2,3,2
 219                             	.L12:
 781:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				case VS_DRAINSTATUS_OFF:
 782:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					if ( SWTC_IsExpired((SWTC_CountersType)SFT_EVOORDRAIN_COUNTER))
 220                             		.loc 1 782 0 is_stmt 1
 221 0126 75 41 20                		mov	#32, r1
 222 0129 05 00 00 00             		bsr	_SWTC_IsExpired
 223                             	.LVL5:
 224 012d 61 01                   		cmp	#0, r1
 225 012f 20 52                   		beq	.L19
 783:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					{
 784:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						(void)Set_SmallCounter((SWTC_CountersType)SFT_EVOORDRAIN_COUNTER, (SWTC_PrescalerType)COUNTER
 226                             		.loc 1 784 0
 227 0131 FB E2 00 00 00 00       		mov.L	#_Tab_SFT_EV, r14
 228 0137 5D E4 02                		movu.W	4[r14], r4
 229 013a 61 34                   		cmp	#3, r4
 230 013c 25 0B                   		bleu	.L28
 231                             		.loc 1 784 0 is_stmt 0 discriminator 1
 232 013e EC EE                   		mov.L	[r14], r14
 233 0140 CD E3 06                		mov.B	6[r14], r3
 234 0143 75 23 7F                		and #0x7f, r3
 235 0146 0C                      		bra	.L20
 236                             	.L28:
 237                             		.loc 1 784 0
 238 0147 75 43 3C                		mov	#60, r3
 239                             		.balign 2,3,2
 240                             	.L20:
 241                             		.loc 1 784 0 discriminator 3
 242 014a 75 41 20                		mov	#32, r1
 243 014d 66 52                   		mov	#5, r2
 244 014f 05 00 00 00             		bsr	_Set_SmallCounter
 245                             	.LVL6:
 785:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						(void)SWTC_Stop((SWTC_CountersType)SFT_EVOORDRAIN_COUNTER);
 246                             		.loc 1 785 0 is_stmt 1 discriminator 3
 247 0153 75 41 20                		mov	#32, r1
 248 0156 05 00 00 00             		bsr	_SWTC_Stop
 249                             	.LVL7:
 786:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						 if (New_safety_VS.drainStatus++ >= VS_DRAINSTATUS_OFF)
 250                             		.loc 1 786 0 discriminator 3
 251 015a FB E2 00 00 00 00       		mov.L	#_New_safety_VS, r14
 252 0160 58 E4                   		movu.B	[r14], r4
 253 0162 68 14                   		shlr	#1, r4
 254 0164 64 74                   		and #7, r4
 255 0166 61 14                   		cmp	#1, r4
 256 0168 2A 10                   		bgt	.L21
 257                             		.loc 1 786 0 is_stmt 0
 258 016a 62 14                   		add	#1, r4
 259 016c 64 74                   		and #7, r4
 260 016e 4B 44                   		add	r4, r4
 261 0170 CC E3                   		mov.B	[r14], r3
 262 0172 75 23 F1                		and #-15, r3
 263 0175 57 34                   		or	r3, r4
 264 0177 0F                      		bra	.L39
 265                             	.L21:
 787:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						 {
 788:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						 	New_safety_VS.drainStatus= VS_DRAINSTATUS_IDLE;
 266                             		.loc 1 788 0 is_stmt 1
 267 0178 CC E4                   		mov.B	[r14], r4
 268 017a 75 24 F1                		and #-15, r4
 269 017d 03                      		.balign 2,3,1
 270                             	.L39:
 271 017e C3 E4                   		mov.B	r4, [r14]
 272 0180 02                      		rts
 273                             	.L19:
 789:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						 }
 790:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 791:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					}else
 792:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		        	{
 793:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		   				(void)SWTC_Run((SWTC_CountersType)SFT_EVOORDRAIN_COUNTER);
 274                             		.loc 1 793 0
 275 0181 75 41 20                		mov	#32, r1
 276 0184 04 00 00 00             		bra	_SWTC_Run
 277                             	.LVL8:
 278                             	.L8:
 794:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 795:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					}
 796:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				break;
 797:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			}
 798:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		}else
 799:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		{
 800:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			New_safety_VS.drainStatus= VS_DRAINSTATUS_IDLE;
 279                             		.loc 1 800 0
 280 0188 75 2E F1                		and #-15, r14
 281 018b C3 4E                   		mov.B	r14, [r4]
 282 018d 09                      		bra	.L38
 283                             	.L7:
 801:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			(void)SWTC_Stop((SWTC_CountersType)SFT_EVOORDRAIN_COUNTER);
 802:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		}
 803:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}else
 804:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{
 805:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		New_safety_VS.drainStatus= VS_DRAINSTATUS_IDLE;
 284                             		.loc 1 805 0
 285 018e CC E4                   		mov.B	[r14], r4
 286 0190 75 24 F1                		and #-15, r4
 287 0193 C3 E4                   		mov.B	r4, [r14]
 288 0195 03                      		.balign 2,3,2
 289                             	.L38:
 806:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		(void)SWTC_Stop((SWTC_CountersType)SFT_EVOORDRAIN_COUNTER);
 290                             		.loc 1 806 0
 291 0196 75 41 20                		mov	#32, r1
 292 0199 04 00 00 00             		bra	_SWTC_Stop
 293                             	.LVL9:
 294                             	.L5:
 295 019d 02                      		rts
 296                             	.LFE9:
 298                             		.section	.text.SFT_Sensor_EV_Unblock,"ax",@progbits
 299                             		.global	_SFT_Sensor_EV_Unblock
 301                             	_SFT_Sensor_EV_Unblock:
 302                             	.LFB10:
 807:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 808:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 809:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** }
 810:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** #endif
 811:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 812:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /**
 813:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** funzione per la determinazione di acqua in vasca a seguito dell'introduzuione dei sensori virtuali 
 814:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** assenza del pressostato .
 815:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** Se si trova acqua in vasca si fanno i tentativi di sblocco della turbina e poi si va in fault.
 816:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 817:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 818:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** -in ( stato sensore virtuale)
 819:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** -out eventuale fault
 820:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 821:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 822:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \version		1.0.0
 823:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \date 			4/4/2012
 824:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \author			Emanuela Antognoli
 825:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 826:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** */
 827:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 828:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** void SFT_Sensor_EV_Unblock ( void)
 829:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** {
 303                             		.loc 1 829 0
 304 0000 6E 7A                   		pushm	r7-r10
 305                             	.LCFI0:
 830:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 831:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if ( (LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b == EV_OFF )&& ReadVS_Data.ctrl_active)
 306                             		.loc 1 831 0
 307 0002 FB 72 00 00 00 00       		mov.L	#_EV_Pos, r7
 308 0008 58 77                   		movu.B	[r7], r7
 309 000a FB A2 00 00 00 00       		mov.L	#_LoadsReq_New, r10
 310 0010 FE C7 A7                		movu.B	[r7,r10], r7
 311 0013 61 07                   		cmp	#0, r7
 312 0015 3B 46 01                		bne	.L41
 313                             		.loc 1 831 0 is_stmt 0 discriminator 1
 314 0018 FB A2 00 00 00 00       		mov.L	#_ReadVS_Data, r10
 315 001e CC AE                   		mov.B	[r10], r14
 316 0020 EF E7                   		mov.L	r14, r7
 317 0022 64 27                   		and #2, r7
 318 0024 3A 37 01                		beq	.L41
 832:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{/* non sto pilotando EV da uP, cioè non sto caricando acqua intenzionalmente , ma neanche sto fa
 833:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 834:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		if (TESTBIT(ActiveAlgorithmBmp[0],AAL_READVIRTUALSENSOR_ALG))
 319                             		.loc 1 834 0 is_stmt 1
 320 0027 FB 72 00 00 00 00       		mov.L	#_ActiveAlgorithmBmp, r7
 321 002d CC 77                   		mov.B [r7], r7
 322 002f 75 27 10                		and #16, r7
 323 0032 3A 92 00                		beq	.L42
 835:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		{	/* questo dovrebbe essere vero solo in run , prima dell'end*/
 836:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			if ( TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_BIT+ReadVS_Data.pumpType)) && (ReadVS_Data.control_do
 324                             		.loc 1 836 0
 325 0035 EF E7                   		mov.L	r14, r7
 326 0037 64 17                   		and #1, r7
 327 0039 FB A2 00 00 00 00       		mov.L	#_GIValid, r10
 328 003f 5C A4                   		movu.W	[r10], r4
 329 0041 71 7A 0A                		add	#10, r7, r10
 330 0044 FC 6B 4A                		btst	r10, r4
 331 0047 20 49                   		beq	.L43
 332                             		.loc 1 836 0 is_stmt 0 discriminator 1
 333 0049 64 4E                   		and #4, r14
 334 004b 21 45                   		bne	.L43
 837:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			{
 838:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				if( ( Virtual_Sensor_Value[ReadVS_Data.pumpType]==0 )||(Virtual_Sensor_Value[ReadVS_Data.pumpTy
 335                             		.loc 1 838 0 is_stmt 1
 336 004d 70 77 00 00 00 00       		add	#_Virtual_Sensor_Value, r7
 337 0053 58 77                   		movu.B	[r7], r7
 338 0055 FB E2 00 00 00 00       		mov.L	#_SftPulseWarn, r14
 339 005b 61 07                   		cmp	#0, r7
 340 005d 15                      		beq	.L44
 341                             		.loc 1 838 0 is_stmt 0 discriminator 1
 342 005e 61 57                   		cmp	#5, r7
 343 0060 21 1E                   		bne	.L45
 344                             		.balign 2,3,5
 345                             	.L44:
 839:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				{
 840:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					/* CONTROLLO TERMINATO PER ASSENZA DI ACQUA*/
 841:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 842:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					SftPulseWarn.vs_presence_h2o = FALSE;
 346                             		.loc 1 842 0 is_stmt 1
 347 0062 CC E7                   		mov.B	[r14], r7
 348 0064 7A 47                   		bclr	#4, r7
 349 0066 C3 E7                   		mov.B	r7, [r14]
 843:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					LoadEVCheck.status	=LOAD_EV_PILOT_INIT;
 350                             		.loc 1 843 0
 351 0068 FB 72 00 00 00 00       		mov.L	#_LoadEVCheck, r7
 352 006e 3C 70 00                		mov.B	#0, [r7]
 844:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 845:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					ReadVS_Data.ctrl_active=FALSE;
 353                             		.loc 1 845 0
 354 0071 FB 72 00 00 00 00       		mov.L	#_ReadVS_Data, r7
 355 0077 CC 7A                   		mov.B	[r7], r10
 356 0079 7A 1A                   		bclr	#1, r10
 357 007b C3 7A                   		mov.B	r10, [r7]
 358 007d 0F                      		bra	.L46
 359                             	.L45:
 846:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				}else
 847:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				{
 848:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 849:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					SftPulseWarn.vs_presence_h2o =TRUE ;
 360                             		.loc 1 849 0
 361 007e CC E7                   		mov.B	[r14], r7
 362 0080 78 47                   		bset	#4, r7
 363 0082 C3 E7                   		mov.B	r7, [r14]
 364                             		.balign 2,3,5
 365                             	.L46:
 850:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				}
 851:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				ReadVS_Data.control_done=TRUE;
 366                             		.loc 1 851 0
 367 0084 FB 72 00 00 00 00       		mov.L	#_ReadVS_Data, r7
 368 008a CC 7A                   		mov.B	[r7], r10
 369 008c 78 2A                   		bset	#2, r10
 370 008e 2E 32                   		bra	.L69
 371                             	.L43:
 852:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			}/* SE NON è VALIDO RIMANE IN ATTESA E NON FA NULLA */
 853:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			else
 854:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			if (SWTC_IsExpired((SWTC_CountersType)READ_VS_M_TIMER) && (ReadVS_Data.control_done==FALSE) )
 372                             		.loc 1 854 0
 373 0090 75 41 1C                		mov	#28, r1
 374 0093 05 00 00 00             		bsr	_SWTC_IsExpired
 375 0097 61 01                   		cmp	#0, r1
 376 0099 20 47                   		beq	.L47
 377                             		.loc 1 854 0 is_stmt 0 discriminator 1
 378 009b FB 72 00 00 00 00       		mov.L	#_ReadVS_Data, r7
 379 00a1 CC 7A                   		mov.B	[r7], r10
 380 00a3 EF AE                   		mov.L	r10, r14
 381 00a5 64 4E                   		and	#4, r14
 382 00a7 21 39                   		bne	.L47
 855:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			{
 856:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 857:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				SftPulseWarn.vs_presence_h2o = FALSE;
 383                             		.loc 1 857 0 is_stmt 1
 384 00a9 FB 42 00 00 00 00       		mov.L	#_SftPulseWarn, r4
 385 00af CC 43                   		mov.B	[r4], r3
 386 00b1 7A 43                   		bclr	#4, r3
 387 00b3 C3 43                   		mov.B	r3, [r4]
 858:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				LoadEVCheck.status	=LOAD_EV_PILOT_INIT;
 388                             		.loc 1 858 0
 389 00b5 FB 42 00 00 00 00       		mov.L	#_LoadEVCheck, r4
 390 00bb C3 4E                   		mov.B	r14, [r4]
 859:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 860:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				ReadVS_Data.ctrl_active=FALSE;
 391                             		.loc 1 860 0
 392 00bd 7A 1A                   		bclr	#1, r10
 393 00bf 03                      		.balign 2,3,1
 394                             	.L69:
 395 00c0 C3 7A                   		mov.B	r10, [r7]
 396 00c2 2E 1E                   		bra	.L47
 397                             	.L42:
 861:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 862:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			}
 863:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		}else
 864:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		{
 865:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			if ( SftPulseWarn.vs_presence_h2o==FALSE)
 398                             		.loc 1 865 0
 399 00c4 FB 72 00 00 00 00       		mov.L	#_SftPulseWarn, r7
 400 00ca CC 77                   		mov.B	[r7], r7
 401 00cc 75 27 10                		and	#16, r7
 402 00cf 21 11                   		bne	.L47
 866:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			{/* uP terminato e non ha dato mai un valore valido del sensore */
 867:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				ReadVS_Data.ctrl_active=FALSE;
 403                             		.loc 1 867 0
 404 00d1 7A 1E                   		bclr	#1, r14
 868:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				ReadVS_Data.control_done=FALSE;
 405                             		.loc 1 868 0
 406 00d3 7A 2E                   		bclr	#2, r14
 407 00d5 C3 AE                   		mov.B	r14, [r10]
 869:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 870:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				LoadEVCheck.status =LOAD_EV_PILOT_INIT;
 408                             		.loc 1 870 0
 409 00d7 FB A2 00 00 00 00       		mov.L	#_LoadEVCheck, r10
 410 00dd C3 A7                   		mov.B	r7, [r10]
 411 00df 03                      		.balign 2,3,5
 412                             	.L47:
 871:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 872:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			}
 873:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		}
 874:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		if (SftPulseWarn.vs_presence_h2o)
 413                             		.loc 1 874 0
 414 00e0 FB 72 00 00 00 00       		mov.L	#_SftPulseWarn, r7
 415 00e6 CC 77                   		mov.B [r7], r7
 416 00e8 75 27 10                		and #16, r7
 417 00eb 3A 89 00                		beq	.L40
 875:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		{
 876:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			FLT_pilotLoadEV_Mgmt(CHECK_EV_VS_FAULT_CTRL);
 418                             		.loc 1 876 0
 419 00ee 66 21                   		mov	#2, r1
 420 00f0 05 00 00 00             		bsr	_FLT_pilotLoadEV_Mgmt
 877:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			if ( LoadEVCheck.status != LOAD_EV_PILOT_OK)
 421                             		.loc 1 877 0
 422 00f4 FB A2 00 00 00 00       		mov.L	#_LoadEVCheck, r10
 423 00fa 58 A7                   		movu.B	[r10], r7
 878:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			{
 879:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				if ( FLT_checkForCurrentFault(FLT_CODE_LOAD_EV_KO,FLT_CODE_LOAD_EV_KO))
 424                             		.loc 1 879 0
 425 00fc 66 21                   		mov	#2, r1
 426 00fe CF 12                   		mov.B	r1, r2
 877:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			if ( LoadEVCheck.status != LOAD_EV_PILOT_OK)
 427                             		.loc 1 877 0
 428 0100 61 67                   		cmp	#6, r7
 429 0102 20 3B                   		beq	.L52
 430                             		.loc 1 879 0
 431 0104 05 00 00 00             		bsr	_FLT_checkForCurrentFault
 432 0108 61 01                   		cmp	#0, r1
 433 010a 20 12                   		beq	.L53
 880:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				{/* già gestisco il fault*/
 881:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					if (PREFAULT_STEP != FaultMgmt_Data[0].step)
 434                             		.loc 1 881 0
 435 010c FB 72 00 00 00 00       		mov.L	#_FaultMgmt_Data, r7
 436 0112 CD 7E 02                		mov.B	2[r7], r14
 437 0115 75 2E 7F                		and #0x7f, r14
 438 0118 61 3E                   		cmp	#3, r14
 439 011a 20 0C                   		beq	.L54
 440                             		.balign 2,3,1
 441                             	.L53:
 882:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					{/* se non sono in prefault richiamo la macchina a stati finchè non va in prefault ( i tempi 
 883:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						FLT_manageFault(FLT_CODE_LOAD_EV_KO,FLT_SUBCODE_LOAD_EV_KO);
 442                             		.loc 1 883 0
 443 011c 66 21                   		mov	#2, r1
 444 011e 66 12                   		mov	#1, r2
 884:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					}else
 885:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					{/* sono in prefault , la richiamo solo quando ho finito i tentativi di sblocco */
 886:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						if(LoadEVCheck.status==LOAD_EV_PILOT_END)
 887:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						{/* dovrebbe andare in FAULT.*/
 888:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 							FLT_manageFault(FLT_CODE_LOAD_EV_KO,FLT_SUBCODE_LOAD_EV_KO);
 889:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 							if ( (FAULT_STEP == FaultMgmt_Data[0].step))
 890:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 							{
 891:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 								ReadVS_Data.ctrl_active = FALSE;
 892:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 							}
 893:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						}
 894:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					}
 895:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				}else
 896:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				{/* se non sto gestendo il fault , allora richiamo la macchina, magari il problema che la tiene
 897:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					FLT_manageFault(FLT_CODE_LOAD_EV_KO,FLT_SUBCODE_LOAD_EV_KO);
 898:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 899:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				}
 900:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			}else
 901:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			{
 902:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				FLT_ResetFaultDetectProc( FLT_CODE_LOAD_EV_KO, FLT_CODE_LOAD_EV_KO,(uint16_t)TOUT_RESET_PREFAUL
 903:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				if ( FLT_checkForCurrentFault(FLT_CODE_LOAD_EV_KO,FLT_CODE_LOAD_EV_KO)==FALSE)
 904:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				{/* già gestisco il fault*/
 905:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					
 906:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					ReadVS_Data.ctrl_active = FALSE;
 907:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				
 908:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				}
 909:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			}				
 910:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		}
 911:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}else
 912:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{
 913:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		ReadVS_Data.control_done=FALSE;
 914:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		SftPulseWarn.vs_presence_h2o= FALSE;
 915:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 916:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 917:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** }
 445                             		.loc 1 917 0
 446 0120 6F 7A                   		popm	r7-r10
 883:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						FLT_manageFault(FLT_CODE_LOAD_EV_KO,FLT_SUBCODE_LOAD_EV_KO);
 447                             		.loc 1 883 0
 448 0122 04 00 00 00             		bra	_FLT_manageFault
 449                             	.L54:
 886:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						if(LoadEVCheck.status==LOAD_EV_PILOT_END)
 450                             		.loc 1 886 0
 451 0126 58 AA                   		movu.B	[r10], r10
 452 0128 61 5A                   		cmp	#5, r10
 453 012a 21 4A                   		bne	.L40
 888:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 							FLT_manageFault(FLT_CODE_LOAD_EV_KO,FLT_SUBCODE_LOAD_EV_KO);
 454                             		.loc 1 888 0
 455 012c 66 21                   		mov	#2, r1
 456 012e 66 12                   		mov	#1, r2
 457 0130 05 00 00 00             		bsr	_FLT_manageFault
 889:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 							if ( (FAULT_STEP == FaultMgmt_Data[0].step))
 458                             		.loc 1 889 0
 459 0134 88 F7                   		mov.B	2[r7], r7
 460 0136 75 27 7F                		and #0x7f, r7
 461 0139 61 47                   		cmp	#4, r7
 462 013b 2E 12                   		bra	.L73
 463                             	.L52:
 902:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				FLT_ResetFaultDetectProc( FLT_CODE_LOAD_EV_KO, FLT_CODE_LOAD_EV_KO,(uint16_t)TOUT_RESET_PREFAUL
 464                             		.loc 1 902 0
 465 013d 66 03                   		mov	#0, r3
 466 013f 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
 903:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				if ( FLT_checkForCurrentFault(FLT_CODE_LOAD_EV_KO,FLT_CODE_LOAD_EV_KO)==FALSE)
 467                             		.loc 1 903 0
 468 0143 66 21                   		mov	#2, r1
 469 0145 CF 12                   		mov.B	r1, r2
 470 0147 05 00 00 00             		bsr	_FLT_checkForCurrentFault
 471 014b 61 01                   		cmp	#0, r1
 472                             	.L73:
 473 014d 21 27                   		bne	.L40
 906:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					ReadVS_Data.ctrl_active = FALSE;
 474                             		.loc 1 906 0
 475 014f FB 72 00 00 00 00       		mov.L	#_ReadVS_Data, r7
 476 0155 CC 7A                   		mov.B	[r7], r10
 477 0157 7A 1A                   		bclr	#1, r10
 478 0159 2E 19                   		bra	.L70
 479                             	.L41:
 913:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		ReadVS_Data.control_done=FALSE;
 480                             		.loc 1 913 0
 481 015b FB 72 00 00 00 00       		mov.L	#_ReadVS_Data, r7
 482 0161 CC 7A                   		mov.B	[r7], r10
 483 0163 7A 2A                   		bclr	#2, r10
 484 0165 C3 7A                   		mov.B	r10, [r7]
 914:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		SftPulseWarn.vs_presence_h2o= FALSE;
 485                             		.loc 1 914 0
 486 0167 FB 72 00 00 00 00       		mov.L	#_SftPulseWarn, r7
 487 016d CC 7A                   		mov.B	[r7], r10
 488 016f 7A 4A                   		bclr	#4, r10
 489 0171 03                      		.balign 2,3,1
 490                             	.L70:
 491 0172 C3 7A                   		mov.B	r10, [r7]
 492                             		.balign 2,3,2
 493                             	.L40:
 494                             		.loc 1 917 0
 495 0174 3F 7A 04                		rtsd	#16, r7-r10
 496                             	.LFE10:
 498 0177 03                      		.section	.text.SFT_LoadEV_Mgmt,"ax",@progbits
 499                             		.global	_SFT_LoadEV_Mgmt
 501                             	_SFT_LoadEV_Mgmt:
 502                             	.LFB11:
 918:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 919:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 920:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 921:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 922:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 923:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 924:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** /**
 925:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** Gestisce tentativi di sblocco EV nel caso di warning su turbina
 926:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** negli stati END-DELAY-PROGRAMMING
 927:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 928:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** negli stati RUN-PAUSE il fallimento dei tentativi porta alla dichiarazione del Fault F02
 929:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 930:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 931:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** La sequenza dei due tentativi può essere eseguita una sola volta
 932:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 933:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \return 			none
 934:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				
 935:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \version		1.0.0
 936:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \date 			05/09/2008
 937:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** \author			Valeria Catani
 938:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 939:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** */
 940:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 941:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** void SFT_LoadEV_Mgmt(void)
 942:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** {
 503                             		.loc 1 942 0
 504 0000 6E 7A                   		pushm	r7-r10
 505                             	.LCFI1:
 943:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	/*selezione modalità in base allo stato */
 944:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 945:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	
 946:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if( (Interpreter_Data[0].completeLabel.s.label == LBL_PROGRAMMING) ||
 506                             		.loc 1 946 0
 507 0002 FB 72 00 00 00 00       		mov.L	#_Interpreter_Data, r7
 508 0008 CC 77                   		mov.B	[r7], r7
 509 000a 64 F7                   		and	#15, r7
 510 000c 20 0C                   		beq	.L75
 511                             		.loc 1 946 0 is_stmt 0 discriminator 1
 512 000e 61 37                   		cmp	#3, r7
 513 0010 10                      		beq	.L75
 947:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		(Interpreter_Data[0].completeLabel.s.label == LBL_END) ||
 514                             		.loc 1 947 0 is_stmt 1
 515 0011 61 27                   		cmp	#2, r7
 516 0013 15                      		beq	.L75
 948:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		(Interpreter_Data[0].completeLabel.s.label == LBL_DELAY)||
 517                             		.loc 1 948 0
 518 0014 61 57                   		cmp	#5, r7
 519 0016 21 11                   		bne	.L76
 520                             		.balign 2,3,5
 521                             	.L75:
 949:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		(Interpreter_Data[0].completeLabel.s.label == LBL_FAULT) )  
 950:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{ /* PROG - END - DELAY - FAULT : no fault */
 951:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 952:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		SftPulseWarn.mode = SFT_PULSE_WARN_SAFETY_MODE; 
 522                             		.loc 1 952 0
 523 0018 FB 72 00 00 00 00       		mov.L	#_SftPulseWarn, r7
 524 001e CC 7A                   		mov.B	[r7], r10
 525 0020 75 2A 9F                		and #0xffffff9f, r10
 526 0023 C3 7A                   		mov.B	r10, [r7]
 527 0025 2E 27                   		bra	.L77
 528                             	.L76:
 953:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 954:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	else if ( (Interpreter_Data[0].completeLabel.s.label == LBL_RUN) || 
 529                             		.loc 1 954 0
 530 0027 61 17                   		cmp	#1, r7
 531 0029 15                      		beq	.L78
 532                             		.loc 1 954 0 is_stmt 0 discriminator 1
 533 002a 61 47                   		cmp	#4, r7
 534 002c 21 20                   		bne	.L77
 535                             		.balign 2,3,5
 536                             	.L78:
 955:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			  (Interpreter_Data[0].completeLabel.s.label == LBL_PAUSE) )
 956:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{/* RUN - PAUSE : dopo tentativi falliti c'� fault*/
 957:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		SftPulseWarn.mode = SFT_PULSE_WARN_FAULT_MODE;
 537                             		.loc 1 957 0 is_stmt 1
 538 002e FB 72 00 00 00 00       		mov.L	#_SftPulseWarn, r7
 539 0034 CC 7A                   		mov.B	[r7], r10
 540 0036 75 2A 9F                		and #0xffffff9f, r10
 958:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 959:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		SftPulseWarn.pilot_disable = FALSE;  /* tentativi di sblocco EV (ri)abilitati */         
 541                             		.loc 1 959 0
 542 0039 78 5A                   		bset #5, r10
 543 003b 7A 7A                   		bclr	#7, r10
 544 003d C3 7A                   		mov.B	r10, [r7]
 960:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 961:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		FltWarning.outOfRange_EVKO = FALSE;	/* reset warning */
 545                             		.loc 1 961 0
 546 003f FB 72 00 00 00 00       		mov.L	#_FltWarning, r7
 547 0045 DC 7A                   		mov.W	[r7], r10
 548 0047 7A 1A                   		bclr	#1, r10
 549 0049 D3 7A                   		mov.W	r10, [r7]
 550 004b 03                      		.balign 2,3,5
 551                             	.L77:
 962:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 963:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	else
 964:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{
 965:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		/* Do nothing */
 966:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
 967:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	
 968:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if ( (LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b == EV_OFF )&&(ReadVS_Data.ctrl_active==FALSE))
 552                             		.loc 1 968 0
 553 004c FB 72 00 00 00 00       		mov.L	#_EV_Pos, r7
 554 0052 58 77                   		movu.B	[r7], r7
 555 0054 FB A2 00 00 00 00       		mov.L	#_LoadsReq_New, r10
 556 005a FE C7 A7                		movu.B	[r7,r10], r7
 557 005d 61 07                   		cmp	#0, r7
 558 005f 3B 65 01                		bne	.L79
 559                             		.loc 1 968 0 is_stmt 0 discriminator 1
 560 0062 FB 72 00 00 00 00       		mov.L	#_ReadVS_Data, r7
 561 0068 CC 77                   		mov.B [r7], r7
 562 006a 64 27                   		and #2, r7
 563 006c 3B 58 01                		bne	.L79
 969:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{/* non sto pilotando EV da uP, cioè non sto caricando acqua intenzionalmente
 970:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	MA NON STO FACENDO IL CHECH COL SENSORE VIRTUALE */
 971:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	
 972:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 973:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		if ( SftPulseWarn.status == SFT_PULSE_WARN_NO )
 564                             		.loc 1 973 0 is_stmt 1
 565 006f FB 72 00 00 00 00       		mov.L	#_SftPulseWarn, r7
 566 0075 CC 7A                   		mov.B	[r7], r10
 567 0077 FD 74 CA 0F             		tst	#15, r10
 568 007b 21 3B                   		bne	.L81
 974:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		{ /*stato stazionario di monitoraggio*/
 975:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 976:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			if ( PM_PulseCounter_GetWarning() == b1 )
 569                             		.loc 1 976 0
 570 007d 05 00 00 00             		bsr	_PM_PulseCounter_GetWarning
 571 0081 5B 1A                   		movu.B	r1, r10
 572 0083 61 2A                   		cmp	#2, r10
 573 0085 21 31                   		bne	.L81
 977:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			{ /*low frequency warning*/
 978:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 979:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				 /*config + init counter per monitoraggio warning su turbina*/
 980:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				(void)Set_SmallCounter((SWTC_CountersType)SFT_EVCHECK_S_COUNTER, (SWTC_PrescalerType)COUNTERS2_
 574                             		.loc 1 980 0
 575 0087 FB E2 00 00 00 00       		mov.L	#_Tab_SFT_EV, r14
 576 008d EC EE                   		mov.L	[r14], r14
 577 008f CC E3                   		mov.B	[r14], r3
 578 0091 75 41 24                		mov	#36, r1
 579 0094 66 32                   		mov	#3, r2
 580 0096 75 23 7F                		and #0x7f, r3
 581 0099 05 00 00 00             		bsr	_Set_SmallCounter
 981:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 982:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 983:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				PM_PulseCounter_Reset_Warning(PULSECOUNTER_RESET_BOTH_WARNING);         /*  Reset di tutti i wa
 582                             		.loc 1 983 0
 583 009d CF A1                   		mov.B	r10, r1
 584 009f 05 00 00 00             		bsr	_PM_PulseCounter_Reset_Warning
 984:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 985:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				LoadEVCheck.status = LOAD_EV_PILOT_OK;
 585                             		.loc 1 985 0
 586 00a3 FB A2 00 00 00 00       		mov.L	#_LoadEVCheck, r10
 587 00a9 F8 A4 06                		mov.B	#6, [r10]
 986:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 987:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				SftPulseWarn.status = SFT_PULSE_WARN_INIT;
 588                             		.loc 1 987 0
 589 00ac CC 7A                   		mov.B	[r7], r10
 590 00ae 75 2A F0                		and #-16, r10
 591 00b1 78 0A                   		bset #0, r10
 592 00b3 C3 7A                   		mov.B	r10, [r7]
 593 00b5 03                      		.balign 2,3,5
 594                             	.L81:
 988:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			} 
 989:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 990:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		}
 991:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 992:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		if ( SftPulseWarn.status == SFT_PULSE_WARN_INIT )
 595                             		.loc 1 992 0
 596 00b6 FB 72 00 00 00 00       		mov.L	#_SftPulseWarn, r7
 597 00bc CC 7A                   		mov.B	[r7], r10
 598 00be 64 FA                   		and #15, r10
 599 00c0 61 1A                   		cmp	#1, r10
 600 00c2 21 4C                   		bne	.L84
 993:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		{
 994:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			(void)SWTC_Run((SWTC_CountersType)SFT_EVCHECK_S_COUNTER);
 601                             		.loc 1 994 0
 602 00c4 75 41 24                		mov	#36, r1
 603 00c7 05 00 00 00             		bsr	_SWTC_Run
 995:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
 996:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			if ( SWTC_IsExpired((SWTC_CountersType)SFT_EVCHECK_S_COUNTER))
 604                             		.loc 1 996 0
 605 00cb 75 41 24                		mov	#36, r1
 606 00ce 05 00 00 00             		bsr	_SWTC_IsExpired
 607 00d2 61 01                   		cmp	#0, r1
 608 00d4 20 3A                   		beq	.L84
 997:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			{/* end counting preliminare -> controllo warning low frequency persistente -> tentativi di sblo
 998:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				/* il controllo sul warning viene fatto alla fine 
 999:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				del tempo perch� la frequenza da monitorare è molto bassa (<2.5 Hz typ) */
1000:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				if ( PM_PulseCounter_GetWarning() == b1 )
 609                             		.loc 1 1000 0
 610 00d6 05 00 00 00             		bsr	_PM_PulseCounter_GetWarning
 611 00da 5B 11                   		movu.B	r1, r1
1001:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				{
1002:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					if ( SftPulseWarn.pilot_disable == TRUE )
 612                             		.loc 1 1002 0
 613 00dc CC 7A                   		mov.B	[r7], r10
1000:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				if ( PM_PulseCounter_GetWarning() == b1 )
 614                             		.loc 1 1000 0
 615 00de 61 21                   		cmp	#2, r1
 616 00e0 21 28                   		bne	.L86
 617                             		.loc 1 1002 0
 618 00e2 75 2A 80                		and #0xffffff80, r10
 619 00e5 FB 72 00 00 00 00       		mov.L	#_LoadEVCheck, r7
 620 00eb 7C 7A                   		btst #7, r10
 621 00ed 15                      		beq	.L87
1003:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					{/* tentativi non consentiti : non eseguo sbloco */
1004:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
1005:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						LoadEVCheck.status = LOAD_EV_PILOT_END;  
 622                             		.loc 1 1005 0
 623 00ee 3C 70 05                		mov.B	#5, [r7]
 624 00f1 0F                      		bra	.L88
 625                             	.L87:
1006:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					}
1007:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					else
1008:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					{/* tentativi consentiti */
1009:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
1010:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						LoadEVCheck.status = LOAD_EV_PILOT_INIT;  /* init tentativi di pilotaggio 
 626                             		.loc 1 1010 0
 627 00f2 C3 7A                   		mov.B	r10, [r7]
1011:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						                             gestiti da macchina a stati */
1012:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
1013:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						PM_PulseCounter_Reset_Warning(PULSECOUNTER_RESET_BOTH_WARNING); /* Reset di tutti i warning p
 628                             		.loc 1 1013 0
 629 00f4 05 00 00 00             		bsr	_PM_PulseCounter_Reset_Warning
 630                             		.balign 2,3,5
 631                             	.L88:
1014:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
1015:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					}
1016:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					               
1017:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					SftPulseWarn.status = SFT_PULSE_WARN_EXE;
 632                             		.loc 1 1017 0
 633 00f8 FB A2 00 00 00 00       		mov.L	#_SftPulseWarn, r10
 634 00fe CC A7                   		mov.B	[r10], r7
 635 0100 75 27 F0                		and #-16, r7
 636 0103 78 17                   		bset #1, r7
 637 0105 C3 A7                   		mov.B	r7, [r10]
 638 0107 0F                      		bra	.L84
 639                             	.L86:
1018:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				}
1019:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				else
1020:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				{/* no warning o warning high freq */
1021:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
1022:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					SftPulseWarn.status = SFT_PULSE_WARN_NO; 
 640                             		.loc 1 1022 0
 641 0108 75 2A F0                		and #-16, r10
 642 010b C3 7A                   		mov.B	r10, [r7]
 643 010d 03                      		.balign 2,3,5
 644                             	.L84:
1023:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				}
1024:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			}
1025:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		}
1026:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
1027:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		if ( SftPulseWarn.status == SFT_PULSE_WARN_EXE )
 645                             		.loc 1 1027 0
 646 010e FB A2 00 00 00 00       		mov.L	#_SftPulseWarn, r10
 647 0114 CC A7                   		mov.B	[r10], r7
 648 0116 64 F7                   		and #15, r7
 649 0118 61 27                   		cmp	#2, r7
 650 011a 3B BA 00                		bne	.L74
1028:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		{/* esecuzione tentativi pilotaggio */
1029:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
1030:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			/*SFT_pilotLoadEV_Mgmt(CHECK_EV_WARN_CTRL);*/
1031:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			FLT_pilotLoadEV_Mgmt(CHECK_EV_WARN_CTRL);
 651                             		.loc 1 1031 0
 652 011d 66 11                   		mov	#1, r1
 653 011f 05 00 00 00             		bsr	_FLT_pilotLoadEV_Mgmt
1032:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			  
1033:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			if ( LoadEVCheck.status == LOAD_EV_PILOT_END )
 654                             		.loc 1 1033 0
 655 0123 FB E2 00 00 00 00       		mov.L	#_LoadEVCheck, r14
 656 0129 58 EE                   		movu.B	[r14], r14
 657 012b 61 5E                   		cmp	#5, r14
 658 012d 21 33                   		bne	.L91
1034:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			{/* end procedura : esauriti tentativi di sblocco EV */
1035:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
1036:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				if ( SftPulseWarn.mode == SFT_PULSE_WARN_FAULT_MODE )
 659                             		.loc 1 1036 0
 660 012f CC AA                   		mov.B	[r10], r10
 661 0131 75 2A 60                		and #0x60, r10
 662 0134 75 5A 20                		cmp	#32, r10
 663 0137 21 0C                   		bne	.L92
1037:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				{/* viene dichiarato il Fault F02- sub 2*/
1038:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
1039:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					/* dichiarazione Fault F02 - sub 2 */
1040:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					if ( SftPulseWarn.mode == SFT_PULSE_WARN_FAULT_MODE )
1041:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					{
1042:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						FLT_manageFault(FLT_CODE_LOAD_EV_KO,FLT_SUBCODE_PULSE_LOW_RANGE);
 664                             		.loc 1 1042 0
 665 0139 CF 71                   		mov.B	r7, r1
 666 013b CF 72                   		mov.B	r7, r2
 667 013d 05 00 00 00             		bsr	_FLT_manageFault
 668 0141 2E 0F                   		bra	.L93
 669                             	.L92:
1043:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					}
1044:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				}
1045:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				else
1046:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				{
1047:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					FltWarning.outOfRange_EVKO = TRUE;	
 670                             		.loc 1 1047 0
 671 0143 FB 72 00 00 00 00       		mov.L	#_FltWarning, r7
 672 0149 DC 7A                   		mov.W	[r7], r10
 673 014b 78 1A                   		bset	#1, r10
 674 014d D3 7A                   		mov.W	r10, [r7]
 675 014f 03                      		.balign 2,3,5
 676                             	.L93:
1048:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				}
1049:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
1050:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				SftPulseWarn.status = SFT_PULSE_WARN_NO;		/*VERIFICA CHE SIA OK QUESTO STATO!*/
 677                             		.loc 1 1050 0
 678 0150 FB 72 00 00 00 00       		mov.L	#_SftPulseWarn, r7
 679 0156 CC 7A                   		mov.B	[r7], r10
1051:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
1052:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				SftPulseWarn.pilot_disable = TRUE; 	 /* tentativi disabilitati */
 680                             		.loc 1 1052 0
 681 0158 76 2A F0 00             		and #0xf0, r10
 682 015c 78 7A                   		bset	#7, r10
 683 015e 2E 74                   		bra	.L116
 684                             	.L91:
1053:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			}
1054:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			else if ( LoadEVCheck.status == LOAD_EV_PILOT_OK )
 685                             		.loc 1 1054 0
 686 0160 61 6E                   		cmp	#6, r14
 687 0162 21 2D                   		bne	.L94
1055:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			{/* tentativo di pilotaggio OK - reset fault e prefault */
1056:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
1057:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				FltWarning.outOfRange_EVKO = FALSE;
 688                             		.loc 1 1057 0
 689 0164 FB E2 00 00 00 00       		mov.L	#_FltWarning, r14
 690 016a DC E4                   		mov.W	[r14], r4
 691 016c 7A 14                   		bclr	#1, r4
 692 016e D3 E4                   		mov.W	r4, [r14]
1058:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				/* reset PreFault F02 - sub 2 */
1059:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				FLT_ResetFaultDetectProc( FLT_CODE_LOAD_EV_KO, FLT_SUBCODE_PULSE_LOW_RANGE,(uint16_t)TOUT_RESET
 693                             		.loc 1 1059 0
 694 0170 CF 71                   		mov.B	r7, r1
 695 0172 CF 72                   		mov.B	r7, r2
 696 0174 66 03                   		mov	#0, r3
 697 0176 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
1060:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				if (FLT_checkForCurrentFault(FLT_CODE_LOAD_EV_KO,FLT_SUBCODE_PULSE_LOW_RANGE)==FALSE )
 698                             		.loc 1 1060 0
 699 017a CF 71                   		mov.B	r7, r1
 700 017c CF 72                   		mov.B	r7, r2
 701 017e 05 00 00 00             		bsr	_FLT_checkForCurrentFault
 702 0182 61 01                   		cmp	#0, r1
 703 0184 21 50                   		bne	.L74
1061:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				{
1062:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					SftPulseWarn.status = SFT_PULSE_WARN_NO;
 704                             		.loc 1 1062 0
 705 0186 CC A7                   		mov.B	[r10], r7
 706 0188 75 27 F0                		and #-16, r7
 707 018b C3 A7                   		mov.B	r7, [r10]
 708 018d 2E 47                   		bra	.L74
 709                             	.L94:
1063:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				}
1064:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
1065:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			}
1066:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
1067:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			else
1068:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			{
1069:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				/* Do nothing */
1070:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				if ( SftPulseWarn.mode == SFT_PULSE_WARN_FAULT_MODE )
 710                             		.loc 1 1070 0
 711 018f CC AA                   		mov.B	[r10], r10
 712 0191 75 2A 60                		and #0x60, r10
 713 0194 75 5A 20                		cmp	#32, r10
 714 0197 21 3D                   		bne	.L74
1071:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				{
1072:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					if ( FLT_checkForCurrentFault(FLT_CODE_LOAD_EV_KO,FLT_SUBCODE_PULSE_LOW_RANGE))
 715                             		.loc 1 1072 0
 716 0199 CF 71                   		mov.B	r7, r1
 717 019b CF 72                   		mov.B	r7, r2
 718 019d 05 00 00 00             		bsr	_FLT_checkForCurrentFault
 719 01a1 61 01                   		cmp	#0, r1
 720 01a3 20 17                   		beq	.L96
1073:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					{/* già gestisco il fault*/
1074:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						if (PREFAULT_STEP != FaultMgmt_Data[0].step)
 721                             		.loc 1 1074 0
 722 01a5 FB A2 00 00 00 00       		mov.L	#_FaultMgmt_Data, r10
 723 01ab CD AA 02                		mov.B	2[r10], r10
 724 01ae 75 2A 7F                		and #0x7f, r10
 725 01b1 61 3A                   		cmp	#3, r10
 726 01b3 20 21                   		beq	.L74
1075:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						{/* se non sono in prefault richiamo la macchina a stati finchè non va in prefault ( i tempi
1076:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 							FLT_manageFault(FLT_CODE_LOAD_EV_KO,FLT_SUBCODE_PULSE_LOW_RANGE);
 727                             		.loc 1 1076 0
 728 01b5 CF 71                   		mov.B	r7, r1
 729 01b7 CF 72                   		mov.B	r7, r2
 730 01b9 0D                      		bra	.L117
 731                             	.L96:
1077:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						}
1078:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					}else
1079:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					{/* se non sto gestendo il fault , allora richiamo la macchina, magari il problema che la tien
1080:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						FLT_manageFault(FLT_CODE_LOAD_EV_KO,FLT_SUBCODE_LOAD_EV_KO);
 732                             		.loc 1 1080 0
 733 01ba CF 71                   		mov.B	r7, r1
 734 01bc 66 12                   		mov	#1, r2
 735                             		.balign 2,3,1
 736                             	.L117:
1081:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
1082:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					}
1083:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				}
1084:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			}
1085:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
1086:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		}
1087:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
1088:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	else
1089:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	{/* EV pilotata da uP per caricamento */
1090:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
1091:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		SftPulseWarn.status = SFT_PULSE_WARN_NO;  
1092:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
1093:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		SftPulseWarn.pilot_disable = FALSE;  /* tentativi di sblocco EV abilitati */ 
1094:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	}
1095:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 
1096:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** }
 737                             		.loc 1 1096 0
 738 01be 6F 7A                   		popm	r7-r10
1080:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						FLT_manageFault(FLT_CODE_LOAD_EV_KO,FLT_SUBCODE_LOAD_EV_KO);
 739                             		.loc 1 1080 0
 740 01c0 04 00 00 00             		bra	_FLT_manageFault
 741                             	.L79:
1091:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		SftPulseWarn.status = SFT_PULSE_WARN_NO;  
 742                             		.loc 1 1091 0
 743 01c4 FB 72 00 00 00 00       		mov.L	#_SftPulseWarn, r7
 744 01ca CC 7A                   		mov.B	[r7], r10
1093:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		SftPulseWarn.pilot_disable = FALSE;  /* tentativi di sblocco EV abilitati */ 
 745                             		.loc 1 1093 0
 746 01cc 76 2A F0 00             		and #0xf0, r10
 747 01d0 7A 7A                   		bclr	#7, r10
 748                             		.balign 2,3,1
 749                             	.L116:
 750 01d2 C3 7A                   		mov.B	r10, [r7]
 751                             		.balign 2,3,2
 752                             	.L74:
 753                             		.loc 1 1096 0
 754 01d4 3F 7A 04                		rtsd	#16, r7-r10
 755                             	.LFE11:
 757 01d7 03                      		.section	.text.SFT_safetyManagement,"ax",@progbits
 758                             		.global	_SFT_safetyManagement
 760                             	_SFT_safetyManagement:
 761                             	.LFB0:
  99:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** {
 762                             		.loc 1 99 0
 763 0000 6E 7B                   		pushm	r7-r11
 764                             	.LCFI2:
 102:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if (Res_Pos[LD_WASH_RES_IND] != NO_LD_POS)
 765                             		.loc 1 102 0
 766 0002 FB 72 00 00 00 00       		mov.L	#_Res_Pos, r7
 767 0008 58 77                   		movu.B	[r7], r7
 768 000a 75 57 FF                		cmp	#0xff, r7
 769 000d 3A 0D 02                		beq	.L120
 770                             	.LBB17:
 771                             	.LBB18:
 285:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if (LoadsReq_New[Res_Pos[LD_WASH_RES_IND]].b == RES_ON)
 772                             		.loc 1 285 0
 773 0010 FB A2 00 00 00 00       		mov.L	#_LoadsReq_New, r10
 774 0016 FE C7 AE                		movu.B	[r7,r10], r14
 775 0019 FB A2 00 00 00 00       		mov.L	#_HWC_Flags, r10
 776 001f 61 1E                   		cmp	#1, r14
 777 0021 3B 51 01                		bne	.L121
 287:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         if(HWC_Flags.bit.vs_wash_presence)
 778                             		.loc 1 287 0
 779 0024 DC AA                   		mov.W	[r10], r10
 780 0026 75 2A 10                		and #16, r10
 781 0029 5F AE                   		movu.W	r10, r14
 782 002b 61 0E                   		cmp	#0, r14
 783 002d 20 17                   		beq	.L122
 784                             	.LVL10:
 289:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		   pressValid = ( GET_BLDC_SPEED(BLDC_PumpReq_Old[WASH_BLDC_PUMP])>0);
 785                             		.loc 1 289 0
 786 002f FB E2 00 00 00 00       		mov.L	#_BLDC_PumpReq_Old, r14
 787 0035 59 E3 02                		movu.B	2[r14], r3
 788 0038 6C 83                   		shll	#8, r3
 789 003a 59 E4 03                		movu.B	3[r14], r4
 298:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		if (!pressValid)
 790                             		.loc 1 298 0
 791 003d FF 5E 43                		or	r4, r3, r14
 792 0040 20 14                   		beq	.L123
 793 0042 2E 2F                   		bra	.L247
 794                             	.LVL11:
 795                             	.L122:
 796                             	.LBE18:
 295:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		   pressValid = TESTBIT (GIValid, (GI_FIRST_CRITERION_BIT + GI_PRESS_SENS_CR_FULL_IND) ) != 0;
 797                             		.loc 1 295 0
 798 0044 FB E2 00 00 00 00       		mov.L	#_GIValid, r14
 799                             	.LVL12:
 800 004a DC EE                   		mov.W	[r14], r14
 801                             	.LVL13:
 802                             	.LBB19:
 298:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		if (!pressValid)
 803                             		.loc 1 298 0
 804 004c FD 74 CE 01             		tst	#1, r14
 805 0050 3B 98 00                		bne	.L125
 806                             	.LVL14:
 807 0053 03                      		.balign 2,3,5
 808                             	.L123:
 302:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			LoadsReq_New[Res_Pos[LD_WASH_RES_IND]].b = RES_OFF;	
 809                             		.loc 1 302 0
 810 0054 FB E2 00 00 00 00       		mov.L	#_LoadsReq_New, r14
 811 005a 66 0B                   		mov	#0, r11
 812 005c FE 07 EB                		mov.B	r11, [r7,r14]
 303:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			if(HWC_Flags.bit.vs_wash_presence)
 813                             		.loc 1 303 0
 814 005f 5F AA                   		movu.W	r10, r10
 815 0061 61 0A                   		cmp	#0, r10
 816 0063 3A 2B 01                		beq	.L127
 305:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				pressStatus_Old=0;
 817                             		.loc 1 305 0
 818 0066 FB 72 00 00 00 00       		mov.L	#_pressStatus_Old.12415, r7
 819 006c C3 7B                   		mov.B	r11, [r7]
 820 006e 38 20 01                		bra	.L127
 821                             	.LVL15:
 822                             	.L247:
 314:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			   if ( ( (uP_AltCtrl_Data.SV_invalid_4alt==TRUE)||(!SWTC_IsExpired((SWTC_CountersType)HIO_STABI
 823                             		.loc 1 314 0
 824 0071 FB 72 00 00 00 00       		mov.L	#_uP_AltCtrl_Data, r7
 825 0077 89 77                   		mov.B	4[r7], r7
 826 0079 FD 74 C7 01             		tst	#1, r7
 827 007d 20 11                   		beq	.L128
 828                             	.LVL16:
 829 007f 03                      		.balign 2,3,5
 830                             	.L131:
 831 0080 FB 72 00 00 00 00       		mov.L	#_Virtual_Sensor_Value, r7
 832 0086 58 77                   		movu.B	[r7], r7
 833 0088 61 57                   		cmp	#5, r7
 834 008a 21 11                   		bne	.L129
 835 008c 2E 4D                   		bra	.L130
 836                             	.LVL17:
 837                             	.L128:
 838 008e 75 41 1A                		mov	#26, r1
 839 0091 05 00 00 00             		bsr	_SWTC_IsExpired
 840                             	.LVL18:
 841 0095 61 01                   		cmp	#0, r1
 842 0097 20 E9                   		beq	.L131
 843 0099 2E 40                   		bra	.L130
 844                             	.L129:
 845 009b 61 07                   		cmp	#0, r7
 846 009d 20 3C                   		beq	.L130
 317:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			   		if ( MAKEWORD(BLDC_Pump_InfoBuffer[WASH_BLDC_PUMP][BLDC_VS_STATE_MSB], BLDC_Pump_InfoBuffer
 847                             		.loc 1 317 0
 848 009f FB A2 00 00 00 00       		mov.L	#_BLDC_Pump_InfoBuffer, r10
 849 00a5 59 A7 04                		movu.B	4[r10], r7
 850 00a8 6C 87                   		shll	#8, r7
 851 00aa 59 AA 05                		movu.B	5[r10], r10
 852 00ad 57 7A                   		or	r7, r10
 853 00af DF A7                   		mov.W	r10, r7
 854 00b1 61 07                   		cmp	#0, r7
 855 00b3 20 3F                   		beq	.L132
 324:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						pressStatus= pressStatus_Old;	
 856                             		.loc 1 324 0
 857 00b5 FB 72 00 00 00 00       		mov.L	#_pressStatus_Old.12415, r7
 858 00bb CC 77                   		mov.B	[r7], r7
 859                             	.LVL19:
 325:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						LoadsReq_New[Res_Pos[LD_WASH_RES_IND]].b = LoadsReq_Old[Res_Pos[LD_WASH_RES_IND]].b;  /* new 
 860                             		.loc 1 325 0
 861 00bd FB A2 00 00 00 00       		mov.L	#_Res_Pos, r10
 862 00c3 58 AA                   		movu.B	[r10], r10
 863 00c5 FB 42 00 00 00 00       		mov.L	#_LoadsReq_Old, r4
 864 00cb FB E2 00 00 00 00       		mov.L	#_LoadsReq_New, r14
 865 00d1 FE 4A 44                		mov.B	[r10,r4], r4
 866 00d4 FE 0A E4                		mov.B	r4, [r10,r14]
 867 00d7 2E 1B                   		bra	.L132
 868                             	.LVL20:
 869                             	.L130:
 331:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				   switch(Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH])
 870                             		.loc 1 331 0
 871 00d9 FB 72 00 00 00 00       		mov.L	#_Virtual_Sensor_Value, r7
 872 00df 58 77                   		movu.B	[r7], r7
 337:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					     pressStatus = 0;
 873                             		.loc 1 337 0
 874 00e1 61 27                   		cmp	#2, r7
 875 00e3 FC DB 70                		sceq.L	r7
 876 00e6 2E 0C                   		bra	.L132
 877                             	.LVL21:
 878                             	.L125:
 351:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			   pressStatus = TESTBIT(GICriteria,GI_PRESS_SENS_CR_FULL_IND);
 879                             		.loc 1 351 0
 880 00e8 FB 72 00 00 00 00       		mov.L	#_GICriteria, r7
 881 00ee CC 77                   		mov.B [r7], r7
 882 00f0 64 17                   		and #1, r7
 883                             	.LVL22:
 884                             		.balign 2,3,1
 885                             	.L132:
 354:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			if ( pressStatus != pressStatus_Old )
 886                             		.loc 1 354 0
 887 00f2 5B 7A                   		movu.B	r7, r10
 888 00f4 FB E2 00 00 00 00       		mov.L	#_pressStatus_Old.12415, r14
 889 00fa 44 EA                   		cmp	[r14].UB, r10
 890 00fc 20 22                   		beq	.L134
 891 00fe FB E2 00 00 00 00       		mov.L	#_Tab_SFT_PressRes, r14
 357:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				if (pressStatus == 0)
 892                             		.loc 1 357 0
 893 0104 61 0A                   		cmp	#0, r10
 360:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					(void)Set_SmallCounter((SWTC_CountersType)SFT_RES_PRES_STABLE_S_COUNTER, (SWTC_PrescalerType)C
 894                             		.loc 1 360 0
 895 0106 EC EA                   		mov.L	[r14], r10
 357:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				if (pressStatus == 0)
 896                             		.loc 1 357 0
 897 0108 1C                      		bne	.L135
 898                             	.LBE19:
 360:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					(void)Set_SmallCounter((SWTC_CountersType)SFT_RES_PRES_STABLE_S_COUNTER, (SWTC_PrescalerType)C
 899                             		.loc 1 360 0
 900 0109 CC A3                   		mov.B	[r10], r3
 901 010b 0D                      		bra	.L249
 902                             	.L135:
 365:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					(void)Set_SmallCounter((SWTC_CountersType)SFT_RES_PRES_STABLE_S_COUNTER, (SWTC_PrescalerType)C
 903                             		.loc 1 365 0
 904 010c CD A3 01                		mov.B	1[r10], r3
 905 010f 03                      		.balign 2,3,2
 906                             	.L249:
 907                             	.LBB20:
 908 0110 75 41 19                		mov	#25, r1
 909 0113 66 12                   		mov	#1, r2
 910 0115 75 23 7F                		and #0x7f, r3
 911 0118 05 00 00 00             		bsr	_Set_SmallCounter
 912                             	.LVL23:
 913 011c 2E 32                   		bra	.L250
 914                             	.L134:
 373:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				if( SWTC_IsExpired((SWTC_CountersType)SFT_RES_PRES_STABLE_S_COUNTER)  )
 915                             		.loc 1 373 0
 916 011e 75 41 19                		mov	#25, r1
 917 0121 05 00 00 00             		bsr	_SWTC_IsExpired
 918                             	.LVL24:
 919 0125 61 01                   		cmp	#0, r1
 920 0127 20 20                   		beq	.L138
 376:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					if (pressStatus == 0)
 921                             		.loc 1 376 0
 922 0129 61 0A                   		cmp	#0, r10
 923 012b 21 13                   		bne	.L139
 379:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 						LoadsReq_New[Res_Pos[LD_WASH_RES_IND]].b = RES_OFF;    
 924                             		.loc 1 379 0
 925 012d FB E2 00 00 00 00       		mov.L	#_Res_Pos, r14
 926 0133 58 EE                   		movu.B	[r14], r14
 927 0135 FB 42 00 00 00 00       		mov.L	#_LoadsReq_New, r4
 928 013b FE 0E 4A                		mov.B	r10, [r14,r4]
 929                             		.balign 2,3,2
 930                             	.L139:
 383:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					(void)SWTC_Stop((SWTC_CountersType)SFT_RES_PRES_STABLE_S_COUNTER);
 931                             		.loc 1 383 0
 932 013e 75 41 19                		mov	#25, r1
 933 0141 05 00 00 00             		bsr	_SWTC_Stop
 934                             	.LVL25:
 935 0145 2E 23                   		bra	.L137
 936                             	.L138:
 388:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					(void)SWTC_Run((SWTC_CountersType)SFT_RES_PRES_STABLE_S_COUNTER);
 937                             		.loc 1 388 0
 938 0147 75 41 19                		mov	#25, r1
 939 014a 05 00 00 00             		bsr	_SWTC_Run
 940                             	.LVL26:
 941                             		.balign 2,3,5
 942                             	.L250:
 390:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 					LoadsReq_New[Res_Pos[LD_WASH_RES_IND]].b = LoadsReq_Old[Res_Pos[LD_WASH_RES_IND]].b;  /* new s
 943                             		.loc 1 390 0
 944 014e FB A2 00 00 00 00       		mov.L	#_Res_Pos, r10
 945 0154 58 AA                   		movu.B	[r10], r10
 946 0156 FB 42 00 00 00 00       		mov.L	#_LoadsReq_Old, r4
 947 015c FB E2 00 00 00 00       		mov.L	#_LoadsReq_New, r14
 948 0162 FE 4A 44                		mov.B	[r10,r4], r4
 949 0165 FE 0A E4                		mov.B	r4, [r10,r14]
 950                             		.balign 2,3,5
 951                             	.L137:
 395:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			pressStatus_Old = pressStatus;    /* aggiornamento old status press */ 
 952                             		.loc 1 395 0
 953 0168 FB A2 00 00 00 00       		mov.L	#_pressStatus_Old.12415, r10
 954 016e C3 A7                   		mov.B	r7, [r10]
 955 0170 2E 1E                   		bra	.L127
 956                             	.LVL27:
 957                             	.L121:
 401:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		(void)SWTC_Stop((SWTC_CountersType)SFT_RES_PRES_STABLE_S_COUNTER);
 958                             		.loc 1 401 0
 959 0172 75 41 19                		mov	#25, r1
 960 0175 05 00 00 00             		bsr	_SWTC_Stop
 961                             	.LVL28:
 402:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		if(HWC_Flags.bit.vs_wash_presence)
 962                             		.loc 1 402 0
 963 0179 DC A7                   		mov.W	[r10], r7
 964 017b 75 27 10                		and #16, r7
 965 017e 5F 77                   		movu.W	r7, r7
 966 0180 61 07                   		cmp	#0, r7
 967 0182 20 0C                   		beq	.L127
 404:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			 pressStatus_Old=0;
 968                             		.loc 1 404 0
 969 0184 FB 72 00 00 00 00       		mov.L	#_pressStatus_Old.12415, r7
 970 018a 3C 70 00                		mov.B	#0, [r7]
 971 018d 03                      		.balign 2,3,5
 972                             	.L127:
 973                             	.LBE20:
 974                             	.LBE17:
 107:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		if( ( HWC_Flags.bit.bldc1 != 0 ) && ( Sft_WashPumpSpeedLow != 0 ) )
 975                             		.loc 1 107 0
 976 018e FB 72 00 00 00 00       		mov.L	#_HWC_Flags, r7
 977 0194 DC 77                   		mov.W	[r7], r7
 978 0196 76 27 00 40             		and #0x4000, r7
 979 019a 5F 77                   		movu.W	r7, r7
 980 019c 61 07                   		cmp	#0, r7
 981 019e 20 7C                   		beq	.L120
 107:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		if( ( HWC_Flags.bit.bldc1 != 0 ) && ( Sft_WashPumpSpeedLow != 0 ) )
 982                             		.loc 1 107 0 is_stmt 0 discriminator 1
 983 01a0 FB 72 00 00 00 00       		mov.L	#_Sft_WashPumpSpeedLow, r7
 984 01a6 DC 7E                   		mov.W	[r7], r14
 985 01a8 5F E7                   		movu.W	r14, r7
 986 01aa 61 07                   		cmp	#0, r7
 987 01ac 20 6E                   		beq	.L120
 988                             	.LBB21:
 989                             	.LBB22:
 509:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	currentSpeed = ((int16_t)(BLDC_Pump_InfoBuffer[WASH_BLDC_PUMP][BLDC_VCURR_MSB] << 8) + (int16_t)BL
 990                             		.loc 1 509 0 is_stmt 1
 991 01ae FB 72 00 00 00 00       		mov.L	#_BLDC_Pump_InfoBuffer, r7
 992 01b4 59 7A 02                		movu.B	2[r7], r10
 993 01b7 6C 8A                   		shll	#8, r10
 994 01b9 49 7A 03                		add	3[r7].UB, r10
 995 01bc DF A7                   		mov.W	r10, r7
 996                             	.LVL29:
 511:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if( currentSpeed < 0 )
 997                             		.loc 1 511 0
 998 01be DF A4                   		mov.W	r10, r4
 999 01c0 61 04                   		cmp	#0, r4
 1000 01c2 28 06                   		bge	.L142
 514:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		currentSpeed = -currentSpeed;	
 1001                             		.loc 1 514 0
 1002 01c4 7E 1A                   		neg	r10
 1003 01c6 EF A7                   		mov.L	r10, r7
 1004                             	.LVL30:
 1005                             		.balign 2,3,1
 1006                             	.L142:
 521:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if( currentSpeed < Sft_WashPumpSpeedLow )
 1007                             		.loc 1 521 0
 1008 01c8 DF 7A                   		mov.W	r7, r10
 1009 01ca 5F EE                   		movu.W	r14, r14
 1010 01cc FB 72 00 00 00 00       		mov.L	#_speedUnderThreshold.12438, r7
 1011                             	.LVL31:
 1012 01d2 47 EA                   		cmp	r14, r10
 1013 01d4 28 07                   		bge	.L143
 524:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		speedUnderThreshold = TRUE;	
 1014                             		.loc 1 524 0
 1015 01d6 3C 70 01                		mov.B	#1, [r7]
 1016 01d9 2E 11                   		bra	.L144
 1017                             	.L143:
 526:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	else if( currentSpeed > Sft_WashPumpSpeedHigh )
 1018                             		.loc 1 526 0
 1019 01db FB E2 00 00 00 00       		mov.L	#_Sft_WashPumpSpeedHigh, r14
 1020 01e1 06 C4 EA                		cmp	[r14].UW, r10
 1021 01e4 2B 06                   		ble	.L144
 530:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		speedUnderThreshold = FALSE;	
 1022                             		.loc 1 530 0
 1023 01e6 3C 70 00                		mov.B	#0, [r7]
 1024 01e9 03                      		.balign 2,3,3
 1025                             	.L144:
 537:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if( ( speedUnderThreshold == TRUE )
 1026                             		.loc 1 537 0
 1027 01ea 58 77                   		movu.B	[r7], r7
 1028 01ec 61 17                   		cmp	#1, r7
 1029 01ee 21 2C                   		bne	.L120
 538:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		 && ( TESTBIT(FltBLDCUnblock.flags,PUMP_TRES_OFF)	== 0) && ( FltWarning.bldc_low_voltage == 0) &&
 1030                             		.loc 1 538 0
 1031 01f0 FB 72 00 00 00 00       		mov.L	#_FltBLDCUnblock, r7
 1032                             	.LBE22:
 1033                             	.LBB23:
 1034 01f6 CC 77                   		mov.B [r7], r7
 1035 01f8 64 27                   		and #2, r7
 1036 01fa 21 20                   		bne	.L120
 1037 01fc FB 72 00 00 00 00       		mov.L	#_FltWarning, r7
 1038 0202 88 7F                   		mov.B	1[r7], r7
 1039 0204 75 27 28                		and	#40, r7
 1040 0207 21 13                   		bne	.L120
 554:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		LoadsReq_New[Res_Pos[LD_WASH_RES_IND]].b = RES_OFF;    
 1041                             		.loc 1 554 0
 1042 0209 FB A2 00 00 00 00       		mov.L	#_Res_Pos, r10
 1043                             	.LVL32:
 1044 020f 58 AA                   		movu.B	[r10], r10
 1045 0211 FB E2 00 00 00 00       		mov.L	#_LoadsReq_New, r14
 1046 0217 FE 0A E7                		mov.B	r7, [r10,r14]
 1047                             		.balign 2,3,5
 1048                             	.L120:
 1049                             	.LBE23:
 1050                             	.LBE21:
 115:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if ( RegDev_Pos[LD_SALT_ACTIVATION_REG_IND] != NO_LD_POS)
 1051                             		.loc 1 115 0
 1052 021a FB 72 00 00 00 00       		mov.L	#_RegDev_Pos, r7
 1053 0220 CD 7A 03                		mov.B	3[r7], r10
 1054 0223 5B AE                   		movu.B	r10, r14
 1055 0225 75 5E FF                		cmp	#0xff, r14
 1056 0228 20 26                   		beq	.L145
 1057                             	.LBB24:
 1058                             	.LBB25:
 238:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if ( ( Interpreter_Data[0].completeLabel.s.label == LBL_PROGRAMMING) &&
 1059                             		.loc 1 238 0
 1060 022a FB 42 00 00 00 00       		mov.L	#_Interpreter_Data, r4
 1061 0230 CC 43                   		mov.B	[r4], r3
 1062 0232 FB 72 00 00 00 00       		mov.L	#_LoadsReq_New, r7
 1063 0238 FD 74 C3 0F             		tst	#15, r3
 1064 023c 1A                      		bne	.L146
 1065 023d B0 C4                   		movu.B	2[r4], r4
 1066 023f 61 04                   		cmp	#0, r4
 1067 0241 1D                      		bne	.L146
 242:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		LoadsReq_New[RegDev_Pos[LD_SALT_ACTIVATION_REG_IND]].b = LOAD_OFF;
 1068                             		.loc 1 242 0
 1069 0242 FE 0E 74                		mov.B	r4, [r14,r7]
 1070 0245 09                      		bra	.L145
 1071                             	.L146:
 246:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		LoadsReq_New[RegDev_Pos[LD_SALT_ACTIVATION_REG_IND]].b = LOAD_ON;
 1072                             		.loc 1 246 0
 1073 0246 5B AA                   		movu.B	r10, r10
 1074 0248 66 1B                   		mov	#1, r11
 1075 024a FE 0A 7B                		mov.B	r11, [r10,r7]
 1076 024d 03                      		.balign 2,3,1
 1077                             	.L145:
 1078                             	.LBE25:
 1079                             	.LBE24:
 1080                             	.LBB26:
 1081                             	.LBB27:
 160:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if(SWTC_IsExpired((SWTC_CountersType)SLITER_DIRTYWATER_TIMEOUT_M_COUNTER))
 1082                             		.loc 1 160 0
 1083 024e 66 81                   		mov	#8, r1
 1084 0250 05 00 00 00             		bsr	_SWTC_IsExpired
 1085                             	.LVL33:
 1086 0254 FB 72 00 00 00 00       		mov.L	#_Flags_1, r7
 162:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****        SETBIT(Flags_1,JIF_FLAG1_7LITER_TIMER_EXPIRED_POS);
 1087                             		.loc 1 162 0
 1088 025a CC 7A                   		mov.B	[r7], r10
 160:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if(SWTC_IsExpired((SWTC_CountersType)SLITER_DIRTYWATER_TIMEOUT_M_COUNTER))
 1089                             		.loc 1 160 0
 1090 025c 61 01                   		cmp	#0, r1
 1091 025e 14                      		beq	.L147
 162:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****        SETBIT(Flags_1,JIF_FLAG1_7LITER_TIMER_EXPIRED_POS);
 1092                             		.loc 1 162 0
 1093 025f 78 3A                   		bset #3, r10
 1094 0261 0B                      		bra	.L251
 1095                             	.L147:
 166:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	   CLRBIT(Flags_1,JIF_FLAG1_7LITER_TIMER_EXPIRED_POS);
 1096                             		.loc 1 166 0
 1097 0262 7A 3A                   		bclr #3, r10
 1098                             		.balign 2,3,1
 1099                             	.L251:
 1100 0264 C3 7A                   		mov.B	r10, [r7]
 1101                             	.LBE27:
 1102                             	.LBE26:
 1103                             	.LBB28:
 1104                             	.LBB29:
 576:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****   CLRBIT(Flags_2,FLAG2_SAFETY_DRAIN_PP_ON_POS);
 1105                             		.loc 1 576 0
 1106 0266 FB 72 00 00 00 00       		mov.L	#_Flags_2, r7
 1107 026c CC 73                   		mov.B	[r7], r3
 1108 026e 7A 33                   		bclr #3, r3
 1109 0270 C3 73                   		mov.B	r3, [r7]
 578:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****   if( (Interpreter_Data[0].completeLabel.s.label == LBL_PROGRAMMING) ||
 1110                             		.loc 1 578 0
 1111 0272 FB 72 00 00 00 00       		mov.L	#_Interpreter_Data, r7
 1112 0278 CC 77                   		mov.B	[r7], r7
 1113 027a 64 F7                   		and	#15, r7
 1114 027c 20 0E                   		beq	.L149
 1115 027e 61 37                   		cmp	#3, r7
 1116 0280 12                      		beq	.L149
 579:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****       (Interpreter_Data[0].completeLabel.s.label == LBL_END) ||
 1117                             		.loc 1 579 0
 1118 0281 61 27                   		cmp	#2, r7
 1119 0283 17                      		beq	.L149
 580:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****       (Interpreter_Data[0].completeLabel.s.label == LBL_DELAY)||
 1120                             		.loc 1 580 0
 1121 0284 61 57                   		cmp	#5, r7
 1122 0286 3B B6 01                		bne	.L150
 1123 0289 03                      		.balign 2,3,5
 1124                             	.L149:
 584:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****     if ( (TESTBIT (GIValid, (GI_FIRST_CRITERION_BIT + GI_PRESS_SENS_CR_FULL_IND) ) != 0)||
 1125                             		.loc 1 584 0
 1126 028a FB 72 00 00 00 00       		mov.L	#_GIValid, r7
 1127 0290 DC 74                   		mov.W	[r7], r4
 1128 0292 FD 74 C4 01             		tst	#1, r4
 1129 0296 21 14                   		bne	.L151
 1130 0298 FB 72 00 00 00 00       		mov.L	#_HWC_Flags, r7
 1131 029e DC 77                   		mov.W	[r7], r7
 1132 02a0 75 27 20                		and #32, r7
 1133 02a3 5F 77                   		movu.W	r7, r7
 1134 02a5 61 07                   		cmp	#0, r7
 1135 02a7 3A 95 01                		beq	.L150
 1136                             		.balign 2,3,5
 1137                             	.L151:
 1138                             	.LBE29:
 588:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****       if ( (TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) != 0 )|| (  HWC_Flags.bit.vs_drain_prese
 1139                             		.loc 1 588 0
 1140 02aa FB 72 00 00 00 00       		mov.L	#_GICriteria, r7
 1141 02b0 CC 77                   		mov.B	[r7], r7
 1142                             	.LBB30:
 1143 02b2 FD 74 C7 01             		tst	#1, r7
 1144 02b6 21 22                   		bne	.L153
 1145 02b8 FB 72 00 00 00 00       		mov.L	#_HWC_Flags, r7
 1146 02be DC 77                   		mov.W	[r7], r7
 1147 02c0 75 27 20                		and #32, r7
 1148 02c3 5F 77                   		movu.W	r7, r7
 1149 02c5 61 07                   		cmp	#0, r7
 1150 02c7 3A BA 00                		beq	.L154
 1151 02ca FB 72 00 00 00 00       		mov.L	#_WaterInDW, r7
 1152 02d0 58 77                   		movu.B	[r7], r7
 1153 02d2 61 07                   		cmp	#0, r7
 1154 02d4 3A AD 00                		beq	.L154
 1155 02d7 03                      		.balign 2,3,5
 1156                             	.L153:
 594:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         if (Sft_DrainPP.init_full == 0)
 1157                             		.loc 1 594 0
 1158 02d8 FB 72 00 00 00 00       		mov.L	#_Sft_DrainPP, r7
 1159 02de CC 7E                   		mov.B	[r7], r14
 1160 02e0 EF EA                   		mov.L	r14, r10
 1161 02e2 75 2A 40                		and	#64, r10
 1162 02e5 21 35                   		bne	.L155
 596:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****           Sft_DrainPP.cnt = 0;
 1163                             		.loc 1 596 0
 1164 02e7 75 2E C0                		and #-64, r14
 1165 02ea C3 7E                   		mov.B	r14, [r7]
 1166 02ec C7 7A 01                		mov.B	r10, 1[r7]
 598:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****           if (Tab_SFT_EV.DataLenght == 2)
 1167                             		.loc 1 598 0
 1168 02ef FB A2 00 00 00 00       		mov.L	#_Tab_SFT_EV, r10
 1169 02f5 5D A2 02                		movu.W	4[r10], r2
 1170 02f8 61 22                   		cmp	#2, r2
 1171 02fa 21 14                   		bne	.L156
 601:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****             Sft_DrainPP.cnt = CNT_DRAIN_DELAY;
 1172                             		.loc 1 601 0
 1173 02fc EC AA                   		mov.L	[r10], r10
 1174 02fe 59 AA 02                		movu.B	2[r10], r10
 1175 0301 63 AA                   		mul	#10, r10
 1176 0303 FD 88 A2                		shlr	#8, r10, r2
 1177 0306 57 2E                   		or	r2, r14
 1178 0308 C3 7E                   		mov.B	r14, [r7]
 1179 030a C7 7A 01                		mov.B	r10, 1[r7]
 1180 030d 03                      		.balign 2,3,5
 1181                             	.L156:
 605:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****           Sft_DrainPP.init_full = 1;
 1182                             		.loc 1 605 0
 1183 030e FB 72 00 00 00 00       		mov.L	#_Sft_DrainPP, r7
 1184 0314 DC 7A                   		mov.W	[r7], r10
 1185 0316 78 EA                   		bset	#14, r10
 1186 0318 D3 7A                   		mov.W	r10, [r7]
 1187                             		.balign 2,3,5
 1188                             	.L155:
 608:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         if (Sft_DrainPP.cnt > 0)
 1189                             		.loc 1 608 0
 1190 031a FB E2 00 00 00 00       		mov.L	#_Sft_DrainPP, r14
 1191 0320 58 E7                   		movu.B	[r14], r7
 1192 0322 75 27 3F                		and #63, r7
 1193 0325 6C 87                   		shll	#8, r7
 1194 0327 59 EA 01                		movu.B	1[r14], r10
 1195 032a 57 A7                   		or	r10, r7
 1196 032c 20 1B                   		beq	.L157
 610:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****           Sft_DrainPP.cnt--;
 1197                             		.loc 1 610 0
 1198 032e 72 77 FF 3F             		add	#0x3fff, r7
 1199 0332 76 27 FF 3F             		and #0x3fff, r7
 1200 0336 FD 88 74                		shlr	#8, r7, r4
 1201 0339 CC EA                   		mov.B	[r14], r10
 1202 033b 75 2A C0                		and #-64, r10
 1203 033e 57 4A                   		or	r4, r10
 1204 0340 C3 EA                   		mov.B	r10, [r14]
 1205 0342 C7 E7 01                		mov.B	r7, 1[r14]
 1206 0345 2E 2F                   		bra	.L158
 1207                             	.L157:
 614:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****           DrainSftReq_New.b = LOAD_ON;
 1208                             		.loc 1 614 0
 1209 0347 FB 72 00 00 00 00       		mov.L	#_DrainSftReq_New, r7
 1210 034d 3C 70 01                		mov.B	#1, [r7]
 616:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****           Sft_DrainPP.init_empty = 1;
 1211                             		.loc 1 616 0
 1212 0350 DC E7                   		mov.W	[r14], r7
 1213 0352 78 F7                   		bset	#15, r7
 1214 0354 D3 E7                   		mov.W	r7, [r14]
 617:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		  if ( (TESTBIT(GIValid, GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_DRAIN))&& (Virtual_Sensor_Valu
 1215                             		.loc 1 617 0
 1216 0356 76 24 00 08             		and #0x800, r4
 1217 035a 5F 44                   		movu.W	r4, r4
 1218 035c 61 04                   		cmp	#0, r4
 1219 035e 20 16                   		beq	.L158
 1220 0360 FB 72 00 00 00 00       		mov.L	#_Virtual_Sensor_Value, r7
 1221 0366 B0 7F                   		movu.B	1[r7], r7
 1222 0368 61 07                   		cmp	#0, r7
 1223 036a 1A                      		bne	.L158
 620:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****      		 WaterInDW=0;
 1224                             		.loc 1 620 0
 1225 036b FB A2 00 00 00 00       		mov.L	#_WaterInDW, r10
 1226 0371 C3 A7                   		mov.B	r7, [r10]
 1227 0373 03                      		.balign 2,3,1
 1228                             	.L158:
 623:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         SETBIT(Flags_2,FLAG2_SAFETY_DRAIN_PP_ON_POS);
 1229                             		.loc 1 623 0
 1230 0374 78 33                   		bset #3, r3
 1231 0376 FB 72 00 00 00 00       		mov.L	#_Flags_2, r7
 1232 037c C3 73                   		mov.B	r3, [r7]
 1233 037e 38 CA 00                		bra	.L159
 1234                             	.L154:
 631:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         if (Sft_DrainPP.init_empty == 1)
 1235                             		.loc 1 631 0
 1236 0381 FB 72 00 00 00 00       		mov.L	#_Sft_DrainPP, r7
 1237 0387 CC 7A                   		mov.B	[r7], r10
 1238 0389 EF AE                   		mov.L	r10, r14
 1239 038b 76 2E 80 00             		and #0x80, r14
 1240 038f 20 1B                   		beq	.L160
 633:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****           Sft_DrainPP.cnt = CNT_DRAIN_EMPTY;
 1241                             		.loc 1 633 0
 1242 0391 FB E2 00 00 00 00       		mov.L	#_Tab_SFT_EV, r14
 1243 0397 EC EE                   		mov.L	[r14], r14
 1244 0399 59 EE 01                		movu.B	1[r14], r14
 1245 039c 75 2A C0                		and #-64, r10
 1246 039f C3 7A                   		mov.B	r10, [r7]
 1247 03a1 C7 7E 01                		mov.B	r14, 1[r7]
 635:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****           Sft_DrainPP.init_empty = 0;
 1248                             		.loc 1 635 0
 1249 03a4 DC 7A                   		mov.W	[r7], r10
 1250 03a6 7A FA                   		bclr	#15, r10
 1251 03a8 D3 7A                   		mov.W	r10, [r7]
 1252                             		.balign 2,3,5
 1253                             	.L160:
 638:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         if (Sft_DrainPP.cnt > 0)
 1254                             		.loc 1 638 0
 1255 03aa FB A2 00 00 00 00       		mov.L	#_Sft_DrainPP, r10
 1256 03b0 58 A7                   		movu.B	[r10], r7
 1257 03b2 75 27 3F                		and #63, r7
 1258 03b5 6C 87                   		shll	#8, r7
 1259 03b7 59 AA 01                		movu.B	1[r10], r10
 1260 03ba 57 7A                   		or	r7, r10
 1261 03bc EF A7                   		mov.L	r10, r7
 1262 03be 5F AA                   		movu.W	r10, r10
 1263 03c0 61 0A                   		cmp	#0, r10
 1264 03c2 20 7A                   		beq	.L150
 640:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****   	      	DrainSftReq_New.b = LOAD_ON;
 1265                             		.loc 1 640 0
 1266 03c4 FB A2 00 00 00 00       		mov.L	#_DrainSftReq_New, r10
 1267 03ca F8 A4 01                		mov.B	#1, [r10]
 642:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****   	      	SETBIT(Flags_2,FLAG2_SAFETY_DRAIN_PP_ON_POS);
 1268                             		.loc 1 642 0
 1269 03cd 78 33                   		bset #3, r3
 1270 03cf FB A2 00 00 00 00       		mov.L	#_Flags_2, r10
 1271 03d5 C3 A3                   		mov.B	r3, [r10]
 644:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****   	    	if ( (TESTBIT(GIValid, GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_DRAIN))&& (Virtual_Sensor_
 1272                             		.loc 1 644 0
 1273 03d7 76 24 00 08             		and #0x800, r4
 1274 03db 5F 44                   		movu.W	r4, r4
 1275 03dd 61 04                   		cmp	#0, r4
 1276 03df 20 17                   		beq	.L162
 1277 03e1 FB A2 00 00 00 00       		mov.L	#_Virtual_Sensor_Value, r10
 1278 03e7 59 AA 01                		movu.B	1[r10], r10
 1279 03ea 61 0A                   		cmp	#0, r10
 1280 03ec 12                      		beq	.L162
 647:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****      		   WaterInDW=0xFF;/* valore per far ripartire lo scarico a sensore , perch� ancora non ved
 1281                             		.loc 1 647 0
 1282 03ed FB A2 00 00 00 00       		mov.L	#_WaterInDW, r10
 1283 03f3 F8 A4 FF                		mov.B	#-1, [r10]
 1284                             		.balign 2,3,1
 1285                             	.L162:
 650:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			if ( (Sft_DrainPP.cnt == 1) && (WaterInDW!=0xFF) )
 1286                             		.loc 1 650 0
 1287 03f6 5F 77                   		movu.W	r7, r7
 1288 03f8 61 17                   		cmp	#1, r7
 1289 03fa 21 1A                   		bne	.L163
 1290 03fc FB 72 00 00 00 00       		mov.L	#_WaterInDW, r7
 1291 0402 58 7A                   		movu.B	[r7], r10
 1292 0404 75 5A FF                		cmp	#0xff, r10
 1293 0407 20 0D                   		beq	.L163
 653:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****   				updateRegWaterLoaded(); /*?? vedere se va inserito anche questo!!*/
 1294                             		.loc 1 653 0
 1295 0409 05 00 00 00             		bsr	_updateRegWaterLoaded
 1296                             	.LVL34:
 654:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****   				WaterInDW = 0;
 1297                             		.loc 1 654 0
 1298 040d 3C 70 00                		mov.B	#0, [r7]
 658:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				WaterLoadedReset();
 1299                             		.loc 1 658 0
 1300 0410 05 00 00 00             		bsr	_WaterLoadedReset
 1301                             	.LVL35:
 1302                             		.balign 2,3,5
 1303                             	.L163:
 662:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****   	      	Sft_DrainPP.cnt --;
 1304                             		.loc 1 662 0
 1305 0414 FB 72 00 00 00 00       		mov.L	#_Sft_DrainPP, r7
 1306 041a 58 7A                   		movu.B	[r7], r10
 1307 041c 75 2A 3F                		and #63, r10
 1308 041f 6C 8A                   		shll	#8, r10
 1309 0421 55 7A 01                		or	1[r7].UB, r10
 1310 0424 72 AA FF 3F             		add	#0x3fff, r10
 1311 0428 76 2A FF 3F             		and #0x3fff, r10
 1312 042c FD 88 A4                		shlr	#8, r10, r4
 1313 042f CC 7E                   		mov.B	[r7], r14
 1314 0431 75 2E C0                		and #-64, r14
 1315 0434 57 4E                   		or	r4, r14
 1316 0436 C3 7E                   		mov.B	r14, [r7]
 1317 0438 C7 7A 01                		mov.B	r10, 1[r7]
 1318 043b 03                      		.balign 2,3,5
 1319                             	.L150:
 681:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****     Sft_DrainPP.init_full = 0;
 1320                             		.loc 1 681 0
 1321 043c FB 72 00 00 00 00       		mov.L	#_Sft_DrainPP, r7
 1322 0442 DC 7A                   		mov.W	[r7], r10
 1323 0444 7A EA                   		bclr	#14, r10
 1324 0446 D3 7A                   		mov.W	r10, [r7]
 1325                             		.balign 2,3,3
 1326                             	.L159:
 1327                             	.LBE30:
 1328                             	.LBE28:
 127:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	SFT_LoadEV_Mgmt();
 1329                             		.loc 1 127 0
 1330 0448 05 00 00 00             		bsr	_SFT_LoadEV_Mgmt
 1331                             	.LVL36:
 129:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if (( Fan_Pos[LD_DRY_FAN_IND] != NO_LD_POS) && ( Res_Pos[LD_DRY_RES_IND] != NO_LD_POS) )
 1332                             		.loc 1 129 0
 1333 044c FB 72 00 00 00 00       		mov.L	#_Fan_Pos, r7
 1334 0452 58 77                   		movu.B	[r7], r7
 1335 0454 75 57 FF                		cmp	#0xff, r7
 1336 0457 20 6F                   		beq	.L164
 129:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if (( Fan_Pos[LD_DRY_FAN_IND] != NO_LD_POS) && ( Res_Pos[LD_DRY_RES_IND] != NO_LD_POS) )
 1337                             		.loc 1 129 0 is_stmt 0 discriminator 1
 1338 0459 FB A2 00 00 00 00       		mov.L	#_Res_Pos, r10
 1339 045f 59 AA 01                		movu.B	1[r10], r10
 1340 0462 75 5A FF                		cmp	#0xff, r10
 1341 0465 20 61                   		beq	.L164
 1342                             	.LBB31:
 1343                             	.LBB32:
 710:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if ( LoadsReq_New[Fan_Pos[LD_DRY_FAN_IND]].b == 0)
 1344                             		.loc 1 710 0 is_stmt 1
 1345 0467 FB E2 00 00 00 00       		mov.L	#_LoadsReq_New, r14
 1346 046d FE C7 E4                		movu.B	[r7,r14], r4
 1347 0470 61 04                   		cmp	#0, r4
 1348 0472 19                      		bne	.L165
 712:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		LoadsReq_New[Res_Pos[LD_DRY_RES_IND]].b	= RES_OFF;
 1349                             		.loc 1 712 0
 1350 0473 FE 0A E4                		mov.B	r4, [r10,r14]
 714:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		(void)SWTC_Stop((SWTC_CountersType)SFT_DRY_RES_DELAYACT_S_COUNTER);
 1351                             		.loc 1 714 0
 1352 0476 75 41 21                		mov	#33, r1
 1353 0479 2E 31                   		bra	.L252
 1354                             	.L165:
 718:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if (( LoadsReq_Old[Fan_Pos[LD_DRY_FAN_IND]].b ==  LOAD_OFF ) &&  (LoadsReq_New[Fan_Pos[LD_DRY_FAN_
 1355                             		.loc 1 718 0
 1356 047b FB A2 00 00 00 00       		mov.L	#_LoadsReq_Old, r10
 1357 0481 FE C7 A7                		movu.B	[r7,r10], r7
 1358 0484 61 07                   		cmp	#0, r7
 1359 0486 21 14                   		bne	.L166
 720:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		(void)Set_SmallCounter((SWTC_CountersType)SFT_DRY_RES_DELAYACT_S_COUNTER, (SWTC_PrescalerType)COU
 1360                             		.loc 1 720 0
 1361 0488 75 41 21                		mov	#33, r1
 1362 048b 66 12                   		mov	#1, r2
 1363 048d FB 72 00 00 00 00       		mov.L	#_Dry_SfyTime_Res_On, r7
 1364 0493 CC 73                   		mov.B	[r7], r3
 1365 0495 05 00 00 00             		bsr	_Set_SmallCounter
 1366                             	.LVL37:
 1367 0499 03                      		.balign 2,3,2
 1368                             	.L166:
 723:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if  (SWTC_IsExpired((SWTC_CountersType)SFT_DRY_RES_DELAYACT_S_COUNTER) )
 1369                             		.loc 1 723 0
 1370 049a 75 41 21                		mov	#33, r1
 1371 049d 05 00 00 00             		bsr	_SWTC_IsExpired
 1372                             	.LVL38:
 1373 04a1 EF 17                   		mov.L	r1, r7
 726:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****        (void)SWTC_Stop((SWTC_CountersType)SFT_DRY_RES_DELAYACT_S_COUNTER);
 1374                             		.loc 1 726 0
 1375 04a3 75 41 21                		mov	#33, r1
 723:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if  (SWTC_IsExpired((SWTC_CountersType)SFT_DRY_RES_DELAYACT_S_COUNTER) )
 1376                             		.loc 1 723 0
 1377 04a6 61 07                   		cmp	#0, r7
 1378 04a8 10                      		beq	.L167
 1379 04a9 03                      		.balign 2,3,3
 1380                             	.L252:
 726:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****        (void)SWTC_Stop((SWTC_CountersType)SFT_DRY_RES_DELAYACT_S_COUNTER);
 1381                             		.loc 1 726 0
 1382 04aa 05 00 00 00             		bsr	_SWTC_Stop
 1383                             	.LVL39:
 1384 04ae 2E 18                   		bra	.L164
 1385                             	.L167:
 733:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c ****         (void)SWTC_Run((SWTC_CountersType)SFT_DRY_RES_DELAYACT_S_COUNTER);
 1386                             		.loc 1 733 0
 1387 04b0 05 00 00 00             		bsr	_SWTC_Run
 1388                             	.LVL40:
 735:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		LoadsReq_New[Res_Pos[LD_DRY_RES_IND]].b= RES_OFF;
 1389                             		.loc 1 735 0
 1390 04b4 FB A2 00 00 00 00       		mov.L	#_Res_Pos, r10
 1391 04ba 59 AA 01                		movu.B	1[r10], r10
 1392 04bd FB E2 00 00 00 00       		mov.L	#_LoadsReq_New, r14
 1393 04c3 FE 0A E7                		mov.B	r7, [r10,r14]
 1394                             		.balign 2,3,5
 1395                             	.L164:
 1396                             	.LBE32:
 1397                             	.LBE31:
 136:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if ( HWC_Flags.bit.vs_drain_presence  )
 1398                             		.loc 1 136 0
 1399 04c6 FB 72 00 00 00 00       		mov.L	#_HWC_Flags, r7
 1400 04cc DC 7A                   		mov.W	[r7], r10
 1401 04ce 75 2A 20                		and #32, r10
 1402 04d1 5F AA                   		movu.W	r10, r10
 1403 04d3 61 0A                   		cmp	#0, r10
 1404 04d5 15                      		beq	.L168
 138:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		SFT_drainPump_EVOFH_Mgmt();
 1405                             		.loc 1 138 0
 1406 04d6 05 00 00 00             		bsr	_SFT_drainPump_EVOFH_Mgmt
 1407                             	.LVL41:
 1408                             		.balign 2,3,5
 1409                             	.L168:
 140:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if ( HWC_Flags.bit.vs_wash_presence )
 1410                             		.loc 1 140 0
 1411 04da DC 77                   		mov.W	[r7], r7
 1412 04dc 75 27 10                		and #16, r7
 1413 04df 5F 77                   		movu.W	r7, r7
 1414 04e1 61 07                   		cmp	#0, r7
 1415 04e3 15                      		beq	.L169
 142:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		SFT_Sensor_EV_Unblock();
 1416                             		.loc 1 142 0
 1417 04e4 05 00 00 00             		bsr	_SFT_Sensor_EV_Unblock
 1418                             	.LVL42:
 1419                             		.balign 2,3,3
 1420                             	.L169:
 1421                             	.LBB33:
 1422                             	.LBB34:
 423:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	goodZC = goodZCSignal();
 1423                             		.loc 1 423 0
 1424 04e8 05 00 00 00             		bsr	_goodZCSignal
 1425                             	.LVL43:
 1426 04ec FB 72 00 00 00 00       		mov.L	#_filterCounter.12428, r7
 425:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if( goodZC != oldGoodZC )
 1427                             		.loc 1 425 0
 1428 04f2 FB A2 00 00 00 00       		mov.L	#_oldGoodZC.12427, r10
 1429 04f8 06 84 A1                		cmp	[r10].L, r1
 1430 04fb 16                      		beq	.L170
 427:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		filterCounter = 0;
 1431                             		.loc 1 427 0
 1432 04fc 3C 70 00                		mov.B	#0, [r7]
 1433 04ff 2E 27                   		bra	.L171
 1434                             	.L170:
 431:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		if( filterCounter < SFT_ZC_GOOD_FILTER_TIME )
 1435                             		.loc 1 431 0
 1436 0501 CC 7A                   		mov.B	[r7], r10
 1437 0503 5B AE                   		movu.B	r10, r14
 1438 0505 75 5E 31                		cmp	#49, r14
 1439 0508 24 08                   		bgtu	.L172
 433:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			filterCounter ++;
 1440                             		.loc 1 433 0
 1441 050a 62 1A                   		add	#1, r10
 1442 050c C3 7A                   		mov.B	r10, [r7]
 1443 050e 2E 18                   		bra	.L171
 1444                             	.L172:
 1445 0510 FB 72 00 00 00 00       		mov.L	#_Interpreter_Data, r7
 440:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				Interpreter_Data[0].ZC_not_good = FALSE;
 1446                             		.loc 1 440 0
 1447 0516 CD 7A 04                		mov.B	4[r7], r10
 438:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			if (goodZC )
 1448                             		.loc 1 438 0
 1449 0519 61 01                   		cmp	#0, r1
 1450 051b 14                      		beq	.L173
 440:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				Interpreter_Data[0].ZC_not_good = FALSE;
 1451                             		.loc 1 440 0
 1452 051c 7A 4A                   		bclr	#4, r10
 1453 051e 0C                      		bra	.L253
 1454                             	.L173:
 443:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				Interpreter_Data[0].ZC_not_good = TRUE;
 1455                             		.loc 1 443 0
 1456 051f 78 4A                   		bset	#4, r10
 1457 0521 03                      		.balign 2,3,5
 1458                             	.L253:
 1459 0522 C7 7A 04                		mov.B	r10, 4[r7]
 1460 0525 03                      		.balign 2,3,5
 1461                             	.L171:
 448:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	oldGoodZC = goodZC;
 1462                             		.loc 1 448 0
 1463 0526 FB 72 00 00 00 00       		mov.L	#_oldGoodZC.12427, r7
 1464 052c E3 71                   		mov.L	r1, [r7]
 451:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	if( Interpreter_Data[0].ZC_not_good  )
 1465                             		.loc 1 451 0
 1466 052e FB 72 00 00 00 00       		mov.L	#_Interpreter_Data, r7
 1467 0534 89 77                   		mov.B 4[r7], r7
 1468 0536 75 27 10                		and #16, r7
 1469 0539 20 1E                   		beq	.L174
 457:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		OCUART_DisableSync();
 1470                             		.loc 1 457 0
 1471 053b 05 00 00 00             		bsr	_OCUART_DisableSync
 1472                             	.LVL44:
 1473                             	.LBB35:
 467:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 				memset(&BLDC_Pump_InfoBuffer[cnt][0], 0, IOM_EXTERNAL_0_INFOBUFFER_SIZE);
 1474                             		.loc 1 467 0
 1475 053f FB 12 00 00 00 00       		mov.L	#_BLDC_Pump_InfoBuffer, r1
 1476 0545 66 C3                   		mov.L	#12, r3
 1477 0547 66 02                   		mov	#0, r2
 1478 0549 7F 88                   		sstr.b
 1479                             	.LVL45:
 1480 054b FB 12 00 00 00 00       		mov.L	#_BLDC_Pump_InfoBuffer+12, r1
 1481 0551 66 C3                   		mov.L	#12, r3
 1482 0553 7F 88                   		sstr.b
 1483                             	.LVL46:
 1484 0555 2E 11                   		bra	.L175
 1485                             	.LVL47:
 1486                             	.L174:
 1487                             	.LBE35:
 475:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 		if( old_Sft_FilteredGoodZC )
 1488                             		.loc 1 475 0
 1489 0557 FB 72 00 00 00 00       		mov.L	#_old_Sft_FilteredGoodZC.12429, r7
 1490 055d 58 77                   		movu.B	[r7], r7
 1491 055f 61 07                   		cmp	#0, r7
 1492 0561 15                      		beq	.L175
 484:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 			OCUART_EnableSync();
 1493                             		.loc 1 484 0
 1494 0562 05 00 00 00             		bsr	_OCUART_EnableSync
 1495                             	.LVL48:
 1496                             		.balign 2,3,5
 1497                             	.L175:
 489:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** 	old_Sft_FilteredGoodZC = Interpreter_Data[0].ZC_not_good;
 1498                             		.loc 1 489 0
 1499 0566 FB 72 00 00 00 00       		mov.L	#_Interpreter_Data, r7
 1500 056c B1 77                   		movu.B	4[r7], r7
 1501 056e 68 47                   		shlr	#4, r7
 1502 0570 64 17                   		and #1, r7
 1503 0572 FB A2 00 00 00 00       		mov.L	#_old_Sft_FilteredGoodZC.12429, r10
 1504 0578 C3 A7                   		mov.B	r7, [r10]
 1505                             	.LBE34:
 1506                             	.LBE33:
 152:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Safety.c **** }
 1507                             		.loc 1 152 0
 1508 057a 3F 7B 05                		rtsd	#20, r7-r11
 1509                             	.LFE0:
 1511 057d 03                      		.section	.bss.pressStatus_Old.12415,"aw",@nobits
 1514                             	_pressStatus_Old.12415:
 1515 0000 00                      		.zero	1
 1516                             		.section	.data.speedUnderThreshold.12438,"aw",@progbits
 1519                             	_speedUnderThreshold.12438:
 1520 0000 01                      		.byte	1
 1521                             		.section	.data.oldGoodZC.12427,"aw",@progbits
 1522                             		.balign 4
 1525                             	_oldGoodZC.12427:
 1526 0000 00 00 00 01             		.long	1
 1527                             		.section	.bss.filterCounter.12428,"aw",@nobits
 1530                             	_filterCounter.12428:
 1531 0000 00                      		.zero	1
 1532                             		.section	.data.old_Sft_FilteredGoodZC.12429,"aw",@progbits
 1535                             	_old_Sft_FilteredGoodZC.12429:
 1536 0000 01                      		.byte	1
 1633                             	.Letext0:
 1634                             		.file 2 "C:\\Workspace\\FW_Inertia\\branch_indesit\\HAL\\HAL_General/StandardTypes.h"
 1635                             		.file 3 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_SwTimersCounters/SwTimersCo
 1636                             		.file 4 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\General/CstmDefines.h"
 1637                             		.file 5 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Application_Platform/APP_Types.h"
 1638                             		.file 6 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_BusCOMM/BCP_General.h"
 1639                             		.file 7 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\General/CstmTypes.h"
 1640                             		.file 8 "C:\\Workspace\\FW_Inertia\\branch_indesit\\PlatformLibrary\\LIB_IOManager/OutputManagerEx
 1641                             		.file 9 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\General/CstmGlobal.h"
 1642                             		.file 10 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Application_Platform/APP_Fault.h"
 1643                             		.file 11 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\Control/DW_Safety.h"
 1644                             		.file 12 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_BusCOMM/BCP_BusCommMng.h"
 1645                             		.file 13 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Application_Platform/APP_Global.h"
 1646                             		.file 14 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Application_Platform/APP_FuncLib.h"
 1647                             		.file 15 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\General/CstmFuncLib.h"
 1648                             		.file 16 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Drivers\\OCUART/OCUART_drv.h"
 1649                             		.file 17 "C:\\Workspace\\FW_Inertia\\branch_indesit\\PlatformLibrary\\LIB_ZeroCrossing/LIB_ZeroCro
DEFINED SYMBOLS
                            *ABS*:00000000 DW_Safety.c
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:7      .text.SFT_uPdoorStatus_Mgmt:00000000 _SFT_uPdoorStatus_Mgmt
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:12     .text.SFT_uPdoorStatus_Mgmt:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:62     .text.SFT_drainPump_EVOFH_Mgmt:00000000 _SFT_drainPump_EVOFH_Mgmt
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:66     .text.SFT_drainPump_EVOFH_Mgmt:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:301    .text.SFT_Sensor_EV_Unblock:00000000 _SFT_Sensor_EV_Unblock
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:304    .text.SFT_Sensor_EV_Unblock:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:501    .text.SFT_LoadEV_Mgmt:00000000 _SFT_LoadEV_Mgmt
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:504    .text.SFT_LoadEV_Mgmt:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:760    .text.SFT_safetyManagement:00000000 _SFT_safetyManagement
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:763    .text.SFT_safetyManagement:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1514   .bss.pressStatus_Old.12415:00000000 _pressStatus_Old.12415
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1519   .data.speedUnderThreshold.12438:00000000 _speedUnderThreshold.12438
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1530   .bss.filterCounter.12428:00000000 _filterCounter.12428
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1525   .data.oldGoodZC.12427:00000000 _oldGoodZC.12427
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1535   .data.old_Sft_FilteredGoodZC.12429:00000000 _old_Sft_FilteredGoodZC.12429
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1538   .debug_frame:00000000 .Lframe0
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:8      .text.SFT_uPdoorStatus_Mgmt:00000000 .LFB2
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:63     .text.SFT_drainPump_EVOFH_Mgmt:00000000 .LFB9
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:302    .text.SFT_Sensor_EV_Unblock:00000000 .LFB10
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:502    .text.SFT_LoadEV_Mgmt:00000000 .LFB11
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:761    .text.SFT_safetyManagement:00000000 .LFB0
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:4335   .debug_abbrev:00000000 .Ldebug_abbrev0
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5460   .debug_str:00000443 .LASF312
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5794   .debug_str:00000f6a .LASF313
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5304   .debug_ranges:00000000 .Ldebug_ranges0
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5332   .debug_line:00000000 .Ldebug_line0
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5372   .debug_str:00000169 .LASF0
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5476   .debug_str:00000509 .LASF2
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5758   .debug_str:00000e51 .LASF1
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5854   .debug_str:000011dd .LASF3
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5914   .debug_str:000013c3 .LASF4
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5454   .debug_str:0000041d .LASF5
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5828   .debug_str:000010d9 .LASF6
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5764   .debug_str:00000e78 .LASF7
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5482   .debug_str:00000531 .LASF8
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5652   .debug_str:00000a9c .LASF9
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5630   .debug_str:000009f5 .LASF10
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5856   .debug_str:000011e6 .LASF11
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5456   .debug_str:00000426 .LASF12
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5910   .debug_str:000013ae .LASF13
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5928   .debug_str:00001443 .LASF14
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5568   .debug_str:0000080d .LASF19
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5954   .debug_str:00001514 .LASF15
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5660   .debug_str:00000af3 .LASF16
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5776   .debug_str:00000ed2 .LASF17
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5826   .debug_str:000010d0 .LASF18
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5734   .debug_str:00000d7d .LASF20
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5574   .debug_str:00000838 .LASF21
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5718   .debug_str:00000ced .LASF22
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5736   .debug_str:00000d8f .LASF23
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5602   .debug_str:00000949 .LASF24
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5940   .debug_str:0000149c .LASF25
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5786   .debug_str:00000f1f .LASF26
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5942   .debug_str:000014af .LASF27
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5500   .debug_str:000005b7 .LASF28
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5534   .debug_str:000006ed .LASF30
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5894   .debug_str:0000131c .LASF29
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5800   .debug_str:00000fcc .LASF31
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5732   .debug_str:00000d5f .LASF32
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5644   .debug_str:00000a58 .LASF41
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5798   .debug_str:00000fb7 .LASF33
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5664   .debug_str:00000b0b .LASF34
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5426   .debug_str:00000359 .LASF35
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5382   .debug_str:000001b4 .LASF36
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5640   .debug_str:00000a35 .LASF37
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5656   .debug_str:00000ac9 .LASF38
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5950   .debug_str:000014e9 .LASF39
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5898   .debug_str:0000134b .LASF40
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5340   .debug_str:0000004d .LASF42
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5384   .debug_str:000001c9 .LASF43
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5450   .debug_str:00000406 .LASF44
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5428   .debug_str:0000036f .LASF45
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5860   .debug_str:000011ff .LASF46
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5442   .debug_str:000003d4 .LASF47
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5804   .debug_str:00000ffa .LASF48
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5770   .debug_str:00000ea4 .LASF49
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5546   .debug_str:0000074c .LASF50
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5448   .debug_str:000003f7 .LASF51
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5676   .debug_str:00000b92 .LASF52
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5964   .debug_str:00001551 .LASF53
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5380   .debug_str:0000019f .LASF54
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5666   .debug_str:00000b21 .LASF55
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5504   .debug_str:000005d6 .LASF56
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5750   .debug_str:00000dff .LASF57
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5400   .debug_str:0000027d .LASF58
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5882   .debug_str:000012c2 .LASF59
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5544   .debug_str:00000739 .LASF60
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5486   .debug_str:00000562 .LASF61
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5334   .debug_str:00000000 .LASF62
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5756   .debug_str:00000e3b .LASF63
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5472   .debug_str:000004ec .LASF64
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5684   .debug_str:00000be0 .LASF65
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5710   .debug_str:00000cac .LASF66
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5830   .debug_str:000010eb .LASF67
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5496   .debug_str:0000059b .LASF68
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5552   .debug_str:00000785 .LASF69
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5506   .debug_str:000005e7 .LASF70
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5610   .debug_str:0000097c .LASF71
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5510   .debug_str:00000618 .LASF72
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5420   .debug_str:00000322 .LASF73
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5816   .debug_str:0000106d .LASF74
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5474   .debug_str:000004fd .LASF75
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5526   .debug_str:0000069c .LASF76
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5542   .debug_str:00000726 .LASF77
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5836   .debug_str:00001121 .LASF78
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5846   .debug_str:00001172 .LASF79
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5388   .debug_str:000001f5 .LASF80
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5528   .debug_str:000006b7 .LASF81
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5774   .debug_str:00000ebe .LASF82
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5808   .debug_str:00001031 .LASF83
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5892   .debug_str:0000130d .LASF84
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5948   .debug_str:000014d8 .LASF85
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5478   .debug_str:00000511 .LASF86
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5576   .debug_str:0000083d .LASF87
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5672   .debug_str:00000b66 .LASF88
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5900   .debug_str:00001361 .LASF89
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5704   .debug_str:00000c92 .LASF90
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5354   .debug_str:000000d3 .LASF91
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5366   .debug_str:00000131 .LASF92
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5876   .debug_str:0000129a .LASF93
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5806   .debug_str:00001014 .LASF94
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5890   .debug_str:00001304 .LASF95
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5880   .debug_str:000012bc .LASF96
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5802   .debug_str:00000fe6 .LASF97
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5622   .debug_str:000009c5 .LASF98
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5772   .debug_str:00000eb8 .LASF99
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5348   .debug_str:000000a5 .LASF100
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5424   .debug_str:00000349 .LASF101
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5538   .debug_str:0000070d .LASF102
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5678   .debug_str:00000ba1 .LASF103
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5440   .debug_str:000003c8 .LASF104
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5680   .debug_str:00000bb7 .LASF105
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5792   .debug_str:00000f52 .LASF106
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5636   .debug_str:00000a1a .LASF107
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5358   .debug_str:000000f7 .LASF108
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5938   .debug_str:00001493 .LASF109
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5480   .debug_str:0000051e .LASF110
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5336   .debug_str:00000018 .LASF111
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5556   .debug_str:000007b1 .LASF112
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5702   .debug_str:00000c86 .LASF113
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5520   .debug_str:0000066f .LASF114
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5962   .debug_str:00001545 .LASF115
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5944   .debug_str:000014c2 .LASF116
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5912   .debug_str:000013ba .LASF117
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5820   .debug_str:00001091 .LASF118
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5628   .debug_str:000009e4 .LASF119
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5396   .debug_str:00000259 .LASF120
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5368   .debug_str:0000014f .LASF121
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5608   .debug_str:00000968 .LASF122
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5662   .debug_str:00000afe .LASF123
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5766   .debug_str:00000e81 .LASF124
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5916   .debug_str:000013d6 .LASF125
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5342   .debug_str:00000060 .LASF126
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5698   .debug_str:00000c74 .LASF127
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5936   .debug_str:0000148a .LASF128
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5722   .debug_str:00000cfa .LASF129
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5524   .debug_str:0000068d .LASF130
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5566   .debug_str:00000808 .LASF131
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5762   .debug_str:00000e6b .LASF132
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5780   .debug_str:00000ef0 .LASF133
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5492   .debug_str:00000589 .LASF134
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5862   .debug_str:00001216 .LASF135
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5418   .debug_str:00000317 .LASF136
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5642   .debug_str:00000a4a .LASF137
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5896   .debug_str:00001336 .LASF138
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5586   .debug_str:000008b2 .LASF139
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5548   .debug_str:00000766 .LASF140
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5468   .debug_str:000004b6 .LASF141
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5668   .debug_str:00000b3c .LASF142
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5436   .debug_str:000003ae .LASF143
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5414   .debug_str:00000306 .LASF144
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5778   .debug_str:00000ee0 .LASF145
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5632   .debug_str:000009fd .LASF146
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5868   .debug_str:00001250 .LASF147
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5488   .debug_str:00000579 .LASF148
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5532   .debug_str:000006e7 .LASF149
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5708   .debug_str:00000ca7 .LASF150
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5866   .debug_str:00001246 .LASF151
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5706   .debug_str:00000c9b .LASF152
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5754   .debug_str:00000e2d .LASF153
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5874   .debug_str:0000128f .LASF154
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5844   .debug_str:00001160 .LASF155
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5564   .debug_str:000007f7 .LASF156
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5620   .debug_str:000009bb .LASF157
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5958   .debug_str:00001526 .LASF158
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5812   .debug_str:0000105b .LASF159
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5624   .debug_str:000009d3 .LASF160
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5562   .debug_str:000007ea .LASF314
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5362   .debug_str:0000011a .LASF161
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5690   .debug_str:00000c1f .LASF162
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5658   .debug_str:00000adf .LASF163
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5858   .debug_str:000011f4 .LASF164
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5430   .debug_str:00000380 .LASF165
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5818   .debug_str:0000107e .LASF166
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5614   .debug_str:00000998 .LASF167
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5692   .debug_str:00000c30 .LASF168
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5438   .debug_str:000003bc .LASF169
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5498   .debug_str:000005aa .LASF170
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5516   .debug_str:0000064c .LASF171
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5638   .debug_str:00000a2a .LASF172
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5834   .debug_str:00001110 .LASF173
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5648   .debug_str:00000a7d .LASF174
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5606   .debug_str:00000958 .LASF175
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5570   .debug_str:00000814 .LASF176
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5930   .debug_str:0000144a .LASF177
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5714   .debug_str:00000cc9 .LASF178
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5716   .debug_str:00000ce0 .LASF179
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5494   .debug_str:00000592 .LASF180
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5634   .debug_str:00000a04 .LASF181
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5394   .debug_str:00000245 .LASF182
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5646   .debug_str:00000a6a .LASF183
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5744   .debug_str:00000de2 .LASF184
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5626   .debug_str:000009dc .LASF185
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5748   .debug_str:00000df8 .LASF186
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5796   .debug_str:00000fad .LASF187
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5720   .debug_str:00000cf5 .LASF188
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5920   .debug_str:000013f9 .LASF189
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5932   .debug_str:0000145c .LASF190
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5728   .debug_str:00000d32 .LASF191
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5598   .debug_str:00000915 .LASF192
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5600   .debug_str:0000092f .LASF193
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5782   .debug_str:00000efc .LASF194
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5864   .debug_str:00001222 .LASF195
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5558   .debug_str:000007bc .LASF196
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5838   .debug_str:00001139 .LASF197
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5470   .debug_str:000004ca .LASF198
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5352   .debug_str:000000b7 .LASF199
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5934   .debug_str:0000146a .LASF200
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5554   .debug_str:00000796 .LASF201
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5514   .debug_str:00000634 .LASF202
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5518   .debug_str:00000654 .LASF203
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5560   .debug_str:000007d0 .LASF204
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5464   .debug_str:0000047d .LASF205
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5484   .debug_str:00000548 .LASF206
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5582   .debug_str:0000087a .LASF207
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5596   .debug_str:000008fb .LASF208
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5740   .debug_str:00000db9 .LASF209
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5850   .debug_str:0000119f .LASF210
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5572   .debug_str:00000819 .LASF211
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5338   .debug_str:0000002f .LASF212
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5688   .debug_str:00000c07 .LASF213
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5536   .debug_str:000006f5 .LASF214
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5404   .debug_str:000002a8 .LASF215
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5422   .debug_str:00000331 .LASF216
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5924   .debug_str:0000141c .LASF217
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5738   .debug_str:00000da1 .LASF218
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5730   .debug_str:00000d48 .LASF219
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5654   .debug_str:00000aaa .LASF220
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5466   .debug_str:0000049a .LASF221
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5726   .debug_str:00000d1c .LASF222
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5408   .debug_str:000002c8 .LASF223
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5550   .debug_str:00000770 .LASF224
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5344   .debug_str:00000067 .LASF225
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5508   .debug_str:000005f4 .LASF226
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5392   .debug_str:00000223 .LASF227
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5694   .debug_str:00000c46 .LASF228
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5852   .debug_str:000011bf .LASF229
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5386   .debug_str:000001d8 .LASF230
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5522   .debug_str:00000674 .LASF231
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5346   .debug_str:0000007e .LASF232
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5432   .debug_str:0000038a .LASF233
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5650   .debug_str:00000a8c .LASF234
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5390   .debug_str:00000210 .LASF235
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5904   .debug_str:00001388 .LASF236
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5578   .debug_str:0000085a .LASF237
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5810   .debug_str:00001042 .LASF238
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5592   .debug_str:000008d7 .LASF239
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5406   .debug_str:000002b8 .LASF240
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5402   .debug_str:00000292 .LASF241
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5724   .debug_str:00000d0c .LASF242
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5952   .debug_str:000014fe .LASF243
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5884   .debug_str:000012d5 .LASF244
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5594   .debug_str:000008ea .LASF245
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5434   .debug_str:00000398 .LASF246
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:57     .text.SFT_uPdoorStatus_Mgmt:0000005b .LFE2
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:32     .text.SFT_uPdoorStatus_Mgmt:00000037 .LVL0
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:38     .text.SFT_uPdoorStatus_Mgmt:0000003f .LVL1
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:44     .text.SFT_uPdoorStatus_Mgmt:00000049 .LVL2
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:52     .text.SFT_uPdoorStatus_Mgmt:00000058 .LVL3
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5752   .debug_str:00000e14 .LASF247
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:296    .text.SFT_drainPump_EVOFH_Mgmt:0000019e .LFE9
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:113    .text.SFT_drainPump_EVOFH_Mgmt:0000005f .LVL4
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:223    .text.SFT_drainPump_EVOFH_Mgmt:0000012d .LVL5
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:245    .text.SFT_drainPump_EVOFH_Mgmt:00000153 .LVL6
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:249    .text.SFT_drainPump_EVOFH_Mgmt:0000015a .LVL7
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:277    .text.SFT_drainPump_EVOFH_Mgmt:00000188 .LVL8
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:293    .text.SFT_drainPump_EVOFH_Mgmt:0000019d .LVL9
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5872   .debug_str:00001279 .LASF248
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:496    .text.SFT_Sensor_EV_Unblock:00000177 .LFE10
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5180   .debug_loc:00000000 .LLST0
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5908   .debug_str:0000139e .LASF249
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:755    .text.SFT_LoadEV_Mgmt:000001d7 .LFE11
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5193   .debug_loc:00000020 .LLST1
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5788   .debug_str:00000f31 .LASF253
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5768   .debug_str:00000e94 .LASF250
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5886   .debug_str:000012e7 .LASF251
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5790   .debug_str:00000f47 .LASF252
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5824   .debug_str:000010af .LASF254
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5370   .debug_str:0000015c .LASF255
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5462   .debug_str:00000469 .LASF256
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5530   .debug_str:000006d3 .LASF257
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5760   .debug_str:00000e5b .LASF258
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5584   .debug_str:0000089f .LASF259
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5580   .debug_str:00000865 .LASF260
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5784   .debug_str:00000f0f .LASF261
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5878   .debug_str:000012b5 .LASF262
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5842   .debug_str:00001156 .LASF263
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5444   .debug_str:000003e1 .LASF264
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5682   .debug_str:00000bc9 .LASF265
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5870   .debug_str:00001264 .LASF266
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1509   .text.SFT_safetyManagement:0000057d .LFE0
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5206   .debug_loc:00000040 .LLST2
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:770    .text.SFT_safetyManagement:00000010 .LBB17
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:974    .text.SFT_safetyManagement:0000018e .LBE17
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5219   .debug_loc:00000060 .LLST3
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5230   .debug_loc:0000007e .LLST4
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:840    .text.SFT_safetyManagement:00000095 .LVL18
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:912    .text.SFT_safetyManagement:0000011c .LVL23
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:918    .text.SFT_safetyManagement:00000125 .LVL24
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:934    .text.SFT_safetyManagement:00000145 .LVL25
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:940    .text.SFT_safetyManagement:0000014e .LVL26
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:961    .text.SFT_safetyManagement:00000179 .LVL28
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:988    .text.SFT_safetyManagement:000001ae .LBB21
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1050   .text.SFT_safetyManagement:0000021a .LBE21
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5243   .debug_loc:00000097 .LLST5
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1057   .text.SFT_safetyManagement:0000022a .LBB24
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1079   .text.SFT_safetyManagement:0000024e .LBE24
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1080   .text.SFT_safetyManagement:0000024e .LBB26
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1102   .text.SFT_safetyManagement:00000266 .LBE26
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1085   .text.SFT_safetyManagement:00000254 .LVL33
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1103   .text.SFT_safetyManagement:00000266 .LBB28
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1328   .text.SFT_safetyManagement:00000448 .LBE28
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1296   .text.SFT_safetyManagement:0000040d .LVL34
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1301   .text.SFT_safetyManagement:00000414 .LVL35
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1342   .text.SFT_safetyManagement:00000467 .LBB31
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1397   .text.SFT_safetyManagement:000004c6 .LBE31
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1366   .text.SFT_safetyManagement:00000499 .LVL37
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1372   .text.SFT_safetyManagement:000004a1 .LVL38
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1383   .text.SFT_safetyManagement:000004ae .LVL39
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1388   .text.SFT_safetyManagement:000004b4 .LVL40
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1421   .text.SFT_safetyManagement:000004e8 .LBB33
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1506   .text.SFT_safetyManagement:0000057a .LBE33
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1422   .text.SFT_safetyManagement:000004e8 .LBB34
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1505   .text.SFT_safetyManagement:0000057a .LBE34
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5254   .debug_loc:000000b5 .LLST6
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1473   .text.SFT_safetyManagement:0000053f .LBB35
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1487   .text.SFT_safetyManagement:00000557 .LBE35
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5265   .debug_loc:000000d3 .LLST7
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1425   .text.SFT_safetyManagement:000004ec .LVL43
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1472   .text.SFT_safetyManagement:0000053f .LVL44
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1495   .text.SFT_safetyManagement:00000566 .LVL48
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1331   .text.SFT_safetyManagement:0000044c .LVL36
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1407   .text.SFT_safetyManagement:000004da .LVL41
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1418   .text.SFT_safetyManagement:000004e8 .LVL42
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5906   .debug_str:00001396 .LASF267
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5378   .debug_str:0000018e .LASF268
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5918   .debug_str:000013e6 .LASF269
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5746   .debug_str:00000de9 .LASF270
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5960   .debug_str:00001534 .LASF271
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5888   .debug_str:000012f3 .LASF272
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5686   .debug_str:00000bf2 .LASF273
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5696   .debug_str:00000c69 .LASF274
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5822   .debug_str:000010a7 .LASF275
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5360   .debug_str:0000010c .LASF276
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5412   .debug_str:000002f1 .LASF277
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5700   .debug_str:00000c7d .LASF278
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5446   .debug_str:000003ef .LASF279
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5452   .debug_str:00000416 .LASF280
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5902   .debug_str:0000137d .LASF281
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5840   .debug_str:0000114e .LASF282
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5376   .debug_str:00000181 .LASF283
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5674   .debug_str:00000b85 .LASF284
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5742   .debug_str:00000dd2 .LASF285
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5922   .debug_str:00001409 .LASF286
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5350   .debug_str:000000ab .LASF287
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5490   .debug_str:0000057e .LASF288
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5956   .debug_str:00001519 .LASF289
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5926   .debug_str:00001432 .LASF290
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5502   .debug_str:000005ca .LASF291
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5512   .debug_str:00000626 .LASF292
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5612   .debug_str:0000098b .LASF293
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5604   .debug_str:0000094e .LASF294
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5832   .debug_str:000010fb .LASF295
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5458   .debug_str:0000042d .LASF296
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5416   .debug_str:0000030b .LASF297
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5374   .debug_str:00000176 .LASF298
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5588   .debug_str:000008be .LASF299
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5946   .debug_str:000014c8 .LASF300
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5590   .debug_str:000008cd .LASF301
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5966   .debug_str:0000155d .LASF302
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5616   .debug_str:000009ab .LASF303
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5618   .debug_str:000009b3 .LASF304
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5398   .debug_str:0000026c .LASF305
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5712   .debug_str:00000cba .LASF315
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5356   .debug_str:000000ed .LASF306
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5814   .debug_str:00001064 .LASF307
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5670   .debug_str:00000b51 .LASF308
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5364   .debug_str:00000120 .LASF309
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5540   .debug_str:00000719 .LASF316
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5410   .debug_str:000002de .LASF310
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:5848   .debug_str:0000118d .LASF311
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:305    .text.SFT_Sensor_EV_Unblock:00000002 .LCFI0
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:505    .text.SFT_LoadEV_Mgmt:00000002 .LCFI1
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:764    .text.SFT_safetyManagement:00000002 .LCFI2
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:859    .text.SFT_safetyManagement:000000bd .LVL19
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:868    .text.SFT_safetyManagement:000000d9 .LVL20
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:883    .text.SFT_safetyManagement:000000f2 .LVL22
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:956    .text.SFT_safetyManagement:00000172 .LVL27
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:799    .text.SFT_safetyManagement:0000004a .LVL12
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:801    .text.SFT_safetyManagement:0000004c .LVL13
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:996    .text.SFT_safetyManagement:000001be .LVL29
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1011   .text.SFT_safetyManagement:000001d2 .LVL31
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1043   .text.SFT_safetyManagement:0000020f .LVL32
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1485   .text.SFT_safetyManagement:00000557 .LVL47
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1479   .text.SFT_safetyManagement:0000054b .LVL45
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1483   .text.SFT_safetyManagement:00000555 .LVL46
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1651   .debug_info:00000000 .Ldebug_info0
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:771    .text.SFT_safetyManagement:00000010 .LBB18
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:796    .text.SFT_safetyManagement:00000044 .LBE18
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:802    .text.SFT_safetyManagement:0000004c .LBB19
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:898    .text.SFT_safetyManagement:00000109 .LBE19
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:907    .text.SFT_safetyManagement:00000110 .LBB20
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:973    .text.SFT_safetyManagement:0000018e .LBE20
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:989    .text.SFT_safetyManagement:000001ae .LBB22
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1032   .text.SFT_safetyManagement:000001f6 .LBE22
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1033   .text.SFT_safetyManagement:000001f6 .LBB23
C:\Users\Andrea\AppData\Local\Temp\ccwDRfmA.s:1049   .text.SFT_safetyManagement:0000021a .LBE23

UNDEFINED SYMBOLS
_uPDoorStatus
_GICriteria
_GICriteriaOld
_Tab_SFT_Door
_Set_SmallCounter
_SWTC_IsExpired
_SWTC_Stop
_SWTC_Run
_Interpreter_Data
_New_safety_VS
_Tab_SFT_EV
_Pump_Pos
_LoadsReq_New
_BLDC_PumpReq_New
_EV_Pos
_ReadVS_Data
_ActiveAlgorithmBmp
_GIValid
_Virtual_Sensor_Value
_SftPulseWarn
_LoadEVCheck
_FLT_pilotLoadEV_Mgmt
_FLT_checkForCurrentFault
_FaultMgmt_Data
_FLT_manageFault
_FLT_ResetFaultDetectProc
_FltWarning
_PM_PulseCounter_GetWarning
_PM_PulseCounter_Reset_Warning
_Res_Pos
_HWC_Flags
_BLDC_PumpReq_Old
_uP_AltCtrl_Data
_BLDC_Pump_InfoBuffer
_LoadsReq_Old
_Tab_SFT_PressRes
_Sft_WashPumpSpeedLow
_Sft_WashPumpSpeedHigh
_FltBLDCUnblock
_RegDev_Pos
_Flags_1
_Flags_2
_WaterInDW
_Sft_DrainPP
_DrainSftReq_New
_updateRegWaterLoaded
_WaterLoadedReset
_Fan_Pos
_Dry_SfyTime_Res_On
_goodZCSignal
_OCUART_DisableSync
_OCUART_EnableSync

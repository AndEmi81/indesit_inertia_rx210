   1                             		.file	"LoadRestore.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.LOR_init,"ax",@progbits
   6                             	_LOR_init:
   7                             	.LFB1:
   8                             		.file 1 "C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules/LoadRestore.c"
   1:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /**
   2:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** Source File 
   3:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
   4:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \file    LoadRestore.c
   5:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \ingroup LoadRestore
   6:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \date    18/03/2008
   7:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \author  Valeria Catani
   8:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \version 1.0.0
   9:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** */
  10:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
  11:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /*
  12:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** Copyright (c) 2004-2008, Indesit Company, IDD.
  13:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** Tutti i diritti sono riservati. All rights reserved.
  14:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** */
  15:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
  16:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* Old Versions
  17:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \version 
  18:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \date    
  19:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \author  
  20:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** */
  21:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
  22:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
  23:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* ******** */
  24:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* Includes */
  25:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* ******** */
  26:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
  27:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** #include "CstmHeaders.h"
  28:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** #include "PM_PulseCounterExp.h"
  29:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
  30:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* ****************** */
  31:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* Defines and Macros */
  32:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* ****************** */
  33:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
  34:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
  35:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
  36:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* *************************** */
  37:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* Typedef, Structs and Unions */
  38:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* *************************** */
  39:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
  40:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* **************************** */
  41:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* Prototype of local functions */
  42:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* **************************** */
  43:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** static void LOR_init(void);
  44:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** static void LOR_timeLoad_Init(void);
  45:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** static uint8_t LOR_timeLoadEnd_Check(void);
  46:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** static void LOR_waterInDW_timeBased_Update(void);
  47:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
  48:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* ****************** */
  49:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* Exported variables */
  50:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* ****************** */
  51:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
  52:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* **************** */
  53:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* Global variables */
  54:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* **************** */
  55:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
  56:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* ***************** */
  57:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* Exported function */
  58:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* ***************** */
  59:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
  60:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****  /**
  61:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** Gestisce l'esecuzione del microprogramma Load Restore .
  62:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****  
  63:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \param [in] HighStatement specifica l'high statement (opcode +  modificatori F0-F1 + N flag + T fla
  64:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \param [in] LowStatement specifica il low statement (displacement ai dati) del microprogramma.
  65:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****  
  66:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \return S_OK se la condizione di avanzamento passo per il microprogramma è verificata (caricamento
  67:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \return S_FALSE se non è ancora verificata(caricamento acqua in corso),
  68:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
  69:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****  
  70:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \version		1.0.0
  71:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \date 			18/03/2008
  72:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \author			Valeria Catani
  73:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
  74:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \NB: il up con i sensori virtuali non è usato.
  75:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
  76:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \note	in sospeso pressostato lineare
  77:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
  78:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** */
  79:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** uint8_t LOR_uP_LoadRestore_Exe (uint8_t HighStatement,uint8_t LowStatement)
  80:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** {
  81:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	Loader_Struct uPLoadRestore_setting_data;
  82:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
  83:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	if (Interpreter_Data[0].stepInitialized == FALSE )
  84:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	{
  85:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		/* Prima iterazione del passo */
  86:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
  87:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		uP_LoadRestore_Data.status = LOAD_RESTORE_INIT;
  88:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	}
  89:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
  90:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	if (uPDoorStatus == UP_DOOR_WAIT)
  91:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****   	{/* porta aperta o in attesa di timeout dopo la chiusura o delay MR-> il uP va sospeso */
  92:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****    
  93:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	    
  94:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		(void)SWTC_Stop((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER);
  95:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	    (void)SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
  96:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** #if 0 /* EA FAULT*/
  97:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		(void)SWTC_Stop((SWTC_CountersType)MP_PUMP_LOAD_M_COUNTER);
  98:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** #endif
  99:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	    (void)SWTC_Stop((SWTC_CountersType)MP_LOADRESTORE_S_COUNTER);
 100:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 101:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	    uP_LoadRestore_Data.init = TRUE;
 102:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 103:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		return S_FALSE;
 104:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			    
 105:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	}
 106:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 107:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	
 108:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****   
 109:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****   /* Test validità stato criterio pieno/vuoto */			 
 110:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	                                       
 111:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	if ( (TESTBIT (GIValid, (GI_FIRST_CRITERION_BIT + GI_PRESS_SENS_CR_FULL_IND) ) == 0) )
 112:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	{
 113:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		/*
 114:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		Il criterio pieno/vuoto è in uno stato non valido o non è presente:
 115:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		*/
 116:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 117:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		/* Non eseguo il uP, ma abilito avanzamento passo */
 118:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		return S_OK;
 119:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	}
 120:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 121:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 122:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	if (uP_LoadRestore_Data.status == LOAD_RESTORE_INIT)
 123:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	{
 124:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	 
 125:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	  /* Caricamento dati dalla flash */
 126:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 127:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 128:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		if (BasicLoader (PTR_UP_LOAD_RESTORE, LowStatement, &uPLoadRestore_setting_data) != S_OK)
 129:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		{
 130:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 131:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			/* Non eseguo il uP, ma abilito avanzamento passo */
 132:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			return S_OK;
 133:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		}
 134:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		
 135:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****         TempCycle_Stats.flags.bit.restoreCntEn=1;
 136:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		 
 137:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****         uP_LoadRestore_Data.maxWater = OFFS_B(uPLoadRestore_setting_data.Data,0);	
 138:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		
 139:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		
 140:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		/* Init variabili per caricamento a turbina */
 141:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		
 142:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		uP_LoadRestore_Data.init = TRUE;
 143:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 144:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		
 145:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		PM_PulseCounter_Reset_Warning(PULSECOUNTER_RESET_BOTH_WARNING);             /*            Reset d
 146:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		
 147:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 148:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		uP_LoadRestore_Data.fullPulseIn = 0;                  /* init var per conteggio impulsi entranti 
 149:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 						
 150:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		LOR_init();                                           /* init per caricamento con fullPulseIn = 0
 151:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****     
 152:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		(void)FLT_CheckPulseCounterStill(PULSE_COUNTER_STILL_INIT);     /* init funzione controllo turbin
 153:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		CLRBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS);
 154:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 155:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		uP_LoadRestore_Data.status = LOAD_RESTORE_EXE;
 156:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		
 157:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		/* Nella prima iterazione non vengono pilotati i carichi */
 158:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		return S_FALSE;
 159:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			  
 160:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	} /*LOAD_RESTORE_INIT*/
 161:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	
 162:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	
 163:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	/* QI 05.11.09 gestione timeout caricamento dinamico: vale in Load Restore perchè 
 164:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	implicitamente si assume che con il Load Restore ci sia sempre attivazione pompa, ovvero sia
 165:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	sempre un caricamento dinamico */
 166:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 167:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	SFT_Timeout_4Loadrestore_Mgmt(FLT_PUMP_LOAD_EXE);
 168:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 169:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	if ( TESTBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS) )
 170:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	{
 171:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		
 172:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		/* in analogia con la dichiarazione del KO Restore per WaterInDW > maxWater
 173:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		non si prosegue nel caricamento e viene abilitato avanzamento passo 
 174:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		Il Jump su KO Restore verrà processato nel passo successivo 
 175:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		se Load Restore è l'unico uP del passo*/
 176:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		
 177:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		uP_LoadRestore_Data.status = LOAD_RESTORE_TRUE; 
 178:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		
 179:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	}
 180:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	
 181:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	
 182:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	if (uP_LoadRestore_Data.status == LOAD_RESTORE_EXE)
 183:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	{
 184:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	
 185:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		if ( (PM_PulseCounter_GetWarning() == NO_PULSE_COUNTER_WARNING) && (TESTBIT(Flags_1,JIF_FLAG1_PUL
 186:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		{/* Pulse counter OK && non bloccata */
 187:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 188:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			if ( WaterInDW >= uP_LoadRestore_Data.maxWater )
 189:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			{/* raggiunto livello massimo consentito */
 190:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 191:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				if ( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )
 192:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				{/*vuoto*/
 193:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 194:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					SETBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS); /* set flag overflow ripristini */
 195:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****           
 196:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					  /* incremento contatore KO Restore per statistiche
 197:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					  posso farlo qui perchè eseguo istruzione una volta soltanto dopo aver messo ad 1 il flag KO
 198:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					  e poi cambio stato in LOAD_RESTORE_TRUE */
 199:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** #ifdef _STATISTICS_ON_                        
 200:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					MachineStatistics.lastCycles[MOST_RECENT_STAT_CYCLE_POS].restore_koRestore.b.koRestore++;
 201:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** #endif        
 202:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****         /*DisableCounter(&PulseCounterStill_timer);viene fatto in LOAD_RESTORE_TRUE*/
 203:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 								
 204:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					uP_LoadRestore_Data.status = LOAD_RESTORE_TRUE;
 205:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 206:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				}
 207:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				else
 208:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				{/* pieno -> interrompo il Restore */
 209:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				
 210:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					/*uP_LoadRestore_Data.init = TRUE;*/
 211:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 212:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					/* Rimango in questo stato anche se consento avanzamento passo */
 213:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					return S_OK;
 214:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 215:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				}
 216:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			}
 217:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			else
 218:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			{/* ancora possibile caricare acqua - controllo stato pressostato */
 219:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****       
 220:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				if ( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )
 221:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				{ /* vuoto */
 222:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****           
 223:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					if (uP_LoadRestore_Data.init == TRUE)
 224:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					{/* questa init potrebbe avvenire anche dopo un passaggio per il pieno per cui fullPulseIn != 
 225:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 226:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 							LOR_init();
 227:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****             
 228:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 							/* QI 28.10.09 init finestra di buio su controllo turbina. Messo qui per reinizializzare con
 229:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 230:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 							(void)SWTC_SetSValue((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER, (SWTC_SCounterValue)TOU
 231:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 232:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****             
 233:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****               
 234:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 							uP_LoadRestore_Data.init = FALSE;
 235:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****               
 236:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					}
 237:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****           
 238:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					WaterInDW = (uP_LoadRestore_Data.waterInDWInit + GIWaterLoaded);  /* aggiornamento acqua in va
 239:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 240:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					TempCycle_Stats.loaded_water += GIWaterLoaded;
 241:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					cycle_loaded_water += GIWaterLoaded;
 242:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					/* QI 27.10.09 gestione finestra di buio su check turbina */
 243:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****           
 244:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					FLT_PulseCounterCheckDelay_Mgmt();
 245:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****           
 246:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 247:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** #ifdef _STATISTICS_ON_
 248:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					if((GIWaterLoaded>5) && (TempCycle_Stats.flags.bit.restoreCntEn==1))
 249:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					{
 250:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 						MachineStatistics.lastCycles[MOST_RECENT_STAT_CYCLE_POS].restore_koRestore.b.restore++;
 251:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 						TempCycle_Stats.flags.bit.restoreCntEn =0 ;
 252:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					}
 253:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** #endif
 254:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****           
 255:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					uP_LoadRestore_Data.emptyPulseIn = (GIWaterLoaded * FlowMeterDivider);	 /* aggiornamento acqua
 256:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****                                                                                       rappresenta l
 257:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****                                                                                       valore salvat
 258:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****                     				
 259:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b = EV_ON; /* pilotaggio EV*/
 260:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				
 261:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					/* controllo turbina bloccata */
 262:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					if ( FLT_CheckPulseCounterStill(PULSE_COUNTER_STILL_EXE) == TRUE )
 263:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					{
 264:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****             
 265:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 						/* entro qui una sola volta,poi cambio modalità di ripristino */
 266:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 						/* salva nella pila dei last prefault*/
 267:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 						FLT_warningSave(FLT_CODE_PULSE_COUNTER, FLT_SUBCODE_PULSE_COUNTER, WRN_PREFAULT);
 268:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****             
 269:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 						SETBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS);
 270:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****             
 271:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					}
 272:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	  
 273:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					return S_FALSE;
 274:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	                
 275:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				}
 276:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				else
 277:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				{/* pieno */
 278:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****          
 279:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					/*in pieno non piloto EV ma tengo conto di eventuali impulsi conteggiati dalla turbina */
 280:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****                     
 281:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					/*impulsi contati durante la permanenza in pieno */
 282:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					if ( PulseLoaded >= uP_LoadRestore_Data.emptyPulseIn )
 283:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					{
 284:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 						uP_LoadRestore_Data.fullPulseIn = ( PulseLoaded - uP_LoadRestore_Data.emptyPulseIn );
 285:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					}
 286:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				
 287:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					/*METTI GIWaterLoaded = 0, magari nella procedura di Init, qui manca*/
 288:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					uP_LoadRestore_Data.init = TRUE;
 289:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					
 290:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					(void)SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
 291:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 292:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					/* Rimango in questo stato anche se consento avanzamento passo */
 293:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 294:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					return S_OK;
 295:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					
 296:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				}
 297:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					
 298:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			}
 299:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 300:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		}
 301:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		else
 302:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		{/* Warning Pulse Counter: il conteggio dell'acqua in ingresso non è affidabile ->
 303:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			  non eseguo uP ma abilito avanzamento passo 	 */
 304:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****       
 305:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			uP_LoadRestore_Data.status = LOAD_RESTORE_EXE_TIME;
 306:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****       
 307:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			uP_LoadRestore_Data.init = TRUE;  /* uso la stessa var perchè sono in uno stato diverso */
 308:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****       
 309:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		}
 310:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****         
 311:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****    }/*LOAD_RESTORE_EXE*/
 312:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****    
 313:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****    if (uP_LoadRestore_Data.status == LOAD_RESTORE_EXE_TIME)
 314:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****    {/* ripristino a tempo */
 315:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****    
 316:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	   if ( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )
 317:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	   {/* vuoto -> posso ancora caricare acqua, se ho tempo residuo */
 318:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 319:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			if (uP_LoadRestore_Data.init == TRUE)
 320:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			{/* questa init potrebbe avvenire anche dopo un passaggio per il pieno per cui fullPulseIn != 0*
 321:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 322:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				LOR_timeLoad_Init();
 323:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 324:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				uP_LoadRestore_Data.init = FALSE;
 325:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 326:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			}
 327:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 328:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			if ( LOR_timeLoadEnd_Check() == S_OK )
 329:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			{ /* Esaurito tempo a disposizione per ripristino ->
 330:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			 Non potrò più caricare acqua neanche nei ripristini successivi, a meno che non
 331:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			 abbiano un dato di maxWater maggiore */
 332:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 333:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				  /* Aggiornamento acqua in vasca */
 334:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				WaterInDW = uP_LoadRestore_Data.maxWater;
 335:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 336:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				SETBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS); /* set flag overflow ripristini */
 337:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 338:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				  /* incremento contatore KO Restore per statistiche
 339:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				  posso farlo qui perchè eseguo istruzione una volta soltanto dopo aver messo ad 1 il flag KO 
 340:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				  e poi cambio stato in LOAD_RESTORE_TRUE */
 341:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			#ifdef _STATISTICS_ON_
 342:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				MachineStatistics.lastCycles[MOST_RECENT_STAT_CYCLE_POS].restore_koRestore.b.koRestore++;
 343:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			#endif
 344:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 345:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				uP_LoadRestore_Data.status = LOAD_RESTORE_TRUE;
 346:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			}
 347:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			/* else tempo di ripristino non esaurito */
 348:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 349:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			/* carico pilotato comunque per continuità */
 350:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b = EV_ON; /* pilotaggio EV*/
 351:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	   }
 352:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		else
 353:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		{/* pieno -> interrompo il Restore */
 354:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 355:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		  if ( uP_LoadRestore_Data.init == FALSE )
 356:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		  {/* è stata eseguita init in LOAD_RESTORE_EXE_TIME -> var inizializzate
 357:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			  inoltre init == FALSE per un'unica iterazione-> aggiornamento un'unica volta */
 358:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 359:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				/* aggiornamento acqua caricata in base al tempo trascorso */
 360:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				LOR_waterInDW_timeBased_Update();
 361:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				
 362:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				uP_LoadRestore_Data.init = TRUE;	 /* per eventuale restart con vuoto */
 363:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		  }
 364:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 365:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				/* Rimango in questo stato anche se consento avanzamento passo */
 366:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 367:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		  return S_OK;
 368:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		}
 369:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 370:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****    }/*LOAD_RESTORE_EXE_TIME*/
 371:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****    
 372:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****    if (uP_LoadRestore_Data.status == LOAD_RESTORE_TRUE)
 373:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****    {
 374:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	
 375:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		(void)SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
 376:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	 
 377:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		return S_OK;
 378:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 379:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	}/*LOAD_RESTORE_TRUE*/
 380:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****   
 381:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****    return S_FALSE; 
 382:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****   
 383:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** }
 384:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /**/
 385:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 386:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 387:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 388:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* ************** */
 389:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* Local Function */
 390:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /* ************** */
 391:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 392:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /**
 393:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** Gestisce l'inizializzazione del caricamento.
 394:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****  
 395:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \param [in] HighStatement specifica l'high statement (opcode +  modificatori F0-F1 + N flag + T fla
 396:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \param [in] LowStatement specifica il low statement (displacement ai dati) del microprogramma.
 397:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****  
 398:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 399:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****  
 400:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \version		1.0.0
 401:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \date 			18/03/2008
 402:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \author			Valeria Catani
 403:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 404:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \note	in sospeso pressostato lineare
 405:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 406:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** */
 407:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** static void LOR_init(void)
 408:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** {
   9                             		.loc 1 408 0
 409:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****  
 410:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****   GIWaterLoaded = 0;
  10                             		.loc 1 410 0
  11 0000 FB E2 00 00 00 00       		mov.L	#_GIWaterLoaded, r14
  12 0006 F8 E5 00                		mov.W	#0, [r14]
 411:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****   PulseLoaded = 0;
  13                             		.loc 1 411 0
  14 0009 FB E2 00 00 00 00       		mov.L	#_PulseLoaded, r14
  15 000f F8 E5 00                		mov.W	#0, [r14]
 412:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****   uP_LoadRestore_Data.emptyPulseIn = 0;
  16                             		.loc 1 412 0
  17 0012 FB E2 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r14
  18 0018 F9 E5 04 00             		mov.W	#0, 8[r14]
 413:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****  
 414:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****   uP_LoadRestore_Data.waterInDWInit = WaterInDW; 
  19                             		.loc 1 414 0
  20 001c FB 42 00 00 00 00       		mov.L	#_WaterInDW, r4
  21 0022 C4 4E 02                		mov.B	[r4], 2[r14]
 415:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	         
 416:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****   PM_PulseCounter_SetCount(uP_LoadRestore_Data.fullPulseIn);/* init pulse counter per nuovo contegg
  22                             		.loc 1 416 0
  23 0025 DD E1 03                		mov.W	6[r14], r1
  24 0028 04 00 00 00             		bra	_PM_PulseCounter_SetCount
  25                             	.LVL0:
  26                             	.LFE1:
  28                             		.section	.text.LOR_uP_LoadRestore_Exe,"ax",@progbits
  29                             		.global	_LOR_uP_LoadRestore_Exe
  31                             	_LOR_uP_LoadRestore_Exe:
  32                             	.LFB0:
  80:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** {
  33                             		.loc 1 80 0
  34                             	.LVL1:
  35 0000 6E 7C                   		pushm	r7-r12
  36                             	.LCFI0:
  37 0002 60 80                   		sub	#8, r0
  38                             	.LCFI1:
  83:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	if (Interpreter_Data[0].stepInitialized == FALSE )
  39                             		.loc 1 83 0
  40 0004 FB 72 00 00 00 00       		mov.L	#_Interpreter_Data, r7
  41 000a 89 77                   		mov.B	4[r7], r7
  42 000c 64 27                   		and	#2, r7
  43 000e 1A                      		bne	.L3
  87:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		uP_LoadRestore_Data.status = LOAD_RESTORE_INIT;
  44                             		.loc 1 87 0
  45 000f FB A2 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r10
  46 0015 C7 A7 01                		mov.B	r7, 1[r10]
  47                             		.balign 2,3,5
  48                             	.L3:
  90:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	if (uPDoorStatus == UP_DOOR_WAIT)
  49                             		.loc 1 90 0
  50 0018 FB 72 00 00 00 00       		mov.L	#_uPDoorStatus, r7
  51 001e 58 77                   		movu.B	[r7], r7
  52 0020 61 07                   		cmp	#0, r7
  53 0022 21 22                   		bne	.L4
  94:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		(void)SWTC_Stop((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER);
  54                             		.loc 1 94 0
  55 0024 75 41 22                		mov	#34, r1
  56                             	.LVL2:
  57 0027 05 00 00 00             		bsr	_SWTC_Stop
  58                             	.LVL3:
  95:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	    (void)SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
  59                             		.loc 1 95 0
  60 002b 75 41 23                		mov	#35, r1
  61 002e 05 00 00 00             		bsr	_SWTC_Stop
  62                             	.LVL4:
  99:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	    (void)SWTC_Stop((SWTC_CountersType)MP_LOADRESTORE_S_COUNTER);
  63                             		.loc 1 99 0
  64 0032 75 41 16                		mov	#22, r1
  65 0035 05 00 00 00             		bsr	_SWTC_Stop
  66                             	.LVL5:
 101:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	    uP_LoadRestore_Data.init = TRUE;
  67                             		.loc 1 101 0
  68 0039 FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
  69 003f 3C 73 01                		mov.B	#1, 3[r7]
  70 0042 2E 64                   		bra	.L37
  71                             	.LVL6:
  72                             	.L4:
 111:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	if ( (TESTBIT (GIValid, (GI_FIRST_CRITERION_BIT + GI_PRESS_SENS_CR_FULL_IND) ) == 0) )
  73                             		.loc 1 111 0
  74 0044 FB 72 00 00 00 00       		mov.L	#_GIValid, r7
  75 004a DC 77                   		mov.W	[r7], r7
  76 004c FD 74 C7 01             		tst	#1, r7
  77 0050 1C                      		bne	.L6
  78 0051 38 F7 02                		bra	.L36
  79                             	.L6:
 122:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	if (uP_LoadRestore_Data.status == LOAD_RESTORE_INIT)
  80                             		.loc 1 122 0
  81 0054 FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
  82 005a 59 7A 01                		movu.B	1[r7], r10
  83 005d 61 0A                   		cmp	#0, r10
  84 005f 21 4C                   		bne	.L7
 128:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		if (BasicLoader (PTR_UP_LOAD_RESTORE, LowStatement, &uPLoadRestore_setting_data) != S_OK)
  85                             		.loc 1 128 0
  86 0061 5B 22                   		movu.B	r2, r2
  87 0063 75 41 12                		mov	#18, r1
  88                             	.LVL7:
  89 0066 EF 03                   		mov.L	r0, r3
  90 0068 05 00 00 00             		bsr	_BasicLoader
  91                             	.LVL8:
  92 006c 5B 1A                   		movu.B	r1, r10
  93 006e 61 0A                   		cmp	#0, r10
  94 0070 3B D8 02                		bne	.L36
 135:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****         TempCycle_Stats.flags.bit.restoreCntEn=1;
  95                             		.loc 1 135 0
  96 0073 FB B2 00 00 00 00       		mov.L	#_TempCycle_Stats, r11
  97 0079 CD BC 02                		mov.B	2[r11], r12
  98 007c 78 0C                   		bset	#0, r12
  99 007e C7 BC 02                		mov.B	r12, 2[r11]
 137:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****         uP_LoadRestore_Data.maxWater = OFFS_B(uPLoadRestore_setting_data.Data,0);	
 100                             		.loc 1 137 0
 101 0081 EC 0B                   		mov.L	[r0], r11
 102 0083 C0 B7                   		mov.B	[r11], [r7]
 142:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		uP_LoadRestore_Data.init = TRUE;
 103                             		.loc 1 142 0
 104 0085 3C 73 01                		mov.B	#1, 3[r7]
 145:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		PM_PulseCounter_Reset_Warning(PULSECOUNTER_RESET_BOTH_WARNING);             /*            Reset d
 105                             		.loc 1 145 0
 106 0088 66 21                   		mov	#2, r1
 107 008a 05 00 00 00             		bsr	_PM_PulseCounter_Reset_Warning
 108                             	.LVL9:
 148:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		uP_LoadRestore_Data.fullPulseIn = 0;                  /* init var per conteggio impulsi entranti 
 109                             		.loc 1 148 0
 110 008e D7 7A 03                		mov.W	r10, 6[r7]
 150:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		LOR_init();                                           /* init per caricamento con fullPulseIn = 0
 111                             		.loc 1 150 0
 112 0091 05 00 00 00             		bsr	_LOR_init
 113                             	.LVL10:
 152:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		(void)FLT_CheckPulseCounterStill(PULSE_COUNTER_STILL_INIT);     /* init funzione controllo turbin
 114                             		.loc 1 152 0
 115 0095 CF A1                   		mov.B	r10, r1
 116 0097 05 00 00 00             		bsr	_FLT_CheckPulseCounterStill
 117                             	.LVL11:
 153:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		CLRBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS);
 118                             		.loc 1 153 0
 119 009b FB A2 00 00 00 00       		mov.L	#_Flags_1, r10
 120 00a1 F0 AA                   		bclr #2, [r10].B
 155:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		uP_LoadRestore_Data.status = LOAD_RESTORE_EXE;
 121                             		.loc 1 155 0
 122 00a3 3C 71 01                		mov.B	#1, 1[r7]
 123                             		.balign 2,3,1
 124                             	.L37:
 158:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		return S_FALSE;
 125                             		.loc 1 158 0
 126 00a6 66 11                   		mov	#1, r1
 127 00a8 38 A2 02                		bra	.L5
 128                             	.LVL12:
 129                             	.L7:
 167:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	SFT_Timeout_4Loadrestore_Mgmt(FLT_PUMP_LOAD_EXE);
 130                             		.loc 1 167 0
 131 00ab 66 11                   		mov	#1, r1
 132                             	.LVL13:
 133 00ad 05 00 00 00             		bsr	_SFT_Timeout_4Loadrestore_Mgmt
 134                             	.LVL14:
 169:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	if ( TESTBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS) )
 135                             		.loc 1 169 0
 136 00b1 FB A2 00 00 00 00       		mov.L	#_Flags_1, r10
 137 00b7 CC AA                   		mov.B	[r10], r10
 138 00b9 FD 74 CA 01             		tst	#1, r10
 139 00bd 15                      		beq	.L9
 177:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		uP_LoadRestore_Data.status = LOAD_RESTORE_TRUE; 
 140                             		.loc 1 177 0
 141 00be 3C 71 03                		mov.B	#3, 1[r7]
 142 00c1 03                      		.balign 2,3,5
 143                             	.L9:
 182:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	if (uP_LoadRestore_Data.status == LOAD_RESTORE_EXE)
 144                             		.loc 1 182 0
 145 00c2 FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
 146 00c8 59 7A 01                		movu.B	1[r7], r10
 147 00cb 61 1A                   		cmp	#1, r10
 148 00cd 3B 5B 01                		bne	.L10
 185:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		if ( (PM_PulseCounter_GetWarning() == NO_PULSE_COUNTER_WARNING) && (TESTBIT(Flags_1,JIF_FLAG1_PUL
 149                             		.loc 1 185 0
 150 00d0 05 00 00 00             		bsr	_PM_PulseCounter_GetWarning
 151                             	.LVL15:
 152 00d4 76 21 FF 00             		and #0xff, r1
 153 00d8 3B 44 01                		bne	.L11
 185:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		if ( (PM_PulseCounter_GetWarning() == NO_PULSE_COUNTER_WARNING) && (TESTBIT(Flags_1,JIF_FLAG1_PUL
 154                             		.loc 1 185 0 is_stmt 0 discriminator 1
 155 00db FB B2 00 00 00 00       		mov.L	#_Flags_1, r11
 156 00e1 CC BC                   		mov.B	[r11], r12
 157 00e3 EF CA                   		mov.L	r12, r10
 158 00e5 64 4A                   		and #4, r10
 159 00e7 3B 35 01                		bne	.L11
 188:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			if ( WaterInDW >= uP_LoadRestore_Data.maxWater )
 160                             		.loc 1 188 0 is_stmt 1
 161 00ea FB A2 00 00 00 00       		mov.L	#_WaterInDW, r10
 162 00f0 58 A4                   		movu.B	[r10], r4
 163 00f2 58 7E                   		movu.B	[r7], r14
 164 00f4 FB A2 00 00 00 00       		mov.L	#_GICriteria, r10
 191:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				if ( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )
 165                             		.loc 1 191 0
 166 00fa CC AA                   		mov.B	[r10], r10
 188:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			if ( WaterInDW >= uP_LoadRestore_Data.maxWater )
 167                             		.loc 1 188 0
 168 00fc 47 E4                   		cmp	r14, r4
 169 00fe 23 22                   		bltu	.L12
 191:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				if ( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )
 170                             		.loc 1 191 0
 171 0100 FD 74 CA 01             		tst	#1, r10
 172 0104 3B 44 02                		bne	.L36
 194:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					SETBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS); /* set flag overflow ripristini */
 173                             		.loc 1 194 0
 174 0107 78 0C                   		bset #0, r12
 175 0109 C3 BC                   		mov.B	r12, [r11]
 200:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					MachineStatistics.lastCycles[MOST_RECENT_STAT_CYCLE_POS].restore_koRestore.b.koRestore++;
 176                             		.loc 1 200 0
 177 010b FB A2 00 00 00 00       		mov.L	#_MachineStatistics, r10
 178 0111 CD AB 78                		mov.B	120[r10], r11
 179 0114 71 BB 10                		add	#16, r11
 180 0117 C7 AB 78                		mov.B	r11, 120[r10]
 204:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					uP_LoadRestore_Data.status = LOAD_RESTORE_TRUE;
 181                             		.loc 1 204 0
 182 011a 3C 71 03                		mov.B	#3, 1[r7]
 183 011d 38 0B 01                		bra	.L10
 184                             	.L12:
 220:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				if ( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )
 185                             		.loc 1 220 0
 186 0120 64 1A                   		and	#1, r10
 187 0122 3B D5 00                		bne	.L13
 223:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					if (uP_LoadRestore_Data.init == TRUE)
 188                             		.loc 1 223 0
 189 0125 59 7B 03                		movu.B	3[r7], r11
 190 0128 61 1B                   		cmp	#1, r11
 191 012a 21 1E                   		bne	.L14
 226:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 							LOR_init();
 192                             		.loc 1 226 0
 193 012c 05 00 00 00             		bsr	_LOR_init
 194                             	.LVL16:
 230:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 							(void)SWTC_SetSValue((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER, (SWTC_SCounterValue)TOU
 195                             		.loc 1 230 0
 196 0130 FB B2 00 00 00 00       		mov.L	#_Tab_LoadFault, r11
 197 0136 EC BB                   		mov.L	[r11], r11
 198 0138 CD B2 09                		mov.B	9[r11], r2
 199 013b 75 41 22                		mov	#34, r1
 200 013e 75 22 7F                		and #0x7f, r2
 201 0141 05 00 00 00             		bsr	_SWTC_SetSValue
 202                             	.LVL17:
 234:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 							uP_LoadRestore_Data.init = FALSE;
 203                             		.loc 1 234 0
 204 0145 C7 7A 03                		mov.B	r10, 3[r7]
 205                             		.balign 2,3,5
 206                             	.L14:
 238:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					WaterInDW = (uP_LoadRestore_Data.waterInDWInit + GIWaterLoaded);  /* aggiornamento acqua in va
 207                             		.loc 1 238 0
 208 0148 FB B2 00 00 00 00       		mov.L	#_GIWaterLoaded, r11
 209 014e 5C BA                   		movu.W	[r11], r10
 210 0150 FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
 211 0156 CD 7C 02                		mov.B	2[r7], r12
 212 0159 4B AC                   		add	r10, r12
 213 015b FB 72 00 00 00 00       		mov.L	#_WaterInDW, r7
 214 0161 C3 7C                   		mov.B	r12, [r7]
 240:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					TempCycle_Stats.loaded_water += GIWaterLoaded;
 215                             		.loc 1 240 0
 216 0163 FB 72 00 00 00 00       		mov.L	#_TempCycle_Stats, r7
 217 0169 DD 7C 06                		mov.W	12[r7], r12
 218 016c 4B AC                   		add	r10, r12
 219 016e D7 7C 06                		mov.W	r12, 12[r7]
 241:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					cycle_loaded_water += GIWaterLoaded;
 220                             		.loc 1 241 0
 221 0171 FB C2 00 00 00 00       		mov.L	#_cycle_loaded_water, r12
 222 0177 06 88 CA                		add	[r12].L, r10
 223 017a E3 CA                   		mov.L	r10, [r12]
 244:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					FLT_PulseCounterCheckDelay_Mgmt();
 224                             		.loc 1 244 0
 225 017c 05 00 00 00             		bsr	_FLT_PulseCounterCheckDelay_Mgmt
 226                             	.LVL18:
 248:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					if((GIWaterLoaded>5) && (TempCycle_Stats.flags.bit.restoreCntEn==1))
 227                             		.loc 1 248 0
 228 0180 DC BB                   		mov.W	[r11], r11
 229 0182 5F BA                   		movu.W	r11, r10
 230 0184 61 5A                   		cmp	#5, r10
 231 0186 25 28                   		bleu	.L15
 248:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					if((GIWaterLoaded>5) && (TempCycle_Stats.flags.bit.restoreCntEn==1))
 232                             		.loc 1 248 0 is_stmt 0 discriminator 1
 233 0188 CD 7C 02                		mov.B	2[r7], r12
 234 018b FD 74 CC 01             		tst	#1, r12
 235 018f 20 1F                   		beq	.L15
 250:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 						MachineStatistics.lastCycles[MOST_RECENT_STAT_CYCLE_POS].restore_koRestore.b.restore++;
 236                             		.loc 1 250 0 is_stmt 1
 237 0191 FB E2 00 00 00 00       		mov.L	#_MachineStatistics, r14
 238 0197 CD E4 78                		mov.B	120[r14], r4
 239 019a 71 4A 01                		add	#1, r4, r10
 240 019d 64 FA                   		and #15, r10
 241 019f 75 24 F0                		and #-16, r4
 242 01a2 57 4A                   		or	r4, r10
 243 01a4 C7 EA 78                		mov.B	r10, 120[r14]
 251:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 						TempCycle_Stats.flags.bit.restoreCntEn =0 ;
 244                             		.loc 1 251 0
 245 01a7 CF CA                   		mov.B	r12, r10
 246 01a9 7A 0A                   		bclr	#0, r10
 247 01ab C7 7A 02                		mov.B	r10, 2[r7]
 248                             		.balign 2,3,5
 249                             	.L15:
 255:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					uP_LoadRestore_Data.emptyPulseIn = (GIWaterLoaded * FlowMeterDivider);	 /* aggiornamento acqua
 250                             		.loc 1 255 0
 251 01ae FB 72 00 00 00 00       		mov.L	#_FlowMeterDivider, r7
 252 01b4 4C 7B                   		mul	[r7].UB, r11
 253 01b6 FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
 254 01bc D7 7B 04                		mov.W	r11, 8[r7]
 259:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b = EV_ON; /* pilotaggio EV*/
 255                             		.loc 1 259 0
 256 01bf FB 72 00 00 00 00       		mov.L	#_EV_Pos, r7
 257 01c5 58 77                   		movu.B	[r7], r7
 258 01c7 FB A2 00 00 00 00       		mov.L	#_LoadsReq_New, r10
 259 01cd 66 1B                   		mov	#1, r11
 260 01cf FE 07 AB                		mov.B	r11, [r7,r10]
 262:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					if ( FLT_CheckPulseCounterStill(PULSE_COUNTER_STILL_EXE) == TRUE )
 261                             		.loc 1 262 0
 262 01d2 CF B1                   		mov.B	r11, r1
 263 01d4 05 00 00 00             		bsr	_FLT_CheckPulseCounterStill
 264                             	.LVL19:
 265 01d8 EF 17                   		mov.L	r1, r7
 266 01da EF 12                   		mov.L	r1, r2
 267 01dc 61 11                   		cmp	#1, r1
 268 01de 14                      		beq	.L16
 269 01df 38 C7 FE                		bra	.L37
 270                             	.L16:
 267:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 						FLT_warningSave(FLT_CODE_PULSE_COUNTER, FLT_SUBCODE_PULSE_COUNTER, WRN_PREFAULT);
 271                             		.loc 1 267 0
 272 01e2 66 71                   		mov	#7, r1
 273 01e4 66 03                   		mov	#0, r3
 274 01e6 05 00 00 00             		bsr	_FLT_warningSave
 275                             	.LVL20:
 269:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 						SETBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS);
 276                             		.loc 1 269 0
 277 01ea FB A2 00 00 00 00       		mov.L	#_Flags_1, r10
 278 01f0 F0 A2                   		bset #2, [r10].B
 273:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					return S_FALSE;
 279                             		.loc 1 273 0
 280 01f2 CF 71                   		mov.B	r7, r1
 281 01f4 38 56 01                		bra	.L5
 282                             	.L13:
 282:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					if ( PulseLoaded >= uP_LoadRestore_Data.emptyPulseIn )
 283                             		.loc 1 282 0
 284 01f7 FB A2 00 00 00 00       		mov.L	#_PulseLoaded, r10
 285 01fd DC AB                   		mov.W	[r10], r11
 286 01ff DD 7A 04                		mov.W	8[r7], r10
 287 0202 5F BE                   		movu.W	r11, r14
 288 0204 5F AC                   		movu.W	r10, r12
 289 0206 47 CE                   		cmp	r12, r14
 290 0208 23 08                   		bltu	.L17
 284:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 						uP_LoadRestore_Data.fullPulseIn = ( PulseLoaded - uP_LoadRestore_Data.emptyPulseIn );
 291                             		.loc 1 284 0
 292 020a FF 0A AB                		sub	r10, r11, r10
 293 020d D7 7A 03                		mov.W	r10, 6[r7]
 294                             		.balign 2,3,5
 295                             	.L17:
 288:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 					uP_LoadRestore_Data.init = TRUE;
 296                             		.loc 1 288 0
 297 0210 FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
 298 0216 3C 73 01                		mov.B	#1, 3[r7]
 299 0219 38 27 01                		bra	.L35
 300                             	.L11:
 305:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			uP_LoadRestore_Data.status = LOAD_RESTORE_EXE_TIME;
 301                             		.loc 1 305 0
 302 021c FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
 303 0222 3C 71 02                		mov.B	#2, 1[r7]
 307:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			uP_LoadRestore_Data.init = TRUE;  /* uso la stessa var perchè sono in uno stato diverso */
 304                             		.loc 1 307 0
 305 0225 3C 73 01                		mov.B	#1, 3[r7]
 306                             		.balign 2,3,5
 307                             	.L10:
 313:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****    if (uP_LoadRestore_Data.status == LOAD_RESTORE_EXE_TIME)
 308                             		.loc 1 313 0
 309 0228 FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
 310 022e 59 7A 01                		movu.B	1[r7], r10
 311 0231 61 2A                   		cmp	#2, r10
 312 0233 3B FF 00                		bne	.L18
 316:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	   if ( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )
 313                             		.loc 1 316 0
 314 0236 FB A2 00 00 00 00       		mov.L	#_GICriteria, r10
 315 023c CC AB                   		mov.B	[r10], r11
 316 023e 64 1B                   		and	#1, r11
 317 0240 59 7A 03                		movu.B	3[r7], r10
 318 0243 3B AA 00                		bne	.L19
 319:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			if (uP_LoadRestore_Data.init == TRUE)
 319                             		.loc 1 319 0
 320 0246 61 1A                   		cmp	#1, r10
 321 0248 21 26                   		bne	.L20
 322                             	.LVL21:
 323                             	.LBB8:
 324                             	.LBB9:
 417:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 418:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** }
 419:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 420:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /**
 421:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** Inizializza up counter per caricamento a tempo
 422:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 423:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \param [in]		
 424:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 425:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \note: 
 426:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \version		1.0.0
 427:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \date 			27/08/2008
 428:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \author			Valeria Catani
 429:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 430:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** */
 431:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** static void LOR_timeLoad_Init(void)
 432:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** {
 433:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** uint8_t loadingWater;	
 434:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	
 435:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	/* Calcolo tempo di caricamento residuo */
 436:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****   	loadingWater =  ( uP_LoadRestore_Data.maxWater - WaterInDW );	  /* acqua residua che è possibil
 325                             		.loc 1 436 0
 326 024a CC 71                   		mov.B	[r7], r1
 327 024c FB A2 00 00 00 00       		mov.L	#_WaterInDW, r10
 328                             	.LVL22:
 437:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****           
 438:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	uP_LoadRestore_Data.time = LOA_levTOtime_Conv(loadingWater); /* Calcolo tempo totale di ripristino
 329                             		.loc 1 438 0
 330 0252 06 00 A1                		sub	[r10].B, r1
 331 0255 05 00 00 00             		bsr	_LOA_levTOtime_Conv
 332                             	.LVL23:
 333 0259 91 79                   		mov.W	r1, 10[r7]
 439:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		    		  	
 440:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	uP_LoadRestore_Data.timeAcc = 0;
 334                             		.loc 1 440 0
 335 025b D7 7B 06                		mov.W	r11, 12[r7]
 441:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 442:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	/* config + init UP counter per conteggio caricamento a tempo */
 443:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 444:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	(void)Set_SmallCounter((SWTC_CountersType)MP_LOADRESTORE_S_COUNTER, (SWTC_PrescalerType)COUNTERS2_
 336                             		.loc 1 444 0
 337 025e 75 41 16                		mov	#22, r1
 338 0261 66 32                   		mov	#3, r2
 339 0263 75 43 7F                		mov	#0x7f, r3
 340 0266 05 00 00 00             		bsr	_Set_SmallCounter
 341                             	.LVL24:
 342                             	.LBE9:
 343                             	.LBE8:
 324:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				uP_LoadRestore_Data.init = FALSE;
 344                             		.loc 1 324 0
 345 026a C7 7B 03                		mov.B	r11, 3[r7]
 346 026d 03                      		.balign 2,3,5
 347                             	.L20:
 348                             	.LBB10:
 349                             	.LBB11:
 445:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 446:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** }
 447:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /**/
 448:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 449:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 450:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /**
 451:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** Valuta se il target per il ripristino a tempo è stato raggiunto -
 452:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 453:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 454:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \param [in]		
 455:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \return 		S_OK se il target è stato raggiunto
 456:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				S_FALSE se il target non è ancora raggiunto
 457:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				 
 458:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \version		1.0.0
 459:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \date 			27/08/2008
 460:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \author			Valeria Catani
 461:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 462:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** */
 463:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** static uint8_t LOR_timeLoadEnd_Check(void)
 464:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** {
 465:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** uint16_t timeElapsed_tmp;
 466:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 467:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	/* Caricamento in base alla portata (a tempo) */
 468:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 469:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	timeElapsed_tmp = (uP_LoadRestore_Data.timeAcc + (SWTC_TimeType)SWTC_GetElapsedTime((SWTC_Counters
 350                             		.loc 1 469 0
 351 026e FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
 352 0274 DD 7A 06                		mov.W	12[r7], r10
 353 0277 75 41 16                		mov	#22, r1
 354 027a 05 00 00 00             		bsr	_SWTC_GetElapsedTime
 355                             	.LVL25:
 356 027e 4B A1                   		add	r10, r1
 357                             	.LVL26:
 470:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 471:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	if (timeElapsed_tmp >= uP_LoadRestore_Data.time)
 358                             		.loc 1 471 0
 359 0280 5D 7B 05                		movu.W	10[r7], r11
 360 0283 5F 1A                   		movu.W	r1, r10
 472:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	{
 473:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		/* End counting */
 474:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 475:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		(void)SWTC_Stop((SWTC_CountersType)MP_LOADRESTORE_S_COUNTER);
 361                             		.loc 1 475 0
 362 0285 75 41 16                		mov	#22, r1
 471:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	if (timeElapsed_tmp >= uP_LoadRestore_Data.time)
 363                             		.loc 1 471 0
 364 0288 47 AB                   		cmp	r10, r11
 365 028a 24 2A                   		bgtu	.L21
 366                             		.loc 1 475 0
 367 028c 05 00 00 00             		bsr	_SWTC_Stop
 368                             	.LVL27:
 369                             	.LBE11:
 370                             	.LBE10:
 334:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				WaterInDW = uP_LoadRestore_Data.maxWater;
 371                             		.loc 1 334 0
 372 0290 FB A2 00 00 00 00       		mov.L	#_WaterInDW, r10
 373 0296 C0 7A                   		mov.B	[r7], [r10]
 336:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				SETBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS); /* set flag overflow ripristini */
 374                             		.loc 1 336 0
 375 0298 FB A2 00 00 00 00       		mov.L	#_Flags_1, r10
 376 029e F0 A0                   		bset #0, [r10].B
 342:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				MachineStatistics.lastCycles[MOST_RECENT_STAT_CYCLE_POS].restore_koRestore.b.koRestore++;
 377                             		.loc 1 342 0
 378 02a0 FB A2 00 00 00 00       		mov.L	#_MachineStatistics, r10
 379 02a6 CD AB 78                		mov.B	120[r10], r11
 380 02a9 71 BB 10                		add	#16, r11
 381 02ac C7 AB 78                		mov.B	r11, 120[r10]
 345:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				uP_LoadRestore_Data.status = LOAD_RESTORE_TRUE;
 382                             		.loc 1 345 0
 383 02af 3C 71 03                		mov.B	#3, 1[r7]
 384 02b2 2E 26                   		bra	.L22
 385                             	.L21:
 386                             	.LBB13:
 387                             	.LBB12:
 476:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 477:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		return S_OK;
 478:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	}
 479:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	else
 480:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	{
 481:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		if (SWTC_IsExpired((SWTC_CountersType)MP_LOADRESTORE_S_COUNTER) )
 388                             		.loc 1 481 0
 389 02b4 05 00 00 00             		bsr	_SWTC_IsExpired
 390                             	.LVL28:
 391 02b8 61 01                   		cmp	#0, r1
 392 02ba 20 16                   		beq	.L23
 482:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		{
 483:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			/* Restart counter */
 484:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 485:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			/* Update timeAcc */
 486:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			uP_LoadRestore_Data.timeAcc += TOUT_MAX_COUNTER;
 393                             		.loc 1 486 0
 394 02bc DD 7A 06                		mov.W	12[r7], r10
 395 02bf 71 AA 7F                		add	#0x7f, r10
 396 02c2 D7 7A 06                		mov.W	r10, 12[r7]
 487:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 488:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			/* Restart timer */
 489:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 490:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			(void)SWTC_SetSValue ((SWTC_CountersType)MP_LOADRESTORE_S_COUNTER,(SWTC_SCounterValue)TOUT_MAX_C
 397                             		.loc 1 490 0
 398 02c5 75 41 16                		mov	#22, r1
 399 02c8 75 42 7F                		mov	#0x7f, r2
 400 02cb 05 00 00 00             		bsr	_SWTC_SetSValue
 401                             	.LVL29:
 402 02cf 03                      		.balign 2,3,2
 403                             	.L23:
 491:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 492:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		}
 493:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 494:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		(void)SWTC_Run((SWTC_CountersType)MP_LOADRESTORE_S_COUNTER);
 404                             		.loc 1 494 0
 405 02d0 75 41 16                		mov	#22, r1
 406 02d3 05 00 00 00             		bsr	_SWTC_Run
 407                             	.LVL30:
 408 02d7 03                      		.balign 2,3,5
 409                             	.L22:
 410                             	.LBE12:
 411                             	.LBE13:
 350:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 			LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b = EV_ON; /* pilotaggio EV*/
 412                             		.loc 1 350 0
 413 02d8 FB 72 00 00 00 00       		mov.L	#_EV_Pos, r7
 414 02de 58 77                   		movu.B	[r7], r7
 415 02e0 FB A2 00 00 00 00       		mov.L	#_LoadsReq_New, r10
 416 02e6 66 1C                   		mov	#1, r12
 417 02e8 FE 07 AC                		mov.B	r12, [r7,r10]
 418 02eb 2E 47                   		bra	.L18
 419                             	.L19:
 355:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		  if ( uP_LoadRestore_Data.init == FALSE )
 420                             		.loc 1 355 0
 421 02ed 61 0A                   		cmp	#0, r10
 422 02ef 21 59                   		bne	.L36
 423                             	.LBB14:
 424                             	.LBB15:
 495:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	}
 496:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 497:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 	return S_FALSE;
 498:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** }
 499:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /**/
 500:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 501:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 502:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** /**
 503:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** Aggiorna la quantità di acqua in vasca in base alla conversione del tempo di caricamento 
 504:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** appena applicato
 505:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 506:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \param [in]		
 507:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \return 		
 508:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 								 
 509:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \version		1.0.0
 510:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \date 			28/08/2008
 511:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** \author			Valeria Catani
 512:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 513:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** */
 514:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 515:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** static void LOR_waterInDW_timeBased_Update(void)
 516:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** {
 517:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** uint16_t timeElapsed_tmp;
 518:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** uint8_t loadedWater;
 519:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 520:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****   timeElapsed_tmp = (uP_LoadRestore_Data.timeAcc + (SWTC_TimeType)SWTC_GetElapsedTime((SWTC_Counter
 425                             		.loc 1 520 0
 426 02f1 DD 7B 06                		mov.W	12[r7], r11
 427 02f4 75 41 16                		mov	#22, r1
 428 02f7 05 00 00 00             		bsr	_SWTC_GetElapsedTime
 429                             	.LVL31:
 521:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 
 522:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****   loadedWater =  LOA_timeTOlev_Conv(timeElapsed_tmp); 
 430                             		.loc 1 522 0
 431 02fb 4B B1                   		add	r11, r1
 432                             	.LVL32:
 433 02fd 05 00 00 00             		bsr	_LOA_timeTOlev_Conv
 434                             	.LVL33:
 523:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****   
 524:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****   WaterInDW += loadedWater;		 /* aggiornamento acqua in vasca con la quantità caricata
 435                             		.loc 1 524 0
 436 0301 FB B2 00 00 00 00       		mov.L	#_WaterInDW, r11
 437 0307 CC BC                   		mov.B	[r11], r12
 438 0309 4B 1C                   		add	r1, r12
 439 030b C3 BC                   		mov.B	r12, [r11]
 525:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****                                   in base al tempo trascorso */
 526:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****   
 527:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****   TempCycle_Stats.loaded_water += loadedWater; /*AE Statistic */
 440                             		.loc 1 527 0
 441 030d FB B2 00 00 00 00       		mov.L	#_TempCycle_Stats, r11
 442 0313 06 49 B1 06             		add	12[r11].W, r1
 443                             	.LVL34:
 444 0317 D7 B1 06                		mov.W	r1, 12[r11]
 528:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****   cycle_loaded_water += GIWaterLoaded;
 445                             		.loc 1 528 0
 446 031a FB B2 00 00 00 00       		mov.L	#_cycle_loaded_water, r11
 447 0320 FB C2 00 00 00 00       		mov.L	#_GIWaterLoaded, r12
 448 0326 5C CE                   		movu.W	[r12], r14
 449 0328 06 88 BE                		add	[r11].L, r14
 450 032b E3 BE                   		mov.L	r14, [r11]
 451                             	.LBE15:
 452                             	.LBE14:
 362:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 				uP_LoadRestore_Data.init = TRUE;	 /* per eventuale restart con vuoto */
 453                             		.loc 1 362 0
 454 032d 3C 73 01                		mov.B	#1, 3[r7]
 455 0330 2E 18                   		bra	.L36
 456                             	.L18:
 372:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c ****    if (uP_LoadRestore_Data.status == LOAD_RESTORE_TRUE)
 457                             		.loc 1 372 0
 458 0332 FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
 459 0338 B0 7F                   		movu.B	1[r7], r7
 460 033a 61 37                   		cmp	#3, r7
 461 033c 3B 6A FD                		bne	.L37
 462 033f 03                      		.balign 2,3,2
 463                             	.L35:
 375:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		(void)SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
 464                             		.loc 1 375 0
 465 0340 75 41 23                		mov	#35, r1
 466 0343 05 00 00 00             		bsr	_SWTC_Stop
 467                             	.LVL35:
 468 0347 03                      		.balign 2,3,1
 469                             	.L36:
 377:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** 		return S_OK;
 470                             		.loc 1 377 0
 471 0348 66 01                   		mov	#0, r1
 472                             		.balign 2,3,1
 473                             	.L5:
 383:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\LoadRestore.c **** }
 474                             		.loc 1 383 0
 475 034a 5B 11                   		movu.B	r1, r1
 476 034c 3F 7C 08                		rtsd	#32, r7-r12
 477                             	.LFE0:
 533                             	.Letext0:
 534                             		.file 2 "C:\\Workspace\\FW_Inertia\\branch_indesit\\HAL\\HAL_General/StandardTypes.h"
 535                             		.file 3 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_SwTimersCounters/SwTimersCo
 536                             		.file 4 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_Library/LIB_Utilities.h"
 537                             		.file 5 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\General/CstmDefines.h"
 538                             		.file 6 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Application_Platform/APP_Types.h"
 539                             		.file 7 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_BusCOMM/BCP_General.h"
 540                             		.file 8 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\General/CstmTypes.h"
 541                             		.file 9 "C:\\Workspace\\FW_Inertia\\branch_indesit\\PlatformLibrary\\LIB_IOManager/OutputManagerEx
 542                             		.file 10 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\General/CstmGlobal.h"
 543                             		.file 11 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_BusCOMM/BCP_BusCommMng.h"
 544                             		.file 12 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Application_Platform/APP_Global.h"
 545                             		.file 13 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_PulseCounter/PM_PulseCount
 546                             		.file 14 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Application_Platform/APP_FuncLib.h"
 547                             		.file 15 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\Modules/Load.h"
 548                             		.file 16 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\Control/DW_Fault.h"
DEFINED SYMBOLS
                            *ABS*:00000000 LoadRestore.c
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:6      .text.LOR_init:00000000 _LOR_init
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:11     .text.LOR_init:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:31     .text.LOR_uP_LoadRestore_Exe:00000000 _LOR_uP_LoadRestore_Exe
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:35     .text.LOR_uP_LoadRestore_Exe:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:480    .debug_frame:00000000 .Lframe0
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:7      .text.LOR_init:00000000 .LFB1
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:32     .text.LOR_uP_LoadRestore_Exe:00000000 .LFB0
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:3132   .debug_abbrev:00000000 .Ldebug_abbrev0
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4185   .debug_str:00000357 .LASF277
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4337   .debug_str:0000088d .LASF278
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4055   .debug_ranges:00000000 .Ldebug_ranges0
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4075   .debug_line:00000000 .Ldebug_line0
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4109   .debug_str:00000106 .LASF0
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4203   .debug_str:00000419 .LASF2
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4453   .debug_str:00000d00 .LASF1
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4539   .debug_str:00000ff4 .LASF3
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4593   .debug_str:000011bb .LASF4
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4177   .debug_str:00000328 .LASF5
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4517   .debug_str:00000f14 .LASF6
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4521   .debug_str:00000f32 .LASF7
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4461   .debug_str:00000d38 .LASF8
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4209   .debug_str:00000457 .LASF9
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4363   .debug_str:000009ba .LASF10
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4331   .debug_str:0000086e .LASF11
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4541   .debug_str:00000ffd .LASF12
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4295   .debug_str:00000753 .LASF13
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4591   .debug_str:000011af .LASF14
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4263   .debug_str:00000622 .LASF15
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4157   .debug_str:000002a8 .LASF20
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4641   .debug_str:00001387 .LASF16
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4371   .debug_str:00000a13 .LASF17
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4475   .debug_str:00000db7 .LASF18
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4515   .debug_str:00000f0b .LASF19
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4429   .debug_str:00000c3b .LASF21
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4287   .debug_str:00000708 .LASF22
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4413   .debug_str:00000bb6 .LASF23
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4431   .debug_str:00000c4d .LASF24
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4305   .debug_str:000007a0 .LASF25
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4077   .debug_str:00000000 .LASF26
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4485   .debug_str:00000e0d .LASF27
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4253   .debug_str:000005cf .LASF28
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4633   .debug_str:00001339 .LASF29
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4221   .debug_str:000004be .LASF30
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4249   .debug_str:000005b7 .LASF32
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4575   .debug_str:00001137 .LASF31
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4317   .debug_str:000007e9 .LASF33
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4427   .debug_str:00000c1d .LASF34
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4107   .debug_str:000000f8 .LASF35
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4341   .debug_str:000008df .LASF196
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4491   .debug_str:00000e3f .LASF36
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4373   .debug_str:00000a1e .LASF37
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4149   .debug_str:00000266 .LASF38
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4289   .debug_str:0000070d .LASF39
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4445   .debug_str:00000cbe .LASF40
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4557   .debug_str:0000109b .LASF41
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4637   .debug_str:0000135e .LASF42
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4583   .debug_str:00001172 .LASF43
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4261   .debug_str:00000608 .LASF44
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4165   .debug_str:000002dc .LASF45
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4385   .debug_str:00000a98 .LASF46
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4171   .debug_str:00000303 .LASF47
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4117   .debug_str:0000013a .LASF48
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4375   .debug_str:00000a34 .LASF49
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4223   .debug_str:000004d1 .LASF50
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4081   .debug_str:0000001d .LASF51
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4227   .debug_str:00000506 .LASF52
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4145   .debug_str:0000023f .LASF53
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4507   .debug_str:00000ece .LASF54
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4561   .debug_str:000010cf .LASF55
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4573   .debug_str:0000112e .LASF56
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4565   .debug_str:000010eb .LASF57
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4639   .debug_str:00001373 .LASF58
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4321   .debug_str:0000081e .LASF59
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4471   .debug_str:00000d9f .LASF60
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4087   .debug_str:0000006a .LASF61
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4609   .debug_str:00001262 .LASF62
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4259   .debug_str:000005fc .LASF63
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4387   .debug_str:00000aa7 .LASF64
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4161   .debug_str:000002c7 .LASF65
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4389   .debug_str:00000abd .LASF66
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4487   .debug_str:00000e1f .LASF67
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4335   .debug_str:0000087d .LASF68
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4589   .debug_str:0000119a .LASF69
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4627   .debug_str:00001312 .LASF70
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4285   .debug_str:000006f5 .LASF71
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4173   .debug_str:0000030f .LASF72
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4273   .debug_str:00000676 .LASF73
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4153   .debug_str:00000289 .LASF74
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4479   .debug_str:00000dd9 .LASF75
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4327   .debug_str:0000084d .LASF76
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4411   .debug_str:00000b9f .LASF77
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4163   .debug_str:000002d3 .LASF78
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4333   .debug_str:00000876 .LASF79
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4155   .debug_str:0000029a .LASF80
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4511   .debug_str:00000ef1 .LASF81
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4381   .debug_str:00000a71 .LASF82
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4631   .debug_str:00001328 .LASF83
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4197   .debug_str:000003ec .LASF84
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4403   .debug_str:00000b5f .LASF85
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4231   .debug_str:00000522 .LASF86
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4299   .debug_str:00000764 .LASF87
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4349   .debug_str:00000927 .LASF88
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4457   .debug_str:00000d1d .LASF89
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4123   .debug_str:00000182 .LASF90
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4513   .debug_str:00000ef6 .LASF91
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4089   .debug_str:00000070 .LASF92
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4623   .debug_str:000012e7 .LASF93
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4133   .debug_str:000001da .LASF94
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4281   .debug_str:000006c2 .LASF95
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4625   .debug_str:00001300 .LASF96
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4255   .debug_str:000005dd .LASF97
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4093   .debug_str:0000008c .LASF98
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4447   .debug_str:00000cd3 .LASF99
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4139   .debug_str:0000021e .LASF100
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4571   .debug_str:0000111d .LASF101
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4645   .debug_str:00001394 .LASF102
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4079   .debug_str:00000013 .LASF103
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4119   .debug_str:0000014f .LASF104
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4619   .debug_str:000012bc .LASF105
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4629   .debug_str:0000131b .LASF106
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4509   .debug_str:00000edf .LASF107
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4159   .debug_str:000002af .LASF108
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4201   .debug_str:00000401 .LASF109
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4245   .debug_str:00000594 .LASF110
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4115   .debug_str:00000131 .LASF111
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4545   .debug_str:0000101d .LASF112
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4501   .debug_str:00000e8d .LASF117
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4529   .debug_str:00000f6a .LASF113
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4603   .debug_str:00001204 .LASF114
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4143   .debug_str:00000233 .LASF115
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4179   .debug_str:00000331 .LASF116
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4345   .debug_str:000008fb .LASF118
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4105   .debug_str:000000e3 .LASF119
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4367   .debug_str:000009e7 .LASF120
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4243   .debug_str:0000058a .LASF121
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4417   .debug_str:00000bce .LASF122
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4355   .debug_str:00000969 .LASF123
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4473   .debug_str:00000da5 .LASF124
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4449   .debug_str:00000cde .LASF125
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4459   .debug_str:00000d30 .LASF126
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4141   .debug_str:0000022e .LASF127
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4095   .debug_str:000000a3 .LASF128
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4235   .debug_str:00000542 .LASF129
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4099   .debug_str:000000c0 .LASF130
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4463   .debug_str:00000d41 .LASF131
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4647   .debug_str:000013af .LASF132
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4361   .debug_str:000009ab .LASF133
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4497   .debug_str:00000e6d .LASF134
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4323   .debug_str:0000082c .LASF135
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4489   .debug_str:00000e37 .LASF136
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4103   .debug_str:000000db .LASF137
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4101   .debug_str:000000c6 .LASF138
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4421   .debug_str:00000bdf .LASF139
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4503   .debug_str:00000eb8 .LASF140
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4393   .debug_str:00000aea .LASF141
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4607   .debug_str:0000124a .LASF142
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4443   .debug_str:00000cae .LASF143
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4359   .debug_str:0000098b .LASF144
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4237   .debug_str:0000054c .LASF145
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4199   .debug_str:000003f8 .LASF146
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4217   .debug_str:000004a4 .LASF147
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4169   .debug_str:000002f6 .LASF148
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4433   .debug_str:00000c5f .LASF149
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4397   .debug_str:00000b18 .LASF150
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4399   .debug_str:00000b2f .LASF151
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4581   .debug_str:00001168 .LASF152
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4329   .debug_str:0000085e .LASF153
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4377   .debug_str:00000a4f .LASF154
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4451   .debug_str:00000cf8 .LASF155
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4523   .debug_str:00000f3a .LASF156
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4357   .debug_str:00000983 .LASF157
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4531   .debug_str:00000f93 .LASF158
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4569   .debug_str:0000110f .LASF159
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4189   .debug_str:0000039a .LASF160
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4343   .debug_str:000008f1 .LASF161
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4181   .debug_str:0000033b .LASF162
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4469   .debug_str:00000d88 .LASF163
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4215   .debug_str:0000049e .LASF164
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4543   .debug_str:0000100b .LASF165
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4351   .debug_str:0000093d .LASF166
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4193   .debug_str:000003c4 .LASF167
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4137   .debug_str:0000020f .LASF168
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4611   .debug_str:00001272 .LASF169
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4339   .debug_str:000008d2 .LASF170
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4265   .debug_str:00000629 .LASF171
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4599   .debug_str:000011e4 .LASF172
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4293   .debug_str:00000747 .LASF173
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4183   .debug_str:00000347 .LASF174
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4267   .debug_str:0000063b .LASF175
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4419   .debug_str:00000bd6 .LASF176
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4379   .debug_str:00000a60 .LASF177
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4643   .debug_str:0000138c .LASF178
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4547   .debug_str:0000102c .LASF179
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4247   .debug_str:000005a8 .LASF180
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4219   .debug_str:000004b2 .LASF181
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4587   .debug_str:00001190 .LASF182
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4563   .debug_str:000010db .LASF183
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4605   .debug_str:0000122e .LASF184
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4319   .debug_str:00000803 .LASF185
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4455   .debug_str:00000d0a .LASF186
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4495   .debug_str:00000e61 .LASF187
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4167   .debug_str:000002eb .LASF188
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4551   .debug_str:00001054 .LASF189
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4493   .debug_str:00000e54 .LASF190
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4439   .debug_str:00000c98 .LASF191
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4579   .debug_str:0000115a .LASF192
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4635   .debug_str:0000134c .LASF193
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4441   .debug_str:00000ca7 .LASF194
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4595   .debug_str:000011ce .LASF195
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4617   .debug_str:000012ae .LASF197
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4423   .debug_str:00000bf0 .LASF198
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4301   .debug_str:0000076c .LASF199
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4303   .debug_str:00000786 .LASF200
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4481   .debug_str:00000dea .LASF201
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4555   .debug_str:00001077 .LASF202
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4275   .debug_str:00000681 .LASF203
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4527   .debug_str:00000f55 .LASF204
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4195   .debug_str:000003ca .LASF205
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4549   .debug_str:00001038 .LASF206
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4621   .debug_str:000012c7 .LASF207
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4271   .debug_str:0000065b .LASF208
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4127   .debug_str:000001a4 .LASF209
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4233   .debug_str:00000527 .LASF210
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4277   .debug_str:00000695 .LASF211
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4187   .debug_str:0000037d .LASF212
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4211   .debug_str:0000046e .LASF213
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4291   .debug_str:00000722 .LASF214
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4465   .debug_str:00000d5d .LASF215
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4437   .debug_str:00000c7f .LASF216
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4535   .debug_str:00000fb6 .LASF217
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4283   .debug_str:000006d6 .LASF218
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4559   .debug_str:000010b1 .LASF219
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4395   .debug_str:00000b00 .LASF220
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4257   .debug_str:000005e4 .LASF221
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4415   .debug_str:00000bbe .LASF222
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4147   .debug_str:0000024e .LASF223
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4601   .debug_str:000011ee .LASF224
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4269   .debug_str:00000643 .LASF225
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4425   .debug_str:00000c06 .LASF226
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4365   .debug_str:000009c8 .LASF227
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4191   .debug_str:000003a8 .LASF228
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4213   .debug_str:00000488 .LASF229
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4131   .debug_str:000001c4 .LASF230
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4369   .debug_str:000009fe .LASF231
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4083   .debug_str:0000002c .LASF232
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4225   .debug_str:000004e2 .LASF233
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4135   .debug_str:000001ed .LASF234
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4401   .debug_str:00000b3c .LASF235
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4537   .debug_str:00000fd6 .LASF236
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4121   .debug_str:00000165 .LASF237
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4407   .debug_str:00000b77 .LASF238
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4085   .debug_str:00000043 .LASF239
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4577   .debug_str:00001151 .LASF279
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:26     .text.LOR_init:0000002c .LFE1
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:25     .text.LOR_init:0000002c .LVL0
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4325   .debug_str:0000083b .LASF242
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4499   .debug_str:00000e80 .LASF240
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4309   .debug_str:000007b3 .LASF280
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4251   .debug_str:000005bf .LASF241
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4205   .debug_str:00000421 .LASF243
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4519   .debug_str:00000f26 .LASF244
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4207   .debug_str:00000440 .LASF281
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:477    .text.LOR_uP_LoadRestore_Exe:0000034f .LFE0
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:3903   .debug_loc:00000000 .LLST0
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4597   .debug_str:000011d6 .LASF245
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:3921   .debug_loc:0000002c .LLST1
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4151   .debug_str:0000027c .LASF246
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:3957   .debug_loc:0000007f .LLST2
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4533   .debug_str:00000f9b .LASF282
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:323    .text.LOR_uP_LoadRestore_Exe:0000024a .LBB8
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:343    .text.LOR_uP_LoadRestore_Exe:0000026a .LBE8
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:324    .text.LOR_uP_LoadRestore_Exe:0000024a .LBB9
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:342    .text.LOR_uP_LoadRestore_Exe:0000026a .LBE9
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:3993   .debug_loc:000000d2 .LLST3
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:332    .text.LOR_uP_LoadRestore_Exe:00000259 .LVL23
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:341    .text.LOR_uP_LoadRestore_Exe:0000026a .LVL24
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:348    .text.LOR_uP_LoadRestore_Exe:0000026e .LBB10
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4009   .debug_loc:000000ee .LLST4
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:355    .text.LOR_uP_LoadRestore_Exe:0000027e .LVL25
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:368    .text.LOR_uP_LoadRestore_Exe:00000290 .LVL27
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:390    .text.LOR_uP_LoadRestore_Exe:000002b8 .LVL28
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:401    .text.LOR_uP_LoadRestore_Exe:000002cf .LVL29
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:407    .text.LOR_uP_LoadRestore_Exe:000002d7 .LVL30
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:423    .text.LOR_uP_LoadRestore_Exe:000002f1 .LBB14
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:452    .text.LOR_uP_LoadRestore_Exe:0000032d .LBE14
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:424    .text.LOR_uP_LoadRestore_Exe:000002f1 .LBB15
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:451    .text.LOR_uP_LoadRestore_Exe:0000032d .LBE15
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4021   .debug_loc:00000106 .LLST5
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4033   .debug_loc:0000011e .LLST6
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:429    .text.LOR_uP_LoadRestore_Exe:000002fb .LVL31
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:434    .text.LOR_uP_LoadRestore_Exe:00000301 .LVL33
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:58     .text.LOR_uP_LoadRestore_Exe:0000002b .LVL3
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:62     .text.LOR_uP_LoadRestore_Exe:00000032 .LVL4
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:66     .text.LOR_uP_LoadRestore_Exe:00000039 .LVL5
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:91     .text.LOR_uP_LoadRestore_Exe:0000006c .LVL8
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:108    .text.LOR_uP_LoadRestore_Exe:0000008e .LVL9
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:113    .text.LOR_uP_LoadRestore_Exe:00000095 .LVL10
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:117    .text.LOR_uP_LoadRestore_Exe:0000009b .LVL11
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:134    .text.LOR_uP_LoadRestore_Exe:000000b1 .LVL14
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:151    .text.LOR_uP_LoadRestore_Exe:000000d4 .LVL15
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:194    .text.LOR_uP_LoadRestore_Exe:00000130 .LVL16
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:202    .text.LOR_uP_LoadRestore_Exe:00000145 .LVL17
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:226    .text.LOR_uP_LoadRestore_Exe:00000180 .LVL18
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:264    .text.LOR_uP_LoadRestore_Exe:000001d8 .LVL19
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:275    .text.LOR_uP_LoadRestore_Exe:000001ea .LVL20
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:467    .text.LOR_uP_LoadRestore_Exe:00000347 .LVL35
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4585   .debug_str:00001188 .LASF247
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4113   .debug_str:00000120 .LASF248
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4615   .debug_str:0000129c .LASF249
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4435   .debug_str:00000c6c .LASF250
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4405   .debug_str:00000b6c .LASF251
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4229   .debug_str:00000514 .LASF252
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4129   .debug_str:000001bc .LASF253
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4313   .debug_str:000007d5 .LASF254
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4467   .debug_str:00000d77 .LASF255
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4175   .debug_str:00000321 .LASF256
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4111   .debug_str:00000113 .LASF257
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4307   .debug_str:000007a5 .LASF258
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4477   .debug_str:00000dc5 .LASF259
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4297   .debug_str:0000075a .LASF260
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4097   .debug_str:000000b0 .LASF261
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4525   .debug_str:00000f48 .LASF262
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4315   .debug_str:000007e1 .LASF263
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4553   .debug_str:0000105e .LASF264
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4279   .debug_str:000006af .LASF266
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4125   .debug_str:00000193 .LASF265
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4347   .debug_str:00000913 .LASF267
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4091   .debug_str:00000082 .LASF268
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4409   .debug_str:00000b90 .LASF269
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4239   .debug_str:0000055d .LASF270
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4505   .debug_str:00000ec5 .LASF271
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4383   .debug_str:00000a85 .LASF272
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4311   .debug_str:000007c9 .LASF273
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4241   .debug_str:0000056c .LASF274
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4353   .debug_str:0000094e .LASF275
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4567   .debug_str:000010f1 .LASF276
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4391   .debug_str:00000acf .LASF283
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4613   .debug_str:0000127c .LASF284
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:4483   .debug_str:00000dfd .LASF285
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:36     .text.LOR_uP_LoadRestore_Exe:00000002 .LCFI0
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:38     .text.LOR_uP_LoadRestore_Exe:00000004 .LCFI1
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:34     .text.LOR_uP_LoadRestore_Exe:00000000 .LVL1
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:56     .text.LOR_uP_LoadRestore_Exe:00000027 .LVL2
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:71     .text.LOR_uP_LoadRestore_Exe:00000044 .LVL6
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:88     .text.LOR_uP_LoadRestore_Exe:00000066 .LVL7
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:128    .text.LOR_uP_LoadRestore_Exe:000000ab .LVL12
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:132    .text.LOR_uP_LoadRestore_Exe:000000ad .LVL13
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:328    .text.LOR_uP_LoadRestore_Exe:00000252 .LVL22
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:357    .text.LOR_uP_LoadRestore_Exe:00000280 .LVL26
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:432    .text.LOR_uP_LoadRestore_Exe:000002fd .LVL32
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:443    .text.LOR_uP_LoadRestore_Exe:00000317 .LVL34
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:550    .debug_info:00000000 .Ldebug_info0
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:370    .text.LOR_uP_LoadRestore_Exe:00000290 .LBE10
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:386    .text.LOR_uP_LoadRestore_Exe:000002b4 .LBB13
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:411    .text.LOR_uP_LoadRestore_Exe:000002d8 .LBE13
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:349    .text.LOR_uP_LoadRestore_Exe:0000026e .LBB11
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:369    .text.LOR_uP_LoadRestore_Exe:00000290 .LBE11
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:387    .text.LOR_uP_LoadRestore_Exe:000002b4 .LBB12
C:\Users\Andrea\AppData\Local\Temp\ccedMNGf.s:410    .text.LOR_uP_LoadRestore_Exe:000002d8 .LBE12

UNDEFINED SYMBOLS
_GIWaterLoaded
_PulseLoaded
_uP_LoadRestore_Data
_WaterInDW
_PM_PulseCounter_SetCount
_Interpreter_Data
_uPDoorStatus
_SWTC_Stop
_GIValid
_BasicLoader
_TempCycle_Stats
_PM_PulseCounter_Reset_Warning
_FLT_CheckPulseCounterStill
_Flags_1
_SFT_Timeout_4Loadrestore_Mgmt
_PM_PulseCounter_GetWarning
_GICriteria
_MachineStatistics
_Tab_LoadFault
_SWTC_SetSValue
_cycle_loaded_water
_FLT_PulseCounterCheckDelay_Mgmt
_FlowMeterDivider
_EV_Pos
_LoadsReq_New
_FLT_warningSave
_LOA_levTOtime_Conv
_Set_SmallCounter
_SWTC_GetElapsedTime
_SWTC_IsExpired
_SWTC_Run
_LOA_timeTOlev_Conv

   1                             		.file	"PM_ProfileLoadsPartialization.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.DIM_Scheduler,"ax",@progbits
   5                             		.global	_DIM_Scheduler
   7                             	_DIM_Scheduler:
   8                             	.LFB6:
   9                             		.file 1 "C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization/PM_Pr
   1:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /*
   2:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** Copyright (c) 2004-2005, Indesit Company, I.D.D..
   3:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** Tutti i diritti sono riservati. All rights reserved.
   4:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** */
   5:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /**
   6:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \defgroup	PM_ProfileLoadsPartialization  
   7:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** @{
   8:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n			Implementation of the Product Library to achieve the aim
   9:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n			This module allows to pilot A.C. loads with partialized wave
  10:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n      and, consequently, modulated power
  11:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n
  12:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \par    Configuration:
  13:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n
  14:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n\li	  A_CFG
  15:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n
  16:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \par    Exported Functions:
  17:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n
  18:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n\li
  19:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n\li
  20:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n  
  21:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** @}
  22:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \ingroup   	ProductM
  23:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** */
  24:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /**
  25:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n
  26:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \par      PM_ProfileLoadsPartialization.c
  27:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n        Implementation of all functions necessary to achieve the aim.
  28:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n
  29:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \file     PM_ProfileLoadsPartialization.c
  30:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \ingroup  ProfileLoadsPartialization
  31:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \date     Oct 25, 2011
  32:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \version  01.00.00
  33:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \author	  Leonardo Sparti
  34:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n
  35:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n
  36:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \par\b	History:
  37:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n
  38:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n 		01.00.00
  39:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n		Oct 25, 2011
  40:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n		Leonardo Sparti
  41:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n		changes
  42:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n 			Creation
  43:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n
  44:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n
  45:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** */
  46:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
  47:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
  48:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
  49:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* ******** */
  50:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* Includes */
  51:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* ******** */
  52:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
  53:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #include "MainInterface.h"
  54:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #include "OutputManagerExp.h"
  55:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #include "PM_ProfileLoadsPartialization.h"
  56:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #include "PM_ProfileLoadsPartializationExp.h"
  57:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #include "OCTPM_drv.h"
  58:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #include "OCIRQ_drv.h"
  59:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #include "DigitalOutputs.h"
  60:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #include "LIB_Trace.h"
  61:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
  62:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* ****************** */
  63:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* Defines and Macros */
  64:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* ****************** */
  65:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #if defined(CONFIG_PM_PLP_DEBUG_ISR_TRACE_PIN) && defined(CONFIG_PM_PLP_DEBUG_SCH_TRACE_PIN)
  66:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #if CONFIG_PM_PLP_DEBUG_ISR_TRACE_PIN == CONFIG_PM_PLP_DEBUG_SCH_TRACE_PIN
  67:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #error "CONFIG_PM_PLP_DEBUG_ISR_TRACE_PIN has the same value of CONFIG_PM_PLP_DEBUG_SCH_TRACE_PIN"
  68:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #endif
  69:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #endif
  70:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
  71:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* *************************** */
  72:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* Typedef, Structs and Unions */
  73:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* *************************** */
  74:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /*partialization value [us]*/
  75:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** typedef uint16_t	PLP_PartializationValType;
  76:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
  77:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
  78:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* Loads Structure */
  79:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #if !defined(CONFIG_PM_PLP_NORMAL_SUPPORT)
  80:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* For the only Dimmer, a simpler structure is sufficient */
  81:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** typedef struct PLP_LStruct {
  82:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
  83:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	uint8_t   pin;				    /* Pin */
  84:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	IO_HwTimerType* ptractualoc[2];		
  85:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	
  86:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	uint8_t  activated;
  87:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	uint8_t  toactivate;
  88:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     
  89:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	IO_HwTimerType  OcValue[2];
  90:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
  91:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	uint16_t* p_nextprof; 	  /* Pointer to the next profile of the table */
  92:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	
  93:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	struct PLP_LStruct *pnxtld[2];
  94:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	
  95:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** } PLP_LType;
  96:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
  97:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #else  /* CONFIG_PM_PLP_NORMAL_SUPPORT defined */
  98:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
  99:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* PLP load struct */
 100:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** typedef struct PLP_LStruct {
 101:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 102:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	uint8_t   pin;					/* Pin */
 103:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	uint8_t   stato;				/* Load Status */
 104:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	uint8_t   repetition;			/* The profile has to be repeated or not */
 105:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	uint8_t   counter;        
 106:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	uint8_t   profilelen;			/* Length of the profile in halfwaves */
 107:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	PLP_PartializationValType* ptractualprof;		/* Pointer to the actual profile */
 108:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	PLP_PartializationValType* ptractualoc[2];		/* */
 109:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	uint8_t   pylottype;			/* PilotType */
 110:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	
 111:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     uint8_t  activated;
 112:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     uint8_t  toactivate;
 113:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     
 114:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     PLP_PartializationValType  OcValue[2];
 115:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     int16_t  Comp;
 116:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 117:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     uint8_t  sync;             		/* 1: with negative halfwave; */
 118:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     								/* 0: with negative halfwave; */
 119:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     uint8_t  ToCompensate;
 120:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	uint16_t* p_nextprof;			/* Pointer to the next profile of the table */
 121:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	
 122:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	struct PLP_LStruct *pnxtld[2];
 123:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	
 124:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** } PLP_LType;
 125:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 126:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #endif  /* !defined(CONFIG_PM_PLP_NORMAL_SUPPORT) */
 127:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 128:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 129:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* Scheduler Structure */
 130:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** typedef struct PLP_SStruct
 131:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
 132:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	uint8_t  state;
 133:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	struct PLP_LStruct *pfstld[2];
 134:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	struct PLP_LStruct *pcurrld;
 135:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	
 136:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** } PLP_SType;
 137:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 138:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 139:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* ********* */
 140:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* Variables */
 141:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* ********* */
 142:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #if defined(CONFIG_PM_PLP_EMULATE_PROFILE) && defined(CONFIG_PM_PLP_DEBUG)
 143:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** PLP_PartializationValType Profilerus[4][4]=
 144:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
 145:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	{(800), (100), (2000), (5000)},
 146:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	{(300), (1500), (3500), (7000)},
 147:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	{(800), (2000), (1000), (5000)},
 148:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	{(300), (1500), (3500), (7000)}
 149:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** };
 150:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #endif
 151:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 152:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** IO_OCU_CfgType OcuPLP_cfg =
 153:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
 154:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	CONFIG_PM_PLP_TMR_CH_ID,	/* timer ch ID*/
 155:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	TMR_CH_INV
 156:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** };
 157:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 158:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** PLP_SType PLPScheduler;
 159:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 160:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** PLP_LType PLPVar[CONFIG_PM_PLP_MAX_ITEMS_NUMBER];
 161:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 162:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** uint8_t PLPLoads=0;
 163:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 164:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 165:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** static Main_SequencerActivityType Act_PLP_Scheduler;
 166:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 167:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #if defined(CONFIG_PM_PLP_DIMMER_SUPPORT)
 168:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 169:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* Value of activation point of partialization for dimmer loads */
 170:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** uint16_t dimReg[CONFIG_PM_PLP_MAX_ITEMS_NUMBER];
 171:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* Step of the Dimmer */
 172:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** uint8_t dimStep[CONFIG_PM_PLP_MAX_ITEMS_NUMBER];
 173:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 174:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* Status of a dimmer load */
 175:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** uint8_t OnOffStatus[CONFIG_PM_PLP_MAX_ITEMS_NUMBER];
 176:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 177:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** uint16_t dimMax=DIM_MAX;    /* Maximum value of partialization */
 178:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** uint16_t dimMin=DIM_OFF;    /* Minimum value of partialization */
 179:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 180:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #endif /* defined(CONFIG_PM_PLP_DIMMER_SUPPORT) */
 181:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 182:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 183:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 184:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* ******************* */
 185:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* Functions Prototype */
 186:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* ******************* */
 187:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** static IO_ErrorType PLP_OCU_Event(IO_NotificationType notifVal, IO_ChannelType chid, IO_ErrorType v
 188:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** static uint8_t PLP_LoadsAtZC(LIB_ZcEdgeType edge);
 189:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** static void PLP_SetOC(LIB_ZcEdgeType isredge);
 190:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** static void PLP_DriverPins(LIB_ZcEdgeType edge);
 191:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** static void PLP_turnOff(void);
 192:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** static void PM_PLP_InitActivity(void);
 193:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** static void Init_PLP_DrvResources(void);
 194:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* *************** */
 195:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* Function Bodies */
 196:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* *************** */
 197:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 198:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /**
 199:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** This function adds a load with a specific type in order to be
 200:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** able to manage different types of loads
 201:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n
 202:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 203:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	uint8_t pin      ->   pin module
 204:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	uint8_t type     ->   load id
 205:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 206:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 207:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \return 	
 208:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 209:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \retval
 210:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****        
 211:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 212:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \author   Leonardo Sparti
 213:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \date     25/10/2011
 214:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \version  1.0.0
 215:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 216:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \note		\par \b Nota 1:
 217:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			documentation by Leonardo Sparti
 218:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 219:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** */
 220:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** void PM_PLP_InsertLoad(uint8_t pin, uint8_t type)
 221:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
 222:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     PLP_LType *pPLPVar;
 223:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 224:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 225:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     if(PLPLoads >= CONFIG_PM_PLP_MAX_ITEMS_NUMBER)
 226:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     {
 227:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     	/* nothing to do */
 228:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         return ;
 229:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     }
 230:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     
 231:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     pPLPVar = &PLPVar[PLPLoads];
 232:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     
 233:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     if(pPLPVar->pin==0xFF)
 234:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     {
 235:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         pPLPVar->pin=pin;
 236:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         
 237:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #if defined(CONFIG_PM_PLP_NORMAL_SUPPORT)
 238:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         pPLPVar->pylottype=type;
 239:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #else
 240:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         (void)type;
 241:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #endif
 242:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         
 243:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         PLPLoads++;  /* inc the index */
 244:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         return;
 245:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     }
 246:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 247:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** }
 248:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 249:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 250:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #if defined(CONFIG_PM_PLP_NORMAL_SUPPORT)
 251:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /**
 252:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** Set Load Function
 253:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n
 254:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 255:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	uint8_t on          ->   on/off status
 256:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	uint8_t pin         ->   pin module
 257:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	uint16_t* pProfile  ->   profile pnt
 258:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	uint8_t len         ->   profile length
 259:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	uint8_t repeat      ->   repetition (0 = infinite)
 260:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	uint8_t cfg         ->   configuration (sync and compensation)
 261:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 262:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 263:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \return 	
 264:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 265:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \retval   
 266:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****           
 267:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 268:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \author   Leonardo Sparti
 269:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \date     25/10/2011
 270:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \version  1.0.0
 271:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 272:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \note		\par \b Nota 1:
 273:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			documentation by Leonardo Sparti
 274:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 275:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** */
 276:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** void PM_PLP_SetLoad(uint8_t on, uint8_t pin, PLP_PartializationValType* pProfile, uint8_t len, uint
 277:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
 278:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     uint8_t i=0;
 279:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     bool_t found = FALSE;
 280:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     PLP_LType *pPLPVar;
 281:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 282:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	/* find the desired pin to set */
 283:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	while((!found) && (i<PLPLoads))
 284:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	{
 285:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		pPLPVar = &PLPVar[i];
 286:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 287:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		if(pPLPVar->pin == pin)
 288:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		{
 289:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			found=TRUE;
 290:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 291:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			switch(pPLPVar->pylottype)
 292:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			{
 293:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #if defined(CONFIG_PM_PLP_DIMMER_SUPPORT)
 294:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			case DIM_LAMP_L:
 295:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				/* do nothing */
 296:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				break;
 297:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #endif /* defined(CONFIG_PM_PLP_DIMMER_SUPPORT)*/
 298:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 299:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			default:
 300:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				/*
 301:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				 * TODO : check why this has been commented
 302:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				//if load is already activated generate an error
 303:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				if(PLPVar[i].activated)
 304:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					return;
 305:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				*/
 306:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				if(on)
 307:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				{
 308:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					/* if pnext profile is empty concatenate profile */
 309:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					if((pPLPVar->p_nextprof!=0))
 310:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					{
 311:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 						return ;
 312:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					}
 313:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 314:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					/* insert: */
 315:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 316:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					pPLPVar->p_nextprof=pProfile;           /* ptr to next profile */
 317:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					pPLPVar->repetition=repeat;             /* repetition */
 318:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					pPLPVar->profilelen=len;                /* profile length */
 319:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					pPLPVar->sync=(uint8_t)(cfg&1);         /* configuration: sync & compensation */
 320:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					pPLPVar->ToCompensate=(uint8_t)(cfg&2);
 321:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					pPLPVar->toactivate=1;                  /* book activation! */
 322:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 323:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				}
 324:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				else
 325:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				{
 326:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					pPLPVar->activated=0;                   /* turn off load (without profile completion) */
 327:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				}
 328:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			}
 329:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		}
 330:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		i++;
 331:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	}
 332:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** }
 333:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #endif /*ENABLE_SIMPLE_PLP is defined */
 334:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 335:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 336:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #if defined(CONFIG_PM_PLP_DIMMER_SUPPORT)
 337:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /**
 338:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** Set Load for a dimmer pilot type Function
 339:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n
 340:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 341:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	uint8_t on          ->   on/off status
 342:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	uint8_t config      ->   configuration nibble
 343:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	uint8_t pin         ->   pin module
 344:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	uint8_t stepPart    ->   step of partialization
 345:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 346:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	uint16_t maxPart    ->   max partialization value
 347:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	uint16_t minPart    ->   min partialization value
 348:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 349:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 350:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \return
 351:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 352:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \retval
 353:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 354:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 355:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \author   Leonardo Sparti
 356:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \date     25/10/2011
 357:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \version  1.0.0
 358:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 359:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \note		\par \b Nota 1:
 360:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			documentation by Leonardo Sparti
 361:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 362:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** */
 363:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** void PM_DIM_SetLoad(uint8_t on, uint8_t config, uint8_t pin, const uint8_t* stepPart)
 364:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
 365:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****   uint8_t i;
 366:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****   PLP_LType *pPLPVar;
 367:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****   
 368:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****   static uint8_t OLD_on = 0;
 369:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****   
 370:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****   
 371:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /* 
 372:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****  // These settings could allow to calibrate dimMax and dimMin
 373:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****  // value by editor but, at moment, they shall not be used
 374:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****    dimMax = DIM_OFF-(*maxPart)+PLP_DRIVELBOUNDtck;
 375:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****    dimMin = DIM_OFF-(*minPart);
 376:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** */
 377:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 378:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #if !defined(CONFIG_PM_PLP_SLIDER_SUPPORT)
 379:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 380:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****   dimMax = DIM_MAX;
 381:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****   dimMin = DIM_OFF;
 382:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 383:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #else  /* Slider case */
 384:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 385:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	for(i=0;i<PLPLoads;i++)
 386:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	{
 387:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		pPLPVar = &PLPVar[i];
 388:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 389:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		if(pPLPVar->pin==pin)
 390:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		{
 391:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			if(on > OLD_on)
 392:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			{
 393:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				dimMax = (uint16_t)( SLID_OFF - (SLID_STEP*on) );
 394:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				OLD_on = on;
 395:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			}
 396:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			else if(on < OLD_on)
 397:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			{
 398:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				dimMin = (uint16_t)( SLID_OFF - (SLID_STEP*on) );
 399:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				OLD_on = on;
 400:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				on=0;
 401:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			}
 402:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			else  /* on = OLD_on */
 403:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			{
 404:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				if( OnOffStatus[i] == 0 )
 405:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				{
 406:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					on=0;
 407:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				}
 408:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			}
 409:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		}
 410:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	}
 411:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****   
 412:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #endif  /* !defined(SLIDER_OPTION) */
 413:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****   
 414:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****   
 415:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	/* find the desired pin to set */
 416:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	for(i=0;i<PLPLoads;i++)
 417:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	{
 418:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	  
 419:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		pPLPVar = &PLPVar[i];
 420:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	
 421:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	
 422:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #if defined(CONFIG_PM_PLP_NORMAL_SUPPORT)
 423:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		if(pPLPVar->pylottype != DIM_LAMP_L)
 424:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		{
 425:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			continue;
 426:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		}
 427:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #endif
 428:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		if(dimReg[i] == 0xFFFF)                /* Initial condition */
 429:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		{
 430:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			dimReg[i] = dimMin;                  /* Variable initialization at application startup */
 431:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		}
 432:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	
 433:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		if(pPLPVar->pin==pin)
 434:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		{
 435:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			if (!config)
 436:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			{
 437:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				dimReg[i] = (uint16_t)( (on)?DIM_MAX:DIM_OFF );  /* config=0 -> Dimmer disabled, ON-OFF command
 438:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			}
 439:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 440:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 441:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #if defined(CONFIG_PM_PLP_SLIDER_SUPPORT)
 442:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		  dimStep[i] = 10; /* Slider requires a fixed step */
 443:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		  (void)*stepPart;
 444:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #else
 445:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		  /* Acquisition of setting values */
 446:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		  dimStep[i] = *stepPart;
 447:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #endif  /* SLIDER_OPTION */
 448:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 449:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 450:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		  if ((dimReg[i] == DIM_OFF) && (!on))
 451:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		  {
 452:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			 pPLPVar->activated=0;              /* turn off load (without profile completion) */
 453:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		  }
 454:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		  else
 455:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		  {
 456:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			 pPLPVar->p_nextprof=&dimReg[i];    /* ptr to next profile */
 457:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			 pPLPVar->toactivate=1;             /* book activation */
 458:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		  }
 459:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 460:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		  OnOffStatus[i] = (uint8_t)( (on)?1:0 );    /* notify ON or OFF status */
 461:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		  return;
 462:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		}
 463:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	} /* end for loop */
 464:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** }
 465:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #endif /* defined(CONFIG_PM_PLP_NORMAL_SUPPORT) */
 466:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 467:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 468:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /**
 469:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** Check on warm reset if is necessary to enable the ISR of the channel
 470:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n
 471:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 472:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	
 473:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 474:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 475:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \return
 476:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 477:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \retval
 478:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 479:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 480:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \author   Leonardo Sparti
 481:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \date     25/10/2011
 482:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \version  1.0.0
 483:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 484:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \note		\par \b Nota 1:
 485:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			documentation by Leonardo Sparti
 486:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 487:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** */
 488:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** void PM_PLP_Init_OnWarmReset(void)
 489:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
 490:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	Init_PLP_DrvResources();
 491:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	
 492:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	if(PM_PLP_LoadsToDrive() == TRUE)
 493:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	{
 494:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		(void)OCOCU_EnableISR(CONFIG_PM_PLP_TMR_CH_ID, TMR_CH_ISR_ENABLE, PLP_OCU_Event);
 495:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	}
 496:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	PM_PLP_InitActivity();
 497:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** }
 498:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 499:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 500:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /**
 501:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** Inits Loads Structure and timer cfg
 502:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n
 503:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 504:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	
 505:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 506:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 507:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \return
 508:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 509:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \retval
 510:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 511:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 512:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \author   Leonardo Sparti
 513:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \date     25/10/2011
 514:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \version  1.0.0
 515:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 516:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \note		\par \b Nota 1:
 517:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			documentation by Leonardo Sparti
 518:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 519:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** */
 520:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** void PM_PLP_Init(void)
 521:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
 522:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     uint8_t i;
 523:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 524:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     Init_PLP_DrvResources();
 525:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 526:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     /*initialize global module structure*/
 527:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     for(i=0;i<CONFIG_PM_PLP_MAX_ITEMS_NUMBER;i++)
 528:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     {
 529:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		PLPVar[i].pin=0xFF;
 530:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 531:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		PLPVar[i].pnxtld[0]=(PLP_LType*)NULL;
 532:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		PLPVar[i].pnxtld[1]=(PLP_LType*)NULL;
 533:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     	
 534:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		/*Dimmer-specific initialization*/
 535:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #if defined(CONFIG_PM_PLP_DIMMER_SUPPORT)
 536:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			/* Dimmer variables initialization */
 537:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			dimReg[i]=0xFFFF;
 538:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			dimStep[i]=0;
 539:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			OnOffStatus[i]=0;
 540:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #endif
 541:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     }
 542:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 543:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     /* Sequencer activity configuration:
 544:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     Invoke PLP at first event
 545:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     */
 546:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     PM_PLP_InitActivity();
 547:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 548:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #if defined(CONFIG_PM_PLP_EMULATE_PROFILE) && defined(CONFIG_PM_PLP_DEBUG)
 549:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     /*
 550:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     Insert a dummy load
 551:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     */
 552:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     PM_PLP_InsertLoad(0x12, DIGITAL_L);
 553:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     /* dummy pin */
 554:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     PM_PLP_SetLoad(TRUE, 0x12, &Profilerus[0][2], 2, 0, 0);
 555:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #endif /* defined(CONFIG_PM_PLP_EMULATE_PROFILE) && defined(CONFIG_PM_PLP_DEBUG)*/
 556:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** }
 557:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 558:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 559:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /**
 560:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 561:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****  */
 562:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** static void PM_PLP_InitActivity(void)
 563:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
 564:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #if defined(CONFIG_PM_PLP_NORMAL_SUPPORT)
 565:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     Main_AddSequencerActivity ( &Act_PLP_Scheduler, &PM_PLP_Scheduler );
 566:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #else
 567:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     Main_AddSequencerActivity ( &Act_PLP_Scheduler, &DIM_Scheduler );
 568:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #endif
 569:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     Act_PLP_Scheduler.profile=1;
 570:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** }
 571:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 572:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 573:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /**
 574:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** Detect Loads to be driven
 575:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n
 576:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 577:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	
 578:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 579:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 580:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \return
 581:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 582:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \retval      TRUE        there are loads to drive
 583:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****              FALSE       no loads to drive
 584:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 585:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 586:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \author   Leonardo Sparti
 587:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \date     25/10/2011
 588:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \version  1.0.0
 589:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 590:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \note		\par \b Nota 1:
 591:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			documentation by Leonardo Sparti
 592:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 593:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** */
 594:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** uint8_t PM_PLP_LoadsToDrive(void)
 595:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
 596:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	uint8_t i;
 597:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	
 598:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	
 599:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	for(i=0; i<PLPLoads; i++)
 600:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	{
 601:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	  if(PLPVar[i].toactivate || PLPVar[i].activated)
 602:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	  {
 603:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	      return TRUE;
 604:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	  }
 605:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	}
 606:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	return FALSE;
 607:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** }
 608:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 609:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 610:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 611:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 612:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 613:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 614:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 615:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 616:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #if defined(CONFIG_PM_PLP_NORMAL_SUPPORT)
 617:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /**
 618:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** PLP Manager
 619:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n
 620:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 621:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	int16_t  avgvoltagecomp    ->   vline compensation
 622:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 623:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 624:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \return
 625:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 626:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \retval   
 627:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 628:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 629:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \author   Leonardo Sparti
 630:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \date     25/10/2011
 631:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \version  1.0.0
 632:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 633:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \note		\par \b Nota 1:
 634:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			documentation by Leonardo Sparti
 635:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 636:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** */
 637:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** void PM_PLP_Scheduler(void)
 638:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
 639:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     uint8_t i;
 640:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     PLP_LType * pzcl_;
 641:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     PLP_LType** ppzcl_;
 642:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 643:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     TRACE_PLP_START();
 644:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     LIB_ZcEdgeType edge = (LIB_ZC_GetCurrentEdge()? ZC_EDGE_RISING : ZC_EDGE_FALLING); /* edge of s
 645:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     LIB_ZcEdgeType edgeNxt = (LIB_ZcEdgeType)( (edge==ZC_EDGE_RISING)? ZC_EDGE_FALLING : ZC_EDGE_RI
 646:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     /* as soon as possible like in the ZC */
 647:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 648:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     /*PM_PLP_SetLoad(TRUE, 0x12, &Profilerus[0][2], 2, 0, 0);*/
 649:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 650:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     /*default: nothing to do*/
 651:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	PLPScheduler.state=2;
 652:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	if(PLPScheduler.pfstld[edge]!=0)
 653:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	{
 654:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		/*there are loads to drive in this halfwave */
 655:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		PLPScheduler.state=0;
 656:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		PLPScheduler.pcurrld=PLPScheduler.pfstld[(edge)];
 657:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	}
 658:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	/* forcing loads to turn off */
 659:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****   	PLP_turnOff();
 660:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****   	/* check for loads to drive at ZC event*/
 661:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	if(PLP_LoadsAtZC(edge)!=0)
 662:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	{
 663:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		PLP_DriverPins(edge);
 664:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	}
 665:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	/*plan next OCU event*/
 666:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	PLP_SetOC(edge);
 667:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 668:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     
 669:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     
 670:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     /* init scheduler list */
 671:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     PLPScheduler.pfstld[edgeNxt]=0;
 672:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     
 673:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     
 674:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     if(PLPLoads!=0)
 675:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     {
 676:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     	pzcl_=PLPVar;
 677:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 678:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		/* scan all loads */
 679:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     	for(i=0; i<PLPLoads; i++,pzcl_++)
 680:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		{
 681:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #if defined(CONFIG_PM_PLP_DIMMER_SUPPORT)
 682:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			if(pzcl_->pylottype == DIM_LAMP_L)
 683:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			{
 684:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				if(dimReg[i] == 0xFFFF)    /* Avoid dimmering if initialization is not yet present */
 685:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				{
 686:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					return;
 687:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				}
 688:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 689:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				if(OnOffStatus[i])         /* Increasing Dimmer */
 690:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				{
 691:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					if( dimReg[i] >= (dimStep[i]+dimMax) )
 692:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					{
 693:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 						dimReg[i] -= dimStep[i];
 694:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					}
 695:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					else
 696:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					{
 697:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 						/* Saturation value */
 698:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 						dimReg[i] = dimMax;
 699:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					}
 700:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				}
 701:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				else                       /* Decreasing Dimmer */
 702:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				{
 703:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					dimReg[i] += dimStep[i];
 704:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					if( dimReg[i] > dimMin )
 705:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					{
 706:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 						/* Saturation value */
 707:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 						dimReg[i] = dimMin;
 708:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 709:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 						if(dimReg[i] == DIM_OFF)
 710:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 						{
 711:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 						  pzcl_->activated=0;     /* turn off load */
 712:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 						}
 713:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					}
 714:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				}
 715:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 716:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			}
 717:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #endif   /* defined(CONFIG_PM_PLP_DIMMER_SUPPORT) */
 718:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 719:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			/* if load is to activate */
 720:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			if((pzcl_->toactivate) && (pzcl_->p_nextprof!=0))
 721:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			{
 722:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				/* check sync */
 723:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				if(pzcl_->sync==edge)
 724:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				{
 725:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					pzcl_->activated=1;
 726:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					pzcl_->toactivate=0;
 727:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					pzcl_->ptractualprof=pzcl_->p_nextprof;     /* set next profile as actual */
 728:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					pzcl_->p_nextprof=0;                        /* set next profile as empty */
 729:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					pzcl_->ptractualoc[edge]=pzcl_->ptractualprof+pzcl_->profilelen;
 730:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					pzcl_->counter=0;                           /* reset cnt */
 731:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				}
 732:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			}
 733:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 734:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			if(pzcl_->activated)
 735:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			{
 736:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				/* if the loc pnt is at the end */
 737:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				if(pzcl_->ptractualoc[edge]>=pzcl_->ptractualprof+pzcl_->profilelen-1)
 738:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				{
 739:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					/* set the loc pnt at the begin of the profile */
 740:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					pzcl_->ptractualoc[edgeNxt]=pzcl_->ptractualprof;
 741:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 742:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 743:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 744:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					/* if the profile has repetition */
 745:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					if(pzcl_->repetition)
 746:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					{
 747:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 						if(pzcl_->counter<pzcl_->repetition)
 748:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 						{
 749:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 							/* inc cnt */
 750:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 							pzcl_->counter++;
 751:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 						}
 752:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 						else
 753:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 						{
 754:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 							/* driving has been completed!!! */
 755:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 							pzcl_->activated=0;
 756:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 						}
 757:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					}
 758:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				}
 759:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				else
 760:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				{
 761:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					/* inc the loc pnt */
 762:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					pzcl_->ptractualoc[edgeNxt]=pzcl_->ptractualoc[edge]+1;
 763:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				}
 764:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 765:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 766:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				/* Check if the load is to compensate */
 767:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				if(pzcl_->ToCompensate)
 768:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				{
 769:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					/* multiply the avg vline value */
 770:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					/*pzcl_->Comp=(int16_t)(avgvoltagecomp);*/ /* TODO Compensation at moment is unused */
 771:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					/* the old statement was: (avgvoltagecomp<<PLP_COMPENSATION_MULTIPLIER); */
 772:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				}
 773:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				else
 774:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				{
 775:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					pzcl_->Comp=0;
 776:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				}
 777:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 778:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				/* update the OC value */
 779:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				pzcl_->OcValue[edgeNxt]= (IO_HwTimerType)((pzcl_->Comp+*(pzcl_->ptractualoc[edgeNxt]))/* *(TIME
 780:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 781:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				if(pzcl_->OcValue[edgeNxt] < CONFIG_PM_PLP_FORCE_DELAY_AT_ZERO_TH)
 782:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				{
 783:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					pzcl_->OcValue[edgeNxt]=0;
 784:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				}
 785:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			}
 786:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 787:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			/* insert the load in the list if the load is activated */
 788:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			if(pzcl_->activated)
 789:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			{
 790:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				ppzcl_=&PLPScheduler.pfstld[edgeNxt];
 791:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 792:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				do{
 793:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					if((!*ppzcl_) || (pzcl_->OcValue[edgeNxt] < ((*ppzcl_)->OcValue[edgeNxt])))
 794:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					{
 795:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 						pzcl_->pnxtld[edgeNxt]=*ppzcl_;
 796:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 						*ppzcl_=pzcl_;
 797:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 						break;
 798:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					}
 799:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					else
 800:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					{
 801:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 						ppzcl_=&((*ppzcl_)->pnxtld[edgeNxt]);
 802:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 					}
 803:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				}
 804:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				while(1);
 805:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			}
 806:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			else
 807:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			{
 808:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				/* reset the pointer */
 809:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				pzcl_->pnxtld[edgeNxt]=(PLP_LType*)0;
 810:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			}
 811:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 812:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			
 813:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		}
 814:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     }
 815:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     TRACE_PLP_END();
 816:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** }
 817:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #endif /* ENABLE_SIMPLE_PLP defined */
 818:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 819:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 820:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #if !defined(CONFIG_PM_PLP_NORMAL_SUPPORT)
 821:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /**
 822:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** Dimmer Manager
 823:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n
 824:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 825:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	
 826:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 827:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 828:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \return
 829:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 830:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \retval
 831:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 832:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 833:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \author   Leonardo Sparti
 834:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \date     25/10/2011
 835:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \version  1.0.0
 836:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 837:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \note		\par \b Nota 1:
 838:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			documentation by Leonardo Sparti
 839:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 840:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** */
 841:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** void DIM_Scheduler(void)
 842:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
  10                             		.loc 1 842 0
  11 0000 6E 6D                   		pushm	r6-r13
  12                             	.LCFI0:
  13 0002 71 00 F0                		add	#-16, r0
  14                             	.LCFI1:
  15                             	.LVL0:
 843:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     uint8_t i;
 844:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     uint8_t isredge;
 845:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     PLP_LType * pzcl_;
 846:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     PLP_LType** ppzcl_;
 847:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     
 848:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     
 849:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     pzcl_=PLPVar;
 850:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 851:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     /* edge of synchronization */
 852:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     isredge = (uint8_t)OCIRQ_GetEdgeSync();
  16                             		.loc 1 852 0
  17 0005 05 00 00 00             		bsr	_OCIRQ_GetEdgeSync
  18                             	.LVL1:
 853:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 854:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     /* init scheduler list */
 855:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     PLPScheduler.pfstld[1^isredge]=0;
  19                             		.loc 1 855 0
  20 0009 EF 1C                   		mov.L	r1, r12
  21 000b FD 74 DC 01             		xor	#1, r12
 856:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     
 857:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     if(PLPLoads==0)
 858:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     {
 859:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         return;
 860:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     }
 861:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     
 862:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     /* scan all loads */
 863:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     for(i=0; i<PLPLoads; i++,pzcl_++)
 864:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     {
 865:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #if defined(CONFIG_PM_PLP_DIMMER_SUPPORT)
 866:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         if(dimReg[i] == 0xFFFF)    /* Avoid dimmering if initialization is not yet present */
 867:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         {
 868:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****           return;
 869:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         }
 870:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     
 871:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         if(OnOffStatus[i])         /* Increasing Dimmer */
 872:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         {
 873:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****           if( dimReg[i] >= (dimStep[i]+dimMax) )
 874:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****           {
 875:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             dimReg[i] -= dimStep[i];
 876:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****           }
 877:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****           else
 878:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****           {
 879:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             /* Saturation value */
 880:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             dimReg[i] = dimMax;
 881:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****           }
 882:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         }
 883:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         else                       /* Decreasing Dimmer */
 884:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         {
 885:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****           dimReg[i] += dimStep[i];
 886:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****           if( dimReg[i] > dimMin )
 887:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****           {
 888:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             /* Saturation value */
 889:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             dimReg[i] = dimMin;
 890:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			
 891:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             if(dimReg[i] == DIM_OFF)
 892:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             {
 893:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****               pzcl_->activated=0;     /* turn off load */
 894:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             }
 895:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****           }
 896:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         }
 897:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #endif /* defined(CONFIG_PM_PLP_DIMMER_SUPPORT) */
 898:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         /* if load is to activate */
 899:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         if(pzcl_->toactivate)
 900:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         {
 901:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             pzcl_->activated=1;
 902:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             pzcl_->toactivate=0;
 903:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             pzcl_->ptractualoc[isredge]=pzcl_->p_nextprof;
 904:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         }
 905:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         
 906:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         if(pzcl_->activated)
 907:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         {
 908:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             /* set the loc pnt at the begin of the profile */
 909:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             pzcl_->ptractualoc[1^isredge]=pzcl_->p_nextprof;
 910:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             
 911:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             /* update the OC value */
 912:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             pzcl_->OcValue[1^isredge]= (IO_HwTimerType)(PLP_TIMER_SCALING((*pzcl_->ptractualoc[1^is
 913:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 914:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             if(pzcl_->OcValue[1^isredge]<PLP_DRIVELBOUNDtck)
 915:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             {
 916:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****                 pzcl_->OcValue[1^isredge]=0;
 917:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             }
 918:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         
 919:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             /* insert the load in the list if the load is acivated */
 920:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             ppzcl_=&PLPScheduler.pfstld[1^isredge];
 921:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         
 922:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             do{                        
 923:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****                 if((!*ppzcl_) || (pzcl_->OcValue[1^isredge] < ((*ppzcl_)->OcValue[1^isredge])))
 924:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****                 {
 925:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****                     pzcl_->pnxtld[1^isredge]=*ppzcl_;
 926:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****                     *ppzcl_=pzcl_;
 927:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****                     break;
 928:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****                 }
 929:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****                 else
 930:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****                 {                   
 931:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****                     ppzcl_=&((*ppzcl_)->pnxtld[1^isredge]);
 932:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****                 }
 933:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             }
 934:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             while(1);
 935:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         }
 936:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         else
 937:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         {
 938:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             /* reset the pointer */
 939:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             pzcl_->pnxtld[1^isredge]=(PLP_LType*)0;
 940:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         }
 941:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         
 942:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     }
 943:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** }
 944:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #endif /* !defined(ENABLE_SIMPLE_PLP) */
 945:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 946:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 947:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /**
 948:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** PLP ISR Callback
 949:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n
 950:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 951:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	IO_NotificationType notifVal
 952:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	IO_ChannelType chid
 953:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	IO_ErrorType validate
 954:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 955:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 956:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \return 	IO_ErrorType
 957:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 958:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \retval		IO_E_OK
 959:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 960:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 961:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \author   Leonardo Sparti
 962:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \date     25/10/2011
 963:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \version  1.0.0
 964:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 965:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \note		\par \b Nota 1:
 966:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			documentation by Leonardo Sparti
 967:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 968:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** */
 969:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** static IO_ErrorType PLP_OCU_Event(IO_NotificationType notifVal, IO_ChannelType chid, IO_ErrorType v
 970:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
 971:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	LIB_ZcEdgeType edge = (OCIRQ_GetEdgeSync()? ZC_EDGE_RISING : ZC_EDGE_FALLING); /* edge of synchron
 972:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 973:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	(void) notifVal;
 974:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	(void) chid;
 975:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	(void) validate;
 976:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 977:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	TRACE_PLP_ISR_START();
 978:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 979:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	/* Drive the pins */
 980:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	PLP_DriverPins(edge);
 981:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	/* Set next OC */
 982:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	PLP_SetOC(edge);
 983:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	
 984:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	TRACE_PLP_ISR_END();
 985:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 986:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	return (IO_ErrorType)IO_E_OK;
 987:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** }
 988:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 989:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 990:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 991:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /**
 992:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** Interrupt service routine of PLP. The function calls the assigned callback function.
 993:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****  
 994:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param [in] 	void
 995:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
 996:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \author   Leonardo Sparti
 997:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \date     25/10/2011
 998:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \version  1.0.0
 999:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1000:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \note		\par \b Nota 1:
1001:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			documentation by Leonardo Sparti
1002:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1003:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** */
1004:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1005:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** void PLP_ISR(void)
1006:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
1007:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	/* Calls the user callback */
1008:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	(void)(PLP_OCU_Event)((IO_NotificationType)0, (IO_ChannelType)0, (IO_ErrorType)0);
1009:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** }
1010:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1011:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1012:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /**
1013:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** Detect Loads to be driven on ZC event
1014:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n
1015:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1016:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	edge   edge to be considered (as each edge could have its own loads to drive)
1017:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1018:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1019:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \return
1020:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1021:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \retval      TRUE        there are loads to drive
1022:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****              FALSE       no loads to drive
1023:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1024:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1025:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \author   Leonardo Sparti
1026:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \date     25/10/2011
1027:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \version  1.0.0
1028:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1029:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \note		\par \b Nota 1:
1030:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			documentation by Leonardo Sparti
1031:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1032:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** */
1033:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** static uint8_t PLP_LoadsAtZC(LIB_ZcEdgeType edge)
1034:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
1035:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1036:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     if((PLPScheduler.pfstld[(edge)]) && (!(PLPScheduler.pfstld[(edge)]->OcValue[(edge)])))
1037:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     {
1038:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         return TRUE;
1039:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     }
1040:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     return FALSE;
1041:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1042:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** }
1043:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1044:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /**
1045:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** Set OC Value into OC register
1046:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n
1047:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1048:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	LIB_ZcEdgeType  isredge   ->   edge
1049:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1050:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1051:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \return
1052:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1053:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \retval
1054:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1055:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1056:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \author   Leonardo Sparti
1057:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \date     25/10/2011
1058:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \version  1.0.0
1059:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1060:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \note		\par \b Nota 1:
1061:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			documentation by Leonardo Sparti
1062:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1063:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** */
1064:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** static void PLP_SetOC(LIB_ZcEdgeType isredge)
1065:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
1066:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	PLP_LType * zcl;
1067:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	uint16_t 	ticks=0;
1068:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1069:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	zcl=PLPScheduler.pcurrld;
1070:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1071:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	switch(PLPScheduler.state)
1072:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	{
1073:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	    case 0:
1074:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	    	/* set event */
1075:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	    	OCOCU_SetEventSync(CONFIG_PM_PLP_TMR_CH_ID, HW_CNTR_TRIG_ZC, zcl->OcValue[(isredge)]*1000UL);
1076:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	    	/* enable ISR */
1077:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	    	(void)OCOCU_EnableISR(CONFIG_PM_PLP_TMR_CH_ID, TMR_CH_ISR_ENABLE, PLP_OCU_Event);
1078:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	      break;
1079:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1080:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	    case 1:
1081:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	    	/* Last phase angle OC value to turn off all loads */
1082:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	    	ticks =  (isredge)?( LIB_ZC_GetHalfWaveLengthNeg() - CONFIG_PM_PLP_TURNOFF_MARGIN ):( LIB_ZC_
1083:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	    	/* set event */
1084:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	    	OCOCU_SetEventSync(CONFIG_PM_PLP_TMR_CH_ID, HW_CNTR_TRIG_ZC, ticks*1000UL);
1085:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			/* enable ISR */
1086:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			(void)OCOCU_EnableISR(CONFIG_PM_PLP_TMR_CH_ID, TMR_CH_ISR_ENABLE, PLP_OCU_Event);
1087:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	      break;
1088:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1089:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	    default:
1090:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****    	        break;
1091:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	}
1092:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** }
1093:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1094:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /**
1095:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** Pin driver. Multiple activations are managed too.
1096:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \n
1097:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1098:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \param  [in]	LIB_ZcEdgeType  edge    ->   edge
1099:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1100:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1101:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \return
1102:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1103:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \retval
1104:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1105:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1106:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \author   Leonardo Sparti
1107:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \date     25/10/2011
1108:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \version  1.0.0
1109:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1110:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \note		\par \b Nota 1:
1111:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			documentation by Leonardo Sparti
1112:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1113:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** */
1114:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** static void PLP_DriverPins(LIB_ZcEdgeType edge)
1115:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
1116:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	PLP_LType * zcl;
1117:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	uint8_t i,multiple;
1118:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1119:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1120:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	zcl=PLPScheduler.pcurrld;   /* Get current pnt */
1121:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1122:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     i=	PLPScheduler.state;   /* Get Sch state */
1123:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	switch(i)
1124:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	{
1125:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	    case 0:
1126:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	        do
1127:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         	{
1128:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	        	/* activate all pin with the same or 'similar' OC */
1129:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	        	multiple=FALSE;
1130:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #if defined(CONFIG_PM_PLP_NORMAL_SUPPORT)
1131:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		if(zcl->pylottype == RELEZC_L)
1132:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		{
1133:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         			LIB_DIO_SET_LOAD( (uint8_t)((zcl->stato)?(OFF):(ON)),zcl->pin );
1134:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		}
1135:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		else
1136:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #endif /* defined(CONFIG_PM_PLP_NORMAL_SUPPORT) */
1137:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		{
1138:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         			LIB_DIO_SET_LOAD(ON,zcl->pin);
1139:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		}
1140:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1141:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		if((zcl->pnxtld[(edge)]) && ((CONFIG_PM_PLP_GROUP_ACTIVATION_TH + (((zcl)->OcValue[(edge)
1142:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		{
1143:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		    multiple=TRUE;
1144:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		}
1145:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1146:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		if(!zcl->pnxtld[(edge)])
1147:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		{
1148:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		    /* change Scheduler state if this is the last load of the list */
1149:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		    PLPScheduler.state=1;
1150:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		    PLPScheduler.pcurrld=0;/*RF*/
1151:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		}
1152:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		else
1153:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		{
1154:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         			/* get the next load*/
1155:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		    zcl=zcl->pnxtld[(edge)?1:0];
1156:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		    PLPScheduler.pcurrld=zcl;
1157:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         	    }
1158:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         	}
1159:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         	while(multiple);
1160:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	        break;
1161:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1162:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	    case 1:
1163:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	        /* it's time to turn off the loads */
1164:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	        PLP_turnOff();
1165:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1166:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	        /* job is done */
1167:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	        PLPScheduler.state=2;
1168:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	        PLPScheduler.pfstld[(edge)?1:0]=0;
1169:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	        PLPScheduler.pcurrld =0;/*RF*/
1170:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	        break;
1171:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	    default:
1172:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	        /* do nothing!!! */
1173:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****    	        break;
1174:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	}
1175:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1176:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** }
1177:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1178:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /**
1179:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** Turn off all loads except RELEZC_L
1180:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1181:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \author   Leonardo Sparti
1182:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \date     25/10/2011
1183:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \version  1.0.0
1184:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1185:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** \note		\par \b Nota 1:
1186:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			documentation by Leonardo Sparti
1187:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** */
1188:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** static void PLP_turnOff(void)
1189:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
1190:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     PLP_LType * pzcl_;
1191:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****    	uint8_t i;
1192:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1193:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****    	/* disable all loads .. */
1194:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     for(i=0,pzcl_=PLPVar; i<PLPLoads; i++,pzcl_++)
1195:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     {
1196:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #if defined(CONFIG_PM_PLP_NORMAL_SUPPORT)
1197:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     	/* ... except ones with PilotType RELEZC_L*/
1198:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     	if(pzcl_->pylottype != RELEZC_L)
1199:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** #endif
1200:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         {
1201:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****           LIB_DIO_SET_LOAD(OFF,pzcl_->pin);
1202:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         }
1203:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     }
1204:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1205:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     /* disable interrupt OC  */
1206:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     (void)OCOCU_EnableISR(CONFIG_PM_PLP_TMR_CH_ID, TMR_CH_ISR_DISABLE, PLP_OCU_Event);
1207:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1208:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** }
1209:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1210:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 
1211:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** /**
1212:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****  * initzializes drivers resources
1213:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****  */
1214:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** static void Init_PLP_DrvResources(void)
1215:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
1216:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	/* Compare Match function Init. */
1217:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	(void)OCOCU_DeInitSync(CONFIG_PM_PLP_TMR_CH_ID);
1218:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	(void)OCOCU_InitSync(&OcuPLP_cfg);
1219:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	(void)OCOCU_SetModeSync(CONFIG_PM_PLP_TMR_CH_ID, TMR_CH_OC_OFF);
1220:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	(void)OCOCU_EnableISR(CONFIG_PM_PLP_TMR_CH_ID, TMR_CH_ISR_DISABLE, NULL);
1221:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** }
  22                             		.loc 1 1221 0
  23 000f 76 2C FF 00             		and #0xff, r12
 855:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     PLPScheduler.pfstld[1^isredge]=0;
  24                             		.loc 1 855 0
  25 0013 71 CD 01                		add	#1, r12, r13
  26 0016 FB 72 00 00 00 00       		mov.L	#_PLPScheduler, r7
  27 001c 66 0A                   		mov.L	#0, r10
  28 001e FE 2D 7A                		mov.L	r10, [r13,r7]
 857:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     if(PLPLoads==0)
  29                             		.loc 1 857 0
  30 0021 FB 72 00 00 00 00       		mov.L	#_PLPLoads, r7
  31 0027 CC 7F                   		mov.B	[r7], r15
  32 0029 5B F7                   		movu.B	r15, r7
  33 002b 47 A7                   		cmp	r10, r7
  34 002d 3A 1D 01                		beq	.L1
 873:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****           if( dimReg[i] >= (dimStep[i]+dimMax) )
  35                             		.loc 1 873 0
  36 0030 FB 72 00 00 00 00       		mov.L	#_dimMax, r7
  37 0036 DC 7A                   		mov.W	[r7], r10
  38 0038 5F A7                   		movu.W	r10, r7
  39 003a E3 07                   		mov.L	r7, [r0]
 886:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****           if( dimReg[i] > dimMin )
  40                             		.loc 1 886 0
  41 003c FB 72 00 00 00 00       		mov.L	#_dimMin, r7
  42 0042 DC 7B                   		mov.W	[r7], r11
  43 0044 FB E2 00 00 00 00       		mov.L	#_PLPVar+12, r14
  44 004a FB 32 00 00 00 00       		mov.L	#_dimReg, r3
 841:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** void DIM_Scheduler(void)
  45                             		.loc 1 841 0
  46 0050 71 C7 06                		add	#6, r12, r7
  47 0053 FF 29 77                		add	r7, r7, r9
  48 0056 70 94 00 00 00 00       		add	#_PLPVar+2, r9, r4
  49 005c 4B CC                   		add	r12, r12
  50 005e 66 02                   		mov.L	#0, r2
  51                             		.loc 1 1221 0
  52 0060 76 21 FF 00             		and #0xff, r1
  53                             	.LVL2:
 903:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             pzcl_->ptractualoc[isredge]=pzcl_->p_nextprof;
  54                             		.loc 1 903 0
  55 0064 62 11                   		add	#1, r1
  56 0066 A0 09                   		mov.L	r1, 4[r0]
 920:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             ppzcl_=&PLPScheduler.pfstld[1^isredge];
  57                             		.loc 1 920 0
  58 0068 6C 2D                   		shll	#2, r13
  59 006a 70 DD 00 00 00 00       		add	#_PLPScheduler, r13
  60 0070 E7 0D 02                		mov.L	r13, 8[r0]
 931:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****                     ppzcl_=&((*ppzcl_)->pnxtld[1^isredge]);
  61                             		.loc 1 931 0
  62 0073 6C 27                   		shll	#2, r7
  63 0075 A0 8F                   		mov.L	r7, 12[r0]
  64 0077 38 C5 00                		bra	.L3
  65                             	.LVL3:
  66                             	.L17:
 866:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         if(dimReg[i] == 0xFFFF)    /* Avoid dimmering if initialization is not yet present */
  67                             		.loc 1 866 0
  68 007a DC 3D                   		mov.W	[r3], r13
  69 007c 5F D6                   		movu.W	r13, r6
  70 007e 77 06 FF FF 00          		cmp	#0xffff, r6
  71 0083 3A C7 00                		beq	.L1
 871:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         if(OnOffStatus[i])         /* Increasing Dimmer */
  72                             		.loc 1 871 0
  73 0086 FB 12 00 00 00 00       		mov.L	#_OnOffStatus, r1
  74 008c FE C2 11                		movu.B	[r2,r1], r1
  75 008f FB 82 00 00 00 00       		mov.L	#_dimStep, r8
  76 0095 61 01                   		cmp	#0, r1
  77 0097 20 17                   		beq	.L4
 873:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****           if( dimReg[i] >= (dimStep[i]+dimMax) )
  78                             		.loc 1 873 0
  79 0099 FE C2 81                		movu.B	[r2,r8], r1
  80 009c EC 08                   		mov.L	[r0], r8
  81 009e 4B 18                   		add	r1, r8
  82 00a0 47 86                   		cmp	r8, r6
  83 00a2 29 08                   		blt	.L5
 875:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             dimReg[i] -= dimStep[i];
  84                             		.loc 1 875 0
  85 00a4 43 1D                   		sub	r1, r13
  86 00a6 D3 3D                   		mov.W	r13, [r3]
  87 00a8 2E 1E                   		bra	.L6
  88                             	.L5:
 880:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             dimReg[i] = dimMax;
  89                             		.loc 1 880 0
  90 00aa D3 3A                   		mov.W	r10, [r3]
  91 00ac 2E 1A                   		bra	.L6
  92                             	.L4:
 885:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****           dimReg[i] += dimStep[i];
  93                             		.loc 1 885 0
  94 00ae FE C2 88                		movu.B	[r2,r8], r8
  95 00b1 4B 8D                   		add	r8, r13
  96 00b3 D3 3D                   		mov.W	r13, [r3]
 886:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****           if( dimReg[i] > dimMin )
  97                             		.loc 1 886 0
  98 00b5 5F DD                   		movu.W	r13, r13
  99 00b7 5F B8                   		movu.W	r11, r8
 100 00b9 47 8D                   		cmp	r8, r13
 101 00bb 25 0B                   		bleu	.L6
 889:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             dimReg[i] = dimMin;
 102                             		.loc 1 889 0
 103 00bd D3 3B                   		mov.W	r11, [r3]
 891:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             if(dimReg[i] == DIM_OFF)
 104                             		.loc 1 891 0
 105 00bf 76 08 3F 02             		cmp	#0x23f, r8
 106 00c3 1B                      		bne	.L6
 893:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****               pzcl_->activated=0;     /* turn off load */
 107                             		.loc 1 893 0
 108 00c4 C3 E1                   		mov.B	r1, [r14]
 109                             		.balign 2,3,3
 110                             	.L6:
 899:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         if(pzcl_->toactivate)
 111                             		.loc 1 899 0
 112 00c6 59 ED 01                		movu.B	1[r14], r13
 113 00c9 61 0D                   		cmp	#0, r13
 114 00cb 20 13                   		beq	.L9
 901:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             pzcl_->activated=1;
 115                             		.loc 1 901 0
 116 00cd F8 E4 01                		mov.B	#1, [r14]
 902:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             pzcl_->toactivate=0;
 117                             		.loc 1 902 0
 118 00d0 F9 E4 01 00             		mov.B	#0, 1[r14]
 903:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             pzcl_->ptractualoc[isredge]=pzcl_->p_nextprof;
 119                             		.loc 1 903 0
 120 00d4 ED E1 02                		mov.L	8[r14], r1
 121 00d7 ED 0D 01                		mov.L	4[r0], r13
 122 00da FE 2D 71                		mov.L	r1, [r13,r7]
 123 00dd 03                      		.balign 2,3,3
 124                             	.L9:
 906:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         if(pzcl_->activated)
 125                             		.loc 1 906 0
 126 00de 58 ED                   		movu.B	[r14], r13
 127 00e0 61 0D                   		cmp	#0, r13
 128 00e2 20 48                   		beq	.L10
 909:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             pzcl_->ptractualoc[1^isredge]=pzcl_->p_nextprof;
 129                             		.loc 1 909 0
 130 00e4 ED E1 02                		mov.L	8[r14], r1
 841:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** void DIM_Scheduler(void)
 131                             		.loc 1 841 0
 132 00e7 FF 2D C4                		add	r12, r4, r13
 133 00ea 71 D8 F6                		add	#-10, r13, r8
 909:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             pzcl_->ptractualoc[1^isredge]=pzcl_->p_nextprof;
 134                             		.loc 1 909 0
 135 00ed E3 81                   		mov.L	r1, [r8]
 912:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             pzcl_->OcValue[1^isredge]= (IO_HwTimerType)(PLP_TIMER_SCALING((*pzcl_->ptractualoc[1^is
 136                             		.loc 1 912 0
 137 00ef 5C 11                   		movu.W	[r1], r1
 138 00f1 76 11 00 32             		mul	#0x3200, r1
 139 00f5 FD 78 81 E8 03          		div	#0x3e8, r1
 914:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             if(pzcl_->OcValue[1^isredge]<PLP_DRIVELBOUNDtck)
 140                             		.loc 1 914 0
 141 00fa 5F 18                   		movu.W	r1, r8
 142 00fc 76 08 57 02             		cmp	#0x257, r8
 143 0100 25 05                   		bleu	.L11
 912:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             pzcl_->OcValue[1^isredge]= (IO_HwTimerType)(PLP_TIMER_SCALING((*pzcl_->ptractualoc[1^is
 144                             		.loc 1 912 0
 145 0102 D3 41                   		mov.W	r1, [r4]
 146 0104 0C                      		bra	.L12
 147                             	.L11:
 916:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****                 pzcl_->OcValue[1^isredge]=0;
 148                             		.loc 1 916 0
 149 0105 3D 40 00                		mov.W	#0, [r4]
 150                             		.balign 2,3,1
 151                             	.L12:
 920:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             ppzcl_=&PLPScheduler.pfstld[1^isredge];
 152                             		.loc 1 920 0
 153 0108 A8 85                   		mov.L	8[r0], r5
 154                             	.LVL4:
 155                             		.balign 2,3,1
 156                             	.L16:
 923:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****                 if((!*ppzcl_) || (pzcl_->OcValue[1^isredge] < ((*ppzcl_)->OcValue[1^isredge])))
 157                             		.loc 1 923 0
 158 010a EC 51                   		mov.L	[r5], r1
 159 010c 61 01                   		cmp	#0, r1
 160 010e 20 0E                   		beq	.L13
 923:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****                 if((!*ppzcl_) || (pzcl_->OcValue[1^isredge] < ((*ppzcl_)->OcValue[1^isredge])))
 161                             		.loc 1 923 0 is_stmt 0 discriminator 1
 162 0110 FF 28 91                		add	r9, r1, r8
 163 0113 5C 46                   		movu.W	[r4], r6
 164 0115 06 C5 86 01             		cmp	2[r8].UW, r6
 165 0119 22 0B                   		bgeu	.L14
 166 011b 03                      		.balign 2,3,1
 167                             	.L13:
 841:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** void DIM_Scheduler(void)
 168                             		.loc 1 841 0 is_stmt 1
 169 011c 62 AD                   		add	#10, r13
 925:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****                     pzcl_->pnxtld[1^isredge]=*ppzcl_;
 170                             		.loc 1 925 0
 171 011e E3 D1                   		mov.L	r1, [r13]
 926:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****                     *ppzcl_=pzcl_;
 172                             		.loc 1 926 0
 173 0120 E3 57                   		mov.L	r7, [r5]
 174 0122 2E 10                   		bra	.L15
 175                             	.L14:
 931:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****                     ppzcl_=&((*ppzcl_)->pnxtld[1^isredge]);
 176                             		.loc 1 931 0
 177 0124 A8 8D                   		mov.L	12[r0], r5
 178                             	.LVL5:
 179 0126 4B 15                   		add	r1, r5
 180                             	.LVL6:
 934:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             while(1);
 181                             		.loc 1 934 0
 182 0128 2E E2                   		bra	.L16
 183                             	.LVL7:
 184                             	.L10:
 841:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** void DIM_Scheduler(void)
 185                             		.loc 1 841 0
 186 012a FF 27 C4                		add	r12, r4, r7
 187                             	.LVL8:
 188 012d 62 A7                   		add	#10, r7
 939:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****             pzcl_->pnxtld[1^isredge]=(PLP_LType*)0;
 189                             		.loc 1 939 0
 190 012f E3 7D                   		mov.L	r13, [r7]
 191 0131 03                      		.balign 2,3,1
 192                             	.L15:
 193                             	.LVL9:
 194 0132 62 12                   		add	#1, r2
 195 0134 71 EE 20                		add	#32, r14
 196 0137 62 23                   		add	#2, r3
 197 0139 71 44 20                		add	#32, r4
 198                             		.balign 2,3,2
 199                             	.L3:
 841:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** void DIM_Scheduler(void)
 200                             		.loc 1 841 0 discriminator 1
 201 013c 71 E7 F4                		add	#-12, r14, r7
 202                             	.LVL10:
 863:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     for(i=0; i<PLPLoads; i++,pzcl_++)
 203                             		.loc 1 863 0 discriminator 1
 204 013f 5B F1                   		movu.B	r15, r1
 205 0141 5B 2D                   		movu.B	r2, r13
 206 0143 47 D1                   		cmp	r13, r1
 207 0145 25 05 38 33 FF          		bgtu	.L17
 208                             	.LVL11:
 209                             		.balign 2,3,2
 210                             	.L1:
 943:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** }
 211                             		.loc 1 943 0
 212 014a 3F 6D 0C                		rtsd	#48, r6-r13
 213                             	.LFE6:
 215 014d 03                      		.section	.text.PLP_OCU_Event,"ax",@progbits
 217                             	_PLP_OCU_Event:
 218                             	.LFB7:
 970:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
 219                             		.loc 1 970 0
 220                             	.LVL12:
 221 0000 6E 7D                   		pushm	r7-r13
 222                             	.LCFI2:
 971:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	LIB_ZcEdgeType edge = (OCIRQ_GetEdgeSync()? ZC_EDGE_RISING : ZC_EDGE_FALLING); /* edge of synchron
 223                             		.loc 1 971 0
 224 0002 05 00 00 00             		bsr	_OCIRQ_GetEdgeSync
 225                             	.LVL13:
 226 0006 61 01                   		cmp	#0, r1
 227 0008 FC DB 11                		scne.L	r1
 228 000b CF 1C                   		mov.B	r1, r12
 229 000d 5B 1A                   		movu.B	r1, r10
 230                             	.LVL14:
 231                             	.LBB8:
 232                             	.LBB9:
1120:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	zcl=PLPScheduler.pcurrld;   /* Get current pnt */
 233                             		.loc 1 1120 0
 234 000f FB B2 00 00 00 00       		mov.L	#_PLPScheduler, r11
 235 0015 ED B7 03                		mov.L	12[r11], r7
 236                             	.LVL15:
1123:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	switch(i)
 237                             		.loc 1 1123 0
 238 0018 58 BB                   		movu.B	[r11], r11
 239 001a 61 0B                   		cmp	#0, r11
 240 001c 10                      		beq	.L36
 241 001d 61 1B                   		cmp	#1, r11
 242 001f 3B 87 00                		bne	.L32
 243 0022 2E 49                   		bra	.L43
 244                             	.L36:
1141:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		if((zcl->pnxtld[(edge)]) && ((CONFIG_PM_PLP_GROUP_ACTIVATION_TH + (((zcl)->OcValue[(edge)
 245                             		.loc 1 1141 0
 246 0024 71 AB 06                		add	#6, r10, r11
 247 0027 FF 2C BB                		add	r11, r11, r12
1155:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		    zcl=zcl->pnxtld[(edge)?1:0];
 248                             		.loc 1 1155 0
 249 002a EF AD                   		mov.L	r10, r13
 250                             	.LVL16:
 251                             		.balign 2,3,1
 252                             	.L46:
1138:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         			LIB_DIO_SET_LOAD(ON,zcl->pin);
 253                             		.loc 1 1138 0
 254 002c 66 11                   		mov	#1, r1
 255 002e CC 72                   		mov.B	[r7], r2
 256 0030 05 00 00 00             		bsr	_LIB_DIO_SET_LOAD
 257                             	.LVL17:
1141:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		if((zcl->pnxtld[(edge)]) && ((CONFIG_PM_PLP_GROUP_ACTIVATION_TH + (((zcl)->OcValue[(edge)
 258                             		.loc 1 1141 0
 259 0034 FE 6B 7E                		mov.L	[r11,r7], r14
 260 0037 61 0E                   		cmp	#0, r14
 261 0039 3A C9 00                		beq	.L35
 262 003c FF 24 C7                		add	r12, r7, r4
 263 003f B8 4C                   		movu.W	2[r4], r4
 264 0041 72 44 04 01             		add	#0x104, r4
 265 0045 4B CE                   		add	r12, r14
 266 0047 5D EE 01                		movu.W	2[r14], r14
 267                             	.LVL18:
1155:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		    zcl=zcl->pnxtld[(edge)?1:0];
 268                             		.loc 1 1155 0
 269 004a 71 D3 06                		add	#6, r13, r3
 270 004d FE 63 77                		mov.L	[r3,r7], r7
 271                             	.LVL19:
1156:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		    PLPScheduler.pcurrld=zcl;
 272                             		.loc 1 1156 0
 273 0050 FB 32 00 00 00 00       		mov.L	#_PLPScheduler, r3
 274 0056 A0 BF                   		mov.L	r7, 12[r3]
1159:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         	while(multiple);
 275                             		.loc 1 1159 0
 276 0058 47 E4                   		cmp	r14, r4
 277 005a 28 D2                   		bge	.L46
 278 005c 2E 4A                   		bra	.L32
 279                             	.LVL20:
 280                             	.L37:
 281                             	.LBB10:
 282                             	.LBB11:
1201:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****           LIB_DIO_SET_LOAD(OFF,pzcl_->pin);
 283                             		.loc 1 1201 0
 284 005e CC B2                   		mov.B	[r11], r2
 285 0060 05 00 00 00             		bsr	_LIB_DIO_SET_LOAD
 286                             	.LVL21:
1194:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     for(i=0,pzcl_=PLPVar; i<PLPLoads; i++,pzcl_++)
 287                             		.loc 1 1194 0
 288 0064 62 17                   		add	#1, r7
 289                             	.LVL22:
 290 0066 71 BB 20                		add	#32, r11
 291                             	.LVL23:
 292 0069 2E 11                   		bra	.L34
 293                             	.LVL24:
 294                             	.L43:
 295                             	.LBE11:
 296                             	.LBE10:
1123:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	switch(i)
 297                             		.loc 1 1123 0
 298 006b 66 07                   		mov	#0, r7
 299                             	.LVL25:
 300 006d FB B2 00 00 00 00       		mov.L	#_PLPVar, r11
 301                             	.LBB13:
 302                             	.LBB12:
1194:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     for(i=0,pzcl_=PLPVar; i<PLPLoads; i++,pzcl_++)
 303                             		.loc 1 1194 0
 304 0073 FB D2 00 00 00 00       		mov.L	#_PLPLoads, r13
 305                             	.LVL26:
 306 0079 03                      		.balign 2,3,1
 307                             	.L34:
 308 007a 5B 74                   		movu.B	r7, r4
 309 007c 58 DE                   		movu.B	[r13], r14
1201:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****           LIB_DIO_SET_LOAD(OFF,pzcl_->pin);
 310                             		.loc 1 1201 0
 311 007e 66 01                   		mov	#0, r1
1194:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     for(i=0,pzcl_=PLPVar; i<PLPLoads; i++,pzcl_++)
 312                             		.loc 1 1194 0
 313 0080 47 E4                   		cmp	r14, r4
 314 0082 23 DC                   		bltu	.L37
1206:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     (void)OCOCU_EnableISR(CONFIG_PM_PLP_TMR_CH_ID, TMR_CH_ISR_DISABLE, PLP_OCU_Event);
 315                             		.loc 1 1206 0
 316 0084 66 02                   		mov.L	#0, r2
 317 0086 FB 32 00 00 00 00       		mov.L	#_PLP_OCU_Event, r3
 318 008c 05 00 00 00             		bsr	_OCICU_EnableISR
 319                             	.LVL27:
 320                             	.LBE12:
 321                             	.LBE13:
1167:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	        PLPScheduler.state=2;
 322                             		.loc 1 1167 0
 323 0090 FB 72 00 00 00 00       		mov.L	#_PLPScheduler, r7
 324                             	.LVL28:
 325 0096 3C 70 02                		mov.B	#2, [r7]
1168:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	        PLPScheduler.pfstld[(edge)?1:0]=0;
 326                             		.loc 1 1168 0
 327 0099 5B CC                   		movu.B	r12, r12
 328 009b 62 1C                   		add	#1, r12
 329 009d 66 0B                   		mov.L	#0, r11
 330                             	.LVL29:
 331 009f FE 2C 7B                		mov.L	r11, [r12,r7]
1169:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	        PLPScheduler.pcurrld =0;/*RF*/
 332                             		.loc 1 1169 0
 333 00a2 E7 7B 03                		mov.L	r11, 12[r7]
 334 00a5 03                      		.balign 2,3,5
 335                             	.L32:
 336                             	.LVL30:
 337                             	.LBE9:
 338                             	.LBE8:
 339                             	.LBB15:
 340                             	.LBB16:
1069:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	zcl=PLPScheduler.pcurrld;
 341                             		.loc 1 1069 0
 342 00a6 FB 72 00 00 00 00       		mov.L	#_PLPScheduler, r7
 343 00ac ED 7B 03                		mov.L	12[r7], r11
 344                             	.LVL31:
1071:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	switch(PLPScheduler.state)
 345                             		.loc 1 1071 0
 346 00af 58 77                   		movu.B	[r7], r7
 347 00b1 61 07                   		cmp	#0, r7
 348 00b3 17                      		beq	.L39
 349 00b4 61 17                   		cmp	#1, r7
 350 00b6 21 5A                   		bne	.L48
 351 00b8 2E 1B                   		bra	.L40
 352                             	.L39:
1075:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	    	OCOCU_SetEventSync(CONFIG_PM_PLP_TMR_CH_ID, HW_CNTR_TRIG_ZC, zcl->OcValue[(isredge)]*1000UL);
 353                             		.loc 1 1075 0
 354 00ba 62 6A                   		add	#6, r10
 355                             	.LVL32:
 356 00bc 4B AA                   		add	r10, r10
 357                             	.LVL33:
 358 00be 4B BA                   		add	r11, r10
 359 00c0 5D A3 01                		movu.W	2[r10], r3
 360 00c3 CF 71                   		mov.B	r7, r1
 361 00c5 EF 72                   		mov.L	r7, r2
 362 00c7 76 13 E8 03             		mul	#0x3e8, r3
 363 00cb 05 00 00 00             		bsr	_OCOCU_SetEventSync
 364                             	.LVL34:
1077:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	    	(void)OCOCU_EnableISR(CONFIG_PM_PLP_TMR_CH_ID, TMR_CH_ISR_ENABLE, PLP_OCU_Event);
 365                             		.loc 1 1077 0
 366 00cf CF 71                   		mov.B	r7, r1
 367 00d1 2E 23                   		bra	.L51
 368                             	.LVL35:
 369                             	.L40:
1082:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	    	ticks =  (isredge)?( LIB_ZC_GetHalfWaveLengthNeg() - CONFIG_PM_PLP_TURNOFF_MARGIN ):( LIB_ZC_
 370                             		.loc 1 1082 0
 371 00d3 61 0A                   		cmp	#0, r10
 372 00d5 16                      		beq	.L41
 373 00d6 05 00 00 00             		bsr	_LIB_ZC_GetHalfWaveLengthNeg
 374                             	.LVL36:
 375 00da 0E                      		bra	.L50
 376                             	.L41:
 377 00db 05 00 00 00             		bsr	_LIB_ZC_GetHalfWaveLengthPos
 378                             	.LVL37:
 379 00df 03                      		.balign 2,3,3
 380                             	.L50:
 381 00e0 72 11 60 F0             		add	#0xfffff060, r1
 382                             	.LVL38:
1084:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	    	OCOCU_SetEventSync(CONFIG_PM_PLP_TMR_CH_ID, HW_CNTR_TRIG_ZC, ticks*1000UL);
 383                             		.loc 1 1084 0
 384 00e4 5F 13                   		movu.W	r1, r3
 385 00e6 66 01                   		mov	#0, r1
 386                             	.LVL39:
 387 00e8 66 02                   		mov.L	#0, r2
 388 00ea 76 13 E8 03             		mul	#0x3e8, r3
 389                             	.LVL40:
 390 00ee 05 00 00 00             		bsr	_OCOCU_SetEventSync
 391                             	.LVL41:
1086:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			(void)OCOCU_EnableISR(CONFIG_PM_PLP_TMR_CH_ID, TMR_CH_ISR_ENABLE, PLP_OCU_Event);
 392                             		.loc 1 1086 0
 393 00f2 66 01                   		mov	#0, r1
 394                             	.LVL42:
 395                             		.balign 2,3,1
 396                             	.L51:
 397 00f4 66 12                   		mov.L	#1, r2
 398 00f6 FB 32 00 00 00 00       		mov.L	#_PLP_OCU_Event, r3
 399 00fc 05 00 00 00             		bsr	_OCICU_EnableISR
 400                             	.LVL43:
 401 0100 2E 10                   		bra	.L48
 402                             	.LVL44:
 403                             	.L35:
 404                             	.LBE16:
 405                             	.LBE15:
 406                             	.LBB17:
 407                             	.LBB14:
1149:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		    PLPScheduler.state=1;
 408                             		.loc 1 1149 0
 409 0102 FB 72 00 00 00 00       		mov.L	#_PLPScheduler, r7
 410                             	.LVL45:
 411 0108 3C 70 01                		mov.B	#1, [r7]
1150:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         		    PLPScheduler.pcurrld=0;/*RF*/
 412                             		.loc 1 1150 0
 413 010b E7 7E 03                		mov.L	r14, 12[r7]
 414 010e 2E 98                   		bra	.L32
 415                             	.LVL46:
 416                             	.L48:
 417                             	.LBE14:
 418                             	.LBE17:
 987:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** }
 419                             		.loc 1 987 0
 420 0110 66 01                   		mov.L	#0, r1
 421 0112 3F 7D 07                		rtsd	#28, r7-r13
 422                             	.LFE7:
 424 0115 03                      		.section	.text.Init_PLP_DrvResources,"ax",@progbits
 426                             	_Init_PLP_DrvResources:
 427                             	.LFB13:
1215:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
 428                             		.loc 1 1215 0
1217:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	(void)OCOCU_DeInitSync(CONFIG_PM_PLP_TMR_CH_ID);
 429                             		.loc 1 1217 0
 430 0000 66 01                   		mov	#0, r1
 431 0002 05 00 00 00             		bsr	_OCOCU_DeInitSync
 432                             	.LVL47:
1218:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	(void)OCOCU_InitSync(&OcuPLP_cfg);
 433                             		.loc 1 1218 0
 434 0006 FB 12 00 00 00 00       		mov.L	#_OcuPLP_cfg, r1
 435 000c 05 00 00 00             		bsr	_OCOCU_InitSync
 436                             	.LVL48:
1219:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	(void)OCOCU_SetModeSync(CONFIG_PM_PLP_TMR_CH_ID, TMR_CH_OC_OFF);
 437                             		.loc 1 1219 0
 438 0010 66 01                   		mov	#0, r1
 439 0012 66 42                   		mov	#4, r2
 440 0014 05 00 00 00             		bsr	_OCOCU_SetModeSync
 441                             	.LVL49:
1220:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	(void)OCOCU_EnableISR(CONFIG_PM_PLP_TMR_CH_ID, TMR_CH_ISR_DISABLE, NULL);
 442                             		.loc 1 1220 0
 443 0018 66 01                   		mov	#0, r1
 444 001a 66 02                   		mov.L	#0, r2
 445 001c EF 23                   		mov.L	r2, r3
 446 001e 04 00 00 00             		bra	_OCICU_EnableISR
 447                             	.LVL50:
 448                             	.LFE13:
 450                             		.section	.text.PM_PLP_InsertLoad,"ax",@progbits
 451                             		.global	_PM_PLP_InsertLoad
 453                             	_PM_PLP_InsertLoad:
 454                             	.LFB0:
 221:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
 455                             		.loc 1 221 0
 456                             	.LVL51:
 225:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     if(PLPLoads >= CONFIG_PM_PLP_MAX_ITEMS_NUMBER)
 457                             		.loc 1 225 0
 458 0000 FB E2 00 00 00 00       		mov.L	#_PLPLoads, r14
 459 0006 CC E4                   		mov.B	[r14], r4
 460 0008 5B 43                   		movu.B	r4, r3
 461 000a 61 13                   		cmp	#1, r3
 462 000c 24 16                   		bgtu	.L53
 231:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     pPLPVar = &PLPVar[PLPLoads];
 463                             		.loc 1 231 0
 464 000e 6C 53                   		shll	#5, r3
 465 0010 70 33 00 00 00 00       		add	#_PLPVar, r3
 466                             	.LVL52:
 233:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     if(pPLPVar->pin==0xFF)
 467                             		.loc 1 233 0
 468 0016 58 32                   		movu.B	[r3], r2
 469                             	.LVL53:
 470 0018 75 52 FF                		cmp	#0xff, r2
 471 001b 1F                      		bne	.L53
 235:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         pPLPVar->pin=pin;
 472                             		.loc 1 235 0
 473 001c C3 31                   		mov.B	r1, [r3]
 243:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****         PLPLoads++;  /* inc the index */
 474                             		.loc 1 243 0
 475 001e 62 14                   		add	#1, r4
 476 0020 C3 E4                   		mov.B	r4, [r14]
 477                             	.LVL54:
 478                             	.L53:
 479 0022 02                      		rts
 480                             	.LFE0:
 482                             		.section	.text.PM_DIM_SetLoad,"ax",@progbits
 483                             		.global	_PM_DIM_SetLoad
 485                             	_PM_DIM_SetLoad:
 486                             	.LFB1:
 364:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
 487                             		.loc 1 364 0
 488                             	.LVL55:
 489 0000 6E 7B                   		pushm	r7-r11
 490                             	.LCFI3:
 380:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****   dimMax = DIM_MAX;
 491                             		.loc 1 380 0
 492 0002 FB 72 00 00 00 00       		mov.L	#_dimMax, r7
 493 0008 3D 70 00                		mov.W	#0, [r7]
 381:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****   dimMin = DIM_OFF;
 494                             		.loc 1 381 0
 495 000b FB 72 00 00 00 00       		mov.L	#_dimMin, r7
 496 0011 F8 79 3F 02             		mov.W	#0x23f, [r7]
 497                             	.LVL56:
 498 0015 FB F2 00 00 00 00       		mov.L	#_dimReg, r15
 416:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	for(i=0;i<PLPLoads;i++)
 499                             		.loc 1 416 0
 500 001b 66 05                   		mov.L	#0, r5
 501 001d FB 72 00 00 00 00       		mov.L	#_PLPLoads, r7
 502 0023 58 7A                   		movu.B	[r7], r10
 433:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		if(pPLPVar->pin==pin)
 503                             		.loc 1 433 0
 504 0025 5B 33                   		movu.B	r3, r3
 416:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	for(i=0;i<PLPLoads;i++)
 505                             		.loc 1 416 0
 506 0027 38 87 00                		bra	.L56
 507                             	.LVL57:
 508                             	.L64:
 419:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		pPLPVar = &PLPVar[i];
 509                             		.loc 1 419 0
 510 002a EF 5E                   		mov.L	r5, r14
 511 002c FD C5 57                		shll	#5, r5, r7
 512 002f 70 77 00 00 00 00       		add	#_PLPVar, r7
 513                             	.LVL58:
 428:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		if(dimReg[i] == 0xFFFF)                /* Initial condition */
 514                             		.loc 1 428 0
 515 0035 5C FB                   		movu.W	[r15], r11
 516 0037 77 0B FF FF 00          		cmp	#0xffff, r11
 517 003c 1E                      		bne	.L57
 430:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			dimReg[i] = dimMin;                  /* Variable initialization at application startup */
 518                             		.loc 1 430 0
 519 003d F8 F9 3F 02             		mov.W	#0x23f, [r15]
 520 0041 03                      		.balign 2,3,1
 521                             	.L57:
 522 0042 62 15                   		add	#1, r5
 523 0044 62 2F                   		add	#2, r15
 433:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		if(pPLPVar->pin==pin)
 524                             		.loc 1 433 0
 525 0046 58 7B                   		movu.B	[r7], r11
 526 0048 47 3B                   		cmp	r3, r11
 527 004a 21 64                   		bne	.L56
 435:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			if (!config)
 528                             		.loc 1 435 0
 529 004c 5B 22                   		movu.B	r2, r2
 530 004e 61 02                   		cmp	#0, r2
 531 0050 21 18                   		bne	.L58
 437:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				dimReg[i] = (uint16_t)( (on)?DIM_MAX:DIM_OFF );  /* config=0 -> Dimmer disabled, ON-OFF command
 532                             		.loc 1 437 0
 533 0052 5B 1A                   		movu.B	r1, r10
 534 0054 61 0A                   		cmp	#0, r10
 535 0056 1E                      		bne	.L59
 536 0057 FB 2A 3F 02             		mov	#0x23f, r2
 537                             	.LVL59:
 538 005b 03                      		.balign 2,3,2
 539                             	.L59:
 437:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 				dimReg[i] = (uint16_t)( (on)?DIM_MAX:DIM_OFF );  /* config=0 -> Dimmer disabled, ON-OFF command
 540                             		.loc 1 437 0 is_stmt 0 discriminator 3
 541 005c FF 2A EE                		add	r14, r14, r10
 542 005f 70 AA 00 00 00 00       		add	#_dimReg, r10
 543 0065 D3 A2                   		mov.W	r2, [r10]
 544 0067 03                      		.balign 2,3,5
 545                             	.L58:
 446:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		  dimStep[i] = *stepPart;
 546                             		.loc 1 446 0 is_stmt 1
 547 0068 70 EA 00 00 00 00       		add	#_dimStep, r14, r10
 548 006e C0 4A                   		mov.B	[r4], [r10]
 450:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		  if ((dimReg[i] == DIM_OFF) && (!on))
 549                             		.loc 1 450 0
 550 0070 FF 2A EE                		add	r14, r14, r10
 551 0073 70 AA 00 00 00 00       		add	#_dimReg, r10
 552 0079 5C AA                   		movu.W	[r10], r10
 553 007b 76 0A 3F 02             		cmp	#0x23f, r10
 554 007f 1A                      		bne	.L60
 450:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		  if ((dimReg[i] == DIM_OFF) && (!on))
 555                             		.loc 1 450 0 is_stmt 0 discriminator 1
 556 0080 5B 1A                   		movu.B	r1, r10
 557 0082 61 0A                   		cmp	#0, r10
 558 0084 1D                      		bne	.L60
 452:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			 pPLPVar->activated=0;              /* turn off load (without profile completion) */
 559                             		.loc 1 452 0 is_stmt 1
 560 0085 83 71                   		mov.B	r1, 12[r7]
 561 0087 2E 17                   		bra	.L61
 562                             	.L60:
 456:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			 pPLPVar->p_nextprof=&dimReg[i];    /* ptr to next profile */
 563                             		.loc 1 456 0
 564 0089 FF 2A EE                		add	r14, r14, r10
 565 008c 70 AA 00 00 00 00       		add	#_dimReg, r10
 566 0092 E7 7A 05                		mov.L	r10, 20[r7]
 457:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			 pPLPVar->toactivate=1;             /* book activation */
 567                             		.loc 1 457 0
 568 0095 3C 7D 01                		mov.B	#1, 13[r7]
 460:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		  OnOffStatus[i] = (uint8_t)( (on)?1:0 );    /* notify ON or OFF status */
 569                             		.loc 1 460 0
 570 0098 76 21 FF 00             		and #0xff, r1
 571                             	.LVL60:
 572 009c 1D                      		bne	.L66
 573 009d 03                      		.balign 2,3,1
 574                             	.L61:
 460:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		  OnOffStatus[i] = (uint8_t)( (on)?1:0 );    /* notify ON or OFF status */
 575                             		.loc 1 460 0 is_stmt 0 discriminator 2
 576 009e 66 07                   		mov	#0, r7
 577                             	.LVL61:
 578 00a0 0C                      		bra	.L62
 579                             	.LVL62:
 580                             	.L66:
 460:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		  OnOffStatus[i] = (uint8_t)( (on)?1:0 );    /* notify ON or OFF status */
 581                             		.loc 1 460 0
 582 00a1 66 17                   		mov	#1, r7
 583                             	.LVL63:
 584 00a3 03                      		.balign 2,3,5
 585                             	.L62:
 460:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		  OnOffStatus[i] = (uint8_t)( (on)?1:0 );    /* notify ON or OFF status */
 586                             		.loc 1 460 0 discriminator 3
 587 00a4 70 EE 00 00 00 00       		add	#_OnOffStatus, r14
 588                             	.LVL64:
 589 00aa C3 E7                   		mov.B	r7, [r14]
 461:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		  return;
 590                             		.loc 1 461 0 is_stmt 1 discriminator 3
 591 00ac 2E 0C                   		bra	.L55
 592                             	.LVL65:
 593                             	.L56:
 416:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	for(i=0;i<PLPLoads;i++)
 594                             		.loc 1 416 0 discriminator 1
 595 00ae 5B 57                   		movu.B	r5, r7
 596 00b0 47 7A                   		cmp	r7, r10
 597 00b2 25 05 38 76 FF          		bgtu	.L64
 598                             	.LVL66:
 599 00b7 03                      		.balign 2,3,2
 600                             	.L55:
 464:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** }
 601                             		.loc 1 464 0
 602 00b8 3F 7B 05                		rtsd	#20, r7-r11
 603                             	.LFE1:
 605 00bb 03                      		.section	.text.PM_PLP_Init,"ax",@progbits
 606                             		.global	_PM_PLP_Init
 608                             	_PM_PLP_Init:
 609                             	.LFB3:
 521:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
 610                             		.loc 1 521 0
 524:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     Init_PLP_DrvResources();
 611                             		.loc 1 524 0
 612 0000 05 00 00 00             		bsr	_Init_PLP_DrvResources
 613                             	.LVL67:
 529:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		PLPVar[i].pin=0xFF;
 614                             		.loc 1 529 0
 615 0004 FB E2 00 00 00 00       		mov.L	#_PLPVar, r14
 616 000a F8 E4 FF                		mov.B	#-1, [r14]
 531:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		PLPVar[i].pnxtld[0]=(PLP_LType*)NULL;
 617                             		.loc 1 531 0
 618 000d F9 E6 06 00             		mov.L	#0, 24[r14]
 532:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		PLPVar[i].pnxtld[1]=(PLP_LType*)NULL;
 619                             		.loc 1 532 0
 620 0011 F9 E6 07 00             		mov.L	#0, 28[r14]
 537:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			dimReg[i]=0xFFFF;
 621                             		.loc 1 537 0
 622 0015 FB 22 00 00 00 00       		mov.L	#_dimReg, r2
 623 001b F8 25 FF                		mov.W	#-1, [r2]
 538:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			dimStep[i]=0;
 624                             		.loc 1 538 0
 625 001e FB 32 00 00 00 00       		mov.L	#_dimStep, r3
 626 0024 3C 30 00                		mov.B	#0, [r3]
 539:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			OnOffStatus[i]=0;
 627                             		.loc 1 539 0
 628 0027 FB 42 00 00 00 00       		mov.L	#_OnOffStatus, r4
 629 002d 3C 40 00                		mov.B	#0, [r4]
 630                             	.LVL68:
 529:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		PLPVar[i].pin=0xFF;
 631                             		.loc 1 529 0
 632 0030 F9 E4 20 FF             		mov.B	#-1, 32[r14]
 531:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		PLPVar[i].pnxtld[0]=(PLP_LType*)NULL;
 633                             		.loc 1 531 0
 634 0034 F9 E6 0E 00             		mov.L	#0, 56[r14]
 532:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		PLPVar[i].pnxtld[1]=(PLP_LType*)NULL;
 635                             		.loc 1 532 0
 636 0038 F9 E6 0F 00             		mov.L	#0, 60[r14]
 537:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			dimReg[i]=0xFFFF;
 637                             		.loc 1 537 0
 638 003c F9 25 01 FF             		mov.W	#-1, 2[r2]
 538:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			dimStep[i]=0;
 639                             		.loc 1 538 0
 640 0040 3C 31 00                		mov.B	#0, 1[r3]
 539:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 			OnOffStatus[i]=0;
 641                             		.loc 1 539 0
 642 0043 3C 41 00                		mov.B	#0, 1[r4]
 643                             	.LVL69:
 644                             	.LBB20:
 645                             	.LBB21:
 567:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     Main_AddSequencerActivity ( &Act_PLP_Scheduler, &DIM_Scheduler );
 646                             		.loc 1 567 0
 647 0046 FB 12 00 00 00 00       		mov.L	#_Act_PLP_Scheduler, r1
 648 004c FB 22 00 00 00 00       		mov.L	#_DIM_Scheduler, r2
 649 0052 05 00 00 00             		bsr	_Main_AddSequencerActivity
 650                             	.LVL70:
 569:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     Act_PLP_Scheduler.profile=1;
 651                             		.loc 1 569 0
 652 0056 FB E2 00 00 00 00       		mov.L	#_Act_PLP_Scheduler, r14
 653 005c F9 E4 08 01             		mov.B	#1, 8[r14]
 654 0060 02                      		rts
 655                             	.LBE21:
 656                             	.LBE20:
 657                             	.LFE3:
 659                             		.section	.text.PM_PLP_LoadsToDrive,"ax",@progbits
 660                             		.global	_PM_PLP_LoadsToDrive
 662                             	_PM_PLP_LoadsToDrive:
 663                             	.LFB5:
 595:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
 664                             		.loc 1 595 0
 665                             	.LVL71:
 666 0000 FB E2 00 00 00 00       		mov.L	#_PLPVar+12, r14
 599:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	for(i=0; i<PLPLoads; i++)
 667                             		.loc 1 599 0
 668 0006 66 04                   		mov	#0, r4
 669 0008 FB 32 00 00 00 00       		mov.L	#_PLPLoads, r3
 670 000e 58 33                   		movu.B	[r3], r3
 671 0010 2E 18                   		bra	.L71
 672                             	.LVL72:
 673                             	.L73:
 601:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	  if(PLPVar[i].toactivate || PLPVar[i].activated)
 674                             		.loc 1 601 0
 675 0012 59 E2 01                		movu.B	1[r14], r2
 676 0015 61 02                   		cmp	#0, r2
 677 0017 21 1A                   		bne	.L75
 678 0019 71 EE 20                		add	#32, r14
 594:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** uint8_t PM_PLP_LoadsToDrive(void)
 679                             		.loc 1 594 0 discriminator 1
 680 001c 71 E2 E0                		add	#-32, r14, r2
 601:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	  if(PLPVar[i].toactivate || PLPVar[i].activated)
 681                             		.loc 1 601 0 discriminator 1
 682 001f 58 22                   		movu.B	[r2], r2
 683 0021 61 02                   		cmp	#0, r2
 684 0023 21 0E                   		bne	.L75
 599:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	for(i=0; i<PLPLoads; i++)
 685                             		.loc 1 599 0
 686 0025 62 14                   		add	#1, r4
 687                             	.LVL73:
 688 0027 03                      		.balign 2,3,1
 689                             	.L71:
 599:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	for(i=0; i<PLPLoads; i++)
 690                             		.loc 1 599 0 is_stmt 0 discriminator 1
 691 0028 5B 42                   		movu.B	r4, r2
 692 002a 47 32                   		cmp	r3, r2
 693 002c 21 E6                   		bne	.L73
 606:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	return FALSE;
 694                             		.loc 1 606 0 is_stmt 1
 695 002e 66 01                   		mov	#0, r1
 696 0030 0C                      		bra	.L72
 697                             	.L75:
 603:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	      return TRUE;
 698                             		.loc 1 603 0
 699 0031 66 11                   		mov	#1, r1
 700 0033 03                      		.balign 2,3,1
 701                             	.L72:
 607:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** }
 702                             		.loc 1 607 0
 703 0034 64 11                   		and #1, r1
 704 0036 02                      		rts
 705                             	.LFE5:
 707 0037 03                      		.section	.text.PM_PLP_Init_OnWarmReset,"ax",@progbits
 708                             		.global	_PM_PLP_Init_OnWarmReset
 710                             	_PM_PLP_Init_OnWarmReset:
 711                             	.LFB2:
 489:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
 712                             		.loc 1 489 0
 490:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	Init_PLP_DrvResources();
 713                             		.loc 1 490 0
 714 0000 05 00 00 00             		bsr	_Init_PLP_DrvResources
 715                             	.LVL74:
 492:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	if(PM_PLP_LoadsToDrive() == TRUE)
 716                             		.loc 1 492 0
 717 0004 05 00 00 00             		bsr	_PM_PLP_LoadsToDrive
 718                             	.LVL75:
 719 0008 5B 12                   		movu.B	r1, r2
 720 000a 61 12                   		cmp	#1, r2
 721 000c 21 0E                   		bne	.L77
 494:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 		(void)OCOCU_EnableISR(CONFIG_PM_PLP_TMR_CH_ID, TMR_CH_ISR_ENABLE, PLP_OCU_Event);
 722                             		.loc 1 494 0
 723 000e 66 01                   		mov	#0, r1
 724 0010 FB 32 00 00 00 00       		mov.L	#_PLP_OCU_Event, r3
 725 0016 05 00 00 00             		bsr	_OCICU_EnableISR
 726                             	.LVL76:
 727                             		.balign 2,3,5
 728                             	.L77:
 729                             	.LBB24:
 730                             	.LBB25:
 567:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     Main_AddSequencerActivity ( &Act_PLP_Scheduler, &DIM_Scheduler );
 731                             		.loc 1 567 0
 732 001a FB 12 00 00 00 00       		mov.L	#_Act_PLP_Scheduler, r1
 733 0020 FB 22 00 00 00 00       		mov.L	#_DIM_Scheduler, r2
 734 0026 05 00 00 00             		bsr	_Main_AddSequencerActivity
 735                             	.LVL77:
 569:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c ****     Act_PLP_Scheduler.profile=1;
 736                             		.loc 1 569 0
 737 002a FB E2 00 00 00 00       		mov.L	#_Act_PLP_Scheduler, r14
 738 0030 F9 E4 08 01             		mov.B	#1, 8[r14]
 739 0034 02                      		rts
 740                             	.LBE25:
 741                             	.LBE24:
 742                             	.LFE2:
 744 0035 03                      		.section	.text.PLP_ISR,"ax",@progbits
 745                             		.global	_PLP_ISR
 747                             	_PLP_ISR:
 748                             	.LFB8:
1006:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** {
 749                             		.loc 1 1006 0
1008:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_ProfileLoadsPartialization\PM_ProfileLoadsPartialization.c **** 	(void)(PLP_OCU_Event)((IO_NotificationType)0, (IO_ChannelType)0, (IO_ErrorType)0);
 750                             		.loc 1 1008 0
 751 0000 66 01                   		mov	#0, r1
 752 0002 CF 12                   		mov.B	r1, r2
 753 0004 CF 13                   		mov.B	r1, r3
 754 0006 04 00 00 00             		bra	_PLP_OCU_Event
 755                             	.LVL78:
 756                             	.LFE8:
 758                             		.global	_dimMin
 759                             		.section	.data.dimMin,"aw",@progbits
 760                             		.balign 2
 763                             	_dimMin:
 764 0000 02 3F                   		.short	0x23f
 765                             		.global	_dimMax
 766                             		.section	.bss.dimMax,"aw",@nobits
 767                             		.balign 2
 770                             	_dimMax:
 771 0000 00 00                   		.zero	2
 772                             		.comm	_OnOffStatus,2,1
 773                             		.comm	_dimStep,2,1
 774                             		.comm	_dimReg,4,2
 775                             		.global	_PLPLoads
 776                             		.section	.bss.PLPLoads,"aw",@nobits
 779                             	_PLPLoads:
 780 0000 00                      		.zero	1
 781                             		.comm	_PLPVar,64,4
 782                             		.comm	_PLPScheduler,16,4
 783                             		.global	_OcuPLP_cfg
 784                             		.section	.data.OcuPLP_cfg,"aw",@progbits
 787                             	_OcuPLP_cfg:
 788 0000 00                      		.byte	0
 789 0001 01                      		.byte	1
 790                             		.section	.bss.Act_PLP_Scheduler,"aw",@nobits
 791                             		.balign 4
 794                             	_Act_PLP_Scheduler:
 795 0000 00 00 00 00 00 00 00 00 		.zero	16
 795      00 00 00 00 00 00 00 00 
 942                             	.Letext0:
 943                             		.file 2 "C:\\Workspace\\FW_Inertia\\branch_indesit\\HAL\\HAL_General/StandardTypes.h"
 944                             		.file 3 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Main\\EmbOS\\Services\\ActivityList/Main_Activ
 945                             		.file 4 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Main\\EmbOS/MainInterface.h"
 946                             		.file 5 "C:\\Workspace\\FW_Inertia\\branch_indesit\\HAL\\RN_RX200/RN_RX200_cfg.h"
 947                             		.file 6 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Drivers/IO_driver.h"
 948                             		.file 7 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Drivers\\OCTPM/OCTPM_drv.h"
 949                             		.file 8 "C:\\Workspace\\FW_Inertia\\branch_indesit\\PlatformLibrary\\LIB_ZeroCrossing/LIB_ZeroCros
 950                             		.file 9 "C:\\Workspace\\FW_Inertia\\branch_indesit\\PlatformLibrary\\LIB_DigitalIO/DigitalOutputs.
 951                             		.file 10 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Drivers\\OCIRQ/OCIRQ_drv.h"
DEFINED SYMBOLS
                            *ABS*:00000000 PM_ProfileLoadsPartialization.c
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:7      .text.DIM_Scheduler:00000000 _DIM_Scheduler
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:11     .text.DIM_Scheduler:00000000 L0
                            *COM*:00000010 _PLPScheduler
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:779    .bss.PLPLoads:00000000 _PLPLoads
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:770    .bss.dimMax:00000000 _dimMax
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:763    .data.dimMin:00000000 _dimMin
                            *COM*:00000040 _PLPVar
                            *COM*:00000004 _dimReg
                            *COM*:00000002 _OnOffStatus
                            *COM*:00000002 _dimStep
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:217    .text.PLP_OCU_Event:00000000 _PLP_OCU_Event
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:221    .text.PLP_OCU_Event:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:426    .text.Init_PLP_DrvResources:00000000 _Init_PLP_DrvResources
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:430    .text.Init_PLP_DrvResources:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:787    .data.OcuPLP_cfg:00000000 _OcuPLP_cfg
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:453    .text.PM_PLP_InsertLoad:00000000 _PM_PLP_InsertLoad
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:458    .text.PM_PLP_InsertLoad:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:485    .text.PM_DIM_SetLoad:00000000 _PM_DIM_SetLoad
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:489    .text.PM_DIM_SetLoad:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:608    .text.PM_PLP_Init:00000000 _PM_PLP_Init
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:612    .text.PM_PLP_Init:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:794    .bss.Act_PLP_Scheduler:00000000 _Act_PLP_Scheduler
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:662    .text.PM_PLP_LoadsToDrive:00000000 _PM_PLP_LoadsToDrive
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:666    .text.PM_PLP_LoadsToDrive:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:710    .text.PM_PLP_Init_OnWarmReset:00000000 _PM_PLP_Init_OnWarmReset
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:714    .text.PM_PLP_Init_OnWarmReset:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:747    .text.PLP_ISR:00000000 _PLP_ISR
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:751    .text.PLP_ISR:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:797    .debug_frame:00000000 .Lframe0
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:8      .text.DIM_Scheduler:00000000 .LFB6
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:218    .text.PLP_OCU_Event:00000000 .LFB7
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:427    .text.Init_PLP_DrvResources:00000000 .LFB13
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:454    .text.PM_PLP_InsertLoad:00000000 .LFB0
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:486    .text.PM_DIM_SetLoad:00000000 .LFB1
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:609    .text.PM_PLP_Init:00000000 .LFB3
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:663    .text.PM_PLP_LoadsToDrive:00000000 .LFB5
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:711    .text.PM_PLP_Init_OnWarmReset:00000000 .LFB2
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:748    .text.PLP_ISR:00000000 .LFB8
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:2336   .debug_abbrev:00000000 .Ldebug_abbrev0
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3708   .debug_str:00000217 .LASF130
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3870   .debug_str:00000690 .LASF131
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3582   .debug_ranges:00000000 .Ldebug_ranges0
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3628   .debug_line:00000000 .Ldebug_line0
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3802   .debug_str:00000502 .LASF0
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3688   .debug_str:0000018f .LASF2
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3736   .debug_str:00000326 .LASF1
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3826   .debug_str:00000592 .LASF3
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3668   .debug_str:00000121 .LASF4
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3680   .debug_str:0000016f .LASF5
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3654   .debug_str:000000b0 .LASF6
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3662   .debug_str:000000ff .LASF7
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3882   .debug_str:00000745 .LASF8
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3796   .debug_str:000004e5 .LASF9
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3868   .debug_str:00000689 .LASF10
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3664   .debug_str:0000010d .LASF11
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3800   .debug_str:000004fa .LASF12
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3672   .debug_str:00000141 .LASF13
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3718   .debug_str:00000266 .LASF14
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3766   .debug_str:00000411 .LASF15
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3836   .debug_str:000005cb .LASF16
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3758   .debug_str:000003d8 .LASF17
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3856   .debug_str:00000631 .LASF18
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3774   .debug_str:0000043c .LASF23
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3630   .debug_str:00000000 .LASF19
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3830   .debug_str:000005a9 .LASF20
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3632   .debug_str:00000006 .LASF21
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3754   .debug_str:000003ae .LASF22
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3888   .debug_str:0000075c .LASF24
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3686   .debug_str:00000186 .LASF25
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3716   .debug_str:0000025e .LASF26
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3788   .debug_str:000004a9 .LASF27
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3710   .debug_str:0000023d .LASF28
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3862   .debug_str:0000065d .LASF29
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3764   .debug_str:00000407 .LASF132
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3700   .debug_str:000001ec .LASF30
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3784   .debug_str:0000048c .LASF31
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3858   .debug_str:00000643 .LASF32
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3732   .debug_str:00000301 .LASF33
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3646   .debug_str:0000007c .LASF34
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3660   .debug_str:000000ec .LASF35
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3722   .debug_str:0000028f .LASF36
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3786   .debug_str:00000496 .LASF37
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3898   .debug_str:000007bb .LASF38
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3890   .debug_str:00000779 .LASF39
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3752   .debug_str:00000396 .LASF40
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3842   .debug_str:000005de .LASF41
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3636   .debug_str:00000025 .LASF42
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3900   .debug_str:000007cd .LASF43
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3738   .debug_str:00000339 .LASF44
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3794   .debug_str:000004d0 .LASF45
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3792   .debug_str:000004c2 .LASF46
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3878   .debug_str:00000729 .LASF47
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3860   .debug_str:00000650 .LASF48
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3742   .debug_str:00000351 .LASF49
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3872   .debug_str:00000704 .LASF50
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3726   .debug_str:000002bb .LASF51
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3694   .debug_str:000001b4 .LASF52
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3866   .debug_str:00000678 .LASF53
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3820   .debug_str:00000568 .LASF54
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3776   .debug_str:00000450 .LASF55
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3656   .debug_str:000000c7 .LASF56
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3812   .debug_str:00000531 .LASF57
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3816   .debug_str:00000551 .LASF58
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3692   .debug_str:000001a7 .LASF59
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3640   .debug_str:0000004c .LASF60
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3896   .debug_str:000007ac .LASF61
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3892   .debug_str:0000078f .LASF62
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3822   .debug_str:00000574 .LASF63
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3828   .debug_str:0000059b .LASF64
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3798   .debug_str:000004f3 .LASF65
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3806   .debug_str:00000518 .LASF66
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3748   .debug_str:0000037a .LASF67
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3880   .debug_str:00000735 .LASF68
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3658   .debug_str:000000d4 .LASF69
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3728   .debug_str:000002ce .LASF70
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3778   .debug_str:00000465 .LASF71
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3844   .debug_str:000005f8 .LASF72
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3756   .debug_str:000003c9 .LASF73
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3834   .debug_str:000005bf .LASF74
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3824   .debug_str:00000586 .LASF75
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3894   .debug_str:000007a2 .LASF76
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3762   .debug_str:000003fc .LASF77
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3874   .debug_str:00000717 .LASF78
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3818   .debug_str:0000055d .LASF79
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3808   .debug_str:00000521 .LASF80
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3760   .debug_str:000003f2 .LASF81
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3832   .debug_str:000005b3 .LASF82
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3676   .debug_str:00000151 .LASF83
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3684   .debug_str:0000017f .LASF84
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3854   .debug_str:00000629 .LASF85
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3876   .debug_str:0000071f .LASF86
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3670   .debug_str:00000133 .LASF99
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:213    .text.DIM_Scheduler:0000014d .LFE6
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3127   .debug_loc:00000000 .LLST0
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3652   .debug_str:000000a8 .LASF87
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3145   .debug_loc:0000002c .LLST1
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3884   .debug_str:0000074d .LASF88
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3152   .debug_loc:0000003f .LLST2
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3850   .debug_str:0000061b .LASF89
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3175   .debug_loc:0000007a .LLST3
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:18     .text.DIM_Scheduler:00000009 .LVL1
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3846   .debug_str:00000607 .LASF91
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3634   .debug_str:00000020 .LASF94
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3714   .debug_str:00000255 .LASF90
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3864   .debug_str:0000066c .LASF92
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3768   .debug_str:0000041a .LASF93
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3770   .debug_str:00000424 .LASF95
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3740   .debug_str:00000343 .LASF133
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:422    .text.PLP_OCU_Event:00000115 .LFE7
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3186   .debug_loc:00000098 .LLST4
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3674   .debug_str:00000148 .LASF96
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3199   .debug_loc:000000b8 .LLST5
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3848   .debug_str:00000616 .LASF97
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3213   .debug_loc:000000d9 .LLST6
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3810   .debug_str:00000528 .LASF98
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3227   .debug_loc:000000fa .LLST7
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3241   .debug_loc:0000011b .LLST8
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:231    .text.PLP_OCU_Event:0000000f .LBB8
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3262   .debug_loc:00000151 .LLST10
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3282   .debug_loc:00000189 .LLST11
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3295   .debug_loc:000001af .LLST12
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:281    .text.PLP_OCU_Event:0000005e .LBB10
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3321   .debug_loc:000001eb .LLST13
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3332   .debug_loc:00000209 .LLST14
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:286    .text.PLP_OCU_Event:00000064 .LVL21
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:319    .text.PLP_OCU_Event:00000090 .LVL27
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:257    .text.PLP_OCU_Event:00000034 .LVL17
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:339    .text.PLP_OCU_Event:000000a6 .LBB15
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:405    .text.PLP_OCU_Event:00000102 .LBE15
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3343   .debug_loc:00000227 .LLST15
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:340    .text.PLP_OCU_Event:000000a6 .LBB16
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:404    .text.PLP_OCU_Event:00000102 .LBE16
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3360   .debug_loc:00000252 .LLST16
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3371   .debug_loc:00000270 .LLST17
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:364    .text.PLP_OCU_Event:000000cf .LVL34
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:374    .text.PLP_OCU_Event:000000da .LVL36
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:378    .text.PLP_OCU_Event:000000df .LVL37
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:391    .text.PLP_OCU_Event:000000f2 .LVL41
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:400    .text.PLP_OCU_Event:00000100 .LVL43
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:225    .text.PLP_OCU_Event:00000006 .LVL13
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3746   .debug_str:00000364 .LASF134
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:448    .text.Init_PLP_DrvResources:00000022 .LFE13
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:432    .text.Init_PLP_DrvResources:00000006 .LVL47
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:436    .text.Init_PLP_DrvResources:00000010 .LVL48
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:441    .text.Init_PLP_DrvResources:00000018 .LVL49
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:447    .text.Init_PLP_DrvResources:00000022 .LVL50
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3772   .debug_str:0000042a .LASF100
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:480    .text.PM_PLP_InsertLoad:00000023 .LFE0
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3648   .debug_str:0000008f .LASF101
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3387   .debug_loc:0000029a .LLST18
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3704   .debug_str:00000206 .LASF102
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3401   .debug_loc:000002bb .LLST19
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3696   .debug_str:000001c3 .LASF103
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:603    .text.PM_DIM_SetLoad:000000bb .LFE1
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3408   .debug_loc:000002ce .LLST20
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3421   .debug_loc:000002ee .LLST21
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3840   .debug_str:000005d7 .LASF104
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3446   .debug_loc:00000328 .LLST22
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3706   .debug_str:0000020e .LASF105
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3471   .debug_loc:00000362 .LLST23
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3479   .debug_loc:00000376 .LLST24
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3682   .debug_str:00000178 .LASF106
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3650   .debug_str:00000094 .LASF135
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3790   .debug_str:000004b6 .LASF107
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:657    .text.PM_PLP_Init:00000061 .LFE3
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3523   .debug_loc:000003d3 .LLST25
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:644    .text.PM_PLP_Init:00000046 .LBB20
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:656    .text.PM_PLP_Init:00000061 .LBE20
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:650    .text.PM_PLP_Init:00000056 .LVL70
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:613    .text.PM_PLP_Init:00000004 .LVL67
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3724   .debug_str:000002a7 .LASF136
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:705    .text.PM_PLP_LoadsToDrive:00000037 .LFE5
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3541   .debug_loc:000003ff .LLST26
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3678   .debug_str:00000157 .LASF108
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:742    .text.PM_PLP_Init_OnWarmReset:00000035 .LFE2
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:729    .text.PM_PLP_Init_OnWarmReset:0000001a .LBB24
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:741    .text.PM_PLP_Init_OnWarmReset:00000035 .LBE24
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:735    .text.PM_PLP_Init_OnWarmReset:0000002a .LVL77
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:715    .text.PM_PLP_Init_OnWarmReset:00000004 .LVL74
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:718    .text.PM_PLP_Init_OnWarmReset:00000008 .LVL75
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:726    .text.PM_PLP_Init_OnWarmReset:0000001a .LVL76
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3744   .debug_str:0000035c .LASF109
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:756    .text.PLP_ISR:0000000a .LFE8
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:755    .text.PLP_ISR:0000000a .LVL78
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3902   .debug_str:000007dd .LASF110
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3642   .debug_str:00000060 .LASF111
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3750   .debug_str:00000389 .LASF112
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3852   .debug_str:00000622 .LASF113
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3886   .debug_str:00000753 .LASF114
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3712   .debug_str:0000024e .LASF115
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3666   .debug_str:00000119 .LASF116
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3804   .debug_str:0000050c .LASF117
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3782   .debug_str:00000485 .LASF118
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3838   .debug_str:000005d0 .LASF119
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3638   .debug_str:0000003a .LASF122
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3814   .debug_str:00000540 .LASF120
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3780   .debug_str:00000475 .LASF125
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3734   .debug_str:00000313 .LASF121
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3730   .debug_str:000002e5 .LASF123
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3720   .debug_str:00000273 .LASF124
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3644   .debug_str:0000006b .LASF126
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3690   .debug_str:00000198 .LASF127
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3702   .debug_str:000001f4 .LASF128
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:3698   .debug_str:000001d2 .LASF129
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:12     .text.DIM_Scheduler:00000002 .LCFI0
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:14     .text.DIM_Scheduler:00000005 .LCFI1
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:53     .text.DIM_Scheduler:00000064 .LVL2
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:15     .text.DIM_Scheduler:00000005 .LVL0
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:65     .text.DIM_Scheduler:0000007a .LVL3
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:187    .text.DIM_Scheduler:0000012d .LVL8
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:193    .text.DIM_Scheduler:00000132 .LVL9
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:202    .text.DIM_Scheduler:0000013f .LVL10
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:208    .text.DIM_Scheduler:0000014a .LVL11
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:154    .text.DIM_Scheduler:0000010a .LVL4
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:178    .text.DIM_Scheduler:00000126 .LVL5
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:180    .text.DIM_Scheduler:00000128 .LVL6
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:183    .text.DIM_Scheduler:0000012a .LVL7
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:222    .text.PLP_OCU_Event:00000002 .LCFI2
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:220    .text.PLP_OCU_Event:00000000 .LVL12
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:230    .text.PLP_OCU_Event:0000000f .LVL14
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:355    .text.PLP_OCU_Event:000000bc .LVL32
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:357    .text.PLP_OCU_Event:000000be .LVL33
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:368    .text.PLP_OCU_Event:000000d3 .LVL35
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:394    .text.PLP_OCU_Event:000000f4 .LVL42
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:402    .text.PLP_OCU_Event:00000102 .LVL44
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:415    .text.PLP_OCU_Event:00000110 .LVL46
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:236    .text.PLP_OCU_Event:00000018 .LVL15
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:279    .text.PLP_OCU_Event:0000005e .LVL20
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:293    .text.PLP_OCU_Event:0000006b .LVL24
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:299    .text.PLP_OCU_Event:0000006d .LVL25
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:305    .text.PLP_OCU_Event:00000079 .LVL26
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:410    .text.PLP_OCU_Event:00000108 .LVL45
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:250    .text.PLP_OCU_Event:0000002c .LVL16
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:267    .text.PLP_OCU_Event:0000004a .LVL18
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:330    .text.PLP_OCU_Event:0000009f .LVL29
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:324    .text.PLP_OCU_Event:00000096 .LVL28
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:336    .text.PLP_OCU_Event:000000a6 .LVL30
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:344    .text.PLP_OCU_Event:000000af .LVL31
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:382    .text.PLP_OCU_Event:000000e4 .LVL38
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:386    .text.PLP_OCU_Event:000000e8 .LVL39
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:389    .text.PLP_OCU_Event:000000ee .LVL40
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:456    .text.PM_PLP_InsertLoad:00000000 .LVL51
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:469    .text.PM_PLP_InsertLoad:00000018 .LVL53
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:466    .text.PM_PLP_InsertLoad:00000016 .LVL52
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:477    .text.PM_PLP_InsertLoad:00000022 .LVL54
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:490    .text.PM_DIM_SetLoad:00000002 .LCFI3
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:488    .text.PM_DIM_SetLoad:00000000 .LVL55
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:571    .text.PM_DIM_SetLoad:0000009c .LVL60
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:592    .text.PM_DIM_SetLoad:000000ae .LVL65
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:598    .text.PM_DIM_SetLoad:000000b7 .LVL66
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:537    .text.PM_DIM_SetLoad:0000005b .LVL59
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:497    .text.PM_DIM_SetLoad:00000015 .LVL56
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:507    .text.PM_DIM_SetLoad:0000002a .LVL57
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:513    .text.PM_DIM_SetLoad:00000035 .LVL58
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:577    .text.PM_DIM_SetLoad:000000a0 .LVL61
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:579    .text.PM_DIM_SetLoad:000000a1 .LVL62
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:583    .text.PM_DIM_SetLoad:000000a3 .LVL63
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:588    .text.PM_DIM_SetLoad:000000aa .LVL64
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:630    .text.PM_PLP_Init:00000030 .LVL68
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:643    .text.PM_PLP_Init:00000046 .LVL69
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:665    .text.PM_PLP_LoadsToDrive:00000000 .LVL71
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:672    .text.PM_PLP_LoadsToDrive:00000012 .LVL72
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:953    .debug_info:00000000 .Ldebug_info0
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:338    .text.PLP_OCU_Event:000000a6 .LBE8
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:406    .text.PLP_OCU_Event:00000102 .LBB17
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:418    .text.PLP_OCU_Event:00000110 .LBE17
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:232    .text.PLP_OCU_Event:0000000f .LBB9
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:337    .text.PLP_OCU_Event:000000a6 .LBE9
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:407    .text.PLP_OCU_Event:00000102 .LBB14
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:417    .text.PLP_OCU_Event:00000110 .LBE14
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:296    .text.PLP_OCU_Event:0000006b .LBE10
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:301    .text.PLP_OCU_Event:00000073 .LBB13
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:321    .text.PLP_OCU_Event:00000090 .LBE13
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:282    .text.PLP_OCU_Event:0000005e .LBB11
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:295    .text.PLP_OCU_Event:0000006b .LBE11
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:302    .text.PLP_OCU_Event:00000073 .LBB12
C:\Users\Andrea\AppData\Local\Temp\ccm3O3Us.s:320    .text.PLP_OCU_Event:00000090 .LBE12

UNDEFINED SYMBOLS
_OCIRQ_GetEdgeSync
_LIB_DIO_SET_LOAD
_OCICU_EnableISR
_OCOCU_SetEventSync
_LIB_ZC_GetHalfWaveLengthNeg
_LIB_ZC_GetHalfWaveLengthPos
_OCOCU_DeInitSync
_OCOCU_InitSync
_OCOCU_SetModeSync
_Main_AddSequencerActivity

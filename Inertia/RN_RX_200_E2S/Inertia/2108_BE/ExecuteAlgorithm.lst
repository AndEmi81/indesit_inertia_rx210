   1                             		.file	"ExecuteAlgorithm.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.AAL_LevToTimeRefUpdate,"ax",@progbits
   5                             		.global	_AAL_LevToTimeRefUpdate
   7                             	_AAL_LevToTimeRefUpdate:
   8                             	.LFB2:
   9                             		.file 1 "C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules/ExecuteAlgorithm.c"
   1:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /**
   2:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** Source File 
   3:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
   4:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \file    ActivateAlgorithm.c
   5:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \ingroup ActivateAlgorithm
   6:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \date    17/03/2008
   7:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \author  Valeria Catani
   8:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \version 1.0.0
   9:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** */
  10:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
  11:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /*
  12:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** Copyright (c) 2004-2008, Indesit Company, EDT.
  13:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** Tutti i diritti sono riservati. All rights reserved.
  14:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** */
  15:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
  16:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* Old Versions
  17:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \version 
  18:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \date    
  19:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \author  
  20:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** */
  21:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
  22:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* ******** */
  23:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* Includes */
  24:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* ******** */
  25:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
  26:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #include "CstmHeaders.h"
  27:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #include "PM_PulseCounterExp.h"
  28:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
  29:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* ****************** */
  30:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* Defines and Macros */
  31:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* ****************** */
  32:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
  33:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #define AAL_GET_ALG_CODE(p)		OFFS_B((p), 0)
  34:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #define AAL_GET_ALG_DATA(p)		OFFS_B((p), 1)
  35:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
  36:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #define TOUT_STAB_SENS_FILTER 	(OFFS_B(dirty_foam_setting_data.Data,3) & 0x7F)/*2sec*/
  37:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
  38:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #define TOUT_STAB_STATO3_FILTER  (OFFS_B(Tab_HWCVS_data.Data, 0)& 0x7F)/* def 5 sec */
  39:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #define TOUT_END_ALYS3 			 ((dirty_foam_setting_data.DataLenght>2)?(OFFS_W(dirty_foam_setting_data.
  40:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** enum
  41:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** {
  42:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	WASH_PUMP_ALG=0,
  43:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	DRAIN_PUMP_ALG
  44:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** };
  45:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
  46:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** enum AAL_TURBIDITY_ID_INDX
  47:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** {
  48:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     AAL_TURBIDITY_ONE_SHOT_R_ID=0,
  49:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     AAL_TURBIDITY_CONT_R_ID,
  50:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     AAL_TURBIDITY_VALIDATION_ID,
  51:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     AAL_TURBIDITY_ID_NUM
  52:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** };
  53:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
  54:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
  55:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* *************************** */
  56:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* Typedef, Structs and Unions */
  57:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* *************************** */
  58:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** struct _Aal_TurbidityRead_s
  59:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** {
  60:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     uint8_t idReading[AAL_TURBIDITY_ID_NUM];   /*  0: one shot;  
  61:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                                 1: continuous   
  62:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                                 2: validation */
  63:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** };
  64:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
  65:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** typedef struct _Aal_TurbidityRead_s Aal_TurbidityRead_t;
  66:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* **************************** */
  67:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* Prototype of local functions */
  68:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* **************************** */
  69:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
  70:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* Algoritmi */
  71:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
  72:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** void AAL_Dirty_Foam_identify(uint8_t cmd);
  73:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #if (VIRTUAL_SENSOR_ENABLE == 1)
  74:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** static void AAL_Load_Restore (void);
  75:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** static void AAL_Load_Var_Init (void);
  76:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #endif
  77:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
  78:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* Generale */
  79:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** uint8_t ReadTurbidityManager(uint8_t cmd, uint8_t alg);
  80:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
  81:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
  82:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* ****************** */
  83:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* Exported variables */
  84:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* ****************** */
  85:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
  86:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* Algorithm Tables */
  87:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** const ALGORITHM_PTR AAL_algList[] = {
  88:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
  89:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	AAL_TurbiditySensorCalibration,     /* Alg 0 - Calibratione sensore di torbidit√† */
  90:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	AAL_LevToTimeRefUpdate,             /* Alg 1 - Calcolo tempo per pieno - portata */
  91:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	AAL_Dirty_Foam_identify,			/* Alg 2 - Riconoscimento sporco /schiuma */
  92:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	NullFunc,			                /* Alg 3 */
  93:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	AAL_ReadVirtualSensor,	            /* EA per provaAlg 4 - Lettura del sensore virtuale */
  94:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	AAL_ReadTurbidityContinuous,        /* Alg 5 - Lettura continua sensore di torbidit√† */
  95:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	AAL_ReadTurbidityOneShot,		    /* Alg 6 - Lettura one shot sensore di torbidit√† */
  96:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	AAL_ValidateTurbidityCalibration,	/* Alg 7 - Validazione sensore di torbidit√† */
  97:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****    
  98:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	
  99:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	
 100:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** };
 101:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* **************** */
 102:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* Global variables */
 103:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* **************** */
 104:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 105:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 106:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /**/
 107:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** Aal_TurbidityRead_t Aal_TurbidityRead;
 108:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 109:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* ***************** */
 110:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* Exported function */
 111:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* ***************** */
 112:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 113:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** void AAL_ReadVirtualSensor(uint8_t cmd)
 114:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** {
 115:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		
 116:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	switch(cmd)
 117:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     {
 118:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         case AAL_ALG_INIT:
 119:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		/* qui parte il timer */
 120:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  {
 121:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			Loader_Struct ReadVSDataLoader;
 122:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			if (HWC_Flags.bit.vs_wash_presence )
 123:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			{
 124:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				CLRBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS); /* reset flag overflow ripristini */	
 125:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			}
 126:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			CLRBIT(Flags_1,JIF_FLAG1_ALGO_DIRTY_F_KO_POS); /* reset flag vuoto sensore in lavaggio */
 127:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			if(BasicLoader(PTR_ALGORITHM_READ_VS_DATA, AADisplParams[AAL_READVIRTUALSENSOR_ALG][0] , &ReadVS
 128:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 129:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			{
 130:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		        SETBIT(TerminatedAlgorithmBmp[0], AAL_READVIRTUALSENSOR_ALG);
 131:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		        CLRBIT(ActiveAlgorithmBmp[0],AAL_READVIRTUALSENSOR_ALG);
 132:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			}
 133:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			else
 134:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			{ /* OK */
 135:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #if (VIRTUAL_SENSOR_ENABLE == 1)
 136:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			 (void)SWTC_SetMValue((SWTC_CountersType)READ_VS_M_TIMER, (SWTC_MCounterValue)OFFS_W(ReadVSDataL
 137:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  ReadVS_Data.pumpType=(OFFS_B(ReadVSDataLoader.Data, 0)&0x80)?DRAIN_PUMP_ALG:WASH_PUMP_ALG;
 138:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  ReadVS_Data.targetSpeed =(uint16_t)OFFS_B(ReadVSDataLoader.Data,2)*PUMP_CTRL_BLDC_SPEED_MUL;
 139:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  ReadVS_Data.targetRamp = OFFS_B(ReadVSDataLoader.Data,3)*PUMP_CTRL_BLDC_RAMP_TIME_MUL;
 140:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  ReadVS_Data.ctrl_active =  (OFFS_B(ReadVSDataLoader.Data,4)& 0x80)>>7;
 141:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #endif
 142:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		    }
 143:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  }
 144:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  break;
 145:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #if (VIRTUAL_SENSOR_ENABLE == 1)
 146:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  case AAL_ALG_MONITOR:
 147:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  	
 148:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			if (uPDoorStatus == UP_DOOR_WAIT)
 149:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  	{/* porta aperta o in attesa di timeout dopo la chiusura o delay MR-> il uP va sospeso */
 150:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****    
 151:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				(void)SWTC_Stop((SWTC_CountersType)READ_VS_M_TIMER);
 152:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				return ;
 153:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			    
 154:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			}
 155:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  (void)SWTC_Run((SWTC_CountersType)READ_VS_M_TIMER);
 156:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****           {
 157:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  uint8_t index = (ReadVS_Data.pumpType==DRAIN_PUMP_ALG)?DRAIN_BLDC_PUMP:WASH_BLDC_PUMP;
 158:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  uint16_t speed, time;
 159:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  
 160:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****  			  if(SWTC_IsExpired((SWTC_CountersType)READ_VS_M_TIMER) && (ReadVS_Data.ctrl_active==0))
 161:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  {
 162:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				  speed = 0;
 163:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				  time = 0;
 164:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				  (void)SWTC_Stop((SWTC_CountersType)READ_VS_M_TIMER);
 165:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		          SETBIT(TerminatedAlgorithmBmp[0], AAL_READVIRTUALSENSOR_ALG);
 166:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		          CLRBIT(ActiveAlgorithmBmp[0],AAL_READVIRTUALSENSOR_ALG);
 167:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  }
 168:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  else
 169:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  {
 170:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				  speed = ReadVS_Data.targetSpeed;
 171:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				  time = ReadVS_Data.targetRamp;
 172:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  }
 173:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  
 174:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  SET_BLDC_SPEED(BLDC_PumpReq_New[index],speed);
 175:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  SET_BLDC_TIME(BLDC_PumpReq_New[index],time);
 176:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  }		  
 177:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  break;
 178:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #endif
 179:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  default:	
 180:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****           case AAL_ALG_DISABLE:
 181:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  SETBIT(TerminatedAlgorithmBmp[0], AAL_READVIRTUALSENSOR_ALG);
 182:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	          CLRBIT(ActiveAlgorithmBmp[0],AAL_READVIRTUALSENSOR_ALG);
 183:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  break;
 184:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	}	 
 185:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** }
 186:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 187:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 188:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /**
 189:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** Funzione di richiesta calibrazione del sensore di torbidit√†
 190:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 191:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \version		1.0.0
 192:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \date 			05/05/2008
 193:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \author			Roberto Fioravanti
 194:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** */
 195:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /*lint -e715
 196:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** Elimina il warning sul parametro cmd che non viene utilizzato
 197:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** */
 198:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** void AAL_TurbiditySensorCalibration(uint8_t cmd)
 199:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** {
 200:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****   
 201:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     if(!HWC_Flags.bit.turbsens)
 202:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     {
 203:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         /*esecuzione istantanea nell'ambito del passo */
 204:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         SETBIT(TerminatedAlgorithmBmp[0], AAL_TURBIDITY_SENSOR_CAL_ALG);
 205:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         CLRBIT(ActiveAlgorithmBmp[0],AAL_TURBIDITY_SENSOR_CAL_ALG);
 206:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         return;
 207:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     }
 208:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****   
 209:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     if ( cmd == (uint8_t)AAL_ALG_INIT )
 210:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     {
 211:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****       TurbidityCalibrationCmd();
 212:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     }
 213:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     else
 214:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     {
 215:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****       if ( TurbiditySensorCal.state == (uint8_t)TURBSENS_VALID_CALIBR_VALUE_STATE )
 216:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****       {
 217:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             /*esecuzione istantanea nell'ambito del passo */
 218:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             SETBIT(TerminatedAlgorithmBmp[0], AAL_TURBIDITY_SENSOR_CAL_ALG);
 219:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             CLRBIT(ActiveAlgorithmBmp[0],AAL_TURBIDITY_SENSOR_CAL_ALG);        
 220:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****       }
 221:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****       
 222:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     }
 223:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****    
 224:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** }
 225:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 226:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /**
 227:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** Funzione di richiesta aggiornamento portata storica, ovvero tempo per 
 228:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** raggiungere il pieno pressostato.
 229:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** Il flag deve rimanere abilitato per tutta la durata del passo,
 230:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** viene resettato nell'interpreter (init nuovo passo)
 231:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 232:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \version		1.0.0
 233:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \date 			17/03/2008
 234:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \author			Valeria Catani
 235:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** */
 236:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /*lint -e715
 237:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** Elimina il warning sul parametro cmd che non viene utilizzato
 238:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** */
 239:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** void AAL_LevToTimeRefUpdate(uint8_t cmd)
 240:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** {
  10                             		.loc 1 240 0
  11                             	.LVL0:
 241:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	if ( HWC_Flags.bit.vs_wash_presence==0)
  12                             		.loc 1 241 0
  13 0000 FB E2 00 00 00 00       		mov.L	#_HWC_Flags, r14
  14 0006 DC EE                   		mov.W	[r14], r14
  15 0008 75 2E 10                		and #16, r14
  16 000b 5F EE                   		movu.W	r14, r14
  17 000d 61 0E                   		cmp	#0, r14
  18 000f 1A                      		bne	.L1
 242:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	{/* EA con i sensori virtuali la portata storica non ha + senso,q uindi neanche l'agoritmo che non
 243:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	dovrebbe mai essere impostato da setting*/
 244:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	
 245:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     	Flag_levTOtimeRef_update = TRUE;  
  19                             		.loc 1 245 0
  20 0010 FB E2 00 00 00 00       		mov.L	#_Flag_levTOtimeRef_update, r14
  21 0016 F8 E6 01                		mov.L	#1, [r14]
  22                             	.L1:
  23 0019 02                      		rts
  24                             	.LFE2:
  26                             		.section	.text.AAL_Load_Var_Init,"ax",@progbits
  28                             	_AAL_Load_Var_Init:
  29                             	.LFB9:
 246:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	}
 247:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     /* reset attiva funzione nell'init nuovo passo (interpreter) */
 248:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****    
 249:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** }
 250:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 251:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /**
 252:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** Funzione di richiesta lettura sensore di torbidit√† in modo continuo
 253:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \param [in]     uint8_t cmd
 254:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 255:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \par \b cmd comando
 256:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     valori supportati:
 257:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     vedi ReadTurbidityManager
 258:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     
 259:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \return         none
 260:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 261:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \version		1.0.0
 262:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \date 			21/05/2008
 263:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \author			Roberto Fioravanti
 264:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** */
 265:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** void AAL_ReadTurbidityContinuous(uint8_t cmd)
 266:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** {
 267:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     ReadTurbidityManager(cmd,(uint8_t)AAL_TURBIDITY_READ_CONTINUOUS);
 268:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** }
 269:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 270:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 271:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 272:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /**
 273:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** Funzione di richiesta lettura sensore di torbidit√† in modo one-shot
 274:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \param [in]     uint8_t cmd
 275:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 276:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \par \b cmd comando
 277:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     valori supportati:
 278:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     vedi ReadTurbidityManager
 279:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     
 280:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \return         none
 281:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 282:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \version		1.0.0
 283:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \date 			21/05/2008
 284:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \author			Roberto Fioravanti
 285:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** */
 286:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** void AAL_ReadTurbidityOneShot(uint8_t cmd)
 287:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** {
 288:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     if(TRUE==ReadTurbidityManager(cmd,AAL_TURBIDITY_READ_ONESHOT)) 
 289:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     {			
 290:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #ifdef _STATISTICS_ON_			    
 291:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         STC_Add_LastCycle_turbPerc_turbCalType();
 292:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #endif        
 293:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     }
 294:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** }
 295:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 296:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /**
 297:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** Funzione di validazione calibrazione del sensore di torbidit√†
 298:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \param [in]     uint8_t cmd
 299:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 300:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \par \b cmd comando
 301:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     valori supportati:
 302:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     vedi ReadTurbidityManager
 303:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     
 304:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \return         none
 305:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 306:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \version		1.0.0
 307:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \date 		    15/07/2008
 308:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \author			Roberto Fioravanti
 309:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** */
 310:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** void AAL_ValidateTurbidityCalibration(uint8_t cmd)
 311:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** {
 312:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     if(!HWC_Flags.bit.turbsens)
 313:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     {
 314:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         /*esecuzione istantanea nell'ambito del passo */
 315:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         SETBIT(TerminatedAlgorithmBmp[0], AAL_TURBIDITY_VALIDATE_CALIB);
 316:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         CLRBIT(ActiveAlgorithmBmp[0],AAL_TURBIDITY_VALIDATE_CALIB);
 317:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         return;
 318:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     }
 319:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     
 320:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     if(TurbiditySensorCal.val==TURBIDITY_PWM_MIN)
 321:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     {
 322:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         SETBIT(TerminatedAlgorithmBmp[0], AAL_TURBIDITY_VALIDATE_CALIB);
 323:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         CLRBIT(ActiveAlgorithmBmp[0],AAL_TURBIDITY_VALIDATE_CALIB);
 324:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         return;
 325:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     }
 326:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     if(TRUE == ReadTurbidityManager(cmd,AAL_TURBIDITY_VALIDATE_CALIB))
 327:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     {
 328:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         if((TurbidityReads.ADvalue<TURBIDITY_AIR_MIN_ADVAL))
 329:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         {
 330:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             TurbiditySensorCal.val=TURBIDITY_PWM_MIN;
 331:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             TurbiditySensorCal.adH2oRef=TURBIDITY_H2O_DEFAULT_ADVAL;
 332:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         }
 333:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         else if((TurbidityReads.ADvalue>TURBIDITY_AIR_MAX_ADVAL))
 334:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         {
 335:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             TurbiditySensorCal.val=TURBIDITY_PWM_MIN;
 336:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             TurbiditySensorCal.adH2oRef=TURBIDITY_H2O_DEFAULT_ADVAL;
 337:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         }
 338:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         else
 339:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         {
 340:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             /* lettura in range */
 341:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         }
 342:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		
 343:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		SETBIT(TerminatedAlgorithmBmp[0], AAL_TURBIDITY_VALIDATE_CALIB);
 344:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         CLRBIT(ActiveAlgorithmBmp[0],AAL_TURBIDITY_VALIDATE_CALIB);
 345:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     }
 346:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** }
 347:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 348:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /**
 349:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** Manager lettura sensore di torbidit√† da algoritmo eseguito nell'algoritmo.
 350:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 351:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \param [in]     uint8_t cmd
 352:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \param [in]     uint8_t mode
 353:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \return         none
 354:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 355:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \par \b cmd comando
 356:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     valori supportati:
 357:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     \b AAL_ALG_INIT
 358:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     Avvia la lettura
 359:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     \b AAL_ALG_MONITOR
 360:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     Attende la disponibilit√† della lettura
 361:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     \b AAL_ALG_DISABLE
 362:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     Disabilita l'algoritmo
 363:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     
 364:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \par alg\b algoritmo
 365:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     valori supportati:
 366:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     \b AAL_TURBIDITY_READ_ONESHOT
 367:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     \b AAL_TURBIDITY_VALIDATE_CALIB
 368:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     Attiva la lettura del sensore di torbidit√† in due modi possibili:
 369:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     lettura continua (CONTINUOUS) e one-shot (ONE_SHOT_MODE).
 370:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 371:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     \b AAL_TURBIDITY_READ_CONTINUOUS
 372:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     Avvia la letttura nella modalit√† CONTINUOUS.
 373:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     L'algoritmo pu√≤ essere terminato disattivando l'algoritmo.
 374:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 375:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \return     uint8_t
 376:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \retvalue   TRUE        Lettura completata
 377:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \retvalue   FALSE       Lettura in corso
 378:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 379:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \version		1.0.0
 380:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \date 			21/05/2008
 381:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \author			Roberto Fioravanti
 382:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** */
 383:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** uint8_t ReadTurbidityManager(uint8_t cmd, uint8_t alg)
 384:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** {
 385:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     uint8_t ret=FALSE;
 386:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     uint8_t idReading=TurbidityReads.id;
 387:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     
 388:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     /* indice letture */
 389:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     uint8_t indexId;
 390:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     switch(alg)
 391:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     {
 392:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         case AAL_TURBIDITY_VALIDATE_CALIB:
 393:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             indexId=(uint8_t)AAL_TURBIDITY_VALIDATION_ID;
 394:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****            break;
 395:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         case AAL_TURBIDITY_READ_ONESHOT:
 396:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             indexId=(uint8_t)AAL_TURBIDITY_ONE_SHOT_R_ID;
 397:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****            break;
 398:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         case AAL_TURBIDITY_READ_CONTINUOUS:
 399:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             indexId=(uint8_t)AAL_TURBIDITY_CONT_R_ID;
 400:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****            break;
 401:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         default:
 402:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             return TRUE;
 403:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     }
 404:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     
 405:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     if(!HWC_Flags.bit.turbsens)
 406:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     {
 407:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         /*esecuzione istantanea nell'ambito del passo */
 408:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         SETBIT(TerminatedAlgorithmBmp[0], alg);
 409:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         CLRBIT(ActiveAlgorithmBmp[0],alg);
 410:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         return TRUE;
 411:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     }
 412:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     
 413:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     switch(cmd)
 414:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     {
 415:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         case AAL_ALG_INIT:
 416:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             Aal_TurbidityRead.idReading[indexId]=idReading;
 417:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             HIO_trbReadEnable((uint8_t)TURBSENS_READ_al_TRB_OS+indexId);
 418:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****               
 419:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         break;
 420:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             
 421:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         case AAL_ALG_MONITOR:
 422:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             switch(alg)
 423:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             {
 424:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                 /* singola lettura */
 425:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                 case AAL_TURBIDITY_VALIDATE_CALIB:
 426:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                 case AAL_TURBIDITY_READ_ONESHOT:
 427:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                     
 428:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                     if((idReading != Aal_TurbidityRead.idReading[indexId]) && (GIValid & GI_TURB_SE
 429:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                     {
 430:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                         /* l'algoritmo pu√≤ terminare */                        
 431:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                         Aal_TurbidityRead.idReading[indexId]=idReading;
 432:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                         
 433:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                         SETBIT(TerminatedAlgorithmBmp[0], alg);
 434:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                         CLRBIT(ActiveAlgorithmBmp[0],alg);
 435:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 436:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                         HIO_trbReadDisable((uint8_t)TURBSENS_READ_al_TRB_OS+indexId);
 437:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 438:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 439:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                         ret=TRUE;
 440:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                     }
 441:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                     break;
 442:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                 
 443:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                 /* lettura continua */
 444:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                 case AAL_TURBIDITY_READ_CONTINUOUS:
 445:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                     Aal_TurbidityRead.idReading[indexId]=idReading;
 446:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                     break;
 447:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             }
 448:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			
 449:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		    break;
 450:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		
 451:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		default:	
 452:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         case AAL_ALG_DISABLE:
 453:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             /* l'algoritmo pu√≤ terminare */            
 454:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             HIO_trbReadDisable((uint8_t)TURBSENS_READ_al_TRB_OS+indexId);
 455:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             ret=TRUE;        
 456:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     }
 457:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     
 458:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     return ret;
 459:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** }
 460:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 461:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /**
 462:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** Manager algoritmo riconoscimento sporco schiuma.
 463:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 464:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \param [in]     uint8_t cmd
 465:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \param [in]     uint8_t 
 466:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \return         none
 467:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 468:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \par \b cmd comando
 469:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     valori supportati:
 470:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     \b AAL_ALG_INIT
 471:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     Avvia la lettura
 472:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     \b AAL_ALG_DISABLE
 473:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     Disabilita l'algoritmo
 474:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     
 475:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \par alg\b algoritmo
 476:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     valori supportati:
 477:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     \b 
 478:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 479:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     \b AAL_TURBIDITY_READ_CONTINUOUS
 480:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     Avvia la letttura nella modalit√† CONTINUOUS.
 481:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     L'algoritmo pu√≤ essere terminato disattivando l'algoritmo.
 482:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 483:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \return     uint8_t
 484:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \retvalue   TRUE        Lettura completata
 485:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \retvalue   FALSE       Lettura in corso
 486:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 487:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \version		1.0.0
 488:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \date 			11/01/2012
 489:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \author			Emanuela Antognoli
 490:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** */
 491:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** void AAL_Dirty_Foam_identify(uint8_t cmd)
 492:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** {
 493:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		
 494:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	switch(cmd)
 495:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     {
 496:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         case AAL_ALG_INIT:
 497:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		/* qui parta il timer */
 498:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		
 499:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			if((HWC_Flags.bit.vs_wash_presence == 0) ||(BasicLoader(PTR_ALGORITHM_DATA, DIRTY_FOAM_DISPL , &
 500:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			{
 501:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				 
 502:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		        SETBIT(TerminatedAlgorithmBmp[0], AAL_DIRTY_FOAM_IDENTIFY_ALG);
 503:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		        CLRBIT(ActiveAlgorithmBmp[0],AAL_DIRTY_FOAM_IDENTIFY_ALG);
 504:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #if (VIRTUAL_SENSOR_ENABLE == 1)
 505:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				dirty_foam_Data.reduc_speed=0;
 506:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #endif
 507:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			}else
 508:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		
 509:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			{ /* OK */
 510:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #if (VIRTUAL_SENSOR_ENABLE == 1)
 511:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				 dirty_foam_Data.fullPulseIn = 0;                  /* init var per conteggio impulsi entranti i
 512:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				/* algoritmo di riconoscimento sporco / schiuma */
 513:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				dirty_foam_Data.status = ALGO_SV_WAIT;
 514:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #endif
 515:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		    }
 516:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		 	CLRBIT(Flags_2, FLAG2_CLOGGED_FILTER);
 517:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #ifdef _STATISTICS_ON_	
 518:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			CLRBIT(Statistics_update_flag, STATISTIC_FLAG_DIRTY_UPDATE);
 519:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #endif
 520:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #if (VIRTUAL_SENSOR_ENABLE == 1)
 521:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			CLRBIT(Flags_1,JIF_FLAG1_ALGO_DIRTY_F_KO_POS); /* reset flag vuoto sensore in lavaggio */
 522:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		 	(void)SWTC_SetSValue((SWTC_CountersType)AAL_STAB_STATO3_S_TIMER, (SWTC_SCounterValue)TOUT_STAB_
 523:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			(void)SWTC_Stop((SWTC_CountersType)AAL_END_ALWAYS3_M_TIMER);
 524:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #endif
 525:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			break;
 526:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #if (VIRTUAL_SENSOR_ENABLE == 1)
 527:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		case AAL_ALG_MONITOR:
 528:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		
 529:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		
 530:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			if (uPDoorStatus == UP_DOOR_WAIT)
 531:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  	{/* porta aperta o in attesa di timeout dopo la chiusura o delay MR-> il uP va sospeso */
 532:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****    
 533:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			    (void)SWTC_Stop((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER);
 534:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			    (void)SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
 535:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			    (void)SWTC_Stop((SWTC_CountersType)AAL_STAB_SENS_S_TIMER);
 536:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				(void)SWTC_Stop((SWTC_CountersType)AAL_STAB_STATO3_S_TIMER);
 537:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				(void)SWTC_Stop((SWTC_CountersType)AAL_END_ALWAYS3_M_TIMER);
 538:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				return ;
 539:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			    
 540:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			}
 541:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			 		  
 542:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  	if ( dirty_foam_Data.status==ALGO_LOAD_RESTORE)
 543:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			{/* deve essere fatto sia se il sensore ha un valore valido che invalido*/
 544:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				AAL_Load_Restore();
 545:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				break;
 546:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			}
 547:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  	if ((TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_WASH)))&& (!uP_AltCtrl_Data.S
 548:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	   		{
 549:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			
 550:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==3)
 551:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				{
 552:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					(void)SWTC_Run((SWTC_CountersType)AAL_STAB_STATO3_S_TIMER);	
 553:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					if ( dirty_foam_Data.status == ALGO_SV_WAIT_END)
 554:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					{
 555:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						(void)SWTC_Run((SWTC_CountersType)AAL_END_ALWAYS3_M_TIMER);	
 556:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					}
 557:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				}else
 558:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				{
 559:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					(void)SWTC_SetSValue((SWTC_CountersType)AAL_STAB_STATO3_S_TIMER, (SWTC_SCounterValue)TOUT_STAB
 560:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					(void)SWTC_Stop((SWTC_CountersType)AAL_STAB_STATO3_S_TIMER);
 561:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					(void)SWTC_Stop((SWTC_CountersType)AAL_END_ALWAYS3_M_TIMER);
 562:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				}
 563:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				
 564:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				
 565:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				if (!SWTC_IsStopped((SWTC_CountersType)AAL_STAB_STATO3_S_TIMER) && !SWTC_IsExpired((SWTC_Counte
 566:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				{ /* stato 3 del sensore stabile per tempo da setting  */
 567:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					return ; 
 568:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				}
 569:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			
 570:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			
 571:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==0)
 572:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	   			{/* vedo il vuoto esco */				
 573:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****            			SETBIT(TerminatedAlgorithmBmp[0], AAL_DIRTY_FOAM_IDENTIFY_ALG);
 574:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		        	CLRBIT(ActiveAlgorithmBmp[0],AAL_DIRTY_FOAM_IDENTIFY_ALG);
 575:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					dirty_foam_Data.reduc_speed=0;
 576:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					dirty_foam_Data.status = ALGO_SV_END;
 577:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					dirty_foam_Data.filter_foam_on=FALSE;
 578:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					SETBIT(Flags_1,JIF_FLAG1_ALGO_DIRTY_F_KO_POS);
 579:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					return;
 580:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				}
 581:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				switch (dirty_foam_Data.status)
 582:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				{
 583:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					case ALGO_SV_WAIT :
 584:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.reduc_speed=0;
 585:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.filter_foam_on=FALSE;
 586:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==3) 
 587:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						{
 588:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.status= ALGO_1LIMIT_POWER;	
 589:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.reduc_speed=1;
 590:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.filter_foam_on=TRUE;
 591:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						}
 592:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						
 593:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #ifdef _STATISTICS_ON_	
 594:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						CLRBIT(Statistics_update_flag, STATISTIC_FLAG_DIRTY_UPDATE);
 595:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #endif	
 596:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					break;
 597:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					case ALGO_1LIMIT_POWER:	
 598:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						
 599:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.reduc_speed=1;
 600:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==3) 
 601:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						{/* ho ridotto la velocit√† ma continuo a vedere filtro otturato */
 602:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							AAL_Load_Var_Init ();					
 603:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.status= ALGO_LOAD_RESTORE;
 604:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.load_exe_time=0;
 605:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.filter_foam_on=TRUE;
 606:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							
 607:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		
 608:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							/*torno alla velocit√† di prima */	
 609:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.reduc_speed=0;
 610:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						}else
 611:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							if ((Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==2) || (Virtual_Sensor_Value[GI_VIRTUAL_SE
 612:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							/* ho gi√† ridotto la velocit√† una volta, e quindi si mantiene lo stato di riduzione della 
 613:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							{	
 614:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 									dirty_foam_Data.status= ALGO_WAIT_1L;
 615:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 									dirty_foam_Data.filter_foam_on=FALSE;
 616:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #ifdef _STATISTICS_ON_
 617:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 									if ( TESTBIT(Flags_2, STATISTIC_FLAG_DIRTY_UPDATE)==0)
 618:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 									{ 
 619:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 										IncByteWithCheck(&MachineStatistics.lastCycles[MOST_RECENT_STAT_CYCLE_POS].dirty_foam_red
 620:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 										SETBIT(Flags_2, STATISTIC_FLAG_DIRTY_UPDATE);
 621:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 									}
 622:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 623:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #endif
 624:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							}
 625:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					break;
 626:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					case ALGO_WAIT_1L:
 627:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						/* dovrebbe essere gi√† attiva ma ribadisce lo stato */
 628:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.reduc_speed=1;
 629:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.filter_foam_on=FALSE;
 630:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==3)
 631:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						{ 
 632:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						/* Se sono in questa condizione ho visto il pieno con la prima riduzione, quindi riduco di un
 633:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.status= ALGO_2LIMIT_POWER;
 634:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.reduc_speed=2;	
 635:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.filter_foam_on=TRUE;	
 636:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						}
 637:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					break;
 638:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					case ALGO_2LIMIT_POWER:
 639:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 640:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.reduc_speed=2;
 641:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.filter_foam_on=FALSE;
 642:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #ifdef _STATISTICS_ON_
 643:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						if ( TESTBIT(Flags_2, STATISTIC_FLAG_DIRTY_UPDATE))
 644:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						{ 
 645:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							IncByteWithCheck(&MachineStatistics.lastCycles[MOST_RECENT_STAT_CYCLE_POS].dirty_foam_redux_
 646:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							CLRBIT(Flags_2, STATISTIC_FLAG_DIRTY_UPDATE);
 647:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						}	
 648:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #endif
 649:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==3)
 650:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						{/*dopo la seconda riduzione , se non vedo mail il pieno il uP termina*/
 651:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							(void)SWTC_SetSValue((SWTC_CountersType)AAL_END_ALWAYS3_M_TIMER, (SWTC_MCounterValue)TOUT_EN
 652:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.status = ALGO_SV_WAIT_END;
 653:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						}
 654:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					break;		
 655:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					case ALGO_LOAD_RESTORE:
 656:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						/* sto rabboccando ma ancora il sensore vale 3...*/
 657:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						/* se raggiungo il limite di caricamento allora il uP termina*/
 658:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.filter_foam_on=TRUE;
 659:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							
 660:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					break;				
 661:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					case ALGO_LOAD_WAIT:
 662:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.filter_foam_on=FALSE;
 663:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==3) 
 664:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						{/* ho ridotto la velocit√† ma continuo a vedere filtro otturato */
 665:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.reduc_speed=0;
 666:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							AAL_Load_Var_Init();
 667:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						 
 668:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.load_exe_time=0;
 669:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 												
 670:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.status= ALGO_LOAD_RESTORE;
 671:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 672:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.filter_foam_on=TRUE;
 673:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						}
 674:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						
 675:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					break;
 676:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					case ALGO_SV_WAIT_END:
 677:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.filter_foam_on=FALSE;
 678:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						if (SWTC_IsExpired((SWTC_CountersType)AAL_END_ALWAYS3_M_TIMER) )
 679:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						{	 /* vengo da una seconda riduzione di velocit√† e ho continuato a vedere 3  */
 680:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.status=ALGO_SV_END; 
 681:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							SETBIT(Flags_1,JIF_FLAG1_ALGO_DIRTY_F_KO_POS);
 682:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							
 683:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					 	}
 684:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					break;
 685:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					case ALGO_SV_END:
 686:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.filter_foam_on=FALSE;
 687:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					default:
 688:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					break;
 689:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				}
 690:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			}
 691:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 692:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			/* algoritmo sospeso: non si fa nulla. rimane lo stato dove era.*/
 693:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			(void)SWTC_SetSValue((SWTC_CountersType)AAL_STAB_STATO3_S_TIMER, (SWTC_SCounterValue)TOUT_STAB_S
 694:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 695:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		
 696:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			
 697:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		break;
 698:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #endif
 699:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		default:	
 700:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		case AAL_ALG_DISABLE:
 701:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  SETBIT(TerminatedAlgorithmBmp[0], AAL_DIRTY_FOAM_IDENTIFY_ALG);
 702:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  CLRBIT(ActiveAlgorithmBmp[0],AAL_DIRTY_FOAM_IDENTIFY_ALG);
 703:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #if (VIRTUAL_SENSOR_ENABLE == 1)
 704:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  dirty_foam_Data.reduc_speed=0;
 705:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  dirty_foam_Data.status= ALGO_SV_END;
 706:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  dirty_foam_Data.filter_foam_on=FALSE;
 707:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  (void)SWTC_Stop((SWTC_CountersType)AAL_END_ALWAYS3_M_TIMER);
 708:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #endif
 709:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		break;
 710:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	}
 711:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** }
 712:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 713:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** /* gestisce il caricamento con la logica del vecchio uP Load restore 
 714:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** Il principio di funzionamento per i rabbocchi √® quello del load restore.
 715:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** la truttura dirty_foam_Data infatti ne ricalca la struttura e i parametri di ingresso.
 716:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** Se √® presente l'algoritmo dirty_foam_Data non deve essere presente il uP load restore.
 717:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 718:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \param [in]     none
 719:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \return         none
 720:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     
 721:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     
 722:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \par alg\b funzione per il rabbocco usato nell'algortitmo sporco / schiuma
 723:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \version		1.0.0
 724:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \date 			13/01/2012
 725:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** \author			Emanuela Antognoli
 726:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** */
 727:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #if (VIRTUAL_SENSOR_ENABLE == 1)
 728:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** static void AAL_Load_Restore (void)
 729:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** {
 730:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	/* EA_COMMENT */
 731:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 732:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	SFT_Timeout_4Loadrestore_Mgmt(FLT_PUMP_LOAD_EXE);
 733:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 734:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	if ( TESTBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS) )
 735:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	{
 736:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 737:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		/* in analogia con la dichiarazione del KO Restore per WaterInDW > maxWater
 738:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		non si prosegue nel caricamento e viene abilitato avanzalomento passo 
 739:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		Il Jump su KO Restore verr√† processato nel passo successivo 
 740:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		se Load Restore √® l'unico uP del passo*/
 741:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		WaterInDW = OFFS_B(dirty_foam_setting_data.Data,0);
 742:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		dirty_foam_Data.reduc_speed=0;
 743:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		SETBIT(Flags_2, FLAG2_CLOGGED_FILTER);
 744:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		dirty_foam_Data.status = ALGO_SV_END;
 745:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		dirty_foam_Data.filter_foam_on=FALSE;
 746:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		return;
 747:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	}
 748:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	
 749:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 750:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	if ( ((Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==1)||(Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_W
 751:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     {/* vuoto -> posso ancora caricare acqua, se ho tempo residuo */
 752:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					
 753:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		(void)SWTC_Run((SWTC_CountersType)AAL_STAB_SENS_S_TIMER);
 754:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	}else
 755:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	{
 756:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		/* else tempo di ripristino non esaurito */
 757:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		(void)SWTC_SetSValue((SWTC_CountersType)AAL_STAB_SENS_S_TIMER, (SWTC_SCounterValue)TOUT_STAB_SENS
 758:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		(void)SWTC_Stop((SWTC_CountersType)AAL_STAB_SENS_S_TIMER);
 759:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	}
 760:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	
 761:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	if ( SWTC_IsExpired((SWTC_CountersType)AAL_STAB_SENS_S_TIMER) )
 762:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	{ /* caricamento a P.P. concluso (end conteggio per stabilit√† pressostato in pieno) */
 763:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		(void)SWTC_Stop((SWTC_CountersType)AAL_STAB_SENS_S_TIMER);
 764:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		dirty_foam_Data.status = ALGO_SV_WAIT;
 765:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		
 766:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		return ; 
 767:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	}
 768:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 769:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	if ( dirty_foam_Data.load_exe_time==0)
 770:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	{/* caricamento a turbina */
 771:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	
 772:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		if ( (PM_PulseCounter_GetWarning() == NO_PULSE_COUNTER_WARNING) && (TESTBIT(Flags_1,JIF_FLAG1_PUL
 773:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	    {/* Pulse counter OK && non bloccata */
 774:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		
 775:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     		if(  WaterInDW >= OFFS_B(dirty_foam_setting_data.Data,0) )			
 776:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			{
 777:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				/* non importa se il criterio non √® valido, comunque abbiamo superato il valore massimo consen
 778:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				se non vedo il pieno √® ko restore.*/
 779:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				SETBIT(Flags_2, FLAG2_CLOGGED_FILTER);
 780:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  	if ((Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]!=1)&&(Virtual_Sensor_Value[GI_VIRTUAL_SENSO
 781:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				{
 782:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					(void)SWTC_SetSValue((SWTC_CountersType)AAL_STAB_SENS_S_TIMER, (SWTC_SCounterValue)TOUT_STAB_S
 783:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					SETBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS); /* set flag overflow ripristini */	
 784:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 785:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					/* incremento contatore KO Restore per statistiche
 786:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					posso farlo qui perch√® eseguo istruzione una volta soltanto dopo aver messo ad 1 il flag KO R
 787:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					e poi cambio stato in LOAD_RESTORE_TRUE */
 788:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #ifdef _STATISTICS_ON_                        
 789:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					MachineStatistics.lastCycles[MOST_RECENT_STAT_CYCLE_POS].restore_koRestore.b.koRestore++;
 790:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** #endif      
 791:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					
 792:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				}
 793:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				WaterInDW = OFFS_B(dirty_foam_setting_data.Data,0);
 794:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				dirty_foam_Data.status= ALGO_SV_END;
 795:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			}else
 796:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			{
 797:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				
 798:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				if ( TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_WASH))&&
 799:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  	(Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]!=5) )
 800:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				{
 801:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					/* ancora possibile caricare acqua */						
 802:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					if (dirty_foam_Data.init == TRUE)
 803:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					{/* questa init potrebbe avvenire anche dopo un passaggio per il pieno per cui fullPulseIn != 
 804:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 805:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						GIWaterLoaded = 0;
 806:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						PulseLoaded = 0;
 807:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.emptyPulseIn = 0;
 808:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 809:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.waterInDWInit = WaterInDW; 
 810:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						PM_PulseCounter_SetCount(dirty_foam_Data.fullPulseIn);/* init pulse counter per nuovo contegg
 811:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 812:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						/* QI 28.10.09 init finestra di buio su controllo turbina. Messo qui per reinizializzare cont
 813:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						(void)SWTC_SetSValue((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER, (SWTC_SCounterValue)TOUT
 814:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 815:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 816:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.init = FALSE;
 817:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 818:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					}
 819:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 820:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					WaterInDW = (dirty_foam_Data.waterInDWInit + GIWaterLoaded);  /* aggiornamento acqua in vasca 
 821:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					/* QI 27.10.09 gestione finestra di buio su check turbina */
 822:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					TempCycle_Stats.loaded_water += GIWaterLoaded;
 823:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					cycle_loaded_water += GIWaterLoaded;
 824:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         
 825:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	       			FLT_PulseCounterCheckDelay_Mgmt();
 826:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 827:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	#ifdef _STATISTICS_ON_
 828:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					if((GIWaterLoaded>5) && (TempCycle_Stats.flags.bit.restoreCntEn==1)) 
 829:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					{                     
 830:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						MachineStatistics.lastCycles[MOST_RECENT_STAT_CYCLE_POS].restore_koRestore.b.restore++;
 831:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						TempCycle_Stats.flags.bit.restoreCntEn =0 ;
 832:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					}
 833:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	#endif
 834:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 835:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					dirty_foam_Data.emptyPulseIn = (GIWaterLoaded * FlowMeterDivider);	 /* aggiornamento acqua in 
 836:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		                                                                                      rappresenta
 837:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	  				
 838:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b = EV_ON; /* pilotaggio EV*/
 839:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						      /* controllo turbina bloccata */
 840:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					if ( FLT_CheckPulseCounterStill(PULSE_COUNTER_STILL_EXE) == TRUE )
 841:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					{
 842:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 843:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						/* entro qui una sola volta,poi cambio modalit√† di ripristino */ 
 844:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						/* salva nella pila dei last prefault*/
 845:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						FLT_warningSave(FLT_CODE_PULSE_COUNTER, FLT_SUBCODE_PULSE_COUNTER, WRN_PREFAULT);
 846:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.load_exe_time=TRUE;
 847:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 848:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						SETBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS); 
 849:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 850:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					}
 851:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					
 852:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				}else
 853:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		        {/* stato 5  o criterio non valido*/
 854:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****          
 855:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					/* non piloto EV ma tengo conto di eventuali impulsi conteggiati dalla turbina */
 856:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     
 857:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					/*impulsi contati durante la permanenza in pieno */
 858:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					if ( PulseLoaded >= dirty_foam_Data.emptyPulseIn )
 859:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					{
 860:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.fullPulseIn = ( PulseLoaded - dirty_foam_Data.emptyPulseIn );
 861:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					}
 862:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 863:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					dirty_foam_Data.init = TRUE;
 864:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 865:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					(void)SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);	
 866:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		 			
 867:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					/* Rimango in questo stato anche se consento avanzamento passo */
 868:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	
 869:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					return ;
 870:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	
 871:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		        }
 872:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			}
 873:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		}
 874:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 875:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	    else
 876:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	    {/* Warning Pulse Counter: il conteggio dell'acqua in ingresso non √® affidabile ->
 877:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	      non eseguo uP ma abilito avanzamento passo 	 */
 878:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****        	  
 879:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	      dirty_foam_Data.load_exe_time = TRUE;
 880:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  dirty_foam_Data.init = TRUE;  /* uso la stessa var perch√® sono in uno stato diverso */
 881:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  /* EA brevetto: se la turbina √® KO si carica sempre a sensore , tanto al ciclo successivo o al
 882:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	     /* turbina out of range*/
 883:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  
 884:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		        
 885:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	    }
 886:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	}else
 887:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 888:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	{/*if ( dirty_foam_Data.load_exe_time )*/
 889:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		
 890:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	/* ripristino a tempo */
 891:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****    		
 892:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		if ( TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_WASH))&&
 893:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	  	(Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]!=5) )
 894:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		{ 
 895:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			
 896:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			/* carico pilotato  */
 897:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b = EV_ON; /* pilotaggio EV*/  
 898:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 899:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		}	
 900:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	}      
 901:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 902:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** }
 903:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 904:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 905:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** static void AAL_Load_Var_Init (void)
 906:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** {
  30                             		.loc 1 906 0
  31 0000 7E A7                   		push.l	r7
  32                             	.LCFI0:
 907:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	TempCycle_Stats.flags.bit.restoreCntEn=1;
  33                             		.loc 1 907 0
  34 0002 FB 72 00 00 00 00       		mov.L	#_TempCycle_Stats, r7
  35 0008 CD 7E 02                		mov.B	2[r7], r14
  36 000b 78 0E                   		bset	#0, r14
  37 000d C7 7E 02                		mov.B	r14, 2[r7]
 908:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 909:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	/* Init variabili per caricamento a turbina */
 910:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 911:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	dirty_foam_Data.init = TRUE;
  38                             		.loc 1 911 0
  39 0010 FB 72 00 00 00 00       		mov.L	#_dirty_foam_Data, r7
  40 0016 CD 7E 01                		mov.B	1[r7], r14
  41 0019 78 0E                   		bset	#0, r14
  42 001b C7 7E 01                		mov.B	r14, 1[r7]
 912:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 913:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	PM_PulseCounter_Reset_Warning(PULSECOUNTER_RESET_BOTH_WARNING);                        /* Reset di
  43                             		.loc 1 913 0
  44 001e 66 21                   		mov	#2, r1
  45 0020 05 00 00 00             		bsr	_PM_PulseCounter_Reset_Warning
  46                             	.LVL1:
 914:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	PulseLoaded = 0;
  47                             		.loc 1 914 0
  48 0024 FB E2 00 00 00 00       		mov.L	#_PulseLoaded, r14
  49 002a F8 E5 00                		mov.W	#0, [r14]
 915:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	PM_PulseCounter_SetCount(dirty_foam_Data.fullPulseIn);/* init pulse counter per nuovo conteggio */
  50                             		.loc 1 915 0
  51 002d 98 F1                   		mov.W	4[r7], r1
  52 002f 05 00 00 00             		bsr	_PM_PulseCounter_SetCount
  53                             	.LVL2:
 916:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	(void)FLT_CheckPulseCounterStill(PULSE_COUNTER_STILL_INIT);     /* init funzione controllo turbina
  54                             		.loc 1 916 0
  55 0033 66 01                   		mov	#0, r1
  56 0035 05 00 00 00             		bsr	_FLT_CheckPulseCounterStill
  57                             	.LVL3:
 917:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	dirty_foam_Data.fullPulseIn = 0;                  /* init var per conteggio impulsi entranti in pi
  58                             		.loc 1 917 0
  59 0039 3D 72 00                		mov.W	#0, 4[r7]
 918:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     GIWaterLoaded = 0;
  60                             		.loc 1 918 0
  61 003c FB E2 00 00 00 00       		mov.L	#_GIWaterLoaded, r14
  62 0042 F8 E5 00                		mov.W	#0, [r14]
 919:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 920:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	dirty_foam_Data.waterInDWInit = WaterInDW; 
  63                             		.loc 1 920 0
  64 0045 FB E2 00 00 00 00       		mov.L	#_WaterInDW, r14
  65 004b C0 E7                   		mov.B	[r14], [r7]
 921:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 922:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	CLRBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS);
  66                             		.loc 1 922 0
  67 004d FB E2 00 00 00 00       		mov.L	#_Flags_1, r14
  68 0053 F0 EA                   		bclr #2, [r14].B
 923:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	dirty_foam_Data.load_exe_time=0;
  69                             		.loc 1 923 0
  70 0055 CD 7E 01                		mov.B	1[r7], r14
  71 0058 7A 4E                   		bclr	#4, r14
  72 005a C7 7E 01                		mov.B	r14, 1[r7]
 924:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 
 925:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	(void)Set_SmallCounter((SWTC_CountersType)AAL_STAB_SENS_S_TIMER, (SWTC_PrescalerType)COUNTERS2_TBA
  73                             		.loc 1 925 0
  74 005d FB 72 00 00 00 00       		mov.L	#_dirty_foam_setting_data, r7
  75 0063 EC 77                   		mov.L	[r7], r7
  76 0065 88 FB                   		mov.B	3[r7], r3
  77 0067 75 41 1E                		mov	#30, r1
  78 006a 66 32                   		mov	#3, r2
  79 006c 75 23 7F                		and #0x7f, r3
 926:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	
 927:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	
 928:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** }
  80                             		.loc 1 928 0
  81 006f 7E B7                   		pop	r7
 925:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	(void)Set_SmallCounter((SWTC_CountersType)AAL_STAB_SENS_S_TIMER, (SWTC_PrescalerType)COUNTERS2_TBA
  82                             		.loc 1 925 0
  83 0071 04 00 00 00             		bra	_Set_SmallCounter
  84                             	.LVL4:
  85                             	.LFE9:
  87                             		.section	.text.AAL_Dirty_Foam_identify,"ax",@progbits
  88                             		.global	_AAL_Dirty_Foam_identify
  90                             	_AAL_Dirty_Foam_identify:
  91                             	.LFB7:
 492:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** {
  92                             		.loc 1 492 0
  93 0000 6E 7C                   		pushm	r7-r12
  94                             	.LCFI1:
 494:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	switch(cmd)
  95                             		.loc 1 494 0
  96 0002 5B 11                   		movu.B	r1, r1
  97 0004 61 01                   		cmp	#0, r1
  98 0006 3A 8E 00                		beq	.L7
  99 0009 61 11                   		cmp	#1, r1
 100 000b 3B F9 05                		bne	.L82
 499:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			if((HWC_Flags.bit.vs_wash_presence == 0) ||(BasicLoader(PTR_ALGORITHM_DATA, DIRTY_FOAM_DISPL , &
 101                             		.loc 1 499 0
 102 000e FB 72 00 00 00 00       		mov.L	#_HWC_Flags, r7
 103 0014 DC 77                   		mov.W	[r7], r7
 104 0016 75 27 10                		and #16, r7
 105 0019 5F 77                   		movu.W	r7, r7
 106 001b 61 07                   		cmp	#0, r7
 107 001d 21 21                   		bne	.L9
 108 001f 03                      		.balign 2,3,5
 109                             	.L11:
 502:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		        SETBIT(TerminatedAlgorithmBmp[0], AAL_DIRTY_FOAM_IDENTIFY_ALG);
 110                             		.loc 1 502 0
 111 0020 FB 72 00 00 00 00       		mov.L	#_TerminatedAlgorithmBmp, r7
 112 0026 F0 72                   		bset #2, [r7].B
 503:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		        CLRBIT(ActiveAlgorithmBmp[0],AAL_DIRTY_FOAM_IDENTIFY_ALG);
 113                             		.loc 1 503 0
 114 0028 FB 72 00 00 00 00       		mov.L	#_ActiveAlgorithmBmp, r7
 115 002e F0 7A                   		bclr #2, [r7].B
 505:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				dirty_foam_Data.reduc_speed=0;
 116                             		.loc 1 505 0
 117 0030 FB 72 00 00 00 00       		mov.L	#_dirty_foam_Data, r7
 118 0036 CD 7A 01                		mov.B	1[r7], r10
 119 0039 75 2A F9                		and #-7, r10
 120 003c 2E 26                   		bra	.L85
 121                             	.L9:
 499:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			if((HWC_Flags.bit.vs_wash_presence == 0) ||(BasicLoader(PTR_ALGORITHM_DATA, DIRTY_FOAM_DISPL , &
 122                             		.loc 1 499 0 discriminator 1
 123 003e 75 41 2B                		mov	#43, r1
 124 0041 66 02                   		mov	#0, r2
 125 0043 FB 32 00 00 00 00       		mov.L	#_dirty_foam_setting_data, r3
 126 0049 05 00 00 00             		bsr	_BasicLoader
 127 004d 5B 11                   		movu.B	r1, r1
 128 004f 61 01                   		cmp	#0, r1
 129 0051 21 CF                   		bne	.L11
 511:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				 dirty_foam_Data.fullPulseIn = 0;                  /* init var per conteggio impulsi entranti i
 130                             		.loc 1 511 0
 131 0053 FB 72 00 00 00 00       		mov.L	#_dirty_foam_Data, r7
 132 0059 90 F1                   		mov.W	r1, 4[r7]
 513:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				dirty_foam_Data.status = ALGO_SV_WAIT;
 133                             		.loc 1 513 0
 134 005b CD 7A 01                		mov.B	1[r7], r10
 135 005e 75 2A 1F                		and #31, r10
 136 0061 03                      		.balign 2,3,5
 137                             	.L85:
 138 0062 C7 7A 01                		mov.B	r10, 1[r7]
 516:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		 	CLRBIT(Flags_2, FLAG2_CLOGGED_FILTER);
 139                             		.loc 1 516 0
 140 0065 FB 72 00 00 00 00       		mov.L	#_Flags_2, r7
 141 006b F0 7D                   		bclr #5, [r7].B
 518:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			CLRBIT(Statistics_update_flag, STATISTIC_FLAG_DIRTY_UPDATE);
 142                             		.loc 1 518 0
 143 006d FB 72 00 00 00 00       		mov.L	#_Statistics_update_flag, r7
 144 0073 F0 78                   		bclr #0, [r7].B
 521:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			CLRBIT(Flags_1,JIF_FLAG1_ALGO_DIRTY_F_KO_POS); /* reset flag vuoto sensore in lavaggio */
 145                             		.loc 1 521 0
 146 0075 FB 72 00 00 00 00       		mov.L	#_Flags_1, r7
 147 007b F0 7D                   		bclr #5, [r7].B
 522:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		 	(void)SWTC_SetSValue((SWTC_CountersType)AAL_STAB_STATO3_S_TIMER, (SWTC_SCounterValue)TOUT_STAB_
 148                             		.loc 1 522 0
 149 007d FB 72 00 00 00 00       		mov.L	#_Tab_HWCVS_data, r7
 150 0083 EC 77                   		mov.L	[r7], r7
 151 0085 CC 72                   		mov.B	[r7], r2
 152 0087 75 41 1F                		mov	#31, r1
 153 008a 75 22 7F                		and #0x7f, r2
 154 008d 05 00 00 00             		bsr	_SWTC_SetSValue
 155 0091 38 97 05                		bra	.L92
 156                             	.L7:
 530:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			if (uPDoorStatus == UP_DOOR_WAIT)
 157                             		.loc 1 530 0
 158 0094 FB 72 00 00 00 00       		mov.L	#_uPDoorStatus, r7
 159 009a 58 77                   		movu.B	[r7], r7
 160 009c 61 07                   		cmp	#0, r7
 161 009e 21 21                   		bne	.L12
 533:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			    (void)SWTC_Stop((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER);
 162                             		.loc 1 533 0
 163 00a0 75 41 22                		mov	#34, r1
 164 00a3 05 00 00 00             		bsr	_SWTC_Stop
 534:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			    (void)SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
 165                             		.loc 1 534 0
 166 00a7 75 41 23                		mov	#35, r1
 167 00aa 05 00 00 00             		bsr	_SWTC_Stop
 535:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			    (void)SWTC_Stop((SWTC_CountersType)AAL_STAB_SENS_S_TIMER);
 168                             		.loc 1 535 0
 169 00ae 75 41 1E                		mov	#30, r1
 170 00b1 05 00 00 00             		bsr	_SWTC_Stop
 536:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				(void)SWTC_Stop((SWTC_CountersType)AAL_STAB_STATO3_S_TIMER);
 171                             		.loc 1 536 0
 172 00b5 75 41 1F                		mov	#31, r1
 173 00b8 05 00 00 00             		bsr	_SWTC_Stop
 174 00bc 38 6C 05                		bra	.L92
 175                             	.L12:
 542:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  	if ( dirty_foam_Data.status==ALGO_LOAD_RESTORE)
 176                             		.loc 1 542 0
 177 00bf FB 72 00 00 00 00       		mov.L	#_dirty_foam_Data, r7
 178 00c5 CD 7A 01                		mov.B	1[r7], r10
 179 00c8 76 2A E0 00             		and #0xe0, r10
 180 00cc 75 5A 80                		cmp	#0x80, r10
 181 00cf 3B C1 02                		bne	.L13
 182                             	.LBB4:
 183                             	.LBB5:
 732:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	SFT_Timeout_4Loadrestore_Mgmt(FLT_PUMP_LOAD_EXE);
 184                             		.loc 1 732 0
 185 00d2 66 11                   		mov	#1, r1
 186 00d4 05 00 00 00             		bsr	_SFT_Timeout_4Loadrestore_Mgmt
 187                             	.LBE5:
 734:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	if ( TESTBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS) )
 188                             		.loc 1 734 0
 189 00d8 FB A2 00 00 00 00       		mov.L	#_Flags_1, r10
 190 00de CC AA                   		mov.B	[r10], r10
 191                             	.LBB6:
 192 00e0 FD 74 CA 01             		tst	#1, r10
 193 00e4 20 28                   		beq	.L14
 741:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		WaterInDW = OFFS_B(dirty_foam_setting_data.Data,0);
 194                             		.loc 1 741 0
 195 00e6 FB A2 00 00 00 00       		mov.L	#_dirty_foam_setting_data, r10
 196 00ec EC AB                   		mov.L	[r10], r11
 197 00ee FB A2 00 00 00 00       		mov.L	#_WaterInDW, r10
 198 00f4 C0 BA                   		mov.B	[r11], [r10]
 742:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		dirty_foam_Data.reduc_speed=0;
 199                             		.loc 1 742 0
 200 00f6 CD 7A 01                		mov.B	1[r7], r10
 743:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		SETBIT(Flags_2, FLAG2_CLOGGED_FILTER);
 201                             		.loc 1 743 0
 202 00f9 FB B2 00 00 00 00       		mov.L	#_Flags_2, r11
 203 00ff F0 B5                   		bset #5, [r11].B
 744:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		dirty_foam_Data.status = ALGO_SV_END;
 204                             		.loc 1 744 0
 205 0101 75 2A 19                		and #25, r10
 745:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		dirty_foam_Data.filter_foam_on=FALSE;
 206                             		.loc 1 745 0
 207 0104 75 3A C0                		or	#-64, r10
 208 0107 7A 3A                   		bclr	#3, r10
 209 0109 38 4B 02                		bra	.L90
 210                             	.L14:
 750:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	if ( ((Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==1)||(Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_W
 211                             		.loc 1 750 0
 212 010c FB 72 00 00 00 00       		mov.L	#_Virtual_Sensor_Value, r7
 213 0112 CC 77                   		mov.B	[r7], r7
 214 0114 60 17                   		sub	#1, r7
 215 0116 5B 77                   		movu.B	r7, r7
 216 0118 61 17                   		cmp	#1, r7
 217 011a 24 1C                   		bgtu	.L16
 218                             	.LBE6:
 219 011c FB 72 00 00 00 00       		mov.L	#_GIValid, r7
 220 0122 DC 77                   		mov.W	[r7], r7
 221                             	.LBB7:
 222 0124 76 27 00 04             		and #0x400, r7
 223 0128 5F 77                   		movu.W	r7, r7
 224 012a 61 07                   		cmp	#0, r7
 225 012c 12                      		beq	.L16
 753:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		(void)SWTC_Run((SWTC_CountersType)AAL_STAB_SENS_S_TIMER);
 226                             		.loc 1 753 0
 227 012d 75 41 1E                		mov	#30, r1
 228 0130 05 00 00 00             		bsr	_SWTC_Run
 229 0134 2E 1E                   		bra	.L17
 230                             	.L16:
 757:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		(void)SWTC_SetSValue((SWTC_CountersType)AAL_STAB_SENS_S_TIMER, (SWTC_SCounterValue)TOUT_STAB_SENS
 231                             		.loc 1 757 0
 232 0136 FB 72 00 00 00 00       		mov.L	#_dirty_foam_setting_data, r7
 233 013c EC 77                   		mov.L	[r7], r7
 234                             	.LBE7:
 235 013e 88 FA                   		mov.B	3[r7], r2
 236                             	.LBB8:
 237 0140 75 41 1E                		mov	#30, r1
 238 0143 75 22 7F                		and #0x7f, r2
 239 0146 05 00 00 00             		bsr	_SWTC_SetSValue
 758:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		(void)SWTC_Stop((SWTC_CountersType)AAL_STAB_SENS_S_TIMER);
 240                             		.loc 1 758 0
 241 014a 75 41 1E                		mov	#30, r1
 242 014d 05 00 00 00             		bsr	_SWTC_Stop
 243 0151 03                      		.balign 2,3,2
 244                             	.L17:
 761:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	if ( SWTC_IsExpired((SWTC_CountersType)AAL_STAB_SENS_S_TIMER) )
 245                             		.loc 1 761 0
 246 0152 75 41 1E                		mov	#30, r1
 247 0155 05 00 00 00             		bsr	_SWTC_IsExpired
 248 0159 FB 72 00 00 00 00       		mov.L	#_dirty_foam_Data, r7
 249 015f 61 01                   		cmp	#0, r1
 250 0161 20 12                   		beq	.L18
 763:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		(void)SWTC_Stop((SWTC_CountersType)AAL_STAB_SENS_S_TIMER);
 251                             		.loc 1 763 0
 252 0163 75 41 1E                		mov	#30, r1
 253 0166 05 00 00 00             		bsr	_SWTC_Stop
 764:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		dirty_foam_Data.status = ALGO_SV_WAIT;
 254                             		.loc 1 764 0
 255 016a CD 7A 01                		mov.B	1[r7], r10
 256 016d 75 2A 1F                		and #31, r10
 257 0170 38 E4 01                		bra	.L90
 258                             	.L18:
 769:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	if ( dirty_foam_Data.load_exe_time==0)
 259                             		.loc 1 769 0
 260 0173 CD 7A 01                		mov.B 1[r7], r10
 261 0176 75 2A 10                		and #16, r10
 262 0179 3B E1 01                		bne	.L19
 772:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		if ( (PM_PulseCounter_GetWarning() == NO_PULSE_COUNTER_WARNING) && (TESTBIT(Flags_1,JIF_FLAG1_PUL
 263                             		.loc 1 772 0
 264 017c 05 00 00 00             		bsr	_PM_PulseCounter_GetWarning
 265 0180 76 21 FF 00             		and #0xff, r1
 266 0184 3B C2 01                		bne	.L20
 267                             	.LBE8:
 268 0187 FB A2 00 00 00 00       		mov.L	#_Flags_1, r10
 269                             	.LBB9:
 270 018d CC AE                   		mov.B [r10], r14
 271 018f 64 4E                   		and #4, r14
 272 0191 3B B5 01                		bne	.L20
 775:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     		if(  WaterInDW >= OFFS_B(dirty_foam_setting_data.Data,0) )			
 273                             		.loc 1 775 0
 274 0194 FB B2 00 00 00 00       		mov.L	#_WaterInDW, r11
 275 019a CC BB                   		mov.B	[r11], r11
 276 019c FB 42 00 00 00 00       		mov.L	#_dirty_foam_setting_data, r4
 277 01a2 EC 44                   		mov.L	[r4], r4
 278 01a4 5B B2                   		movu.B	r11, r2
 279 01a6 44 42                   		cmp	[r4].UB, r2
 280 01a8 23 5D                   		bltu	.L21
 779:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				SETBIT(Flags_2, FLAG2_CLOGGED_FILTER);
 281                             		.loc 1 779 0
 282 01aa FB 72 00 00 00 00       		mov.L	#_Flags_2, r7
 283 01b0 F0 75                   		bset #5, [r7].B
 780:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  	if ((Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]!=1)&&(Virtual_Sensor_Value[GI_VIRTUAL_SENSO
 284                             		.loc 1 780 0
 285 01b2 FB 72 00 00 00 00       		mov.L	#_Virtual_Sensor_Value, r7
 286 01b8 CC 77                   		mov.B	[r7], r7
 287 01ba 60 17                   		sub	#1, r7
 288 01bc 5B 77                   		movu.B	r7, r7
 289 01be 61 17                   		cmp	#1, r7
 290 01c0 25 20                   		bleu	.L22
 291                             	.LBE9:
 782:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					(void)SWTC_SetSValue((SWTC_CountersType)AAL_STAB_SENS_S_TIMER, (SWTC_SCounterValue)TOUT_STAB_S
 292                             		.loc 1 782 0
 293 01c2 88 CA                   		mov.B	3[r4], r2
 294                             	.LBB10:
 295 01c4 75 41 1E                		mov	#30, r1
 296 01c7 75 22 7F                		and #0x7f, r2
 297 01ca 05 00 00 00             		bsr	_SWTC_SetSValue
 783:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					SETBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS); /* set flag overflow ripristini */	
 298                             		.loc 1 783 0
 299 01ce F0 A0                   		bset #0, [r10].B
 789:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					MachineStatistics.lastCycles[MOST_RECENT_STAT_CYCLE_POS].restore_koRestore.b.koRestore++;
 300                             		.loc 1 789 0
 301 01d0 FB 72 00 00 00 00       		mov.L	#_MachineStatistics, r7
 302 01d6 CD 7A 78                		mov.B	120[r7], r10
 303 01d9 71 AA 10                		add	#16, r10
 304 01dc C7 7A 78                		mov.B	r10, 120[r7]
 305 01df 03                      		.balign 2,3,5
 306                             	.L22:
 793:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				WaterInDW = OFFS_B(dirty_foam_setting_data.Data,0);
 307                             		.loc 1 793 0
 308 01e0 FB 72 00 00 00 00       		mov.L	#_dirty_foam_setting_data, r7
 309 01e6 EC 7A                   		mov.L	[r7], r10
 310 01e8 FB 72 00 00 00 00       		mov.L	#_WaterInDW, r7
 311 01ee C0 A7                   		mov.B	[r10], [r7]
 794:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				dirty_foam_Data.status= ALGO_SV_END;
 312                             		.loc 1 794 0
 313 01f0 FB A2 00 00 00 00       		mov.L	#_dirty_foam_Data, r10
 314 01f6 CD A7 01                		mov.B	1[r10], r7
 315 01f9 75 27 1F                		and #31, r7
 316 01fc 75 37 C0                		or	#-64, r7
 317 01ff C7 A7 01                		mov.B	r7, 1[r10]
 318 0202 38 30 04                		bra	.L5
 319                             	.L21:
 320                             	.LBE10:
 798:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				if ( TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_WASH))&&
 321                             		.loc 1 798 0
 322 0205 FB A2 00 00 00 00       		mov.L	#_GIValid, r10
 323 020b DC AA                   		mov.W	[r10], r10
 324                             	.LBB11:
 325 020d 76 2A 00 04             		and #0x400, r10
 326 0211 5F AA                   		movu.W	r10, r10
 327 0213 61 0A                   		cmp	#0, r10
 328 0215 3A 03 01                		beq	.L23
 799:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  	(Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]!=5) )
 329                             		.loc 1 799 0
 330 0218 FB A2 00 00 00 00       		mov.L	#_Virtual_Sensor_Value, r10
 798:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				if ( TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_WASH))&&
 331                             		.loc 1 798 0
 332 021e 58 AA                   		movu.B	[r10], r10
 333 0220 61 5A                   		cmp	#5, r10
 334 0222 3A F6 00                		beq	.L23
 802:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					if (dirty_foam_Data.init == TRUE)
 335                             		.loc 1 802 0
 336 0225 CD 7A 01                		mov.B	1[r7], r10
 337 0228 FD 74 CA 01             		tst	#1, r10
 338 022c 20 3A                   		beq	.L24
 805:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						GIWaterLoaded = 0;
 339                             		.loc 1 805 0
 340 022e FB A2 00 00 00 00       		mov.L	#_GIWaterLoaded, r10
 341 0234 D3 AE                   		mov.W	r14, [r10]
 806:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						PulseLoaded = 0;
 342                             		.loc 1 806 0
 343 0236 FB A2 00 00 00 00       		mov.L	#_PulseLoaded, r10
 344 023c D3 AE                   		mov.W	r14, [r10]
 807:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.emptyPulseIn = 0;
 345                             		.loc 1 807 0
 346 023e D7 7E 03                		mov.W	r14, 6[r7]
 809:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.waterInDWInit = WaterInDW; 
 347                             		.loc 1 809 0
 348 0241 C3 7B                   		mov.B	r11, [r7]
 810:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						PM_PulseCounter_SetCount(dirty_foam_Data.fullPulseIn);/* init pulse counter per nuovo contegg
 349                             		.loc 1 810 0
 350 0243 98 F1                   		mov.W	4[r7], r1
 351 0245 05 00 00 00             		bsr	_PM_PulseCounter_SetCount
 813:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						(void)SWTC_SetSValue((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER, (SWTC_SCounterValue)TOUT
 352                             		.loc 1 813 0
 353 0249 FB A2 00 00 00 00       		mov.L	#_Tab_LoadFault, r10
 354 024f EC AA                   		mov.L	[r10], r10
 355                             	.LBE11:
 356 0251 CD A2 09                		mov.B	9[r10], r2
 357                             	.LBB12:
 358 0254 75 41 22                		mov	#34, r1
 359 0257 75 22 7F                		and #0x7f, r2
 360 025a 05 00 00 00             		bsr	_SWTC_SetSValue
 816:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.init = FALSE;
 361                             		.loc 1 816 0
 362 025e CD 7A 01                		mov.B	1[r7], r10
 363 0261 7A 0A                   		bclr	#0, r10
 364 0263 C7 7A 01                		mov.B	r10, 1[r7]
 365                             		.balign 2,3,5
 366                             	.L24:
 820:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					WaterInDW = (dirty_foam_Data.waterInDWInit + GIWaterLoaded);  /* aggiornamento acqua in vasca 
 367                             		.loc 1 820 0
 368 0266 FB B2 00 00 00 00       		mov.L	#_GIWaterLoaded, r11
 369 026c 5C BA                   		movu.W	[r11], r10
 370 026e FB 72 00 00 00 00       		mov.L	#_dirty_foam_Data, r7
 371 0274 CC 7E                   		mov.B	[r7], r14
 372 0276 4B AE                   		add	r10, r14
 373 0278 FB 72 00 00 00 00       		mov.L	#_WaterInDW, r7
 374 027e C3 7E                   		mov.B	r14, [r7]
 822:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					TempCycle_Stats.loaded_water += GIWaterLoaded;
 375                             		.loc 1 822 0
 376 0280 FB 72 00 00 00 00       		mov.L	#_TempCycle_Stats, r7
 377 0286 DD 7E 06                		mov.W	12[r7], r14
 378 0289 4B AE                   		add	r10, r14
 379 028b D7 7E 06                		mov.W	r14, 12[r7]
 823:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					cycle_loaded_water += GIWaterLoaded;
 380                             		.loc 1 823 0
 381 028e FB E2 00 00 00 00       		mov.L	#_cycle_loaded_water, r14
 382 0294 06 88 EA                		add	[r14].L, r10
 383 0297 E3 EA                   		mov.L	r10, [r14]
 825:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	       			FLT_PulseCounterCheckDelay_Mgmt();
 384                             		.loc 1 825 0
 385 0299 05 00 00 00             		bsr	_FLT_PulseCounterCheckDelay_Mgmt
 828:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					if((GIWaterLoaded>5) && (TempCycle_Stats.flags.bit.restoreCntEn==1)) 
 386                             		.loc 1 828 0
 387 029d DC BE                   		mov.W	[r11], r14
 388 029f 5F EA                   		movu.W	r14, r10
 389 02a1 61 5A                   		cmp	#5, r10
 390 02a3 25 27                   		bleu	.L25
 391 02a5 88 F4                   		mov.B	2[r7], r4
 392 02a7 FD 74 C4 01             		tst	#1, r4
 393 02ab 20 1F                   		beq	.L25
 830:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						MachineStatistics.lastCycles[MOST_RECENT_STAT_CYCLE_POS].restore_koRestore.b.restore++;
 394                             		.loc 1 830 0
 395 02ad FB 32 00 00 00 00       		mov.L	#_MachineStatistics, r3
 396 02b3 CD 32 78                		mov.B	120[r3], r2
 397 02b6 71 2A 01                		add	#1, r2, r10
 398 02b9 64 FA                   		and #15, r10
 399 02bb 75 22 F0                		and #-16, r2
 400 02be 57 2A                   		or	r2, r10
 401 02c0 C7 3A 78                		mov.B	r10, 120[r3]
 831:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						TempCycle_Stats.flags.bit.restoreCntEn =0 ;
 402                             		.loc 1 831 0
 403 02c3 CF 4A                   		mov.B	r4, r10
 404 02c5 7A 0A                   		bclr	#0, r10
 405 02c7 C7 7A 02                		mov.B	r10, 2[r7]
 406                             		.balign 2,3,5
 407                             	.L25:
 835:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					dirty_foam_Data.emptyPulseIn = (GIWaterLoaded * FlowMeterDivider);	 /* aggiornamento acqua in 
 408                             		.loc 1 835 0
 409 02ca FB 72 00 00 00 00       		mov.L	#_dirty_foam_Data, r7
 410 02d0 FB A2 00 00 00 00       		mov.L	#_FlowMeterDivider, r10
 411 02d6 4C AE                   		mul	[r10].UB, r14
 412 02d8 D7 7E 03                		mov.W	r14, 6[r7]
 838:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b = EV_ON; /* pilotaggio EV*/
 413                             		.loc 1 838 0
 414 02db FB A2 00 00 00 00       		mov.L	#_EV_Pos, r10
 415 02e1 58 AA                   		movu.B	[r10], r10
 416 02e3 FB B2 00 00 00 00       		mov.L	#_LoadsReq_New, r11
 417 02e9 66 1C                   		mov	#1, r12
 418 02eb FE 0A BC                		mov.B	r12, [r10,r11]
 840:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					if ( FLT_CheckPulseCounterStill(PULSE_COUNTER_STILL_EXE) == TRUE )
 419                             		.loc 1 840 0
 420 02ee CF C1                   		mov.B	r12, r1
 421 02f0 05 00 00 00             		bsr	_FLT_CheckPulseCounterStill
 422 02f4 5B 12                   		movu.B	r1, r2
 423 02f6 61 12                   		cmp	#1, r2
 424 02f8 3B 3A 03                		bne	.L5
 845:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						FLT_warningSave(FLT_CODE_PULSE_COUNTER, FLT_SUBCODE_PULSE_COUNTER, WRN_PREFAULT);
 425                             		.loc 1 845 0
 426 02fb 66 71                   		mov	#7, r1
 427 02fd 66 03                   		mov	#0, r3
 428 02ff 05 00 00 00             		bsr	_FLT_warningSave
 846:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.load_exe_time=TRUE;
 429                             		.loc 1 846 0
 430 0303 CD 7A 01                		mov.B	1[r7], r10
 431 0306 78 4A                   		bset	#4, r10
 432 0308 C7 7A 01                		mov.B	r10, 1[r7]
 848:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						SETBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS); 
 433                             		.loc 1 848 0
 434 030b FB 72 00 00 00 00       		mov.L	#_Flags_1, r7
 435 0311 CC 7A                   		mov.B	[r7], r10
 436 0313 78 2A                   		bset #2, r10
 437 0315 38 3F 01                		bra	.L91
 438                             	.L23:
 858:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					if ( PulseLoaded >= dirty_foam_Data.emptyPulseIn )
 439                             		.loc 1 858 0
 440 0318 FB 72 00 00 00 00       		mov.L	#_PulseLoaded, r7
 441 031e DC 7E                   		mov.W	[r7], r14
 442 0320 FB 72 00 00 00 00       		mov.L	#_dirty_foam_Data, r7
 443 0326 DD 7A 03                		mov.W	6[r7], r10
 444 0329 5F E4                   		movu.W	r14, r4
 445 032b 5F AB                   		movu.W	r10, r11
 446 032d 47 B4                   		cmp	r11, r4
 447 032f 23 09                   		bltu	.L27
 860:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.fullPulseIn = ( PulseLoaded - dirty_foam_Data.emptyPulseIn );
 448                             		.loc 1 860 0
 449 0331 FF 0A AE                		sub	r10, r14, r10
 450 0334 D7 7A 02                		mov.W	r10, 4[r7]
 451 0337 03                      		.balign 2,3,5
 452                             	.L27:
 863:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					dirty_foam_Data.init = TRUE;
 453                             		.loc 1 863 0
 454 0338 CD 7A 01                		mov.B	1[r7], r10
 455 033b 78 0A                   		bset	#0, r10
 456 033d C7 7A 01                		mov.B	r10, 1[r7]
 865:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					(void)SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);	
 457                             		.loc 1 865 0
 458 0340 75 41 23                		mov	#35, r1
 459 0343 38 E9 02                		bra	.L93
 460                             	.L20:
 879:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	      dirty_foam_Data.load_exe_time = TRUE;
 461                             		.loc 1 879 0
 462 0346 FB 72 00 00 00 00       		mov.L	#_dirty_foam_Data, r7
 463 034c CD 7A 01                		mov.B	1[r7], r10
 464 034f 78 4A                   		bset	#4, r10
 880:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  dirty_foam_Data.init = TRUE;  /* uso la stessa var perch√® sono in uno stato diverso */
 465                             		.loc 1 880 0
 466 0351 78 0A                   		bset	#0, r10
 467 0353 03                      		.balign 2,3,5
 468                             	.L90:
 469 0354 C7 7A 01                		mov.B	r10, 1[r7]
 470 0357 38 DB 02                		bra	.L5
 471                             	.L19:
 472                             	.LBE12:
 892:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		if ( TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_WASH))&&
 473                             		.loc 1 892 0
 474 035a FB 72 00 00 00 00       		mov.L	#_GIValid, r7
 475 0360 DC 77                   		mov.W	[r7], r7
 476                             	.LBB13:
 477 0362 76 27 00 04             		and #0x400, r7
 478 0366 5F 77                   		movu.W	r7, r7
 479 0368 61 07                   		cmp	#0, r7
 480 036a 3A C8 02                		beq	.L5
 893:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	  	(Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]!=5) )
 481                             		.loc 1 893 0
 482 036d FB 72 00 00 00 00       		mov.L	#_Virtual_Sensor_Value, r7
 892:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		if ( TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_WASH))&&
 483                             		.loc 1 892 0
 484 0373 58 77                   		movu.B	[r7], r7
 485 0375 61 57                   		cmp	#5, r7
 486 0377 3A BB 02                		beq	.L5
 897:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b = EV_ON; /* pilotaggio EV*/  
 487                             		.loc 1 897 0
 488 037a FB 72 00 00 00 00       		mov.L	#_EV_Pos, r7
 489 0380 58 77                   		movu.B	[r7], r7
 490 0382 FB A2 00 00 00 00       		mov.L	#_LoadsReq_New, r10
 491 0388 66 1B                   		mov	#1, r11
 492 038a FE 07 AB                		mov.B	r11, [r7,r10]
 493 038d 38 A5 02                		bra	.L5
 494                             	.L13:
 495                             	.LBE13:
 496                             	.LBE4:
 547:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  	if ((TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_WASH)))&& (!uP_AltCtrl_Data.S
 497                             		.loc 1 547 0
 498 0390 FB A2 00 00 00 00       		mov.L	#_GIValid, r10
 499 0396 DC AA                   		mov.W	[r10], r10
 500 0398 76 2A 00 04             		and #0x400, r10
 501 039c 5F AA                   		movu.W	r10, r10
 502 039e 61 0A                   		cmp	#0, r10
 503 03a0 3A 4E 02                		beq	.L30
 547:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  	if ((TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_WASH)))&& (!uP_AltCtrl_Data.S
 504                             		.loc 1 547 0 is_stmt 0 discriminator 1
 505 03a3 FB A2 00 00 00 00       		mov.L	#_uP_AltCtrl_Data, r10
 506 03a9 CD AA 04                		mov.B	4[r10], r10
 507 03ac FD 74 CA 01             		tst	#1, r10
 508 03b0 3B 3E 02                		bne	.L30
 550:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==3)
 509                             		.loc 1 550 0 is_stmt 1
 510 03b3 FB A2 00 00 00 00       		mov.L	#_Virtual_Sensor_Value, r10
 511 03b9 58 AA                   		movu.B	[r10], r10
 512 03bb 61 3A                   		cmp	#3, r10
 513 03bd 21 1D                   		bne	.L32
 552:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					(void)SWTC_Run((SWTC_CountersType)AAL_STAB_STATO3_S_TIMER);	
 514                             		.loc 1 552 0
 515 03bf 75 41 1F                		mov	#31, r1
 516 03c2 05 00 00 00             		bsr	_SWTC_Run
 553:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					if ( dirty_foam_Data.status == ALGO_SV_WAIT_END)
 517                             		.loc 1 553 0
 518 03c6 88 7F                   		mov.B	1[r7], r7
 519 03c8 76 27 E0 00             		and #0xe0, r7
 520 03cc 75 57 E0                		cmp	#0xe0, r7
 521 03cf 21 2D                   		bne	.L33
 555:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						(void)SWTC_Run((SWTC_CountersType)AAL_END_ALWAYS3_M_TIMER);	
 522                             		.loc 1 555 0
 523 03d1 75 41 1B                		mov	#27, r1
 524 03d4 05 00 00 00             		bsr	_SWTC_Run
 525 03d8 2E 24                   		bra	.L33
 526                             	.L32:
 559:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					(void)SWTC_SetSValue((SWTC_CountersType)AAL_STAB_STATO3_S_TIMER, (SWTC_SCounterValue)TOUT_STAB
 527                             		.loc 1 559 0
 528 03da FB 72 00 00 00 00       		mov.L	#_Tab_HWCVS_data, r7
 529 03e0 EC 77                   		mov.L	[r7], r7
 530 03e2 CC 72                   		mov.B	[r7], r2
 531 03e4 75 41 1F                		mov	#31, r1
 532 03e7 75 22 7F                		and #0x7f, r2
 533 03ea 05 00 00 00             		bsr	_SWTC_SetSValue
 560:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					(void)SWTC_Stop((SWTC_CountersType)AAL_STAB_STATO3_S_TIMER);
 534                             		.loc 1 560 0
 535 03ee 75 41 1F                		mov	#31, r1
 536 03f1 05 00 00 00             		bsr	_SWTC_Stop
 561:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					(void)SWTC_Stop((SWTC_CountersType)AAL_END_ALWAYS3_M_TIMER);
 537                             		.loc 1 561 0
 538 03f5 75 41 1B                		mov	#27, r1
 539 03f8 05 00 00 00             		bsr	_SWTC_Stop
 540                             		.balign 2,3,2
 541                             	.L33:
 565:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				if (!SWTC_IsStopped((SWTC_CountersType)AAL_STAB_STATO3_S_TIMER) && !SWTC_IsExpired((SWTC_Counte
 542                             		.loc 1 565 0
 543 03fc 75 41 1F                		mov	#31, r1
 544 03ff 05 00 00 00             		bsr	_SWTC_IsStopped
 545 0403 61 01                   		cmp	#0, r1
 546 0405 20 13                   		beq	.L34
 547 0407 03                      		.balign 2,3,5
 548                             	.L37:
 571:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==0)
 549                             		.loc 1 571 0
 550 0408 FB 72 00 00 00 00       		mov.L	#_Virtual_Sensor_Value, r7
 551 040e CC 77                   		mov.B	[r7], r7
 552 0410 5B 7A                   		movu.B	r7, r10
 553 0412 61 0A                   		cmp	#0, r10
 554 0414 21 45                   		bne	.L83
 555 0416 2E 10                   		bra	.L35
 556                             	.L34:
 565:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				if (!SWTC_IsStopped((SWTC_CountersType)AAL_STAB_STATO3_S_TIMER) && !SWTC_IsExpired((SWTC_Counte
 557                             		.loc 1 565 0 discriminator 1
 558 0418 75 41 1F                		mov	#31, r1
 559 041b 05 00 00 00             		bsr	_SWTC_IsExpired
 560 041f 61 01                   		cmp	#0, r1
 561 0421 21 E7                   		bne	.L37
 562 0423 38 0F 02                		bra	.L5
 563                             	.L35:
 573:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****            			SETBIT(TerminatedAlgorithmBmp[0], AAL_DIRTY_FOAM_IDENTIFY_ALG);
 564                             		.loc 1 573 0
 565 0426 FB 72 00 00 00 00       		mov.L	#_TerminatedAlgorithmBmp, r7
 566 042c F0 72                   		bset #2, [r7].B
 574:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		        	CLRBIT(ActiveAlgorithmBmp[0],AAL_DIRTY_FOAM_IDENTIFY_ALG);
 567                             		.loc 1 574 0
 568 042e FB 72 00 00 00 00       		mov.L	#_ActiveAlgorithmBmp, r7
 569 0434 F0 7A                   		bclr #2, [r7].B
 575:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					dirty_foam_Data.reduc_speed=0;
 570                             		.loc 1 575 0
 571 0436 FB 72 00 00 00 00       		mov.L	#_dirty_foam_Data, r7
 572 043c CD 7A 01                		mov.B	1[r7], r10
 576:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					dirty_foam_Data.status = ALGO_SV_END;
 573                             		.loc 1 576 0
 574 043f 75 2A 19                		and #25, r10
 577:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					dirty_foam_Data.filter_foam_on=FALSE;
 575                             		.loc 1 577 0
 576 0442 75 3A C0                		or	#-64, r10
 577 0445 7A 3A                   		bclr	#3, r10
 578 0447 C7 7A 01                		mov.B	r10, 1[r7]
 578:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					SETBIT(Flags_1,JIF_FLAG1_ALGO_DIRTY_F_KO_POS);
 579                             		.loc 1 578 0
 580 044a FB 72 00 00 00 00       		mov.L	#_Flags_1, r7
 581 0450 CC 7A                   		mov.B	[r7], r10
 582 0452 78 5A                   		bset #5, r10
 583                             		.balign 2,3,1
 584                             	.L91:
 585 0454 C3 7A                   		mov.B	r10, [r7]
 579:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 					return;
 586                             		.loc 1 579 0
 587 0456 38 DC 01                		bra	.L5
 588                             	.L83:
 581:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				switch (dirty_foam_Data.status)
 589                             		.loc 1 581 0
 590 0459 FB 42 00 00 00 00       		mov.L	#_dirty_foam_Data, r4
 591 045f B0 4B                   		movu.B	1[r4], r3
 592 0461 68 53                   		shlr	#5, r3
 593 0463 60 13                   		sub	#1, r3
 594 0465 EF 4E                   		mov.L	r4, r14
 595 0467 61 63                   		cmp	#6, r3
 596 0469 24 0D                   		bgtu	.L38
 597 046b FB A2 00 00 00 00       		mov.L	#.L46, r10
 598 0471 FE 63 AA                		mov.L	[r3,r10], r10
 599                             		
 600 0474 7F 0A                   	1:jmp	r10
 601                             		.section	.rodata.AAL_Dirty_Foam_identify,"a",@progbits
 602                             		.balign 4
 603                             		.balign 4
 604                             	.L46:
 605 0000 00 00 04 9A             		.long .L39
 606 0004 00 00 04 FF             		.long .L40
 607 0008 00 00 05 23             		.long .L41
 608 000c 00 00 05 83             		.long .L42
 609 0010 00 00 05 89             		.long .L43
 610 0014 00 00 05 E5             		.long .L44
 611 0018 00 00 05 B5             		.long .L45
 612                             		.section	.text.AAL_Dirty_Foam_identify
 613                             	.L38:
 584:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.reduc_speed=0;
 614                             		.loc 1 584 0
 615 0476 88 4F                   		mov.B	1[r4], r7
 585:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.filter_foam_on=FALSE;
 616                             		.loc 1 585 0
 617 0478 76 27 F9 00             		and #0xf9, r7
 618 047c 7A 37                   		bclr	#3, r7
 619 047e 80 4F                   		mov.B	r7, 1[r4]
 586:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==3) 
 620                             		.loc 1 586 0
 621 0480 61 3A                   		cmp	#3, r10
 622 0482 21 0C                   		bne	.L47
 588:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.status= ALGO_1LIMIT_POWER;	
 623                             		.loc 1 588 0
 624 0484 75 27 1F                		and #31, r7
 590:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.filter_foam_on=TRUE;
 625                             		.loc 1 590 0
 626 0487 75 37 22                		or	#34, r7
 627 048a 78 37                   		bset	#3, r7
 628 048c 80 4F                   		mov.B	r7, 1[r4]
 629                             		.balign 2,3,5
 630                             	.L47:
 594:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						CLRBIT(Statistics_update_flag, STATISTIC_FLAG_DIRTY_UPDATE);
 631                             		.loc 1 594 0
 632 048e FB 72 00 00 00 00       		mov.L	#_Statistics_update_flag, r7
 633 0494 CC 7A                   		mov.B	[r7], r10
 634 0496 7A 0A                   		bclr #0, r10
 635 0498 2E 62                   		bra	.L86
 636                             	.L39:
 599:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.reduc_speed=1;
 637                             		.loc 1 599 0
 638 049a FB A2 00 00 00 00       		mov.L	#_dirty_foam_Data, r10
 639 04a0 88 4C                   		mov.B	1[r4], r4
 640 04a2 75 24 F9                		and #-7, r4
 641 04a5 78 14                   		bset #1, r4
 642 04a7 C7 E4 01                		mov.B	r4, 1[r14]
 600:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==3) 
 643                             		.loc 1 600 0
 644 04aa 5B 7B                   		movu.B	r7, r11
 645 04ac 61 3B                   		cmp	#3, r11
 646 04ae 21 19                   		bne	.L48
 602:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							AAL_Load_Var_Init ();					
 647                             		.loc 1 602 0
 648 04b0 05 00 00 00             		bsr	_AAL_Load_Var_Init
 603:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.status= ALGO_LOAD_RESTORE;
 649                             		.loc 1 603 0
 650 04b4 CD A7 01                		mov.B	1[r10], r7
 651 04b7 75 27 1F                		and #31, r7
 604:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.load_exe_time=0;
 652                             		.loc 1 604 0
 653 04ba 75 37 80                		or	#0xffffff80, r7
 654 04bd 7A 47                   		bclr	#4, r7
 605:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.filter_foam_on=TRUE;
 655                             		.loc 1 605 0
 656 04bf 78 37                   		bset	#3, r7
 609:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.reduc_speed=0;
 657                             		.loc 1 609 0
 658 04c1 75 27 F9                		and #-7, r7
 659 04c4 38 EC 00                		bra	.L87
 660                             	.L48:
 611:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							if ((Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==2) || (Virtual_Sensor_Value[GI_VIRTUAL_SE
 661                             		.loc 1 611 0
 662 04c7 60 17                   		sub	#1, r7
 663 04c9 5B 77                   		movu.B	r7, r7
 664 04cb 61 17                   		cmp	#1, r7
 665 04cd 25 05 38 1F 01          		bgtu	.L30
 614:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 									dirty_foam_Data.status= ALGO_WAIT_1L;
 666                             		.loc 1 614 0
 667 04d2 75 24 1F                		and #31, r4
 615:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 									dirty_foam_Data.filter_foam_on=FALSE;
 668                             		.loc 1 615 0
 669 04d5 78 64                   		bset #6, r4
 670 04d7 7A 34                   		bclr	#3, r4
 671 04d9 C7 A4 01                		mov.B	r4, 1[r10]
 617:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 									if ( TESTBIT(Flags_2, STATISTIC_FLAG_DIRTY_UPDATE)==0)
 672                             		.loc 1 617 0
 673 04dc FB 72 00 00 00 00       		mov.L	#_Flags_2, r7
 674 04e2 CC 7A                   		mov.B	[r7], r10
 675 04e4 FD 74 CA 01             		tst	#1, r10
 676 04e8 3B 06 01                		bne	.L30
 619:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 										IncByteWithCheck(&MachineStatistics.lastCycles[MOST_RECENT_STAT_CYCLE_POS].dirty_foam_red
 677                             		.loc 1 619 0
 678 04eb FB 12 00 00 00 00       		mov.L	#_MachineStatistics+128, r1
 679 04f1 05 00 00 00             		bsr	_IncByteWithCheck
 620:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 										SETBIT(Flags_2, STATISTIC_FLAG_DIRTY_UPDATE);
 680                             		.loc 1 620 0
 681 04f5 CC 7A                   		mov.B	[r7], r10
 682 04f7 78 0A                   		bset #0, r10
 683 04f9 03                      		.balign 2,3,1
 684                             	.L86:
 685 04fa C3 7A                   		mov.B	r10, [r7]
 686 04fc 38 F2 00                		bra	.L30
 687                             	.L40:
 628:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.reduc_speed=1;
 688                             		.loc 1 628 0
 689 04ff CD 4A 01                		mov.B	1[r4], r10
 690 0502 75 2A F9                		and #-7, r10
 629:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.filter_foam_on=FALSE;
 691                             		.loc 1 629 0
 692 0505 78 1A                   		bset #1, r10
 693 0507 7A 3A                   		bclr	#3, r10
 694 0509 C7 4A 01                		mov.B	r10, 1[r4]
 630:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==3)
 695                             		.loc 1 630 0
 696 050c 5B 77                   		movu.B	r7, r7
 697 050e 61 37                   		cmp	#3, r7
 698 0510 3B DE 00                		bne	.L30
 633:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.status= ALGO_2LIMIT_POWER;
 699                             		.loc 1 633 0
 700 0513 75 2A 19                		and #25, r10
 635:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.filter_foam_on=TRUE;	
 701                             		.loc 1 635 0
 702 0516 75 3A 64                		or	#0x64, r10
 703 0519 78 3A                   		bset	#3, r10
 704 051b FB 72 00 00 00 00       		mov.L	#_dirty_foam_Data, r7
 705 0521 2E 5D                   		bra	.L88
 706                             	.L41:
 640:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.reduc_speed=2;
 707                             		.loc 1 640 0
 708 0523 88 4F                   		mov.B	1[r4], r7
 709 0525 75 27 F9                		and #-7, r7
 641:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.filter_foam_on=FALSE;
 710                             		.loc 1 641 0
 711 0528 78 27                   		bset #2, r7
 712 052a 7A 37                   		bclr	#3, r7
 713 052c 80 4F                   		mov.B	r7, 1[r4]
 643:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						if ( TESTBIT(Flags_2, STATISTIC_FLAG_DIRTY_UPDATE))
 714                             		.loc 1 643 0
 715 052e FB 72 00 00 00 00       		mov.L	#_Flags_2, r7
 716 0534 CC 7A                   		mov.B	[r7], r10
 717 0536 FD 74 CA 01             		tst	#1, r10
 718 053a 20 0E                   		beq	.L49
 645:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							IncByteWithCheck(&MachineStatistics.lastCycles[MOST_RECENT_STAT_CYCLE_POS].dirty_foam_redux_
 719                             		.loc 1 645 0
 720 053c FB 12 00 00 00 00       		mov.L	#_MachineStatistics+128, r1
 721 0542 05 00 00 00             		bsr	_IncByteWithCheck
 646:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							CLRBIT(Flags_2, STATISTIC_FLAG_DIRTY_UPDATE);
 722                             		.loc 1 646 0
 723 0546 F0 78                   		bclr #0, [r7].B
 724                             		.balign 2,3,5
 725                             	.L49:
 649:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==3)
 726                             		.loc 1 649 0
 727 0548 FB 72 00 00 00 00       		mov.L	#_Virtual_Sensor_Value, r7
 728 054e 58 77                   		movu.B	[r7], r7
 729 0550 61 37                   		cmp	#3, r7
 730 0552 3B 9C 00                		bne	.L30
 651:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							(void)SWTC_SetSValue((SWTC_CountersType)AAL_END_ALWAYS3_M_TIMER, (SWTC_MCounterValue)TOUT_EN
 731                             		.loc 1 651 0
 732 0555 FB 72 00 00 00 00       		mov.L	#_dirty_foam_setting_data, r7
 733 055b 5D 7A 02                		movu.W	4[r7], r10
 734 055e 61 2A                   		cmp	#2, r10
 735 0560 25 07                   		bleu	.L51
 651:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							(void)SWTC_SetSValue((SWTC_CountersType)AAL_END_ALWAYS3_M_TIMER, (SWTC_MCounterValue)TOUT_EN
 736                             		.loc 1 651 0 is_stmt 0 discriminator 1
 737 0562 EC 77                   		mov.L	[r7], r7
 738 0564 89 7A                   		mov.B	5[r7], r2
 739 0566 0C                      		bra	.L50
 740                             	.L51:
 651:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							(void)SWTC_SetSValue((SWTC_CountersType)AAL_END_ALWAYS3_M_TIMER, (SWTC_MCounterValue)TOUT_EN
 741                             		.loc 1 651 0
 742 0567 66 82                   		mov	#8, r2
 743 0569 03                      		.balign 2,3,2
 744                             	.L50:
 651:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							(void)SWTC_SetSValue((SWTC_CountersType)AAL_END_ALWAYS3_M_TIMER, (SWTC_MCounterValue)TOUT_EN
 745                             		.loc 1 651 0 discriminator 3
 746 056a 75 41 1B                		mov	#27, r1
 747 056d 05 00 00 00             		bsr	_SWTC_SetSValue
 652:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.status = ALGO_SV_WAIT_END;
 748                             		.loc 1 652 0 is_stmt 1 discriminator 3
 749 0571 FB 72 00 00 00 00       		mov.L	#_dirty_foam_Data, r7
 750 0577 CD 7A 01                		mov.B	1[r7], r10
 751 057a 75 3A E0                		or	#-32, r10
 752 057d 03                      		.balign 2,3,5
 753                             	.L88:
 754 057e C7 7A 01                		mov.B	r10, 1[r7]
 755 0581 2E 6D                   		bra	.L30
 756                             	.L42:
 658:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.filter_foam_on=TRUE;
 757                             		.loc 1 658 0
 758 0583 88 4F                   		mov.B	1[r4], r7
 759 0585 78 37                   		bset	#3, r7
 760 0587 2E 63                   		bra	.L89
 761                             	.L43:
 662:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.filter_foam_on=FALSE;
 762                             		.loc 1 662 0
 763 0589 FB A2 00 00 00 00       		mov.L	#_dirty_foam_Data, r10
 764 058f 88 4C                   		mov.B	1[r4], r4
 765 0591 7A 34                   		bclr	#3, r4
 766 0593 C7 E4 01                		mov.B	r4, 1[r14]
 663:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==3) 
 767                             		.loc 1 663 0
 768 0596 5B 77                   		movu.B	r7, r7
 769 0598 61 37                   		cmp	#3, r7
 770 059a 21 54                   		bne	.L30
 665:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.reduc_speed=0;
 771                             		.loc 1 665 0
 772 059c 75 24 F9                		and #-7, r4
 773 059f C7 A4 01                		mov.B	r4, 1[r10]
 666:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							AAL_Load_Var_Init();
 774                             		.loc 1 666 0
 775 05a2 05 00 00 00             		bsr	_AAL_Load_Var_Init
 668:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.load_exe_time=0;
 776                             		.loc 1 668 0
 777 05a6 CD A7 01                		mov.B	1[r10], r7
 670:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.status= ALGO_LOAD_RESTORE;
 778                             		.loc 1 670 0
 779 05a9 64 F7                   		and #15, r7
 672:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.filter_foam_on=TRUE;
 780                             		.loc 1 672 0
 781 05ab 75 37 80                		or	#0xffffff80, r7
 782 05ae 78 37                   		bset	#3, r7
 783                             		.balign 2,3,5
 784                             	.L87:
 785 05b0 C7 A7 01                		mov.B	r7, 1[r10]
 786 05b3 2E 3B                   		bra	.L30
 787                             	.L45:
 677:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.filter_foam_on=FALSE;
 788                             		.loc 1 677 0
 789 05b5 FB A2 00 00 00 00       		mov.L	#_dirty_foam_Data, r10
 790 05bb 88 4F                   		mov.B	1[r4], r7
 791 05bd 7A 37                   		bclr	#3, r7
 792 05bf 80 4F                   		mov.B	r7, 1[r4]
 678:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						if (SWTC_IsExpired((SWTC_CountersType)AAL_END_ALWAYS3_M_TIMER) )
 793                             		.loc 1 678 0
 794 05c1 75 41 1B                		mov	#27, r1
 795 05c4 05 00 00 00             		bsr	_SWTC_IsExpired
 796 05c8 61 01                   		cmp	#0, r1
 797 05ca 20 24                   		beq	.L30
 680:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							dirty_foam_Data.status=ALGO_SV_END; 
 798                             		.loc 1 680 0
 799 05cc CD A7 01                		mov.B	1[r10], r7
 800 05cf 75 27 1F                		and #31, r7
 801 05d2 75 37 C0                		or	#-64, r7
 802 05d5 C7 A7 01                		mov.B	r7, 1[r10]
 681:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 							SETBIT(Flags_1,JIF_FLAG1_ALGO_DIRTY_F_KO_POS);
 803                             		.loc 1 681 0
 804 05d8 FB 72 00 00 00 00       		mov.L	#_Flags_1, r7
 805 05de CC 7A                   		mov.B	[r7], r10
 806 05e0 78 5A                   		bset #5, r10
 807 05e2 38 18 FF                		bra	.L86
 808                             	.L44:
 686:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 						dirty_foam_Data.filter_foam_on=FALSE;
 809                             		.loc 1 686 0
 810 05e5 88 4F                   		mov.B	1[r4], r7
 811 05e7 7A 37                   		bclr	#3, r7
 812 05e9 03                      		.balign 2,3,5
 813                             	.L89:
 814 05ea C7 E7 01                		mov.B	r7, 1[r14]
 815 05ed 03                      		.balign 2,3,5
 816                             	.L30:
 693:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			(void)SWTC_SetSValue((SWTC_CountersType)AAL_STAB_STATO3_S_TIMER, (SWTC_SCounterValue)TOUT_STAB_S
 817                             		.loc 1 693 0
 818 05ee FB 72 00 00 00 00       		mov.L	#_Tab_HWCVS_data, r7
 819 05f4 EC 77                   		mov.L	[r7], r7
 820 05f6 CC 72                   		mov.B	[r7], r2
 821 05f8 75 41 1F                		mov	#31, r1
 822 05fb 75 22 7F                		and #0x7f, r2
 711:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** }
 823                             		.loc 1 711 0
 824 05fe 6F 7C                   		popm	r7-r12
 693:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			(void)SWTC_SetSValue((SWTC_CountersType)AAL_STAB_STATO3_S_TIMER, (SWTC_SCounterValue)TOUT_STAB_S
 825                             		.loc 1 693 0
 826 0600 04 00 00 00             		bra	_SWTC_SetSValue
 827                             	.L82:
 701:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  SETBIT(TerminatedAlgorithmBmp[0], AAL_DIRTY_FOAM_IDENTIFY_ALG);
 828                             		.loc 1 701 0
 829 0604 FB 72 00 00 00 00       		mov.L	#_TerminatedAlgorithmBmp, r7
 830 060a F0 72                   		bset #2, [r7].B
 702:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  CLRBIT(ActiveAlgorithmBmp[0],AAL_DIRTY_FOAM_IDENTIFY_ALG);
 831                             		.loc 1 702 0
 832 060c FB 72 00 00 00 00       		mov.L	#_ActiveAlgorithmBmp, r7
 833 0612 F0 7A                   		bclr #2, [r7].B
 704:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  dirty_foam_Data.reduc_speed=0;
 834                             		.loc 1 704 0
 835 0614 FB 72 00 00 00 00       		mov.L	#_dirty_foam_Data, r7
 836 061a CD 7A 01                		mov.B	1[r7], r10
 705:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  dirty_foam_Data.status= ALGO_SV_END;
 837                             		.loc 1 705 0
 838 061d 75 2A 19                		and #25, r10
 706:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  dirty_foam_Data.filter_foam_on=FALSE;
 839                             		.loc 1 706 0
 840 0620 75 3A C0                		or	#-64, r10
 841 0623 7A 3A                   		bclr	#3, r10
 842 0625 C7 7A 01                		mov.B	r10, 1[r7]
 843                             		.balign 2,3,2
 844                             	.L92:
 707:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  (void)SWTC_Stop((SWTC_CountersType)AAL_END_ALWAYS3_M_TIMER);
 845                             		.loc 1 707 0
 846 0628 75 41 1B                		mov	#27, r1
 847 062b 03                      		.balign 2,3,1
 848                             	.L93:
 711:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** }
 849                             		.loc 1 711 0
 850 062c 6F 7C                   		popm	r7-r12
 707:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  (void)SWTC_Stop((SWTC_CountersType)AAL_END_ALWAYS3_M_TIMER);
 851                             		.loc 1 707 0
 852 062e 04 00 00 00             		bra	_SWTC_Stop
 853                             	.L5:
 711:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** }
 854                             		.loc 1 711 0
 855 0632 3F 7C 06                		rtsd	#24, r7-r12
 856                             	.LFE7:
 858 0635 03                      		.section	.text.AAL_ReadVirtualSensor,"ax",@progbits
 859                             		.global	_AAL_ReadVirtualSensor
 861                             	_AAL_ReadVirtualSensor:
 862                             	.LFB0:
 114:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** {
 863                             		.loc 1 114 0
 864                             	.LVL5:
 865 0000 6E 7A                   		pushm	r7-r10
 866                             	.LCFI2:
 867 0002 60 80                   		sub	#8, r0
 868                             	.LCFI3:
 116:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	switch(cmd)
 869                             		.loc 1 116 0
 870 0004 5B 11                   		movu.B	r1, r1
 871 0006 61 01                   		cmp	#0, r1
 872 0008 20 7F                   		beq	.L96
 873 000a 61 11                   		cmp	#1, r1
 874 000c 3B FC 00                		bne	.L111
 875                             	.LBB14:
 122:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			if (HWC_Flags.bit.vs_wash_presence )
 876                             		.loc 1 122 0
 877 000f FB 72 00 00 00 00       		mov.L	#_HWC_Flags, r7
 878 0015 DC 77                   		mov.W	[r7], r7
 879 0017 75 27 10                		and #16, r7
 880 001a 5F 77                   		movu.W	r7, r7
 881 001c 61 07                   		cmp	#0, r7
 882 001e 12                      		beq	.L98
 124:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				CLRBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS); /* reset flag overflow ripristini */	
 883                             		.loc 1 124 0
 884 001f FB 72 00 00 00 00       		mov.L	#_Flags_1, r7
 885 0025 F0 78                   		bclr #0, [r7].B
 886 0027 03                      		.balign 2,3,5
 887                             	.L98:
 126:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			CLRBIT(Flags_1,JIF_FLAG1_ALGO_DIRTY_F_KO_POS); /* reset flag vuoto sensore in lavaggio */
 888                             		.loc 1 126 0
 889 0028 FB 72 00 00 00 00       		mov.L	#_Flags_1, r7
 890 002e F0 7D                   		bclr #5, [r7].B
 127:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			if(BasicLoader(PTR_ALGORITHM_READ_VS_DATA, AADisplParams[AAL_READVIRTUALSENSOR_ALG][0] , &ReadVS
 891                             		.loc 1 127 0
 892 0030 FB 72 00 00 00 00       		mov.L	#_AADisplParams, r7
 893 0036 B1 72                   		movu.B	4[r7], r2
 894 0038 75 41 2C                		mov	#44, r1
 895                             	.LVL6:
 896 003b EF 03                   		mov.L	r0, r3
 897 003d 05 00 00 00             		bsr	_BasicLoader
 898                             	.LVL7:
 899 0041 76 21 FF 00             		and #0xff, r1
 900 0045 14                      		beq	.L99
 901 0046 38 C2 00                		bra	.L111
 902                             	.L99:
 136:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			 (void)SWTC_SetMValue((SWTC_CountersType)READ_VS_M_TIMER, (SWTC_MCounterValue)OFFS_W(ReadVSDataL
 903                             		.loc 1 136 0
 904 0049 EC 07                   		mov.L	[r0], r7
 905 004b DC 72                   		mov.W	[r7], r2
 906 004d 75 41 1C                		mov	#28, r1
 907 0050 76 22 FF 7F             		and #0x7fff, r2
 908 0054 05 00 00 00             		bsr	_SWTC_SetMValue
 909                             	.LVL8:
 137:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  ReadVS_Data.pumpType=(OFFS_B(ReadVSDataLoader.Data, 0)&0x80)?DRAIN_PUMP_ALG:WASH_PUMP_ALG;
 910                             		.loc 1 137 0
 911 0058 EC 04                   		mov.L	[r0], r4
 912 005a FB E2 00 00 00 00       		mov.L	#_ReadVS_Data, r14
 913 0060 CC 4A                   		mov.B	[r4], r10
 914 0062 CC E7                   		mov.B	[r14], r7
 915 0064 61 0A                   		cmp	#0, r10
 916 0066 FD E0 97                		bmlt	#0, r7
 917 0069 C3 E7                   		mov.B	r7, [r14]
 138:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  ReadVS_Data.targetSpeed =(uint16_t)OFFS_B(ReadVSDataLoader.Data,2)*PUMP_CTRL_BLDC_SPEED_MUL;
 918                             		.loc 1 138 0
 919 006b B0 C3                   		movu.B	2[r4], r3
 920 006d 75 13 19                		mul	#25, r3
 921 0070 D7 E3 02                		mov.W	r3, 4[r14]
 139:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  ReadVS_Data.targetRamp = OFFS_B(ReadVSDataLoader.Data,3)*PUMP_CTRL_BLDC_RAMP_TIME_MUL;
 922                             		.loc 1 139 0
 923 0073 B0 CB                   		movu.B	3[r4], r3
 924 0075 63 53                   		mul	#5, r3
 925 0077 D7 E3 03                		mov.W	r3, 6[r14]
 140:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  ReadVS_Data.ctrl_active =  (OFFS_B(ReadVSDataLoader.Data,4)& 0x80)>>7;
 926                             		.loc 1 140 0
 927 007a CD 4A 04                		mov.B	4[r4], r10
 928 007d 61 0A                   		cmp	#0, r10
 929 007f FD E1 97                		bmlt	#1, r7
 930 0082 C3 E7                   		mov.B	r7, [r14]
 931                             	.LBE14:
 144:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  break;
 932                             		.loc 1 144 0
 933 0084 38 94 00                		bra	.L94
 934                             	.L96:
 148:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			if (uPDoorStatus == UP_DOOR_WAIT)
 935                             		.loc 1 148 0
 936 0087 FB 72 00 00 00 00       		mov.L	#_uPDoorStatus, r7
 937 008d 58 77                   		movu.B	[r7], r7
 151:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				(void)SWTC_Stop((SWTC_CountersType)READ_VS_M_TIMER);
 938                             		.loc 1 151 0
 939 008f 75 41 1C                		mov	#28, r1
 148:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			if (uPDoorStatus == UP_DOOR_WAIT)
 940                             		.loc 1 148 0
 941 0092 61 07                   		cmp	#0, r7
 942 0094 1F                      		bne	.L102
 151:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				(void)SWTC_Stop((SWTC_CountersType)READ_VS_M_TIMER);
 943                             		.loc 1 151 0
 944 0095 05 00 00 00             		bsr	_SWTC_Stop
 945                             	.LVL9:
 152:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				return ;
 946                             		.loc 1 152 0
 947 0099 2E 7F                   		bra	.L94
 948                             	.L102:
 155:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  (void)SWTC_Run((SWTC_CountersType)READ_VS_M_TIMER);
 949                             		.loc 1 155 0
 950 009b 05 00 00 00             		bsr	_SWTC_Run
 951                             	.LVL10:
 952                             	.LBB15:
 157:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  uint8_t index = (ReadVS_Data.pumpType==DRAIN_PUMP_ALG)?DRAIN_BLDC_PUMP:WASH_BLDC_PUMP;
 953                             		.loc 1 157 0
 954 009f FB 72 00 00 00 00       		mov.L	#_ReadVS_Data, r7
 955 00a5 CC 7A                   		mov.B [r7], r10
 956 00a7 64 1A                   		and #1, r10
 957                             	.LVL11:
 160:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****  			  if(SWTC_IsExpired((SWTC_CountersType)READ_VS_M_TIMER) && (ReadVS_Data.ctrl_active==0))
 958                             		.loc 1 160 0
 959 00a9 75 41 1C                		mov	#28, r1
 960 00ac 05 00 00 00             		bsr	_SWTC_IsExpired
 961                             	.LVL12:
 962 00b0 61 01                   		cmp	#0, r1
 963 00b2 20 23                   		beq	.L103
 160:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****  			  if(SWTC_IsExpired((SWTC_CountersType)READ_VS_M_TIMER) && (ReadVS_Data.ctrl_active==0))
 964                             		.loc 1 160 0 is_stmt 0 discriminator 1
 965 00b4 CC 77                   		mov.B [r7], r7
 966 00b6 64 27                   		and #2, r7
 967 00b8 21 1D                   		bne	.L103
 968                             	.LVL13:
 164:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				  (void)SWTC_Stop((SWTC_CountersType)READ_VS_M_TIMER);
 969                             		.loc 1 164 0 is_stmt 1
 970 00ba 75 41 1C                		mov	#28, r1
 971 00bd 05 00 00 00             		bsr	_SWTC_Stop
 972                             	.LVL14:
 165:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		          SETBIT(TerminatedAlgorithmBmp[0], AAL_READVIRTUALSENSOR_ALG);
 973                             		.loc 1 165 0
 974 00c1 FB 42 00 00 00 00       		mov.L	#_TerminatedAlgorithmBmp, r4
 975 00c7 F0 44                   		bset #4, [r4].B
 166:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		          CLRBIT(ActiveAlgorithmBmp[0],AAL_READVIRTUALSENSOR_ALG);
 976                             		.loc 1 166 0
 977 00c9 FB 42 00 00 00 00       		mov.L	#_ActiveAlgorithmBmp, r4
 978 00cf F0 4C                   		bclr #4, [r4].B
 163:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				  time = 0;
 979                             		.loc 1 163 0
 980 00d1 DF 74                   		mov.W	r7, r4
 166:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		          CLRBIT(ActiveAlgorithmBmp[0],AAL_READVIRTUALSENSOR_ALG);
 981                             		.loc 1 166 0
 982 00d3 2E 0D                   		bra	.L104
 983                             	.LVL15:
 984                             	.L103:
 170:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				  speed = ReadVS_Data.targetSpeed;
 985                             		.loc 1 170 0
 986 00d5 FB 42 00 00 00 00       		mov.L	#_ReadVS_Data, r4
 987 00db 98 C7                   		mov.W	4[r4], r7
 988                             	.LVL16:
 171:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 				  time = ReadVS_Data.targetRamp;
 989                             		.loc 1 171 0
 990 00dd 98 CC                   		mov.W	6[r4], r4
 991                             	.LVL17:
 992 00df 03                      		.balign 2,3,1
 993                             	.L104:
 174:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  SET_BLDC_SPEED(BLDC_PumpReq_New[index],speed);
 994                             		.loc 1 174 0
 995 00e0 5B AE                   		movu.B	r10, r14
 996 00e2 63 CE                   		mul	#12, r14
 997 00e4 70 EE 00 00 00 00       		add	#_BLDC_PumpReq_New, r14
 998 00ea 5F 73                   		movu.W	r7, r3
 999 00ec FD 88 3A                		shlr	#8, r3, r10
 1000                             	.LVL18:
 1001 00ef C7 EA 02                		mov.B	r10, 2[r14]
 1002 00f2 C7 E7 03                		mov.B	r7, 3[r14]
 1003 00f5 61 03                   		cmp	#0, r3
 1004 00f7 FC DB 31                		scne.L	r3
 1005 00fa C7 E3 01                		mov.B	r3, 1[r14]
 175:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  SET_BLDC_TIME(BLDC_PumpReq_New[index],time);
 1006                             		.loc 1 175 0
 1007 00fd FD 88 47                		shlr	#8, r4, r7
 1008                             	.LVL19:
 1009 0100 C7 E7 04                		mov.B	r7, 4[r14]
 1010 0103 C7 E4 05                		mov.B	r4, 5[r14]
 1011                             	.LBE15:
 177:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		  break;
 1012                             		.loc 1 177 0
 1013 0106 2E 12                   		bra	.L94
 1014                             	.LVL20:
 1015                             	.L111:
 181:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 			  SETBIT(TerminatedAlgorithmBmp[0], AAL_READVIRTUALSENSOR_ALG);
 1016                             		.loc 1 181 0
 1017 0108 FB 72 00 00 00 00       		mov.L	#_TerminatedAlgorithmBmp, r7
 1018 010e F0 74                   		bset #4, [r7].B
 182:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 	          CLRBIT(ActiveAlgorithmBmp[0],AAL_READVIRTUALSENSOR_ALG);
 1019                             		.loc 1 182 0
 1020 0110 FB 72 00 00 00 00       		mov.L	#_ActiveAlgorithmBmp, r7
 1021 0116 F0 7C                   		bclr #4, [r7].B
 1022                             		.balign 2,3,2
 1023                             	.L94:
 185:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** }
 1024                             		.loc 1 185 0
 1025 0118 3F 7A 06                		rtsd	#24, r7-r10
 1026                             	.LFE0:
 1028 011b 03                      		.section	.text.AAL_TurbiditySensorCalibration,"ax",@progbits
 1029                             		.global	_AAL_TurbiditySensorCalibration
 1031                             	_AAL_TurbiditySensorCalibration:
 1032                             	.LFB1:
 199:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** {
 1033                             		.loc 1 199 0
 1034                             	.LVL21:
 201:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     if(!HWC_Flags.bit.turbsens)
 1035                             		.loc 1 201 0
 1036 0000 FB E2 00 00 00 00       		mov.L	#_HWC_Flags, r14
 1037 0006 DC EE                   		mov.W	[r14], r14
 1038 0008 FD 74 CE 01             		tst	#1, r14
 1039 000c 1B                      		bne	.L114
 1040 000d 2E 19                   		bra	.L117
 1041                             	.L114:
 209:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     if ( cmd == (uint8_t)AAL_ALG_INIT )
 1042                             		.loc 1 209 0
 1043 000f 5B 11                   		movu.B	r1, r1
 1044 0011 61 11                   		cmp	#1, r1
 1045 0013 1D                      		bne	.L116
 211:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****       TurbidityCalibrationCmd();
 1046                             		.loc 1 211 0
 1047 0014 04 00 00 00             		bra	_TurbidityCalibrationCmd
 1048                             	.LVL22:
 1049                             	.L116:
 215:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****       if ( TurbiditySensorCal.state == (uint8_t)TURBSENS_VALID_CALIBR_VALUE_STATE )
 1050                             		.loc 1 215 0
 1051 0018 FB E2 00 00 00 00       		mov.L	#_TurbiditySensorCal, r14
 1052 001e 59 EE 05                		movu.B	5[r14], r14
 1053 0021 61 0E                   		cmp	#0, r14
 1054 0023 21 13                   		bne	.L113
 1055 0025 03                      		.balign 2,3,5
 1056                             	.L117:
 1057                             	.LBB18:
 1058                             	.LBB19:
 218:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             SETBIT(TerminatedAlgorithmBmp[0], AAL_TURBIDITY_SENSOR_CAL_ALG);
 1059                             		.loc 1 218 0
 1060 0026 FB E2 00 00 00 00       		mov.L	#_TerminatedAlgorithmBmp, r14
 1061 002c F0 E0                   		bset #0, [r14].B
 219:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             CLRBIT(ActiveAlgorithmBmp[0],AAL_TURBIDITY_SENSOR_CAL_ALG);        
 1062                             		.loc 1 219 0
 1063 002e FB E2 00 00 00 00       		mov.L	#_ActiveAlgorithmBmp, r14
 1064 0034 F0 E8                   		bclr #0, [r14].B
 1065                             	.L113:
 1066 0036 02                      		rts
 1067                             	.LBE19:
 1068                             	.LBE18:
 1069                             	.LFE1:
 1071 0037 03                      		.section	.text.ReadTurbidityManager,"ax",@progbits
 1072                             		.global	_ReadTurbidityManager
 1074                             	_ReadTurbidityManager:
 1075                             	.LFB6:
 384:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** {
 1076                             		.loc 1 384 0
 1077                             	.LVL23:
 1078 0000 6E 7A                   		pushm	r7-r10
 1079                             	.LCFI4:
 1080                             	.LVL24:
 386:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     uint8_t idReading=TurbidityReads.id;
 1081                             		.loc 1 386 0
 1082 0002 FB 72 00 00 00 00       		mov.L	#_TurbidityReads, r7
 1083 0008 8A 74                   		mov.B	8[r7], r4
 1084                             	.LVL25:
 390:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     switch(alg)
 1085                             		.loc 1 390 0
 1086 000a 5B 2E                   		movu.B	r2, r14
 1087 000c 61 6E                   		cmp	#6, r14
 1088 000e 20 11                   		beq	.L130
 1089 0010 61 7E                   		cmp	#7, r14
 1090 0012 17                      		beq	.L122
 1091 0013 61 5E                   		cmp	#5, r14
 1092 0015 3B D1 00                		bne	.L134
 1093 0018 0C                      		bra	.L120
 1094                             	.L122:
 393:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             indexId=(uint8_t)AAL_TURBIDITY_VALIDATION_ID;
 1095                             		.loc 1 393 0
 1096 0019 66 2E                   		mov	#2, r14
 1097 001b 0F                      		bra	.L121
 1098                             	.L120:
 1099                             	.LVL26:
 399:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             indexId=(uint8_t)AAL_TURBIDITY_CONT_R_ID;
 1100                             		.loc 1 399 0
 1101 001c 66 1E                   		mov	#1, r14
 400:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****            break;
 1102                             		.loc 1 400 0
 1103 001e 0C                      		bra	.L121
 1104                             	.LVL27:
 1105                             	.L130:
 396:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             indexId=(uint8_t)AAL_TURBIDITY_ONE_SHOT_R_ID;
 1106                             		.loc 1 396 0
 1107 001f 66 0E                   		mov	#0, r14
 1108 0021 03                      		.balign 2,3,5
 1109                             	.L121:
 1110                             	.LVL28:
 405:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     if(!HWC_Flags.bit.turbsens)
 1111                             		.loc 1 405 0
 1112 0022 FB 72 00 00 00 00       		mov.L	#_HWC_Flags, r7
 1113 0028 DC 77                   		mov.W	[r7], r7
 1114 002a FD 74 C7 01             		tst	#1, r7
 1115 002e 21 29                   		bne	.L123
 408:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         SETBIT(TerminatedAlgorithmBmp[0], alg);
 1116                             		.loc 1 408 0
 1117 0030 5B 22                   		movu.B	r2, r2
 1118 0032 66 11                   		mov.L	#1, r1
 1119                             	.LVL29:
 1120 0034 EF 17                   		mov.L	r1, r7
 1121 0036 FD 62 27                		shll	r2, r7
 1122 0039 EF 72                   		mov.L	r7, r2
 1123                             	.LVL30:
 1124 003b FB 72 00 00 00 00       		mov.L	#_TerminatedAlgorithmBmp, r7
 1125 0041 CC 7E                   		mov.B	[r7], r14
 1126                             	.LVL31:
 1127 0043 57 2E                   		or	r2, r14
 1128 0045 C3 7E                   		mov.B	r14, [r7]
 409:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         CLRBIT(ActiveAlgorithmBmp[0],alg);
 1129                             		.loc 1 409 0
 1130 0047 FB 72 00 00 00 00       		mov.L	#_ActiveAlgorithmBmp, r7
 1131 004d 7E 02                   		not	r2
 1132 004f 06 10 72                		and	[r7].B, r2
 1133 0052 C3 72                   		mov.B	r2, [r7]
 410:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         return TRUE;
 1134                             		.loc 1 410 0
 1135 0054 38 98 00                		bra	.L119
 1136                             	.LVL32:
 1137                             	.L123:
 413:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     switch(cmd)
 1138                             		.loc 1 413 0
 1139 0057 5B 17                   		movu.B	r1, r7
 1140 0059 61 07                   		cmp	#0, r7
 1141 005b 20 1A                   		beq	.L125
 1142 005d 61 17                   		cmp	#1, r7
 1143 005f 3B 81 00                		bne	.L135
 416:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             Aal_TurbidityRead.idReading[indexId]=idReading;
 1144                             		.loc 1 416 0
 1145 0062 5B E7                   		movu.B	r14, r7
 1146 0064 FB 32 00 00 00 00       		mov.L	#_Aal_TurbidityRead, r3
 1147 006a FE 07 34                		mov.B	r4, [r7,r3]
 417:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             HIO_trbReadEnable((uint8_t)TURBSENS_READ_al_TRB_OS+indexId);
 1148                             		.loc 1 417 0
 1149 006d CF E1                   		mov.B	r14, r1
 1150                             	.LVL33:
 1151 006f 05 00 00 00             		bsr	_HIO_trbReadEnable
 1152                             	.LVL34:
 1153 0073 2E 76                   		bra	.L131
 1154                             	.LVL35:
 1155                             	.L125:
 422:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             switch(alg)
 1156                             		.loc 1 422 0
 1157 0075 5B 22                   		movu.B	r2, r2
 1158 0077 61 52                   		cmp	#5, r2
 1159 0079 20 5A                   		beq	.L127
 1160 007b 23 6E                   		bltu	.L131
 1161 007d 61 72                   		cmp	#7, r2
 1162 007f 24 6A                   		bgtu	.L131
 428:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                     if((idReading != Aal_TurbidityRead.idReading[indexId]) && (GIValid & GI_TURB_SE
 1163                             		.loc 1 428 0
 1164 0081 5B E7                   		movu.B	r14, r7
 1165 0083 FB 32 00 00 00 00       		mov.L	#_Aal_TurbidityRead, r3
 1166 0089 5B 4F                   		movu.B	r4, r15
 1167 008b FE C7 35                		movu.B	[r7,r3], r5
 1168 008e 47 5F                   		cmp	r5, r15
 1169 0090 20 5C                   		beq	.L119
 428:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                     if((idReading != Aal_TurbidityRead.idReading[indexId]) && (GIValid & GI_TURB_SE
 1170                             		.loc 1 428 0 is_stmt 0 discriminator 1
 1171 0092 FB 12 00 00 00 00       		mov.L	#_GIValid, r1
 1172                             	.LVL36:
 1173 0098 DC 11                   		mov.W	[r1], r1
 1174 009a 76 21 00 02             		and #0x200, r1
 1175 009e 5F 11                   		movu.W	r1, r1
 1176 00a0 61 01                   		cmp	#0, r1
 1177 00a2 20 4A                   		beq	.L119
 431:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                         Aal_TurbidityRead.idReading[indexId]=idReading;
 1178                             		.loc 1 431 0 is_stmt 1
 1179 00a4 FE 07 34                		mov.B	r4, [r7,r3]
 433:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                         SETBIT(TerminatedAlgorithmBmp[0], alg);
 1180                             		.loc 1 433 0
 1181 00a7 66 17                   		mov.L	#1, r7
 1182 00a9 EF 7A                   		mov.L	r7, r10
 1183 00ab FD 62 2A                		shll	r2, r10
 1184 00ae EF A2                   		mov.L	r10, r2
 1185                             	.LVL37:
 1186 00b0 FB 42 00 00 00 00       		mov.L	#_TerminatedAlgorithmBmp, r4
 1187                             	.LVL38:
 1188 00b6 CC 43                   		mov.B	[r4], r3
 1189                             	.LVL39:
 1190 00b8 57 A3                   		or	r10, r3
 1191 00ba C3 43                   		mov.B	r3, [r4]
 434:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                         CLRBIT(ActiveAlgorithmBmp[0],alg);
 1192                             		.loc 1 434 0
 1193 00bc FB 42 00 00 00 00       		mov.L	#_ActiveAlgorithmBmp, r4
 1194 00c2 7E 02                   		not	r2
 1195 00c4 06 10 42                		and	[r4].B, r2
 1196 00c7 C3 42                   		mov.B	r2, [r4]
 436:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                         HIO_trbReadDisable((uint8_t)TURBSENS_READ_al_TRB_OS+indexId);
 1197                             		.loc 1 436 0
 1198 00c9 CF E1                   		mov.B	r14, r1
 1199 00cb 05 00 00 00             		bsr	_HIO_trbReadDisable
 1200                             	.LVL40:
 439:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                         ret=TRUE;
 1201                             		.loc 1 439 0
 1202 00cf CF 71                   		mov.B	r7, r1
 1203 00d1 2E 1B                   		bra	.L119
 1204                             	.LVL41:
 1205                             	.L127:
 445:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                     Aal_TurbidityRead.idReading[indexId]=idReading;
 1206                             		.loc 1 445 0
 1207 00d3 5B EE                   		movu.B	r14, r14
 1208 00d5 FB 72 00 00 00 00       		mov.L	#_Aal_TurbidityRead, r7
 1209 00db FE 0E 74                		mov.B	r4, [r14,r7]
 446:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****                     break;
 1210                             		.loc 1 446 0
 1211 00de 2E 0E                   		bra	.L119
 1212                             	.LVL42:
 1213                             	.L135:
 454:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             HIO_trbReadDisable((uint8_t)TURBSENS_READ_al_TRB_OS+indexId);
 1214                             		.loc 1 454 0
 1215 00e0 CF E1                   		mov.B	r14, r1
 1216                             	.LVL43:
 1217 00e2 05 00 00 00             		bsr	_HIO_trbReadDisable
 1218                             	.LVL44:
 1219                             		.balign 2,3,1
 1220                             	.L134:
 402:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             return TRUE;
 1221                             		.loc 1 402 0
 1222 00e6 66 11                   		mov	#1, r1
 1223 00e8 0C                      		bra	.L119
 1224                             	.LVL45:
 1225                             	.L131:
 385:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     uint8_t ret=FALSE;
 1226                             		.loc 1 385 0
 1227 00e9 66 01                   		mov	#0, r1
 1228                             	.LVL46:
 1229 00eb 03                      		.balign 2,3,1
 1230                             	.L119:
 459:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** }
 1231                             		.loc 1 459 0
 1232 00ec 5B 11                   		movu.B	r1, r1
 1233 00ee 3F 7A 04                		rtsd	#16, r7-r10
 1234                             	.LFE6:
 1236 00f1 03                      		.section	.text.AAL_ValidateTurbidityCalibration,"ax",@progbits
 1237                             		.global	_AAL_ValidateTurbidityCalibration
 1239                             	_AAL_ValidateTurbidityCalibration:
 1240                             	.LFB5:
 311:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** {
 1241                             		.loc 1 311 0
 1242                             	.LVL47:
 1243 0000 6E 7A                   		pushm	r7-r10
 1244                             	.LCFI5:
 312:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     if(!HWC_Flags.bit.turbsens)
 1245                             		.loc 1 312 0
 1246 0002 FB 72 00 00 00 00       		mov.L	#_HWC_Flags, r7
 1247 0008 DC 77                   		mov.W	[r7], r7
 1248 000a FD 74 C7 01             		tst	#1, r7
 1249 000e 1B                      		bne	.L138
 1250 000f 2E 45                   		bra	.L142
 1251                             	.L138:
 320:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     if(TurbiditySensorCal.val==TURBIDITY_PWM_MIN)
 1252                             		.loc 1 320 0
 1253 0011 FB 72 00 00 00 00       		mov.L	#_TurbiditySensorCal, r7
 1254 0017 FB A2 00 00 00 00       		mov.L	#_Tab_HWCTurbidity, r10
 1255 001d EC AE                   		mov.L	[r10], r14
 1256 001f 5C 74                   		movu.W	[r7], r4
 1257 0021 06 C5 E4 05             		cmp	10[r14].UW, r4
 1258 0025 1B                      		bne	.L140
 1259 0026 2E 2E                   		bra	.L142
 1260                             	.L140:
 326:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     if(TRUE == ReadTurbidityManager(cmd,AAL_TURBIDITY_VALIDATE_CALIB))
 1261                             		.loc 1 326 0
 1262 0028 66 72                   		mov	#7, r2
 1263 002a 05 00 00 00             		bsr	_ReadTurbidityManager
 1264                             	.LVL48:
 1265 002e 5B 11                   		movu.B	r1, r1
 1266 0030 61 11                   		cmp	#1, r1
 1267 0032 21 3C                   		bne	.L137
 1268                             	.LBB22:
 1269                             	.LBB23:
 328:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         if((TurbidityReads.ADvalue<TURBIDITY_AIR_MIN_ADVAL))
 1270                             		.loc 1 328 0
 1271 0034 EC AE                   		mov.L	[r10], r14
 1272 0036 FB A2 00 00 00 00       		mov.L	#_TurbidityReads, r10
 1273 003c 5D AA 02                		movu.W	4[r10], r10
 1274 003f 06 C5 EA 03             		cmp	6[r14].UW, r10
 1275 0043 22 03                   		bgeu	.L141
 1276 0045 0F                      		bra	.L144
 1277                             	.L141:
 333:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         else if((TurbidityReads.ADvalue>TURBIDITY_AIR_MAX_ADVAL))
 1278                             		.loc 1 333 0
 1279 0046 06 C5 EA 04             		cmp	8[r14].UW, r10
 1280 004a 25 0A                   		bleu	.L142
 1281                             		.balign 2,3,1
 1282                             	.L144:
 335:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             TurbiditySensorCal.val=TURBIDITY_PWM_MIN;
 1283                             		.loc 1 335 0
 1284 004c D1 E7 05                		mov.W	10[r14], [r7]
 336:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****             TurbiditySensorCal.adH2oRef=TURBIDITY_H2O_DEFAULT_ADVAL;
 1285                             		.loc 1 336 0
 1286 004f D5 E7 06 01             		mov.W	12[r14], 2[r7]
 1287 0053 03                      		.balign 2,3,5
 1288                             	.L142:
 343:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** 		SETBIT(TerminatedAlgorithmBmp[0], AAL_TURBIDITY_VALIDATE_CALIB);
 1289                             		.loc 1 343 0
 1290 0054 FB 72 00 00 00 00       		mov.L	#_TerminatedAlgorithmBmp, r7
 1291 005a CC 7A                   		mov.B	[r7], r10
 1292 005c 75 3A 80                		or	#0xffffff80, r10
 1293 005f C3 7A                   		mov.B	r10, [r7]
 344:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         CLRBIT(ActiveAlgorithmBmp[0],AAL_TURBIDITY_VALIDATE_CALIB);
 1294                             		.loc 1 344 0
 1295 0061 FB 72 00 00 00 00       		mov.L	#_ActiveAlgorithmBmp, r7
 1296 0067 CC 7A                   		mov.B	[r7], r10
 1297 0069 75 2A 7F                		and #0x7f, r10
 1298 006c C3 7A                   		mov.B	r10, [r7]
 1299                             		.balign 2,3,2
 1300                             	.L137:
 1301                             	.LBE23:
 1302                             	.LBE22:
 346:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** }
 1303                             		.loc 1 346 0
 1304 006e 3F 7A 04                		rtsd	#16, r7-r10
 1305                             	.LFE5:
 1307 0071 03                      		.section	.text.AAL_ReadTurbidityOneShot,"ax",@progbits
 1308                             		.global	_AAL_ReadTurbidityOneShot
 1310                             	_AAL_ReadTurbidityOneShot:
 1311                             	.LFB4:
 287:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** {
 1312                             		.loc 1 287 0
 1313                             	.LVL49:
 288:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     if(TRUE==ReadTurbidityManager(cmd,AAL_TURBIDITY_READ_ONESHOT)) 
 1314                             		.loc 1 288 0
 1315 0000 66 62                   		mov	#6, r2
 1316 0002 05 00 00 00             		bsr	_ReadTurbidityManager
 1317                             	.LVL50:
 1318 0006 5B 11                   		movu.B	r1, r1
 1319 0008 61 11                   		cmp	#1, r1
 1320 000a 1D                      		bne	.L145
 291:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****         STC_Add_LastCycle_turbPerc_turbCalType();
 1321                             		.loc 1 291 0
 1322 000b 04 00 00 00             		bra	_STC_Add_LastCycle_turbPerc_turbCalType
 1323                             	.LVL51:
 1324                             	.L145:
 1325 000f 02                      		rts
 1326                             	.LFE4:
 1328                             		.section	.text.AAL_ReadTurbidityContinuous,"ax",@progbits
 1329                             		.global	_AAL_ReadTurbidityContinuous
 1331                             	_AAL_ReadTurbidityContinuous:
 1332                             	.LFB3:
 266:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c **** {
 1333                             		.loc 1 266 0
 1334                             	.LVL52:
 267:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\ExecuteAlgorithm.c ****     ReadTurbidityManager(cmd,(uint8_t)AAL_TURBIDITY_READ_CONTINUOUS);
 1335                             		.loc 1 267 0
 1336 0000 66 52                   		mov	#5, r2
 1337 0002 04 00 00 00             		bra	_ReadTurbidityManager
 1338                             	.LVL53:
 1339                             	.LFE3:
 1341                             		.comm	_Aal_TurbidityRead,3,1
 1342                             		.global	_AAL_algList
 1343                             		.section	.rodata.AAL_algList,"a",@progbits
 1344                             		.balign 4
 1347                             	_AAL_algList:
 1348 0000 00 00 00 00             		.long	_AAL_TurbiditySensorCalibration
 1349 0004 00 00 00 00             		.long	_AAL_LevToTimeRefUpdate
 1350 0008 00 00 00 00             		.long	_AAL_Dirty_Foam_identify
 1351 000c 00 00 00 00             		.long	_NullFunc
 1352 0010 00 00 00 00             		.long	_AAL_ReadVirtualSensor
 1353 0014 00 00 00 00             		.long	_AAL_ReadTurbidityContinuous
 1354 0018 00 00 00 00             		.long	_AAL_ReadTurbidityOneShot
 1355 001c 00 00 00 00             		.long	_AAL_ValidateTurbidityCalibration
 1508                             	.Letext0:
 1509                             		.file 2 "C:\\Workspace\\FW_Inertia\\branch_indesit\\HAL\\HAL_General/StandardTypes.h"
 1510                             		.file 3 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_SwTimersCounters/SwTimersCo
 1511                             		.file 4 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_Library/LIB_Utilities.h"
 1512                             		.file 5 "C:\\Workspace\\FW_Inertia\\branch_indesit\\CFG_DishWasher\\CFG_Inertia/ProductSafety_cfg.
 1513                             		.file 6 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\General/CstmDefines.h"
 1514                             		.file 7 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Application_Platform/APP_Types.h"
 1515                             		.file 8 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_BusCOMM/BCP_General.h"
 1516                             		.file 9 "C:\\Workspace\\FW_Inertia\\branch_indesit\\CFG_DishWasher\\CFG_Inertia/BusCommPltf_cfg.h"
 1517                             		.file 10 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\General/CstmTypes.h"
 1518                             		.file 11 "C:\\Workspace\\FW_Inertia\\branch_indesit\\PlatformLibrary\\LIB_IOManager/OutputManagerE
 1519                             		.file 12 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\General/CstmGlobal.h"
 1520                             		.file 13 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Application_Platform/APP_ActivateAlgorithm.h"
 1521                             		.file 14 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\Modules/ExecuteAlgorithm.h"
 1522                             		.file 15 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_BusCOMM/BCP_BusCommMng.h"
 1523                             		.file 16 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Application_Platform/APP_Global.h"
 1524                             		.file 17 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_PulseCounter/PM_PulseCount
 1525                             		.file 18 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Application_Platform/APP_FuncLib.h"
 1526                             		.file 19 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\Control/DW_Fault.h"
 1527                             		.file 20 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\Control/HighLevel_Io_manager.h"
 1528                             		.file 21 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\General/CstmFuncLib.h"
 1529                             		.file 22 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\Control/DW_Statistics.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ExecuteAlgorithm.c
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7      .text.AAL_LevToTimeRefUpdate:00000000 _AAL_LevToTimeRefUpdate
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:13     .text.AAL_LevToTimeRefUpdate:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:28     .text.AAL_Load_Var_Init:00000000 _AAL_Load_Var_Init
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:31     .text.AAL_Load_Var_Init:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:90     .text.AAL_Dirty_Foam_identify:00000000 _AAL_Dirty_Foam_identify
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:93     .text.AAL_Dirty_Foam_identify:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:861    .text.AAL_ReadVirtualSensor:00000000 _AAL_ReadVirtualSensor
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:865    .text.AAL_ReadVirtualSensor:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1031   .text.AAL_TurbiditySensorCalibration:00000000 _AAL_TurbiditySensorCalibration
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1036   .text.AAL_TurbiditySensorCalibration:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1074   .text.ReadTurbidityManager:00000000 _ReadTurbidityManager
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1078   .text.ReadTurbidityManager:00000000 L0
                            *COM*:00000003 _Aal_TurbidityRead
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1239   .text.AAL_ValidateTurbidityCalibration:00000000 _AAL_ValidateTurbidityCalibration
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1243   .text.AAL_ValidateTurbidityCalibration:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1310   .text.AAL_ReadTurbidityOneShot:00000000 _AAL_ReadTurbidityOneShot
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1315   .text.AAL_ReadTurbidityOneShot:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1331   .text.AAL_ReadTurbidityContinuous:00000000 _AAL_ReadTurbidityContinuous
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1336   .text.AAL_ReadTurbidityContinuous:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1347   .rodata.AAL_algList:00000000 _AAL_algList
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:604    .rodata.AAL_Dirty_Foam_identify:00000000 .L46
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:636    .text.AAL_Dirty_Foam_identify:0000049a .L39
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:687    .text.AAL_Dirty_Foam_identify:000004ff .L40
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:706    .text.AAL_Dirty_Foam_identify:00000523 .L41
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:756    .text.AAL_Dirty_Foam_identify:00000583 .L42
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:761    .text.AAL_Dirty_Foam_identify:00000589 .L43
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:808    .text.AAL_Dirty_Foam_identify:000005e5 .L44
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:787    .text.AAL_Dirty_Foam_identify:000005b5 .L45
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1357   .debug_frame:00000000 .Lframe0
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:8      .text.AAL_LevToTimeRefUpdate:00000000 .LFB2
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:29     .text.AAL_Load_Var_Init:00000000 .LFB9
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:91     .text.AAL_Dirty_Foam_identify:00000000 .LFB7
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:862    .text.AAL_ReadVirtualSensor:00000000 .LFB0
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1032   .text.AAL_TurbiditySensorCalibration:00000000 .LFB1
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1075   .text.ReadTurbidityManager:00000000 .LFB6
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1240   .text.AAL_ValidateTurbidityCalibration:00000000 .LFB5
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1311   .text.AAL_ReadTurbidityOneShot:00000000 .LFB4
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1332   .text.AAL_ReadTurbidityContinuous:00000000 .LFB3
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:5266   .debug_abbrev:00000000 .Ldebug_abbrev0
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7001   .debug_str:000005d8 .LASF445
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7683   .debug_str:00001d58 .LASF446
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6801   .debug_ranges:00000000 .Ldebug_ranges0
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6823   .debug_line:00000000 .Ldebug_line0
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6887   .debug_str:0000022c .LASF0
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7475   .debug_str:00001626 .LASF2
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7443   .debug_str:00001506 .LASF1
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7577   .debug_str:000019bd .LASF3
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7655   .debug_str:00001c3f .LASF4
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6993   .debug_str:000005a9 .LASF5
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7547   .debug_str:00001890 .LASF6
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7457   .debug_str:0000157b .LASF7
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7041   .debug_str:0000072f .LASF8
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7283   .debug_str:00000f4a .LASF9
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7251   .debug_str:00000e4c .LASF10
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7579   .debug_str:000019c6 .LASF11
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7193   .debug_str:00000c6e .LASF12
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7649   .debug_str:00001c02 .LASF13
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7133   .debug_str:00000a59 .LASF14
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6965   .debug_str:000004db .LASF19
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7713   .debug_str:00001e8a .LASF15
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7295   .debug_str:00000fd1 .LASF16
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7489   .debug_str:000016a8 .LASF17
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7543   .debug_str:00001882 .LASF18
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7405   .debug_str:00001396 .LASF20
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7173   .debug_str:00000bce .LASF21
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6839   .debug_str:00000083 .LASF22
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7407   .debug_str:000013a8 .LASF23
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6907   .debug_str:000002dd .LASF41
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7161   .debug_str:00000b4d .LASF24
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7381   .debug_str:000012b4 .LASF25
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7275   .debug_str:00000f05 .LASF26
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7313   .debug_str:00001071 .LASF27
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7095   .debug_str:00000904 .LASF28
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7519   .debug_str:00001788 .LASF29
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7145   .debug_str:00000ac7 .LASF30
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7211   .debug_str:00000d20 .LASF31
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7653   .debug_str:00001c2c .LASF32
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7499   .debug_str:000016f4 .LASF33
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6955   .debug_str:00000481 .LASF34
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7061   .debug_str:000007e9 .LASF35
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7117   .debug_str:000009ce .LASF37
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7629   .debug_str:00001b5c .LASF36
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7309   .debug_str:00001046 .LASF38
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7401   .debug_str:0000136a .LASF39
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6885   .debug_str:0000021e .LASF40
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7261   .debug_str:00000e8e .LASF42
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7511   .debug_str:00001748 .LASF43
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7303   .debug_str:0000101a .LASF44
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6957   .debug_str:00000494 .LASF45
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7179   .debug_str:00000c00 .LASF46
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7257   .debug_str:00000e6c .LASF47
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7599   .debug_str:00001a75 .LASF48
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7711   .debug_str:00001e75 .LASF49
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7635   .debug_str:00001b8e .LASF50
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6835   .debug_str:00000069 .LASF51
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7105   .debug_str:00000979 .LASF52
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6987   .debug_str:00000580 .LASF53
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6963   .debug_str:000004ca .LASF54
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7587   .debug_str:00001a01 .LASF55
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6975   .debug_str:00000524 .LASF56
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7287   .debug_str:00000f74 .LASF57
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7479   .debug_str:00001646 .LASF58
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7131   .debug_str:00000a3f .LASF59
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7269   .debug_str:00000eca .LASF60
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7333   .debug_str:00001123 .LASF61
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7355   .debug_str:000011e2 .LASF62
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7503   .debug_str:00001711 .LASF63
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7723   .debug_str:00001ede .LASF64
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7065   .debug_str:00000808 .LASF65
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7429   .debug_str:00001488 .LASF66
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6915   .debug_str:0000032b .LASF67
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7621   .debug_str:00001b12 .LASF68
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7129   .debug_str:00000a2c .LASF69
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7045   .debug_str:00000760 .LASF70
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6827   .debug_str:00000012 .LASF71
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7359   .debug_str:000011f7 .LASF72
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7023   .debug_str:000006b5 .LASF73
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7337   .debug_str:0000113c .LASF74
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7367   .debug_str:00001245 .LASF75
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7549   .debug_str:000018a2 .LASF76
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7053   .debug_str:0000079f .LASF77
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7141   .debug_str:00000a9b .LASF78
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7067   .debug_str:00000819 .LASF79
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7227   .debug_str:00000d8a .LASF80
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7071   .debug_str:0000084a .LASF81
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6951   .debug_str:0000045a .LASF82
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7535   .debug_str:00001845 .LASF83
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7611   .debug_str:00001ad8 .LASF84
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7101   .debug_str:00000942 .LASF85
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7125   .debug_str:00000a04 .LASF86
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7557   .debug_str:000018d4 .LASF87
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6947   .debug_str:00000434 .LASF88
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6901   .debug_str:000002a1 .LASF89
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7103   .debug_str:0000095d .LASF90
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7485   .debug_str:00001672 .LASF91
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7525   .debug_str:000017cc .LASF92
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7473   .debug_str:00001617 .LASF93
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7705   .debug_str:00001e43 .LASF94
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7037   .debug_str:0000071a .LASF95
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6905   .debug_str:000002cd .LASF96
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7119   .debug_str:000009d6 .LASF97
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7517   .debug_str:00001779 .LASF98
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7175   .debug_str:00000bd3 .LASF99
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7301   .debug_str:00000ffb .LASF100
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7637   .debug_str:00001ba4 .LASF101
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7361   .debug_str:0000120d .LASF102
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6853   .debug_str:00000108 .LASF103
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6875   .debug_str:000001c1 .LASF104
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7607   .debug_str:00001ab8 .LASF105
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7523   .debug_str:000017af .LASF106
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7397   .debug_str:00001344 .LASF107
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7451   .debug_str:00001543 .LASF108
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7627   .debug_str:00001b44 .LASF109
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6935   .debug_str:000003d8 .LASF110
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7715   .debug_str:00001e8f .LASF111
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7411   .debug_str:000013d2 .LASF112
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7321   .debug_str:000010bd .LASF113
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7055   .debug_str:000007ae .LASF114
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7331   .debug_str:00001111 .LASF115
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7487   .debug_str:00001686 .LASF116
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7181   .debug_str:00000c15 .LASF117
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6911   .debug_str:000002ff .LASF118
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7425   .debug_str:00001462 .LASF119
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7307   .debug_str:00001038 .LASF120
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6989   .debug_str:00000590 .LASF121
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7147   .debug_str:00000ade .LASF122
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6961   .debug_str:000004b9 .LASF123
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7495   .debug_str:000016d1 .LASF124
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6917   .debug_str:00000340 .LASF125
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6829   .debug_str:0000002a .LASF126
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6977   .debug_str:00000531 .LASF127
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7673   .debug_str:00001d03 .LASF128
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7365   .debug_str:0000122a .LASF129
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6967   .debug_str:000004e2 .LASF130
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7007   .debug_str:00000620 .LASF131
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7113   .debug_str:000009b2 .LASF132
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7699   .debug_str:00001e20 .LASF133
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7375   .debug_str:00001285 .LASF134
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7387   .debug_str:000012ec .LASF135
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7247   .debug_str:00000e2b .LASF136
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7191   .debug_str:00000c60 .LASF137
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6941   .debug_str:0000040a .LASF138
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7151   .debug_str:00000afd .LASF139
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6873   .debug_str:000001b6 .LASF140
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6909   .debug_str:000002ec .LASF141
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6877   .debug_str:000001df .LASF142
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7701   .debug_str:00001e2d .LASF143
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7221   .debug_str:00000d57 .LASF144
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7297   .debug_str:00000fdc .LASF145
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7093   .debug_str:000008ff .LASF146
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7459   .debug_str:00001584 .LASF147
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7657   .debug_str:00001c52 .LASF148
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6837   .debug_str:0000007c .LASF149
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7357   .debug_str:000011ee .LASF150
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7075   .debug_str:0000086d .LASF151
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7377   .debug_str:00001292 .LASF152
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7073   .debug_str:00000858 .LASF153
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7647   .debug_str:00001bf4 .LASF154
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7253   .debug_str:00000e54 .LASF155
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7403   .debug_str:00001388 .LASF156
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7399   .debug_str:0000135b .LASF157
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7003   .debug_str:000005fe .LASF158
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7539   .debug_str:00001868 .LASF159
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7139   .debug_str:00000a82 .LASF160
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6971   .debug_str:00000507 .LASF161
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7029   .debug_str:000006d6 .LASF162
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7351   .debug_str:000011cc .LASF163
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7083   .debug_str:000008b3 .LASF164
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7201   .debug_str:00000cb2 .LASF165
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7153   .debug_str:00000b0c .LASF166
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7423   .debug_str:0000144a .LASF167
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7363   .debug_str:00001216 .LASF168
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7099   .debug_str:00000933 .LASF169
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6937   .debug_str:000003f0 .LASF170
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7455   .debug_str:0000156e .LASF171
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7491   .debug_str:000016b6 .LASF172
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7051   .debug_str:00000796 .LASF173
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7589   .debug_str:00001a18 .LASF174
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6949   .debug_str:0000044f .LASF175
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6933   .debug_str:000003ca .LASF176
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7707   .debug_str:00001e54 .LASF177
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6973   .debug_str:0000051d .LASF209
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6867   .debug_str:0000018a .LASF178
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7199   .debug_str:00000c97 .LASF179
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7185   .debug_str:00000c39 .LASF180
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7613   .debug_str:00001ae4 .LASF181
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6849   .debug_str:000000e5 .LASF182
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7465   .debug_str:000015c7 .LASF183
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7571   .debug_str:0000195d .LASF184
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7553   .debug_str:000018bf .LASF185
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7501   .debug_str:00001706 .LASF186
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6913   .debug_str:00000320 .LASF187
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7347   .debug_str:0000119e .LASF188
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7035   .debug_str:00000703 .LASF189
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7639   .debug_str:00001bc0 .LASF190
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7391   .debug_str:0000130e .LASF191
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7195   .debug_str:00000c75 .LASF192
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7609   .debug_str:00001ad3 .LASF193
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7027   .debug_str:000006cc .LASF194
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7601   .debug_str:00001a8b .LASF195
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7049   .debug_str:00000791 .LASF196
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7681   .debug_str:00001d52 .LASF197
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7615   .debug_str:00001aea .LASF198
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7597   .debug_str:00001a6b .LASF199
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6889   .debug_str:00000239 .LASF200
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7435   .debug_str:000014c2 .LASF201
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7605   .debug_str:00001aad .LASF202
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7567   .debug_str:00001943 .LASF203
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7157   .debug_str:00000b30 .LASF204
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7237   .debug_str:00000dd3 .LASF205
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7717   .debug_str:00001ea4 .LASF206
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7353   .debug_str:000011d9 .LASF207
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7243   .debug_str:00000e1a .LASF208
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7155   .debug_str:00000b23 .LASF210
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7561   .debug_str:00001901 .LASF211
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7453   .debug_str:0000155b .LASF212
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6903   .debug_str:000002bc .LASF213
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7541   .debug_str:0000186d .LASF214
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6855   .debug_str:00000122 .LASF215
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7693   .debug_str:00001de8 .LASF216
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6923   .debug_str:00000370 .LASF217
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7165   .debug_str:00000b73 .LASF218
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7695   .debug_str:00001e01 .LASF219
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7121   .debug_str:000009e5 .LASF220
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6859   .debug_str:0000013e .LASF221
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7431   .debug_str:0000149d .LASF222
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6931   .debug_str:000003ba .LASF223
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7625   .debug_str:00001b33 .LASF224
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7721   .debug_str:00001ec3 .LASF225
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6831   .debug_str:00000041 .LASF226
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6895   .debug_str:0000025b .LASF227
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7689   .debug_str:00001dbd .LASF228
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7697   .debug_str:00001e13 .LASF229
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7537   .debug_str:00001856 .LASF230
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6969   .debug_str:000004ef .LASF231
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7033   .debug_str:000006eb .LASF232
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7111   .debug_str:0000099e .LASF233
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6893   .debug_str:00000252 .LASF234
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7583   .debug_str:000019e6 .LASF235
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7529   .debug_str:00001804 .LASF236
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7565   .debug_str:0000191a .LASF237
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7667   .debug_str:00001ca5 .LASF238
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6945   .debug_str:00000428 .LASF239
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6995   .debug_str:000005b2 .LASF240
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7265   .debug_str:00000eaa .LASF241
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6883   .debug_str:00000209 .LASF242
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7289   .debug_str:00000f8e .LASF243
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7107   .debug_str:00000988 .LASF244
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7563   .debug_str:00001912 .LASF245
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7197   .debug_str:00000c7d .LASF246
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7483   .debug_str:00001660 .LASF247
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7433   .debug_str:000014a8 .LASF248
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7039   .debug_str:00000727 .LASF249
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6863   .debug_str:0000016d .LASF250
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7089   .debug_str:000008e4 .LASF251
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7463   .debug_str:000015ab .LASF252
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7725   .debug_str:00001ef9 .LASF253
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7281   .debug_str:00000f3b .LASF254
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7619   .debug_str:00001aff .LASF255
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7493   .debug_str:000016c2 .LASF256
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7505   .debug_str:00001726 .LASF257
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6881   .debug_str:00000201 .LASF258
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6879   .debug_str:000001ec .LASF259
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7389   .debug_str:000012fd .LASF260
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7531   .debug_str:0000182f .LASF261
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7339   .debug_str:0000114e .LASF262
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7675   .debug_str:00001d20 .LASF263
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7481   .debug_str:0000165a .LASF264
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7177   .debug_str:00000bf0 .LASF265
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7279   .debug_str:00000f1b .LASF266
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7091   .debug_str:000008ee .LASF267
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7031   .debug_str:000006e2 .LASF268
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7219   .debug_str:00000d49 .LASF269
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6985   .debug_str:00000573 .LASF270
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7445   .debug_str:00001510 .LASF271
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7343   .debug_str:0000117a .LASF272
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7345   .debug_str:00001191 .LASF273
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7633   .debug_str:00001b84 .LASF274
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7249   .debug_str:00000e3c .LASF275
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6943   .debug_str:00000417 .LASF276
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7437   .debug_str:000014d0 .LASF277
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7555   .debug_str:000018c6 .LASF278
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7277   .debug_str:00000f13 .LASF279
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7569   .debug_str:00001955 .LASF280
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7623   .debug_str:00001b25 .LASF281
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7013   .debug_str:00000659 .LASF282
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7263   .debug_str:00000ea0 .LASF283
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6997   .debug_str:000005bc .LASF284
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7471   .debug_str:00001600 .LASF285
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6841   .debug_str:0000008b .LASF286
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7581   .debug_str:000019d4 .LASF287
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7271   .debug_str:00000ed9 .LASF288
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7017   .debug_str:00000683 .LASF289
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7183   .debug_str:00000c33 .LASF290
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7677   .debug_str:00001d38 .LASF291
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6929   .debug_str:000003ab .LASF292
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7679   .debug_str:00001d48 .LASF293
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7259   .debug_str:00000e81 .LASF294
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7137   .debug_str:00000a70 .LASF295
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7663   .debug_str:00001c85 .LASF296
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7189   .debug_str:00000c54 .LASF297
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6999   .debug_str:000005c8 .LASF298
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7305   .debug_str:00001030 .LASF299
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7383   .debug_str:000012ca .LASF300
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7311   .debug_str:00001060 .LASF301
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7267   .debug_str:00000ec2 .LASF302
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7585   .debug_str:000019f5 .LASF303
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7115   .debug_str:000009bf .LASF304
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7057   .debug_str:000007c6 .LASF305
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7335   .debug_str:00001132 .LASF306
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7617   .debug_str:00001aef .LASF307
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7669   .debug_str:00001ccf .LASF308
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7235   .debug_str:00000db8 .LASF309
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7449   .debug_str:00001530 .LASF310
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7515   .debug_str:0000176d .LASF311
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6983   .debug_str:00000568 .LASF312
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7591   .debug_str:00001a24 .LASF313
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7317   .debug_str:00001098 .LASF314
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7419   .debug_str:00001434 .LASF315
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7631   .debug_str:00001b76 .LASF316
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7709   .debug_str:00001e63 .LASF317
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7421   .debug_str:00001443 .LASF318
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7245   .debug_str:00000e23 .LASF319
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7427   .debug_str:00001481 .LASF320
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7509   .debug_str:0000173e .LASF321
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7545   .debug_str:0000188b .LASF322
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7661   .debug_str:00001c75 .LASF323
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7685   .debug_str:00001da2 .LASF324
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7393   .debug_str:00001317 .LASF325
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7207   .debug_str:00000cec .LASF326
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7209   .debug_str:00000d06 .LASF327
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7225   .debug_str:00000d77 .LASF328
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7595   .debug_str:00001a47 .LASF329
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7149   .debug_str:00000ae9 .LASF330
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7559   .debug_str:000018ec .LASF331
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7021   .debug_str:00000693 .LASF332
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6851   .debug_str:000000ec .LASF333
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7691   .debug_str:00001dc8 .LASF334
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7143   .debug_str:00000aac .LASF335
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7081   .debug_str:0000089b .LASF336
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7087   .debug_str:000008c9 .LASF337
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7047   .debug_str:00000777 .LASF338
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7011   .debug_str:0000063c .LASF339
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7043   .debug_str:00000746 .LASF340
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7205   .debug_str:00000cc7 .LASF341
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7467   .debug_str:000015d5 .LASF342
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7417   .debug_str:0000141b .LASF343
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7573   .debug_str:0000197f .LASF344
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7171   .debug_str:00000baf .LASF345
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6833   .debug_str:0000004b .LASF346
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7319   .debug_str:000010a5 .LASF347
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7123   .debug_str:000009ec .LASF348
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7379   .debug_str:000012a4 .LASF349
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6953   .debug_str:00000469 .LASF350
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7665   .debug_str:00001c8f .LASF351
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7409   .debug_str:000013ba .LASF352
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7395   .debug_str:0000132d .LASF353
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7413   .debug_str:000013e9 .LASF354
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7015   .debug_str:00000667 .LASF355
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7167   .debug_str:00000b87 .LASF356
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6921   .debug_str:0000035a .LASF357
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7293   .debug_str:00000fbc .LASF358
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7643   .debug_str:00001bd5 .LASF359
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7069   .debug_str:00000826 .LASF360
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6927   .debug_str:00000389 .LASF361
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7349   .debug_str:000011a9 .LASF362
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7575   .debug_str:0000199f .LASF363
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6899   .debug_str:00000284 .LASF364
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7097   .debug_str:0000091a .LASF365
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6847   .debug_str:000000be .LASF366
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7159   .debug_str:00000b41 .LASF367
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7507   .debug_str:0000172e .LASF368
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7641   .debug_str:00001bc8 .LASF369
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7135   .debug_str:00000a60 .LASF370
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7687   .debug_str:00001db0 .LASF371
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7169   .debug_str:00000b9d .LASF372
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7551   .debug_str:000018b2 .LASF373
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7187   .debug_str:00000c42 .LASF374
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7299   .debug_str:00000fe9 .LASF375
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7009   .debug_str:0000062d .LASF376
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7109   .debug_str:00000992 .LASF377
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7085   .debug_str:000008b8 .LASF378
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6871   .debug_str:000001a8 .LASF379
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7229   .debug_str:00000d99 .LASF380
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7005   .debug_str:0000060a .LASF381
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7239   .debug_str:00000ddd .LASF382
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6869   .debug_str:00000190 .LASF383
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7285   .debug_str:00000f58 .LASF384
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7127   .debug_str:00000a17 .LASF385
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7163   .debug_str:00000b5e .LASF386
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7019   .debug_str:00000689 .LASF387
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7461   .debug_str:00001597 .LASF388
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7439   .debug_str:000014d8 .LASF389
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7241   .debug_str:00000df9 .LASF390
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7059   .debug_str:000007d2 .LASF391
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:24     .text.AAL_LevToTimeRefUpdate:0000001a .LFE2
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7497   .debug_str:000016e2 .LASF447
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:85     .text.AAL_Load_Var_Init:00000075 .LFE9
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6415   .debug_loc:00000000 .LLST0
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:46     .text.AAL_Load_Var_Init:00000024 .LVL1
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:53     .text.AAL_Load_Var_Init:00000033 .LVL2
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:57     .text.AAL_Load_Var_Init:00000039 .LVL3
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:84     .text.AAL_Load_Var_Init:00000075 .LVL4
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7255   .debug_str:00000e5b .LASF448
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7477   .debug_str:0000162e .LASF449
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:856    .text.AAL_Dirty_Foam_identify:00000635 .LFE7
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6428   .debug_loc:00000020 .LLST1
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:182    .text.AAL_Dirty_Foam_identify:000000d2 .LBB4
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:496    .text.AAL_Dirty_Foam_identify:00000390 .LBE4
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7341   .debug_str:00001164 .LASF392
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1026   .text.AAL_ReadVirtualSensor:0000011b .LFE0
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6441   .debug_loc:00000040 .LLST2
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6459   .debug_loc:0000006c .LLST3
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:875    .text.AAL_ReadVirtualSensor:0000000f .LBB14
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:931    .text.AAL_ReadVirtualSensor:00000084 .LBE14
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7603   .debug_str:00001a9c .LASF393
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:898    .text.AAL_ReadVirtualSensor:00000041 .LVL7
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:909    .text.AAL_ReadVirtualSensor:00000058 .LVL8
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:952    .text.AAL_ReadVirtualSensor:0000009f .LBB15
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1011   .text.AAL_ReadVirtualSensor:00000106 .LBE15
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7025   .debug_str:000006c6 .LASF394
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6473   .debug_loc:0000008d .LLST4
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6925   .debug_str:00000383 .LASF395
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6480   .debug_loc:000000a0 .LLST5
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6492   .debug_loc:000000bf .LLST6
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:961    .text.AAL_ReadVirtualSensor:000000b0 .LVL12
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:972    .text.AAL_ReadVirtualSensor:000000c1 .LVL14
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:945    .text.AAL_ReadVirtualSensor:00000099 .LVL9
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:951    .text.AAL_ReadVirtualSensor:0000009f .LVL10
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1069   .text.AAL_TurbiditySensorCalibration:00000037 .LFE1
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6504   .debug_loc:000000de .LLST7
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1057   .text.AAL_TurbiditySensorCalibration:00000026 .LBB18
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1068   .text.AAL_TurbiditySensorCalibration:00000037 .LBE18
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1058   .text.AAL_TurbiditySensorCalibration:00000026 .LBB19
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1067   .text.AAL_TurbiditySensorCalibration:00000037 .LBE19
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1048   .text.AAL_TurbiditySensorCalibration:00000018 .LVL22
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7315   .debug_str:00001083 .LASF450
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1234   .text.ReadTurbidityManager:000000f1 .LFE6
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6518   .debug_loc:000000ff .LLST8
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6531   .debug_loc:0000011f .LLST9
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6582   .debug_loc:00000196 .LLST10
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6629   .debug_loc:00000202 .LLST11
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6652   .debug_loc:0000023a .LLST12
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7323   .debug_str:000010db .LASF396
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6689   .debug_loc:0000028a .LLST13
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1152   .text.ReadTurbidityManager:00000073 .LVL34
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1200   .text.ReadTurbidityManager:000000cf .LVL40
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1218   .text.ReadTurbidityManager:000000e6 .LVL44
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1305   .text.AAL_ValidateTurbidityCalibration:00000071 .LFE5
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6717   .debug_loc:000002d5 .LLST14
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6730   .debug_loc:000002f5 .LLST15
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1268   .text.AAL_ValidateTurbidityCalibration:00000034 .LBB22
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1302   .text.AAL_ValidateTurbidityCalibration:0000006e .LBE22
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1269   .text.AAL_ValidateTurbidityCalibration:00000034 .LBB23
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1301   .text.AAL_ValidateTurbidityCalibration:0000006e .LBE23
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1264   .text.AAL_ValidateTurbidityCalibration:0000002e .LVL48
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7385   .debug_str:000012d3 .LASF397
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1326   .text.AAL_ReadTurbidityOneShot:00000010 .LFE4
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6744   .debug_loc:00000316 .LLST16
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1317   .text.AAL_ReadTurbidityOneShot:00000006 .LVL50
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1323   .text.AAL_ReadTurbidityOneShot:0000000f .LVL51
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6843   .debug_str:00000091 .LASF398
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1339   .text.AAL_ReadTurbidityContinuous:00000006 .LFE3
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6758   .debug_loc:00000337 .LLST17
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1338   .text.AAL_ReadTurbidityContinuous:00000006 .LVL53
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7645   .debug_str:00001bec .LASF399
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7659   .debug_str:00001c62 .LASF400
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7079   .debug_str:00000884 .LASF401
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7327   .debug_str:000010f4 .LASF402
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6979   .debug_str:0000054a .LASF403
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7415   .debug_str:00001408 .LASF404
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7719   .debug_str:00001eb2 .LASF405
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7077   .debug_str:00000876 .LASF406
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6919   .debug_str:00000352 .LASF407
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7223   .debug_str:00000d6b .LASF408
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6939   .debug_str:000003f5 .LASF409
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7469   .debug_str:000015ef .LASF410
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6991   .debug_str:000005a2 .LASF411
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6891   .debug_str:00000245 .LASF412
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7325   .debug_str:000010e3 .LASF413
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7215   .debug_str:00000d2f .LASF414
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7671   .debug_str:00001ceb .LASF415
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7447   .debug_str:0000151d .LASF416
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7373   .debug_str:0000126c .LASF417
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7329   .debug_str:00001102 .LASF418
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7063   .debug_str:000007fc .LASF419
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7513   .debug_str:0000175d .LASF420
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7213   .debug_str:00000d25 .LASF421
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7703   .debug_str:00001e33 .LASF422
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7371   .debug_str:00001262 .LASF423
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6959   .debug_str:000004aa .LASF424
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6865   .debug_str:0000017a .LASF425
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7291   .debug_str:00000fa5 .LASF426
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7203   .debug_str:00000cba .LASF427
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7231   .debug_str:00000da8 .LASF428
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7233   .debug_str:00000db0 .LASF429
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6981   .debug_str:0000055c .LASF430
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6825   .debug_str:00000000 .LASF431
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7651   .debug_str:00001c0e .LASF432
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7593   .debug_str:00001a2e .LASF433
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7273   .debug_str:00000eea .LASF435
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6845   .debug_str:000000ad .LASF434
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7217   .debug_str:00000d3d .LASF436
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7441   .debug_str:000014f7 .LASF437
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7369   .debug_str:00001253 .LASF438
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6857   .debug_str:00000134 .LASF439
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7533   .debug_str:0000183c .LASF440
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6861   .debug_str:00000155 .LASF443
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7521   .debug_str:0000179d .LASF441
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:6897   .debug_str:00000271 .LASF442
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:7527   .debug_str:000017dd .LASF444
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:32     .text.AAL_Load_Var_Init:00000002 .LCFI0
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:94     .text.AAL_Dirty_Foam_identify:00000002 .LCFI1
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:866    .text.AAL_ReadVirtualSensor:00000002 .LCFI2
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:868    .text.AAL_ReadVirtualSensor:00000004 .LCFI3
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:864    .text.AAL_ReadVirtualSensor:00000000 .LVL5
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:895    .text.AAL_ReadVirtualSensor:0000003b .LVL6
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:957    .text.AAL_ReadVirtualSensor:000000a9 .LVL11
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1000   .text.AAL_ReadVirtualSensor:000000ef .LVL18
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:968    .text.AAL_ReadVirtualSensor:000000ba .LVL13
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:983    .text.AAL_ReadVirtualSensor:000000d5 .LVL15
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:988    .text.AAL_ReadVirtualSensor:000000dd .LVL16
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1008   .text.AAL_ReadVirtualSensor:00000100 .LVL19
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:991    .text.AAL_ReadVirtualSensor:000000df .LVL17
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1014   .text.AAL_ReadVirtualSensor:00000108 .LVL20
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1034   .text.AAL_TurbiditySensorCalibration:00000000 .LVL21
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1079   .text.ReadTurbidityManager:00000002 .LCFI4
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1077   .text.ReadTurbidityManager:00000000 .LVL23
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1119   .text.ReadTurbidityManager:00000034 .LVL29
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1136   .text.ReadTurbidityManager:00000057 .LVL32
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1150   .text.ReadTurbidityManager:0000006f .LVL33
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1154   .text.ReadTurbidityManager:00000075 .LVL35
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1172   .text.ReadTurbidityManager:00000098 .LVL36
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1204   .text.ReadTurbidityManager:000000d3 .LVL41
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1216   .text.ReadTurbidityManager:000000e2 .LVL43
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1123   .text.ReadTurbidityManager:0000003b .LVL30
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1185   .text.ReadTurbidityManager:000000b0 .LVL37
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1212   .text.ReadTurbidityManager:000000e0 .LVL42
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1080   .text.ReadTurbidityManager:00000002 .LVL24
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1224   .text.ReadTurbidityManager:000000e9 .LVL45
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1228   .text.ReadTurbidityManager:000000eb .LVL46
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1084   .text.ReadTurbidityManager:0000000a .LVL25
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1187   .text.ReadTurbidityManager:000000b6 .LVL38
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1189   .text.ReadTurbidityManager:000000b8 .LVL39
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1099   .text.ReadTurbidityManager:0000001c .LVL26
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1104   .text.ReadTurbidityManager:0000001f .LVL27
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1110   .text.ReadTurbidityManager:00000022 .LVL28
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1126   .text.ReadTurbidityManager:00000043 .LVL31
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1244   .text.AAL_ValidateTurbidityCalibration:00000002 .LCFI5
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1242   .text.AAL_ValidateTurbidityCalibration:00000000 .LVL47
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1313   .text.AAL_ReadTurbidityOneShot:00000000 .LVL49
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1334   .text.AAL_ReadTurbidityContinuous:00000000 .LVL52
C:\Users\Andrea\AppData\Local\Temp\cctc2bka.s:1531   .debug_info:00000000 .Ldebug_info0

UNDEFINED SYMBOLS
_HWC_Flags
_Flag_levTOtimeRef_update
_TempCycle_Stats
_dirty_foam_Data
_PM_PulseCounter_Reset_Warning
_PulseLoaded
_PM_PulseCounter_SetCount
_FLT_CheckPulseCounterStill
_GIWaterLoaded
_WaterInDW
_Flags_1
_dirty_foam_setting_data
_Set_SmallCounter
_TerminatedAlgorithmBmp
_ActiveAlgorithmBmp
_BasicLoader
_Flags_2
_Statistics_update_flag
_Tab_HWCVS_data
_SWTC_SetSValue
_uPDoorStatus
_SWTC_Stop
_SFT_Timeout_4Loadrestore_Mgmt
_Virtual_Sensor_Value
_GIValid
_SWTC_Run
_SWTC_IsExpired
_PM_PulseCounter_GetWarning
_MachineStatistics
_Tab_LoadFault
_cycle_loaded_water
_FLT_PulseCounterCheckDelay_Mgmt
_FlowMeterDivider
_EV_Pos
_LoadsReq_New
_FLT_warningSave
_uP_AltCtrl_Data
_SWTC_IsStopped
_IncByteWithCheck
_AADisplParams
_SWTC_SetMValue
_ReadVS_Data
_BLDC_PumpReq_New
_TurbidityCalibrationCmd
_TurbiditySensorCal
_TurbidityReads
_HIO_trbReadEnable
_HIO_trbReadDisable
_Tab_HWCTurbidity
_STC_Add_LastCycle_turbPerc_turbCalType
_NullFunc

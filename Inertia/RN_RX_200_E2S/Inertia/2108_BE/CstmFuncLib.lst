   1                             		.file	"CstmFuncLib.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.updateRegWaterLoaded,"ax",@progbits
   5                             		.global	_updateRegWaterLoaded
   7                             	_updateRegWaterLoaded:
   8                             	.LFB0:
   9                             		.file 1 "C:/Workspace/FW_Inertia/branch_indesit/Inertia/General/CstmFuncLib.c"
   1:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**
   2:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \defgroup	CstmFuncLib Modulo funzioni di libreria
   3:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \ingroup	ApplGeneral
   4:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
   5:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Il modulo e' una libreria di macro e funzioni condivise.
   6:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
   7:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Contiene funzioni che non risultano legate a moduli specifici ma che
   8:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** coprono funzionalita' riutilizzabili trasversalmente.
   9:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** */
  10:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
  11:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**
  12:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Source file del modulo Application Platform Library Functions
  13:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
  14:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \file		CstmFuncLib.c
  15:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \ingroup	CstmFuncLib
  16:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \date		27/07/2010
  17:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \version	01.00.00
  18:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \author		Emanuela Antognoli
  19:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
  20:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** */
  21:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
  22:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /*
  23:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Copyright (c) 2004-2008, Indesit Company, EDT.
  24:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Tutti i diritti sono riservati. All rights reserved.
  25:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** */
  26:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
  27:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* ******** */
  28:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* Includes */
  29:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* ******** */
  30:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** #include "CstmHeaders.h"
  31:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** #include "PM_TurbiditySensor.h"
  32:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** #include "PM_PulseCounterExp.h"
  33:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
  34:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* ****************** */
  35:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* Defines and Macros */
  36:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* ****************** */
  37:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
  38:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* GetModifierData */
  39:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
  40:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /** Estrae la posizione della funzione che funge da modificatore */
  41:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** #define GMD_FUNCPOS(p)		((uint8_t)(*((uint8_t*)(p)) & 0x7F))
  42:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
  43:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /** Estrae il dato/id tabella relativo al modificatore corrente */
  44:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** #define GMD_MOD_DATA(p)		OFFS_B(p, 1)
  45:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
  46:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /** Verifica se il dato è semplice o è l'id di una tabella*/
  47:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** #define GMD_HAVE_TABLE(p)	TESTBIT(*((uint8_t*)(p)), 7)
  48:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
  49:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**/
  50:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
  51:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* *************************** */
  52:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* Typedef, Structs and Unions */
  53:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* *************************** */
  54:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
  55:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* **************************** */
  56:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* Prototype of local functions */
  57:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* **************************** */
  58:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** #ifdef CONFIG_PM_POWER_PROFILE_SUPPORT
  59:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /*static void APP_AlphaCoefficientsComputation(void);*/
  60:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** #endif
  61:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* ****************** */
  62:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* Exported variables */
  63:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* ****************** */
  64:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
  65:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* ****************** */
  66:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* Imported variables */
  67:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* ****************** */
  68:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
  69:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* **************** */
  70:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* Global variables */
  71:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* **************** */
  72:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
  73:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* ***************** */
  74:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* Exported function */
  75:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /* ***************** */
  76:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
  77:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**
  78:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Aggiornamento dei litri di acqua caricati ai fini di effettuare la rigenera.
  79:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Chiamata da uP Drain 
  80:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \param  [in,out] Reg_WaterLoaded 	 
  81:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \param  [in,out] WaterInDW, decilitri di acqua caricati fino ad uno scarico
  82:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                  a V.P.+x sec. 	 
  83:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
  84:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \return 	none
  85:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
  86:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \retval		none 	 
  87:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
  88:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \warning	none		
  89:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
  90:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \author 	Stefano Ughi - modifica nomi var Valeria Catani
  91:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \date		14/09/2006
  92:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \version	1.0.1
  93:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
  94:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \bug
  95:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \to do
  96:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \note		1.0.0 -> 1.0.1 
  97:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			poichè la variabile che contiene i litri accumulati prima di una rigenera
  98:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			è del tipo uint8_t non posso conteggiare più di 255 litri 
  99:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			viene quindi verificata la condizione di overflow dei litri accumulati
 100:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			se tale condizione si presenta la variabile viene posta a 255
 101:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** */
 102:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** void updateRegWaterLoaded( void )
 103:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {
  10                             		.loc 1 103 0
  11 0000 7E A7                   		push.l	r7
  12                             	.LCFI0:
 104:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 105:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** uint16_t waterLitresLoadedTemp;
 106:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 107:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	/*  
 108:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	N.B.: in teoria un overflow su Reg_WaterLoaded.dl non dovrebbe essere possibile 
 109:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	     visto che WaterInDW non dovrebbe superare il limite 
 110:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	     di tracimamento della macchina 110 dl c.a. e
 111:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	     Reg_WaterLoaded.dl parte dal valore '0' e viene comunque riportata
 112:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	     ad un valore inferiore a 10dl = 1l
 113:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	     Se comunque ci dovesse essere un overflow per "sporcamento" variabili
 114:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	     ciò non sarebbe preoccupante.
 115:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	*/	
 116:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 117:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	Reg_WaterLoaded.dl += WaterInDW;	
  13                             		.loc 1 117 0
  14 0002 FB E2 00 00 00 00       		mov.L	#_Reg_WaterLoaded, r14
  15 0008 FB 42 00 00 00 00       		mov.L	#_WaterInDW, r4
  16 000e CC 44                   		mov.B	[r4], r4
  17 0010 06 09 E4 01             		add	1[r14].B, r4
 118:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 119:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	/* 
 120:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	check if overflow 
 121:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	N.B.: un overflow su Reg_WaterLoaded.l ( litri accumulati dalla macchina prima di effettuare
 122:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	      una rigenera è possibile e rappresenterebbe un problema perch� si rischierebbe di
 123:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	      non effettuare una rigenera. 
 124:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	*/	
 125:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	waterLitresLoadedTemp = ( (uint16_t)Reg_WaterLoaded.l + (Reg_WaterLoaded.dl/10) );
  18                             		.loc 1 125 0
  19 0014 5B 44                   		movu.B	r4, r4
  20 0016 EF 43                   		mov.L	r4, r3
  21 0018 FD 74 93 0A             		divu	#10, r3
  22 001c 58 E2                   		movu.B	[r14], r2
  23 001e 4B 32                   		add	r3, r2
  24                             	.LVL0:
 126:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 127:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if ( waterLitresLoadedTemp < 255 )
  25                             		.loc 1 127 0
  26 0020 75 52 FE                		cmp	#0xfe, r2
  27 0023 24 0C                   		bgtu	.L2
 128:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{ 
 129:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		Reg_WaterLoaded.l = (uint8_t)waterLitresLoadedTemp;
  28                             		.loc 1 129 0
  29 0025 C3 E2                   		mov.B	r2, [r14]
 130:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		Reg_WaterLoaded.dl = Reg_WaterLoaded.dl%10; 
  30                             		.loc 1 130 0
  31 0027 63 A3                   		mul	#10, r3
  32 0029 43 34                   		sub	r3, r4
  33 002b C7 E4 01                		mov.B	r4, 1[r14]
  34 002e 08                      		bra	.L1
  35                             	.L2:
 131:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
 132:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	else
 133:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
 134:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		/* Massimo valore consentito */
 135:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		Reg_WaterLoaded.l = 255;
  36                             		.loc 1 135 0
  37 002f F8 E4 FF                		mov.B	#-1, [r14]
 136:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		Reg_WaterLoaded.dl = 0;
  38                             		.loc 1 136 0
  39 0032 F9 E4 01 00             		mov.B	#0, 1[r14]
  40                             		.balign 2,3,2
  41                             	.L1:
 137:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
 138:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 139:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }  
  42                             		.loc 1 139 0
  43 0036 3F 77 01                		rtsd	#4, r7-r7
  44                             	.LFE0:
  46 0039 03                      		.section	.text.clearRegWaterLoaded,"ax",@progbits
  47                             		.global	_clearRegWaterLoaded
  49                             	_clearRegWaterLoaded:
  50                             	.LFB1:
 140:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**/
 141:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 142:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**
 143:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Azzeramento dei litri/dl di acqua caricati ai fini di effettuare la rigenera.
 144:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Chiamata dal uP Load
 145:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 146:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \author 	Valeria Catani
 147:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \date		26/06/2008
 148:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \version	1.0.1
 149:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 150:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \bug
 151:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \to do
 152:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \note	
 153:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 154:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 155:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** */
 156:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** void clearRegWaterLoaded( void )
 157:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {
  51                             		.loc 1 157 0
 158:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	Reg_WaterLoaded.l = 0;
  52                             		.loc 1 158 0
  53 0000 FB E2 00 00 00 00       		mov.L	#_Reg_WaterLoaded, r14
  54 0006 F8 E4 00                		mov.B	#0, [r14]
 159:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	Reg_WaterLoaded.dl = 0;
  55                             		.loc 1 159 0
  56 0009 F9 E4 01 00             		mov.B	#0, 1[r14]
  57 000d 02                      		rts
  58                             	.LFE1:
  60                             		.section	.text.WaterLoadedReset,"ax",@progbits
  61                             		.global	_WaterLoadedReset
  63                             	_WaterLoadedReset:
  64                             	.LFB2:
 160:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 161:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 162:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }
 163:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**/
 164:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 165:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**
 166:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Reset variabili legate alla turbina
 167:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 168:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \author 	Valeria Catani
 169:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \date		4/06/2008
 170:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \version	1.0.1
 171:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 172:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \bug
 173:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \to do
 174:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \note	
 175:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** */
 176:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 177:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** void WaterLoadedReset(void)
 178:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {
  65                             		.loc 1 178 0
 179:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 180:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   PM_PulseCounter_SetCount(0); /* init pulse counter per nuovo conteggio */
  66                             		.loc 1 180 0
  67 0000 66 01                   		mov	#0, r1
  68 0002 05 00 00 00             		bsr	_PM_PulseCounter_SetCount
  69                             	.LVL1:
 181:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 182:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   GIWaterLoaded = 0;	 /* reset variabile acqua caricata */
  70                             		.loc 1 182 0
  71 0006 FB E2 00 00 00 00       		mov.L	#_GIWaterLoaded, r14
  72 000c F8 E5 00                		mov.W	#0, [r14]
  73 000f 02                      		rts
  74                             	.LFE2:
  76                             		.section	.text.UpdateMachineState,"ax",@progbits
  77                             		.global	_UpdateMachineState
  79                             	_UpdateMachineState:
  80                             	.LFB3:
 183:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 184:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }
 185:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 186:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 187:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 188:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**
 189:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Prepara il buffer per la lettura dello stato da parte della User Interface
 190:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 191:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \param [in]		TabMachineStateAddr[] (global)
 192:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \param [in]		TabMachineStateDim[] (global)
 193:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 194:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \param [out]	MachineStateBuf[] (global)
 195:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	 
 196:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \return 		none
 197:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \warning		none
 198:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 199:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \notes:			
 200:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 201:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \author			Marco Quintini
 202:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \date   		20/06/2006
 203:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \version    	0.0.1
 204:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 205:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** */
 206:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** void UpdateMachineState(void)
 207:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {
  81                             		.loc 1 207 0
  82 0000 6E 7B                   		pushm	r7-r11
  83                             	.LCFI1:
  84                             	.LVL2:
  85 0002 FB 12 00 00 00 00       		mov.L	#_TabMachineStateDim, r1
 208:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 209:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** uint8_t stateItem, stateItemByte, stateBufferIndex;
 210:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     
 211:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	stateBufferIndex=0;
 212:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 213:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	for( stateItem = 0; stateItem < (uint8_t)(sizeof(TabMachineStateDim)); stateItem ++ )
 214:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
 215:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		for( stateItemByte = 0; stateItemByte < TabMachineStateDim[stateItem]; stateItemByte ++ )
  86                             		.loc 1 215 0
  87 0008 66 0E                   		mov.L	#0, r14
 211:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	stateBufferIndex=0;
  88                             		.loc 1 211 0
  89 000a CF E3                   		mov.B	r14, r3
 216:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		{
 217:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			MachineStateBuf[stateBufferIndex] = *( (uint8_t *)(TabMachineStateAddr[stateItem]) + stateItemBy
  90                             		.loc 1 217 0
  91 000c FB 72 00 00 00 00       		mov.L	#_MachineStateBuf, r7
  92 0012 2E 20                   		bra	.L8
  93                             	.LVL3:
  94                             	.L9:
  95                             		.loc 1 217 0 is_stmt 0 discriminator 2
  96 0014 EC 5A                   		mov.L	[r5], r10
  97 0016 5B BB                   		movu.B	r11, r11
  98 0018 FE 44 AA                		mov.B	[r4,r10], r10
  99 001b FE 0B 7A                		mov.B	r10, [r11,r7]
 100                             	.LVL4:
 101 001e 62 14                   		add	#1, r4
 102                             	.LVL5:
 103                             		.balign 2,3,2
 104                             	.L11:
 206:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** void UpdateMachineState(void)
 105                             		.loc 1 206 0 is_stmt 1 discriminator 1
 106 0020 FF 2B 34                		add	r3, r4, r11
 107                             	.LVL6:
 215:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		for( stateItemByte = 0; stateItemByte < TabMachineStateDim[stateItem]; stateItemByte ++ )
 108                             		.loc 1 215 0 discriminator 1
 109 0023 5B 4A                   		movu.B	r4, r10
 110 0025 47 FA                   		cmp	r15, r10
 111 0027 23 ED                   		bltu	.L9
 112 0029 4B 23                   		add	r2, r3
 113                             	.LVL7:
 114 002b 62 4E                   		add	#4, r14
 213:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	for( stateItem = 0; stateItem < (uint8_t)(sizeof(TabMachineStateDim)); stateItem ++ )
 115                             		.loc 1 213 0
 116 002d 75 5E 24                		cmp	#36, r14
 117 0030 20 11                   		beq	.L7
 118                             	.LVL8:
 119                             		.balign 2,3,5
 120                             	.L8:
 215:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		for( stateItemByte = 0; stateItemByte < TabMachineStateDim[stateItem]; stateItemByte ++ )
 121                             		.loc 1 215 0 discriminator 1
 122 0032 FD 28 12                		mov.B	[r1+], r2
 123 0035 66 04                   		mov.L	#0, r4
 124 0037 5B 2F                   		movu.B	r2, r15
 206:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** void UpdateMachineState(void)
 125                             		.loc 1 206 0 discriminator 1
 126 0039 70 E5 00 00 00 00       		add	#_TabMachineStateAddr, r14, r5
 127 003f 2E E1                   		bra	.L11
 128                             	.LVL9:
 129                             	.L7:
 218:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		    
 219:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		    stateBufferIndex++;
 220:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		}
 221:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
 222:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }
 130                             		.loc 1 222 0
 131 0041 3F 7B 05                		rtsd	#20, r7-r11
 132                             	.LFE3:
 134                             		.section	.text.GetDeltaFromVariation,"ax",@progbits
 135                             		.global	_GetDeltaFromVariation
 137                             	_GetDeltaFromVariation:
 138                             	.LFB5:
 223:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**/
 224:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 225:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**
 226:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Aggiorna ApplicationState e ApplicationFlags.
 227:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 228:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \param [in]		GICriteria (global)
 229:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \param [in]		CurrentFault (global)
 230:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 231:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \param [out]	ApplicationState (global)
 232:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \param [out]	ApplicationFlags (global)
 233:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	 
 234:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \return 		none
 235:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \warning		none
 236:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 237:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \notes:			non va chiamata in PC Control
 238:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 239:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \author			Marco Quintini
 240:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \date   		12/07/2006
 241:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \version    	1.0.0
 242:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 243:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** */
 244:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** void UpdateStateBitmaps(void)
 245:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {
 246:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	uint8_t nRegMax;
 247:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 248:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	/**** Update ApplicationFlags ***/
 249:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 250:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	/* Vengono messi al valore di init tutti i bit di ApplicationFlags che poi saranno aggiornati */
 251:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	ApplicationFlags = BUILD_BMP(ApplicationFlags, APPL_FLAGS_INIT_VAL, APPL_FLAGS_MASK);
 252:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 253:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   /** Stato sale per UI */
 254:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   
 255:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if (HWC_Flags.bit.saltreed)
 256:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{/* reed sale presente */
 257:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 258:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		if (TESTBIT(GIValid, (GI_FIRST_CRITERION_BIT + GI_SALT_IND) ) != 0)
 259:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		{
 260:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			nRegMax = OFFS_B(Tab_HWCRegenerateData.Data,2); /* Introdurre delle define, qui e in tutti i pun
 261:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 262:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			if( (TESTBIT(GICriteria, GI_SALT_IND) == 0) && (uP_Regenerate_Data.nReg >= nRegMax ) )
 263:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			{
 264:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				/* Sale assente */
 265:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				SETBIT(ApplicationFlags, AF_NO_SALT_BIT);								
 266:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** #ifdef _STATISTICS_ON_
 267:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				if ( TESTBIT(Statistics_update_flag, STATISTIC_FLAG_NO_SALT)==0)
 268:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				{ 
 269:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 					IncWordWithCheck(&MachineStatistics.globalStats.salt_reset);
 270:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 					SETBIT(Statistics_update_flag, STATISTIC_FLAG_NO_SALT);
 271:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				}	
 272:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 273:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			}else
 274:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			{
 275:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				CLRBIT(Statistics_update_flag, STATISTIC_FLAG_NO_SALT);
 276:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** #endif	
 277:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			}
 278:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			
 279:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		}
 280:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
 281:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 282:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     /** Stato brillantante per UI */	 /*QUESTO VIENE AGGIORNATO ANCHE NEL UP SPARKLING AID... VA BE
 283:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	/*if( TESTBIT(GICriteria, GI_SPARKLING_AID_IND) == 0 )*/
 284:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if(Flags_2 & FLAGS2_NO_SPARKL_AID_MSK)
 285:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
 286:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		/* Brillantante assente */
 287:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		SETBIT(ApplicationFlags, AF_NO_SPARKLING_AID_BIT);
 288:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			
 289:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** #ifdef _STATISTICS_ON_
 290:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		if ( TESTBIT (GICriteriaOld, GI_SPARKLING_AID_IND) )
 291:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		{/* transizione brillantante presente -> assente*/
 292:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			IncWordWithCheck(&MachineStatistics.globalStats.sparkling_reset);
 293:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		}	
 294:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** #endif	
 295:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
 296:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 297:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 298:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	/** Stato warning H2O per UI */  
 299:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 300:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if( FltWarning.load )
 301:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
 302:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		/* Problemi caricamento acqua */
 303:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		SETBIT(ApplicationFlags, AF_H2O_WARN_BIT);
 304:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
 305:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 306:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 307:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	/** Stato porta per UI */
 308:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if( TESTBIT(GICriteria, GI_CR_DOOR_IND) == 0 )
 309:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
 310:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		/* Porta aperta */
 311:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		CLRBIT(ApplicationFlags, AF_DOOR_CLOSED_BIT);
 312:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
 313:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 314:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	/** Disabilitazione Standby durante lo scarico di sicurezza */
 315:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if ( TESTBIT(Flags_2,FLAG2_SAFETY_DRAIN_PP_ON_POS) ||New_safety_VS.drain_act ||(SftPulseWarn.statu
 316:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
 317:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		SETBIT(ApplicationFlags,AF_STANDBY_DISABLE_BIT); 
 318:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
 319:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 320:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if ( TESTBIT(Flags_2, FLAG2_CLOGGED_FILTER))
 321:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
 322:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		SETBIT(ApplicationFlags,AF_DIRTY_FILTER_BIT); 
 323:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
 324:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 325:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	/* Aggiungere l'aggiornamento di eventuali altri bit */
 326:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 327:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 328:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	/**** Update ApplicationState ***/
 329:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 330:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	/* Vengono messi al valore di init tutti i bit di ApplicationState che poi saranno aggiornati */
 331:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	ApplicationState = BUILD_BMP(ApplicationState, APPL_STATE_INIT_VAL, APPL_STATE_MASK);
 332:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 333:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	/** Stato PC Control */
 334:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	/* Qui il bit AS_REMOTE_CTRL_ON_BIT viene solo resettato, il set avviene altrove */
 335:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 336:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	/** Stato di fault per UI */
 337:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if( CurrentFault[0].code != CODE_NO_FAULT )
 338:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
 339:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		/* Main in stato di FAULT */
 340:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		SETBIT(ApplicationState, AS_APPL_FAULT_BIT);
 341:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
 342:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 343:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	/** Validità dati per UI */
 344:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if( FLT_checkForSettingFault() == TRUE )
 345:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
 346:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		/* Richiesta UI: se fault file di setting => azzerare il bit DATA_READY */
 347:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		CLRBIT(ApplicationState, AS_DATA_READY_BIT);
 348:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
 349:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 350:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** #if	(SBY_STANDBY_ENABLE == 1)
 351:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if (HarakiriLowPower.Mode != HKM_SBY_OFF_MODE)
 352:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{	/* aggiornamento bit relativo allo stato di Standby ON :
 353:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		si mette nei criteri perchè nei flag di applicazione non c'è posto */
 354:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 355:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		if (HarakiriLowPower.Req ==  HKM_LOW_POWER_REQ   )
 356:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		{
 357:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			SETBIT(ApplicationFlags, AF_SBY_SLEEP_ON_FLAG );	
 358:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		}
 359:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}	
 360:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 361:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if ( TESTBIT(GIValid,GI_FIRST_WAKEUP_SOURCE_IND) && (TESTBIT(GICriteria, GI_FIRST_WAKEUP_SOURCE_IN
 362:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
 363:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		SETBIT(ApplicationFlags, AF_WAKEUP_OFBUTTON_BIT );
 364:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}else
 365:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
 366:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		if (TESTBIT(GICriteria, GI_FIRST_WAKEUP_SOURCE_IND))
 367:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		{
 368:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			if  ( TESTBIT(Flags_2, FLAG2_SAFETY_TURB_TEST_BIT) || ( TESTBIT (GICriteria,GI_CR_OVFL_IND) != 0
 369:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			||(SftPulseWarn.status==SFT_PULSE_WARN_EXE)  )
 370:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			{
 371:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				SETBIT(ApplicationFlags, AF_STANDBY_DISABLE_BIT );	
 372:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			}	
 373:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		}else
 374:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		 {
 375:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		 /* ingresso circuito di standby non presente o comunque non valido
 376:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			i  flag sono sempre a 0 . la main non va in standby autonomamente, quindi la visual non dovrebbe
 377:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			per cui si simula un reset da tasto*/
 378:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			SETBIT(ApplicationFlags, AF_WAKEUP_OFBUTTON_BIT );
 379:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		 }	
 380:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
 381:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** #endif
 382:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }
 383:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**/
 384:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 385:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**
 386:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Dato un valore e la variazione percentuale (con segno) richiesta, restituisce il delta
 387:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** da applicare al valore in ingresso (es. target di conteggio).
 388:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  
 389:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \param [in] variation: variazione percentuale (con segno) richiesta
 390:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \param [in] value: target a cui applicare 
 391:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 392:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \return il delta (con segno) da applicare al valore in ingresso
 393:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 394:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \version		1.0.0
 395:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \date 			16/11/2006
 396:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \author  		Valeria Catani
 397:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** */
 398:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 399:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** int16_t GetDeltaFromVariation(uint16_t value, int8_t variation)
 400:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {
 139                             		.loc 1 400 0
 140                             	.LVL10:
 141 0000 7E A7                   		push.l	r7
 142                             	.LCFI2:
 143                             	.LVL11:
 401:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** ldiv_t deltadiv;
 402:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** int32_t delta;
 403:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 404:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	delta = ((int32_t)value * abs((int)variation));
 144                             		.loc 1 404 0
 145 0002 5F 11                   		movu.W	r1, r1
 146 0004 CF 27                   		mov.B	r2, r7
 147 0006 FC 0F 7E                		abs	r7, r14
 405:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 406:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	deltadiv = ldiv(delta, (int32_t)100);
 148                             		.loc 1 406 0
 149 0009 4F E1                   		mul	r14, r1
 150                             	.LVL12:
 151 000b 75 42 64                		mov.L	#0x64, r2
 152                             	.LVL13:
 153 000e 05 00 00 00             		bsr	_ldiv
 154                             	.LVL14:
 407:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 408:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	delta = deltadiv.quot;
 409:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 410:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if ( deltadiv.rem > 50 )
 155                             		.loc 1 410 0
 156 0012 75 52 32                		cmp	#50, r2
 157 0015 2B 05                   		ble	.L14
 411:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
 412:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		delta++;
 158                             		.loc 1 412 0
 159 0017 62 11                   		add	#1, r1
 160                             	.LVL15:
 161 0019 03                      		.balign 2,3,1
 162                             	.L14:
 413:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
 414:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 415:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if (variation > 0)
 163                             		.loc 1 415 0
 164 001a 61 07                   		cmp	#0, r7
 165 001c 2A 04                   		bgt	.L16
 416:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
 417:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		/* value è sempre > 0, il segno di delta dipende da variation */
 418:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		return ((int16_t) delta);
 419:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
 420:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 421:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	return ((int16_t)(-delta));
 166                             		.loc 1 421 0
 167 001e 7E 11                   		neg	r1
 168                             	.LVL16:
 169                             		.balign 2,3,1
 170                             	.L16:
 422:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }
 171                             		.loc 1 422 0
 172 0020 DF 11                   		mov.W	r1, r1
 173 0022 3F 77 01                		rtsd	#4, r7-r7
 174                             	.LFE5:
 176 0025 03                      		.section	.text.TabQueryB,"ax",@progbits
 177                             		.global	_TabQueryB
 179                             	_TabQueryB:
 180                             	.LFB6:
 423:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**/
 424:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 425:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 426:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**
 427:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Dato il puntatore ad una tabella a word in cui il byte alto (1) è un indice
 428:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** ed il byte basso (2) un valore, preso il valore regVal restituisce 
 429:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** il valore (2) corrispondente all'indice (1) minore o uguale a regVal.
 430:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 431:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \param [in] pTable puntatore alla tabella
 432:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \param [in] regVal valore di confronto dell'indice
 433:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 434:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \return	il valore della tabella corrispondente all'indice fornito
 435:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** */
 436:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** uint8_t TabQueryB(const Loader_Struct* pTable, uint8_t regVal)
 437:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {
 181                             		.loc 1 437 0
 182                             	.LVL17:
 438:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** uint16_t *pRegIndex;
 439:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** uint8_t tabValue;
 440:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 441:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	pRegIndex = (uint16_t*)(pTable->Data);
 183                             		.loc 1 441 0
 184 0000 EC 1E                   		mov.L	[r1], r14
 185                             	.LVL18:
 442:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	tabValue = LOBYTE(*pRegIndex++);
 186                             		.loc 1 442 0
 187 0002 CD E4 01                		mov.B	1[r14], r4
 188                             	.LVL19:
 443:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 444:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	while ((pRegIndex < ((uint16_t*)(pTable->Data) + pTable->DataLenght)) && (HIBYTE(*pRegIndex) <= re
 189                             		.loc 1 444 0
 190 0005 B8 93                   		movu.W	4[r1], r3
 191 0007 4B 33                   		add	r3, r3
 192 0009 4B E3                   		add	r14, r3
 442:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	tabValue = LOBYTE(*pRegIndex++);
 193                             		.loc 1 442 0
 194 000b 62 2E                   		add	#2, r14
 195                             	.LVL20:
 196                             		.loc 1 444 0
 197 000d 5B 22                   		movu.B	r2, r2
 198 000f 0B                      		bra	.L19
 199                             	.LVL21:
 200                             	.L21:
 445:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
 446:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 447:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		tabValue = LOBYTE(*pRegIndex++);
 201                             		.loc 1 447 0
 202 0010 CF 14                   		mov.B	r1, r4
 203                             	.LVL22:
 204                             		.balign 2,3,1
 205                             	.L19:
 444:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	while ((pRegIndex < ((uint16_t*)(pTable->Data) + pTable->DataLenght)) && (HIBYTE(*pRegIndex) <= re
 206                             		.loc 1 444 0 discriminator 1
 207 0012 47 3E                   		cmp	r3, r14
 208 0014 23 05                   		bltu	.L20
 209                             		.balign 2,3,1
 210                             	.L22:
 448:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
 449:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 450:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	return tabValue;
 211                             		.loc 1 450 0
 212 0016 5B 41                   		movu.B	r4, r1
 213 0018 02                      		rts
 214                             	.L20:
 444:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	while ((pRegIndex < ((uint16_t*)(pTable->Data) + pTable->DataLenght)) && (HIBYTE(*pRegIndex) <= re
 215                             		.loc 1 444 0 discriminator 2
 216 0019 FD 29 E1                		mov.W	[r14+], r1
 217 001c 5F 15                   		movu.W	r1, r5
 218 001e 68 85                   		shlr	#8, r5
 219 0020 47 25                   		cmp	r2, r5
 220 0022 25 EE                   		bleu	.L21
 221 0024 2E F2                   		bra	.L22
 222                             	.LFE6:
 224                             		.section	.text.GetModifierData,"ax",@progbits
 225                             		.global	_GetModifierData
 227                             	_GetModifierData:
 228                             	.LFB7:
 451:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }
 452:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**/
 453:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 454:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 455:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 456:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**
 457:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Ritorna la variazione assciata ad un modificatore
 458:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 459:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \param [in] pModTable è il puntatore ai dati relativi al modificatore
 460:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 461:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \return la variazione associata al modificatore
 462:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  
 463:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \version		1.0.0
 464:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \date 			14/02/2006
 465:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \author  		Simone Costantini
 466:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** */
 467:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 468:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 469:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** int8_t GetModifierData(const uint8_t* pModTable)
 470:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {
 229                             		.loc 1 470 0
 230                             	.LVL23:
 231 0000 6E 7B                   		pushm	r7-r11
 232                             	.LCFI3:
 233 0002 60 C0                   		sub	#12, r0
 234                             	.LCFI4:
 471:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Loader_Struct regTable;
 472:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** uint16_t regVal;
 473:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** uint8_t indReg;
 474:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** uint8_t modData;
 475:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** uint8_t funcPos = GMD_FUNCPOS(pModTable);
 235                             		.loc 1 475 0
 236 0004 CC 14                   		mov.B	[r1], r4
 237 0006 EF 4E                   		mov.L	r4, r14
 238 0008 75 2E 7F                		and #0x7f, r14
 239                             	.LVL24:
 476:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** int8_t variation = MOD_DONT_CARE;
 477:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 478:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	/* L'indice di regolazione ha un offset di 1 */
 479:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	indReg = BufNewReg[funcPos] - 1;
 240                             		.loc 1 479 0
 241 000b FB 72 00 00 00 00       		mov.L	#_BufNewReg, r7
 242 0011 FE 4E 77                		mov.B	[r14,r7], r7
 243 0014 60 17                   		sub	#1, r7
 244                             	.LVL25:
 480:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 481:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if(0xFF == indReg)
 245                             		.loc 1 481 0
 246 0016 5B 7A                   		movu.B	r7, r10
 247 0018 75 5A FF                		cmp	#0xff, r10
 248 001b 1E                      		bne	.L25
 249                             	.LVL26:
 250                             		.balign 2,3,2
 251                             	.L28:
 482:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
 483:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		/*
 484:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		(BufNewReg[funcPos] == 0) è una situazione anomala che non dovrebbe	mai	verificarsi. 
 485:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		Tuttavia, nella remota possibilità che ciò accada e considerato che questa 
 486:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		funzione deve ritornare sempre un valore, scegliamo MOD_DONT_CARE 
 487:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		(ovvero non vengono applicati i modificatori).
 488:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		*/
 489:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		variation = MOD_DONT_CARE;
 252                             		.loc 1 489 0
 253 001c 75 41 7F                		mov	#0x7f, r1
 254 001f 2E 3D                   		bra	.L26
 255                             	.LVL27:
 256                             	.L25:
 490:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
 491:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	else
 492:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
 493:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		/* 
 494:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		E' stato letto correttamente il valore di regolazione della
 495:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		funzione specificata.
 496:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		*/
 497:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		modData = GMD_MOD_DATA(pModTable);
 257                             		.loc 1 497 0
 258 0021 CD 1A 01                		mov.B	1[r1], r10
 259                             	.LVL28:
 498:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 499:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		if (GMD_HAVE_TABLE(pModTable))
 260                             		.loc 1 499 0
 261 0024 CF 44                   		mov.B	r4, r4
 262 0026 61 04                   		cmp	#0, r4
 263 0028 28 1D                   		bge	.L27
 500:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		{
 501:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			/* La funzione ha più regolazioni */
 502:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 503:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			if (BasicLoader(PTR_MICROPROG_MODIFIERS_DATA, modData, &regTable) == S_OK)			
 264                             		.loc 1 503 0
 265 002a 5B A2                   		movu.B	r10, r2
 266 002c 75 41 29                		mov	#41, r1
 267                             	.LVL29:
 268 002f EF 03                   		mov.L	r0, r3
 269 0031 05 00 00 00             		bsr	_BasicLoader
 270                             	.LVL30:
 271 0035 76 21 FF 00             		and #0xff, r1
 272 0039 21 E3                   		bne	.L28
 504:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			{							
 505:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				/* Si lavora su INDICE della Regolazione */
 506:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				/* 
 507:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				Viene presa nella tabella la variazione corrispondente al
 508:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				più grande valore di regolazione <= regVal.
 509:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				*/
 510:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				variation = (int8_t) TabQueryB(&regTable, indReg);
 273                             		.loc 1 510 0
 274 003b EF 01                   		mov.L	r0, r1
 275 003d CF 72                   		mov.B	r7, r2
 276 003f 05 00 00 00             		bsr	_TabQueryB
 277                             	.LVL31:
 278 0043 2E 19                   		bra	.L26
 279                             	.LVL32:
 280                             	.L27:
 511:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				/*
 512:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				Variante: tabella ad accesso diretto
 513:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				if (indReg < 2*regTable.DataLenght)
 514:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				{
 515:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 					variation = (int8_t) *((uint8_t*)regTable.Data+ indReg);
 516:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				}
 517:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				*/
 518:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			}
 519:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 520:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		}
 521:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		else
 522:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		{
 523:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			/* 
 524:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			La funzione è di tipo ON/OFF, 
 525:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			se è il valore è 0 (OFF) non viene applicata alcuna variazione
 526:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			*/
 527:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			
 528:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			if (REG_getFunctionValueByPos(funcPos, &regVal) == S_OK)
 281                             		.loc 1 528 0
 282 0045 CF E1                   		mov.B	r14, r1
 283                             	.LVL33:
 284 0047 71 02 08                		add	#8, r0, r2
 285 004a 05 00 00 00             		bsr	_REG_getFunctionValueByPos
 286                             	.LVL34:
 287 004e 76 21 FF 00             		and #0xff, r1
 288 0052 21 CA                   		bne	.L28
 289                             	.LVL35:
 529:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			{
 530:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				if (regVal != 0)
 290                             		.loc 1 530 0
 291 0054 B9 07                   		movu.W	8[r0], r7
 292                             	.LVL36:
 293 0056 61 07                   		cmp	#0, r7
 294                             	.LVL37:
 295 0058 20 C4                   		beq	.L28
 531:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				{		
 532:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 					variation = (int8_t) modData;
 296                             		.loc 1 532 0
 297 005a CF A1                   		mov.B	r10, r1
 298                             	.LVL38:
 299                             		.balign 2,3,1
 300                             	.L26:
 533:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				}
 534:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			}
 535:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		}
 536:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}	
 537:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 538:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	return variation;
 539:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }
 301                             		.loc 1 539 0
 302 005c CF 11                   		mov.B	r1, r1
 303 005e 3F 7B 08                		rtsd	#32, r7-r11
 304                             	.LFE7:
 306 0061 03                      		.section	.text.TabQuery,"ax",@progbits
 307                             		.global	_TabQuery
 309                             	_TabQuery:
 310                             	.LFB8:
 540:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 541:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 542:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**
 543:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Ricerca il valore ingresso nella tabella restituisce il corrispondente valore di uscita.
 544:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 545:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** E' applicabile a Generic Inputs 
 546:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** (ANALOG TO DEGREES, FREQ TO WATER LEVEL (PRESSURE SENSOR - LINEAR)
 547:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** ANALOG TO CRITERION, FREQ TO CRITERION, ANALOG TO LEVELS) e modificatori
 548:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 549:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Formato dati supportato: Input 
 550:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                             8/16 bit unsigned
 551:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                          Output.
 552:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                             8/16 bit signed/unsigned
 553:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                         
 554:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Operazione sui dati di uscita:interpolazione oppure no
 555:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 556:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  
 557:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \param [in]		*_in : puntatore alla struttura TabQueryIn_t                                          
 558:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \param [out]	*_result : puntatore al risultato della conversione (TabQueryResult_t)
 559:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \return 			uint8_t
 560:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \retvalue 		S_OK se la conversione è andata a buon fine
 561:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \retvalue       S_FALSE se il numer di punti è nullo.o se la ricerca fallisce.
 562:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 563:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				
 564:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \version		1.0.1
 565:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \date 			30/06/2008
 566:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \author			Roberto Fioravanti
 567:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 568:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \note		\par \b Nota 1:           
 569:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \to do       -
 570:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             
 571:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** */
 572:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** uint8_t TabQuery(const TabQueryIn_t * _in, TabQueryResult_t * _result)
 573:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {        
 311                             		.loc 1 573 0
 312                             	.LVL39:
 313 0000 6E 7D                   		pushm	r7-r13
 314                             	.LCFI5:
 315                             	.LVL40:
 574:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     uint8_t *pInputData;                    /*pnt ai dati in ingresso*/
 575:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     uint8_t *pOutputData;	                /*pnt ai dati in uscita*/
 576:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     uint8_t *pCurrInputData;                /*pnt al valore range corrente  */
 577:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     uint8_t range_index = 0;                /*indice del range della lettura*/
 578:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     uint16_t currInputVal,prevInputVal;     /*valori ingresso range corrente e precendente*/
 579:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     uint16_t currOutputVal,prevOutputVal;	/*valori uscita range corernte e precedente*/
 580:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     uint16_t psLowerBound, psUpperBound;    /*limiti*/
 581:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     bool_t bFound=FALSE;
 582:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     
 583:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if(_in->tab->pointNumber == 0)
 316                             		.loc 1 583 0
 317 0002 71 17 01                		add	#1, r1, r7
 318 0005 EC 7E                   		mov.L	[r7], r14
 319 0007 CD E5 01                		mov.B	1[r14], r5
 320 000a 5B 54                   		movu.B	r5, r4
 321 000c 61 04                   		cmp	#0, r4
 322 000e 1C                      		bne	.L34
 323 000f 38 47 01                		bra	.L70
 324                             	.L34:
 584:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
 585:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		/* Numero di elementi della tabella nullo: non è possibile valorizzare *returnValue */
 586:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		return S_FALSE;
 587:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		
 588:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
 589:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 590:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	pInputData = ( (uint8_t*)_in->tab + FIXED_GI_TAB_LEN ); 
 325                             		.loc 1 590 0
 326 0012 71 E3 02                		add	#2, r14, r3
 327                             	.LVL41:
 591:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     /* puntatore al campo dati dei valori di output (allineato a word) */ 
 592:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	pOutputData = ( (uint8_t*)_in->tab + FIXED_GI_TAB_LEN + (_in->tab->pointNumber<<(_in->tab->S1&GI_W
 328                             		.loc 1 592 0
 329 0015 58 EB                   		movu.B	[r14], r11
 330 0017 68 1B                   		shlr	#1, r11
 331 0019 EF B7                   		mov.L	r11, r7
 332 001b 64 37                   		and #3, r7
 333 001d 64 1B                   		and #1, r11
 334 001f FD 62 B4                		shll	r11, r4
 335 0022 62 24                   		add	#2, r4
 336 0024 4B E4                   		add	r14, r4
 337                             	.LVL42:
 593:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if(((_in->tab->S1 & GI_WORD) == GI_BYTE) && (_in->tab->pointNumber&1))
 338                             		.loc 1 593 0
 339 0026 61 0B                   		cmp	#0, r11
 340 0028 18                      		bne	.L36
 341                             		.loc 1 593 0 is_stmt 0 discriminator 1
 342 0029 FD 74 C5 01             		tst	#1, r5
 343 002d 13                      		beq	.L36
 594:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
 595:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    pOutputData++;
 344                             		.loc 1 595 0 is_stmt 1
 345 002e 62 14                   		add	#1, r4
 346                             	.LVL43:
 347                             		.balign 2,3,1
 348                             	.L36:
 596:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
 597:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 598:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	pCurrInputData=pInputData;
 599:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 600:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     /* Limite inferiore e superiore */
 601:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     switch(_in->tab->S1)
 349                             		.loc 1 601 0
 350 0030 5B 77                   		movu.B	r7, r7
 351 0032 61 07                   		cmp	#0, r7
 352 0034 17                      		beq	.L38
 353 0035 61 17                   		cmp	#1, r7
 354 0037 21 1F                   		bne	.L37
 355 0039 2E 0F                   		bra	.L39
 356                             	.L38:
 602:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     {
 603:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         case 0:
 604:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             /* uc */
 605:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             psLowerBound = (uint16_t)(*pInputData);
 357                             		.loc 1 605 0
 358 003b 59 EF 02                		movu.B	2[r14], r15
 359                             	.LVL44:
 606:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	        psUpperBound = (uint16_t)(*(pInputData+_in->tab->pointNumber-1));
 360                             		.loc 1 606 0
 361 003e 5B 55                   		movu.B	r5, r5
 362 0040 4B 35                   		add	r3, r5
 363 0042 60 15                   		sub	#1, r5
 364 0044 58 5A                   		movu.B	[r5], r10
 365                             	.LVL45:
 607:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    break;
 366                             		.loc 1 607 0
 367 0046 2E 10                   		bra	.L37
 368                             	.LVL46:
 369                             	.L39:
 608:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         
 609:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         case 1:
 610:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             /* us */
 611:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             psLowerBound = *((uint16_t*)pInputData);
 370                             		.loc 1 611 0
 371 0048 DD EF 01                		mov.W	2[r14], r15
 372                             	.LVL47:
 612:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	        psUpperBound = *((uint16_t*)pInputData+_in->tab->pointNumber-1);
 373                             		.loc 1 612 0
 374 004b 5B 55                   		movu.B	r5, r5
 375 004d 60 15                   		sub	#1, r5
 376 004f 4B 55                   		add	r5, r5
 377 0051 4B 35                   		add	r3, r5
 378 0053 DC 5A                   		mov.W	[r5], r10
 379                             	.LVL48:
 380 0055 03                      		.balign 2,3,2
 381                             	.L37:
 613:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	       
 614:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         break;
 615:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     }
 616:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 617:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	 _result->b.lbound = (_in->cfr_val<psLowerBound)?TRUE:FALSE;
 382                             		.loc 1 617 0
 383 0056 71 17 05                		add	#5, r1, r7
 384 0059 DC 7B                   		mov.W	[r7], r11
 385 005b 5F B7                   		movu.W	r11, r7
 386 005d 5F FF                   		movu.W	r15, r15
 387 005f CD 2C 05                		mov.B	5[r2], r12
 388 0062 47 F7                   		cmp	r15, r7
 389 0064 FD E7 3C                		bmltu	#7, r12
 390 0067 C7 2C 05                		mov.B	r12, 5[r2]
 618:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	 _result->b.ubound = (_in->cfr_val>psUpperBound)?TRUE:FALSE;
 391                             		.loc 1 618 0
 392 006a 5F AA                   		movu.W	r10, r10
 393 006c CD 2C 04                		mov.B	4[r2], r12
 394 006f 47 A7                   		cmp	r10, r7
 395 0071 FD E0 4C                		bmgtu	#0, r12
 396 0074 C7 2C 04                		mov.B	r12, 4[r2]
 577:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     uint8_t range_index = 0;                /*indice del range della lettura*/
 397                             		.loc 1 577 0
 398 0077 66 05                   		mov	#0, r5
 619:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	        
 620:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	 
 621:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	/* ricerca */
 622:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     while( (!bFound) && (range_index < _in->tab->pointNumber))  
 399                             		.loc 1 622 0
 400 0079 59 ED 01                		movu.B	1[r14], r13
 401 007c EF 7C                   		mov.L	r7, r12
 402 007e 2E 36                   		bra	.L40
 403                             	.LVL49:
 404                             	.L46:
 623:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     {	  
 624:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	     	    
 625:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         if(_in->tab->S1&GI_WORD) 
 405                             		.loc 1 625 0
 406 0080 58 E7                   		movu.B	[r14], r7
 626:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         {
 627:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****           /* formato input a WORD */
 628:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****           prevInputVal = *((uint16_t*)pCurrInputData);     
 407                             		.loc 1 628 0
 408 0082 EF 3A                   		mov.L	r3, r10
 625:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         if(_in->tab->S1&GI_WORD) 
 409                             		.loc 1 625 0
 410 0084 7C 17                   		btst #1, r7
 411 0086 10                      		beq	.L41
 412                             		.loc 1 628 0
 413 0087 FD 29 A7                		mov.W	[r10+], r7
 414                             	.LVL50:
 629:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****           pCurrInputData+=sizeof(uint16_t);
 630:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****          currInputVal = *((uint16_t*)pCurrInputData);     	
 415                             		.loc 1 630 0
 416 008a DD 3F 01                		mov.W	2[r3], r15
 417                             	.LVL51:
 418 008d 0F                      		bra	.L69
 419                             	.LVL52:
 420                             	.L41:
 631:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             
 632:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         }
 633:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         else 
 634:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         { 
 635:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****           /* formato input a BYTE */      
 636:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****           prevInputVal = (uint16_t)*(pCurrInputData);   
 421                             		.loc 1 636 0
 422 008e FD 38 A7                		movu.B	[r10+], r7
 423                             	.LVL53:
 637:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****           pCurrInputData++;
 638:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****           currInputVal = (uint16_t)*(pCurrInputData);      
 424                             		.loc 1 638 0
 425 0091 59 3F 01                		movu.B	1[r3], r15
 426                             		.balign 2,3,1
 427                             	.L69:
 428                             	.LVL54:
 637:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****           pCurrInputData++;
 429                             		.loc 1 637 0
 430 0094 EF A3                   		mov.L	r10, r3
 431                             	.LVL55:
 639:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         	
 640:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         }
 641:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 642:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         /* verisfica della condizione di ricerca */
 643:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         if(_in->opt.b.findexactvalue == 0)
 432                             		.loc 1 643 0
 433 0096 CC 1A                   		mov.B	[r1], r10
 434 0098 FD 74 CA 01             		tst	#1, r10
 435 009c 19                      		bne	.L43
 644:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         {            
 645:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             if(_in->cfr_val <= currInputVal)
 436                             		.loc 1 645 0
 437 009d 5F FA                   		movu.W	r15, r10
 646:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             {
 647:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	bFound=TRUE;
 438                             		.loc 1 647 0
 439 009f 47 AC                   		cmp	r10, r12
 440 00a1 FC DB A5                		scleu.L	r10
 441 00a4 08                      		bra	.L44
 442                             	.L43:
 648:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             }
 649:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         }
 650:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         else
 651:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         {
 652:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             if(_in->cfr_val == prevInputVal)
 443                             		.loc 1 652 0
 444 00a5 5F 7A                   		movu.W	r7, r10
 647:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	bFound=TRUE;
 445                             		.loc 1 647 0
 446 00a7 47 AC                   		cmp	r10, r12
 447 00a9 FC DB A0                		sceq.L	r10
 448                             		.balign 2,3,1
 449                             	.L44:
 450                             	.LVL56:
 653:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             {
 654:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	bFound=TRUE;
 655:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             }
 656:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         }
 657:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         
 658:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         range_index++;
 451                             		.loc 1 658 0
 452 00ac 62 15                   		add	#1, r5
 453                             	.LVL57:
 622:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     while( (!bFound) && (range_index < _in->tab->pointNumber))  
 454                             		.loc 1 622 0
 455 00ae 61 0A                   		cmp	#0, r10
 456 00b0 3B B0 00                		bne	.L45
 457                             	.LVL58:
 458 00b3 03                      		.balign 2,3,1
 459                             	.L40:
 622:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     while( (!bFound) && (range_index < _in->tab->pointNumber))  
 460                             		.loc 1 622 0 is_stmt 0 discriminator 2
 461 00b4 5B 57                   		movu.B	r5, r7
 462 00b6 47 D7                   		cmp	r13, r7
 463 00b8 21 C8                   		bne	.L46
 464 00ba 38 B5 00                		bra	.L65
 465                             	.LVL59:
 466                             	.L55:
 659:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         
 660:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     }
 661:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     
 662:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     if(bFound)
 663:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     {
 664:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         if(!_in->tab->Int)
 665:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         {            
 666:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             if(_in->tab->S2&GI_WORD)
 467                             		.loc 1 666 0 is_stmt 1
 468 00bd FD 83 AE                		shlr	#3, r10, r14
 469                             	.LVL60:
 470 00c0 64 1E                   		and	#1, r14
 471 00c2 5B 55                   		movu.B	r5, r5
 472 00c4 20 0D                   		beq	.L48
 667:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             {
 668:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                 
 669:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                 _result->data=*((uint16_t*)pOutputData + range_index - 1);
 473                             		.loc 1 669 0
 474 00c6 60 15                   		sub	#1, r5
 475                             	.LVL61:
 476 00c8 4B 55                   		add	r5, r5
 477                             	.LVL62:
 478 00ca 4B 54                   		add	r5, r4
 479                             	.LVL63:
 480 00cc D0 42                   		mov.W	[r4], [r2]
 481 00ce 38 8E 00                		bra	.L35
 482                             	.LVL64:
 483                             	.L48:
 670:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             }
 671:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             else
 672:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             {
 673:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                 _result->data=(uint16_t)*(pOutputData + range_index - 1);
 484                             		.loc 1 673 0
 485 00d1 4B 45                   		add	r4, r5
 486                             	.LVL65:
 487 00d3 60 15                   		sub	#1, r5
 488 00d5 58 57                   		movu.B	[r5], r7
 489                             	.LVL66:
 490 00d7 D3 27                   		mov.W	r7, [r2]
 491 00d9 38 80 00                		bra	.L58
 492                             	.LVL67:
 493                             	.L67:
 494 00dc 5B 55                   		movu.B	r5, r5
 674:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             }
 675:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         }
 676:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         else
 677:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         {
 678:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             if(_in->tab->S2&GI_WORD)
 495                             		.loc 1 678 0
 496 00de 7C 3A                   		btst #3, r10
 497 00e0 20 12                   		beq	.L49
 679:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             {/* Output dati a WORD con interpolazione */
 680:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	   		   
 681:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	currOutputVal = (uint16_t)(*((uint16_t*)pOutputData + range_index));
 498                             		.loc 1 681 0
 499 00e2 FF 2A 55                		add	r5, r5, r10
 500 00e5 4B 4A                   		add	r4, r10
 501 00e7 DC AA                   		mov.W	[r10], r10
 502                             	.LVL68:
 682:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	prevOutputVal = (uint16_t)(*((uint16_t*)pOutputData + range_index - 1));
 503                             		.loc 1 682 0
 504 00e9 60 15                   		sub	#1, r5
 505                             	.LVL69:
 506 00eb 4B 55                   		add	r5, r5
 507                             	.LVL70:
 508 00ed 4B 54                   		add	r5, r4
 509                             	.LVL71:
 510 00ef DC 44                   		mov.W	[r4], r4
 511                             	.LVL72:
 512 00f1 09                      		bra	.L50
 513                             	.LVL73:
 514                             	.L49:
 683:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             }
 684:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             else
 685:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             {/* Output dati a BYTE con interpolazione */
 686:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             			  
 687:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	currOutputVal = (uint8_t)(*((uint8_t*)pOutputData + range_index));			  
 515                             		.loc 1 687 0
 516 00f2 4B 45                   		add	r4, r5
 517                             	.LVL74:
 518 00f4 58 5A                   		movu.B	[r5], r10
 519                             	.LVL75:
 688:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	prevOutputVal = (uint8_t)(*((uint8_t*)pOutputData + range_index-1));				
 520                             		.loc 1 688 0
 521 00f6 60 15                   		sub	#1, r5
 522 00f8 58 54                   		movu.B	[r5], r4
 523                             	.LVL76:
 524                             		.balign 2,3,1
 525                             	.L50:
 689:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             }	
 690:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 691:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             _result->data = (uint16_t)(((((int32_t)_in->cfr_val - (int32_t)prevInputVal) * (int32_t
 526                             		.loc 1 691 0
 527 00fa 5F 77                   		movu.W	r7, r7
 528                             	.LVL77:
 529 00fc 5F B3                   		movu.W	r11, r3
 530                             	.LVL78:
 531 00fe 43 73                   		sub	r7, r3
 532 0100 5F AA                   		movu.W	r10, r10
 533 0102 5F 4B                   		movu.W	r4, r11
 534 0104 43 BA                   		sub	r11, r10
 535                             	.LVL79:
 536 0106 4F A3                   		mul	r10, r3
 537 0108 5F FF                   		movu.W	r15, r15
 538 010a FF 07 7F                		sub	r7, r15, r7
 539                             	.LVL80:
 540 010d FC 23 73                		div	r7, r3
 541 0110 4B 34                   		add	r3, r4
 542                             	.LVL81:
 543 0112 D3 24                   		mov.W	r4, [r2]
 692:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             
 693:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             if((_in->tab->S2&GI_WORD)==0)
 544                             		.loc 1 693 0
 545 0114 58 E1                   		movu.B	[r14], r1
 546 0116 68 31                   		shlr	#3, r1
 547 0118 64 11                   		and	#1, r1
 548 011a 21 3F                   		bne	.L58
 694:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             {			  
 695:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                 _result->data=(uint8_t)_result->data;
 549                             		.loc 1 695 0
 550 011c 76 24 FF 00             		and #0xff, r4
 551 0120 D3 24                   		mov.W	r4, [r2]
 552 0122 2E 3A                   		bra	.L35
 553                             	.LVL82:
 554                             	.L57:
 696:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             }
 697:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         }
 698:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         return S_OK;
 699:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     }
 700:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     
 701:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     if(_result->b.lbound)
 702:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     {        
 703:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         if(_in->tab->S2&GI_WORD)
 555                             		.loc 1 703 0
 556 0124 58 E7                   		movu.B	[r14], r7
 557 0126 7C 37                   		btst #3, r7
 558 0128 15                      		beq	.L51
 704:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         {
 705:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             
 706:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             _result->oBoundVal=*((uint16_t*)pOutputData);
 559                             		.loc 1 706 0
 560 0129 D4 42 01                		mov.W	[r4], 2[r2]
 561 012c 0E                      		bra	.L52
 562                             	.L51:
 707:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         }
 708:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         else
 709:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         {
 710:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             _result->oBoundVal=(uint16_t)*(pOutputData);
 563                             		.loc 1 710 0
 564 012d 58 47                   		movu.B	[r4], r7
 565 012f 90 2F                   		mov.W	r7, 2[r2]
 566 0131 03                      		.balign 2,3,5
 567                             	.L52:
 711:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         }
 712:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     }
 713:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     
 714:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     if(_result->b.ubound)
 568                             		.loc 1 714 0
 569 0132 89 27                   		mov.B	4[r2], r7
 570 0134 FD 74 C7 01             		tst	#1, r7
 571 0138 20 1E                   		beq	.L70
 715:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     {        
 716:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         if(_in->tab->S2&GI_WORD)
 572                             		.loc 1 716 0
 573 013a 58 EA                   		movu.B	[r14], r10
 574 013c 59 E7 01                		movu.B	1[r14], r7
 575 013f 7C 3A                   		btst #3, r10
 576 0141 20 0C                   		beq	.L54
 717:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         {
 718:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             
 719:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             _result->oBoundVal=*((uint16_t*)pOutputData+_in->tab->pointNumber-1);
 577                             		.loc 1 719 0
 578 0143 60 17                   		sub	#1, r7
 579 0145 4B 77                   		add	r7, r7
 580 0147 4B 74                   		add	r7, r4
 581                             	.LVL83:
 582 0149 D4 42 01                		mov.W	[r4], 2[r2]
 583 014c 0A                      		bra	.L70
 584                             	.LVL84:
 585                             	.L54:
 720:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         }
 721:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         else
 722:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         {
 723:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             _result->oBoundVal=(uint16_t)*(pOutputData+_in->tab->pointNumber-1);
 586                             		.loc 1 723 0
 587 014d 4B 47                   		add	r4, r7
 588 014f 60 17                   		sub	#1, r7
 589 0151 58 77                   		movu.B	[r7], r7
 590 0153 90 2F                   		mov.W	r7, 2[r2]
 591                             	.LVL85:
 592 0155 03                      		.balign 2,3,1
 593                             	.L70:
 724:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         }
 725:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     }
 726:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 727:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	return S_FALSE;
 594                             		.loc 1 727 0
 595 0156 66 11                   		mov	#1, r1
 596                             	.LVL86:
 597 0158 0C                      		bra	.L35
 598                             	.LVL87:
 599                             	.L58:
 698:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         return S_OK;
 600                             		.loc 1 698 0
 601 0159 66 01                   		mov	#0, r1
 602                             	.LVL88:
 603 015b 03                      		.balign 2,3,1
 604                             	.L35:
 605 015c 5B 11                   		movu.B	r1, r1
 606 015e 2E 1B                   		bra	.L66
 607                             	.LVL89:
 608                             	.L45:
 664:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         if(!_in->tab->Int)
 609                             		.loc 1 664 0
 610                             	.LVL90:
 611 0160 CC E1                   		mov.B [r14], r1
 612 0162 75 21 20                		and #32, r1
 613 0165 58 EA                   		movu.B	[r14], r10
 614                             	.LVL91:
 615 0167 61 01                   		cmp	#0, r1
 616 0169 3A 54 FF                		beq	.L55
 617 016c 38 70 FF                		bra	.L67
 618                             	.LVL92:
 619                             	.L65:
 701:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     if(_result->b.lbound)
 620                             		.loc 1 701 0
 621 016f 89 2F                   		mov.B 5[r2], r7
 622 0171 76 27 80 00             		and #0x80, r7
 623 0175 21 AF                   		bne	.L57
 624 0177 2E BB                   		bra	.L52
 625                             	.LVL93:
 626                             	.L66:
 728:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 729:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }
 627                             		.loc 1 729 0
 628 0179 3F 7D 07                		rtsd	#28, r7-r13
 629                             	.LFE8:
 631                             		.section	.text.GetModifierValue,"ax",@progbits
 632                             		.global	_GetModifierValue
 634                             	_GetModifierValue:
 635                             	.LFB9:
 730:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 731:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**
 732:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Data una lista di modificatori restituisce variazione percentuale associata con segno.
 733:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  
 734:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \param [in] tableID indice della tabella dei modificatori
 735:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \param [out] pModifierValue  se S_OK restituisce il modificatore
 736:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 737:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \return uint8_t 
 738:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \retvalue   MOD_DONT_CARE modificatori non individuato o non attivo
 739:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			S_FALSE Indice tabella non valido (tabella variabili, tabella modificatori 1� lev)
 740:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			S_OK    modificatori attivo
 741:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  
 742:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \version		1.0.0
 743:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \date 			01/07/2008
 744:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \author  		Roberto Fioravanti
 745:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** */
 746:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** uint8_t GetModifierValue(uint8_t tabIndex, int8_t *pModifierValue)
 747:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {
 636                             		.loc 1 747 0
 637                             	.LVL94:
 638 0000 6E 6D                   		pushm	r6-r13
 639                             	.LCFI6:
 640 0002 71 00 DC                		add	#-36, r0
 641                             	.LCFI7:
 642 0005 EF 2B                   		mov.L	r2, r11
 643                             	.LVL95:
 748:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Loader_Struct ldVarTable, ldData;
 749:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** ModifierL1Table_t   *pL1Table;
 750:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** int16_t modifierVarValue=0, funcVal;
 751:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** uint8_t dataType, dataIndex;
 752:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 753:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** bool_t bModFound=FALSE,valid=TRUE;
 754:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** uint8_t sRet =S_FALSE;
 755:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** uint16_t *pEndL1Table;
 756:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 757:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 758:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     if(tabIndex==0xFF)
 644                             		.loc 1 758 0
 645 0007 5B 17                   		movu.B	r1, r7
 646 0009 75 57 FF                		cmp	#0xff, r7
 647 000c 1F                      		bne	.L72
 759:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     {
 760:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         
 761:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    *pModifierValue=0;
 648                             		.loc 1 761 0
 649 000d 3C 20 00                		mov.B	#0, [r2]
 650 0010 38 12 01                		bra	.L74
 651                             	.L72:
 762:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    return S_FALSE;
 763:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     }
 764:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     
 765:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     /* Caricamento puntatore alla tabella delle variabili che agiscono da modificatori */
 766:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if( BasicLoader(PTR_HW_CONFIG_DATA, DSPL_HWC_MODIFIERS_VAR_TABLE, &ldVarTable) != S_OK)
 652                             		.loc 1 766 0
 653 0013 66 A1                   		mov	#10, r1
 654                             	.LVL96:
 655 0015 66 62                   		mov	#6, r2
 656                             	.LVL97:
 657 0017 71 03 08                		add	#8, r0, r3
 658 001a 05 00 00 00             		bsr	_BasicLoader
 659                             	.LVL98:
 660 001e 76 21 FF 00             		and #0xff, r1
 661 0022 3B 00 01                		bne	.L74
 767:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
 768:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		return S_FALSE;
 769:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
 770:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 771:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 772:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if( BasicLoader(PTR_MICROPROG_MODIFIERS_DATA, tabIndex, &ldData) != S_OK)
 662                             		.loc 1 772 0
 663 0025 75 41 29                		mov	#41, r1
 664 0028 DF 72                   		mov.W	r7, r2
 665 002a EF 03                   		mov.L	r0, r3
 666 002c 05 00 00 00             		bsr	_BasicLoader
 667                             	.LVL99:
 668 0030 5B 11                   		movu.B	r1, r1
 669 0032 61 01                   		cmp	#0, r1
 670 0034 3B EE 00                		bne	.L74
 773:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
 774:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		
 775:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		return S_FALSE;
 776:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
 777:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 778:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 779:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     /* Puntatore ai parametri della tabella di livello 1 */
 780:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	/*lint -e826 */
 781:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	pL1Table = (ModifierL1Table_t *)ldData.Data;
 671                             		.loc 1 781 0
 672 0037 EC 07                   		mov.L	[r0], r7
 673                             	.LVL100:
 782:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     /*lint +e826 */
 783:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 784:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 785:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	pEndL1Table = (uint16_t*)ldData.Data + ldData.DataLenght;
 674                             		.loc 1 785 0
 675 0039 5D 09 02                		movu.W	4[r0], r9
 676 003c 4B 99                   		add	r9, r9
 677 003e 4B 79                   		add	r7, r9
 678                             	.LVL101:
 753:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** bool_t bModFound=FALSE,valid=TRUE;
 679                             		.loc 1 753 0
 680 0040 66 1A                   		mov.L	#1, r10
 750:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** int16_t modifierVarValue=0, funcVal;
 681                             		.loc 1 750 0
 682 0042 DF 1C                   		mov.W	r1, r12
 683                             	.LBB2:
 786:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 787:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     while ( (!bModFound) && ((uint16_t*)pL1Table < pEndL1Table) )
 788:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     {
 789:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         /* scorre la lista dei modificatori */
 790:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         
 791:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         	dataType=((Condition_SelDataStruct *)(ldVarTable.Data) + pL1Table->varPos)->dataType;
 792:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         	dataIndex=((Condition_SelDataStruct *)(ldVarTable.Data) + pL1Table->varPos)->dataIndex;
 793:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                 	
 794:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         	
 795:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             if(pL1Table->dataFormat == MOD_LEV1_DT_VALUE)
 796:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             {
 797:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                 /* il campo data è il dato */
 798:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                 switch(dataType)
 799:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	{
 800:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	    case JIF_TAB_FUNCTIONS_SEG:
 801:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	    
 802:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	        /* estrae il dato della funzione */
 803:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                 	    if (REG_getFunctionValueByPos(dataIndex, (uint16_t*)&funcVal) == S_OK)
 804:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             			{
 805:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             				if (funcVal != 0)
 806:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             				{		            					
 807:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             					*pModifierValue=(int8_t)pL1Table->data;
 808:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             					bModFound=TRUE;
 809:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             				}
 810:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             			}
 811:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	        break;
 812:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	        
 813:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	    default:
 814:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	        *pModifierValue=0;
 815:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	}
 816:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                 
 817:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                 
 818:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             }
 819:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             else
 820:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             {
 821:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                 
 822:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                 TabQueryIn_t        qin;                
 823:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                 TabQueryResult_t    qresult;
 824:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                 
 825:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                                               
 826:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	/* Caricamento della tabella di livello 2 dei modificatori */
 827:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	if(BasicLoader(PTR_MICROPROG_MODIFIERS_DATA, pL1Table->data, &ldData) != S_OK)
 828:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	{
 829:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 830:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             		return S_FALSE;
 831:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	}
 832:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	
 833:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	switch(dataType)
 834:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	{
 835:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	    case JIF_TAB_GI_TURBIDITY_SEG: 
 836:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	     
 837:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	        if( HWC_Flags.bit.turbsens )
 838:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	        {
 839:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	            
 840:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	            modifierVarValue=GITurbidity;
 841:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	            qin.opt.b.findexactvalue=1;
 842:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	            
 843:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	            valid=TRUE;
 844:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	            
 845:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	        }
 846:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	        else
 847:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	        {
 848:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	            valid=FALSE;
 849:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	        }
 850:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	        break;
 851:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	    case JIF_TAB_FUNCTIONS_SEG:
 852:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	        modifierVarValue=BufNewReg[dataIndex] - 1;
 853:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	        qin.opt.b.findexactvalue=1;
 854:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	        valid=TRUE;
 855:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	        break;
 856:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 					
 857:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 					default:
 858:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 						break;
 859:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	}
 860:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	
 861:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	/**/
 862:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	
 863:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	if(valid)
 864:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	{            	               	
 865:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                 	qin.cfr_val=modifierVarValue;
 684                             		.loc 1 865 0
 685 0044 71 08 15                		add	#21, r0, r8
 686 0047 38 D3 00                		bra	.L75
 687                             	.LVL102:
 688                             	.L86:
 689                             	.LBE2:
 791:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         	dataType=((Condition_SelDataStruct *)(ldVarTable.Data) + pL1Table->varPos)->dataType;
 690                             		.loc 1 791 0
 691 004a CC 7E                   		mov.B	[r7], r14
 692                             	.LVL103:
 693 004c EF ED                   		mov.L	r14, r13
 694 004e 75 2D 3F                		and #63, r13
 695 0051 4B DD                   		add	r13, r13
 696 0053 06 89 0D 02             		add	8[r0], r13
 697 0057 CD D6 01                		mov.B	1[r13], r6
 698 005a 75 26 3F                		and #63, r6
 699                             	.LVL104:
 792:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         	dataIndex=((Condition_SelDataStruct *)(ldVarTable.Data) + pL1Table->varPos)->dataIndex;
 700                             		.loc 1 792 0
 701 005d CC D1                   		mov.B	[r13], r1
 702 005f 75 21 3F                		and #63, r1
 703 0062 CF 14                   		mov.B	r1, r4
 704                             	.LVL105:
 795:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             if(pL1Table->dataFormat == MOD_LEV1_DT_VALUE)
 705                             		.loc 1 795 0
 706 0064 75 2E 80                		and #0xffffff80, r14
 707 0067 EF ED                   		mov.L	r14, r13
 708 0069 76 2D 80 00             		and	#0x80, r13
 709 006d 21 2A                   		bne	.L76
 798:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                 switch(dataType)
 710                             		.loc 1 798 0
 711 006f 5B 66                   		movu.B	r6, r6
 712 0071 61 86                   		cmp	#8, r6
 713 0073 21 20                   		bne	.L96
 803:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                 	    if (REG_getFunctionValueByPos(dataIndex, (uint16_t*)&funcVal) == S_OK)
 714                             		.loc 1 803 0
 715 0075 71 02 1E                		add	#30, r0, r2
 716 0078 05 00 00 00             		bsr	_REG_getFunctionValueByPos
 717                             	.LVL106:
 718 007c 76 21 FF 00             		and #0xff, r1
 719 0080 3B 91 00                		bne	.L89
 720                             	.LVL107:
 805:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             				if (funcVal != 0)
 721                             		.loc 1 805 0
 722 0083 DD 0E 0F                		mov.W	30[r0], r14
 723                             	.LVL108:
 724 0086 61 0E                   		cmp	#0, r14
 725                             	.LVL109:
 726 0088 3A 8C 00                		beq	.L79
 807:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             					*pModifierValue=(int8_t)pL1Table->data;
 727                             		.loc 1 807 0
 728 008b C1 7B 01                		mov.B	1[r7], [r11]
 729                             	.LVL110:
 730                             		.balign 2,3,1
 731                             	.L102:
 808:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             					bModFound=TRUE;
 732                             		.loc 1 808 0
 733 008e 66 1E                   		mov.L	#1, r14
 734                             	.LVL111:
 735 0090 38 84 00                		bra	.L79
 736                             	.LVL112:
 737                             	.L96:
 814:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	        *pModifierValue=0;
 738                             		.loc 1 814 0
 739 0093 C3 BE                   		mov.B	r14, [r11]
 740 0095 2E 7C                   		bra	.L89
 741                             	.L76:
 742                             	.LBB3:
 827:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	if(BasicLoader(PTR_MICROPROG_MODIFIERS_DATA, pL1Table->data, &ldData) != S_OK)
 743                             		.loc 1 827 0
 744 0097 B0 7A                   		movu.B	1[r7], r2
 745 0099 75 41 29                		mov	#41, r1
 746                             	.LVL113:
 747 009c EF 03                   		mov.L	r0, r3
 748 009e A2 04                   		mov.L	r4, 32[r0]
 749 00a0 05 00 00 00             		bsr	_BasicLoader
 750                             	.LVL114:
 751 00a4 5B 11                   		movu.B	r1, r1
 752 00a6 AA 04                   		mov.L	32[r0], r4
 753 00a8 61 01                   		cmp	#0, r1
 754 00aa 13                      		beq	.L80
 755 00ab 2E 77                   		bra	.L74
 756                             	.L80:
 833:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	switch(dataType)
 757                             		.loc 1 833 0
 758 00ad 5B 66                   		movu.B	r6, r6
 759 00af 61 46                   		cmp	#4, r6
 760 00b1 17                      		beq	.L82
 761 00b2 61 86                   		cmp	#8, r6
 762 00b4 21 31                   		bne	.L97
 763 00b6 2E 18                   		bra	.L83
 764                             	.L82:
 837:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	        if( HWC_Flags.bit.turbsens )
 765                             		.loc 1 837 0
 766 00b8 FB A2 00 00 00 00       		mov.L	#_HWC_Flags, r10
 767 00be DC AA                   		mov.W	[r10], r10
 768 00c0 64 1A                   		and	#1, r10
 769 00c2 20 4C                   		beq	.L103
 840:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	            modifierVarValue=GITurbidity;
 770                             		.loc 1 840 0
 771 00c4 FB A2 00 00 00 00       		mov.L	#_GITurbidity, r10
 772 00ca 58 AC                   		movu.B	[r10], r12
 773                             	.LVL115:
 774 00cc 2E 10                   		bra	.L101
 775                             	.LVL116:
 776                             	.L83:
 852:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	        modifierVarValue=BufNewReg[dataIndex] - 1;
 777                             		.loc 1 852 0
 778 00ce 5B 44                   		movu.B	r4, r4
 779 00d0 FB A2 00 00 00 00       		mov.L	#_BufNewReg, r10
 780 00d6 FE C4 AC                		movu.B	[r4,r10], r12
 781 00d9 60 1C                   		sub	#1, r12
 782 00db 03                      		.balign 2,3,5
 783                             	.L101:
 784                             	.LVL117:
 853:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	        qin.opt.b.findexactvalue=1;
 785                             		.loc 1 853 0
 786 00dc CD 0A 10                		mov.B	16[r0], r10
 787 00df 78 0A                   		bset	#0, r10
 788 00e1 C7 0A 10                		mov.B	r10, 16[r0]
 855:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	        break;
 789                             		.loc 1 855 0
 790 00e4 08                      		bra	.L88
 791                             	.LVL118:
 792                             	.L97:
 863:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	if(valid)
 793                             		.loc 1 863 0
 794 00e5 EF 1E                   		mov.L	r1, r14
 795 00e7 61 0A                   		cmp	#0, r10
 796 00e9 20 2B                   		beq	.L79
 797                             	.LVL119:
 798 00eb 03                      		.balign 2,3,1
 799                             	.L88:
 800                             		.loc 1 865 0
 801 00ec D3 8C                   		mov.W	r12, [r8]
 866:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                     
 867:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                     qin.tab=(TabHeader_t *)ldData.Data;
 802                             		.loc 1 867 0
 803 00ee 71 0A 11                		add	#17, r0, r10
 804 00f1 E0 0A                   		mov.L	[r0], [r10]
 868:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                     
 869:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                 	if(S_OK == TabQuery(&qin, &qresult))
 805                             		.loc 1 869 0
 806 00f3 71 01 10                		add	#16, r0, r1
 807 00f6 75 42 17                		mov.L	#23, r2
 808 00f9 4B 02                   		add	r0, r2
 809 00fb 05 00 00 00             		bsr	_TabQuery
 810                             	.LVL120:
 811 00ff 76 21 FF 00             		and #0xff, r1
 812 0103 18                      		bne	.L93
 870:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                 	{
 871:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                 	    *pModifierValue=qresult.data;
 813                             		.loc 1 871 0
 814 0104 C1 0B 18                		mov.B	24[r0], [r11]
 815                             	.LVL121:
 816 0107 66 1A                   		mov.L	#1, r10
 817 0109 2E 85                   		bra	.L102
 818                             	.LVL122:
 819                             	.L93:
 869:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                 	if(S_OK == TabQuery(&qin, &qresult))
 820                             		.loc 1 869 0
 821 010b 66 1A                   		mov.L	#1, r10
 822                             	.LVL123:
 823 010d 03                      		.balign 2,3,1
 824                             	.L103:
 825 010e 66 0E                   		mov.L	#0, r14
 826                             	.LVL124:
 827 0110 0C                      		bra	.L79
 828                             	.LVL125:
 829                             	.L89:
 830                             	.LBE3:
 803:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                 	    if (REG_getFunctionValueByPos(dataIndex, (uint16_t*)&funcVal) == S_OK)
 831                             		.loc 1 803 0
 832 0111 EF DE                   		mov.L	r13, r14
 833                             	.LVL126:
 834 0113 03                      		.balign 2,3,1
 835                             	.L79:
 872:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                 	    bModFound=TRUE;
 873:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****                 	}
 874:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	}
 875:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	
 876:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             	
 877:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             }
 878:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     
 879:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         
 880:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         pL1Table++;
 836                             		.loc 1 880 0
 837 0114 62 27                   		add	#2, r7
 838                             	.LVL127:
 787:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     while ( (!bModFound) && ((uint16_t*)pL1Table < pEndL1Table) )
 839                             		.loc 1 787 0
 840 0116 61 0E                   		cmp	#0, r14
 841 0118 21 0D                   		bne	.L94
 842                             	.LVL128:
 843                             		.balign 2,3,1
 844                             	.L75:
 787:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     while ( (!bModFound) && ((uint16_t*)pL1Table < pEndL1Table) )
 845                             		.loc 1 787 0 is_stmt 0 discriminator 2
 846 011a 47 97                   		cmp	r9, r7
 847 011c 22 05 38 2C FF          		bltu	.L86
 848 0121 0A                      		bra	.L98
 849                             	.LVL129:
 850                             	.L74:
 768:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		return S_FALSE;
 851                             		.loc 1 768 0 is_stmt 1
 852 0122 66 11                   		mov	#1, r1
 853 0124 0C                      		bra	.L73
 854                             	.LVL130:
 855                             	.L94:
 881:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     }
 882:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 883:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 884:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if(bModFound)
 885:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{	    
 886:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    sRet=S_OK;
 856                             		.loc 1 886 0
 857 0125 66 01                   		mov	#0, r1
 858                             	.LVL131:
 859 0127 03                      		.balign 2,3,1
 860                             	.L73:
 861 0128 5B 11                   		movu.B	r1, r1
 862 012a 09                      		bra	.L99
 863                             	.LVL132:
 864                             	.L98:
 887:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
 888:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	else
 889:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
 890:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    sRet=MOD_DONT_CARE;
 891:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    *pModifierValue=0;
 865                             		.loc 1 891 0
 866 012b F8 B4 00                		mov.B	#0, [r11]
 890:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    sRet=MOD_DONT_CARE;
 867                             		.loc 1 890 0
 868 012e 75 41 7F                		mov	#0x7f, r1
 869 0131 2E F7                   		bra	.L73
 870                             	.LVL133:
 871                             	.L99:
 892:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
 893:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
 894:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     return sRet;
 895:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }
 872                             		.loc 1 895 0
 873 0133 3F 6D 11                		rtsd	#68, r6-r13
 874                             	.LFE9:
 876                             		.section	.text.TurbidityCalibrationCmd,"ax",@progbits
 877                             		.global	_TurbidityCalibrationCmd
 879                             	_TurbidityCalibrationCmd:
 880                             	.LFB10:
 896:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**/
 897:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 898:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**
 899:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     Comando di calibrazione per il sensore di torbidità
 900:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     se non è in corso una operazione analoga.
 901:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     
 902:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     Forza lo stato del gestore della calibrazione a TURBSENS_CALIBR_REQUEST_STATE
 903:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     
 904:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 905:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \version		1.0.0
 906:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \date 			05/05/2008
 907:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \author  		Roberto Fioravanti
 908:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** */
 909:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** void TurbidityCalibrationCmd(void)
 910:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {
 881                             		.loc 1 910 0
 911:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     if((TurbiditySensorCal.state != TURBSENS_CALIBR_REQUEST_STATE) &&
 882                             		.loc 1 911 0
 883 0000 FB E2 00 00 00 00       		mov.L	#_TurbiditySensorCal, r14
 884 0006 CD E4 05                		mov.B	5[r14], r4
 885 0009 60 14                   		sub	#1, r4
 886 000b 5B 44                   		movu.B	r4, r4
 887 000d 61 14                   		cmp	#1, r4
 888 000f 25 06                   		bleu	.L104
 912:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     (TurbiditySensorCal.state != TURBSENS_WAIT_4_CALIBR_VAL_STATE))
 913:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     {
 914:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         TurbiditySensorCal.state = TURBSENS_CALIBR_REQUEST_STATE;
 889                             		.loc 1 914 0
 890 0011 F9 E4 05 01             		mov.B	#1, 5[r14]
 891                             	.L104:
 892 0015 02                      		rts
 893                             	.LFE10:
 895                             		.section	.text.TurbidityPwmValManager,"ax",@progbits
 896                             		.global	_TurbidityPwmValManager
 898                             	_TurbidityPwmValManager:
 899                             	.LFB11:
 915:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     }
 916:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }
 917:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**/
 918:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 919:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 920:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 921:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**
 922:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     Gestione del valore pwm per la calibrazione del sensore di torbidità
 923:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     Tramite una password, è possibile utilizzare un valore custom di pwm 
 924:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     per la lettura del sensore.
 925:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     
 926:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 927:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \version		1.0.0
 928:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \date 			05/05/2008
 929:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \author  		Roberto Fioravanti
 930:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** */
 931:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** void TurbidityPwmValManager(void)
 932:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {
 900                             		.loc 1 932 0
 933:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	switch(TurbiditySensor.state)
 901                             		.loc 1 933 0
 902 0000 FB E2 00 00 00 00       		mov.L	#_TurbiditySensor, r14
 903 0006 59 E4 07                		movu.B	7[r14], r4
 904 0009 61 44                   		cmp	#4, r4
 905 000b 25 05 38 B7 00          		bgtu	.L106
 906 0010 FB 32 00 00 00 00       		mov.L	#.L113, r3
 907 0016 FE 64 34                		mov.L	[r4,r3], r4
 908                             		
 909 0019 7F 04                   	1:jmp	r4
 910                             		.section	.rodata.TurbidityPwmValManager,"a",@progbits
 911                             		.balign 4
 912                             		.balign 4
 913                             	.L113:
 914 0000 00 00 00 1B             		.long .L108
 915 0004 00 00 00 7E             		.long .L109
 916 0008 00 00 00 56             		.long .L110
 917 000c 00 00 00 85             		.long .L111
 918 0010 00 00 00 90             		.long .L112
 919                             		.section	.text.TurbidityPwmValManager
 920                             	.L108:
 934:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
 935:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		case TURBIDITY_PWM_DEFAULT_STATE:	
 936:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		if(TurbiditySensor.pwd == TURBIDITY_CONTINUOUS_READ_PWD)
 921                             		.loc 1 936 0
 922 001b FB 42 00 00 00 00       		mov.L	#_TurbiditySensor, r4
 923 0021 CD EE 06                		mov.B	6[r14], r14
 924 0024 5B E3                   		movu.B	r14, r3
 925 0026 61 23                   		cmp	#2, r3
 926 0028 1D                      		bne	.L114
 937:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		{
 938:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			TurbiditySensor.state=TURBIDITY_CONTINUOUS_READ_INIT_CUSTOM_STATE;
 927                             		.loc 1 938 0
 928 0029 3C 47 03                		mov.B	#3, 7[r4]
 929 002c 02                      		rts
 930                             	.L114:
 939:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		}
 940:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		else if(TurbiditySensor.pwd == USE_TURBIDITY_PWM_CUSTOM_VAL_PWD)
 931                             		.loc 1 940 0
 932 002d 61 13                   		cmp	#1, r3
 933 002f 1D                      		bne	.L115
 941:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		{
 942:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			TurbiditySensor.state=TURBIDITY_PWM_INIT_CUSTOM_STATE;
 934                             		.loc 1 942 0
 935 0030 C7 4E 07                		mov.B	r14, 7[r4]
 936 0033 02                      		rts
 937                             	.L115:
 943:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		}
 944:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		else
 945:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		{
 946:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		    if(TurbiditySensor.pwmval!=TurbiditySensorCal.val) 
 938                             		.loc 1 946 0
 939 0034 FB E2 00 00 00 00       		mov.L	#_TurbiditySensorCal, r14
 940 003a DC EE                   		mov.W	[r14], r14
 941 003c B8 C2                   		movu.W	4[r4], r2
 942 003e 5F E3                   		movu.W	r14, r3
 943 0040 47 32                   		cmp	r3, r2
 944 0042 10                      		beq	.L116
 947:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		    {
 948:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		    	/*valore pwm in tick è cambiato
 949:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 					pwm (per mille) update ( da tick a per mille), lo fa già il modulo.*/
 950:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		        TurbiditySensor.pwm = (uint32_t)TurbiditySensorCal.val;
 945                             		.loc 1 950 0
 946 0043 D7 4E 01                		mov.W	r14, 2[r4]
 951:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		        /*pwm tick update*/
 952:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     	            TurbiditySensor.pwmval=TurbiditySensorCal.val;
 947                             		.loc 1 952 0
 948 0046 D7 4E 02                		mov.W	r14, 4[r4]
 949 0049 03                      		.balign 2,3,1
 950                             	.L116:
 953:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		    }
 954:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     	        HIO_trbReadDisable(TURBSENS_READ_cstm_PWM);
 951                             		.loc 1 954 0
 952 004a 66 41                   		mov	#4, r1
 953 004c 05 00 00 00             		bsr	_HIO_trbReadDisable
 954                             	.LVL134:
 955:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     	        HIO_trbReadDisable(TURBSENS_READ_cstm_CONTINUOUS);
 955                             		.loc 1 955 0
 956 0050 66 51                   		mov	#5, r1
 957 0052 04 00 00 00             		bra	_HIO_trbReadDisable
 958                             	.LVL135:
 959                             	.L110:
 956:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     	    }
 957:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		
 958:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		break;		
 959:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		
 960:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		case TURBIDITY_PWM_CUSTOM_STATE:
 961:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			if( (TurbiditySensor.pwd != USE_TURBIDITY_PWM_CUSTOM_VAL_PWD) )
 960                             		.loc 1 961 0
 961 0056 FB 42 00 00 00 00       		mov.L	#_TurbiditySensor, r4
 962 005c 59 EE 06                		movu.B	6[r14], r14
 963 005f 61 1E                   		cmp	#1, r14
 964 0061 15                      		beq	.L117
 962:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			{
 963:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				TurbiditySensor.state=TURBIDITY_PWM_DEFAULT_STATE;
 965                             		.loc 1 963 0
 966 0062 3C 47 00                		mov.B	#0, 7[r4]
 967 0065 02                      		rts
 968                             	.L117:
 964:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			}
 965:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			else if(TurbiditySensor.pwm!=TurbiditySensor.cstm_pwmval)
 969                             		.loc 1 965 0
 970 0066 DC 4E                   		mov.W	[r4], r14
 971 0068 B8 4A                   		movu.W	2[r4], r2
 972 006a 5F E3                   		movu.W	r14, r3
 973 006c 47 32                   		cmp	r3, r2
 974 006e 20 56                   		beq	.L106
 966:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			{
 967:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			    /* valore pwm in per mille è cambiato*/
 968:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				/*TurbiditySensor.pwmval=TurbiditySensor.cstm_pwmval; original*/
 969:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				
 970:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				 /*pwm (per mille) update*/
 971:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		    TurbiditySensor.pwm=TurbiditySensor.cstm_pwmval;
 975                             		.loc 1 971 0
 976 0070 D7 4E 01                		mov.W	r14, 2[r4]
 972:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		         /*pwm tick update  (da per mille a tick):le conversioni le fa il modulo;*/
 973:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		    TurbiditySensor.pwmval=(uint32_t)(TurbiditySensor.cstm_pwmval);
 977                             		.loc 1 973 0
 978 0073 D7 4E 02                		mov.W	r14, 4[r4]
 974:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     	            
 975:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				TurbiditySensorCal.flags.bit.cmdAcquireDone=0;
 979                             		.loc 1 975 0
 980 0076 FB E2 00 00 00 00       		mov.L	#_TurbiditySensorCal, r14
 981 007c 2E 40                   		bra	.L125
 982                             	.L109:
 976:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			}
 977:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		break;
 978:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		
 979:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		case TURBIDITY_PWM_INIT_CUSTOM_STATE:
 980:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			
 981:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         	TurbiditySensor.state=TURBIDITY_PWM_CUSTOM_STATE;
 983                             		.loc 1 981 0
 984 007e F9 E4 07 02             		mov.B	#2, 7[r14]
 982:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         	HIO_trbReadEnable(TURBSENS_READ_cstm_PWM);
 985                             		.loc 1 982 0
 986 0082 66 41                   		mov	#4, r1
 987 0084 08                      		bra	.L124
 988                             	.L111:
 983:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		break;
 984:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 985:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
 986:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		
 987:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    case TURBIDITY_CONTINUOUS_READ_INIT_CUSTOM_STATE:
 988:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	        TurbiditySensor.state=TURBIDITY_CONTINUOUS_READ_CUSTOM_STATE;
 989                             		.loc 1 988 0
 990 0085 F9 E4 07 04             		mov.B	#4, 7[r14]
 989:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         	HIO_trbReadEnable(TURBSENS_READ_cstm_CONTINUOUS);
 991                             		.loc 1 989 0
 992 0089 66 51                   		mov	#5, r1
 993 008b 03                      		.balign 2,3,3
 994                             	.L124:
 995 008c 04 00 00 00             		bra	_HIO_trbReadEnable
 996                             	.LVL136:
 997                             	.L112:
 990:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    break;
 991:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	        
 992:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	     
 993:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    case TURBIDITY_CONTINUOUS_READ_CUSTOM_STATE:
 994:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	        if( (TurbiditySensor.pwd != TURBIDITY_CONTINUOUS_READ_PWD) )
 998                             		.loc 1 994 0
 999 0090 59 EE 06                		movu.B	6[r14], r14
 1000 0093 61 2E                   		cmp	#2, r14
 1001 0095 20 0D                   		beq	.L119
 995:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			{
 996:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				TurbiditySensor.state=TURBIDITY_PWM_DEFAULT_STATE;
 1002                             		.loc 1 996 0
 1003 0097 FB E2 00 00 00 00       		mov.L	#_TurbiditySensor, r14
 1004 009d F9 E4 07 00             		mov.B	#0, 7[r14]
 1005 00a1 03                      		.balign 2,3,5
 1006                             	.L119:
 997:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			}
 998:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			
 999:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			if(TurbiditySensor.pwmval!=TurbiditySensorCal.val) 
 1007                             		.loc 1 999 0
 1008 00a2 FB E2 00 00 00 00       		mov.L	#_TurbiditySensorCal, r14
 1009 00a8 DC E3                   		mov.W	[r14], r3
 1010 00aa FB 42 00 00 00 00       		mov.L	#_TurbiditySensor, r4
 1011 00b0 B8 C1                   		movu.W	4[r4], r1
 1012 00b2 5F 32                   		movu.W	r3, r2
 1013 00b4 47 21                   		cmp	r2, r1
 1014 00b6 20 0E                   		beq	.L106
1000:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			{
1001:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			     /*pwm di calibrazione (tick) cambiato, quindi forzare un nuovo comando di acquisizione*/
1002:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		         /*pwm (per mille) update ( da tick a per mille), lo fa il modulo la conversione*/
1003:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		        TurbiditySensor.pwm=(uint32_t)TurbiditySensorCal.val;
 1015                             		.loc 1 1003 0
 1016 00b8 90 4B                   		mov.W	r3, 2[r4]
1004:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		         /*pwm tick update*/
1005:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			    TurbiditySensor.pwmval=TurbiditySensorCal.val;
 1017                             		.loc 1 1005 0
 1018 00ba 90 C3                   		mov.W	r3, 4[r4]
 1019                             		.balign 2,3,5
 1020                             	.L125:
1006:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     	            			    
1007:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			    TurbiditySensorCal.flags.bit.cmdAcquireDone=0;
 1021                             		.loc 1 1007 0
 1022 00bc CD E4 06                		mov.B	6[r14], r4
 1023 00bf 7A 04                   		bclr	#0, r4
 1024 00c1 C7 E4 06                		mov.B	r4, 6[r14]
 1025                             	.L106:
 1026 00c4 02                      		rts
 1027                             	.LFE11:
 1029 00c5 03                      		.section	.text.TurbidityCalibrationManager,"ax",@progbits
 1030                             		.global	_TurbidityCalibrationManager
 1032                             	_TurbidityCalibrationManager:
 1033                             	.LFB12:
1008:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			}
1009:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    
1010:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    break;
1011:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
1012:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }
1013:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**/
1014:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1015:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**
1016:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     Gestione della calibrazione del sensore di torbidità (anche in PROGRAMMING_MODE).
1017:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     
1018:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     Implementa la macchina a stati della calibrazione del sensore di torbidità.
1019:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     Lo stato iniziale (dopo il reset) è TURBSENS_INVALID_CALIBR_VALUE_STATE (valore di calibrazion
1020:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     
1021:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     Dopo una calibrazione terminata con successo o in caso di valore valido lo stato si porta in 
1022:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     TURBSENS_VALID_CALIBR_VALUE_STATE.
1023:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     
1024:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     E' possibile forzare una calibrazione chiamando TurbidityCalibrationCmd.
1025:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     
1026:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     
1027:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1028:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \version		1.0.0
1029:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \date 			05/05/2008
1030:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \author  		Roberto Fioravanti
1031:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** */
1032:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1033:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** uint16_t turbidityCal;
1034:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1035:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** void TurbidityCalibrationManager(void)
1036:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {
 1034                             		.loc 1 1036 0
 1035 0000 7E A7                   		push.l	r7
 1036                             	.LCFI8:
1037:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
1038:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	switch(TurbiditySensorCal.state)
 1037                             		.loc 1 1038 0
 1038 0002 FB 72 00 00 00 00       		mov.L	#_TurbiditySensorCal, r7
 1039 0008 59 7E 05                		movu.B	5[r7], r14
 1040 000b 61 2E                   		cmp	#2, r14
 1041 000d 20 1F                   		beq	.L129
 1042 000f 61 3E                   		cmp	#3, r14
 1043 0011 20 4F                   		beq	.L130
 1044 0013 61 1E                   		cmp	#1, r14
 1045 0015 3B AA 00                		bne	.L126
 1046                             	.LBB4:
1039:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
1040:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /*
1041:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     case TURBSENS_INVALID_CALIBR_VALUE_STATE:
1042:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****       // se il valore di calibrazione non � valido rimane in questo stato 
1043:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     if(TurbiditySensorCal.val)
1044:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     {
1045:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         TurbiditySensorCal.state=TURBSENS_VALID_CALIBR_VALUE_STATE;
1046:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     }
1047:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****       
1048:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****       break;
1049:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** */
1050:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     	case TURBSENS_VALID_CALIBR_VALUE_STATE:
1051:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		/*idle state*/
1052:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		break;
1053:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             
1054:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     	case TURBSENS_CALIBR_REQUEST_STATE:
1055:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     	{
1056:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		uint16_t turbidityCmd;
1057:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1058:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		turbidityCmd = TURBIDITY_CAL_ADVAL;
 1047                             		.loc 1 1058 0
 1048 0018 FB E2 00 00 00 00       		mov.L	#_Tab_HWCTurbidity, r14
 1049 001e EC EE                   		mov.L	[r14], r14
1059:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		PM_TurbiditySensor_StartCalib(turbidityCmd);
 1050                             		.loc 1 1059 0
 1051 0020 DC E1                   		mov.W	[r14], r1
 1052 0022 05 00 00 00             		bsr	_PM_TurbiditySensor_StartCalib
1060:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1061:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         
1062:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		TurbiditySensorCal.state=TURBSENS_WAIT_4_CALIBR_VAL_STATE;
 1053                             		.loc 1 1062 0
 1054 0026 3C 75 02                		mov.B	#2, 5[r7]
 1055                             	.LBE4:
1063:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     	}
1064:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		break;
 1056                             		.loc 1 1064 0
 1057 0029 38 96 00                		bra	.L126
 1058                             	.L129:
1065:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****       
1066:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     	case TURBSENS_WAIT_4_CALIBR_VAL_STATE:
1067:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     	{
1068:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1069:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		/*legge il risultato*/
1070:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		/*turbidityCal=TurbidityGetCalibration();*/
1071:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****             
1072:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		if(PM_TurbiditySensor_GetCalibration(&turbidityCal)  != 0)
 1059                             		.loc 1 1072 0
 1060 002c FB 12 00 00 00 00       		mov.L	#_turbidityCal, r1
 1061 0032 05 00 00 00             		bsr	_PM_TurbiditySensor_GetCalibration
 1062 0036 76 21 FF 00             		and #0xff, r1
 1063 003a 3A 85 00                		beq	.L126
1073:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		{
1074:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****           
1075:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			/*TurbiditySensorCal.val=turbidityCal.pulseWidthCal;*/
1076:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			/*INSERIRE TEST IN CASO DI SATURAZIONE (VALORE NON VALIDO!!!!)*/
1077:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****           
1078:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			TurbiditySensorCal.flags.bit.cmdAcquireDone=0;
 1064                             		.loc 1 1078 0
 1065 003d CD 7E 06                		mov.B	6[r7], r14
 1066 0040 7A 0E                   		bclr	#0, r14
 1067 0042 C7 7E 06                		mov.B	r14, 6[r7]
1079:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			TurbiditySensorCal.state=TURBSENS_CALIBR_VALIDATE_STATE;
 1068                             		.loc 1 1079 0
 1069 0045 3C 75 03                		mov.B	#3, 5[r7]
1080:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			TurbiditySensorCal.pwd=RESET_TURBIDITY_CALIBRATION_PWD;
 1070                             		.loc 1 1080 0
 1071 0048 3C 74 00                		mov.B	#0, 4[r7]
1081:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			TurbiditySensorCal.idRead= TurbidityReads.id;
 1072                             		.loc 1 1081 0
 1073 004b FB E2 00 00 00 00       		mov.L	#_TurbidityReads, r14
 1074 0051 C5 E7 08 07             		mov.B	8[r14], 7[r7]
1082:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			HIO_trbReadEnable(TURBSENS_READ_calib_FLB);
 1075                             		.loc 1 1082 0
 1076 0055 66 61                   		mov	#6, r1
 1077 0057 05 00 00 00             		bsr	_HIO_trbReadEnable
1083:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		  		  
1084:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			TurbiditySensorCal.adH2oRef=0;
 1078                             		.loc 1 1084 0
 1079 005b 3D 71 00                		mov.W	#0, 2[r7]
 1080 005e 2E 61                   		bra	.L126
 1081                             	.L130:
1085:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		}
1086:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1087:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****         
1088:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     	}
1089:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		break;
1090:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****       
1091:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     	case TURBSENS_CALIBR_VALIDATE_STATE:
1092:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     
1093:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		if((GIValid&GI_TURB_SENSOR_MSK) && (TurbiditySensorCal.idRead!= TurbidityReads.id))
 1082                             		.loc 1 1093 0
 1083 0060 FB E2 00 00 00 00       		mov.L	#_GIValid, r14
 1084 0066 DC EE                   		mov.W	[r14], r14
 1085 0068 76 2E 00 02             		and #0x200, r14
 1086 006c 5F EE                   		movu.W	r14, r14
 1087 006e 61 0E                   		cmp	#0, r14
 1088 0070 20 4F                   		beq	.L126
 1089                             		.loc 1 1093 0 is_stmt 0 discriminator 1
 1090 0072 FB E2 00 00 00 00       		mov.L	#_TurbidityReads, r14
 1091 0078 B1 FB                   		movu.B	7[r7], r3
 1092 007a 45 E3 08                		cmp	8[r14].UB, r3
 1093 007d 20 42                   		beq	.L126
1094:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		{
1095:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			if((TurbidityReads.ADvalue<TURBIDITY_H2O_MIN_ADVAL))
 1094                             		.loc 1 1095 0 is_stmt 1
 1095 007f DD E4 02                		mov.W	4[r14], r4
 1096 0082 FB E2 00 00 00 00       		mov.L	#_Tab_HWCTurbidity, r14
 1097 0088 EC EE                   		mov.L	[r14], r14
 1098 008a 5F 43                   		movu.W	r4, r3
 1099 008c 06 C5 E3 01             		cmp	2[r14].UW, r3
 1100 0090 22 03                   		bgeu	.L133
 1101 0092 08                      		bra	.L140
 1102                             	.L133:
1096:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			{
1097:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     				TurbiditySensorCal.val=TURBIDITY_PWM_MIN;
1098:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     				TurbiditySensorCal.adH2oRef=TURBIDITY_H2O_DEFAULT_ADVAL;
1099:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			}
1100:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			else if((TurbidityReads.ADvalue>TURBIDITY_H2O_MAX_ADVAL))
 1103                             		.loc 1 1100 0
 1104 0093 06 C5 E3 02             		cmp	4[r14].UW, r3
 1105 0097 25 0B                   		bleu	.L135
 1106 0099 03                      		.balign 2,3,1
 1107                             	.L140:
1101:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			{
1102:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     				TurbiditySensorCal.val=TURBIDITY_PWM_MIN;
 1108                             		.loc 1 1102 0
 1109 009a D1 E7 05                		mov.W	10[r14], [r7]
1103:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     				TurbiditySensorCal.adH2oRef=TURBIDITY_H2O_DEFAULT_ADVAL;
 1110                             		.loc 1 1103 0
 1111 009d D5 E7 06 01             		mov.W	12[r14], 2[r7]
 1112 00a1 0B                      		bra	.L134
 1113                             	.L135:
1104:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			}
1105:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			else
1106:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			{
1107:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     				/* lettura in range*/
1108:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     				TurbiditySensorCal.adH2oRef=TurbidityReads.ADvalue;
 1114                             		.loc 1 1108 0
 1115 00a2 90 7C                   		mov.W	r4, 2[r7]
 1116                             		.balign 2,3,5
 1117                             	.L134:
1109:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     				/* la fase di validazione in aria può cambiare questo valore in uno di default*/
1110:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			}
1111:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1112:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			/*delta is 1% of adH2oRef*/
1113:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			TurbiditySensorCal.adH2oRefDelta=TurbiditySensorCal.adH2oRef/100;
 1118                             		.loc 1 1113 0
 1119 00a4 FB 72 00 00 00 00       		mov.L	#_TurbiditySensorCal, r7
 1120 00aa 5D 7E 01                		movu.W	2[r7], r14
 1121 00ad FD 74 9E 64             		divu	#0x64, r14
 1122 00b1 C7 7E 08                		mov.B	r14, 8[r7]
1114:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			TurbiditySensorCal.state=TURBSENS_VALID_CALIBR_VALUE_STATE;
 1123                             		.loc 1 1114 0
 1124 00b4 3C 75 00                		mov.B	#0, 5[r7]
1115:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			HIO_trbReadDisable(TURBSENS_READ_calib_FLB);
 1125                             		.loc 1 1115 0
 1126 00b7 66 61                   		mov	#6, r1
1116:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1117:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     		}
1118:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			break;
1119:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
1120:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }/*end TurbidityCalibrationManager*/
 1127                             		.loc 1 1120 0
 1128 00b9 7E B7                   		pop	r7
1115:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     			HIO_trbReadDisable(TURBSENS_READ_calib_FLB);
 1129                             		.loc 1 1115 0
 1130 00bb 04 00 00 00             		bra	_HIO_trbReadDisable
 1131                             	.L126:
 1132                             		.loc 1 1120 0
 1133 00bf 3F 77 01                		rtsd	#4, r7-r7
 1134                             	.LFE12:
 1136                             		.section	.text.StopMicroprogCounters,"ax",@progbits
 1137                             		.global	_StopMicroprogCounters
 1139                             	_StopMicroprogCounters:
 1140                             	.LFB13:
1121:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1122:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1123:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**
1124:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Disabilita i contatori utilizzati nei uPs : chiamata in PAUSE e al RESET FREDDO (Backup Data Analis
1125:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  
1126:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \return 		
1127:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1128:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \version		1.0.0
1129:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \date 			28/04/2008
1130:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \author  		Valeria Catani	
1131:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** */
1132:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1133:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** void StopMicroprogCounters(void)
1134:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {
 1141                             		.loc 1 1134 0
1135:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	/* stop uP counters */
1136:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_MAINTAIN_M_COUNTER);
 1142                             		.loc 1 1136 0
 1143 0000 66 41                   		mov	#4, r1
 1144 0002 05 00 00 00             		bsr	_SWTC_Stop
 1145                             	.LVL137:
1137:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_ALTCTRL_S_COUNTER);
 1146                             		.loc 1 1137 0
 1147 0006 66 A1                   		mov	#10, r1
 1148 0008 05 00 00 00             		bsr	_SWTC_Stop
 1149                             	.LVL138:
1138:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_DRAIN_M_COUNTER);	
 1150                             		.loc 1 1138 0
 1151 000c 66 71                   		mov	#7, r1
 1152 000e 05 00 00 00             		bsr	_SWTC_Stop
 1153                             	.LVL139:
1139:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_LOADCONTROL_M_COUNTER1);
 1154                             		.loc 1 1139 0
 1155 0012 66 51                   		mov	#5, r1
 1156 0014 05 00 00 00             		bsr	_SWTC_Stop
 1157                             	.LVL140:
1140:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_LOADCONTROL_M_COUNTER2);
 1158                             		.loc 1 1140 0
 1159 0018 66 61                   		mov	#6, r1
 1160 001a 05 00 00 00             		bsr	_SWTC_Stop
 1161                             	.LVL141:
1141:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1142:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_LOADRESTORE_S_COUNTER);
 1162                             		.loc 1 1142 0
 1163 001e 75 41 16                		mov	#22, r1
 1164 0021 05 00 00 00             		bsr	_SWTC_Stop
 1165                             	.LVL142:
1143:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_LOAD_TIMELOAD_S_COUNTER);
 1166                             		.loc 1 1143 0
 1167 0025 66 E1                   		mov	#14, r1
 1168 0027 05 00 00 00             		bsr	_SWTC_Stop
 1169                             	.LVL143:
1144:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_SETDRYPROFILE_M_COUNTER);
 1170                             		.loc 1 1144 0
 1171 002b 75 41 10                		mov	#16, r1
 1172 002e 05 00 00 00             		bsr	_SWTC_Stop
 1173                             	.LVL144:
1145:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_REGENERATE_EVDELAY_S_COUNTER);
 1174                             		.loc 1 1145 0
 1175 0032 75 41 17                		mov	#23, r1
 1176 0035 05 00 00 00             		bsr	_SWTC_Stop
 1177                             	.LVL145:
1146:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_SPARKLINGAID_M_COUNTER);
 1178                             		.loc 1 1146 0
 1179 0039 75 41 11                		mov	#17, r1
 1180 003c 05 00 00 00             		bsr	_SWTC_Stop
 1181                             	.LVL146:
1147:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_LOAD_LEVTOTIME_S_COUNTER);
 1182                             		.loc 1 1147 0
 1183 0040 66 C1                   		mov	#12, r1
 1184 0042 05 00 00 00             		bsr	_SWTC_Stop
 1185                             	.LVL147:
1148:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)SFT_RES_PRES_STABLE_S_COUNTER);
 1186                             		.loc 1 1148 0
 1187 0046 75 41 19                		mov	#25, r1
 1188 0049 05 00 00 00             		bsr	_SWTC_Stop
 1189                             	.LVL148:
1149:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER);
 1190                             		.loc 1 1149 0
 1191 004d 75 41 22                		mov	#34, r1
 1192 0050 05 00 00 00             		bsr	_SWTC_Stop
 1193                             	.LVL149:
1150:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
 1194                             		.loc 1 1150 0
 1195 0054 75 41 23                		mov	#35, r1
 1196 0057 05 00 00 00             		bsr	_SWTC_Stop
 1197                             	.LVL150:
1151:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER);
 1198                             		.loc 1 1151 0
 1199 005b 66 D1                   		mov	#13, r1
 1200 005d 05 00 00 00             		bsr	_SWTC_Stop
 1201                             	.LVL151:
1152:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)FLT_HEATTOUT_M_COUNTER);
 1202                             		.loc 1 1152 0
 1203 0061 75 41 26                		mov	#38, r1
 1204 0064 05 00 00 00             		bsr	_SWTC_Stop
 1205                             	.LVL152:
1153:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_LOADTIMEOUT_REST_M_COUNTER);
 1206                             		.loc 1 1153 0
 1207 0068 75 41 2A                		mov	#42, r1
 1208 006b 04 00 00 00             		bra	_SWTC_Stop
 1209                             	.LVL153:
 1210                             	.LFE13:
 1212                             		.section	.text.IncWordWithCheck,"ax",@progbits
 1213                             		.global	_IncWordWithCheck
 1215                             	_IncWordWithCheck:
 1216                             	.LFB14:
1154:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   
1155:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   /* &Delay: Delay deve proseguire anche in pausa */
1156:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   /* &OverflowFault_timer: il conteggio per fault overflow prosegue anche in pausa*/
1157:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   /* &ProbeFault_timer : il conteggio per fault probe prosegue anche in pausa */
1158:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   
1159:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   
1160:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   /*&DoorClosedEvent_Pause_timer: il conteggio prosegue anche in pausa */
1161:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  
1162:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   
1163:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }
1164:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1165:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**/
1166:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1167:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1168:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**
1169:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Incrementa il parametro se questo risulta inferiore a 0xFFFF, altrimenti lo lascia invariato.
1170:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1171:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \param [in] 	statisticWord è il parametro da incrementare
1172:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	 
1173:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \return     	none
1174:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1175:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \notes:			
1176:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1177:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \author			Marco Quintini
1178:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \date   		30/11/2006
1179:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \version    	1.0.0
1180:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1181:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** */
1182:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** void IncWordWithCheck(uint16_t *statisticWord)
1183:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {
 1217                             		.loc 1 1183 0
 1218                             	.LVL154:
1184:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if((*statisticWord) < 0xFFFF)
 1219                             		.loc 1 1184 0
 1220 0000 DC 1E                   		mov.W	[r1], r14
 1221 0002 5F E4                   		movu.W	r14, r4
 1222 0004 77 04 FF FF 00          		cmp	#0xffff, r4
 1223 0009 15                      		beq	.L142
1185:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
1186:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		(*statisticWord) ++;
 1224                             		.loc 1 1186 0
 1225 000a 62 1E                   		add	#1, r14
 1226 000c D3 1E                   		mov.W	r14, [r1]
 1227                             	.L142:
 1228 000e 02                      		rts
 1229                             	.LFE14:
 1231                             		.section	.text.UpdateStateBitmaps,"ax",@progbits
 1232                             		.global	_UpdateStateBitmaps
 1234                             	_UpdateStateBitmaps:
 1235                             	.LFB4:
 245:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {
 1236                             		.loc 1 245 0
 1237 0000 6E 7A                   		pushm	r7-r10
 1238                             	.LCFI9:
 251:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	ApplicationFlags = BUILD_BMP(ApplicationFlags, APPL_FLAGS_INIT_VAL, APPL_FLAGS_MASK);
 1239                             		.loc 1 251 0
 1240 0002 FB 72 00 00 00 00       		mov.L	#_ApplicationFlags, r7
 1241 0008 3C 70 08                		mov.B	#8, [r7]
 255:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if (HWC_Flags.bit.saltreed)
 1242                             		.loc 1 255 0
 1243 000b FB E2 00 00 00 00       		mov.L	#_HWC_Flags, r14
 1244 0011 DC EE                   		mov.W	[r14], r14
 1245 0013 64 2E                   		and #2, r14
 1246 0015 5F EE                   		movu.W	r14, r14
 1247 0017 61 0E                   		cmp	#0, r14
 1248 0019 20 63                   		beq	.L149
 258:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		if (TESTBIT(GIValid, (GI_FIRST_CRITERION_BIT + GI_SALT_IND) ) != 0)
 1249                             		.loc 1 258 0
 1250 001b FB E2 00 00 00 00       		mov.L	#_GIValid, r14
 1251 0021 DC EE                   		mov.W	[r14], r14
 1252 0023 64 8E                   		and #8, r14
 1253 0025 5F EE                   		movu.W	r14, r14
 1254 0027 61 0E                   		cmp	#0, r14
 1255 0029 20 53                   		beq	.L149
 260:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			nRegMax = OFFS_B(Tab_HWCRegenerateData.Data,2); /* Introdurre delle define, qui e in tutti i pun
 1256                             		.loc 1 260 0
 1257 002b FB E2 00 00 00 00       		mov.L	#_Tab_HWCRegenerateData, r14
 1258 0031 EC EE                   		mov.L	[r14], r14
 1259 0033 CD EE 02                		mov.B	2[r14], r14
 1260                             	.LVL155:
 262:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			if( (TESTBIT(GICriteria, GI_SALT_IND) == 0) && (uP_Regenerate_Data.nReg >= nRegMax ) )
 1261                             		.loc 1 262 0
 1262 0036 FB 42 00 00 00 00       		mov.L	#_GICriteria, r4
 1263 003c CC 44                   		mov.B [r4], r4
 1264 003e 64 84                   		and #8, r4
 1265 0040 21 2F                   		bne	.L151
 262:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			if( (TESTBIT(GICriteria, GI_SALT_IND) == 0) && (uP_Regenerate_Data.nReg >= nRegMax ) )
 1266                             		.loc 1 262 0 is_stmt 0 discriminator 1
 1267 0042 FB 42 00 00 00 00       		mov.L	#_uP_Regenerate_Data, r4
 1268 0048 B1 CC                   		movu.B	7[r4], r4
 1269 004a 5B EE                   		movu.B	r14, r14
 1270 004c 47 E4                   		cmp	r14, r4
 1271 004e 23 21                   		bltu	.L151
 265:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				SETBIT(ApplicationFlags, AF_NO_SALT_BIT);								
 1272                             		.loc 1 265 0 is_stmt 1
 1273 0050 3C 70 09                		mov.B	#9, [r7]
 267:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				if ( TESTBIT(Statistics_update_flag, STATISTIC_FLAG_NO_SALT)==0)
 1274                             		.loc 1 267 0
 1275 0053 FB 72 00 00 00 00       		mov.L	#_Statistics_update_flag, r7
 1276                             	.LVL156:
 1277 0059 CC 7E                   		mov.B [r7], r14
 1278 005b 64 2E                   		and #2, r14
 1279 005d 21 1F                   		bne	.L149
 269:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 					IncWordWithCheck(&MachineStatistics.globalStats.salt_reset);
 1280                             		.loc 1 269 0
 1281 005f FB 12 00 00 00 00       		mov.L	#_MachineStatistics+90, r1
 1282 0065 05 00 00 00             		bsr	_IncWordWithCheck
 1283                             	.LVL157:
 270:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 					SETBIT(Statistics_update_flag, STATISTIC_FLAG_NO_SALT);
 1284                             		.loc 1 270 0
 1285 0069 CC 7E                   		mov.B	[r7], r14
 1286 006b 78 1E                   		bset #1, r14
 1287 006d 2E 0D                   		bra	.L189
 1288                             	.LVL158:
 1289                             	.L151:
 275:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				CLRBIT(Statistics_update_flag, STATISTIC_FLAG_NO_SALT);
 1290                             		.loc 1 275 0
 1291 006f FB 72 00 00 00 00       		mov.L	#_Statistics_update_flag, r7
 1292 0075 CC 7E                   		mov.B	[r7], r14
 1293 0077 7A 1E                   		bclr #1, r14
 1294                             	.LVL159:
 1295 0079 03                      		.balign 2,3,1
 1296                             	.L189:
 1297 007a C3 7E                   		mov.B	r14, [r7]
 1298                             		.balign 2,3,5
 1299                             	.L149:
 284:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if(Flags_2 & FLAGS2_NO_SPARKL_AID_MSK)
 1300                             		.loc 1 284 0
 1301 007c FB 72 00 00 00 00       		mov.L	#_Flags_2, r7
 1302 0082 CC 77                   		mov.B	[r7], r7
 1303 0084 FD 74 C7 03             		tst	#3, r7
 1304 0088 20 22                   		beq	.L153
 287:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		SETBIT(ApplicationFlags, AF_NO_SPARKLING_AID_BIT);
 1305                             		.loc 1 287 0
 1306 008a FB 72 00 00 00 00       		mov.L	#_ApplicationFlags, r7
 1307 0090 F0 71                   		bset #1, [r7].B
 290:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		if ( TESTBIT (GICriteriaOld, GI_SPARKLING_AID_IND) )
 1308                             		.loc 1 290 0
 1309 0092 FB 72 00 00 00 00       		mov.L	#_GICriteriaOld, r7
 1310 0098 CC 77                   		mov.B [r7], r7
 1311 009a 75 27 10                		and #16, r7
 1312 009d 20 0D                   		beq	.L153
 292:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			IncWordWithCheck(&MachineStatistics.globalStats.sparkling_reset);
 1313                             		.loc 1 292 0
 1314 009f FB 12 00 00 00 00       		mov.L	#_MachineStatistics+92, r1
 1315 00a5 05 00 00 00             		bsr	_IncWordWithCheck
 1316                             	.LVL160:
 1317 00a9 03                      		.balign 2,3,5
 1318                             	.L153:
 300:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if( FltWarning.load )
 1319                             		.loc 1 300 0
 1320 00aa FB 72 00 00 00 00       		mov.L	#_FltWarning, r7
 1321 00b0 88 7F                   		mov.B	1[r7], r7
 1322 00b2 FD 74 C7 01             		tst	#1, r7
 1323 00b6 12                      		beq	.L155
 303:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		SETBIT(ApplicationFlags, AF_H2O_WARN_BIT);
 1324                             		.loc 1 303 0
 1325 00b7 FB 72 00 00 00 00       		mov.L	#_ApplicationFlags, r7
 1326 00bd F0 72                   		bset #2, [r7].B
 1327 00bf 03                      		.balign 2,3,5
 1328                             	.L155:
 308:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if( TESTBIT(GICriteria, GI_CR_DOOR_IND) == 0 )
 1329                             		.loc 1 308 0
 1330 00c0 FB 72 00 00 00 00       		mov.L	#_GICriteria, r7
 1331 00c6 CC 77                   		mov.B [r7], r7
 1332 00c8 64 47                   		and #4, r7
 1333 00ca 1A                      		bne	.L156
 311:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		CLRBIT(ApplicationFlags, AF_DOOR_CLOSED_BIT);
 1334                             		.loc 1 311 0
 1335 00cb FB 72 00 00 00 00       		mov.L	#_ApplicationFlags, r7
 1336 00d1 F0 7B                   		bclr #3, [r7].B
 1337 00d3 03                      		.balign 2,3,5
 1338                             	.L156:
 315:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if ( TESTBIT(Flags_2,FLAG2_SAFETY_DRAIN_PP_ON_POS) ||New_safety_VS.drain_act ||(SftPulseWarn.statu
 1339                             		.loc 1 315 0
 1340 00d4 FB 72 00 00 00 00       		mov.L	#_Flags_2, r7
 1341 00da CC 77                   		mov.B	[r7], r7
 1342 00dc EF 7E                   		mov.L	r7, r14
 1343 00de 64 8E                   		and #8, r14
 1344 00e0 21 1E                   		bne	.L157
 315:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if ( TESTBIT(Flags_2,FLAG2_SAFETY_DRAIN_PP_ON_POS) ||New_safety_VS.drain_act ||(SftPulseWarn.statu
 1345                             		.loc 1 315 0 is_stmt 0 discriminator 1
 1346 00e2 FB E2 00 00 00 00       		mov.L	#_New_safety_VS, r14
 1347 00e8 CC EE                   		mov.B	[r14], r14
 1348 00ea FD 74 CE 01             		tst	#1, r14
 1349 00ee 21 10                   		bne	.L157
 1350 00f0 FB E2 00 00 00 00       		mov.L	#_SftPulseWarn, r14
 1351 00f6 CC EE                   		mov.B	[r14], r14
 1352 00f8 64 FE                   		and #15, r14
 1353 00fa 61 2E                   		cmp	#2, r14
 1354 00fc 1A                      		bne	.L158
 1355 00fd 03                      		.balign 2,3,5
 1356                             	.L157:
 317:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		SETBIT(ApplicationFlags,AF_STANDBY_DISABLE_BIT); 
 1357                             		.loc 1 317 0 is_stmt 1
 1358 00fe FB E2 00 00 00 00       		mov.L	#_ApplicationFlags, r14
 1359 0104 F0 E4                   		bset #4, [r14].B
 1360                             		.balign 2,3,2
 1361                             	.L158:
 320:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if ( TESTBIT(Flags_2, FLAG2_CLOGGED_FILTER))
 1362                             		.loc 1 320 0
 1363 0106 75 27 20                		and #32, r7
 1364 0109 11                      		beq	.L159
 322:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		SETBIT(ApplicationFlags,AF_DIRTY_FILTER_BIT); 
 1365                             		.loc 1 322 0
 1366 010a FB 72 00 00 00 00       		mov.L	#_ApplicationFlags, r7
 1367 0110 F0 75                   		bset #5, [r7].B
 1368                             		.balign 2,3,5
 1369                             	.L159:
 331:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	ApplicationState = BUILD_BMP(ApplicationState, APPL_STATE_INIT_VAL, APPL_STATE_MASK);
 1370                             		.loc 1 331 0
 1371 0112 FB 72 00 00 00 00       		mov.L	#_ApplicationState, r7
 1372 0118 CC 7E                   		mov.B	[r7], r14
 1373 011a 75 2E BC                		and #0xffffffbc, r14
 1374 011d EF E4                   		mov.L	r14, r4
 1375 011f 78 04                   		bset #0, r4
 1376 0121 C3 74                   		mov.B	r4, [r7]
 337:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if( CurrentFault[0].code != CODE_NO_FAULT )
 1377                             		.loc 1 337 0
 1378 0123 FB 42 00 00 00 00       		mov.L	#_CurrentFault, r4
 1379 0129 58 44                   		movu.B	[r4], r4
 1380 012b 61 04                   		cmp	#0, r4
 1381 012d 17                      		beq	.L160
 340:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		SETBIT(ApplicationState, AS_APPL_FAULT_BIT);
 1382                             		.loc 1 340 0
 1383 012e 75 3E 41                		or	#0x41, r14
 1384 0131 C3 7E                   		mov.B	r14, [r7]
 1385 0133 03                      		.balign 2,3,3
 1386                             	.L160:
 344:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if( FLT_checkForSettingFault() == TRUE )
 1387                             		.loc 1 344 0
 1388 0134 05 00 00 00             		bsr	_FLT_checkForSettingFault
 1389                             	.LVL161:
 1390 0138 61 11                   		cmp	#1, r1
 1391 013a 1A                      		bne	.L161
 347:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		CLRBIT(ApplicationState, AS_DATA_READY_BIT);
 1392                             		.loc 1 347 0
 1393 013b FB 72 00 00 00 00       		mov.L	#_ApplicationState, r7
 1394 0141 F0 78                   		bclr #0, [r7].B
 1395 0143 03                      		.balign 2,3,5
 1396                             	.L161:
 351:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if (HarakiriLowPower.Mode != HKM_SBY_OFF_MODE)
 1397                             		.loc 1 351 0
 1398 0144 FB 72 00 00 00 00       		mov.L	#_HarakiriLowPower, r7
 1399 014a CC 77                   		mov.B	[r7], r7
 1400 014c EF 7E                   		mov.L	r7, r14
 1401 014e 76 2E C0 00             		and	#0xc0, r14
 1402 0152 20 10                   		beq	.L162
 355:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		if (HarakiriLowPower.Req ==  HKM_LOW_POWER_REQ   )
 1403                             		.loc 1 355 0
 1404 0154 64 77                   		and #7, r7
 1405 0156 61 17                   		cmp	#1, r7
 1406 0158 1A                      		bne	.L162
 357:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			SETBIT(ApplicationFlags, AF_SBY_SLEEP_ON_FLAG );	
 1407                             		.loc 1 357 0
 1408 0159 FB 72 00 00 00 00       		mov.L	#_ApplicationFlags, r7
 1409 015f F0 76                   		bset #6, [r7].B
 1410 0161 03                      		.balign 2,3,5
 1411                             	.L162:
 361:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if ( TESTBIT(GIValid,GI_FIRST_WAKEUP_SOURCE_IND) && (TESTBIT(GICriteria, GI_FIRST_WAKEUP_SOURCE_IN
 1412                             		.loc 1 361 0
 1413 0162 FB 72 00 00 00 00       		mov.L	#_GIValid, r7
 1414 0168 DC 77                   		mov.W	[r7], r7
 1415 016a 75 27 20                		and #32, r7
 1416 016d 5F 77                   		movu.W	r7, r7
 1417 016f 61 07                   		cmp	#0, r7
 1418 0171 20 10                   		beq	.L163
 361:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if ( TESTBIT(GIValid,GI_FIRST_WAKEUP_SOURCE_IND) && (TESTBIT(GICriteria, GI_FIRST_WAKEUP_SOURCE_IN
 1419                             		.loc 1 361 0 is_stmt 0 discriminator 1
 1420 0173 FB 72 00 00 00 00       		mov.L	#_GICriteria, r7
 1421 0179 CC 77                   		mov.B [r7], r7
 1422 017b 75 27 20                		and #32, r7
 1423 017e 1B                      		bne	.L163
 1424 017f 2E 4B                   		bra	.L165
 1425                             	.L163:
 366:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		if (TESTBIT(GICriteria, GI_FIRST_WAKEUP_SOURCE_IND))
 1426                             		.loc 1 366 0 is_stmt 1
 1427 0181 FB 72 00 00 00 00       		mov.L	#_GICriteria, r7
 1428 0187 CC 77                   		mov.B	[r7], r7
 1429 0189 EF 7E                   		mov.L	r7, r14
 1430 018b 75 2E 20                		and #32, r14
 1431 018e 20 3C                   		beq	.L165
 368:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			if  ( TESTBIT(Flags_2, FLAG2_SAFETY_TURB_TEST_BIT) || ( TESTBIT (GICriteria,GI_CR_OVFL_IND) != 0
 1432                             		.loc 1 368 0
 1433 0190 FB E2 00 00 00 00       		mov.L	#_Flags_2, r14
 1434 0196 CC EE                   		mov.B [r14], r14
 1435 0198 75 2E 40                		and #64, r14
 1436 019b 21 23                   		bne	.L166
 368:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			if  ( TESTBIT(Flags_2, FLAG2_SAFETY_TURB_TEST_BIT) || ( TESTBIT (GICriteria,GI_CR_OVFL_IND) != 0
 1437                             		.loc 1 368 0 is_stmt 0 discriminator 1
 1438 019d 64 27                   		and #2, r7
 1439 019f 21 1F                   		bne	.L166
 1440 01a1 FB 72 00 00 00 00       		mov.L	#_New_safety_VS, r7
 1441 01a7 CC 77                   		mov.B	[r7], r7
 1442 01a9 FD 74 C7 01             		tst	#1, r7
 1443 01ad 21 11                   		bne	.L166
 369:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			||(SftPulseWarn.status==SFT_PULSE_WARN_EXE)  )
 1444                             		.loc 1 369 0 is_stmt 1
 1445 01af FB 72 00 00 00 00       		mov.L	#_SftPulseWarn, r7
 1446 01b5 CC 77                   		mov.B	[r7], r7
 1447 01b7 64 F7                   		and #15, r7
 1448 01b9 61 27                   		cmp	#2, r7
 1449 01bb 21 1D                   		bne	.L147
 1450 01bd 03                      		.balign 2,3,5
 1451                             	.L166:
 371:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				SETBIT(ApplicationFlags, AF_STANDBY_DISABLE_BIT );	
 1452                             		.loc 1 371 0
 1453 01be FB 72 00 00 00 00       		mov.L	#_ApplicationFlags, r7
 1454 01c4 CC 7E                   		mov.B	[r7], r14
 1455 01c6 78 4E                   		bset #4, r14
 1456 01c8 2E 0E                   		bra	.L190
 1457                             	.L165:
 378:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			SETBIT(ApplicationFlags, AF_WAKEUP_OFBUTTON_BIT );
 1458                             		.loc 1 378 0
 1459 01ca FB 72 00 00 00 00       		mov.L	#_ApplicationFlags, r7
 1460 01d0 CC 7E                   		mov.B	[r7], r14
 1461 01d2 75 3E 80                		or	#0xffffff80, r14
 1462 01d5 03                      		.balign 2,3,1
 1463                             	.L190:
 1464 01d6 C3 7E                   		mov.B	r14, [r7]
 1465                             		.balign 2,3,2
 1466                             	.L147:
 382:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }
 1467                             		.loc 1 382 0
 1468 01d8 3F 7A 04                		rtsd	#16, r7-r10
 1469                             	.LFE4:
 1471 01db 03                      		.section	.text.IsOvenRunningDelay,"ax",@progbits
 1472                             		.global	_IsOvenRunningDelay
 1474                             	_IsOvenRunningDelay:
 1475                             	.LFB15:
1187:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
1188:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }
1189:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**/
1190:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1191:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**
1192:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** restituisce TRUE se il ciclo se esiste almeno una cavità che è in run o in delay
1193:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  
1194:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \return 		
1195:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1196:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \version		1.0.0
1197:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \date 			02/02/2010
1198:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \author  		Emanuela Antognoli
1199:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** */
1200:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1201:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1202:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** uint8_t IsOvenRunningDelay (void)
1203:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {
 1476                             		.loc 1 1203 0
1204:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if((Interpreter_Data[0].completeLabel.s.label == LBL_RUN)||(Interpreter_Data[0].completeLabel.s.la
 1477                             		.loc 1 1204 0
 1478 0000 FB E2 00 00 00 00       		mov.L	#_Interpreter_Data, r14
 1479 0006 CC E1                   		mov.B	[r14], r1
 1480 0008 64 F1                   		and #15, r1
 1481 000a 60 11                   		sub	#1, r1
1205:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
1206:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		
1207:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		return TRUE;
1208:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
1209:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
1210:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	return FALSE;
1211:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }
 1482                             		.loc 1 1211 0
 1483 000c 61 11                   		cmp	#1, r1
 1484 000e FC DB 15                		scleu.L	r1
 1485 0011 02                      		rts
 1486                             	.LFE15:
 1488                             		.section	.text.IsOvenPauseFAult,"ax",@progbits
 1489                             		.global	_IsOvenPauseFAult
 1491                             	_IsOvenPauseFAult:
 1492                             	.LFB16:
1212:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1213:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**
1214:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** restituisce TRUE se il ciclo se esiste almeno una cavità che è in PAuSE o FAULT
1215:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  
1216:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \return 		
1217:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1218:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \version		1.0.0
1219:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \date 			02/02/2010
1220:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \author  		Emanuela Antognoli
1221:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** */
1222:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1223:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1224:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** uint8_t IsOvenPauseFAult (void)
1225:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {
 1493                             		.loc 1 1225 0
1226:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if((Interpreter_Data[0].completeLabel.s.label == LBL_PAUSE)||(Interpreter_Data[0].completeLabel.s.
 1494                             		.loc 1 1226 0
 1495 0000 FB E2 00 00 00 00       		mov.L	#_Interpreter_Data, r14
 1496 0006 CC E1                   		mov.B	[r14], r1
 1497 0008 64 F1                   		and #15, r1
 1498 000a 60 41                   		sub	#4, r1
1227:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
1228:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		
1229:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		return TRUE;
1230:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
1231:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	
1232:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	return FALSE;
1233:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1234:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }
 1499                             		.loc 1 1234 0
 1500 000c 61 11                   		cmp	#1, r1
 1501 000e FC DB 15                		scleu.L	r1
 1502 0011 02                      		rts
 1503                             	.LFE16:
 1505                             		.section	.text.UpdateInfoBufferToPowerMeterModule,"ax",@progbits
 1506                             		.global	_UpdateInfoBufferToPowerMeterModule
 1508                             	_UpdateInfoBufferToPowerMeterModule:
 1509                             	.LFB17:
1235:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1236:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1237:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**
1238:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Aggiornamento del buffer del modulo Power Meter SW con gli ultimi dati ricevuti dal DSP.
1239:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** Questa funzione e' stata pensata per essere chiamata all'interno del ciclo del task applicativo.
1240:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1241:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \return     S_OK nel caso di aggiornamento positivo, S_FALSE nel caso opposto.
1242:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1243:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \author     Pietro Loschiavo
1244:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \date     26/06/2013
1245:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \version    1.0.0
1246:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** */
1247:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** uint8_t UpdateInfoBufferToPowerMeterModule(void)
1248:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {
 1510                             		.loc 1 1248 0
 1511 0000 6E 7B                   		pushm	r7-r11
 1512                             	.LCFI10:
 1513                             	.LVL162:
1249:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   sEMS_ExtInfo_t* pEMSBuffer;
1250:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   uint8_t i, retVal = S_FALSE;
 1514                             		.loc 1 1250 0
 1515 0002 66 1B                   		mov	#1, r11
1251:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1252:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   for(i=0; i < CONFIG_EMS_MLOAD_ITEMS_MAX; i++)
 1516                             		.loc 1 1252 0
 1517 0004 66 0A                   		mov	#0, r10
1253:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   {
1254:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	  pEMSBuffer = EMS_GetPtrToDSPInfoBuffer(i);
1255:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	  if ( pEMSBuffer != NULL )
1256:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	  {
1257:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1258:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    pEMSBuffer->ui16PVal = (uint16_t) (( (uint16_t) ExtMotor_DataBuffer[0] << 8)
 1518                             		.loc 1 1258 0
 1519 0006 FB 72 00 00 00 00       		mov.L	#_ExtMotor_DataBuffer, r7
 1520                             	.LVL163:
 1521                             		.balign 2,3,1
 1522                             	.L195:
1254:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	  pEMSBuffer = EMS_GetPtrToDSPInfoBuffer(i);
 1523                             		.loc 1 1254 0
 1524 000c CF A1                   		mov.B	r10, r1
 1525 000e 05 00 00 00             		bsr	_EMS_GetPtrToDSPInfoBuffer
 1526                             	.LVL164:
1255:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	  if ( pEMSBuffer != NULL )
 1527                             		.loc 1 1255 0
 1528 0012 61 01                   		cmp	#0, r1
 1529 0014 20 26                   		beq	.L194
 1530                             		.loc 1 1258 0
 1531 0016 58 7B                   		movu.B	[r7], r11
 1532 0018 6C 8B                   		shll	#8, r11
 1533 001a 55 7B 01                		or	1[r7].UB, r11
 1534 001d D3 1B                   		mov.W	r11, [r1]
1259:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	        | ExtMotor_DataBuffer[1]) ;
1260:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    pEMSBuffer->ui32EVal = (uint32_t) ((uint32_t) ( ExtMotor_DataBuffer[2] << 24)
1261:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	        | (uint32_t) ( ExtMotor_DataBuffer[3] << 16 )
 1535                             		.loc 1 1261 0
 1536 001f 59 7E 03                		movu.B	3[r7], r14
 1537 0022 6D 0E                   		shll	#16, r14
1260:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    pEMSBuffer->ui32EVal = (uint32_t) ((uint32_t) ( ExtMotor_DataBuffer[2] << 24)
 1538                             		.loc 1 1260 0
 1539 0024 59 7B 02                		movu.B	2[r7], r11
 1540 0027 6D 8B                   		shll	#24, r11
 1541                             		.loc 1 1261 0
 1542 0029 57 EB                   		or	r14, r11
1262:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	        | (uint32_t) ( ExtMotor_DataBuffer[4] << 8 )
 1543                             		.loc 1 1262 0
 1544 002b 59 7E 04                		movu.B	4[r7], r14
 1545 002e 6C 8E                   		shll	#8, r14
 1546 0030 57 EB                   		or	r14, r11
1260:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    pEMSBuffer->ui32EVal = (uint32_t) ((uint32_t) ( ExtMotor_DataBuffer[2] << 24)
 1547                             		.loc 1 1260 0
 1548 0032 55 7B 05                		or	5[r7].UB, r11
 1549 0035 E7 1B 01                		mov.L	r11, 4[r1]
 1550                             	.LVL165:
1263:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	        | (uint32_t) ExtMotor_DataBuffer[5]);
1264:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1265:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    retVal =  S_OK;
 1551                             		.loc 1 1265 0
 1552 0038 66 0B                   		mov	#0, r11
 1553                             	.LVL166:
 1554                             		.balign 2,3,1
 1555                             	.L194:
1252:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   for(i=0; i < CONFIG_EMS_MLOAD_ITEMS_MAX; i++)
 1556                             		.loc 1 1252 0
 1557 003a 62 1A                   		add	#1, r10
 1558                             	.LVL167:
 1559 003c 5B AE                   		movu.B	r10, r14
 1560 003e 61 2E                   		cmp	#2, r14
 1561 0040 21 CC                   		bne	.L195
1266:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	  }
1267:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   }
1268:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1269:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****   return retVal;
1270:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1271:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }
 1562                             		.loc 1 1271 0
 1563 0042 EF B1                   		mov.L	r11, r1
 1564                             	.LVL168:
 1565 0044 64 11                   		and #1, r1
 1566 0046 3F 7B 05                		rtsd	#20, r7-r11
 1567                             	.LFE17:
 1569 0049 03                      		.section	.text.GetModifierValueAPP2_0,"ax",@progbits
 1570                             		.global	_GetModifierValueAPP2_0
 1572                             	_GetModifierValueAPP2_0:
 1573                             	.LFB18:
1272:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1273:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1274:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**
1275:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  *
1276:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1277:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \param [in] tableID indice della tabella dei modificatori
1278:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \param [out] pModifierValue  se S_OK restituisce il modificatore
1279:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1280:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \return uint8_t
1281:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \retvalue   MOD_DONT_CARE modificatori non individuato o non attivo
1282:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			S_FALSE Indice tabella non valido (tabella variabili, tabella modificatori 1� lev)
1283:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			S_OK    modificatori attivo
1284:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1285:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \version		1.0.0
1286:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \date 			21/03/2014
1287:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \author  		Andrea Emili
1288:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** */
1289:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** uint8_t GetModifierValueAPP2_0(uint8_t tabIndex, int16_t *pModifierValue)
1290:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {
 1574                             		.loc 1 1290 0
 1575                             	.LVL169:
 1576 0000 6E 7A                   		pushm	r7-r10
 1577                             	.LCFI11:
 1578 0002 60 80                   		sub	#8, r0
 1579                             	.LCFI12:
 1580 0004 EF 27                   		mov.L	r2, r7
 1581                             	.LVL170:
1291:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1292:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  Loader_Struct ldVarTable;
1293:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  uint8_t dataType, dataIndex;
1294:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  uint8_t sRet =S_FALSE;
1295:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1296:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1297:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     if(tabIndex==0xFF)
 1582                             		.loc 1 1297 0
 1583 0006 5B 1A                   		movu.B	r1, r10
 1584 0008 75 5A FF                		cmp	#0xff, r10
 1585 000b 1E                      		bne	.L202
1298:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     {
1299:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1300:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    *pModifierValue=0;
 1586                             		.loc 1 1300 0
 1587 000c 3D 20 00                		mov.W	#0, [r2]
 1588 000f 2E 55                   		bra	.L207
 1589                             	.L202:
1301:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    return S_FALSE;
1302:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     }
1303:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1304:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     /* Caricamento puntatore alla tabella delle variabili che agiscono da modificatori */
1305:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     if( BasicLoader(PTR_HW_CONFIG_DATA, DSPL_HWC_POWER_PROFILE_VARIABLE_TABLE, &ldVarTable) != S_OK
 1590                             		.loc 1 1305 0
 1591 0011 66 A1                   		mov	#10, r1
 1592                             	.LVL171:
 1593 0013 DF 12                   		mov.W	r1, r2
 1594                             	.LVL172:
 1595 0015 EF 03                   		mov.L	r0, r3
 1596 0017 05 00 00 00             		bsr	_BasicLoader
 1597                             	.LVL173:
 1598 001b 5B 11                   		movu.B	r1, r1
 1599 001d 61 01                   		cmp	#0, r1
 1600 001f 21 45                   		bne	.L207
1306:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     {
1307:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     	return S_FALSE;
1308:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     }
1309:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1310:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1311:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     dataType=((Condition_SelDataStruct *)(ldVarTable.Data) + tabIndex)->dataType;
 1601                             		.loc 1 1311 0
 1602 0021 4B AA                   		add	r10, r10
 1603                             	.LVL174:
 1604 0023 06 88 0A                		add	[r0], r10
 1605                             	.LVL175:
1312:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     dataIndex=((Condition_SelDataStruct *)(ldVarTable.Data) + tabIndex)->dataIndex;
 1606                             		.loc 1 1312 0
 1607 0026 CC AE                   		mov.B	[r10], r14
 1608 0028 75 2E 3F                		and #63, r14
 1609                             	.LVL176:
1311:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     dataType=((Condition_SelDataStruct *)(ldVarTable.Data) + tabIndex)->dataType;
 1610                             		.loc 1 1311 0
 1611 002b CD AA 01                		mov.B	1[r10], r10
 1612                             	.LVL177:
1313:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1314:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     switch(dataType)
 1613                             		.loc 1 1314 0
 1614 002e 75 2A 3F                		and #63, r10
 1615 0031 61 4A                   		cmp	#4, r10
 1616 0033 17                      		beq	.L205
 1617 0034 61 8A                   		cmp	#8, r10
 1618 0036 21 2B                   		bne	.L209
 1619 0038 2E 18                   		bra	.L206
 1620                             	.L205:
1315:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     {
1316:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     	case JIF_TAB_GI_TURBIDITY_SEG:
1317:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	        if( HWC_Flags.bit.turbsens )
 1621                             		.loc 1 1317 0
 1622 003a FB A2 00 00 00 00       		mov.L	#_HWC_Flags, r10
 1623 0040 DC A1                   		mov.W	[r10], r1
 1624 0042 64 11                   		and	#1, r1
 1625 0044 20 22                   		beq	.L203
1318:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	        {
1319:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	        	*pModifierValue = GITurbidity;
 1626                             		.loc 1 1319 0
 1627 0046 FB A2 00 00 00 00       		mov.L	#_GITurbidity, r10
 1628 004c 58 AA                   		movu.B	[r10], r10
 1629 004e 2E 10                   		bra	.L211
 1630                             	.L206:
1320:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	        	sRet = TRUE;
1321:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	        }
1322:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	        else
1323:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	        {
1324:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	        	sRet = FALSE;
1325:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	        }
1326:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	        break;
1327:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    case JIF_TAB_FUNCTIONS_SEG:
1328:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    	*pModifierValue = BufNewReg[dataIndex] - 1;
 1631                             		.loc 1 1328 0
 1632 0050 5B EA                   		movu.B	r14, r10
 1633 0052 FB E2 00 00 00 00       		mov.L	#_BufNewReg, r14
 1634                             	.LVL178:
 1635 0058 FE CA EA                		movu.B	[r10,r14], r10
 1636                             	.LVL179:
 1637 005b 60 1A                   		sub	#1, r10
 1638 005d 03                      		.balign 2,3,1
 1639                             	.L211:
 1640 005e D3 7A                   		mov.W	r10, [r7]
 1641 0060 0C                      		bra	.L207
 1642                             	.LVL180:
 1643                             	.L209:
1329:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    	sRet = TRUE;
1330:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	        break;
1331:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    default:
1332:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    	*pModifierValue = 0;
 1644                             		.loc 1 1332 0
 1645 0061 D3 71                   		mov.W	r1, [r7]
 1646                             	.LVL181:
 1647 0063 03                      		.balign 2,3,1
 1648                             	.L207:
1307:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     	return S_FALSE;
 1649                             		.loc 1 1307 0
 1650 0064 66 11                   		mov	#1, r1
 1651                             		.balign 2,3,1
 1652                             	.L203:
1333:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	    	break;
1334:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     }
1335:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1336:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****     return sRet;
1337:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }
 1653                             		.loc 1 1337 0
 1654 0066 64 11                   		and #1, r1
 1655 0068 3F 7A 06                		rtsd	#24, r7-r10
 1656                             	.LFE18:
 1658 006b 03                      		.section	.text.GetAlphaModifierValueAPP2_0,"ax",@progbits
 1659                             		.global	_GetAlphaModifierValueAPP2_0
 1661                             	_GetAlphaModifierValueAPP2_0:
 1662                             	.LFB19:
1338:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**/
1339:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1340:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**
1341:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  *
1342:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \function GetAlphaModifierValueAPP2_0
1343:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \param [in] tabIndex indice della tabella dei modificatori
1344:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \param [in] pModifierValue se S_OK restituisce il modificatore
1345:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1346:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \return uint8_t
1347:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \retvalue   MOD_DONT_CARE modificatori non individuato o non attivo
1348:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			S_FALSE Indice tabella non valido (tabella variabili, tabella modificatori 1� lev)
1349:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			S_OK    modificatori attivo
1350:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1351:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \version		1.0.0
1352:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \date 			26/03/2014
1353:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** \author  		Andrea Emili
1354:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** */
1355:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1356:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** uint8_t GetAlphaModifierValueAPP2_0(uint8_t tabIndex, LIB_Fixed_ValueType *pModifierValue)
1357:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {
 1663                             		.loc 1 1357 0
 1664                             	.LVL182:
 1665 0000 6E 7C                   		pushm	r7-r12
 1666                             	.LCFI13:
 1667 0002 60 80                   		sub	#8, r0
 1668                             	.LCFI14:
 1669 0004 CF 1C                   		mov.B	r1, r12
 1670 0006 EF 27                   		mov.L	r2, r7
1358:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1359:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  Condition_Struct *pCurrentCondition;
1360:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  Loader_Struct ldVarTable;
1361:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1362:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	pModifierValue->fractional = 0;
 1671                             		.loc 1 1362 0
 1672 0008 3D 20 00                		mov.W	#0, [r2]
1363:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	pModifierValue->notation = 0;
 1673                             		.loc 1 1363 0
 1674 000b 3C 22 00                		mov.B	#0, 2[r2]
1364:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1365:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	/*APP_AlphaCoefficientsComputation();*/		/*AE TODO Evaluate if the position is here*/
1366:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1367:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if( BasicLoader(PTR_HW_CONFIG_DATA, DSPL_HWC_POWER_PROFILE_VARIABLE_TABLE, &ldVarTable) != S_OK)
 1675                             		.loc 1 1367 0
 1676 000e 66 A1                   		mov	#10, r1
 1677                             	.LVL183:
 1678 0010 DF 12                   		mov.W	r1, r2
 1679                             	.LVL184:
 1680 0012 EF 03                   		mov.L	r0, r3
 1681 0014 05 00 00 00             		bsr	_BasicLoader
 1682                             	.LVL185:
 1683 0018 EF 1B                   		mov.L	r1, r11
 1684 001a 71 1A 00                		add	#0, r1, r10
 1685 001d 21 40                   		bne	.L214
1368:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
1369:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		return S_FALSE;
1370:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
1371:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1372:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1373:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	pCurrentCondition->dataSel.dataType = ((Condition_SelDataStruct *)(ldVarTable.Data) +tabIndex)->da
 1686                             		.loc 1 1373 0
 1687 001f 5B C1                   		movu.B	r12, r1
 1688 0021 4B 11                   		add	r1, r1
 1689 0023 06 88 01                		add	[r0], r1
 1690 0026 CD 1C 01                		mov.B	1[r1], r12
 1691                             	.LVL186:
 1692 0029 75 2C 3F                		and #63, r12
 1693 002c 66 0E                   		mov.L	#0, r14
 1694 002e DC E4                   		mov.W	[r14], r4
 1695 0030 75 24 C0                		and #-64, r4
 1696 0033 57 C4                   		or	r12, r4
 1697 0035 D3 E4                   		mov.W	r4, [r14]
1374:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	pCurrentCondition->dataSel.dataIndex = ((Condition_SelDataStruct *)(ldVarTable.Data) +tabIndex)->d
 1698                             		.loc 1 1374 0
 1699 0037 CC 1C                   		mov.B	[r1], r12
 1700 0039 75 2C 3F                		and #63, r12
 1701 003c 6C 8C                   		shll	#8, r12
 1702 003e 76 24 FF C0             		and #0xffffc0ff, r4
 1703 0042 57 C4                   		or	r12, r4
 1704 0044 D3 E4                   		mov.W	r4, [r14]
1375:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1376:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1377:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if( SelectOperandsAPP2_0(pCurrentCondition, pModifierValue) != S_OK )
 1705                             		.loc 1 1377 0
 1706 0046 EF E1                   		mov.L	r14, r1
 1707 0048 EF 72                   		mov.L	r7, r2
 1708 004a 05 00 00 00             		bsr	_SelectOperandsAPP2_0
 1709                             	.LVL187:
 1710 004e 5B 11                   		movu.B	r1, r1
 1711 0050 61 01                   		cmp	#0, r1
 1712 0052 20 0E                   		beq	.L213
1378:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{
1379:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		/*return ERR_CODE;*/
1380:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		pModifierValue->fractional = 1;
 1713                             		.loc 1 1380 0
 1714 0054 3D 70 01                		mov.W	#1, [r7]
1381:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		pModifierValue->notation = 0;
 1715                             		.loc 1 1381 0
 1716 0057 C7 7B 02                		mov.B	r11, 2[r7]
1382:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
1383:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1384:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	return S_OK;
 1717                             		.loc 1 1384 0
 1718 005a CF A1                   		mov.B	r10, r1
 1719 005c 0C                      		bra	.L213
 1720                             	.LVL188:
 1721                             	.L214:
1369:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		return S_FALSE;
 1722                             		.loc 1 1369 0
 1723 005d 66 11                   		mov	#1, r1
 1724                             	.LVL189:
 1725 005f 03                      		.balign 2,3,1
 1726                             	.L213:
1385:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }
 1727                             		.loc 1 1385 0
 1728 0060 5B 11                   		movu.B	r1, r1
 1729 0062 3F 7C 08                		rtsd	#32, r7-r12
 1730                             	.LFE19:
 1732 0065 03                      		.section	.text.APP_GetReferenceParameters,"ax",@progbits
 1733                             		.global	_APP_GetReferenceParameters
 1735                             	_APP_GetReferenceParameters:
 1736                             	.LFB20:
1386:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**/
1387:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** #ifdef CONFIG_PM_POWER_PROFILE_SUPPORT
1388:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** void APP_GetReferenceParameters()
1389:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {
 1737                             		.loc 1 1389 0
 1738 0000 60 80                   		sub	#8, r0
 1739                             	.LCFI15:
1390:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	Loader_Struct ldVarTable;
1391:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if( BasicLoader(PTR_OTHER_ALGORITHMS_TABLE_DATA, DSPL_ALPHA0_VOLTAGE_PARAMETERS, &ldVarTable) != S
 1740                             		.loc 1 1391 0
 1741 0002 75 41 2D                		mov	#45, r1
 1742 0005 66 02                   		mov	#0, r2
 1743 0007 EF 03                   		mov.L	r0, r3
 1744 0009 05 00 00 00             		bsr	_BasicLoader
 1745                             	.LVL190:
1392:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		{
1393:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			/*return 1;*/
1394:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		}
1395:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1396:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1397:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		Vref.fractional =  OFFS_W(ldVarTable.Data, 0);
 1746                             		.loc 1 1397 0
 1747 000d EC 04                   		mov.L	[r0], r4
 1748 000f FB E2 00 00 00 00       		mov.L	#_Vref, r14
 1749 0015 D0 4E                   		mov.W	[r4], [r14]
1398:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		Vref.notation = OFFS_B(ldVarTable.Data, 2);
 1750                             		.loc 1 1398 0
 1751 0017 C5 4E 02 02             		mov.B	2[r4], 2[r14]
1399:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		/*voltage_sample_to_mean = OFFS_B(ldVarTable.Data, 3);*/
1400:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1401:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		if( BasicLoader(PTR_OTHER_ALGORITHMS_TABLE_DATA, DSPL_ALPHA1_TEMPERA_PARAMETERS, &ldVarTable) != 
 1752                             		.loc 1 1401 0
 1753 001b 75 41 2D                		mov	#45, r1
 1754 001e 66 12                   		mov	#1, r2
 1755 0020 EF 03                   		mov.L	r0, r3
 1756 0022 05 00 00 00             		bsr	_BasicLoader
 1757                             	.LVL191:
1402:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			{
1403:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 				/*return 1;*/
1404:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			}
1405:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1406:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			Tref.fractional = OFFS_W(ldVarTable.Data, 0);
 1758                             		.loc 1 1406 0
 1759 0026 EC 04                   		mov.L	[r0], r4
 1760 0028 FB E2 00 00 00 00       		mov.L	#_Tref, r14
 1761 002e D0 4E                   		mov.W	[r4], [r14]
1407:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			Tref.notation = OFFS_B(ldVarTable.Data, 2);
 1762                             		.loc 1 1407 0
 1763 0030 C5 4E 02 02             		mov.B	2[r4], 2[r14]
1408:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 			/*temperature_sample_to_mean = OFFS_B(ldVarTable.Data, 3);*/
1409:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }
 1764                             		.loc 1 1409 0
 1765 0034 67 02                   		rtsd	#8
 1766                             	.LFE20:
 1768                             		.section	.text.VlineCalcolusFromDSP,"ax",@progbits
 1769                             		.global	_VlineCalcolusFromDSP
 1771                             	_VlineCalcolusFromDSP:
 1772                             	.LFB22:
1410:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1411:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1412:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /*
1413:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  * Function: APP_AlphaCoefficientsComputation
1414:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  * Description: Computation of Inertia's Alpha coefficients for APP2.0 Module
1415:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  * Author: Andrea Emili, SPES scpa
1416:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  * Note:
1417:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  * 	- Use the data type FixedData_tag
1418:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  * 	- Load data from 0x2D pointer
1419:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  */
1420:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** LIB_Fixed_ValueType Tupd;
1421:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** LIB_Fixed_ValueType Vupd;
1422:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** void APP_AlphaCoefficientsComputation(void)
1423:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {
1424:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	LIB_Fixed_ValueType app_var, result_var,result_var_1, result_vefd;
1425:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	Loader_Struct ldVarTable;
1426:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	/*uint16_t voltage_sample_to_mean = 0;
1427:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	uint16_t temperature_sample_to_mean = 0;*/
1428:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1429:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1430:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	 /*Init*/
1431:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	 app_alpha_voltage_on_power.fractional = 1;
1432:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	 app_alpha_voltage_on_power.notation = 0;
1433:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	 app_alpha_voltage_on_durationON.fractional = 1;
1434:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	 app_alpha_voltage_on_durationON.notation = 0;
1435:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	 app_alpha_voltage_temperature_on_durationON.fractional = 1;
1436:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	 app_alpha_voltage_temperature_on_durationON.notation = 0;
1437:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	 app_alpha_temperature_on_durationOFF.fractional = 1;
1438:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	 app_alpha_temperature_on_durationOFF.notation = 0;
1439:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1440:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1441:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	/*Lettura Vline*/
1442:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if(ExtMotor_DataBuffer[1] > 0)
1443:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{/*Se DSP pronto leggo tensione*/
1444:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		VlineCalcolusFromDSP(&Vupd);
1445:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
1446:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	else if(MachineStatistics.lastCycles[MOST_RECENT_STAT_CYCLE_POS].Vline > 0)
1447:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{/*Altrimenti prendo vecchio riferimento*/
1448:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		LIB_Fixed_FromInt(MachineStatistics.lastCycles[MOST_RECENT_STAT_CYCLE_POS].Vline,7, &Vupd);
1449:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
1450:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	else
1451:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	{/*Se non c'è gli assegno la Vref*/
1452:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		Vupd.fractional = Vref.fractional ;
1453:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		Vupd.notation = Vref.notation;
1454:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	}
1455:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	/**/
1456:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1457:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1458:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	LIB_Fixed_FromInt(GITemp, 8, &Tupd);
1459:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1460:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1461:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1462:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1463:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	 /*Calcolo Voltage effect */
1464:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 if(LIB_Fixed_Div(Vupd, Vref, &result_var))
1465:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 {
1466:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 /*error*/
1467:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 }
1468:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1469:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 if(LIB_Fixed_Sqr(result_var,&result_var_1))
1470:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 {
1471:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 /*error*/
1472:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 }
1473:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 if(result_var_1.fractional != 0)
1474:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 {
1475:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 app_alpha_voltage_on_power.fractional = result_var_1.fractional;
1476:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 app_alpha_voltage_on_power.notation = result_var_1.notation;
1477:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 }
1478:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1479:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 /**/
1480:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 /*Voltage effect on Duration*/
1481:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1482:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 if(LIB_Fixed_Div(Vref, Vupd, &result_var))
1483:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 {
1484:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 /*error*/
1485:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 }
1486:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1487:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 if(LIB_Fixed_Sqr(result_var,&result_vefd))
1488:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 {
1489:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 /*error*/
1490:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 }
1491:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1492:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 if(result_vefd.fractional != 0)
1493:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 {
1494:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 app_alpha_voltage_on_durationON.fractional = result_var_1.fractional;
1495:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 app_alpha_voltage_on_durationON.notation = result_var_1.notation;
1496:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 }
1497:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 /**/
1498:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1499:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 /*Voltage and Temperature effect on Duration*/
1500:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 app_var.fractional = LIB_FIXED_FRACTIONAL_FROMFLOAT(1.8,4);
1501:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 app_var.notation = 4;
1502:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1503:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 if(LIB_Fixed_Sub(Tref,Tupd,&result_var))
1504:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 {
1505:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 /*error*/
1506:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 }
1507:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 if(LIB_Fixed_Div(result_var, app_var, &result_var_1))
1508:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 {
1509:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 /*error*/
1510:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 }
1511:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1512:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 if(LIB_Fixed_Mul(result_var_1,result_vefd,&result_var))
1513:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 {
1514:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 /*errore*/
1515:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 }
1516:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1517:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 if(result_var.fractional != 0)
1518:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 {
1519:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 app_alpha_voltage_temperature_on_durationON.fractional = result_var.fractional;
1520:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 app_alpha_voltage_temperature_on_durationON.notation = result_var.notation;
1521:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 }
1522:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 /**/
1523:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 result_var_1.fractional = 1;
1524:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 result_var_1.notation = 0;
1525:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 if(Tupd.fractional > Tref.fractional)
1526:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 {
1527:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 if(LIB_Fixed_Sub(Tupd,Tref,&result_var))
1528:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 {
1529:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  			 /*errore*/
1530:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 }
1531:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 if(LIB_Fixed_Div(result_var, app_var, &result_var_1))
1532:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 {
1533:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  			 /*error*/
1534:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 }
1535:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 }
1536:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 if(result_var_1.fractional != 0)
1537:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 {
1538:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		app_alpha_temperature_on_durationOFF.fractional = result_var_1.fractional;
1539:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		app_alpha_temperature_on_durationOFF.notation = result_var_1.notation;
1540:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 }
1541:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1542:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }
1543:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /**/
1544:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1545:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** /*
1546:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  * Function: VlineCalcolusFromDSP
1547:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  */
1548:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1549:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** uint8_t VlineCalcolusFromDSP(LIB_Fixed_ValueType *valuePtr)
1550:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {
 1773                             		.loc 1 1550 0
 1774                             	.LVL192:
 1775 0000 7E A7                   		push.l	r7
 1776                             	.LCFI16:
 1777 0002 60 80                   		sub	#8, r0
 1778                             	.LCFI17:
 1779 0004 EF 17                   		mov.L	r1, r7
 1780                             	.LVL193:
1551:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	int16_t funcValue;
1552:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	LIB_Fixed_ValueType Vmeasured,result;
1553:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	int16_t V_from_dsp;
1554:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	LIB_Fixed_ValueType coeff;
1555:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1556:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	   funcValue = (uint16_t) (( (uint16_t) ExtMotor_DataBuffer[6] << 8) | ExtMotor_DataBuffer[7]);
1557:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	   V_from_dsp = (int16_t)(((uint32_t)funcValue)>>(15-7));
 1781                             		.loc 1 1557 0
 1782 0006 FB E2 00 00 00 00       		mov.L	#_ExtMotor_DataBuffer, r14
 1783 000c CD EE 06                		mov.B	6[r14], r14
 1784 000f D7 0E 02                		mov.W	r14, 4[r0]
1558:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	   Vmeasured.fractional = V_from_dsp;
1559:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	   Vmeasured.notation = 7;
 1785                             		.loc 1 1559 0
 1786 0012 3C 06 07                		mov.B	#7, 6[r0]
1560:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	   coeff.fractional = 444;
1561:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	   coeff.notation = 0;
1562:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1563:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	   LIB_Fixed_Mul(Vmeasured, coeff, &result);
 1787                             		.loc 1 1563 0
 1788 0015 A8 09                   		mov.L	4[r0], r1
 1789                             	.LVL194:
 1790 0017 FB 22 00 00 BC 01       		mov.L	#0x1bc0000, r2
 1791 001d EF 03                   		mov.L	r0, r3
 1792 001f 05 00 00 00             		bsr	_LIB_Fixed_Mul
 1793                             	.LVL195:
1564:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	   coeff.fractional = LIB_FIXED_FRACTIONAL_FROMFLOAT(1.4,7);
1565:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	   coeff.notation = 7;
1566:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	   LIB_Fixed_Div(result, coeff, &Vmeasured);
 1794                             		.loc 1 1566 0
 1795 0023 EC 01                   		mov.L	[r0], r1
 1796 0025 FB 22 00 07 B3 00       		mov.L	#0xb30700, r2
 1797 002b 71 03 04                		add	#4, r0, r3
 1798 002e 05 00 00 00             		bsr	_LIB_Fixed_Div
 1799                             	.LVL196:
1567:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1568:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	   *valuePtr = Vmeasured;
 1800                             		.loc 1 1568 0
 1801 0032 A8 09                   		mov.L	4[r0], r1
 1802 0034 E3 71                   		mov.L	r1, [r7]
1569:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	   funcValue = LIB_Fixed_Round(Vmeasured);
 1803                             		.loc 1 1569 0
 1804 0036 05 00 00 00             		bsr	_LIB_Fixed_Round
 1805                             	.LVL197:
1570:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1571:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 
1572:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	   return((uint8_t)funcValue);
1573:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }
 1806                             		.loc 1 1573 0
 1807 003a 5B 11                   		movu.B	r1, r1
 1808                             	.LVL198:
 1809 003c 3F 77 03                		rtsd	#12, r7-r7
 1810                             	.LFE22:
 1812                             		.section	.text.APP_AlphaCoefficientsComputation,"ax",@progbits
 1813                             		.global	_APP_AlphaCoefficientsComputation
 1815                             	_APP_AlphaCoefficientsComputation:
 1816                             	.LFB21:
1423:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** {
 1817                             		.loc 1 1423 0
 1818 0000 7E A7                   		push.l	r7
 1819                             	.LCFI18:
 1820 0002 60 C0                   		sub	#12, r0
 1821                             	.LCFI19:
1431:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	 app_alpha_voltage_on_power.fractional = 1;
 1822                             		.loc 1 1431 0
 1823 0004 FB 72 00 00 00 00       		mov.L	#_app_alpha_voltage_on_power, r7
 1824 000a 3D 70 01                		mov.W	#1, [r7]
1432:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	 app_alpha_voltage_on_power.notation = 0;
 1825                             		.loc 1 1432 0
 1826 000d 3C 72 00                		mov.B	#0, 2[r7]
1433:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	 app_alpha_voltage_on_durationON.fractional = 1;
 1827                             		.loc 1 1433 0
 1828 0010 FB 72 00 00 00 00       		mov.L	#_app_alpha_voltage_on_durationON, r7
 1829 0016 3D 70 01                		mov.W	#1, [r7]
1434:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	 app_alpha_voltage_on_durationON.notation = 0;
 1830                             		.loc 1 1434 0
 1831 0019 3C 72 00                		mov.B	#0, 2[r7]
1435:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	 app_alpha_voltage_temperature_on_durationON.fractional = 1;
 1832                             		.loc 1 1435 0
 1833 001c FB 72 00 00 00 00       		mov.L	#_app_alpha_voltage_temperature_on_durationON, r7
 1834 0022 3D 70 01                		mov.W	#1, [r7]
1436:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	 app_alpha_voltage_temperature_on_durationON.notation = 0;
 1835                             		.loc 1 1436 0
 1836 0025 3C 72 00                		mov.B	#0, 2[r7]
1437:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	 app_alpha_temperature_on_durationOFF.fractional = 1;
 1837                             		.loc 1 1437 0
 1838 0028 FB 72 00 00 00 00       		mov.L	#_app_alpha_temperature_on_durationOFF, r7
 1839 002e 3D 70 01                		mov.W	#1, [r7]
1438:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	 app_alpha_temperature_on_durationOFF.notation = 0;
 1840                             		.loc 1 1438 0
 1841 0031 3C 72 00                		mov.B	#0, 2[r7]
1442:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	if(ExtMotor_DataBuffer[1] > 0)
 1842                             		.loc 1 1442 0
 1843 0034 FB 72 00 00 00 00       		mov.L	#_ExtMotor_DataBuffer, r7
 1844 003a B0 7F                   		movu.B	1[r7], r7
 1845 003c 61 07                   		cmp	#0, r7
 1846 003e 20 0E                   		beq	.L222
1444:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		VlineCalcolusFromDSP(&Vupd);
 1847                             		.loc 1 1444 0
 1848 0040 FB 12 00 00 00 00       		mov.L	#_Vupd, r1
 1849 0046 05 00 00 00             		bsr	_VlineCalcolusFromDSP
 1850                             	.LVL199:
 1851 004a 2E 30                   		bra	.L223
 1852                             	.L222:
1446:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	else if(MachineStatistics.lastCycles[MOST_RECENT_STAT_CYCLE_POS].Vline > 0)
 1853                             		.loc 1 1446 0
 1854 004c FB 72 00 00 00 00       		mov.L	#_MachineStatistics, r7
 1855 0052 59 71 97                		movu.B	151[r7], r1
 1856 0055 61 01                   		cmp	#0, r1
 1857 0057 20 10                   		beq	.L224
1448:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		LIB_Fixed_FromInt(MachineStatistics.lastCycles[MOST_RECENT_STAT_CYCLE_POS].Vline,7, &Vupd);
 1858                             		.loc 1 1448 0
 1859 0059 66 72                   		mov	#7, r2
 1860 005b FB 32 00 00 00 00       		mov.L	#_Vupd, r3
 1861 0061 05 00 00 00             		bsr	_LIB_Fixed_FromInt
 1862                             	.LVL200:
 1863 0065 2E 15                   		bra	.L223
 1864                             	.L224:
1452:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		Vupd.fractional = Vref.fractional ;
 1865                             		.loc 1 1452 0
 1866 0067 FB 72 00 00 00 00       		mov.L	#_Vupd, r7
 1867 006d FB E2 00 00 00 00       		mov.L	#_Vref, r14
 1868 0073 D0 E7                   		mov.W	[r14], [r7]
1453:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		Vupd.notation = Vref.notation;
 1869                             		.loc 1 1453 0
 1870 0075 C5 E7 02 02             		mov.B	2[r14], 2[r7]
 1871 0079 03                      		.balign 2,3,5
 1872                             	.L223:
1458:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 	LIB_Fixed_FromInt(GITemp, 8, &Tupd);
 1873                             		.loc 1 1458 0
 1874 007a FB 72 00 00 00 00       		mov.L	#_GITemp, r7
 1875 0080 58 71                   		movu.B	[r7], r1
 1876 0082 66 82                   		mov	#8, r2
 1877 0084 FB 32 00 00 00 00       		mov.L	#_Tupd, r3
 1878 008a 05 00 00 00             		bsr	_LIB_Fixed_FromInt
 1879                             	.LVL201:
1464:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 if(LIB_Fixed_Div(Vupd, Vref, &result_var))
 1880                             		.loc 1 1464 0
 1881 008e FB 72 00 00 00 00       		mov.L	#_Vupd, r7
 1882 0094 EC 71                   		mov.L	[r7], r1
 1883 0096 FB 72 00 00 00 00       		mov.L	#_Vref, r7
 1884 009c EC 72                   		mov.L	[r7], r2
 1885 009e 71 03 08                		add	#8, r0, r3
 1886 00a1 05 00 00 00             		bsr	_LIB_Fixed_Div
 1887                             	.LVL202:
1469:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 if(LIB_Fixed_Sqr(result_var,&result_var_1))
 1888                             		.loc 1 1469 0
 1889 00a5 A8 81                   		mov.L	8[r0], r1
 1890 00a7 71 02 04                		add	#4, r0, r2
 1891 00aa 05 00 00 00             		bsr	_LIB_Fixed_Sqr
 1892                             	.LVL203:
1473:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 if(result_var_1.fractional != 0)
 1893                             		.loc 1 1473 0
 1894 00ae DD 0E 02                		mov.W	4[r0], r14
 1895 00b1 DF E7                   		mov.W	r14, r7
 1896 00b3 61 07                   		cmp	#0, r7
 1897 00b5 20 0F                   		beq	.L225
1475:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 app_alpha_voltage_on_power.fractional = result_var_1.fractional;
 1898                             		.loc 1 1475 0
 1899 00b7 FB 72 00 00 00 00       		mov.L	#_app_alpha_voltage_on_power, r7
 1900 00bd D3 7E                   		mov.W	r14, [r7]
1476:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 app_alpha_voltage_on_power.notation = result_var_1.notation;
 1901                             		.loc 1 1476 0
 1902 00bf C5 07 06 02             		mov.B	6[r0], 2[r7]
 1903 00c3 03                      		.balign 2,3,5
 1904                             	.L225:
1482:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 if(LIB_Fixed_Div(Vref, Vupd, &result_var))
 1905                             		.loc 1 1482 0
 1906 00c4 FB 72 00 00 00 00       		mov.L	#_Vref, r7
 1907 00ca EC 71                   		mov.L	[r7], r1
 1908 00cc FB 72 00 00 00 00       		mov.L	#_Vupd, r7
 1909 00d2 EC 72                   		mov.L	[r7], r2
 1910 00d4 71 03 08                		add	#8, r0, r3
 1911 00d7 05 00 00 00             		bsr	_LIB_Fixed_Div
 1912                             	.LVL204:
1487:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 if(LIB_Fixed_Sqr(result_var,&result_vefd))
 1913                             		.loc 1 1487 0
 1914 00db A8 81                   		mov.L	8[r0], r1
 1915 00dd EF 02                   		mov.L	r0, r2
 1916 00df 05 00 00 00             		bsr	_LIB_Fixed_Sqr
 1917                             	.LVL205:
1492:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 if(result_vefd.fractional != 0)
 1918                             		.loc 1 1492 0
 1919 00e3 DC 07                   		mov.W	[r0], r7
 1920 00e5 61 07                   		cmp	#0, r7
 1921 00e7 20 0F                   		beq	.L226
1494:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 app_alpha_voltage_on_durationON.fractional = result_var_1.fractional;
 1922                             		.loc 1 1494 0
 1923 00e9 FB 72 00 00 00 00       		mov.L	#_app_alpha_voltage_on_durationON, r7
 1924 00ef D1 07 02                		mov.W	4[r0], [r7]
1495:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 app_alpha_voltage_on_durationON.notation = result_var_1.notation;
 1925                             		.loc 1 1495 0
 1926 00f2 C5 07 06 02             		mov.B	6[r0], 2[r7]
 1927                             		.balign 2,3,4
 1928                             	.L226:
1501:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 app_var.notation = 4;
 1929                             		.loc 1 1501 0
 1930 00f6 FB 7E 00 04 1C          		mov.L	#0x1c0400, r7
1503:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 if(LIB_Fixed_Sub(Tref,Tupd,&result_var))
 1931                             		.loc 1 1503 0
 1932 00fb FB E2 00 00 00 00       		mov.L	#_Tref, r14
 1933 0101 EC E1                   		mov.L	[r14], r1
 1934 0103 FB E2 00 00 00 00       		mov.L	#_Tupd, r14
 1935 0109 EC E2                   		mov.L	[r14], r2
 1936 010b 66 83                   		mov.L	#8, r3
 1937 010d 4B 03                   		add	r0, r3
 1938 010f 05 00 00 00             		bsr	_LIB_Fixed_Sub
 1939                             	.LVL206:
1507:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 if(LIB_Fixed_Div(result_var, app_var, &result_var_1))
 1940                             		.loc 1 1507 0
 1941 0113 A8 81                   		mov.L	8[r0], r1
 1942 0115 EF 72                   		mov.L	r7, r2
 1943 0117 71 03 04                		add	#4, r0, r3
 1944 011a 05 00 00 00             		bsr	_LIB_Fixed_Div
 1945                             	.LVL207:
1512:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 if(LIB_Fixed_Mul(result_var_1,result_vefd,&result_var))
 1946                             		.loc 1 1512 0
 1947 011e A8 09                   		mov.L	4[r0], r1
 1948 0120 EC 02                   		mov.L	[r0], r2
 1949 0122 66 83                   		mov.L	#8, r3
 1950 0124 4B 03                   		add	r0, r3
 1951 0126 05 00 00 00             		bsr	_LIB_Fixed_Mul
 1952                             	.LVL208:
1517:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 if(result_var.fractional != 0)
 1953                             		.loc 1 1517 0
 1954 012a 99 04                   		mov.W	8[r0], r4
 1955 012c DF 4E                   		mov.W	r4, r14
 1956 012e 61 0E                   		cmp	#0, r14
 1957 0130 20 0E                   		beq	.L227
1519:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 app_alpha_voltage_temperature_on_durationON.fractional = result_var.fractional;
 1958                             		.loc 1 1519 0
 1959 0132 FB E2 00 00 00 00       		mov.L	#_app_alpha_voltage_temperature_on_durationON, r14
 1960 0138 D3 E4                   		mov.W	r4, [r14]
1520:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 app_alpha_voltage_temperature_on_durationON.notation = result_var.notation;
 1961                             		.loc 1 1520 0
 1962 013a C5 0E 0A 02             		mov.B	10[r0], 2[r14]
 1963                             		.balign 2,3,4
 1964                             	.L227:
1523:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 result_var_1.fractional = 1;
 1965                             		.loc 1 1523 0
 1966 013e 3D 02 01                		mov.W	#1, 4[r0]
1524:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 result_var_1.notation = 0;
 1967                             		.loc 1 1524 0
 1968 0141 3C 06 00                		mov.B	#0, 6[r0]
1525:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 if(Tupd.fractional > Tref.fractional)
 1969                             		.loc 1 1525 0
 1970 0144 FB 42 00 00 00 00       		mov.L	#_Tupd, r4
 1971 014a FB E2 00 00 00 00       		mov.L	#_Tref, r14
 1972 0150 DC 42                   		mov.W	[r4], r2
 1973 0152 06 44 E2                		cmp	[r14].W, r2
 1974 0155 2B 19                   		ble	.L228
1527:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 if(LIB_Fixed_Sub(Tupd,Tref,&result_var))
 1975                             		.loc 1 1527 0
 1976 0157 EC 41                   		mov.L	[r4], r1
 1977 0159 EC E2                   		mov.L	[r14], r2
 1978 015b 71 03 08                		add	#8, r0, r3
 1979 015e 05 00 00 00             		bsr	_LIB_Fixed_Sub
 1980                             	.LVL209:
1531:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		 if(LIB_Fixed_Div(result_var, app_var, &result_var_1))
 1981                             		.loc 1 1531 0
 1982 0162 A8 81                   		mov.L	8[r0], r1
 1983 0164 EF 72                   		mov.L	r7, r2
 1984 0166 71 03 04                		add	#4, r0, r3
 1985 0169 05 00 00 00             		bsr	_LIB_Fixed_Div
 1986                             	.LVL210:
 1987 016d 03                      		.balign 2,3,5
 1988                             	.L228:
1536:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  	 if(result_var_1.fractional != 0)
 1989                             		.loc 1 1536 0
 1990 016e DD 0E 02                		mov.W	4[r0], r14
 1991 0171 DF E7                   		mov.W	r14, r7
 1992 0173 61 07                   		cmp	#0, r7
 1993 0175 20 0F                   		beq	.L221
1538:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c ****  		app_alpha_temperature_on_durationOFF.fractional = result_var_1.fractional;
 1994                             		.loc 1 1538 0
 1995 0177 FB 72 00 00 00 00       		mov.L	#_app_alpha_temperature_on_durationOFF, r7
 1996 017d D3 7E                   		mov.W	r14, [r7]
1539:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** 		app_alpha_temperature_on_durationOFF.notation = result_var_1.notation;
 1997                             		.loc 1 1539 0
 1998 017f C5 07 06 02             		mov.B	6[r0], 2[r7]
 1999 0183 03                      		.balign 2,3,2
 2000                             	.L221:
1542:C:/Workspace/FW_Inertia/branch_indesit/Inertia/General\CstmFuncLib.c **** }
 2001                             		.loc 1 1542 0
 2002 0184 3F 77 04                		rtsd	#16, r7-r7
 2003                             	.LFE21:
 2005                             		.comm	_Vupd,4,2
 2006                             		.comm	_Tupd,4,2
 2007                             		.comm	_turbidityCal,2,2
 2388                             	.Letext0:
 2389                             		.file 2 "C:\\Workspace\\FW_Inertia\\branch_indesit\\HAL\\HAL_General/StandardTypes.h"
 2390                             		.file 3 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_SwTimersCounters/SwTimersCo
 2391                             		.file 4 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_EnergyMeterSw/PM_EnergyMete
 2392                             		.file 5 "C:\\Renesas\\E2_STU~1\\GNURXV~1.01-\\rx-ELF/rx-elf/optlibinc/stdlib.h"
 2393                             		.file 6 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_Library/LIB_Utilities.h"
 2394                             		.file 7 "C:\\Workspace\\FW_Inertia\\branch_indesit\\PlatformLibrary\\LIB_Fixed/LIB_FixedExp.h"
 2395                             		.file 8 "C:\\Workspace\\FW_Inertia\\branch_indesit\\CFG_DishWasher\\CFG_Inertia/ProductSafety_cfg.
 2396                             		.file 9 "C:/Workspace/FW_Inertia/branch_indesit/Inertia/General/CstmDefines.h"
 2397                             		.file 10 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Application_Platform/APP_Types.h"
 2398                             		.file 11 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_BusCOMM/BCP_General.h"
 2399                             		.file 12 "C:\\Workspace\\FW_Inertia\\branch_indesit\\CFG_DishWasher\\CFG_Inertia/BusCommPltf_cfg.h
 2400                             		.file 13 "C:/Workspace/FW_Inertia/branch_indesit/Inertia/General/CstmTypes.h"
 2401                             		.file 14 "C:/Workspace/FW_Inertia/branch_indesit/Inertia/General/CstmGlobal.h"
 2402                             		.file 15 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_BusCOMM/BCP_BusCommMng.h"
 2403                             		.file 16 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Application_Platform/APP_Global.h"
 2404                             		.file 17 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\UserInterface/DW_Regulations.h"
 2405                             		.file 18 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_PulseCounter/PM_PulseCount
 2406                             		.file 19 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\Control/HighLevel_Io_manager.h"
 2407                             		.file 20 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Application_Platform/APP_callback.h"
 2408                             		.file 21 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Application_Platform/APP_Fault.h"
DEFINED SYMBOLS
                            *ABS*:00000000 CstmFuncLib.c
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:7      .text.updateRegWaterLoaded:00000000 _updateRegWaterLoaded
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11     .text.updateRegWaterLoaded:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:49     .text.clearRegWaterLoaded:00000000 _clearRegWaterLoaded
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:53     .text.clearRegWaterLoaded:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:63     .text.WaterLoadedReset:00000000 _WaterLoadedReset
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:67     .text.WaterLoadedReset:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:79     .text.UpdateMachineState:00000000 _UpdateMachineState
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:82     .text.UpdateMachineState:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:137    .text.GetDeltaFromVariation:00000000 _GetDeltaFromVariation
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:141    .text.GetDeltaFromVariation:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:179    .text.TabQueryB:00000000 _TabQueryB
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:184    .text.TabQueryB:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:227    .text.GetModifierData:00000000 _GetModifierData
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:231    .text.GetModifierData:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:309    .text.TabQuery:00000000 _TabQuery
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:313    .text.TabQuery:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:634    .text.GetModifierValue:00000000 _GetModifierValue
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:638    .text.GetModifierValue:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:879    .text.TurbidityCalibrationCmd:00000000 _TurbidityCalibrationCmd
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:883    .text.TurbidityCalibrationCmd:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:898    .text.TurbidityPwmValManager:00000000 _TurbidityPwmValManager
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:902    .text.TurbidityPwmValManager:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1032   .text.TurbidityCalibrationManager:00000000 _TurbidityCalibrationManager
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1035   .text.TurbidityCalibrationManager:00000000 L0
                            *COM*:00000002 _turbidityCal
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1139   .text.StopMicroprogCounters:00000000 _StopMicroprogCounters
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1143   .text.StopMicroprogCounters:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1215   .text.IncWordWithCheck:00000000 _IncWordWithCheck
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1220   .text.IncWordWithCheck:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1234   .text.UpdateStateBitmaps:00000000 _UpdateStateBitmaps
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1237   .text.UpdateStateBitmaps:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1474   .text.IsOvenRunningDelay:00000000 _IsOvenRunningDelay
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1478   .text.IsOvenRunningDelay:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1491   .text.IsOvenPauseFAult:00000000 _IsOvenPauseFAult
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1495   .text.IsOvenPauseFAult:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1508   .text.UpdateInfoBufferToPowerMeterModule:00000000 _UpdateInfoBufferToPowerMeterModule
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1511   .text.UpdateInfoBufferToPowerMeterModule:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1572   .text.GetModifierValueAPP2_0:00000000 _GetModifierValueAPP2_0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1576   .text.GetModifierValueAPP2_0:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1661   .text.GetAlphaModifierValueAPP2_0:00000000 _GetAlphaModifierValueAPP2_0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1665   .text.GetAlphaModifierValueAPP2_0:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1735   .text.APP_GetReferenceParameters:00000000 _APP_GetReferenceParameters
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1738   .text.APP_GetReferenceParameters:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1771   .text.VlineCalcolusFromDSP:00000000 _VlineCalcolusFromDSP
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1775   .text.VlineCalcolusFromDSP:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1815   .text.APP_AlphaCoefficientsComputation:00000000 _APP_AlphaCoefficientsComputation
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1818   .text.APP_AlphaCoefficientsComputation:00000000 L0
                            *COM*:00000004 _Vupd
                            *COM*:00000004 _Tupd
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:913    .rodata.TurbidityPwmValManager:00000000 .L113
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:920    .text.TurbidityPwmValManager:0000001b .L108
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:982    .text.TurbidityPwmValManager:0000007e .L109
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:959    .text.TurbidityPwmValManager:00000056 .L110
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:988    .text.TurbidityPwmValManager:00000085 .L111
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:997    .text.TurbidityPwmValManager:00000090 .L112
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:2009   .debug_frame:00000000 .Lframe0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:8      .text.updateRegWaterLoaded:00000000 .LFB0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:50     .text.clearRegWaterLoaded:00000000 .LFB1
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:64     .text.WaterLoadedReset:00000000 .LFB2
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:80     .text.UpdateMachineState:00000000 .LFB3
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:138    .text.GetDeltaFromVariation:00000000 .LFB5
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:180    .text.TabQueryB:00000000 .LFB6
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:228    .text.GetModifierData:00000000 .LFB7
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:310    .text.TabQuery:00000000 .LFB8
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:635    .text.GetModifierValue:00000000 .LFB9
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:880    .text.TurbidityCalibrationCmd:00000000 .LFB10
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:899    .text.TurbidityPwmValManager:00000000 .LFB11
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1033   .text.TurbidityCalibrationManager:00000000 .LFB12
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1140   .text.StopMicroprogCounters:00000000 .LFB13
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1216   .text.IncWordWithCheck:00000000 .LFB14
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1235   .text.UpdateStateBitmaps:00000000 .LFB4
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1475   .text.IsOvenRunningDelay:00000000 .LFB15
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1492   .text.IsOvenPauseFAult:00000000 .LFB16
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1509   .text.UpdateInfoBufferToPowerMeterModule:00000000 .LFB17
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1573   .text.GetModifierValueAPP2_0:00000000 .LFB18
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1662   .text.GetAlphaModifierValueAPP2_0:00000000 .LFB19
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1736   .text.APP_GetReferenceParameters:00000000 .LFB20
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1772   .text.VlineCalcolusFromDSP:00000000 .LFB22
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1816   .text.APP_AlphaCoefficientsComputation:00000000 .LFB21
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:7823   .debug_abbrev:00000000 .Ldebug_abbrev0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11117  .debug_str:00001a0c .LASF543
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10897  .debug_str:000012c2 .LASF544
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10239  .debug_ranges:00000000 .Ldebug_ranges0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10295  .debug_line:00000000 .Ldebug_line0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10907  .debug_str:0000133e .LASF0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11193  .debug_str:00001cd4 .LASF2
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11171  .debug_str:00001c00 .LASF1
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11045  .debug_str:000017b9 .LASF3
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11317  .debug_str:00002090 .LASF4
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11279  .debug_str:00001f69 .LASF5
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10759  .debug_str:00000e76 .LASF6
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10343  .debug_str:0000015b .LASF7
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10455  .debug_str:00000541 .LASF8
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11031  .debug_str:00001737 .LASF9
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10841  .debug_str:00001139 .LASF10
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10521  .debug_str:0000075b .LASF11
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10547  .debug_str:00000808 .LASF12
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10299  .debug_str:00000009 .LASF13
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10519  .debug_str:0000074f .LASF14
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11219  .debug_str:00001dac .LASF15
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10891  .debug_str:000012a3 .LASF20
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11161  .debug_str:00001b95 .LASF16
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10331  .debug_str:000000e4 .LASF17
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11341  .debug_str:00002160 .LASF18
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10313  .debug_str:00000067 .LASF19
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11007  .debug_str:00001672 .LASF21
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11111  .debug_str:000019e1 .LASF22
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10447  .debug_str:000004ee .LASF23
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11009  .debug_str:00001684 .LASF24
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11069  .debug_str:00001893 .LASF49
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11231  .debug_str:00001e02 .LASF25
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10735  .debug_str:00000d85 .LASF26
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10415  .debug_str:000003e1 .LASF27
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11147  .debug_str:00001b29 .LASF28
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10799  .debug_str:00000fc2 .LASF29
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10677  .debug_str:00000bc0 .LASF30
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11073  .debug_str:000018b8 .LASF31
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10585  .debug_str:00000912 .LASF32
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11019  .debug_str:000016d1 .LASF33
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10309  .debug_str:00000042 .LASF34
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10845  .debug_str:00001158 .LASF125
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10749  .debug_str:00000e17 .LASF35
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10483  .debug_str:00000611 .LASF36
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10793  .debug_str:00000fa3 .LASF37
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10379  .debug_str:00000297 .LASF38
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10893  .debug_str:000012aa .LASF39
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11083  .debug_str:000018fb .LASF40
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11011  .debug_str:00001696 .LASF41
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10905  .debug_str:00001330 .LASF42
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10729  .debug_str:00000d4f .LASF43
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11351  .debug_str:000021a7 .LASF44
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10545  .debug_str:000007f1 .LASF45
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10801  .debug_str:00000fd8 .LASF46
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11335  .debug_str:0000212d .LASF47
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10463  .debug_str:00000573 .LASF48
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10765  .debug_str:00000ead .LASF50
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11109  .debug_str:000019ce .LASF51
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10939  .debug_str:00001423 .LASF52
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11005  .debug_str:00001651 .LASF53
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10619  .debug_str:000009ee .LASF54
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11175  .debug_str:00001c28 .LASF55
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10305  .debug_str:00000028 .LASF56
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10981  .debug_str:00001599 .LASF57
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11185  .debug_str:00001c8a .LASF58
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11321  .debug_str:000020af .LASF59
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11217  .debug_str:00001d95 .LASF60
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10397  .debug_str:00000325 .LASF61
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10761  .debug_str:00000e88 .LASF62
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10383  .debug_str:000002b6 .LASF63
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10813  .debug_str:0000104d .LASF64
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10441  .debug_str:000004b2 .LASF65
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11127  .debug_str:00001a7c .LASF66
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11055  .debug_str:0000182c .LASF67
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10417  .debug_str:000003ef .LASF68
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10541  .debug_str:000007d3 .LASF69
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10975  .debug_str:0000155c .LASF70
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10835  .debug_str:0000110b .LASF71
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11183  .debug_str:00001c70 .LASF72
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10927  .debug_str:000013d5 .LASF73
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10827  .debug_str:000010cc .LASF74
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11309  .debug_str:0000204f .LASF75
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11213  .debug_str:00001d6d .LASF76
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11033  .debug_str:0000174e .LASF77
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10515  .debug_str:0000071c .LASF78
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11157  .debug_str:00001b67 .LASF79
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10359  .debug_str:000001d3 .LASF80
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11115  .debug_str:000019f5 .LASF81
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11167  .debug_str:00001bd6 .LASF82
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10783  .debug_str:00000f3c .LASF83
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11191  .debug_str:00001cc3 .LASF84
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11189  .debug_str:00001cb1 .LASF85
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10731  .debug_str:00000d68 .LASF86
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11091  .debug_str:0000192b .LASF87
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11349  .debug_str:00002198 .LASF88
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10459  .debug_str:00000559 .LASF89
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11177  .debug_str:00001c40 .LASF90
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11135  .debug_str:00001ac6 .LASF91
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10945  .debug_str:00001459 .LASF92
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11263  .debug_str:00001eff .LASF93
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10573  .debug_str:000008c3 .LASF94
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10941  .debug_str:0000143c .LASF95
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11201  .debug_str:00001d14 .LASF96
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10643  .debug_str:00000ab9 .LASF97
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11241  .debug_str:00001e4f .LASF98
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10693  .debug_str:00000c48 .LASF99
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10685  .debug_str:00000bf6 .LASF100
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11331  .debug_str:00002109 .LASF101
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10365  .debug_str:00000202 .LASF102
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10511  .debug_str:000006fe .LASF103
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10323  .debug_str:000000a3 .LASF104
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10969  .debug_str:0000152b .LASF105
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10587  .debug_str:00000917 .LASF106
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10387  .debug_str:000002df .LASF107
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10915  .debug_str:00001388 .LASF108
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10663  .debug_str:00000b5f .LASF109
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11211  .debug_str:00001d56 .LASF110
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10525  .debug_str:00000768 .LASF111
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11163  .debug_str:00001b9a .LASF112
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10785  .debug_str:00000f52 .LASF113
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10983  .debug_str:000015b1 .LASF114
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11359  .debug_str:000021e6 .LASF115
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11339  .debug_str:00002142 .LASF116
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10507  .debug_str:000006da .LASF117
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11169  .debug_str:00001bee .LASF118
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10947  .debug_str:00001467 .LASF119
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11221  .debug_str:00001db3 .LASF120
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11131  .debug_str:00001a92 .LASF121
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11379  .debug_str:000022c6 .LASF122
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11225  .debug_str:00001ddb .LASF123
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11345  .debug_str:0000218c .LASF124
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11251  .debug_str:00001ea1 .LASF126
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10555  .debug_str:0000084c .LASF127
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11275  .debug_str:00001f4a .LASF128
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10437  .debug_str:000004a4 .LASF129
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10955  .debug_str:000014a6 .LASF130
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10509  .debug_str:000006f2 .LASF131
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11327  .debug_str:000020e1 .LASF132
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11291  .debug_str:00001fb3 .LASF133
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11125  .debug_str:00001a6a .LASF134
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10399  .debug_str:00000339 .LASF135
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10867  .debug_str:000011f4 .LASF136
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11059  .debug_str:0000184e .LASF137
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10985  .debug_str:000015c6 .LASF138
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11095  .debug_str:00001945 .LASF139
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11277  .debug_str:00001f50 .LASF140
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11285  .debug_str:00001f8d .LASF141
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11103  .debug_str:000019a1 .LASF142
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10993  .debug_str:000015fa .LASF143
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10741  .debug_str:00000dcc .LASF144
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10895  .debug_str:000012b9 .LASF145
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10369  .debug_str:00000235 .LASF146
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10875  .debug_str:0000123c .LASF147
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10575  .debug_str:000008d4 .LASF148
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10595  .debug_str:0000094e .LASF149
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10539  .debug_str:000007c1 .LASF150
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11081  .debug_str:000018f3 .LASF151
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11385  .debug_str:00002316 .LASF152
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10577  .debug_str:000008da .LASF153
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10815  .debug_str:00001060 .LASF154
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10321  .debug_str:00000098 .LASF155
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10601  .debug_str:00000985 .LASF156
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10631  .debug_str:00000a52 .LASF157
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10375  .debug_str:00000272 .LASF158
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10565  .debug_str:00000892 .LASF159
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10837  .debug_str:0000111f .LASF160
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10557  .debug_str:0000085a .LASF161
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10443  .debug_str:000004c1 .LASF162
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11029  .debug_str:00001720 .LASF163
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11369  .debug_str:00002253 .LASF164
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10689  .debug_str:00000c1e .LASF165
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10857  .debug_str:000011a5 .LASF166
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10687  .debug_str:00000c11 .LASF167
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10513  .debug_str:0000070f .LASF168
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10355  .debug_str:000001bb .LASF169
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11271  .debug_str:00001f35 .LASF170
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11079  .debug_str:000018e6 .LASF171
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10977  .debug_str:00001576 .LASF172
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11085  .debug_str:00001900 .LASF173
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11323  .debug_str:000020c2 .LASF174
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10303  .debug_str:0000001b .LASF175
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10861  .debug_str:000011d0 .LASF176
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10479  .debug_str:000005f1 .LASF177
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10381  .debug_str:000002a0 .LASF178
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11133  .debug_str:00001ab3 .LASF179
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10859  .debug_str:000011c0 .LASF180
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10433  .debug_str:0000048a .LASF181
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11015  .debug_str:000016bc .LASF182
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10767  .debug_str:00000ec1 .LASF183
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10345  .debug_str:00000163 .LASF184
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11205  .debug_str:00001d3a .LASF185
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11105  .debug_str:000019ac .LASF186
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10435  .debug_str:00000493 .LASF187
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11229  .debug_str:00001ded .LASF188
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10661  .debug_str:00000b47 .LASF189
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11187  .debug_str:00001c9a .LASF190
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11303  .debug_str:00002035 .LASF191
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10899  .debug_str:00001307 .LASF192
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10715  .debug_str:00000ce6 .LASF238
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10629  .debug_str:00000a4c .LASF193
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10809  .debug_str:0000101a .LASF194
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11227  .debug_str:00001de4 .LASF195
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11347  .debug_str:00002192 .LASF196
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10855  .debug_str:0000119e .LASF197
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10503  .debug_str:000006c4 .LASF198
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11047  .debug_str:000017c2 .LASF199
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10825  .debug_str:000010b4 .LASF200
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11137  .debug_str:00001ad5 .LASF201
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10935  .debug_str:00001414 .LASF202
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11207  .debug_str:00001d3f .LASF203
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11255  .debug_str:00001ecc .LASF204
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10477  .debug_str:000005e5 .LASF205
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10781  .debug_str:00000f32 .LASF206
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10353  .debug_str:000001ae .LASF207
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10615  .debug_str:000009d5 .LASF208
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10361  .debug_str:000001e8 .LASF209
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10673  .debug_str:00000ba3 .LASF210
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11039  .debug_str:00001783 .LASF211
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10523  .debug_str:00000763 .LASF212
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10911  .debug_str:0000135c .LASF213
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10873  .debug_str:00001228 .LASF214
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11377  .debug_str:000022bb .LASF215
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10611  .debug_str:000009c3 .LASF216
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10495  .debug_str:00000677 .LASF217
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11253  .debug_str:00001eb5 .LASF218
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10659  .debug_str:00000b3f .LASF219
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11249  .debug_str:00001e98 .LASF220
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11273  .debug_str:00001f42 .LASF221
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11123  .debug_str:00001a65 .LASF222
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11077  .debug_str:000018dc .LASF223
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10371  .debug_str:0000024d .LASF224
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10625  .debug_str:00000a2c .LASF225
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11129  .debug_str:00001a8c .LASF226
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11003  .debug_str:0000164c .LASF227
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10965  .debug_str:00001515 .LASF228
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11319  .debug_str:000020a3 .LASF229
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10395  .debug_str:00000317 .LASF230
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10639  .debug_str:00000a94 .LASF231
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11067  .debug_str:00001881 .LASF232
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10607  .debug_str:000009a5 .LASF233
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10391  .debug_str:00000303 .LASF234
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10421  .debug_str:00000426 .LASF235
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10991  .debug_str:000015f1 .LASF236
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10887  .debug_str:00001294 .LASF237
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10949  .debug_str:00001489 .LASF239
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11233  .debug_str:00001e13 .LASF240
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10487  .debug_str:00000644 .LASF241
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10923  .debug_str:000013b9 .LASF242
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10531  .debug_str:0000079a .LASF243
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11017  .debug_str:000016ca .LASF244
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11367  .debug_str:0000224e .LASF245
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10311  .debug_str:00000055 .LASF246
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10411  .debug_str:000003b8 .LASF247
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10697  .debug_str:00000c76 .LASF248
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10497  .debug_str:00000682 .LASF249
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11149  .debug_str:00001b3b .LASF250
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10613  .debug_str:000009ce .LASF251
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10633  .debug_str:00000a63 .LASF252
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10651  .debug_str:00000afa .LASF253
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10843  .debug_str:00001147 .LASF254
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10807  .debug_str:0000100b .LASF255
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10879  .debug_str:00001256 .LASF256
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11181  .debug_str:00001c62 .LASF257
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10589  .debug_str:00000924 .LASF258
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10453  .debug_str:00000539 .LASF259
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11383  .debug_str:00002309 .LASF260
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10617  .debug_str:000009db .LASF261
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10543  .debug_str:000007e0 .LASF262
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11237  .debug_str:00001e31 .LASF263
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10623  .debug_str:00000a1a .LASF264
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10561  .debug_str:00000878 .LASF265
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10319  .debug_str:00000082 .LASF266
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10967  .debug_str:0000151f .LASF267
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10885  .debug_str:00001287 .LASF268
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10719  .debug_str:00000cfb .LASF269
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10301  .debug_str:00000010 .LASF270
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10583  .debug_str:00000901 .LASF271
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10457  .debug_str:0000054a .LASF272
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10679  .debug_str:00000bd5 .LASF273
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10535  .debug_str:000007b1 .LASF274
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10385  .debug_str:000002cd .LASF275
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10871  .debug_str:0000120f .LASF276
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11215  .debug_str:00001d82 .LASF277
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10373  .debug_str:0000025e .LASF278
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10653  .debug_str:00000b04 .LASF279
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10921  .debug_str:000013b2 .LASF280
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11053  .debug_str:00001815 .LASF281
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10865  .debug_str:000011e9 .LASF282
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11049  .debug_str:000017e4 .LASF283
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10635  .debug_str:00000a75 .LASF284
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10335  .debug_str:000000fb .LASF285
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11223  .debug_str:00001dd1 .LASF286
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11071  .debug_str:000018a2 .LASF287
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10307  .debug_str:00000037 .LASF288
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11021  .debug_str:000016e3 .LASF289
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10961  .debug_str:000014fd .LASF290
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10401  .debug_str:00000351 .LASF291
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11001  .debug_str:00001634 .LASF292
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10789  .debug_str:00000f7c .LASF293
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10951  .debug_str:00001496 .LASF294
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10469  .debug_str:000005a4 .LASF295
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11387  .debug_str:0000231e .LASF296
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10501  .debug_str:0000069b .LASF297
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10957  .debug_str:000014b6 .LASF298
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10527  .debug_str:00000780 .LASF299
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10919  .debug_str:000013a8 .LASF300
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10427  .debug_str:00000458 .LASF301
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11141  .debug_str:00001afb .LASF302
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10597  .debug_str:00000955 .LASF303
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10681  .debug_str:00000be5 .LASF304
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10505  .debug_str:000006d2 .LASF305
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10745  .debug_str:00000df3 .LASF306
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10787  .debug_str:00000f6a .LASF307
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10743  .debug_str:00000dd9 .LASF308
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10811  .debug_str:00001035 .LASF309
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10839  .debug_str:00001129 .LASF310
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10419  .debug_str:00000406 .LASF311
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11325  .debug_str:000020d0 .LASF312
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11261  .debug_str:00001ef6 .LASF313
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11373  .debug_str:00002288 .LASF314
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11075  .debug_str:000018cf .LASF315
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10997  .debug_str:00001611 .LASF316
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10591  .debug_str:00000932 .LASF317
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10995  .debug_str:00001604 .LASF318
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10471  .debug_str:000005b3 .LASF319
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10349  .debug_str:00000183 .LASF320
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11107  .debug_str:000019bd .LASF321
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11353  .debug_str:000021c1 .LASF322
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10797  .debug_str:00000fb4 .LASF323
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10315  .debug_str:00000070 .LASF324
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10675  .debug_str:00000bb8 .LASF325
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10605  .debug_str:0000099d .LASF326
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10795  .debug_str:00000fac .LASF327
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10717  .debug_str:00000ced .LASF328
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10529  .debug_str:0000078c .LASF329
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10317  .debug_str:00000078 .LASF330
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10671  .debug_str:00000b97 .LASF331
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10775  .debug_str:00000efb .LASF332
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10753  .debug_str:00000e41 .LASF333
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11023  .debug_str:000016f0 .LASF334
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10963  .debug_str:0000150f .LASF335
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10971  .debug_str:0000153c .LASF336
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10917  .debug_str:00001397 .LASF337
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10889  .debug_str:0000129d .LASF338
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11113  .debug_str:000019e6 .LASF339
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10863  .debug_str:000011df .LASF340
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10465  .debug_str:0000057c .LASF341
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11329  .debug_str:000020f7 .LASF342
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11297  .debug_str:00001ffa .LASF343
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10333  .debug_str:000000ef .LASF344
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10833  .debug_str:000010fb .LASF345
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10423  .debug_str:00000434 .LASF346
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10297  .debug_str:00000000 .LASF347
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10909  .debug_str:0000134b .LASF348
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10489  .debug_str:00000657 .LASF349
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11259  .debug_str:00001eea .LASF350
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11281  .debug_str:00001f72 .LASF351
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10581  .debug_str:000008f5 .LASF352
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10747  .debug_str:00000e0d .LASF353
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11087  .debug_str:00001911 .LASF354
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11197  .debug_str:00001ce1 .LASF355
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10627  .debug_str:00000a31 .LASF356
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10347  .debug_str:00000170 .LASF357
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11035  .debug_str:00001769 .LASF358
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10537  .debug_str:000007b6 .LASF359
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10559  .debug_str:0000086e .LASF360
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10823  .debug_str:000010a7 .LASF361
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10733  .debug_str:00000d76 .LASF362
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10727  .debug_str:00000d41 .LASF363
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11247  .debug_str:00001e86 .LASF364
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11037  .debug_str:00001775 .LASF365
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10757  .debug_str:00000e60 .LASF366
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10337  .debug_str:00000116 .LASF367
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10339  .debug_str:00000130 .LASF368
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10667  .debug_str:00000b76 .LASF369
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11381  .debug_str:000022e5 .LASF370
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11269  .debug_str:00001f21 .LASF371
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10481  .debug_str:000005fc .LASF372
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10517  .debug_str:0000072d .LASF373
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11371  .debug_str:0000226c .LASF374
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11299  .debug_str:00002004 .LASF375
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10467  .debug_str:00000589 .LASF376
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11287  .debug_str:00001f93 .LASF377
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11121  .debug_str:00001a4a .LASF378
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10737  .debug_str:00000d9b .LASF379
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11361  .debug_str:000021fd .LASF380
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10325  .debug_str:000000b2 .LASF381
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11099  .debug_str:00001969 .LASF382
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11139  .debug_str:00001ae1 .LASF383
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10599  .debug_str:0000096c .LASF384
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10657  .debug_str:00000b1f .LASF385
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10367  .debug_str:00000216 .LASF386
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11343  .debug_str:0000216e .LASF387
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10725  .debug_str:00000d29 .LASF388
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11295  .debug_str:00001fe2 .LASF389
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10403  .debug_str:00000369 .LASF390
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11119  .debug_str:00001a32 .LASF391
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11313  .debug_str:0000206e .LASF392
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10829  .debug_str:000010db .LASF393
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10739  .debug_str:00000db5 .LASF394
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11013  .debug_str:0000169d .LASF395
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10913  .debug_str:0000136c .LASF396
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10553  .debug_str:00000836 .LASF397
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10989  .debug_str:000015db .LASF398
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11179  .debug_str:00001c4d .LASF399
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10413  .debug_str:000003ca .LASF400
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11165  .debug_str:00001bb2 .LASF401
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10849  .debug_str:00001167 .LASF402
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10773  .debug_str:00000ed8 .LASF403
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11173  .debug_str:00001c0a .LASF404
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10959  .debug_str:000014e0 .LASF405
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11159  .debug_str:00001b7c .LASF406
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11363  .debug_str:0000221a .LASF407
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10883  .debug_str:00001272 .LASF408
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:44     .text.updateRegWaterLoaded:00000039 .LFE0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:8997   .debug_loc:00000000 .LLST0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10999  .debug_str:0000161e .LASF411
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11145  .debug_str:00001b15 .LASF456
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:58     .text.clearRegWaterLoaded:0000000e .LFE1
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10943  .debug_str:00001448 .LASF409
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:74     .text.WaterLoadedReset:00000010 .LFE2
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:69     .text.WaterLoadedReset:00000006 .LVL1
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10551  .debug_str:00000823 .LASF410
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:132    .text.UpdateMachineState:00000044 .LFE3
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9010   .debug_loc:00000020 .LLST1
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10579  .debug_str:000008eb .LASF412
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9023   .debug_loc:00000040 .LLST2
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10973  .debug_str:0000154e .LASF415
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10341  .debug_str:0000014a .LASF413
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9031   .debug_loc:00000054 .LLST3
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10777  .debug_str:00000f12 .LASF418
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:174    .text.GetDeltaFromVariation:00000025 .LFE5
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9061   .debug_loc:000000a1 .LLST4
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9074   .debug_loc:000000c1 .LLST5
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11089  .debug_str:00001921 .LASF414
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9088   .debug_loc:000000e2 .LLST6
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10655  .debug_str:00000b16 .LASF416
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11063  .debug_str:0000186d .LASF417
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9099   .debug_loc:00000100 .LLST7
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:154    .text.GetDeltaFromVariation:00000012 .LVL14
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10851  .debug_str:00001189 .LASF419
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:222    .text.TabQueryB:00000026 .LFE6
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10603  .debug_str:00000996 .LASF420
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9145   .debug_loc:00000151 .LLST8
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10803  .debug_str:00000fec .LASF421
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10723  .debug_str:00000d1f .LASF422
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9159   .debug_loc:00000172 .LLST9
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10461  .debug_str:0000056a .LASF423
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10751  .debug_str:00000e31 .LASF424
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:304    .text.GetModifierData:00000061 .LFE7
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9176   .debug_loc:0000019d .LLST10
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10393  .debug_str:0000030d .LASF425
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9194   .debug_loc:000001c9 .LLST11
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11151  .debug_str:00001b42 .LASF426
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9230   .debug_loc:0000021c .LLST12
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10683  .debug_str:00000bef .LASF427
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9246   .debug_loc:00000246 .LLST13
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10701  .debug_str:00000c8d .LASF428
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9257   .debug_loc:00000264 .LLST14
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10937  .debug_str:0000141b .LASF429
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9264   .debug_loc:00000277 .LLST15
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9279   .debug_loc:000002a0 .LLST16
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:270    .text.GetModifierData:00000035 .LVL30
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:277    .text.GetModifierData:00000043 .LVL31
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:286    .text.GetModifierData:0000004e .LVL34
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11257  .debug_str:00001ee1 .LASF430
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:629    .text.TabQuery:0000017c .LFE8
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9302   .debug_loc:000002d8 .LLST17
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9315   .debug_loc:000002f8 .LLST18
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11289  .debug_str:00001fab .LASF431
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10853  .debug_str:00001193 .LASF432
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9362   .debug_loc:00000364 .LLST19
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10647  .debug_str:00000adc .LASF433
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9411   .debug_loc:000003c4 .LLST20
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11043  .debug_str:000017aa .LASF434
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9438   .debug_loc:0000040e .LLST21
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11315  .debug_str:00002084 .LASF435
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9469   .debug_loc:00000463 .LLST22
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11365  .debug_str:00002241 .LASF436
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9513   .debug_loc:000004d3 .LLST23
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10549  .debug_str:00000816 .LASF437
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9532   .debug_loc:00000507 .LLST24
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10533  .debug_str:000007a3 .LASF438
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9559   .debug_loc:00000551 .LLST25
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10637  .debug_str:00000a86 .LASF439
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9570   .debug_loc:0000056f .LLST26
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11235  .debug_str:00001e24 .LASF440
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9585   .debug_loc:00000598 .LLST27
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10691  .debug_str:00000c3b .LASF441
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9596   .debug_loc:000005b6 .LLST28
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10847  .debug_str:00001160 .LASF442
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9607   .debug_loc:000005d4 .LLST29
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10571  .debug_str:000008b2 .LASF443
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:874    .text.GetModifierValue:00000136 .LFE9
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9623   .debug_loc:000005fe .LLST30
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11239  .debug_str:00001e46 .LASF444
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9641   .debug_loc:0000062b .LLST31
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10931  .debug_str:000013fa .LASF445
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9659   .debug_loc:00000657 .LLST32
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10933  .debug_str:00001409 .LASF446
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10771  .debug_str:00000ed1 .LASF447
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11265  .debug_str:00001f0e .LASF448
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9670   .debug_loc:00000675 .LLST33
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10819  .debug_str:00001088 .LASF449
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9685   .debug_loc:0000069e .LLST34
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10665  .debug_str:00000b6e .LASF450
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9709   .debug_loc:000006de .LLST35
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9733   .debug_loc:0000071e .LLST36
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9744   .debug_loc:0000073c .LLST37
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10429  .debug_str:00000470 .LASF451
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9759   .debug_loc:00000765 .LLST38
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11245  .debug_str:00001e80 .LASF452
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9790   .debug_loc:000007b3 .LLST39
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10703  .debug_str:00000c95 .LASF453
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9810   .debug_loc:000007e8 .LLST40
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10491  .debug_str:0000065f .LASF454
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9824   .debug_loc:00000809 .LLST41
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10439  .debug_str:000004aa .LASF455
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:750    .text.GetModifierValue:000000a4 .LVL114
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:810    .text.GetModifierValue:000000ff .LVL120
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:659    .text.GetModifierValue:0000001e .LVL98
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:667    .text.GetModifierValue:00000030 .LVL99
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:717    .text.GetModifierValue:0000007c .LVL106
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10805  .debug_str:00000ff3 .LASF457
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:893    .text.TurbidityCalibrationCmd:00000016 .LFE10
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11155  .debug_str:00001b50 .LASF458
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1027   .text.TurbidityPwmValManager:000000c5 .LFE11
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:954    .text.TurbidityPwmValManager:00000050 .LVL134
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:958    .text.TurbidityPwmValManager:00000056 .LVL135
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:996    .text.TurbidityPwmValManager:00000090 .LVL136
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10425  .debug_str:0000043c .LASF473
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1134   .text.TurbidityCalibrationManager:000000c2 .LFE12
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9839   .debug_loc:00000832 .LLST42
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1046   .text.TurbidityCalibrationManager:00000018 .LBB4
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1055   .text.TurbidityCalibrationManager:00000029 .LBE4
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11305  .debug_str:0000203a .LASF459
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10929  .debug_str:000013e4 .LASF460
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1210   .text.StopMicroprogCounters:0000006f .LFE13
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1145   .text.StopMicroprogCounters:00000006 .LVL137
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1149   .text.StopMicroprogCounters:0000000c .LVL138
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1153   .text.StopMicroprogCounters:00000012 .LVL139
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1157   .text.StopMicroprogCounters:00000018 .LVL140
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1161   .text.StopMicroprogCounters:0000001e .LVL141
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1165   .text.StopMicroprogCounters:00000025 .LVL142
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1169   .text.StopMicroprogCounters:0000002b .LVL143
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1173   .text.StopMicroprogCounters:00000032 .LVL144
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1177   .text.StopMicroprogCounters:00000039 .LVL145
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1181   .text.StopMicroprogCounters:00000040 .LVL146
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1185   .text.StopMicroprogCounters:00000046 .LVL147
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1189   .text.StopMicroprogCounters:0000004d .LVL148
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1193   .text.StopMicroprogCounters:00000054 .LVL149
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1197   .text.StopMicroprogCounters:0000005b .LVL150
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1201   .text.StopMicroprogCounters:00000061 .LVL151
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1205   .text.StopMicroprogCounters:00000068 .LVL152
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1209   .text.StopMicroprogCounters:0000006f .LVL153
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11097  .debug_str:00001958 .LASF461
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1229   .text.IncWordWithCheck:0000000f .LFE14
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11065  .debug_str:00001873 .LASF462
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10711  .debug_str:00000cc1 .LASF463
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1469   .text.UpdateStateBitmaps:000001db .LFE4
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9852   .debug_loc:00000852 .LLST43
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10901  .debug_str:00001316 .LASF464
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9865   .debug_loc:00000872 .LLST44
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1283   .text.UpdateStateBitmaps:00000069 .LVL157
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1316   .text.UpdateStateBitmaps:000000a9 .LVL160
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1389   .text.UpdateStateBitmaps:00000138 .LVL161
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11101  .debug_str:0000198e .LASF465
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1486   .text.IsOvenRunningDelay:00000012 .LFE15
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10709  .debug_str:00000cb0 .LASF466
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1503   .text.IsOvenPauseFAult:00000012 .LFE16
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11293  .debug_str:00001fbf .LASF467
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1567   .text.UpdateInfoBufferToPowerMeterModule:00000049 .LFE17
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9872   .debug_loc:00000885 .LLST45
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10869  .debug_str:00001204 .LASF468
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9885   .debug_loc:000008a5 .LLST46
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9892   .debug_loc:000008b8 .LLST47
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10329  .debug_str:000000dd .LASF469
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9904   .debug_loc:000008d7 .LLST48
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1526   .text.UpdateInfoBufferToPowerMeterModule:00000012 .LVL164
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11199  .debug_str:00001cfd .LASF470
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1656   .text.GetModifierValueAPP2_0:0000006b .LFE18
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9921   .debug_loc:00000902 .LLST49
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9939   .debug_loc:0000092e .LLST50
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9957   .debug_loc:0000095a .LLST51
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:9968   .debug_loc:00000978 .LLST52
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10016  .debug_loc:000009bb .LLST53
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1597   .text.GetModifierValueAPP2_0:0000001b .LVL173
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10721  .debug_str:00000d03 .LASF471
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1730   .text.GetAlphaModifierValueAPP2_0:00000065 .LFE19
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10057  .debug_loc:00000a05 .LLST54
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10075  .debug_loc:00000a31 .LLST55
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10104  .debug_loc:00000a76 .LLST56
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10979  .debug_str:00001587 .LASF472
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1682   .text.GetAlphaModifierValueAPP2_0:00000018 .LVL185
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1709   .text.GetAlphaModifierValueAPP2_0:0000004e .LVL187
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10351  .debug_str:00000193 .LASF474
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1766   .text.APP_GetReferenceParameters:00000036 .LFE20
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10115  .debug_loc:00000a94 .LLST57
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1745   .text.APP_GetReferenceParameters:0000000d .LVL190
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1757   .text.APP_GetReferenceParameters:00000026 .LVL191
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10877  .debug_str:00001241 .LASF475
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1810   .text.VlineCalcolusFromDSP:0000003f .LFE22
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10128  .debug_loc:00000ab4 .LLST58
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10769  .debug_str:00000ec8 .LASF476
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10146  .debug_loc:00000ae0 .LLST59
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11337  .debug_str:00002138 .LASF477
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10157  .debug_loc:00000afe .LLST60
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11267  .debug_str:00001f17 .LASF478
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10563  .debug_str:0000088b .LASF479
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11027  .debug_str:00001715 .LASF480
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10363  .debug_str:000001fc .LASF481
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1793   .text.VlineCalcolusFromDSP:00000023 .LVL195
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1799   .text.VlineCalcolusFromDSP:00000032 .LVL196
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1805   .text.VlineCalcolusFromDSP:0000003a .LVL197
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11051  .debug_str:000017f4 .LASF482
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:2003   .text.APP_AlphaCoefficientsComputation:00000187 .LFE21
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10164  .debug_loc:00000b11 .LLST61
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10831  .debug_str:000010f3 .LASF483
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11203  .debug_str:00001d2f .LASF484
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10569  .debug_str:000008a5 .LASF485
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11283  .debug_str:00001f81 .LASF486
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1850   .text.APP_AlphaCoefficientsComputation:0000004a .LVL199
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1862   .text.APP_AlphaCoefficientsComputation:00000065 .LVL200
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1879   .text.APP_AlphaCoefficientsComputation:0000008e .LVL201
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1887   .text.APP_AlphaCoefficientsComputation:000000a5 .LVL202
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1892   .text.APP_AlphaCoefficientsComputation:000000ae .LVL203
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1912   .text.APP_AlphaCoefficientsComputation:000000db .LVL204
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1917   .text.APP_AlphaCoefficientsComputation:000000e3 .LVL205
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1939   .text.APP_AlphaCoefficientsComputation:00000113 .LVL206
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1945   .text.APP_AlphaCoefficientsComputation:0000011e .LVL207
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1952   .text.APP_AlphaCoefficientsComputation:0000012a .LVL208
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1980   .text.APP_AlphaCoefficientsComputation:00000162 .LVL209
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1986   .text.APP_AlphaCoefficientsComputation:0000016d .LVL210
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11333  .debug_str:00002125 .LASF487
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11301  .debug_str:00002024 .LASF488
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11057  .debug_str:0000183d .LASF489
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10609  .debug_str:000009b6 .LASF490
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10903  .debug_str:0000131e .LASF491
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10925  .debug_str:000013c4 .LASF492
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10431  .debug_str:0000047a .LASF493
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10699  .debug_str:00000c82 .LASF494
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10953  .debug_str:0000149f .LASF495
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10669  .debug_str:00000b89 .LASF496
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11307  .debug_str:00002047 .LASF497
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10407  .debug_str:0000038a .LASF498
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10987  .debug_str:000015cf .LASF499
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10405  .debug_str:00000379 .LASF500
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10817  .debug_str:00001072 .LASF501
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10621  .debug_str:00000a07 .LASF502
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10645  .debug_str:00000acc .LASF503
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10821  .debug_str:00001099 .LASF504
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10499  .debug_str:0000068e .LASF505
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11061  .debug_str:00001863 .LASF506
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10357  .debug_str:000001c8 .LASF507
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10695  .debug_str:00000c63 .LASF508
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10779  .debug_str:00000f28 .LASF509
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10755  .debug_str:00000e56 .LASF510
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11357  .debug_str:000021d7 .LASF511
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10327  .debug_str:000000cc .LASF512
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10449  .debug_str:000004f6 .LASF513
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10377  .debug_str:00000287 .LASF514
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10705  .debug_str:00000c9a .LASF515
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10389  .debug_str:000002ef .LASF516
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10791  .debug_str:00000f90 .LASF517
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11025  .debug_str:00001701 .LASF518
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10445  .debug_str:000004d3 .LASF519
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10409  .debug_str:00000398 .LASF520
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10451  .debug_str:0000050d .LASF521
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11375  .debug_str:00002296 .LASF522
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11209  .debug_str:00001d51 .LASF523
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11195  .debug_str:00001cdc .LASF524
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10881  .debug_str:00001265 .LASF525
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11143  .debug_str:00001b10 .LASF526
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11153  .debug_str:00001b4b .LASF527
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11243  .debug_str:00001e67 .LASF531
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10593  .debug_str:00000949 .LASF528
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10493  .debug_str:0000066b .LASF529
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10641  .debug_str:00000a9f .LASF530
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11311  .debug_str:0000205b .LASF532
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10649  .debug_str:00000ae8 .LASF533
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11093  .debug_str:0000193b .LASF534
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11041  .debug_str:00001791 .LASF545
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10473  .debug_str:000005bd .LASF535
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10485  .debug_str:0000062f .LASF536
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10475  .debug_str:000005d7 .LASF537
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:11355  .debug_str:000021c9 .LASF538
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10763  .debug_str:00000e9d .LASF539
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10713  .debug_str:00000cd4 .LASF540
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10567  .debug_str:00000897 .LASF541
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:10707  .debug_str:00000ca2 .LASF542
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:12     .text.updateRegWaterLoaded:00000002 .LCFI0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:83     .text.UpdateMachineState:00000002 .LCFI1
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:84     .text.UpdateMachineState:00000002 .LVL2
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:93     .text.UpdateMachineState:00000014 .LVL3
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:100    .text.UpdateMachineState:0000001e .LVL4
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:102    .text.UpdateMachineState:00000020 .LVL5
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:107    .text.UpdateMachineState:00000023 .LVL6
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:113    .text.UpdateMachineState:0000002b .LVL7
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:118    .text.UpdateMachineState:00000032 .LVL8
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:128    .text.UpdateMachineState:00000041 .LVL9
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:142    .text.GetDeltaFromVariation:00000002 .LCFI2
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:140    .text.GetDeltaFromVariation:00000000 .LVL10
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:150    .text.GetDeltaFromVariation:0000000b .LVL12
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:152    .text.GetDeltaFromVariation:0000000e .LVL13
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:143    .text.GetDeltaFromVariation:00000002 .LVL11
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:168    .text.GetDeltaFromVariation:00000020 .LVL16
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:182    .text.TabQueryB:00000000 .LVL17
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:199    .text.TabQueryB:00000010 .LVL21
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:185    .text.TabQueryB:00000002 .LVL18
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:188    .text.TabQueryB:00000005 .LVL19
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:195    .text.TabQueryB:0000000d .LVL20
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:232    .text.GetModifierData:00000002 .LCFI3
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:234    .text.GetModifierData:00000004 .LCFI4
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:230    .text.GetModifierData:00000000 .LVL23
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:249    .text.GetModifierData:0000001c .LVL26
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:255    .text.GetModifierData:00000021 .LVL27
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:267    .text.GetModifierData:0000002f .LVL29
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:279    .text.GetModifierData:00000045 .LVL32
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:283    .text.GetModifierData:00000047 .LVL33
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:289    .text.GetModifierData:00000054 .LVL35
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:292    .text.GetModifierData:00000056 .LVL36
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:294    .text.GetModifierData:00000058 .LVL37
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:244    .text.GetModifierData:00000016 .LVL25
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:259    .text.GetModifierData:00000024 .LVL28
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:298    .text.GetModifierData:0000005c .LVL38
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:239    .text.GetModifierData:0000000b .LVL24
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:314    .text.TabQuery:00000002 .LCFI5
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:312    .text.TabQuery:00000000 .LVL39
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:465    .text.TabQuery:000000bd .LVL59
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:553    .text.TabQuery:00000124 .LVL82
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:596    .text.TabQuery:00000158 .LVL86
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:607    .text.TabQuery:00000160 .LVL89
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:610    .text.TabQuery:00000160 .LVL90
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:618    .text.TabQuery:0000016f .LVL92
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:625    .text.TabQuery:00000179 .LVL93
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:327    .text.TabQuery:00000015 .LVL41
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:403    .text.TabQuery:00000080 .LVL49
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:469    .text.TabQuery:000000c0 .LVL60
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:492    .text.TabQuery:000000dc .LVL67
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:591    .text.TabQuery:00000155 .LVL85
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:598    .text.TabQuery:00000159 .LVL87
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:602    .text.TabQuery:0000015b .LVL88
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:337    .text.TabQuery:00000026 .LVL42
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:479    .text.TabQuery:000000cc .LVL63
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:482    .text.TabQuery:000000d1 .LVL64
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:509    .text.TabQuery:000000ef .LVL71
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:513    .text.TabQuery:000000f2 .LVL73
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:523    .text.TabQuery:000000fa .LVL76
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:581    .text.TabQuery:00000149 .LVL83
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:584    .text.TabQuery:0000014d .LVL84
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:346    .text.TabQuery:00000030 .LVL43
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:414    .text.TabQuery:0000008a .LVL50
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:419    .text.TabQuery:0000008e .LVL52
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:423    .text.TabQuery:00000091 .LVL53
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:431    .text.TabQuery:00000096 .LVL55
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:530    .text.TabQuery:000000fe .LVL78
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:315    .text.TabQuery:00000002 .LVL40
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:453    .text.TabQuery:000000ae .LVL57
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:457    .text.TabQuery:000000b3 .LVL58
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:475    .text.TabQuery:000000c8 .LVL61
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:477    .text.TabQuery:000000ca .LVL62
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:486    .text.TabQuery:000000d3 .LVL65
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:505    .text.TabQuery:000000eb .LVL69
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:507    .text.TabQuery:000000ed .LVL70
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:517    .text.TabQuery:000000f4 .LVL74
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:417    .text.TabQuery:0000008d .LVL51
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:428    .text.TabQuery:00000094 .LVL54
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:489    .text.TabQuery:000000d7 .LVL66
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:528    .text.TabQuery:000000fc .LVL77
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:539    .text.TabQuery:0000010d .LVL80
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:502    .text.TabQuery:000000e9 .LVL68
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:519    .text.TabQuery:000000f6 .LVL75
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:535    .text.TabQuery:00000106 .LVL79
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:511    .text.TabQuery:000000f1 .LVL72
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:542    .text.TabQuery:00000112 .LVL81
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:359    .text.TabQuery:0000003e .LVL44
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:368    .text.TabQuery:00000048 .LVL46
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:372    .text.TabQuery:0000004b .LVL47
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:365    .text.TabQuery:00000046 .LVL45
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:379    .text.TabQuery:00000055 .LVL48
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:450    .text.TabQuery:000000ac .LVL56
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:614    .text.TabQuery:00000167 .LVL91
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:639    .text.GetModifierValue:00000002 .LCFI6
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:641    .text.GetModifierValue:00000005 .LCFI7
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:637    .text.GetModifierValue:00000000 .LVL94
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:654    .text.GetModifierValue:00000015 .LVL96
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:673    .text.GetModifierValue:00000039 .LVL100
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:656    .text.GetModifierValue:00000017 .LVL97
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:849    .text.GetModifierValue:00000122 .LVL129
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:854    .text.GetModifierValue:00000125 .LVL130
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:858    .text.GetModifierValue:00000127 .LVL131
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:863    .text.GetModifierValue:0000012b .LVL132
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:870    .text.GetModifierValue:00000133 .LVL133
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:643    .text.GetModifierValue:00000007 .LVL95
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:687    .text.GetModifierValue:0000004a .LVL102
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:773    .text.GetModifierValue:000000cc .LVL115
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:775    .text.GetModifierValue:000000ce .LVL116
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:784    .text.GetModifierValue:000000dc .LVL117
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:822    .text.GetModifierValue:0000010d .LVL123
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:833    .text.GetModifierValue:00000113 .LVL126
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:842    .text.GetModifierValue:0000011a .LVL128
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:692    .text.GetModifierValue:0000004c .LVL103
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:720    .text.GetModifierValue:00000083 .LVL107
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:723    .text.GetModifierValue:00000086 .LVL108
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:725    .text.GetModifierValue:00000088 .LVL109
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:734    .text.GetModifierValue:00000090 .LVL111
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:699    .text.GetModifierValue:0000005d .LVL104
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:729    .text.GetModifierValue:0000008e .LVL110
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:736    .text.GetModifierValue:00000093 .LVL112
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:704    .text.GetModifierValue:00000064 .LVL105
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:746    .text.GetModifierValue:0000009c .LVL113
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:815    .text.GetModifierValue:00000107 .LVL121
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:818    .text.GetModifierValue:0000010b .LVL122
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:826    .text.GetModifierValue:00000110 .LVL124
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:828    .text.GetModifierValue:00000111 .LVL125
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:791    .text.GetModifierValue:000000e5 .LVL118
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:797    .text.GetModifierValue:000000eb .LVL119
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:678    .text.GetModifierValue:00000040 .LVL101
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1036   .text.TurbidityCalibrationManager:00000002 .LCFI8
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1238   .text.UpdateStateBitmaps:00000002 .LCFI9
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1260   .text.UpdateStateBitmaps:00000036 .LVL155
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1276   .text.UpdateStateBitmaps:00000059 .LVL156
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1512   .text.UpdateInfoBufferToPowerMeterModule:00000002 .LCFI10
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1564   .text.UpdateInfoBufferToPowerMeterModule:00000044 .LVL168
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1513   .text.UpdateInfoBufferToPowerMeterModule:00000002 .LVL162
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1520   .text.UpdateInfoBufferToPowerMeterModule:0000000c .LVL163
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1558   .text.UpdateInfoBufferToPowerMeterModule:0000003c .LVL167
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1550   .text.UpdateInfoBufferToPowerMeterModule:00000038 .LVL165
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1553   .text.UpdateInfoBufferToPowerMeterModule:0000003a .LVL166
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1577   .text.GetModifierValueAPP2_0:00000002 .LCFI11
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1579   .text.GetModifierValueAPP2_0:00000004 .LCFI12
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1575   .text.GetModifierValueAPP2_0:00000000 .LVL169
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1592   .text.GetModifierValueAPP2_0:00000013 .LVL171
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1603   .text.GetModifierValueAPP2_0:00000023 .LVL174
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1594   .text.GetModifierValueAPP2_0:00000015 .LVL172
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1605   .text.GetModifierValueAPP2_0:00000026 .LVL175
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1612   .text.GetModifierValueAPP2_0:0000002e .LVL177
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1646   .text.GetModifierValueAPP2_0:00000063 .LVL181
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1609   .text.GetModifierValueAPP2_0:0000002b .LVL176
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1634   .text.GetModifierValueAPP2_0:00000058 .LVL178
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1636   .text.GetModifierValueAPP2_0:0000005b .LVL179
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1642   .text.GetModifierValueAPP2_0:00000061 .LVL180
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1666   .text.GetAlphaModifierValueAPP2_0:00000002 .LCFI13
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1668   .text.GetAlphaModifierValueAPP2_0:00000004 .LCFI14
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1664   .text.GetAlphaModifierValueAPP2_0:00000000 .LVL182
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1677   .text.GetAlphaModifierValueAPP2_0:00000010 .LVL183
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1691   .text.GetAlphaModifierValueAPP2_0:00000029 .LVL186
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1720   .text.GetAlphaModifierValueAPP2_0:0000005d .LVL188
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1724   .text.GetAlphaModifierValueAPP2_0:0000005f .LVL189
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1679   .text.GetAlphaModifierValueAPP2_0:00000012 .LVL184
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1739   .text.APP_GetReferenceParameters:00000002 .LCFI15
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1776   .text.VlineCalcolusFromDSP:00000002 .LCFI16
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1778   .text.VlineCalcolusFromDSP:00000004 .LCFI17
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1774   .text.VlineCalcolusFromDSP:00000000 .LVL192
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1789   .text.VlineCalcolusFromDSP:00000017 .LVL194
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1808   .text.VlineCalcolusFromDSP:0000003c .LVL198
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1819   .text.APP_AlphaCoefficientsComputation:00000002 .LCFI18
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:1821   .text.APP_AlphaCoefficientsComputation:00000004 .LCFI19
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:2410   .debug_info:00000000 .Ldebug_info0
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:683    .text.GetModifierValue:00000044 .LBB2
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:689    .text.GetModifierValue:0000004a .LBE2
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:742    .text.GetModifierValue:00000097 .LBB3
C:\Users\Andrea\AppData\Local\Temp\ccqh8l72.s:830    .text.GetModifierValue:00000111 .LBE3

UNDEFINED SYMBOLS
_Reg_WaterLoaded
_WaterInDW
_PM_PulseCounter_SetCount
_GIWaterLoaded
_TabMachineStateDim
_MachineStateBuf
_TabMachineStateAddr
_ldiv
_BufNewReg
_BasicLoader
_REG_getFunctionValueByPos
_HWC_Flags
_GITurbidity
_TurbiditySensorCal
_TurbiditySensor
_HIO_trbReadDisable
_HIO_trbReadEnable
_Tab_HWCTurbidity
_PM_TurbiditySensor_StartCalib
_PM_TurbiditySensor_GetCalibration
_TurbidityReads
_GIValid
_SWTC_Stop
_ApplicationFlags
_Tab_HWCRegenerateData
_GICriteria
_uP_Regenerate_Data
_Statistics_update_flag
_MachineStatistics
_Flags_2
_GICriteriaOld
_FltWarning
_New_safety_VS
_SftPulseWarn
_ApplicationState
_CurrentFault
_FLT_checkForSettingFault
_HarakiriLowPower
_Interpreter_Data
_ExtMotor_DataBuffer
_EMS_GetPtrToDSPInfoBuffer
_SelectOperandsAPP2_0
_Vref
_Tref
_LIB_Fixed_Mul
_LIB_Fixed_Div
_LIB_Fixed_Round
_app_alpha_voltage_on_power
_app_alpha_voltage_on_durationON
_app_alpha_voltage_temperature_on_durationON
_app_alpha_temperature_on_durationOFF
_LIB_Fixed_FromInt
_GITemp
_LIB_Fixed_Sqr
_LIB_Fixed_Sub

   1                             		.file	"Drain.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.Check_Sensor,"ax",@progbits
   6                             	_Check_Sensor:
   7                             	.LFB3:
   8                             		.file 1 "C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules/Drain.c"
   1:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /**
   2:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** Source File 
   3:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
   4:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \file    Drain.c
   5:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \ingroup Drain
   6:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \date    25/02/2008
   7:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \author  Roberto Fioravanti
   8:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \version 1.0.0
   9:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** */
  10:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
  11:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /*
  12:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** Copyright (c) 2004-2008, Indesit Company, IDD.
  13:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** Tutti i diritti sono riservati. All rights reserved.
  14:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** */
  15:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
  16:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* Old Versions
  17:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \version 
  18:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \date    
  19:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \author Roberto Fioravanti
  20:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** */
  21:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
  22:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
  23:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /** 
  24:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \note : 
  25:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** */ 
  26:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
  27:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
  28:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* ******** */
  29:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* Includes */
  30:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* ******** */
  31:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
  32:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** #include "CstmHeaders.h"
  33:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
  34:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* ****************** */
  35:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* Defines and Macros */
  36:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* ****************** */
  37:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
  38:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* *************************** */
  39:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* Typedef, Structs and Unions */
  40:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* *************************** */
  41:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
  42:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* **************************** */
  43:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* Prototype of local functions */
  44:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* **************************** */
  45:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** static void DRN_uP_Drain_Init(void);
  46:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** static uint8_t DRN_StepMgmt(uint8_t highStatement, uint8_t lowStatement);
  47:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** static uint8_t Check_Sensor (uint8_t highStatement);
  48:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** static Loader_Struct Drn_get_time( void);
  49:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* ****************** */
  50:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* Exported variables */
  51:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* ****************** */
  52:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
  53:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* **************** */
  54:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* Global variables */
  55:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* **************** */
  56:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
  57:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* ***************** */
  58:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* Exported function */
  59:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* ***************** */
  60:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
  61:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /**
  62:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** Gestisce l'esecuzione del microprogramma Drain.
  63:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
  64:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \param [in] HighStatement specifica l'high statement (opcode +  modificatori F0-F1 + N flag + T fla
  65:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \param [in] LowStatement specifica il low statement (displacement ai dati) del microprogramma.
  66:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c ****  
  67:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \retvalue S_OK se la condizione di avanzamento passo per il microprogramma è verificata (nel caso 
  68:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** almeno una volta)
  69:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \retvalue S_FALSE se non è ancora verificata
  70:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
  71:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \version		1.0.0
  72:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \date 			26/02/2008
  73:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \author			Roberto Fioravanti
  74:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
  75:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \todo       -gestione della sospensione del micorprogramma in presenza di faults
  76:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** La condizione sulla porta viene testata solo se non ci sono faults
  77:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c ****             
  78:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** */
  79:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
  80:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
  81:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** uint8_t DRN_uP_Drain_Exe( uint8_t highStatement, uint8_t lowStatement)
  82:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** {
  83:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** uint8_t nRet=S_FALSE;
  84:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
  85:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
  86:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	if ( (FALSE == Interpreter_Data[0].stepInitialized) || (FALSE == Interpreter_Data[0].optionalStepI
  87:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	{
  88:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		/* Init passo o restore from backup */
  89:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
  90:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		DRN_uP_Drain_Init();
  91:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	} 
  92:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	else 
  93:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	{
  94:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	/* TODO1: condizioni particolari in cui deve essere sospesa l'attività del microprogramma */
  95:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
  96:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		/*Pompa Scarico non sottoposta a MR, neanche alla DOOR ma garantiamo spegnimento di tutti
  97:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		i carichi a porta aperta*/
  98:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
  99:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 100:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		if(HWC_Flags.bit.bldc_drain == 0)
 101:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		{ /* nel caso vecchio (pompa scarico non bldc), con la porta aperta bisognava interrompere lo sca
 102:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		   /*IN FAULT CONSENTIRE LO SCARICO A PORTA APERTA!!!!!*/
 103:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			if (CurrentFault[0].code == CODE_NO_FAULT)
 104:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			{/* non sono in fault - controllo lo stato della porta 
 105:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			In caso di Fault il uP può agire anche a porta aperta, non eseguo controllo  */
 106:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 107:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				if ( uPDoorStatus == UP_DOOR_WAIT )
 108:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				{  /* porta aperta -> il uP va sospeso */
 109:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 110:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					(void)SWTC_Stop((SWTC_CountersType)MP_DRAIN_M_COUNTER);
 111:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 112:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					return S_FALSE;
 113:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				}
 114:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			} 
 115:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		}
 116:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		/*		
 117:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		}
 118:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		*/
 119:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		nRet= DRN_StepMgmt(highStatement, lowStatement);
 120:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	}
 121:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 122:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	return nRet;   
 123:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** }
 124:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 125:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* ************** */
 126:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* Local Function */
 127:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /* ************** */
 128:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 129:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /**
 130:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** Inizializza la macchina a stati del microprogramma Drain.
 131:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 132:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \param nesssuno
 133:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \return nessuno
 134:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 135:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \version		1.0.0
 136:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \date 			26/02/2008
 137:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \author			Roberto Fioravanti
 138:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 139:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** */
 140:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** static void DRN_uP_Drain_Init(void)
 141:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** {
 142:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	uP_Drain_Data.step = DRAIN_INIT;
 143:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** }
 144:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 145:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 146:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /**
 147:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** Gestisce l'avanzamento della macchina a stati del microprogramma Drain.
 148:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** Due sono le opzioni possibili.
 149:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 2 sono le opzioni possibili
 150:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 151:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** -F1|F0 = 0|0 -> scarica a vuoto pressostato + x sec.
 152:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** -F1|F0 = 0|1 -> scarica per x sec
 153:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 154:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** Prima opzione :
 155:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** Al termine,  il microprogramma azzera WaterInDW.e aggiorna i dl caricati.
 156:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** La pompa viene attivata per tempo massimo pari al timeout Drain1stTimeoutToEmpty sec.
 157:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** Se il vuoto prerssostato viene raggiunto, allora la pompa rimane attivata per x sec.
 158:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** Altrimenti, dopo una pausa di DrainPauseToEmpty secondi in cui la pompa è disattivata.
 159:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** si passa ad un secondo tentativo di Drain2ndTimeoutToEmpty secondi.
 160:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** Se il vuoto prerssostato viene raggiunto, allora la pompa rimane attivata per x sec, 
 161:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** altrimenti viene venerato un allarme.
 162:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 163:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** Seconda opzione:
 164:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** la pompa viene attivata per x secondi.
 165:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** terza opzione :
 166:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** viene controllato il  valore del sensore virtuale e non il pressostato
 167:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 168:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 169:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \param [in] HighStatement specifica l'high statement (opcode +  modificatori F0-F1 + N flag + T fla
 170:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \param [in] LowStatement specifica il low statement (displacement ai dati) del microprogramma.
 171:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c ****  
 172:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \retvalue S_OK se la condizione di avanzamento passo per il microprogramma è verificata (nel caso 
 173:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** almeno una volta)
 174:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \retvalue S_FALSE se non è ancora verificata
 175:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 176:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \version		1.0.0
 177:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \date 			26/02/2008
 178:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \author			Roberto Fioravanti
 179:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 180:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \todo       -La condizione sulla porta viene testata solo se non ci sono faults
 181:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c ****             
 182:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** */
 183:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** static uint8_t DRN_StepMgmt(uint8_t highStatement, uint8_t lowStatement)
 184:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** {
 185:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** uint8_t time, nRet=S_FALSE;
 186:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 187:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c ****     if((HWC_Flags.bit.vs_drain_presence) && (IS_VIRTUAL_SENSOR_VERSION(highStatement)))
 188:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	{
 189:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		if(HWC_Flags.bit.bldc_drain == 0)
 190:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		{ /* condizione di errore */
 191:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		    return S_OK;
 192:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		}
 193:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	}
 194:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 195:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	switch(uP_Drain_Data.step) 
 196:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	{
 197:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		case DRAIN_INIT:
 198:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 199:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			CLRBIT(FltFlagsKO,WARNING_DRAIN_KO);
 200:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			CLRBIT(FltFlagsKO,WARNING_DRAIN_PREKO);
 201:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 202:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			FLT_ResetFaultDetectProc( FLT_CODE_DRAIN, FLT_SUBCODE_DRAIN,(uint16_t)TOUT_RESET_PREFAULT );
 203:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 204:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			/* QI 01.12.09 reset Prefault : la procedura di Fault � confinata 
 205:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			nell'esecuazione del uP*/	
 206:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			/*FLT_preFaultReset(FLT_CODE_DRAIN,FLT_SUBCODE_DRAIN); */
 207:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 208:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			if (BasicLoader(PTR_UP_DRAIN, lowStatement, &uPDrain_setting_data) != S_OK ) 
 209:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			{
 210:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				uP_Drain_Data.step = DRAIN_ERROR;
 211:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				return S_FALSE;
 212:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			}
 213:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 214:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			switch( (highStatement) & (DRN_DRAIN_TYPE_MSK ))
 215:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			{
 216:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c ****                 case DRN_DRAIN_VP_PLUS_TIME_SENSORI_VIRTUALI:
 217:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			   /* fall through to next case */
 218:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				case DRN_DRAIN_VP_PLUS_TIME:
 219:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 220:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					/* 1° timeout pompa scarico */
 221:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					time=DRN_1ST_TOUT_TO_EMPTY(Drn_get_time());
 222:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					uP_Drain_Data.step = DRAIN_1ST_TOUT;
 223:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					break;
 224:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 225:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				case DRN_DRAIN_TIME:
 226:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					time=DRN_DRAINTIME;
 227:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					uP_Drain_Data.step = DRAIN_TIME;
 228:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					break;
 229:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 230:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				default:
 231:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					uP_Drain_Data.step = DRAIN_ERROR;
 232:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					return S_FALSE;
 233:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			}
 234:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 235:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			(void)SWTC_SetMValue((SWTC_CountersType)MP_DRAIN_M_COUNTER, (SWTC_MCounterValue)time);
 236:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 237:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			break;
 238:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 239:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		case DRAIN_1ST_TOUT:
 240:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			/* gestione 1° timeout pompa scarico */
 241:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 242:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			/* attiva pompa scarico */
 243:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			SET_PUMP(LD_DRAIN_PUMP_IND,LOAD_ON);
 244:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			FLT_ResetFaultDetectProc( FLT_CODE_DRAIN, FLT_SUBCODE_DRAIN,(uint16_t)TOUT_RESET_PREFAULT );
 245:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 246:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			if( Check_Sensor(highStatement))
 247:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			{
 248:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				(void)SWTC_Run((SWTC_CountersType)MP_DRAIN_M_COUNTER);
 249:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 250:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				if ( SWTC_IsExpired((SWTC_CountersType)MP_DRAIN_M_COUNTER)) 
 251:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				{
 252:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					/* 1° timeout scaduto: pompa scarico in pausa */
 253:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					SETBIT(FltFlagsKO,WARNING_DRAIN_PREKO);
 254:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 255:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					(void)SWTC_SetMValue((SWTC_CountersType)MP_DRAIN_M_COUNTER, DRN_PAUSE_TO_EMPTY(Drn_get_time())
 256:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 257:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					uP_Drain_Data.step=DRAIN_PAUSE;
 258:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				}
 259:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			} 
 260:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			else
 261:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			{
 262:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				(void)SWTC_SetMValue((SWTC_CountersType)MP_DRAIN_M_COUNTER,DRN_DRAINTIME);
 263:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 264:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				uP_Drain_Data.step = DRAIN_TIME;
 265:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			}          
 266:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			break;
 267:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 268:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		case DRAIN_PAUSE:
 269:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		/* gestione pausa pompa scarico */
 270:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 271:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			(void)SWTC_Run((SWTC_CountersType)MP_DRAIN_M_COUNTER);
 272:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 273:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			if ( SWTC_IsExpired((SWTC_CountersType)MP_DRAIN_M_COUNTER)) 
 274:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			{
 275:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				/* pausa terminata: 2° timeout pompa scarico */
 276:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 277:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 278:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				(void)SWTC_SetMValue((SWTC_CountersType)MP_DRAIN_M_COUNTER,DRN_2ND_TOUT_TO_EMPTY(Drn_get_time()
 279:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 280:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				uP_Drain_Data.step=DRAIN_2ND_TOUT;
 281:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			}
 282:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 283:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			break;
 284:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 285:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		case DRAIN_2ND_TOUT:
 286:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			/* attiva pompa scarico */
 287:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			SET_PUMP(LD_DRAIN_PUMP_IND,LOAD_ON);
 288:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 289:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c ****             if( Check_Sensor(highStatement))
 290:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 291:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			{
 292:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				(void)SWTC_Run((SWTC_CountersType)MP_DRAIN_M_COUNTER);
 293:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 294:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				if (SWTC_IsExpired((SWTC_CountersType)MP_DRAIN_M_COUNTER)) 
 295:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				{
 296:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					/* 2° timeout scaduto: notifica allarme */
 297:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					SETBIT(FltFlagsKO,WARNING_DRAIN_KO);
 298:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					nRet=S_OK;
 299:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					uP_Drain_Data.step = DRAIN_END;
 300:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				}
 301:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			} 
 302:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			else
 303:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			{
 304:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				(void)SWTC_SetMValue((SWTC_CountersType)MP_DRAIN_M_COUNTER,DRN_DRAINTIME);
 305:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 306:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 307:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				uP_Drain_Data.step = DRAIN_TIME;
 308:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			}
 309:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 310:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			break;
 311:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c ****       
 312:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		case DRAIN_TIME:
 313:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 314:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			/* attiva pompa scarico */
 315:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			SET_PUMP(LD_DRAIN_PUMP_IND,LOAD_ON);
 316:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 317:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			(void)SWTC_Run((SWTC_CountersType)MP_DRAIN_M_COUNTER);
 318:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 319:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			if ( SWTC_IsExpired((SWTC_CountersType)MP_DRAIN_M_COUNTER)) 
 320:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			{
 321:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				/* 2° DrainTime trascorso */
 322:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				nRet=S_OK;
 323:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 324:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				if( ((highStatement) &( DRN_DRAIN_TYPE_MSK)) != DRN_DRAIN_TIME )
 325:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				{			
 326:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					updateRegWaterLoaded();
 327:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 328:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					WaterInDW = 0;
 329:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 330:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					/* restart dati turbina */
 331:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					WaterLoadedReset();
 332:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 333:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					/* QI 06.11.09 - reset variabili legate alla gestione del timeout dinamico */
 334:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					Pump_Load_Data.init = FALSE;
 335:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					CLRBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS); /* reset flag overflow ripristini */
 336:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					(void)SWTC_Stop((SWTC_CountersType)MP_LOADTIMEOUT_REST_M_COUNTER);
 337:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				}
 338:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 339:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				uP_Drain_Data.step = DRAIN_END;
 340:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			}
 341:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			FLT_ResetFaultDetectProc( FLT_CODE_DRAIN, FLT_SUBCODE_DRAIN,(uint16_t)TOUT_RESET_PREFAULT );
 342:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 343:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			break;
 344:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c ****     
 345:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		case DRAIN_END:                                           
 346:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		case DRAIN_ERROR:
 347:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 348:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			(void)SWTC_Stop((SWTC_CountersType)MP_DRAIN_M_COUNTER);
 349:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 350:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			nRet=S_OK;
 351:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			break;
 352:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 353:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		default:
 354:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			uP_Drain_Data.step=DRAIN_INIT;
 355:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			nRet=S_FALSE;
 356:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	}
 357:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 358:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** #ifdef CONFIG_LIB_EXTERNAL_BOARD_SUPPORT
 359:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	if(HWC_Flags.bit.bldc_drain != 0)
 360:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	{
 361:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	    if(LoadsReq_New[Pump_Pos[LD_DRAIN_PUMP_IND]].b==LOAD_ON)
 362:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		{
 363:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			SET_BLDC_SPEED(BLDC_PumpReq_New[DRAIN_BLDC_PUMP],OFFS_B(uPDrain_setting_data.Data, DRAINPUMP_CTR
 364:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			SET_BLDC_TIME(BLDC_PumpReq_New[DRAIN_BLDC_PUMP],OFFS_B(uPDrain_setting_data.Data, DRAINPUMP_CTRL
 365:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		}
 366:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		else
 367:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		{
 368:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			SET_BLDC_SPEED(BLDC_PumpReq_New[DRAIN_BLDC_PUMP],0);
 369:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			SET_BLDC_TIME(BLDC_PumpReq_New[DRAIN_BLDC_PUMP],0);
 370:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		}
 371:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c ****     }
 372:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** #endif /* CONFIG_LIB_EXTERNAL_BOARD_SUPPORT*/
 373:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 374:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	return nRet;
 375:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** }
 376:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /**/
 377:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 378:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 379:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** /**
 380:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** Gestisce il riconoscimento dello stato del pressostato o dei sensori visrtuali se sono presenti 
 381:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 382:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \param [in] none
 383:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c ****  
 384:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \retvalue S_OK se il pressostato è in pieno o se il valore del sensore virtuale da il pieno.
 385:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \retvalue S_FALSE altrimenti
 386:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 387:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \version		1.0.0
 388:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \date 			28/11/2011
 389:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** \author			Emanuela Antognoli
 390:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 391:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c ****             
 392:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** */
 393:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** static uint8_t Check_Sensor (uint8_t highStatement)
 394:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** {
   9                             		.loc 1 394 0
  10                             	.LVL0:
 395:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	
 396:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	if(IS_VIRTUAL_SENSOR_VERSION(highStatement))
  11                             		.loc 1 396 0
  12 0000 75 21 30                		and #48, r1
  13                             	.LVL1:
  14 0003 75 51 20                		cmp	#32, r1
  15 0006 21 24                   		bne	.L2
 397:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	{
 398:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	   if(TESTBIT(GIValid, GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_DRAIN))
  16                             		.loc 1 398 0
  17 0008 FB E2 00 00 00 00       		mov.L	#_GIValid, r14
  18 000e DC EE                   		mov.W	[r14], r14
  19 0010 76 2E 00 08             		and #0x800, r14
  20 0014 5F EE                   		movu.W	r14, r14
  21 0016 61 0E                   		cmp	#0, r14
  22 0018 20 1D                   		beq	.L4
  23                             	.LBB6:
  24                             	.LBB7:
 399:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	   {
 400:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			   
 401:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		   if(Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_DRAIN])
  25                             		.loc 1 401 0
  26 001a FB E2 00 00 00 00       		mov.L	#_Virtual_Sensor_Value, r14
  27                             	.LBE7:
  28                             	.LBE6:
  29 0020 59 E1 01                		movu.B	1[r14], r1
  30 0023 61 01                   		cmp	#0, r1
  31 0025 FC DB 11                		scne.L	r1
  32 0028 2E 10                   		bra	.L3
  33                             	.L2:
 402:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		   {/* NB: 28/11/11 il valore del sensore virtuale della pompa scarico ha valori:0-2-3-5*/
 403:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			     return TRUE;					   
 404:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		   }
 405:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	   }else
 406:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	   {/* se il sensore vituale non è ready si comincia a scaricare a sensore, c'è comunque il time
 407:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		   return TRUE;
 408:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		   
 409:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	   }   
 410:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	}
 411:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	else
 412:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	{/* vecchia gestione col pressostato( anche con la doppia pompa BLAC */
 413:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		return (TESTBIT(GICriteria, GI_PRESS_SENS_CR_FULL_IND) != 0);
  34                             		.loc 1 413 0
  35 002a FB E2 00 00 00 00       		mov.L	#_GICriteria, r14
  36 0030 CC E1                   		mov.B [r14], r1
  37 0032 64 11                   		and #1, r1
  38 0034 0C                      		bra	.L3
  39                             	.L4:
 407:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		   return TRUE;
  40                             		.loc 1 407 0
  41 0035 66 11                   		mov	#1, r1
  42 0037 03                      		.balign 2,3,1
  43                             	.L3:
 414:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	}
 415:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	return FALSE;
 416:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** }
  44                             		.loc 1 416 0
  45 0038 64 11                   		and #1, r1
  46 003a 02                      		rts
  47                             	.LFE3:
  49 003b 03                      		.section	.text.Drn_get_time,"ax",@progbits
  51                             	_Drn_get_time:
  52                             	.LFB4:
 417:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 
 418:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** static Loader_Struct Drn_get_time( void )
 419:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** {
  53                             		.loc 1 419 0
 420:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	if( SPV_isAutotestOrTestRunning() )
  54                             		.loc 1 420 0
  55 0000 05 00 00 00             		bsr	_SPV_isAutotestOrTestRunning
  56                             	.LVL2:
  57 0004 61 01                   		cmp	#0, r1
  58 0006 20 10                   		beq	.L6
 421:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	{
 422:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		return Tab_DrainFault_Special;
  59                             		.loc 1 422 0
  60 0008 FB E2 00 00 00 00       		mov.L	#_Tab_DrainFault_Special, r14
  61 000e EC E1                   		mov.L	[r14], r1
  62 0010 5D E2 02                		movu.W	4[r14], r2
  63 0013 6D 02                   		shll	#16, r2
  64 0015 02                      		rts
  65                             	.L6:
 423:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	}else
 424:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	{
 425:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		return Tab_DrainFault;
  66                             		.loc 1 425 0
  67 0016 FB E2 00 00 00 00       		mov.L	#_Tab_DrainFault, r14
  68 001c EC E1                   		mov.L	[r14], r1
  69 001e ED E2 01                		mov.L	4[r14], r2
 426:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	}
 427:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** }
  70                             		.loc 1 427 0
  71 0021 02                      		rts
  72                             	.LFE4:
  74                             		.section	.text.DRN_uP_Drain_Exe,"ax",@progbits
  75                             		.global	_DRN_uP_Drain_Exe
  77                             	_DRN_uP_Drain_Exe:
  78                             	.LFB0:
  82:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** {
  79                             		.loc 1 82 0
  80                             	.LVL3:
  81 0000 6E 7C                   		pushm	r7-r12
  82                             	.LCFI0:
  83                             	.LVL4:
  86:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	if ( (FALSE == Interpreter_Data[0].stepInitialized) || (FALSE == Interpreter_Data[0].optionalStepI
  84                             		.loc 1 86 0
  85 0002 FB 72 00 00 00 00       		mov.L	#_Interpreter_Data, r7
  86 0008 89 77                   		mov.B	4[r7], r7
  87 000a 64 67                   		and #6, r7
  88 000c 61 67                   		cmp	#6, r7
  89 000e 20 0D                   		beq	.L9
  90                             	.LBB14:
  91                             	.LBB15:
 142:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	uP_Drain_Data.step = DRAIN_INIT;
  92                             		.loc 1 142 0
  93 0010 FB 72 00 00 00 00       		mov.L	#_uP_Drain_Data, r7
  94 0016 3C 70 00                		mov.B	#0, [r7]
  95 0019 2E 39                   		bra	.L62
  96                             	.L9:
  97 001b CF 1A                   		mov.B	r1, r10
  98 001d CF 2B                   		mov.B	r2, r11
  99                             	.LBE15:
 100                             	.LBE14:
 100:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		if(HWC_Flags.bit.bldc_drain == 0)
 101                             		.loc 1 100 0
 102 001f FB 72 00 00 00 00       		mov.L	#_HWC_Flags, r7
 103 0025 DC 7E                   		mov.W	[r7], r14
 104 0027 EF E7                   		mov.L	r14, r7
 105 0029 76 27 00 02             		and #0x200, r7
 106 002d 5F 74                   		movu.W	r7, r4
 107 002f 61 04                   		cmp	#0, r4
 108 0031 21 26                   		bne	.L11
 103:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			if (CurrentFault[0].code == CODE_NO_FAULT)
 109                             		.loc 1 103 0
 110 0033 FB 42 00 00 00 00       		mov.L	#_CurrentFault, r4
 111 0039 58 44                   		movu.B	[r4], r4
 112 003b 61 04                   		cmp	#0, r4
 113 003d 21 1A                   		bne	.L11
 107:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				if ( uPDoorStatus == UP_DOOR_WAIT )
 114                             		.loc 1 107 0
 115 003f FB 42 00 00 00 00       		mov.L	#_uPDoorStatus, r4
 116 0045 58 44                   		movu.B	[r4], r4
 117 0047 61 04                   		cmp	#0, r4
 118 0049 21 0E                   		bne	.L11
 110:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					(void)SWTC_Stop((SWTC_CountersType)MP_DRAIN_M_COUNTER);
 119                             		.loc 1 110 0
 120 004b 66 71                   		mov	#7, r1
 121                             	.LVL5:
 122 004d 05 00 00 00             		bsr	_SWTC_Stop
 123                             	.LVL6:
 124 0051 03                      		.balign 2,3,1
 125                             	.L62:
 112:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					return S_FALSE;
 126                             		.loc 1 112 0
 127 0052 66 17                   		mov	#1, r7
 128 0054 38 9A 02                		bra	.L10
 129                             	.LVL7:
 130                             	.L11:
 131                             	.LBB16:
 132                             	.LBB17:
 187:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c ****     if((HWC_Flags.bit.vs_drain_presence) && (IS_VIRTUAL_SENSOR_VERSION(highStatement)))
 133                             		.loc 1 187 0
 134 0057 75 2E 20                		and #32, r14
 135 005a 5F EE                   		movu.W	r14, r14
 136 005c 61 0E                   		cmp	#0, r14
 137 005e 20 12                   		beq	.L12
 138 0060 EF AE                   		mov.L	r10, r14
 139 0062 75 2E 30                		and #48, r14
 140 0065 75 5E 20                		cmp	#32, r14
 141 0068 18                      		bne	.L12
 189:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 		if(HWC_Flags.bit.bldc_drain == 0)
 142                             		.loc 1 189 0
 143 0069 5F 77                   		movu.W	r7, r7
 144 006b 61 07                   		cmp	#0, r7
 145 006d 3A 81 02                		beq	.L10
 146                             		.balign 2,3,5
 147                             	.L12:
 195:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	switch(uP_Drain_Data.step) 
 148                             		.loc 1 195 0
 149 0070 FB 72 00 00 00 00       		mov.L	#_uP_Drain_Data, r7
 150 0076 58 7E                   		movu.B	[r7], r14
 151 0078 61 6E                   		cmp	#6, r14
 152 007a 25 05 38 EF 01          		bgtu	.L14
 153 007f FB 72 00 00 00 00       		mov.L	#.L21, r7
 154 0085 FE 6E 77                		mov.L	[r14,r7], r7
 155                             		
 156 0088 7F 07                   	1:jmp	r7
 157                             		.section	.rodata.DRN_uP_Drain_Exe,"a",@progbits
 158                             		.balign 4
 159                             		.balign 4
 160                             	.L21:
 161 0000 00 00 00 8A             		.long .L15
 162 0004 00 00 01 04             		.long .L16
 163 0008 00 00 01 F1             		.long .L17
 164 000c 00 00 01 64             		.long .L18
 165 0010 00 00 01 8D             		.long .L19
 166 0014 00 00 02 62             		.long .L20
 167 0018 00 00 02 62             		.long .L20
 168                             		.section	.text.DRN_uP_Drain_Exe
 169                             	.L15:
 200:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			CLRBIT(FltFlagsKO,WARNING_DRAIN_PREKO);
 170                             		.loc 1 200 0
 171 008a FB 72 00 00 00 00       		mov.L	#_FltFlagsKO, r7
 172 0090 DC 7E                   		mov.W	[r7], r14
 173 0092 75 2E FC                		and #-4, r14
 174 0095 D3 7E                   		mov.W	r14, [r7]
 202:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			FLT_ResetFaultDetectProc( FLT_CODE_DRAIN, FLT_SUBCODE_DRAIN,(uint16_t)TOUT_RESET_PREFAULT );
 175                             		.loc 1 202 0
 176 0097 66 31                   		mov	#3, r1
 177                             	.LVL8:
 178 0099 66 12                   		mov	#1, r2
 179                             	.LVL9:
 180 009b 66 03                   		mov	#0, r3
 181 009d 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
 182                             	.LVL10:
 208:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			if (BasicLoader(PTR_UP_DRAIN, lowStatement, &uPDrain_setting_data) != S_OK ) 
 183                             		.loc 1 208 0
 184 00a1 5B B2                   		movu.B	r11, r2
 185 00a3 75 41 18                		mov	#24, r1
 186 00a6 FB 32 00 00 00 00       		mov.L	#_uPDrain_setting_data, r3
 187 00ac 05 00 00 00             		bsr	_BasicLoader
 188                             	.LVL11:
 189 00b0 76 21 FF 00             		and #0xff, r1
 190 00b4 11                      		beq	.L22
 210:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				uP_Drain_Data.step = DRAIN_ERROR;
 191                             		.loc 1 210 0
 192 00b5 FB 72 00 00 00 00       		mov.L	#_uP_Drain_Data, r7
 193 00bb 2E 38                   		bra	.L58
 194                             	.L22:
 214:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			switch( (highStatement) & (DRN_DRAIN_TYPE_MSK ))
 195                             		.loc 1 214 0
 196 00bd 75 2A 30                		and #48, r10
 197                             	.LVL12:
 198 00c0 FB 72 00 00 00 00       		mov.L	#_uP_Drain_Data, r7
 199 00c6 75 5A 10                		cmp	#16, r10
 200 00c9 20 1C                   		beq	.L25
 201 00cb 75 5A 20                		cmp	#32, r10
 202 00ce 16                      		beq	.L24
 203 00cf 61 0A                   		cmp	#0, r10
 204 00d1 21 22                   		bne	.L58
 205 00d3 03                      		.balign 2,3,3
 206                             	.L24:
 221:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					time=DRN_1ST_TOUT_TO_EMPTY(Drn_get_time());
 207                             		.loc 1 221 0
 208 00d4 05 00 00 00             		bsr	_Drn_get_time
 209                             	.LVL13:
 210 00d8 CC 12                   		mov.B	[r1], r2
 211                             	.LVL14:
 222:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					uP_Drain_Data.step = DRAIN_1ST_TOUT;
 212                             		.loc 1 222 0
 213 00da FB 72 00 00 00 00       		mov.L	#_uP_Drain_Data, r7
 214 00e0 3C 70 01                		mov.B	#1, [r7]
 215 00e3 2E 16                   		bra	.L26
 216                             	.LVL15:
 217                             	.L25:
 226:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					time=DRN_DRAINTIME;
 218                             		.loc 1 226 0
 219 00e5 FB A2 00 00 00 00       		mov.L	#_uPDrain_setting_data, r10
 220 00eb EC AA                   		mov.L	[r10], r10
 221 00ed CC A2                   		mov.B	[r10], r2
 222                             	.LVL16:
 227:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					uP_Drain_Data.step = DRAIN_TIME;
 223                             		.loc 1 227 0
 224 00ef 3C 70 02                		mov.B	#2, [r7]
 225 00f2 0F                      		bra	.L26
 226                             	.LVL17:
 227                             	.L58:
 231:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					uP_Drain_Data.step = DRAIN_ERROR;
 228                             		.loc 1 231 0
 229 00f3 3C 70 06                		mov.B	#6, [r7]
 230 00f6 38 5C FF                		bra	.L62
 231                             	.LVL18:
 232                             	.L26:
 235:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			(void)SWTC_SetMValue((SWTC_CountersType)MP_DRAIN_M_COUNTER, (SWTC_MCounterValue)time);
 233                             		.loc 1 235 0
 234 00f9 5B 22                   		movu.B	r2, r2
 235 00fb 66 71                   		mov	#7, r1
 236 00fd 05 00 00 00             		bsr	_SWTC_SetMValue
 237                             	.LVL19:
 238 0101 38 6D 01                		bra	.L60
 239                             	.LVL20:
 240                             	.L16:
 243:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			SET_PUMP(LD_DRAIN_PUMP_IND,LOAD_ON);
 241                             		.loc 1 243 0
 242 0104 FB 72 00 00 00 00       		mov.L	#_Pump_Pos, r7
 243 010a B0 7F                   		movu.B	1[r7], r7
 244 010c FB B2 00 00 00 00       		mov.L	#_LoadsReq_New, r11
 245 0112 66 1C                   		mov	#1, r12
 246 0114 FE 07 BC                		mov.B	r12, [r7,r11]
 244:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			FLT_ResetFaultDetectProc( FLT_CODE_DRAIN, FLT_SUBCODE_DRAIN,(uint16_t)TOUT_RESET_PREFAULT );
 247                             		.loc 1 244 0
 248 0117 66 31                   		mov	#3, r1
 249                             	.LVL21:
 250 0119 CF C2                   		mov.B	r12, r2
 251                             	.LVL22:
 252 011b 66 03                   		mov	#0, r3
 253 011d 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
 254                             	.LVL23:
 246:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			if( Check_Sensor(highStatement))
 255                             		.loc 1 246 0
 256 0121 CF A1                   		mov.B	r10, r1
 257 0123 05 00 00 00             		bsr	_Check_Sensor
 258                             	.LVL24:
 259 0127 76 21 FF 00             		and #0xff, r1
 260 012b 3A AA 00                		beq	.L31
 248:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				(void)SWTC_Run((SWTC_CountersType)MP_DRAIN_M_COUNTER);
 261                             		.loc 1 248 0
 262 012e 66 71                   		mov	#7, r1
 263 0130 05 00 00 00             		bsr	_SWTC_Run
 264                             	.LVL25:
 250:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				if ( SWTC_IsExpired((SWTC_CountersType)MP_DRAIN_M_COUNTER)) 
 265                             		.loc 1 250 0
 266 0134 66 71                   		mov	#7, r1
 267 0136 05 00 00 00             		bsr	_SWTC_IsExpired
 268                             	.LVL26:
 269 013a 61 01                   		cmp	#0, r1
 270 013c 1C                      		bne	.L29
 271 013d 38 31 01                		bra	.L60
 272                             	.L29:
 253:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					SETBIT(FltFlagsKO,WARNING_DRAIN_PREKO);
 273                             		.loc 1 253 0
 274 0140 FB 72 00 00 00 00       		mov.L	#_FltFlagsKO, r7
 275 0146 DC 7A                   		mov.W	[r7], r10
 276                             	.LVL27:
 277 0148 78 1A                   		bset #1, r10
 278 014a D3 7A                   		mov.W	r10, [r7]
 255:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					(void)SWTC_SetMValue((SWTC_CountersType)MP_DRAIN_M_COUNTER, DRN_PAUSE_TO_EMPTY(Drn_get_time())
 279                             		.loc 1 255 0
 280 014c 05 00 00 00             		bsr	_Drn_get_time
 281                             	.LVL28:
 282 0150 B0 1A                   		movu.B	1[r1], r2
 283 0152 66 71                   		mov	#7, r1
 284 0154 05 00 00 00             		bsr	_SWTC_SetMValue
 285                             	.LVL29:
 257:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					uP_Drain_Data.step=DRAIN_PAUSE;
 286                             		.loc 1 257 0
 287 0158 FB 72 00 00 00 00       		mov.L	#_uP_Drain_Data, r7
 288 015e 3C 70 03                		mov.B	#3, [r7]
 289 0161 38 0D 01                		bra	.L60
 290                             	.LVL30:
 291                             	.L18:
 271:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			(void)SWTC_Run((SWTC_CountersType)MP_DRAIN_M_COUNTER);
 292                             		.loc 1 271 0
 293 0164 66 71                   		mov	#7, r1
 294                             	.LVL31:
 295 0166 05 00 00 00             		bsr	_SWTC_Run
 296                             	.LVL32:
 273:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			if ( SWTC_IsExpired((SWTC_CountersType)MP_DRAIN_M_COUNTER)) 
 297                             		.loc 1 273 0
 298 016a 66 71                   		mov	#7, r1
 299 016c 05 00 00 00             		bsr	_SWTC_IsExpired
 300                             	.LVL33:
 301 0170 61 01                   		cmp	#0, r1
 302 0172 3A FC 00                		beq	.L60
 278:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				(void)SWTC_SetMValue((SWTC_CountersType)MP_DRAIN_M_COUNTER,DRN_2ND_TOUT_TO_EMPTY(Drn_get_time()
 303                             		.loc 1 278 0
 304 0175 05 00 00 00             		bsr	_Drn_get_time
 305                             	.LVL34:
 306 0179 B0 92                   		movu.B	2[r1], r2
 307 017b 66 71                   		mov	#7, r1
 308 017d 05 00 00 00             		bsr	_SWTC_SetMValue
 309                             	.LVL35:
 280:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				uP_Drain_Data.step=DRAIN_2ND_TOUT;
 310                             		.loc 1 280 0
 311 0181 FB 72 00 00 00 00       		mov.L	#_uP_Drain_Data, r7
 312 0187 3C 70 04                		mov.B	#4, [r7]
 313 018a 38 E4 00                		bra	.L60
 314                             	.LVL36:
 315                             	.L19:
 287:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			SET_PUMP(LD_DRAIN_PUMP_IND,LOAD_ON);
 316                             		.loc 1 287 0
 317 018d FB 72 00 00 00 00       		mov.L	#_Pump_Pos, r7
 318 0193 B0 7F                   		movu.B	1[r7], r7
 319 0195 FB B2 00 00 00 00       		mov.L	#_LoadsReq_New, r11
 320 019b 66 1C                   		mov	#1, r12
 321 019d FE 07 BC                		mov.B	r12, [r7,r11]
 289:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c ****             if( Check_Sensor(highStatement))
 322                             		.loc 1 289 0
 323 01a0 CF A1                   		mov.B	r10, r1
 324                             	.LVL37:
 325 01a2 05 00 00 00             		bsr	_Check_Sensor
 326                             	.LVL38:
 327 01a6 76 21 FF 00             		and #0xff, r1
 328 01aa 20 2B                   		beq	.L31
 292:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				(void)SWTC_Run((SWTC_CountersType)MP_DRAIN_M_COUNTER);
 329                             		.loc 1 292 0
 330 01ac 66 71                   		mov	#7, r1
 331 01ae 05 00 00 00             		bsr	_SWTC_Run
 332                             	.LVL39:
 294:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				if (SWTC_IsExpired((SWTC_CountersType)MP_DRAIN_M_COUNTER)) 
 333                             		.loc 1 294 0
 334 01b2 66 71                   		mov	#7, r1
 335 01b4 05 00 00 00             		bsr	_SWTC_IsExpired
 336                             	.LVL40:
 337 01b8 61 01                   		cmp	#0, r1
 338 01ba 3A B4 00                		beq	.L60
 297:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					SETBIT(FltFlagsKO,WARNING_DRAIN_KO);
 339                             		.loc 1 297 0
 340 01bd FB 72 00 00 00 00       		mov.L	#_FltFlagsKO, r7
 341 01c3 DC 7A                   		mov.W	[r7], r10
 342                             	.LVL41:
 343 01c5 78 0A                   		bset #0, r10
 344 01c7 D3 7A                   		mov.W	r10, [r7]
 345                             	.LVL42:
 299:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					uP_Drain_Data.step = DRAIN_END;
 346                             		.loc 1 299 0
 347 01c9 FB 72 00 00 00 00       		mov.L	#_uP_Drain_Data, r7
 348 01cf 3C 70 05                		mov.B	#5, [r7]
 349 01d2 38 96 00                		bra	.L61
 350                             	.LVL43:
 351                             	.L31:
 304:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				(void)SWTC_SetMValue((SWTC_CountersType)MP_DRAIN_M_COUNTER,DRN_DRAINTIME);
 352                             		.loc 1 304 0
 353 01d5 FB 72 00 00 00 00       		mov.L	#_uPDrain_setting_data, r7
 354 01db EC 77                   		mov.L	[r7], r7
 355 01dd 58 72                   		movu.B	[r7], r2
 356 01df 66 71                   		mov	#7, r1
 357 01e1 05 00 00 00             		bsr	_SWTC_SetMValue
 358                             	.LVL44:
 307:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				uP_Drain_Data.step = DRAIN_TIME;
 359                             		.loc 1 307 0
 360 01e5 FB 72 00 00 00 00       		mov.L	#_uP_Drain_Data, r7
 361 01eb 3C 70 02                		mov.B	#2, [r7]
 362 01ee 38 80 00                		bra	.L60
 363                             	.LVL45:
 364                             	.L17:
 315:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			SET_PUMP(LD_DRAIN_PUMP_IND,LOAD_ON);
 365                             		.loc 1 315 0
 366 01f1 FB 72 00 00 00 00       		mov.L	#_Pump_Pos, r7
 367 01f7 B0 7F                   		movu.B	1[r7], r7
 368 01f9 FB B2 00 00 00 00       		mov.L	#_LoadsReq_New, r11
 369 01ff 66 1C                   		mov	#1, r12
 370 0201 FE 07 BC                		mov.B	r12, [r7,r11]
 317:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			(void)SWTC_Run((SWTC_CountersType)MP_DRAIN_M_COUNTER);
 371                             		.loc 1 317 0
 372 0204 66 71                   		mov	#7, r1
 373                             	.LVL46:
 374 0206 05 00 00 00             		bsr	_SWTC_Run
 375                             	.LVL47:
 319:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			if ( SWTC_IsExpired((SWTC_CountersType)MP_DRAIN_M_COUNTER)) 
 376                             		.loc 1 319 0
 377 020a 66 71                   		mov	#7, r1
 378 020c 05 00 00 00             		bsr	_SWTC_IsExpired
 379                             	.LVL48:
 380 0210 61 01                   		cmp	#0, r1
 381 0212 20 42                   		beq	.L36
 382                             	.LVL49:
 324:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				if( ((highStatement) &( DRN_DRAIN_TYPE_MSK)) != DRN_DRAIN_TIME )
 383                             		.loc 1 324 0
 384 0214 75 2A 30                		and #48, r10
 385                             	.LVL50:
 386 0217 75 5A 10                		cmp	#16, r10
 387 021a 20 2E                   		beq	.L33
 326:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					updateRegWaterLoaded();
 388                             		.loc 1 326 0
 389 021c 05 00 00 00             		bsr	_updateRegWaterLoaded
 390                             	.LVL51:
 328:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					WaterInDW = 0;
 391                             		.loc 1 328 0
 392 0220 FB 72 00 00 00 00       		mov.L	#_WaterInDW, r7
 393 0226 3C 70 00                		mov.B	#0, [r7]
 331:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					WaterLoadedReset();
 394                             		.loc 1 331 0
 395 0229 05 00 00 00             		bsr	_WaterLoadedReset
 396                             	.LVL52:
 334:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					Pump_Load_Data.init = FALSE;
 397                             		.loc 1 334 0
 398 022d FB 72 00 00 00 00       		mov.L	#_Pump_Load_Data, r7
 399 0233 CC 7A                   		mov.B	[r7], r10
 400 0235 7A 0A                   		bclr	#0, r10
 401 0237 C3 7A                   		mov.B	r10, [r7]
 335:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					CLRBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS); /* reset flag overflow ripristini */
 402                             		.loc 1 335 0
 403 0239 FB 72 00 00 00 00       		mov.L	#_Flags_1, r7
 404 023f F0 78                   		bclr #0, [r7].B
 336:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 					(void)SWTC_Stop((SWTC_CountersType)MP_LOADTIMEOUT_REST_M_COUNTER);
 405                             		.loc 1 336 0
 406 0241 75 41 2A                		mov	#42, r1
 407 0244 05 00 00 00             		bsr	_SWTC_Stop
 408                             	.LVL53:
 409                             		.balign 2,3,5
 410                             	.L33:
 339:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				uP_Drain_Data.step = DRAIN_END;
 411                             		.loc 1 339 0
 412 0248 FB 72 00 00 00 00       		mov.L	#_uP_Drain_Data, r7
 413 024e 3C 70 05                		mov.B	#5, [r7]
 322:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 				nRet=S_OK;
 414                             		.loc 1 322 0
 415 0251 66 07                   		mov	#0, r7
 416 0253 0B                      		bra	.L32
 417                             	.LVL54:
 418                             	.L36:
 185:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** uint8_t time, nRet=S_FALSE;
 419                             		.loc 1 185 0
 420 0254 66 17                   		mov	#1, r7
 421                             	.LVL55:
 422                             		.balign 2,3,1
 423                             	.L32:
 341:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			FLT_ResetFaultDetectProc( FLT_CODE_DRAIN, FLT_SUBCODE_DRAIN,(uint16_t)TOUT_RESET_PREFAULT );
 424                             		.loc 1 341 0
 425 0256 66 31                   		mov	#3, r1
 426 0258 66 12                   		mov	#1, r2
 427 025a 66 03                   		mov	#0, r3
 428 025c 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
 429                             	.LVL56:
 430 0260 2E 10                   		bra	.L27
 431                             	.LVL57:
 432                             	.L20:
 348:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			(void)SWTC_Stop((SWTC_CountersType)MP_DRAIN_M_COUNTER);
 433                             		.loc 1 348 0
 434 0262 66 71                   		mov	#7, r1
 435                             	.LVL58:
 436 0264 05 00 00 00             		bsr	_SWTC_Stop
 437                             	.LVL59:
 438                             		.balign 2,3,1
 439                             	.L61:
 350:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			nRet=S_OK;
 440                             		.loc 1 350 0
 441 0268 66 07                   		mov	#0, r7
 442 026a 0E                      		bra	.L27
 443                             	.LVL60:
 444                             	.L14:
 354:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			uP_Drain_Data.step=DRAIN_INIT;
 445                             		.loc 1 354 0
 446 026b 3C 70 00                		mov.B	#0, [r7]
 447                             	.LVL61:
 448                             		.balign 2,3,1
 449                             	.L60:
 355:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			nRet=S_FALSE;
 450                             		.loc 1 355 0
 451 026e 66 17                   		mov	#1, r7
 452                             	.LVL62:
 453                             		.balign 2,3,5
 454                             	.L27:
 359:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	if(HWC_Flags.bit.bldc_drain != 0)
 455                             		.loc 1 359 0
 456 0270 FB A2 00 00 00 00       		mov.L	#_HWC_Flags, r10
 457 0276 DC AA                   		mov.W	[r10], r10
 458 0278 76 2A 00 02             		and #0x200, r10
 459 027c 5F AA                   		movu.W	r10, r10
 460 027e 61 0A                   		cmp	#0, r10
 461 0280 20 6E                   		beq	.L10
 361:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 	    if(LoadsReq_New[Pump_Pos[LD_DRAIN_PUMP_IND]].b==LOAD_ON)
 462                             		.loc 1 361 0
 463 0282 FB A2 00 00 00 00       		mov.L	#_Pump_Pos, r10
 464 0288 59 AA 01                		movu.B	1[r10], r10
 465 028b FB B2 00 00 00 00       		mov.L	#_LoadsReq_New, r11
 466 0291 FE CA BA                		movu.B	[r10,r11], r10
 467 0294 FB E2 00 00 00 00       		mov.L	#_BLDC_PumpReq_New, r14
 468 029a 61 1A                   		cmp	#1, r10
 469 029c 21 3D                   		bne	.L34
 363:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			SET_BLDC_SPEED(BLDC_PumpReq_New[DRAIN_BLDC_PUMP],OFFS_B(uPDrain_setting_data.Data, DRAINPUMP_CTR
 470                             		.loc 1 363 0
 471 029e FB A2 00 00 00 00       		mov.L	#_uPDrain_setting_data, r10
 472 02a4 EC AA                   		mov.L	[r10], r10
 473 02a6 59 A4 02                		movu.B	2[r10], r4
 474 02a9 75 14 19                		mul	#25, r4
 475 02ac 68 84                   		shlr	#8, r4
 476 02ae C7 E4 0E                		mov.B	r4, 14[r14]
 477 02b1 CD AB 02                		mov.B	2[r10], r11
 478 02b4 75 1B 19                		mul	#25, r11
 479 02b7 C7 EB 0F                		mov.B	r11, 15[r14]
 480 02ba 59 AB 02                		movu.B	2[r10], r11
 481 02bd 61 0B                   		cmp	#0, r11
 482 02bf FC DB B1                		scne.L	r11
 483 02c2 C7 EB 0D                		mov.B	r11, 13[r14]
 364:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			SET_BLDC_TIME(BLDC_PumpReq_New[DRAIN_BLDC_PUMP],OFFS_B(uPDrain_setting_data.Data, DRAINPUMP_CTRL
 484                             		.loc 1 364 0
 485 02c5 59 A4 03                		movu.B	3[r10], r4
 486 02c8 63 54                   		mul	#5, r4
 487 02ca 68 84                   		shlr	#8, r4
 488 02cc C7 E4 10                		mov.B	r4, 16[r14]
 489 02cf CD AA 03                		mov.B	3[r10], r10
 490 02d2 63 5A                   		mul	#5, r10
 491 02d4 C7 EA 11                		mov.B	r10, 17[r14]
 492 02d7 2E 17                   		bra	.L10
 493                             	.L34:
 368:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			SET_BLDC_SPEED(BLDC_PumpReq_New[DRAIN_BLDC_PUMP],0);
 494                             		.loc 1 368 0
 495 02d9 F9 E4 0E 00             		mov.B	#0, 14[r14]
 496 02dd F9 E4 0F 00             		mov.B	#0, 15[r14]
 497 02e1 F9 E4 0D 00             		mov.B	#0, 13[r14]
 369:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** 			SET_BLDC_TIME(BLDC_PumpReq_New[DRAIN_BLDC_PUMP],0);
 498                             		.loc 1 369 0
 499 02e5 F9 E4 10 00             		mov.B	#0, 16[r14]
 500 02e9 F9 E4 11 00             		mov.B	#0, 17[r14]
 501                             	.LVL63:
 502 02ed 03                      		.balign 2,3,1
 503                             	.L10:
 504                             	.LBE17:
 505                             	.LBE16:
 123:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Modules\Drain.c **** }
 506                             		.loc 1 123 0
 507 02ee EF 71                   		mov.L	r7, r1
 508 02f0 64 11                   		and #1, r1
 509 02f2 3F 7C 06                		rtsd	#24, r7-r12
 510                             	.LFE0:
 570                             	.Letext0:
 571                             		.file 2 "C:\\Workspace\\FW_Inertia\\branch_indesit\\HAL\\HAL_General/StandardTypes.h"
 572                             		.file 3 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_SwTimersCounters/SwTimersCo
 573                             		.file 4 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_Library/LIB_Utilities.h"
 574                             		.file 5 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\General/CstmDefines.h"
 575                             		.file 6 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Application_Platform/APP_Types.h"
 576                             		.file 7 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_BusCOMM/BCP_General.h"
 577                             		.file 8 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\General/CstmTypes.h"
 578                             		.file 9 "C:\\Workspace\\FW_Inertia\\branch_indesit\\PlatformLibrary\\LIB_IOManager/OutputManagerEx
 579                             		.file 10 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\General/CstmGlobal.h"
 580                             		.file 11 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\Modules/Drain.h"
 581                             		.file 12 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_BusCOMM/BCP_BusCommMng.h"
 582                             		.file 13 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Application_Platform/APP_Global.h"
 583                             		.file 14 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Application_Platform/APP_Fault.h"
 584                             		.file 15 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\General/CstmFuncLib.h"
 585                             		.file 16 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\Control/DW_Supervisor.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Drain.c
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:6      .text.Check_Sensor:00000000 _Check_Sensor
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:12     .text.Check_Sensor:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:51     .text.Drn_get_time:00000000 _Drn_get_time
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:55     .text.Drn_get_time:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:77     .text.DRN_uP_Drain_Exe:00000000 _DRN_uP_Drain_Exe
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:81     .text.DRN_uP_Drain_Exe:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:160    .rodata.DRN_uP_Drain_Exe:00000000 .L21
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:169    .text.DRN_uP_Drain_Exe:0000008a .L15
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:240    .text.DRN_uP_Drain_Exe:00000104 .L16
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:364    .text.DRN_uP_Drain_Exe:000001f1 .L17
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:291    .text.DRN_uP_Drain_Exe:00000164 .L18
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:315    .text.DRN_uP_Drain_Exe:0000018d .L19
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:432    .text.DRN_uP_Drain_Exe:00000262 .L20
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:513    .debug_frame:00000000 .Lframe0
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:7      .text.Check_Sensor:00000000 .LFB3
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:52     .text.Drn_get_time:00000000 .LFB4
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:78     .text.DRN_uP_Drain_Exe:00000000 .LFB0
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:2292   .debug_abbrev:00000000 .Ldebug_abbrev0
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3805   .debug_str:0000042f .LASF185
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3877   .debug_str:000006a7 .LASF186
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3669   .debug_ranges:00000000 .Ldebug_ranges0
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3679   .debug_line:00000000 .Ldebug_line0
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3813   .debug_str:0000049a .LASF0
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4059   .debug_str:00000cb1 .LASF2
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3853   .debug_str:000005dd .LASF1
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3779   .debug_str:0000037e .LASF3
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3831   .debug_str:00000543 .LASF4
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4003   .debug_str:00000aeb .LASF5
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3823   .debug_str:000004f0 .LASF6
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3767   .debug_str:00000305 .LASF7
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3723   .debug_str:000001aa .LASF8
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3747   .debug_str:00000259 .LASF9
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3925   .debug_str:00000869 .LASF10
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3989   .debug_str:00000a61 .LASF11
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3699   .debug_str:000000cd .LASF12
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3753   .debug_str:00000285 .LASF13
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3741   .debug_str:0000022c .LASF18
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3881   .debug_str:000006f4 .LASF14
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3863   .debug_str:00000644 .LASF15
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4039   .debug_str:00000c01 .LASF16
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3867   .debug_str:00000660 .LASF17
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3789   .debug_str:000003c9 .LASF19
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4007   .debug_str:00000b06 .LASF20
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3713   .debug_str:0000013c .LASF21
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4005   .debug_str:00000af4 .LASF22
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3957   .debug_str:00000952 .LASF23
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4049   .debug_str:00000c48 .LASF24
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3893   .debug_str:00000766 .LASF25
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3915   .debug_str:00000820 .LASF55
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3683   .debug_str:00000011 .LASF26
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3917   .debug_str:00000828 .LASF27
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3991   .debug_str:00000a6f .LASF28
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3703   .debug_str:000000de .LASF102
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4019   .debug_str:00000b70 .LASF29
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3719   .debug_str:00000178 .LASF30
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3985   .debug_str:00000a46 .LASF31
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3781   .debug_str:00000387 .LASF32
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3769   .debug_str:0000030e .LASF33
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3891   .debug_str:0000074c .LASF34
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3911   .debug_str:000007f4 .LASF35
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3809   .debug_str:00000468 .LASF36
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3969   .debug_str:000009a6 .LASF37
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4001   .debug_str:00000adc .LASF38
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3795   .debug_str:00000400 .LASF39
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3843   .debug_str:00000592 .LASF40
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3791   .debug_str:000003db .LASF41
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3711   .debug_str:0000012b .LASF42
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3845   .debug_str:000005a7 .LASF43
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3857   .debug_str:000005fe .LASF44
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3807   .debug_str:00000455 .LASF45
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3821   .debug_str:000004dd .LASF46
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3999   .debug_str:00000ac5 .LASF47
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3913   .debug_str:00000808 .LASF48
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3861   .debug_str:0000062e .LASF49
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3951   .debug_str:00000925 .LASF50
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3993   .debug_str:00000a7d .LASF51
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3895   .debug_str:00000779 .LASF52
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3947   .debug_str:000008fe .LASF53
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3849   .debug_str:000005cb .LASF54
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3745   .debug_str:00000245 .LASF56
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3797   .debug_str:0000040c .LASF57
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3799   .debug_str:0000041a .LASF58
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3765   .debug_str:000002ff .LASF59
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4029   .debug_str:00000bbc .LASF60
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3759   .debug_str:000002d3 .LASF61
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3997   .debug_str:00000aaf .LASF62
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3689   .debug_str:0000005b .LASF63
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3775   .debug_str:00000345 .LASF64
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3975   .debug_str:000009d5 .LASF65
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4051   .debug_str:00000c5a .LASF66
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3873   .debug_str:00000689 .LASF67
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3965   .debug_str:00000981 .LASF68
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3761   .debug_str:000002df .LASF69
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3681   .debug_str:00000000 .LASF70
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3749   .debug_str:00000267 .LASF71
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3905   .debug_str:000007cc .LASF72
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3931   .debug_str:00000887 .LASF73
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4031   .debug_str:00000bcc .LASF74
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4027   .debug_str:00000bac .LASF75
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3743   .debug_str:00000233 .LASF76
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3739   .debug_str:00000226 .LASF77
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3709   .debug_str:00000126 .LASF78
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3865   .debug_str:0000064f .LASF79
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3835   .debug_str:00000567 .LASF80
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3771   .debug_str:0000031b .LASF81
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3871   .debug_str:00000684 .LASF82
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4035   .debug_str:00000be1 .LASF83
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3839   .debug_str:00000575 .LASF84
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4045   .debug_str:00000c30 .LASF85
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3783   .debug_str:0000039e .LASF86
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3737   .debug_str:00000221 .LASF87
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4055   .debug_str:00000c8a .LASF88
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3787   .debug_str:000003b8 .LASF89
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3883   .debug_str:000006f9 .LASF90
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3959   .debug_str:00000957 .LASF91
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3875   .debug_str:0000069e .LASF92
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3837   .debug_str:0000056c .LASF93
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4011   .debug_str:00000b24 .LASF187
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4023   .debug_str:00000b99 .LASF94
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3953   .debug_str:00000936 .LASF95
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3963   .debug_str:0000097a .LASF96
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3971   .debug_str:000009b5 .LASF97
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3803   .debug_str:00000428 .LASF98
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4047   .debug_str:00000c3e .LASF99
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3829   .debug_str:0000053e .LASF100
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3731   .debug_str:000001e6 .LASF101
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3899   .debug_str:0000079a .LASF103
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3907   .debug_str:000007d1 .LASF104
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3715   .debug_str:00000144 .LASF105
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3717   .debug_str:0000015e .LASF106
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3897   .debug_str:00000787 .LASF107
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3773   .debug_str:00000321 .LASF108
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3687   .debug_str:00000047 .LASF109
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4015   .debug_str:00000b3c .LASF110
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3721   .debug_str:00000188 .LASF111
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3967   .debug_str:0000098a .LASF112
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4053   .debug_str:00000c6a .LASF113
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3869   .debug_str:00000669 .LASF114
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3697   .debug_str:000000b5 .LASF115
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3859   .debug_str:00000613 .LASF116
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3735   .debug_str:00000207 .LASF117
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3887   .debug_str:00000719 .LASF118
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3815   .debug_str:000004a7 .LASF119
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3825   .debug_str:00000502 .LASF120
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4021   .debug_str:00000b7f .LASF121
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3945   .debug_str:000008e5 .LASF122
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3995   .debug_str:00000a8f .LASF123
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3983   .debug_str:00000a27 .LASF124
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4063   .debug_str:00000cc3 .LASF125
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3705   .debug_str:000000f1 .LASF126
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3981   .debug_str:00000a0f .LASF127
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3693   .debug_str:00000083 .LASF128
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3973   .debug_str:000009bd .LASF129
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3889   .debug_str:00000736 .LASF130
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3811   .debug_str:00000482 .LASF131
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3979   .debug_str:000009f8 .LASF132
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4017   .debug_str:00000b51 .LASF133
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3691   .debug_str:00000067 .LASF134
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4037   .debug_str:00000beb .LASF135
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3885   .debug_str:00000703 .LASF136
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3935   .debug_str:000008a0 .LASF137
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3827   .debug_str:00000527 .LASF138
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3757   .debug_str:000002af .LASF139
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3695   .debug_str:00000093 .LASF140
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3755   .debug_str:0000028c .LASF141
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3949   .debug_str:00000907 .LASF142
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3707   .debug_str:00000109 .LASF143
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4009   .debug_str:00000b0b .LASF144
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3777   .debug_str:00000357 .LASF145
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4013   .debug_str:00000b31 .LASF146
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3785   .debug_str:000003a9 .LASF147
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3943   .debug_str:000008da .LASF148
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3851   .debug_str:000005d1 .LASF149
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4033   .debug_str:00000bd2 .LASF150
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3793   .debug_str:000003f6 .LASF151
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3933   .debug_str:00000894 .LASF152
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3923   .debug_str:0000085c .LASF153
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3879   .debug_str:000006e6 .LASF155
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3763   .debug_str:000002f2 .LASF188
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3817   .debug_str:000004c1 .LASF189
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:47     .text.Check_Sensor:0000003b .LFE3
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3149   .debug_loc:00000000 .LLST0
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:23     .text.Check_Sensor:0000001a .LBB6
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:28     .text.Check_Sensor:00000020 .LBE6
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:24     .text.Check_Sensor:0000001a .LBB7
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:27     .text.Check_Sensor:00000020 .LBE7
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:72     .text.Drn_get_time:00000022 .LFE4
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:56     .text.Drn_get_time:00000004 .LVL2
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3729   .debug_str:000001d9 .LASF154
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3941   .debug_str:000008cd .LASF156
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3919   .debug_str:00000846 .LASF157
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3701   .debug_str:000000d9 .LASF158
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3921   .debug_str:0000084b .LASF190
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:510    .text.DRN_uP_Drain_Exe:000002f5 .LFE0
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3163   .debug_loc:00000021 .LLST1
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3176   .debug_loc:00000041 .LLST2
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3303   .debug_loc:00000174 .LLST3
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:90     .text.DRN_uP_Drain_Exe:00000010 .LBB14
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:100    .text.DRN_uP_Drain_Exe:0000001f .LBE14
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:131    .text.DRN_uP_Drain_Exe:00000057 .LBB16
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:505    .text.DRN_uP_Drain_Exe:000002ee .LBE16
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3396   .debug_loc:00000254 .LLST4
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3474   .debug_loc:00000310 .LLST5
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:132    .text.DRN_uP_Drain_Exe:00000057 .LBB17
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:504    .text.DRN_uP_Drain_Exe:000002ee .LBE17
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3586   .debug_loc:0000041f .LLST6
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3601   .debug_loc:00000448 .LLST7
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:182    .text.DRN_uP_Drain_Exe:000000a1 .LVL10
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:188    .text.DRN_uP_Drain_Exe:000000b0 .LVL11
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:209    .text.DRN_uP_Drain_Exe:000000d8 .LVL13
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:237    .text.DRN_uP_Drain_Exe:00000101 .LVL19
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:254    .text.DRN_uP_Drain_Exe:00000121 .LVL23
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:258    .text.DRN_uP_Drain_Exe:00000127 .LVL24
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:264    .text.DRN_uP_Drain_Exe:00000134 .LVL25
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:268    .text.DRN_uP_Drain_Exe:0000013a .LVL26
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:281    .text.DRN_uP_Drain_Exe:00000150 .LVL28
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:285    .text.DRN_uP_Drain_Exe:00000158 .LVL29
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:296    .text.DRN_uP_Drain_Exe:0000016a .LVL32
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:300    .text.DRN_uP_Drain_Exe:00000170 .LVL33
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:305    .text.DRN_uP_Drain_Exe:00000179 .LVL34
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:309    .text.DRN_uP_Drain_Exe:00000181 .LVL35
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:326    .text.DRN_uP_Drain_Exe:000001a6 .LVL38
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:332    .text.DRN_uP_Drain_Exe:000001b2 .LVL39
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:336    .text.DRN_uP_Drain_Exe:000001b8 .LVL40
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:358    .text.DRN_uP_Drain_Exe:000001e5 .LVL44
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:375    .text.DRN_uP_Drain_Exe:0000020a .LVL47
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:379    .text.DRN_uP_Drain_Exe:00000210 .LVL48
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:390    .text.DRN_uP_Drain_Exe:00000220 .LVL51
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:396    .text.DRN_uP_Drain_Exe:0000022d .LVL52
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:408    .text.DRN_uP_Drain_Exe:00000248 .LVL53
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:429    .text.DRN_uP_Drain_Exe:00000260 .LVL56
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:437    .text.DRN_uP_Drain_Exe:00000268 .LVL59
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:123    .text.DRN_uP_Drain_Exe:00000051 .LVL6
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3929   .debug_str:0000087f .LASF159
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3841   .debug_str:00000581 .LASF160
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3909   .debug_str:000007e7 .LASF161
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3833   .debug_str:00000556 .LASF162
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3955   .debug_str:00000947 .LASF163
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3801   .debug_str:00000420 .LASF164
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3961   .debug_str:00000965 .LASF165
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3727   .debug_str:000001d0 .LASF166
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4025   .debug_str:00000b9f .LASF167
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4057   .debug_str:00000c9c .LASF168
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3939   .debug_str:000008be .LASF169
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3855   .debug_str:000005e7 .LASF170
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3819   .debug_str:000004d3 .LASF171
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3977   .debug_str:000009ed .LASF172
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3725   .debug_str:000001c1 .LASF173
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3927   .debug_str:00000871 .LASF174
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3987   .debug_str:00000a57 .LASF175
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3751   .debug_str:00000278 .LASF176
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4041   .debug_str:00000c0f .LASF177
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3685   .debug_str:0000002b .LASF191
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4043   .debug_str:00000c17 .LASF178
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4065   .debug_str:00000ce1 .LASF181
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3847   .debug_str:000005bc .LASF179
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3937   .debug_str:000008b5 .LASF180
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3903   .debug_str:000007bd .LASF182
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3901   .debug_str:000007a8 .LASF183
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:3733   .debug_str:000001f6 .LASF184
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:4061   .debug_str:00000cb9 .LASF192
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:10     .text.Check_Sensor:00000000 .LVL0
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:13     .text.Check_Sensor:00000003 .LVL1
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:82     .text.DRN_uP_Drain_Exe:00000002 .LCFI0
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:80     .text.DRN_uP_Drain_Exe:00000000 .LVL3
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:121    .text.DRN_uP_Drain_Exe:0000004d .LVL5
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:129    .text.DRN_uP_Drain_Exe:00000057 .LVL7
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:177    .text.DRN_uP_Drain_Exe:00000099 .LVL8
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:197    .text.DRN_uP_Drain_Exe:000000c0 .LVL12
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:239    .text.DRN_uP_Drain_Exe:00000104 .LVL20
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:249    .text.DRN_uP_Drain_Exe:00000119 .LVL21
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:276    .text.DRN_uP_Drain_Exe:00000148 .LVL27
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:290    .text.DRN_uP_Drain_Exe:00000164 .LVL30
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:294    .text.DRN_uP_Drain_Exe:00000166 .LVL31
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:314    .text.DRN_uP_Drain_Exe:0000018d .LVL36
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:324    .text.DRN_uP_Drain_Exe:000001a2 .LVL37
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:342    .text.DRN_uP_Drain_Exe:000001c5 .LVL41
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:350    .text.DRN_uP_Drain_Exe:000001d5 .LVL43
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:363    .text.DRN_uP_Drain_Exe:000001f1 .LVL45
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:373    .text.DRN_uP_Drain_Exe:00000206 .LVL46
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:385    .text.DRN_uP_Drain_Exe:00000217 .LVL50
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:417    .text.DRN_uP_Drain_Exe:00000254 .LVL54
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:421    .text.DRN_uP_Drain_Exe:00000256 .LVL55
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:431    .text.DRN_uP_Drain_Exe:00000262 .LVL57
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:435    .text.DRN_uP_Drain_Exe:00000264 .LVL58
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:443    .text.DRN_uP_Drain_Exe:0000026b .LVL60
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:447    .text.DRN_uP_Drain_Exe:0000026e .LVL61
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:179    .text.DRN_uP_Drain_Exe:0000009b .LVL9
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:251    .text.DRN_uP_Drain_Exe:0000011b .LVL22
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:501    .text.DRN_uP_Drain_Exe:000002ed .LVL63
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:211    .text.DRN_uP_Drain_Exe:000000da .LVL14
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:216    .text.DRN_uP_Drain_Exe:000000e5 .LVL15
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:222    .text.DRN_uP_Drain_Exe:000000ef .LVL16
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:226    .text.DRN_uP_Drain_Exe:000000f3 .LVL17
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:231    .text.DRN_uP_Drain_Exe:000000f9 .LVL18
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:345    .text.DRN_uP_Drain_Exe:000001c9 .LVL42
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:382    .text.DRN_uP_Drain_Exe:00000214 .LVL49
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:452    .text.DRN_uP_Drain_Exe:00000270 .LVL62
C:\Users\Andrea\AppData\Local\Temp\ccL793mC.s:587    .debug_info:00000000 .Ldebug_info0

UNDEFINED SYMBOLS
_GIValid
_Virtual_Sensor_Value
_GICriteria
_SPV_isAutotestOrTestRunning
_Tab_DrainFault_Special
_Tab_DrainFault
_Interpreter_Data
_uP_Drain_Data
_HWC_Flags
_CurrentFault
_uPDoorStatus
_SWTC_Stop
_FltFlagsKO
_FLT_ResetFaultDetectProc
_uPDrain_setting_data
_BasicLoader
_SWTC_SetMValue
_Pump_Pos
_LoadsReq_New
_SWTC_Run
_SWTC_IsExpired
_updateRegWaterLoaded
_WaterInDW
_WaterLoadedReset
_Pump_Load_Data
_Flags_1
_BLDC_PumpReq_New

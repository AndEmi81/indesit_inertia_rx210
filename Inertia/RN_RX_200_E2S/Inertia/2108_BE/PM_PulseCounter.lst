   1                             		.file	"PM_PulseCounter.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.PM_PulseCounter_PWDCallback,"ax",@progbits
   6                             	_PM_PulseCounter_PWDCallback:
   7                             	.LFB6:
   8                             		.file 1 "C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter/PM_PulseCounter.c"
   1:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /*
   2:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** Copyright (c) 2004-2005, Indesit Company, EDT.
   3:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** Tutti i diritti sono riservati. All rights reserved.
   4:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** */
   5:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
   6:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /**
   7:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \n
   8:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \par		PM_PulseCounter
   9:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \n
  10:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \file		PM_PulseCounter.c
  11:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \ingroup	PM_PulseCounter
  12:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \date		24/10/2013
  13:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \author		Salvatore Fimiani
  14:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \n
  15:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** */
  16:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
  17:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* ******** */
  18:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* Includes */
  19:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* ******** */
  20:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
  21:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
  22:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** #include "Config.h"
  23:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** #if defined (CONFIG_PM_PULSECOUNTER)
  24:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** #include "PM_PulseCounter.h"
  25:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
  26:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** #include "OCTPM_drv.h"
  27:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
  28:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** #include "OCDIO_drv.h"
  29:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
  30:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* ****************** */
  31:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* Defines and Macros */
  32:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* ****************** */
  33:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
  34:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** #define PCNT_CH_RISING_EDGE	0
  35:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
  36:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
  37:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
  38:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     
  39:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* *************************** */
  40:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* Typedef, Structs and Unions */
  41:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* *************************** */
  42:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
  43:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /**
  44:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****  *\n Structure with configuration and control data
  45:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****  *\n for the Pulse Counter
  46:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****  */
  47:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** typedef struct {
  48:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
  49:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	/**  Configuration info for the PWD channel used as a pulse counter */
  50:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	IO_PWD_CfgType   pwdCfg;
  51:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
  52:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	struct {
  53:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
  54:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		/** If '1' the initialization was done */
  55:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		uint8_t initDone :1;
  56:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		/** If '1' the module is currently active */
  57:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		uint8_t Enabled	:1;
  58:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	    /** If '1' the measured frequency is too high */
  59:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	    uint8_t pulseCounterWarningFreqTooHigh      :1;
  60:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	    /** If '1' the measured frequency is too low */
  61:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	    uint8_t pulseCounterWarningFreqTooLow       :1;
  62:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	    /** Reserved for future uses */
  63:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	    uint8_t freeBit :4;
  64:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
  65:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	} Ctrl;
  66:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
  67:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	/** Max permitted period normalized in nsec */
  68:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     uint32_t maxTnorm;
  69:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     /** Min permitted period normalized in nsec */
  70:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     uint32_t minTnorm;
  71:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     /** Period value normalized in nsec such that if corrTnorm <= Tmeas <= maxTnorm must be applied
  72:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     uint32_t corrTnorm;
  73:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
  74:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     /** Correction factor */
  75:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     uint8_t corrFactor;			
  76:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     /** Pin linked to the Input Capture channel */
  77:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     PulseCounterPin_t pin; 
  78:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     /** Counter for counting the times number the frequency is too high */
  79:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     uint8_t highFreqCntr;       
  80:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     /** Counter for counting the times number the frequency is too low */
  81:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     uint8_t lowFreqCntr;
  82:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     /** Counter for counting the times number the frequency is in the compensation range */
  83:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     uint8_t pulseCorrRangeCntr;
  84:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
  85:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
  86:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** }PulseCounterStruct_t;
  87:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
  88:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
  89:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* **************************** */
  90:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* Prototype of local functions */
  91:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* **************************** */
  92:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
  93:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /**
  94:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****  * Callback to be called by ISR of the PWD.
  95:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****  * It updates the number of counted pulses
  96:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****  */
  97:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** static IO_ErrorType PM_PulseCounter_PWDCallback(IO_NotificationType notifVal, IO_ChannelType channe
  98:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
  99:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 100:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 101:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* **************************** */
 102:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* External functions           */
 103:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* **************************** */
 104:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 105:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 106:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 107:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* ****************** */
 108:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* Exported variables */
 109:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* ****************** */
 110:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** extern const IO_ModuleIOMapType ModuleIOmap[];
 111:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 112:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 113:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /** Number of the counted pulses  */
 114:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** uint16_t PulseCount = 0;
 115:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 116:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* **************** */
 117:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* Global variables */
 118:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* **************** */
 119:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 120:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /**
 121:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****  * Variable of configuration and control
 122:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****  */
 123:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** static PulseCounterStruct_t PulseCounterVars;
 124:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 125:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 126:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* ***************** */
 127:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* Exported function */
 128:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* ***************** */
 129:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 130:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /**
 131:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \n This function provides the initialization of the PulseCounter module.
 132:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \n So, it has to be called by the InputManger module.
 133:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \n The input data are:
 134:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 135:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \n   | BYTE HIGH  			|   BYTE LOW  		 |
 136:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \n   | corrFactor 			| 	unused		  	 |
 137:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \n   | 			Max Period Value 	[msec]	  	 |
 138:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \n   |			Min Period Value 	[msec]	 	 |
 139:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \n   | 	Compensation Period Value 	[msec] 		 |
 140:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****      
 141:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \param  [in]		pin Input Capture pin
 142:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \param  [in]		pDataPulseCounter pointer to the module configuration data
 143:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 144:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 145:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \attention \b PulseCounterVars used as I/O
 146:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 147:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \return 	PulseCounterError_t
 148:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 149:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \retval		PULSECOUNTER_E_OK \n
 150:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****             PULSECOUNTER_E_KO 	 
 151:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** */
 152:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** PulseCounterError_t PM_PulseCounter_Init(PulseCounterPin_t pin, pPulseCounterData_t pDataPulseCount
 153:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** {
 154:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 155:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	PulseCounterError_t error = PULSECOUNTER_E_OK;
 156:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 157:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	IO_ChannelType tmpChannel;
 158:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 159:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	(void)memset(&PulseCounterVars, 0, sizeof(PulseCounterVars));
 160:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     /* richiede il canale del timer associato al pin */
 161:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	if ( OCTPM_GetChannelSync ( &ModuleIOmap[pin], &tmpChannel ) == ( IO_ErrorType ) IO_E_OK )
 162:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	{
 163:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		PulseCounterVars.pwdCfg.PWD_Id = tmpChannel;
 164:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		PulseCounterVars.pwdCfg.inverted = PCNT_CH_RISING_EDGE;
 165:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	}
 166:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	else
 167:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	{
 168:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		PulseCounterVars.pwdCfg.PWD_Id = 0xFF;
 169:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	}
 170:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 171:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 172:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     if ( ( PulseCounterVars.pwdCfg.PWD_Id == 0xFF ) || ( pDataPulseCounter == NULL) )
 173:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     {
 174:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****         error = PULSECOUNTER_E_KO;    
 175:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     }
 176:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     else
 177:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     {   
 178:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     	/* Configuration of the PWD channel */
 179:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     	if ( OCPWD_InitSync ( &PulseCounterVars.pwdCfg ) != ( IO_ErrorType ) IO_E_OK )
 180:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		{
 181:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     		PulseCounterVars.pwdCfg.PWD_Id = 0xFF;
 182:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     		error = PULSECOUNTER_E_KO;
 183:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		}
 184:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     	else
 185:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     	{
 186:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     		PulseCounterVars.pin = pin;
 187:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 188:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     		PulseCounterVars.corrFactor = *((uint8_t*)pDataPulseCounter+8);
 189:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 190:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			/* Max Period expressed in nsec -> Min frequency */
 191:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			PulseCounterVars.maxTnorm = (uint32_t)(*((uint16_t*)pDataPulseCounter+1)*1000000UL);
 192:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			/* Min Period expressed in nsec -> Max frequency */
 193:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			PulseCounterVars.minTnorm = (uint32_t)(*((uint16_t*)pDataPulseCounter+2)*1000000UL);
 194:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			/* Period to correct the error -> Min frequency */
 195:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			PulseCounterVars.corrTnorm = (uint32_t)(*((uint16_t*)pDataPulseCounter+3)*1000000UL);
 196:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 197:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			/* At this point the module initialization is done */
 198:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			PulseCounterVars.Ctrl.initDone = TRUE;
 199:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 200:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			PM_PulseCounter_Reset_Warning(PULSECOUNTER_RESET_BOTH_WARNING);
 201:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 202:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			PM_PulseCounter_SetChannelStatus(PULSECOUNTER_DISABLE);
 203:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     	}
 204:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 205:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     }
 206:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     return error;
 207:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** }
 208:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 209:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 210:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 211:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /**
 212:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** Enable/disable the Pulse Counter Module
 213:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** (Enabled by default)
 214:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 215:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \param  [in] status 1: enabled / 0: disabled
 216:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 217:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \attention \b PulseCounterVars used as I/O
 218:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 219:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** */
 220:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** void PM_PulseCounter_SetChannelStatus ( uint8_t status)
 221:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** {
 222:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	IO_ErrorType res;
 223:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 224:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	/* Do things only if the module is already initialized else do nothing */
 225:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     if ( PulseCounterVars.Ctrl.initDone == TRUE )
 226:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     {
 227:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		if(status == PULSECOUNTER_ENABLE)
 228:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		{
 229:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			/* Enable it only if the module is not yet enabled */
 230:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			if(PulseCounterVars.Ctrl.Enabled == FALSE)
 231:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			{
 232:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 				res = OCPWD_StartSampleSync (PulseCounterVars.pwdCfg.PWD_Id, PM_PulseCounter_PWDCallback );
 233:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 				if(res == IO_E_OK)
 234:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 				{
 235:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 					PulseCounterVars.Ctrl.Enabled = TRUE;
 236:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 				}
 237:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			}
 238:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		}
 239:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		else
 240:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		{
 241:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			(void)OCPWD_StopSampleSync(PulseCounterVars.pwdCfg.PWD_Id);
 242:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		}
 243:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     }
 244:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** }
 245:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 246:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 247:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 248:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 249:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 250:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /**
 251:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** Reset warnings
 252:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 253:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \param  [in]		whichWarning PULSECOUNTER_RESET_LOW_WARNING: 	reset low frequency warning  \n
 254:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 								 PULSECOUNTER_RESET_HIGH_WARNING: 	reset high frequency warning \n
 255:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 								 PULSECOUNTER_RESET_BOTH_WARNING:	reset both frequency worning \n
 256:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 257:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \attention \b PulseCounterVars used as I/O
 258:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 259:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** */    	
 260:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** void PM_PulseCounter_Reset_Warning( uint8_t whichWarning )
 261:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** {
 262:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     switch ( whichWarning )
 263:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     {
 264:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****         case PULSECOUNTER_RESET_LOW_WARNING:
 265:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****             PulseCounterVars.lowFreqCntr = 0;
 266:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****             PulseCounterVars.Ctrl.pulseCounterWarningFreqTooLow = FALSE;
 267:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****             break;
 268:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****         case PULSECOUNTER_RESET_HIGH_WARNING:
 269:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****             PulseCounterVars.highFreqCntr = 0;
 270:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****             PulseCounterVars.Ctrl.pulseCounterWarningFreqTooHigh = FALSE;
 271:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****             break;
 272:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****         case PULSECOUNTER_RESET_BOTH_WARNING:
 273:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****             PulseCounterVars.highFreqCntr = 0;
 274:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****             PulseCounterVars.Ctrl.pulseCounterWarningFreqTooHigh = FALSE;
 275:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****             PulseCounterVars.lowFreqCntr = 0;
 276:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****             PulseCounterVars.Ctrl.pulseCounterWarningFreqTooLow = FALSE;
 277:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****             break;
 278:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****         default:
 279:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****             break;
 280:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     }
 281:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** }
 282:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /**
 283:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** Returns the current warnings
 284:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 285:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \attention \b PulseCounterVars used
 286:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 287:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \return 	uint8_t
 288:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 289:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \retval		0 -> No warnings 
 290:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****             1 -> High Frequency warning 
 291:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****             2 -> Low Frequency warning
 292:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****             3 -> High and Low Frequency warning 
 293:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 294:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 295:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** */
 296:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** uint8_t PM_PulseCounter_GetWarning( void )
 297:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** {
 298:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** uint8_t pulseCounterWarnings = 0;
 299:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 300:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     if ( PulseCounterVars.Ctrl.pulseCounterWarningFreqTooHigh )
 301:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     {
 302:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****         pulseCounterWarnings |= BIT0_MASK;    
 303:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     }
 304:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     if ( PulseCounterVars.Ctrl.pulseCounterWarningFreqTooLow )
 305:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     {
 306:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****         pulseCounterWarnings |= BIT1_MASK;            
 307:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     }
 308:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     
 309:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     return ( pulseCounterWarnings );
 310:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	
 311:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** }
 312:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 313:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /**
 314:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** Sets the PulseCount variable to the value of the input parameter
 315:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 316:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \param  [in]		newPulseCount  value for PulseCount
 317:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 318:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \attention \b PulseCount used as I/O
 319:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 320:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 321:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** */
 322:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** void PM_PulseCounter_SetCount( uint16_t newPulseCount )
 323:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** {
 324:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	PulseCount = newPulseCount;
 325:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** }
 326:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 327:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /**
 328:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** Returns the PulseCount value
 329:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 330:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \attention \b PulseCount used as I/O
 331:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 332:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** \return 	uint16_t
 333:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 334:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** */
 335:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** uint16_t PM_PulseCounter_GetCount( void )
 336:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** {
 337:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** uint16_t copyOfPulseCount;
 338:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 339:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	EnterCriticalSection();
 340:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	copyOfPulseCount = PulseCount;
 341:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	ExitCriticalSection();
 342:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 343:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     return (copyOfPulseCount);
 344:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 345:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** }
 346:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 347:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 348:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* ************** */
 349:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* Local Function */
 350:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** /* ************** */
 351:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 352:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 353:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 354:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** static IO_ErrorType PM_PulseCounter_PWDCallback(IO_NotificationType notifVal, IO_ChannelType channe
 355:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** {
   9                             		.loc 1 355 0
 356:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	 IO_PWD_MeasureType tmpMeasure;
 357:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	 IO_ErrorType res = IO_E_OK;
 358:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 359:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	/* Check if the notification status is good */
 360:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	if ( ( notifVal != IO_N_COMPLETED ) || ( error != IO_E_OK ) )
  10                             		.loc 1 360 0
  11 0000 5B 11                   		movu.B	r1, r1
  12 0002 61 61                   		cmp	#6, r1
  13 0004 3B 9A 00                		bne	.L9
 355:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** {
  14                             		.loc 1 355 0 discriminator 1
  15 0007 6E 7A                   		pushm	r7-r10
  16                             	.LCFI0:
  17 0009 60 80                   		sub	#8, r0
  18                             	.LCFI1:
  19 000b CF 3A                   		mov.B	r3, r10
  20                             		.loc 1 360 0 discriminator 1
  21 000d 5B 37                   		movu.B	r3, r7
  22 000f 61 07                   		cmp	#0, r7
  23 0011 3B 93 00                		bne	.L10
 361:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	{
 362:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		res = IO_E_UNKNOWN_MODE;
 363:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	}
 364:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	else if ( PulseCounterVars.Ctrl.initDone == FALSE )
  24                             		.loc 1 364 0
  25 0014 FB 72 00 00 00 00       		mov.L	#_PulseCounterVars, r7
  26 001a EC 7E                   		mov.L	[r7], r14
  27 001c 7C FE                   		btst #15, r14
  28 001e 3A 89 00                		beq	.L11
  29                             	.LBB4:
  30                             	.LBB5:
 365:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	{
 366:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		res = IO_E_INVALID_CHANNEL_ID;
 367:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	}
 368:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	else
 369:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	{
 370:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		/* Get the PWD Data Period and Ton in nsec */
 371:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		OCPWD_GetAllSync( channel, &tmpMeasure );
  31                             		.loc 1 371 0
  32 0021 CF 21                   		mov.B	r2, r1
  33 0023 EF 02                   		mov.L	r0, r2
  34 0025 05 00 00 00             		bsr	_OCPWD_GetAllSync
 372:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 373:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		if(tmpMeasure.period < PulseCounterVars.minTnorm)
  35                             		.loc 1 373 0
  36 0029 EC 04                   		mov.L	[r0], r4
  37 002b 06 85 74 02             		cmp	8[r7].L, r4
  38 002f 22 1A                   		bgeu	.L3
 374:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		{/* The measured frequency is too high */
 375:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			if(PulseCounterVars.highFreqCntr < PULSECOUNTER_FREQ_TOO_HIGH_FILTER)
  39                             		.loc 1 375 0
  40 0031 CD 7A 12                		mov.B	18[r7], r10
  41 0034 5B AE                   		movu.B	r10, r14
  42 0036 75 5E 63                		cmp	#0x63, r14
  43 0039 24 09                   		bgtu	.L4
 376:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			{
 377:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 				PulseCounterVars.highFreqCntr++;
  44                             		.loc 1 377 0
  45 003b 62 1A                   		add	#1, r10
  46 003d C7 7A 12                		mov.B	r10, 18[r7]
  47 0040 2E 5A                   		bra	.L5
  48                             	.L4:
 378:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			}
 379:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			else
 380:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			{
 381:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 				PulseCounterVars.Ctrl.pulseCounterWarningFreqTooHigh = TRUE;
  49                             		.loc 1 381 0
  50 0042 CD 7A 02                		mov.B	2[r7], r10
  51 0045 78 5A                   		bset	#5, r10
  52 0047 2E 1D                   		bra	.L13
  53                             	.L3:
 382:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			}
 383:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		}
 384:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	    else if(tmpMeasure.period > PulseCounterVars.maxTnorm)
  54                             		.loc 1 384 0
  55 0049 06 85 74 01             		cmp	4[r7].L, r4
  56 004d 25 1C                   		bleu	.L6
 385:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	    {/* The measured frequency is too low */
 386:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			if(PulseCounterVars.lowFreqCntr < PULSECOUNTER_FREQ_TOO_LOW_FILTER)
  57                             		.loc 1 386 0
  58 004f CD 7A 13                		mov.B	19[r7], r10
  59 0052 5B AE                   		movu.B	r10, r14
  60 0054 61 9E                   		cmp	#9, r14
  61 0056 24 09                   		bgtu	.L7
 387:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			{
 388:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			   PulseCounterVars.lowFreqCntr++;
  62                             		.loc 1 388 0
  63 0058 62 1A                   		add	#1, r10
  64 005a C7 7A 13                		mov.B	r10, 19[r7]
  65 005d 2E 3D                   		bra	.L5
  66                             	.L7:
 389:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			}
 390:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			else
 391:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			{
 392:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			   PulseCounterVars.Ctrl.pulseCounterWarningFreqTooLow = TRUE;
  67                             		.loc 1 392 0
  68 005f CD 7A 02                		mov.B	2[r7], r10
  69 0062 78 4A                   		bset	#4, r10
  70                             		.balign 2,3,5
  71                             	.L13:
  72 0064 C7 7A 02                		mov.B	r10, 2[r7]
  73 0067 2E 33                   		bra	.L5
  74                             	.L6:
 393:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			}
 394:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	    }
 395:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	    else
 396:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	    {
 397:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			PulseCount++;
  75                             		.loc 1 397 0
  76 0069 FB E2 00 00 00 00       		mov.L	#_PulseCount, r14
  77 006f DC E3                   		mov.W	[r14], r3
  78 0071 71 32 01                		add	#1, r3, r2
  79 0074 D3 E2                   		mov.W	r2, [r14]
 398:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 399:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			/* As soon as the frequency is in the correct range, the error counters are reset */
 400:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			PulseCounterVars.highFreqCntr = 0;
  80                             		.loc 1 400 0
  81 0076 C7 7A 12                		mov.B	r10, 18[r7]
 401:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			PulseCounterVars.lowFreqCntr = 0;
  82                             		.loc 1 401 0
  83 0079 C7 7A 13                		mov.B	r10, 19[r7]
 402:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 403:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			/* Checks if it is necessary to correct the PulseCount value */
 404:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			if(tmpMeasure.period >= PulseCounterVars.corrTnorm)
  84                             		.loc 1 404 0
  85 007c 06 85 74 03             		cmp	12[r7].L, r4
  86 0080 23 17                   		bltu	.L8
 405:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			{
 406:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			   PulseCounterVars.pulseCorrRangeCntr++;
  87                             		.loc 1 406 0
  88 0082 8D 74                   		mov.B	20[r7], r4
  89 0084 62 14                   		add	#1, r4
  90 0086 85 74                   		mov.B	r4, 20[r7]
 407:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			   if(PulseCounterVars.pulseCorrRangeCntr >= PulseCounterVars.corrFactor)
  91                             		.loc 1 407 0
  92 0088 5B 44                   		movu.B	r4, r4
  93 008a 45 74 10                		cmp	16[r7].UB, r4
  94 008d 23 0D                   		bltu	.L5
 408:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			   {
 409:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 				   PulseCounterVars.pulseCorrRangeCntr = 0;
  95                             		.loc 1 409 0
  96 008f C7 7A 14                		mov.B	r10, 20[r7]
 410:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 				   PulseCount++;
  97                             		.loc 1 410 0
  98 0092 62 23                   		add	#2, r3
  99 0094 D3 E3                   		mov.W	r3, [r14]
 100 0096 0C                      		bra	.L5
 101                             	.L8:
 411:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			   }
 412:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			}
 413:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			else
 414:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			{
 415:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			   PulseCounterVars.pulseCorrRangeCntr = 0;
 102                             		.loc 1 415 0
 103 0097 C7 7A 14                		mov.B	r10, 20[r7]
 104                             		.balign 2,3,1
 105                             	.L5:
 106 009a 66 01                   		mov	#0, r1
 107 009c 2E 0E                   		bra	.L2
 108                             	.L9:
 109                             	.LCFI2:
 110                             	.LBE5:
 111                             	.LBE4:
 362:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		res = IO_E_UNKNOWN_MODE;
 112                             		.loc 1 362 0
 113 009e 66 31                   		mov	#3, r1
 416:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			}
 417:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	    }
 418:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	}
 419:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 
 420:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	return res;
 421:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** }
 114                             		.loc 1 421 0
 115 00a0 75 21 13                		and #19, r1
 116 00a3 02                      		rts
 117                             	.L10:
 118                             	.LCFI3:
 362:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		res = IO_E_UNKNOWN_MODE;
 119                             		.loc 1 362 0
 120 00a4 66 31                   		mov	#3, r1
 121 00a6 0C                      		bra	.L2
 122                             	.L11:
 366:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		res = IO_E_INVALID_CHANNEL_ID;
 123                             		.loc 1 366 0
 124 00a7 75 41 12                		mov	#18, r1
 125                             		.balign 2,3,2
 126                             	.L2:
 127                             		.loc 1 421 0
 128 00aa 75 21 13                		and #19, r1
 129 00ad 3F 7A 06                		rtsd	#24, r7-r10
 130                             	.LFE6:
 132                             		.section	.text.PM_PulseCounter_SetChannelStatus,"ax",@progbits
 133                             		.global	_PM_PulseCounter_SetChannelStatus
 135                             	_PM_PulseCounter_SetChannelStatus:
 136                             	.LFB1:
 221:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** {
 137                             		.loc 1 221 0
 138 0000 7E A7                   		push.l	r7
 139                             	.LCFI4:
 225:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     if ( PulseCounterVars.Ctrl.initDone == TRUE )
 140                             		.loc 1 225 0
 141 0002 FB 72 00 00 00 00       		mov.L	#_PulseCounterVars, r7
 142 0008 EC 7E                   		mov.L	[r7], r14
 143 000a 7C FE                   		btst #15, r14
 144 000c 20 2F                   		beq	.L14
 227:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		if(status == PULSECOUNTER_ENABLE)
 145                             		.loc 1 227 0
 146 000e 5B 11                   		movu.B	r1, r1
 147 0010 61 11                   		cmp	#1, r1
 148 0012 21 21                   		bne	.L17
 230:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			if(PulseCounterVars.Ctrl.Enabled == FALSE)
 149                             		.loc 1 230 0
 150 0014 7C EE                   		btst #14, r14
 151 0016 21 25                   		bne	.L14
 232:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 				res = OCPWD_StartSampleSync (PulseCounterVars.pwdCfg.PWD_Id, PM_PulseCounter_PWDCallback );
 152                             		.loc 1 232 0
 153 0018 CC 71                   		mov.B	[r7], r1
 154 001a FB 22 00 00 00 00       		mov.L	#_PM_PulseCounter_PWDCallback, r2
 155 0020 05 00 00 00             		bsr	_OCPWD_StartSampleSync
 233:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 				if(res == IO_E_OK)
 156                             		.loc 1 233 0
 157 0024 76 21 FF 00             		and #0xff, r1
 158 0028 21 13                   		bne	.L14
 235:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 					PulseCounterVars.Ctrl.Enabled = TRUE;
 159                             		.loc 1 235 0
 160 002a CD 7E 02                		mov.B	2[r7], r14
 161 002d 78 6E                   		bset	#6, r14
 162 002f C7 7E 02                		mov.B	r14, 2[r7]
 163 0032 09                      		bra	.L14
 164                             	.L17:
 241:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			(void)OCPWD_StopSampleSync(PulseCounterVars.pwdCfg.PWD_Id);
 165                             		.loc 1 241 0
 166 0033 CC 71                   		mov.B	[r7], r1
 244:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** }
 167                             		.loc 1 244 0
 168 0035 7E B7                   		pop	r7
 241:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			(void)OCPWD_StopSampleSync(PulseCounterVars.pwdCfg.PWD_Id);
 169                             		.loc 1 241 0
 170 0037 04 00 00 00             		bra	_OCPWD_StopSampleSync
 171                             	.L14:
 244:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** }
 172                             		.loc 1 244 0
 173 003b 3F 77 01                		rtsd	#4, r7-r7
 174                             	.LFE1:
 176                             		.section	.text.PM_PulseCounter_Reset_Warning,"ax",@progbits
 177                             		.global	_PM_PulseCounter_Reset_Warning
 179                             	_PM_PulseCounter_Reset_Warning:
 180                             	.LFB2:
 261:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** {
 181                             		.loc 1 261 0
 182                             	.LVL0:
 262:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     switch ( whichWarning )
 183                             		.loc 1 262 0
 184 0000 5B 1E                   		movu.B	r1, r14
 185 0002 61 1E                   		cmp	#1, r14
 186 0004 20 19                   		beq	.L23
 187 0006 61 0E                   		cmp	#0, r14
 188 0008 17                      		beq	.L22
 189 0009 61 2E                   		cmp	#2, r14
 190 000b 21 3C                   		bne	.L20
 191 000d 2E 21                   		bra	.L24
 192                             	.L22:
 265:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****             PulseCounterVars.lowFreqCntr = 0;
 193                             		.loc 1 265 0
 194 000f FB E2 00 00 00 00       		mov.L	#_PulseCounterVars, r14
 195 0015 C7 E1 13                		mov.B	r1, 19[r14]
 266:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****             PulseCounterVars.Ctrl.pulseCounterWarningFreqTooLow = FALSE;
 196                             		.loc 1 266 0
 197 0018 CD E4 02                		mov.B	2[r14], r4
 198 001b 2E 27                   		bra	.L25
 199                             	.L23:
 269:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****             PulseCounterVars.highFreqCntr = 0;
 200                             		.loc 1 269 0
 201 001d FB E2 00 00 00 00       		mov.L	#_PulseCounterVars, r14
 202 0023 F9 E4 12 00             		mov.B	#0, 18[r14]
 270:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****             PulseCounterVars.Ctrl.pulseCounterWarningFreqTooHigh = FALSE;
 203                             		.loc 1 270 0
 204 0027 CD E4 02                		mov.B	2[r14], r4
 205 002a 7A 54                   		bclr	#5, r4
 206 002c 2E 18                   		bra	.L26
 207                             	.L24:
 273:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****             PulseCounterVars.highFreqCntr = 0;
 208                             		.loc 1 273 0
 209 002e FB E2 00 00 00 00       		mov.L	#_PulseCounterVars, r14
 210 0034 F9 E4 12 00             		mov.B	#0, 18[r14]
 274:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****             PulseCounterVars.Ctrl.pulseCounterWarningFreqTooHigh = FALSE;
 211                             		.loc 1 274 0
 212 0038 CD E4 02                		mov.B	2[r14], r4
 213 003b 7A 54                   		bclr	#5, r4
 275:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****             PulseCounterVars.lowFreqCntr = 0;
 214                             		.loc 1 275 0
 215 003d F9 E4 13 00             		mov.B	#0, 19[r14]
 216 0041 03                      		.balign 2,3,2
 217                             	.L25:
 276:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****             PulseCounterVars.Ctrl.pulseCounterWarningFreqTooLow = FALSE;
 218                             		.loc 1 276 0
 219 0042 7A 44                   		bclr	#4, r4
 220                             		.balign 2,3,5
 221                             	.L26:
 222 0044 C7 E4 02                		mov.B	r4, 2[r14]
 223                             	.L20:
 224 0047 02                      		rts
 225                             	.LFE2:
 227                             		.section	.text.PM_PulseCounter_Init,"ax",@progbits
 228                             		.global	_PM_PulseCounter_Init
 230                             	_PM_PulseCounter_Init:
 231                             	.LFB0:
 153:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** {
 232                             		.loc 1 153 0
 233                             	.LVL1:
 234 0000 6E 7D                   		pushm	r7-r13
 235                             	.LCFI5:
 236 0002 60 40                   		sub	#4, r0
 237                             	.LCFI6:
 238 0004 CF 1B                   		mov.B	r1, r11
 239 0006 EF 2A                   		mov.L	r2, r10
 240                             	.LVL2:
 159:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	(void)memset(&PulseCounterVars, 0, sizeof(PulseCounterVars));
 241                             		.loc 1 159 0
 242 0008 FB 72 00 00 00 00       		mov.L	#_PulseCounterVars, r7
 243 000e EF 71                   		mov.L	r7, r1
 244                             	.LVL3:
 245 0010 75 43 18                		mov.L	#24, r3
 246 0013 66 02                   		mov	#0, r2
 247                             	.LVL4:
 248 0015 7F 88                   		sstr.b
 161:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	if ( OCTPM_GetChannelSync ( &ModuleIOmap[pin], &tmpChannel ) == ( IO_ErrorType ) IO_E_OK )
 249                             		.loc 1 161 0
 250 0017 5B B1                   		movu.B	r11, r1
 251 0019 6C 31                   		shll	#3, r1
 252 001b 70 11 00 00 00 00       		add	#_ModuleIOmap, r1
 253 0021 EF 02                   		mov.L	r0, r2
 254 0023 05 00 00 00             		bsr	_OCTPM_GetChannelSync
 255                             	.LVL5:
 256 0027 76 21 FF 00             		and #0xff, r1
 257 002b 21 0D                   		bne	.L28
 258                             	.LVL6:
 163:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		PulseCounterVars.pwdCfg.PWD_Id = tmpChannel;
 259                             		.loc 1 163 0
 260 002d C0 07                   		mov.B	[r0], [r7]
 164:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		PulseCounterVars.pwdCfg.inverted = PCNT_CH_RISING_EDGE;
 261                             		.loc 1 164 0
 262 002f CD 7C 01                		mov.B	1[r7], r12
 263 0032 7A 7C                   		bclr	#7, r12
 264 0034 C7 7C 01                		mov.B	r12, 1[r7]
 265 0037 0D                      		bra	.L29
 266                             	.LVL7:
 267                             	.L28:
 168:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 		PulseCounterVars.pwdCfg.PWD_Id = 0xFF;
 268                             		.loc 1 168 0
 269 0038 F8 74 FF                		mov.B	#-1, [r7]
 270                             	.LVL8:
 271 003b 03                      		.balign 2,3,5
 272                             	.L29:
 172:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     if ( ( PulseCounterVars.pwdCfg.PWD_Id == 0xFF ) || ( pDataPulseCounter == NULL) )
 273                             		.loc 1 172 0
 274 003c FB 72 00 00 00 00       		mov.L	#_PulseCounterVars, r7
 275 0042 58 7C                   		movu.B	[r7], r12
 276 0044 75 5C FF                		cmp	#0xff, r12
 277 0047 20 56                   		beq	.L33
 172:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     if ( ( PulseCounterVars.pwdCfg.PWD_Id == 0xFF ) || ( pDataPulseCounter == NULL) )
 278                             		.loc 1 172 0 is_stmt 0 discriminator 1
 279 0049 61 0A                   		cmp	#0, r10
 280 004b 20 52                   		beq	.L33
 179:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     	if ( OCPWD_InitSync ( &PulseCounterVars.pwdCfg ) != ( IO_ErrorType ) IO_E_OK )
 281                             		.loc 1 179 0 is_stmt 1
 282 004d EF 71                   		mov.L	r7, r1
 283 004f 05 00 00 00             		bsr	_OCPWD_InitSync
 284                             	.LVL9:
 285 0053 EF 1C                   		mov.L	r1, r12
 286 0055 71 1D 00                		add	#0, r1, r13
 287 0058 16                      		beq	.L31
 181:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     		PulseCounterVars.pwdCfg.PWD_Id = 0xFF;
 288                             		.loc 1 181 0
 289 0059 F8 74 FF                		mov.B	#-1, [r7]
 290                             	.LVL10:
 291 005c 2E 41                   		bra	.L33
 292                             	.LVL11:
 293                             	.L31:
 186:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     		PulseCounterVars.pin = pin;
 294                             		.loc 1 186 0
 295 005e C7 7B 11                		mov.B	r11, 17[r7]
 188:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     		PulseCounterVars.corrFactor = *((uint8_t*)pDataPulseCounter+8);
 296                             		.loc 1 188 0
 297 0061 C5 A7 08 10             		mov.B	8[r10], 16[r7]
 191:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			PulseCounterVars.maxTnorm = (uint32_t)(*((uint16_t*)pDataPulseCounter+1)*1000000UL);
 298                             		.loc 1 191 0
 299 0065 5D AE 01                		movu.W	2[r10], r14
 300 0068 77 1E 40 42 0F          		mul	#0xf4240, r14
 301 006d E7 7E 01                		mov.L	r14, 4[r7]
 193:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			PulseCounterVars.minTnorm = (uint32_t)(*((uint16_t*)pDataPulseCounter+2)*1000000UL);
 302                             		.loc 1 193 0
 303 0070 5D AE 02                		movu.W	4[r10], r14
 304 0073 77 1E 40 42 0F          		mul	#0xf4240, r14
 305 0078 E7 7E 02                		mov.L	r14, 8[r7]
 195:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			PulseCounterVars.corrTnorm = (uint32_t)(*((uint16_t*)pDataPulseCounter+3)*1000000UL);
 306                             		.loc 1 195 0
 307 007b 5D AA 03                		movu.W	6[r10], r10
 308                             	.LVL12:
 309 007e 77 1A 40 42 0F          		mul	#0xf4240, r10
 310 0083 E7 7A 03                		mov.L	r10, 12[r7]
 198:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			PulseCounterVars.Ctrl.initDone = TRUE;
 311                             		.loc 1 198 0
 312 0086 CD 7A 02                		mov.B	2[r7], r10
 313 0089 78 7A                   		bset	#7, r10
 314 008b C7 7A 02                		mov.B	r10, 2[r7]
 200:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			PM_PulseCounter_Reset_Warning(PULSECOUNTER_RESET_BOTH_WARNING);
 315                             		.loc 1 200 0
 316 008e 66 21                   		mov	#2, r1
 317 0090 05 00 00 00             		bsr	_PM_PulseCounter_Reset_Warning
 318                             	.LVL13:
 202:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 			PM_PulseCounter_SetChannelStatus(PULSECOUNTER_DISABLE);
 319                             		.loc 1 202 0
 320 0094 CF D1                   		mov.B	r13, r1
 321 0096 05 00 00 00             		bsr	_PM_PulseCounter_SetChannelStatus
 322                             	.LVL14:
 155:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	PulseCounterError_t error = PULSECOUNTER_E_OK;
 323                             		.loc 1 155 0
 324 009a CF C1                   		mov.B	r12, r1
 325 009c 0C                      		bra	.L30
 326                             	.LVL15:
 327                             	.L33:
 174:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****         error = PULSECOUNTER_E_KO;    
 328                             		.loc 1 174 0
 329 009d 66 11                   		mov	#1, r1
 330                             	.LVL16:
 331 009f 03                      		.balign 2,3,1
 332                             	.L30:
 207:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** }
 333                             		.loc 1 207 0
 334 00a0 5B 11                   		movu.B	r1, r1
 335 00a2 3F 7D 08                		rtsd	#32, r7-r13
 336                             	.LFE0:
 338 00a5 03                      		.section	.text.PM_PulseCounter_GetWarning,"ax",@progbits
 339                             		.global	_PM_PulseCounter_GetWarning
 341                             	_PM_PulseCounter_GetWarning:
 342                             	.LFB3:
 297:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** {
 343                             		.loc 1 297 0
 344                             	.LVL17:
 300:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     if ( PulseCounterVars.Ctrl.pulseCounterWarningFreqTooHigh )
 345                             		.loc 1 300 0
 346 0000 FB E2 00 00 00 00       		mov.L	#_PulseCounterVars, r14
 347 0006 EC E4                   		mov.L	[r14], r4
 348 0008 FD AD 4E                		shar	#13, r4, r14
 349 000b 64 1E                   		and #1, r14
 298:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** uint8_t pulseCounterWarnings = 0;
 350                             		.loc 1 298 0
 351 000d CF E1                   		mov.B	r14, r1
 352                             	.LVL18:
 304:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****     if ( PulseCounterVars.Ctrl.pulseCounterWarningFreqTooLow )
 353                             		.loc 1 304 0
 354 000f 7C C4                   		btst #12, r4
 355 0011 15                      		beq	.L36
 306:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c ****         pulseCounterWarnings |= BIT1_MASK;            
 356                             		.loc 1 306 0
 357 0012 EF E1                   		mov.L	r14, r1
 358                             	.LVL19:
 359 0014 78 11                   		bset #1, r1
 360                             	.LVL20:
 361                             		.balign 2,3,1
 362                             	.L36:
 311:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** }
 363                             		.loc 1 311 0
 364 0016 64 31                   		and #3, r1
 365                             	.LVL21:
 366 0018 02                      		rts
 367                             	.LFE3:
 369 0019 03                      		.section	.text.PM_PulseCounter_SetCount,"ax",@progbits
 370                             		.global	_PM_PulseCounter_SetCount
 372                             	_PM_PulseCounter_SetCount:
 373                             	.LFB4:
 323:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** {
 374                             		.loc 1 323 0
 375                             	.LVL22:
 324:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	PulseCount = newPulseCount;
 376                             		.loc 1 324 0
 377 0000 FB E2 00 00 00 00       		mov.L	#_PulseCount, r14
 378 0006 D3 E1                   		mov.W	r1, [r14]
 379 0008 02                      		rts
 380                             	.LFE4:
 382                             		.section	.text.PM_PulseCounter_GetCount,"ax",@progbits
 383                             		.global	_PM_PulseCounter_GetCount
 385                             	_PM_PulseCounter_GetCount:
 386                             	.LFB5:
 336:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** {
 387                             		.loc 1 336 0
 388 0000 7E A7                   		push.l	r7
 389                             	.LCFI7:
 339:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	EnterCriticalSection();
 390                             		.loc 1 339 0
 391 0002 05 00 00 00             		bsr	_OS_DisableInterrupt
 392                             	.LVL23:
 340:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	copyOfPulseCount = PulseCount;
 393                             		.loc 1 340 0
 394 0006 FB 72 00 00 00 00       		mov.L	#_PulseCount, r7
 395 000c DC 77                   		mov.W	[r7], r7
 396                             	.LVL24:
 339:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	EnterCriticalSection();
 397                             		.loc 1 339 0
 398 000e FB E2 00 00 00 00       		mov.L	#_OS_Global, r14
 341:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	ExitCriticalSection();
 399                             		.loc 1 341 0
 400 0014 59 EE 01                		movu.B	1[r14], r14
 401 0017 61 0E                   		cmp	#0, r14
 402 0019 1D                      		bne	.L42
 341:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** 	ExitCriticalSection();
 403                             		.loc 1 341 0 is_stmt 0 discriminator 1
 404 001a 05 00 00 00             		bsr	_OS_EnableInterrupt
 405                             	.LVL25:
 406                             		.balign 2,3,1
 407                             	.L42:
 345:C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter\PM_PulseCounter.c **** }
 408                             		.loc 1 345 0 is_stmt 1
 409 001e 5F 71                   		movu.W	r7, r1
 410 0020 3F 77 01                		rtsd	#4, r7-r7
 411                             	.LFE5:
 413                             		.global	_PulseCount
 414 0023 03                      		.section	.bss.PulseCount,"aw",@nobits
 415                             		.balign 2
 418                             	_PulseCount:
 419 0000 00 00                   		.zero	2
 420                             		.section	.bss.PulseCounterVars,"aw",@nobits
 421                             		.balign 4
 424                             	_PulseCounterVars:
 425 0000 00 00 00 00 00 00 00 00 		.zero	24
 425      00 00 00 00 00 00 00 00 
 425      00 00 00 00 00 00 00 00 
 570                             	.Letext0:
 571                             		.file 2 "C:\\Workspace\\FW_Inertia\\branch_indesit\\HAL\\HAL_General/StandardTypes.h"
 572                             		.file 3 "C:\\Workspace\\FW_Inertia\\branch_indesit\\OS\\EmbOS\\RX200_GNU\\V388\\Inc/RTOS.h"
 573                             		.file 4 "C:/Workspace/FW_Inertia/branch_indesit/ProductModules/PM_PulseCounter/PM_PulseCounter.h"
 574                             		.file 5 "C:\\Workspace\\FW_Inertia\\branch_indesit\\HAL\\RN_RX200/RN_RX200_cfg.h"
 575                             		.file 6 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Drivers/IO_driver.h"
 576                             		.file 7 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Drivers\\OCTPM/OCTPM_drv.h"
DEFINED SYMBOLS
                            *ABS*:00000000 PM_PulseCounter.c
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:6      .text.PM_PulseCounter_PWDCallback:00000000 _PM_PulseCounter_PWDCallback
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:11     .text.PM_PulseCounter_PWDCallback:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:424    .bss.PulseCounterVars:00000000 _PulseCounterVars
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:418    .bss.PulseCount:00000000 _PulseCount
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:135    .text.PM_PulseCounter_SetChannelStatus:00000000 _PM_PulseCounter_SetChannelStatus
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:138    .text.PM_PulseCounter_SetChannelStatus:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:179    .text.PM_PulseCounter_Reset_Warning:00000000 _PM_PulseCounter_Reset_Warning
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:184    .text.PM_PulseCounter_Reset_Warning:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:230    .text.PM_PulseCounter_Init:00000000 _PM_PulseCounter_Init
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:234    .text.PM_PulseCounter_Init:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:341    .text.PM_PulseCounter_GetWarning:00000000 _PM_PulseCounter_GetWarning
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:346    .text.PM_PulseCounter_GetWarning:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:372    .text.PM_PulseCounter_SetCount:00000000 _PM_PulseCounter_SetCount
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:377    .text.PM_PulseCounter_SetCount:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:385    .text.PM_PulseCounter_GetCount:00000000 _PM_PulseCounter_GetCount
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:388    .text.PM_PulseCounter_GetCount:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:427    .debug_frame:00000000 .Lframe0
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:7      .text.PM_PulseCounter_PWDCallback:00000000 .LFB6
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:136    .text.PM_PulseCounter_SetChannelStatus:00000000 .LFB1
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:180    .text.PM_PulseCounter_Reset_Warning:00000000 .LFB2
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:231    .text.PM_PulseCounter_Init:00000000 .LFB0
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:342    .text.PM_PulseCounter_GetWarning:00000000 .LFB3
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:373    .text.PM_PulseCounter_SetCount:00000000 .LFB4
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:386    .text.PM_PulseCounter_GetCount:00000000 .LFB5
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:2233   .debug_abbrev:00000000 .Ldebug_abbrev0
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3410   .debug_str:000002d5 .LASF170
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3642   .debug_str:00000918 .LASF171
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3288   .debug_ranges:00000000 .Ldebug_ranges0
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3306   .debug_line:00000000 .Ldebug_line0
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3520   .debug_str:000005f1 .LASF0
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3390   .debug_str:00000241 .LASF2
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3442   .debug_str:000003c1 .LASF1
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3598   .debug_str:00000816 .LASF3
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3366   .debug_str:0000019f .LASF4
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3380   .debug_str:00000211 .LASF5
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3340   .debug_str:000000c6 .LASF6
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3388   .debug_str:00000233 .LASF7
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3614   .debug_str:00000871 .LASF8
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3512   .debug_str:000005be .LASF9
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3360   .debug_str:00000178 .LASF10
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3518   .debug_str:000005e9 .LASF11
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3418   .debug_str:00000324 .LASF12
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3620   .debug_str:0000089d .LASF13
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3634   .debug_str:000008e6 .LASF14
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3386   .debug_str:00000226 .LASF15
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3584   .debug_str:000007a9 .LASF16
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3308   .debug_str:00000000 .LASF17
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3526   .debug_str:0000062d .LASF18
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3554   .debug_str:000006e9 .LASF19
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3530   .debug_str:00000646 .LASF33
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3316   .debug_str:0000002f .LASF20
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3454   .debug_str:00000407 .LASF21
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3332   .debug_str:0000009c .LASF22
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3404   .debug_str:000002b6 .LASF23
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3426   .debug_str:00000355 .LASF24
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3602   .debug_str:00000832 .LASF25
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3576   .debug_str:0000077b .LASF26
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3558   .debug_str:000006f9 .LASF27
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3610   .debug_str:00000862 .LASF28
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3652   .debug_str:000009a3 .LASF29
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3612   .debug_str:00000867 .LASF30
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3480   .debug_str:000004b9 .LASF31
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3578   .debug_str:00000782 .LASF32
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3606   .debug_str:00000842 .LASF34
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3632   .debug_str:000008e0 .LASF35
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3516   .debug_str:000005e0 .LASF36
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3630   .debug_str:000008da .LASF37
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3460   .debug_str:00000432 .LASF38
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3312   .debug_str:0000000b .LASF39
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3334   .debug_str:000000a6 .LASF40
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3466   .debug_str:0000045a .LASF41
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3436   .debug_str:00000385 .LASF42
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3414   .debug_str:00000310 .LASF43
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3548   .debug_str:000006cd .LASF44
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3432   .debug_str:00000377 .LASF45
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3562   .debug_str:0000071d .LASF46
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3368   .debug_str:000001b1 .LASF47
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3434   .debug_str:0000037e .LASF48
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3596   .debug_str:00000808 .LASF49
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3470   .debug_str:0000047c .LASF50
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3564   .debug_str:00000724 .LASF51
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3636   .debug_str:000008ef .LASF52
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3324   .debug_str:00000064 .LASF53
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3346   .debug_str:000000fd .LASF54
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3478   .debug_str:000004b2 .LASF55
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3326   .debug_str:00000075 .LASF56
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3400   .debug_str:00000282 .LASF57
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3552   .debug_str:000006e4 .LASF58
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3588   .debug_str:000007c6 .LASF59
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3628   .debug_str:000008d1 .LASF60
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3408   .debug_str:000002d0 .LASF61
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3364   .debug_str:00000198 .LASF62
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3398   .debug_str:0000027b .LASF63
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3626   .debug_str:000008ca .LASF64
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3650   .debug_str:0000099d .LASF65
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3448   .debug_str:000003e7 .LASF66
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3318   .debug_str:00000035 .LASF67
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3646   .debug_str:00000982 .LASF68
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3616   .debug_str:00000879 .LASF69
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3382   .debug_str:0000021a .LASF70
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3352   .debug_str:00000135 .LASF71
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3514   .debug_str:000005cc .LASF72
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3590   .debug_str:000007cf .LASF73
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3506   .debug_str:00000587 .LASF74
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3396   .debug_str:00000262 .LASF75
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3374   .debug_str:000001dd .LASF76
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3490   .debug_str:00000502 .LASF77
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3402   .debug_str:00000299 .LASF78
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3372   .debug_str:000001d1 .LASF79
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3556   .debug_str:000006f1 .LASF80
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3568   .debug_str:00000736 .LASF81
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3330   .debug_str:00000092 .LASF108
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3654   .debug_str:000009ad .LASF82
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3484   .debug_str:000004dd .LASF83
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3580   .debug_str:0000078f .LASF84
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3428   .debug_str:0000035a .LASF85
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3328   .debug_str:0000007f .LASF86
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3354   .debug_str:00000140 .LASF87
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3570   .debug_str:00000749 .LASF88
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3486   .debug_str:000004e7 .LASF89
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3644   .debug_str:00000970 .LASF90
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3524   .debug_str:00000617 .LASF91
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3468   .debug_str:00000464 .LASF92
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3560   .debug_str:00000703 .LASF93
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3322   .debug_str:0000004f .LASF94
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3648   .debug_str:0000098d .LASF95
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3444   .debug_str:000003d4 .LASF96
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3510   .debug_str:000005a9 .LASF97
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3508   .debug_str:0000059b .LASF98
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3608   .debug_str:00000856 .LASF99
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3582   .debug_str:0000079c .LASF100
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3450   .debug_str:000003f3 .LASF101
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3600   .debug_str:0000081f .LASF102
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3424   .debug_str:00000342 .LASF103
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3624   .debug_str:000008bb .LASF104
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3586   .debug_str:000007b5 .LASF105
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3546   .debug_str:000006c1 .LASF106
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3482   .debug_str:000004c8 .LASF107
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3314   .debug_str:0000001e .LASF109
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3538   .debug_str:00000694 .LASF110
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3592   .debug_str:000007e1 .LASF111
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3622   .debug_str:000008a6 .LASF112
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3344   .debug_str:000000ea .LASF113
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3476   .debug_str:000004a5 .LASF114
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3416   .debug_str:00000318 .LASF115
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3320   .debug_str:00000040 .LASF116
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3342   .debug_str:000000dd .LASF117
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3540   .debug_str:0000069f .LASF118
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3394   .debug_str:00000255 .LASF119
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3362   .debug_str:00000184 .LASF120
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3638   .debug_str:000008f7 .LASF121
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3640   .debug_str:0000090a .LASF122
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3384   .debug_str:0000021f .LASF123
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3532   .debug_str:00000655 .LASF124
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3464   .debug_str:00000453 .LASF125
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3310   .debug_str:00000005 .LASF126
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3348   .debug_str:0000011b .LASF127
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3406   .debug_str:000002be .LASF128
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3336   .debug_str:000000b2 .LASF129
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3594   .debug_str:000007f5 .LASF130
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3472   .debug_str:00000489 .LASF131
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3488   .debug_str:000004fa .LASF132
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3440   .debug_str:000003a2 .LASF133
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3494   .debug_str:00000521 .LASF134
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3572   .debug_str:00000761 .LASF135
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3504   .debug_str:00000580 .LASF136
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3420   .debug_str:00000331 .LASF137
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3452   .debug_str:000003fe .LASF138
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3446   .debug_str:000003de .LASF139
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3550   .debug_str:000006da .LASF140
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3430   .debug_str:0000036c .LASF141
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3338   .debug_str:000000b9 .LASF142
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3438   .debug_str:00000396 .LASF143
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3474   .debug_str:00000492 .LASF144
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3412   .debug_str:000002fb .LASF145
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3522   .debug_str:000005fb .LASF172
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3378   .debug_str:00000208 .LASF146
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3542   .debug_str:000006ae .LASF147
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3498   .debug_str:0000054d .LASF148
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3544   .debug_str:000006b6 .LASF149
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:130    .text.PM_PulseCounter_PWDCallback:000000b0 .LFE6
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3096   .debug_loc:00000000 .LLST0
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:29     .text.PM_PulseCounter_PWDCallback:00000021 .LBB4
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:111    .text.PM_PulseCounter_PWDCallback:0000009e .LBE4
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:30     .text.PM_PulseCounter_PWDCallback:00000021 .LBB5
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:110    .text.PM_PulseCounter_PWDCallback:0000009e .LBE5
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3536   .debug_str:00000673 .LASF173
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:174    .text.PM_PulseCounter_SetChannelStatus:0000003e .LFE1
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3124   .debug_loc:00000044 .LLST1
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3604   .debug_str:0000083b .LASF150
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3502   .debug_str:00000562 .LASF157
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:225    .text.PM_PulseCounter_Reset_Warning:00000048 .LFE2
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3566   .debug_str:00000729 .LASF151
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3534   .debug_str:0000065e .LASF154
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:336    .text.PM_PulseCounter_Init:000000a5 .LFE0
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3137   .debug_loc:00000064 .LLST2
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3155   .debug_loc:00000090 .LLST3
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3574   .debug_str:00000769 .LASF152
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3166   .debug_loc:000000ae .LLST4
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3195   .debug_loc:000000f3 .LLST5
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3392   .debug_str:0000024a .LASF153
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3217   .debug_loc:0000012a .LLST6
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:255    .text.PM_PulseCounter_Init:00000027 .LVL5
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:284    .text.PM_PulseCounter_Init:00000053 .LVL9
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:318    .text.PM_PulseCounter_Init:00000094 .LVL13
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:322    .text.PM_PulseCounter_Init:0000009a .LVL14
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3356   .debug_str:00000153 .LASF155
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:367    .text.PM_PulseCounter_GetWarning:00000019 .LFE3
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3462   .debug_str:0000043e .LASF156
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3230   .debug_loc:0000014a .LLST7
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3492   .debug_str:00000508 .LASF158
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:380    .text.PM_PulseCounter_SetCount:00000009 .LFE4
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3496   .debug_str:0000053f .LASF159
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3618   .debug_str:00000884 .LASF160
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:411    .text.PM_PulseCounter_GetCount:00000023 .LFE5
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3250   .debug_loc:0000017f .LLST8
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3528   .debug_str:00000635 .LASF161
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:392    .text.PM_PulseCounter_GetCount:00000006 .LVL23
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:405    .text.PM_PulseCounter_GetCount:0000001e .LVL25
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3458   .debug_str:00000421 .LASF162
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3358   .debug_str:0000016e .LASF163
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3350   .debug_str:0000012a .LASF164
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3422   .debug_str:00000336 .LASF165
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3376   .debug_str:000001f3 .LASF166
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3500   .debug_str:00000553 .LASF167
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3370   .debug_str:000001bd .LASF168
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:3456   .debug_str:0000040e .LASF169
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:16     .text.PM_PulseCounter_PWDCallback:00000009 .LCFI0
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:18     .text.PM_PulseCounter_PWDCallback:0000000b .LCFI1
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:109    .text.PM_PulseCounter_PWDCallback:0000009e .LCFI2
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:118    .text.PM_PulseCounter_PWDCallback:000000a4 .LCFI3
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:139    .text.PM_PulseCounter_SetChannelStatus:00000002 .LCFI4
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:235    .text.PM_PulseCounter_Init:00000002 .LCFI5
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:237    .text.PM_PulseCounter_Init:00000004 .LCFI6
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:233    .text.PM_PulseCounter_Init:00000000 .LVL1
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:244    .text.PM_PulseCounter_Init:00000010 .LVL3
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:247    .text.PM_PulseCounter_Init:00000015 .LVL4
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:308    .text.PM_PulseCounter_Init:0000007e .LVL12
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:326    .text.PM_PulseCounter_Init:0000009d .LVL15
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:330    .text.PM_PulseCounter_Init:0000009f .LVL16
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:240    .text.PM_PulseCounter_Init:00000008 .LVL2
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:290    .text.PM_PulseCounter_Init:0000005c .LVL10
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:292    .text.PM_PulseCounter_Init:0000005e .LVL11
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:258    .text.PM_PulseCounter_Init:0000002d .LVL6
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:266    .text.PM_PulseCounter_Init:00000038 .LVL7
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:270    .text.PM_PulseCounter_Init:0000003b .LVL8
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:344    .text.PM_PulseCounter_GetWarning:00000000 .LVL17
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:352    .text.PM_PulseCounter_GetWarning:0000000f .LVL18
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:358    .text.PM_PulseCounter_GetWarning:00000014 .LVL19
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:360    .text.PM_PulseCounter_GetWarning:00000016 .LVL20
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:365    .text.PM_PulseCounter_GetWarning:00000018 .LVL21
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:389    .text.PM_PulseCounter_GetCount:00000002 .LCFI7
C:\Users\Andrea\AppData\Local\Temp\ccmVUd4u.s:578    .debug_info:00000000 .Ldebug_info0

UNDEFINED SYMBOLS
_OCPWD_GetAllSync
_OCPWD_StartSampleSync
_OCPWD_StopSampleSync
_ModuleIOmap
_OCTPM_GetChannelSync
_OCPWD_InitSync
_OS_DisableInterrupt
_OS_Global
_OS_EnableInterrupt

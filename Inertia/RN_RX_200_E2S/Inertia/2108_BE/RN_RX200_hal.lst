   1                             		.file	"RN_RX200_hal.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.TMR_GetMultiBmp,"ax",@progbits
   6                             	_TMR_GetMultiBmp:
   7                             	.LFB94:
   8                             		.file 1 "C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200/RN_RX200_hal.c"
   1:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /**
   2:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  HAL Functions
   3:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  Hal Functions to access at hardware Resources from Driver layer
   4:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \file    RN_RX210_R5F2108_hal.c
   5:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \version 0.0.1
   6:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \date    02/11/2011
   7:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \author  Andrea Emili
   8:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
   9:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
  10:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  "Diritti Riservati"
  11:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
  12:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* Old Versions
  13:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \version
  14:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \date
  15:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \author
  16:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \version
  17:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \date
  18:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \author
  19:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
  20:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define MODULE_BODY_HAL
  21:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ******** */
  22:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* Includes */
  23:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ******** */
  24:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #include "Config.h"
  25:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(CONFIG_ERROR_HANDLING)
  26:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #include "LIB_Error.h"
  27:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
  28:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #include "RN_RX200_hal.h"
  29:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
  30:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ****************** */
  31:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* Defines and Macros */
  32:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ****************** */
  33:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
  34:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /**
  35:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
  36:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** \par TMR alternate pin configuration
  37:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
  38:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** Some timers can be configured on more than one pin; standard PLT modules use
  39:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** a default pin, anyway on custom modules (CUSTOM_MODULE defined) it's possible
  40:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** to change default:
  41:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
  42:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** HAL_CH_TGRA2_ON_PB5
  43:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
  44:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** HAL_CH_TGRA3_ON_P17
  45:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** HAL_CH_TGRA3_ON_PC7
  46:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
  47:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** HAL_CH_TGRA4_ON_PB3
  48:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** HAL_CH_TGRA4_ON_PE2
  49:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
  50:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** HAL_CH_TGRB0_ON_PA1
  51:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
  52:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** HAL_CH_TGRB2_ON_PE5
  53:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
  54:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** HAL_CH_TGRB3_ON_PB7
  55:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** HAL_CH_TGRB3_ON_P17
  56:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
  57:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** HAL_CH_TGRB4_ON_P30
  58:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** HAL_CH_TGRB4_ON_P54
  59:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** HAL_CH_TGRB4_ON_PE3
  60:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
  61:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** HAL_CH_TGRC0_ON_PB1
  62:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
  63:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** HAL_CH_TGRC3_ON_P16
  64:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
  65:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** HAL_CH_TGRC4_ON_PE1
  66:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** HAL_CH_TGRC4_ON_PE5
  67:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
  68:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** HAL_CH_TGRD3_ON_P16
  69:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** HAL_CH_TGRD3_ON_PC4
  70:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
  71:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** HAL_CH_TGRD4_ON_P55
  72:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** HAL_CH_TGRD4_ON_PC3
  73:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** HAL_CH_TGRD4_ON_PE4
  74:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
  75:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
  76:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
  77:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* TMR coherence checks */
  78:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
  79:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* 1. Alternate pin on TMR channels can be used only on CUSTOM_MODULE! */
  80:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if !defined(CUSTOM_MODULE)
  81:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
  82:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRA2_ON_PB5)
  83:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #error "Alternate pin on TGRAx channels cannot be used in PLT standard module!"
  84:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
  85:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
  86:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB0_ON_PA1) || defined(HAL_CH_TGRB2_ON_PE5) || defined(HAL_CH_TGRB3_ON_P17) \
  87:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	|| defined(HAL_CH_TGRB4_ON_P30) || defined(HAL_CH_TGRB4_ON_P54) || defined(HAL_CH_TGRB4_ON_PE3)
  88:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #error "Alternate pins on TGRBx channels cannot be used in PLT standard module!"
  89:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
  90:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
  91:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRD3_ON_P16) || defined(HAL_CH_TGRD3_ON_PC4) || defined(HAL_CH_TGRD4_ON_P55) \
  92:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	|| defined(HAL_CH_TGRD4_ON_PC3) || defined(HAL_CH_TGRD4_ON_PE4)
  93:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #error "Alternate pins on TGRDx channels cannot be used in PLT standard module!"
  94:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
  95:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
  96:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
  97:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
  98:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* 2. A timer can be defined only on one pin - no multiple definition allowed! */
  99:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 100:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if (defined(HAL_CH_TGRA3_ON_P17) && defined(HAL_CH_TGRA3_ON_PC7))
 101:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #error "TGRA3 alternate pin conficts! Only one HAL_CH_TGRA3_ON_xx can be used."
 102:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
 103:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 104:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if (defined(HAL_CH_TGRA4_ON_PB3) && defined(HAL_CH_TGRA4_ON_PE2))
 105:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #error "TGRA4 alternate pin conficts! Only one HAL_CH_TGRA4_ON_xx can be used."
 106:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
 107:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 108:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if (defined(HAL_CH_TGRB3_ON_PB7) && defined(HAL_CH_TGRB3_ON_P17))
 109:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #error "TGRB3 alternate pin conficts! Only one HAL_CH_TGRB3_ON_xx can be used."
 110:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
 111:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 112:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if (defined(HAL_CH_TGRB4_ON_P30) && defined(HAL_CH_TGRB4_ON_P54)) \
 113:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	|| (defined(HAL_CH_TGRB4_ON_P30) && defined(HAL_CH_TGRB4_ON_PE3))
 114:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	|| (defined(HAL_CH_TGRB4_ON_P54) && defined(HAL_CH_TGRB4_ON_PE3))
 115:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #error "TGRB4 alternate pin conficts! Only one HAL_CH_TGRB4_ON_xx can be used."
 116:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
 117:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 118:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if (defined(HAL_CH_TGRC4_ON_PE1) && defined(HAL_CH_TGRC4_ON_PE1))
 119:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #error "TGRC4 alternate pin conficts! Only one HAL_CH_TGRC4_ON_xx can be used."
 120:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
 121:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 122:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if (defined(HAL_CH_TGRD3_ON_P16) && defined(HAL_CH_TGRD3_ON_PC4))
 123:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #error "TGRD3 alternate pin conficts! Only one HAL_CH_TGRD3_ON_xx can be used."
 124:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
 125:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 126:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if (defined(HAL_CH_TGRD4_ON_P55) && defined(HAL_CH_TGRD4_ON_PC3)) \
 127:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	|| (defined(HAL_CH_TGRD4_ON_P55) && defined(HAL_CH_TGRD4_ON_PE4))
 128:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	|| (defined(HAL_CH_TGRD4_ON_PC3) && defined(HAL_CH_TGRD4_ON_PE4))
 129:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #error "TGRD4 alternate pin conficts! Only one HAL_CH_TGRD4_ON_xx can be used."
 130:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
 131:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 132:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* 3. Timers who share same pin cannot be configured together! */
 133:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 134:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if (defined(HAL_CH_TGRA3_ON_P17) && defined(HAL_CH_TGRB3_ON_P17))
 135:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #error "TGRA3 and TGRB3 cannot be configured on same pin (P17) !"
 136:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
 137:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 138:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if (defined(HAL_CH_TGRB2_ON_PE5) && defined(HAL_CH_TGRC4_ON_PE5))
 139:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #error "TGRB2 and TGRC4 cannot be configured on same pin (PE5) !"
 140:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
 141:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 142:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if (defined(HAL_CH_TGRC3_ON_P16) && defined(HAL_CH_TGRD3_ON_P16))
 143:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #error "TGRC3 and TGRD3 cannot be configured on same pin (P16) !"
 144:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
 145:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 146:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
 147:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 148:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 149:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* *************************** */
 150:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* Typedef, Structs and Unions */
 151:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* *************************** */
 152:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 153:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* **************************** */
 154:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* Prototype of local functions */
 155:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* **************************** */
 156:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 157:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ****************** */
 158:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* Exported variables */
 159:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ****************** */
 160:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 161:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* **************** */
 162:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* Global variables */
 163:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* **************** */
 164:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 165:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /****** SYSTEM STACKS *******************************************************/
 166:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** int	UserStack[256] 		__attribute__ ((section (".userStack")));
 167:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** int	InterruptStack[256] __attribute__ ((section (".interruptStack")));
 168:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 169:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ***************** */
 170:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* Exported function */
 171:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ***************** */
 172:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 173:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ************** */
 174:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* Local Function */
 175:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ************** */
 176:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(CONFIG_ERROR_HANDLING)
 177:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define HAL_ErrorHandler(err)	PLT_ERROR_FATAL(PLT_ERROR_HAL_1)
 178:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
 179:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define HAL_ErrorHandler(err)	{}
 180:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
 181:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 182:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 183:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
 184:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  BEGIN LVD Class HAL Support                                   *
 185:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
 186:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 187:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** - 05/07/2011:
 188:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	- AE: Clean old code.
 189:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** */
 190:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 191:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 192:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: LVDR_SetUp
 193:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Sets the low voltage detection level to generate LV reset. Turns on the LV detectio
 194:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *				mode and turns on the reset on LV feature.
 195:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
 196:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
 197:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 198:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void LVDR_SetUp(uint8_t tripPointVR)
 199:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 200:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*int dist_0, dist_1;*/
 201:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     int i;
 202:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*uint8_t SPMSC2_Mirror = 0x00;*/
 203:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 204:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     for(i = 0; i < 16; i++)
 205:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
 206:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if((tripPointVR*10) >= (415 - (i *15)))
 207:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
 208:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 209:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
 210:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
 211:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(i > 15)
 212:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
 213:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         i = 15;
 214:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
 215:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     DISABLE_REGISTER_WRITE_PROTECTION;
 216:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITOR_CONTROL_REGISTER &= 0xF0;
 217:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_DETECTION_LEVEL_SELECT_REGISTER &=	0xF0;
 218:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SET_L_NIBBLE(_HAL_RX210_VOLTAGE_DETECTION_LEVEL_SELECT_REGISTER,i);
 219:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Select Internal reference voltage*/
 220:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITOR_CONTROL_REGISTER &= ~LVCMPCR_EXCREFINP1_MASK;
 221:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Slecting Vcc as the voltage for comparison*/
 222:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITOR_CONTROL_REGISTER &= ~LVCMPCR_EXVCCINP1_MASK;
 223:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Enable the voltage detection circuit 1*/
 224:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITOR_CONTROL_REGISTER |= LVCMPCR_LVD1E_MASK;
 225:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Enabling output of the result of comparison by the voltage monitoring 1 circuit)*/
 226:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITORING_1_CIRCUIT_COMPARATOR_REGISTER_0 |= LVD1CR0_LVD1CMPE_MASK;
 227:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*Enable Reset*/
 228:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITORING_1_CIRCUIT_COMPARATOR_REGISTER_0 |= LVD1CR0_LVD1RI_MASK;	/* Reset 
 229:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     for(i = 0; i<5000; i++)
 230:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
 231:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         __asm__("nop");
 232:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
 233:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITORING_1_STATUS_REGISTER &= ~LVD1SR_LVD1DET_MASK;
 234:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITORING_1_CIRCUIT_COMPARATOR_REGISTER_0 |= LVD1CR0_LVD1RIE_MASK;	/* Inter
 235:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*Enable Interrupt*/
 236:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ENABLE_REGISTER_WRITE_PROTECTION;
 237:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end LVDR_SetUp*/
 238:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 239:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 240:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: LVDW_SetTrip
 241:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Set voltage trip to generate LVD warning
 242:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
 243:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
 244:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 245:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void LVDW_SetTrip(uint8_t tripPointVW)
 246:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 247:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint16_t i;
 248:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*int8_t dist_0,dist_1,dist_2, distance;*/
 249:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 250:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     for(i = 0; i < 16; i++)
 251:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
 252:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if((tripPointVW*10) >= (415 - (i *15)))
 253:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 254:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
 255:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(i > 15)
 256:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         i = 15;
 257:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     DISABLE_REGISTER_WRITE_PROTECTION;
 258:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITOR_CONTROL_REGISTER &= 0x0F; 	/* Reset V1 level select*/
 259:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_DETECTION_LEVEL_SELECT_REGISTER &=	0x0F;
 260:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SET_H_NIBBLE(_HAL_RX210_VOLTAGE_DETECTION_LEVEL_SELECT_REGISTER,i);
 261:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Select Internal reference voltage V2*/
 262:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITOR_CONTROL_REGISTER &= ~LVCMPCR_EXCREFINP2_MASK;
 263:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Slecting Vcc as the voltage for comparison V2*/
 264:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITOR_CONTROL_REGISTER &= ~LVCMPCR_EXVCCINP2_MASK;
 265:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Enable the voltage detection circuit 2*/
 266:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITOR_CONTROL_REGISTER |= LVCMPCR_LVD2E_MASK;
 267:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Enabling output of the result of comparison by the voltage monitoring 1 circuit)*/
 268:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITORING_2_CIRCUIT_COMPARATOR_REGISTER_0 |= LVD2CR0_LVD2CMPE_MASK;
 269:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*Enable Reset*/
 270:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITORING_2_CIRCUIT_COMPARATOR_REGISTER_0 &= ~LVD2CR0_LVD2RI_MASK;	/* Inter
 271:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*Enable Maskable Interrupt*/
 272:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITORING_2_CIRCUIT_COMPARATOR_REGISTER_1  |= _HAL_BIT2_MASK;
 273:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* LVD2 DET Reset*/
 274:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITORING_2_STATUS_REGISTER &= ~_HAL_BIT0_MASK;
 275:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     for(i = 0; i<5000; i++)
 276:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
 277:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         __asm__("nop");
 278:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
 279:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITORING_2_STATUS_REGISTER &= ~LVD2SR_LVD2DET_MASK;
 280:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITORING_2_CIRCUIT_COMPARATOR_REGISTER_0 |= LVD2CR0_LVD2RIE_MASK;	/* Inter
 281:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 282:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ENABLE_REGISTER_WRITE_PROTECTION;
 283:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end LVDW_SetTrip*/
 284:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 285:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 286:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: LVDR_GetTrip
 287:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:  Reads the LVD trip
 288:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
 289:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
 290:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 291:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint8_t LVDR_GetTrip(void)
 292:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 293:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return((415 - (GET_L_NIBBLE(_HAL_RX210_VOLTAGE_DETECTION_LEVEL_SELECT_REGISTER)*15))/10);
 294:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end LVDR_GetTrip*/
 295:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 296:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 297:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: LVDW_getTrip
 298:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Reads the LVD warning trip
 299:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
 300:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
 301:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 302:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint8_t LVDW_GetTrip(void)
 303:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 304:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return((415 - (GET_H_NIBBLE(_HAL_RX210_VOLTAGE_DETECTION_LEVEL_SELECT_REGISTER)*15))/10);
 305:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end LDW_GetTrip*/
 306:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 307:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
 308:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  END LVD Class HAL Support                                     *
 309:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
 310:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 311:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 312:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
 313:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  BEGIN WDT Class HAL Support                                   *
 314:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
 315:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /** @name H.A.L. Watchdog
 316:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: In RX200 the peripheral's name is Indipendent Watchdog module
 317:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 318:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*@{*/
 319:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 320:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* Define WatchDog Capability */
 321:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define _HAL_WDT_CAPABILITY
 322:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* Preprocessor Errors */
 323:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*#if (WDT_TIMEOUT > 4294967295)
 324:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  #error "WDT_TIMEOUT must be less than 2^32"
 325:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  #endif
 326:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  #if ((WDT_WINDOWED_MODE == 1) & (WDT_TIMEOUT <= (WDT_WINDOW+1)))
 327:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  #error "WDT_WINDOW must be less than than (WDT_TIMEOUT-1)!"
 328:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  #endif
 329:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  #if (WDT_TIMEOUT < 4)
 330:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  #error "The time-out value of the watchdog must be set to a minimum of four watchdog clock cycles.
 331:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  #endif*/
 332:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 333:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* Watchdog Control */
 334:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define _HAL_RX210_WDT_CONTROL_REGISTER 				IWDT.IWDTCR.WORD
 335:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* Watchdog Refresh Register */
 336:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define _HAL_RX210_WDT_REFRESH_REGISTER 				IWDT.IWDTRR
 337:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* Watchdog Status Register */
 338:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define _HAL_RX210_WDT_STATUS_REGISTER 					IWDT.IWDTSR.WORD
 339:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* Watchdog Reset Control Register */
 340:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define _HAL_RX210_WDT_RESET_CONTROL_REGISTER 			IWDT.IWDTRCR.BYTE
 341:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* Watchdog Count Stop Register */
 342:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define _HAL_RX210_WDT_COUNT_STOP_REGISTER				IWDT.IWDTCSTPR.BYTE
 343:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* Watchdog Option function select Register */
 344:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define _HAL_RX210_WDT_OPTION_FUNCTION_SELECT_REGISTER 	EXSYSTEM.OFS0.LONG
 345:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 346:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 347:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Macro: WDT_Enable
 348:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: There isn't this feature in RX210
 349:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
 350:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
 351:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	- AE: This functions do nothing. In RX200 Option register can be written only at start up
 352:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 353:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define WDT_Enable(setting)
 354:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 355:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 356:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Macro: WDT_Disable
 357:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: There isn't this feature in RX210
 358:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * - It's impossible disable IWDT in run time
 359:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Not implemented must be set at StartUp
 360:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 361:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define WDT_Disable(setting)
 362:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 363:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 364:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** * Function: WDT_Enabled
 365:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** * Description:  check if WatchDog is enabled.
 366:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** */
 367:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t WDT_Enabled(void)
 368:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 369:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return WDT_ENABLED; /*TODO verifica se � abilitato leggendo i registri*/
 370:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 371:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 372:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 373:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *  Macro: WDT_Refresh
 374:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *  Description: The required refresh within 20 bus clock cycles.
 375:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *  You must take care not only to refresh the watchdog within the watchdog timer's actual time-out
 376:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *  period, but also provide enough allowance for the time it takes for the refresh sequence to be
 377:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *  detected by the watchdog timer, on the watchdog clock
 378:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *  (2/3 watchdog cycles for window mode, 1 watchdog cycle for no window mode)
 379:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *  Note:
 380:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *  Status:
 381:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 382:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void WDT_Refresh(void)
 383:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 384:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_WDT_REFRESH_REGISTER = 0x00;
 385:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_WDT_REFRESH_REGISTER = 0xFF;
 386:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 387:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 388:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 389:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** Returns if WDT timeout has been occurred
 390:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** This can be used after a reset to see if the IWDT caused the reset.
 391:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** */
 392:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t WDT_TimeoutExpired(void)
 393:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 394:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	return IWDT.IWDTSR.BIT.UNDFF?TRUE:FALSE;
 395:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 396:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 397:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** Returns if WDT untimely refresh caused reset
 398:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** This can be used after a reset to see if the IWDT caused the reset.
 399:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** */
 400:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t WDT_UntimelyResetOccurred(void)
 401:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 402:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	return IWDT.IWDTSR.BIT.REFEF?TRUE:FALSE;
 403:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 404:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 405:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** clears timeout signal
 406:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** This can be used after a reset to see if the IWDT caused the reset.
 407:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** */
 408:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void WDT_ClearTimeoutExpired(void)
 409:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 410:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	IWDT.IWDTSR.BIT.UNDFF=0;
 411:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 412:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 413:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** clears untimely refresh signal
 414:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** This can be used after a reset to see if the IWDT caused the reset.
 415:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** */
 416:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void WDT_ClearUntimelyResetOccurred(void)
 417:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 418:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	IWDT.IWDTSR.BIT.REFEF=0;
 419:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 420:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 421:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 422:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Macro: WDT_EnableInWait
 423:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: This macro do no stop the down counter of IWDT at transition to low-power-consumpti
 424:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: Enable/Disable IWDT in power save mode is done by one register for all power save modality
 425:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: To Test!
 426:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 427:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define WDT_EnableInWait	{_HAL_RX210_WDT_COUNT_STOP_REGISTER &= 0x00;}
 428:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 429:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 430:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Macro: WDT_DisableInWait
 431:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: This macro stop of down counter of IWDT at transition to lower-power-consumption mo
 432:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: Enable/Disable IWDT in power save mode is done by one register for all power save modality
 433:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: To Test!
 434:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 435:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define WDT_DisableInWait	{_HAL_RX210_WDT_COUNT_STOP_REGISTER |= 0x80;}
 436:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 437:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 438:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Macro: WDT_EnableInStop
 439:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: This macro stop of down counter of IWDT at transition to lower-power-consumption mo
 440:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: Enable/Disable IWDT in power save mode is done by one register for all power save modality
 441:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: To Test!
 442:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 443:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define WDT_EnableInStop 	{_HAL_RX210_WDT_COUNT_STOP_REGISTER &= 0x00;}
 444:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 445:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 446:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Macro: WDT_DisableInStop
 447:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: This macro stop of down counter of IWDT at transition to lower-power-consumption mo
 448:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: Enable/Disable IWDT in power save mode is done by one register for all power save modality
 449:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: To Test!
 450:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 451:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define WDT_DisableInStop	{_HAL_RX210_WDT_COUNT_STOP_REGISTER |= 0x80:}
 452:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 453:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 454:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Macro: WDT_EnableIRQ
 455:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
 456:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: To Test!
 457:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 458:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define WDT_EnableIRQ(setting) 		_HAL_RX210_WDT_RESET_CONTROL_REGISTER &= 0x7F
 459:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 460:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 461:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Macro: WDT_DisableIRQ
 462:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
 463:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: To Test!
 464:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 465:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define WDT_DisableIRQ(setting)	 	_HAL_RX210_WDT_RESET_CONTROL_REGISTER |= 0x80
 466:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 467:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 468:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Macro: WDT_SetLPOClock
 469:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: This function enable the IWDT-Dedicated Low-Speed Clock Oscillator Control Register
 470:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
 471:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Tested
 472:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 473:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define WDT_SetLPOClock		{RX210_WRITE_PROTEC_OFF;SYSTEM.ILOCOCR.BYTE &= 0x00;RX210_WRITE_PROTEC_ON;
 474:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 475:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 476:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Macro: WDT_SetTimeOut
 477:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
 478:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: Ask to Indesit about the implementation of this Macro.
 479:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: can't update Timeout of IWDT in this way!
 480:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 481:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define WDT_SetTimeOut(time) { _HAL_RX210_WDT_CONTROL_REGISTER |= time;}
 482:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 483:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 484:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** * Function: WDT_AllowUpdate
 485:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** * Description: true if it is possible to ....
 486:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** */
 487:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t WDT_AllowUpdate(void)
 488:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 489:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return TRUE; /* TODO: quando deve dare false?*/
 490:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 491:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 492:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 493:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: Force Reset by WDT
 494:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
 495:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
 496:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 	- The down conter is only readable
 497:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 498:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void WDT_ResetMCU(void)
 499:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 500:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*TODO Verify a way to do this*/
 501:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 502:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 503:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #ifdef HAL_WDT_SUPPORT
 504:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 505:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 506:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if WDT_TIMEOUT==RX210_WDT_TIMEOUT_1024
 507:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define RX210_WDT_REFRESH_PERMITTED_WINDOW	0x01FF
 508:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif WDT_TIMEOUT==RX210_WDT_TIMEOUT_4096
 509:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define RX210_WDT_REFRESH_PERMITTED_WINDOW	0x07FF
 510:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif WDT_TIMEOUT==RX210_WDT_TIMEOUT_8192
 511:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define RX210_WDT_REFRESH_PERMITTED_WINDOW	0x0FFF
 512:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif WDT_TIMEOUT==RX210_WDT_TIMEOUT_16384
 513:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define RX210_WDT_REFRESH_PERMITTED_WINDOW	0x1FFF
 514:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
 515:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #error "WDT_TIMEOUT not supported"
 516:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
 517:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 518:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Macro: WDT_IsWindowOpen
 519:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: returns TRUE if in refresh permitted window
 520:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *
 521:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: check table 27.4 at Pag 867
 522:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Precndition: refresh-permitted window is at the end of the timeout period and window is 50%
 523:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: To do!
 524:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 525:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint8_t WDT_IsWindowOpen(void)
 526:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 527:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 528:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if WDT_WINDOWED_MODE==TRUE
 529:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return (WDT_ReadCounter()<RX210_WDT_REFRESH_PERMITTED_WINDOW);
 530:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
 531:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return TRUE;
 532:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
 533:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 534:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end WDT_IsWindowOpen*/
 535:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 536:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 537:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 538:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Macro: WDT_IsJustBeforePermittefWindow
 539:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: returns TRUE if counter is close to refresh permitted window
 540:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 541:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Precndition: refresh-permitted window is at the end of the timeout period and window is 50%
 542:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 543:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t WDT_IsJustBeforePermittedWindow(void)
 544:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 545:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	uint32_t counter=WDT_ReadCounter();
 546:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	bool_t bRes=FALSE;
 547:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	if (!( counter < RX210_WDT_REFRESH_PERMITTED_WINDOW ) && (counter > (uint32_t)((RX210_WDT_REFRESH_
 548:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	{
 549:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		bRes=TRUE;
 550:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	}
 551:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	return bRes;
 552:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 553:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 554:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 555:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint8_t WDT_IsRunning(void)
 556:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 557:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	return (WDT_ReadCounter()!=0) ? TRUE : FALSE;
 558:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 559:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 560:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 561:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: WDT_InitSync
 562:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
 563:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 1- Enable WDT Register mdoe
 564:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 2- Set all option (Clock division rater, windows start and position, time out period and reset o
 565:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 3- Finally refresh the down-counter to start counting down from the value in the time-out period
 566:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
 567:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 	1- Evaluate Windows end position
 568:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *  2- The IWDT CRT register is only once writable.
 569:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Tested!
 570:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 571:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void WDT_InitSync(void)
 572:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 573:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 574:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if  (WDT_ENABLED == TRUE) && !defined(WDT_ENABLED_AT_POWERON)
 575:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Control register in memory because it can only write once to the register after unlock */
 576:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint16_t setting = 0;
 577:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 578:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* 1. Enable/Disable WDT Register mode
 579:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****      * These are dummy operation                */
 580:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*lint -e506 */
 581:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(WDT_ENABLED)
 582:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
 583:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         WDT_Enable(setting);
 584:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
 585:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
 586:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
 587:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         WDT_Disable(setting);
 588:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
 589:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*lint +e506 */
 590:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* 2. Enable Clock 125KHz Low speed dedicated clock */
 591:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     WDT_SetLPOClock;
 592:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 593:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* 3. Set WDT Parameter
 594:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****      * 3.1 Set Clock Divisor                    */
 595:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     setting |= WDT_PRESCALER;
 596:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* 3.2 Set Window Start position            */
 597:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     setting |= (WDT_WINDOW_START | WDT_WINDOW_END);
 598:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* 3.3 WDT Set time-out value               */
 599:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     setting |= WDT_TIMEOUT;
 600:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* 2.4 Write IWDT CRT Register with setting */
 601:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_WDT_CONTROL_REGISTER = setting;
 602:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* 2.5 Enable/Disable Interrupt             */
 603:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if (WDT_INT_ENABLED)
 604:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     WDT_EnableIRQ(setting);	/* Enable Interrupt / Disable Reset */
 605:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
 606:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     WDT_DisableIRQ(setting);    /* Enable Reset / Disable Reset */
 607:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
 608:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif /* WDT_ENABLED */
 609:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end WDT_InitSync(void)*/
 610:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 611:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 612:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 613:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: WDT_StartSync
 614:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: This function start the IWDT
 615:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: IWDT start in WDT_InitSynch, this function is not supported
 616:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Check
 617:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 618:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 619:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void WDT_StartSync(void)
 620:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 621:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	/*lint -save -e506 */
 622:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(WDT_ENABLED)
 623:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         WDT_Refresh();
 624:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*lint -restore */
 625:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end WDT_StartSync*/
 626:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 627:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 628:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Macro: WDT_SetWindowingSync
 629:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: This function sets the desired window
 630:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: This function is not supported
 631:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
 632:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: The Rx210 has two windows, Start Window and End Window. With this macro it's enable only t
 633:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * at value give by the time variable. By default the end window is set to 0% while the start windo
 634:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 635:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 636:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void WDT_SetWindowingSync(WDT_windowType window)
 637:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 638:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*lint -e530*/ /*Warning non consistente*/
 639:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_WDT_CONTROL_REGISTER |= (WDT_WINDOW_START | WDT_WINDOW_END);
 640:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*lint +e530*/
 641:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end WDT_SetWindowingSync*/
 642:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 643:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 644:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Macro: WDT_StopWindowingSync
 645:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:This function deactivates the windowing feature of watchdog. The function
 646:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 				influences the windowing enable bit of the control register.
 647:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: This function is not supported
 648:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
 649:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 650:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** static void WDT_StopWindowingSync(void)
 651:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 652:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 653:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end WDT_StopWindowingSync*/
 654:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 655:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 656:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Macro: WDT_ReadCounter
 657:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: This function reads the watchdog counter register.
 658:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
 659:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Tested
 660:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Date: 02/14/2012
 661:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 662:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint32_t WDT_ReadCounter(void)
 663:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 664:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return (_HAL_RX210_WDT_STATUS_REGISTER & 0x3FFF);
 665:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end WDT_ReadCounter*/
 666:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 667:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 668:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Macro: WDT_GetWindow
 669:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: This function returns the watchdog window register
 670:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
 671:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Tested
 672:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Date: 02/14/2012
 673:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Version: 1.0.0
 674:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 675:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 676:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint32_t WDT_GetWindow(void)
 677:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 678:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return ((_HAL_RX210_WDT_CONTROL_REGISTER & 0xFF00)>>8);
 679:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end WDT_GetWindow*/
 680:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 681:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 682:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Macro: WDT_ReadRSTCounter
 683:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: This function reads the watchdog reset counter register
 684:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: This function is not supported
 685:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
 686:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 687:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 688:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint16_t WDT_ReadRSTCounter(void)
 689:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 690:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return WDT_RSTCounter();
 691:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end WDT_ReadRSTCounter*/
 692:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 693:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 694:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Macro: WDT_ResetRSTCounter
 695:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
 696:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: This function is not supported
 697:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
 698:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 699:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 700:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void WDT_ResetRSTCounter(void)
 701:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 702:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     WDT_ClearRSTCounter();
 703:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end WDT_ResetRSTCounter*/
 704:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 705:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 706:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif /* HAL_WDT_SUPPORT */
 707:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*@}*/
 708:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 709:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
 710:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  END WDT Class HAL Support                                     *
 711:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
 712:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 713:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 714:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 715:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 716:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 717:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
 718:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  BEGIN RESET Class HAL Support                                 *
 719:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
 720:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 721:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: SYS_GetResetSrcVal
 722:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
 723:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
 724:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
 725:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 726:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** resetSource_t SYS_GetResetSrcVal(void)
 727:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 728:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     resetSource_t val = 0;
 729:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t val_0 = _RX210_RESET_STATUS_REGISTER_0;
 730:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t val_1 = _RX210_RESET_STATUS_REGISTER_1;
 731:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t val_2 = _RX210_RESET_STATUS_REGISTER_2;
 732:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 733:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _RX210_RESET_STATUS_REGISTER_0 = 0x00;
 734:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _RX210_RESET_STATUS_REGISTER_1 = 0x00;
 735:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _RX210_RESET_STATUS_REGISTER_2 = 0x00;
 736:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     val |= ((resetSource_t) val_2 <<16);
 737:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     val |= ((resetSource_t) val_1 <<8);
 738:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     val |= (resetSource_t) val_0;
 739:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return val;
 740:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end resetSource_t SYS_GETResetSrcVal*/
 741:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 742:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 743:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: SYS_PowerOnReset
 744:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
 745:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
 746:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
 747:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 748:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t SYS_PowerOnReset(resetSource_t rstSrc)
 749:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 750:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if((rstSrc & POWER_ON_RESET_MASK))
 751:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return  1;
 752:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
 753:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return 0;
 754:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end SYS_PowerOnReset*/
 755:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 756:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 757:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: SYS_PowerOnReset
 758:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
 759:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
 760:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
 761:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** */
 762:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t SYS_WatchdogReset(resetSource_t rstSrc)
 763:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 764:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if((rstSrc & IWDT_RESET_MASK))
 765:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return  1;
 766:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
 767:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return 0;
 768:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end SYS_WatchdogReset*/
 769:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 770:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 771:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** * Function: SYS_ExternalPinReset
 772:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** */
 773:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t SYS_ExternalPinReset(resetSource_t rstSrc)
 774:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 775:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if((rstSrc & 0xFFFFFFFF) == 0x00000000)
 776:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return  1;
 777:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
 778:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return 0;
 779:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end SYS_ExternalPinReset*/
 780:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 781:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 782:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** * Function: SYS_LossOfClockReset
 783:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** */
 784:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t SYS_LossOfClockReset(resetSource_t rstSrc)
 785:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 786:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
 787:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end SYS_ExternalPinReset*/
 788:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 789:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 790:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** * Function: SYS_IllegalOpcodeReset
 791:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** */
 792:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t SYS_IllegalOpcodeReset(resetSource_t rstSrc)
 793:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 794:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
 795:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end SYS_IllegalOpcodeReset*/
 796:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 797:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 798:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** * Function: SYS_LowVoltageReset
 799:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** */
 800:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t SYS_LowVoltageReset(resetSource_t rstSrc)
 801:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 802:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if((rstSrc & LOW_VOLTAGE_RESET_VD1))
 803:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return  1;
 804:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
 805:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return 0;
 806:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end SYS_ExternalPinReset*/
 807:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 808:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 809:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** * Function: SYS_SetDebuggerReset
 810:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** */
 811:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t SYS_DebuggerReset(resetSource_t rstSrc)
 812:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 813:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
 814:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end SYS_SetDebuggerReset*/
 815:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 816:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 817:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** * Function: SYS_IllegalAddressReset
 818:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** */
 819:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t SYS_IllegalAddressReset(resetSource_t rstSrc)
 820:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 821:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
 822:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end SYS_IllegalAddressReset*/
 823:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 824:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
 825:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** * Function: SYS_UserReset
 826:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** */
 827:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t SYS_UserReset(resetSource_t rstSrc)
 828:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 829:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	bool_t retVal = 0;
 830:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if((rstSrc & USER_RESET_MASK))
 831:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     	retVal = 1;
 832:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return retVal;
 833:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end SYS_UserReset*/
 834:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 835:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
 836:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  END RESET Class HAL Support                                 */
 837:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
 838:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 839:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
 840:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  BEGIN CLK Class HAL Support                                   *
 841:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
 842:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 843:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*! \fn CLK_EngageClkRefSync
 844:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \brief Test if the cristal is ready
 845:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \param  void
 846:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \return void
 847:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * \section Informazioni
 848:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Company: SPES scpa
 849:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Author: Andrea Emili
 850:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Date: "Date"
 851:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- File: "File name"
 852:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Comment: Do not apply in RX210
 853:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 854:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void CLK_EngageClkRefSync(void)
 855:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 856:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(CLK_EXT_REF_CLOCK_ACTIVE)
 857:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Enable external clock source for the processor */
 858:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     CLK_EnableExternalRefClock();
 859:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
 860:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 861:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Disable external clock source for the processor */
 862:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     CLK_DisableExternalRefClock();
 863:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 864:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif    /*CLK_EXT_REF_CLOCK_ACTIVE */
 865:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 866:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(CLK_INT_REF_CLOCK_ACTIVE)				/* Not in RX210*/
 867:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Enable internal clock source for the processor */
 868:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     CLK_EnableInternalRefClock();
 869:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
 870:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Disable internal clock source for the processor */
 871:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     CLK_DisableInternalRefClock();
 872:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif /*CLK_INT_REF_CLOCK_ACTIVE*/
 873:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 874:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end function CLK_EngageClkRefSync*/
 875:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 876:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*! \fn CLK_SetInternalClockSync(uint32_t desiredClock)
 877:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \brief Sets up the system clock frequency as close to the desiredClock
 878:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  value as possible. The system will run on the internal
 879:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  reference clock in the FLL bypass mode.
 880:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \param  Desidered Clock
 881:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \return Bool value 1 is set, o no set
 882:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * \section Informazioni
 883:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Company: SPES scpa
 884:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Author: Andrea Emili
 885:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Date: "Date"
 886:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- File: "File name"
 887:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Comment:
 888:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *		- It's the HOCO clock source
 889:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *		- Test function
 890:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 891:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(CONFIG_HAL_CLK_FIXED_20MHZ)
 892:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /**
 893:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *
 894:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
 895:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t CLK_SetInternalClockSync(uint32_t desiredClock)
 896:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 897:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if !defined(WDT_ENABLED_AT_POWERON)
 898:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 899:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     unsigned char clock_hococr2;
 900:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     volatile unsigned char i = 0; /* MS forse non serve il ciclo di ritardo */
 901:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(CONFIG_PL_DEBUG)
 902:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(desiredClock != 20000000){
 903:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     	HAL_ErrorHandler(1);
 904:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
 905:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
 906:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 907:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     clock_hococr2 = 0x02;
 908:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 909:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*2. Remove Write Protection*/
 910:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RX210_WRITE_PROTEC_OFF;
 911:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*3. Define a waiting time*/
 912:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_CLK_MOSCWTCR_REG = 0x0D; /* 131072 state, wait over 10ms*/
 913:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*4. Turn Off PLL*/
 914:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     CLK_TurnsPLLOff();
 915:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*5. Set Internal Clock Source*/
 916:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     CLK_SetInternalClockSource();
 917:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*6. Set Clock Speed*/
 918:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_CLK_HOCOCR2_REG = clock_hococr2;				/*!< Set internal clock frequency*/
 919:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*7. Turn On Clock Internal*/
 920:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_CLK_HOCOCR_REG = 0x00; /*b0 = 0 ON, b0 = 1 OFF*/
 921:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 922:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     for (i = 0; i < 5; i++)
 923:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
 924:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
 925:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*8. Define Clock Value(Frequency Divider)*/
 926:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 927:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SYSTEM.SCKCR.LONG = 0x11011111; /* System Clock ICK=PLL/2,FCK and PCK and BCL=PLL/4*/
 928:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 929:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RX210_WRITE_PROTEC_ON;
 930:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
 931:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 932:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return (bool_t) 1;
 933:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** } /*end function CLK_SetInternalClockSync*/
 934:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define CLK_GetInternalClockSync() 	(20000000)
 935:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 936:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
 937:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint32_t internalClockFreq __attribute__ ((section (".noinit")));
 938:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t CLK_SetInternalClockSync(uint32_t desiredClock)
 939:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 940:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     unsigned char clock_configure;
 941:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     unsigned char clock_hococr2;
 942:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     unsigned char i = 0;
 943:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 944:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*1. Evaluate Possible clock*/
 945:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if (desiredClock == 20000000)
 946:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
 947:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         clock_hococr2 = 0x02;
 948:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         clock_configure = 0x00;
 949:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
 950:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if (desiredClock <= 32000000)
 951:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
 952:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         clock_hococr2   = 0x00;
 953:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         clock_configure = 0x01;
 954:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
 955:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if ((desiredClock > 32000000) && (desiredClock <= 36864000))
 956:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
 957:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         clock_hococr2 = 0x01;
 958:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         clock_configure = 0x02;
 959:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
 960:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if ((desiredClock > 36864000) && (desiredClock <= 40000000))
 961:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
 962:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         clock_hococr2 = 0x02;
 963:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         clock_configure = 0x03;
 964:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
 965:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if (desiredClock > 40000000)
 966:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
 967:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         clock_hococr2 = 0x03;
 968:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         clock_configure = 0x04;
 969:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
 970:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
 971:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
 972:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*TODO: gestire*/
 973:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
 974:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*2. Remove Write Protection*/
 975:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RX210_WRITE_PROTEC_OFF;
 976:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*3. Define a waiting time*/
 977:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_CLK_MOSCWTCR_REG = 0x0D; /* 131072 state, wait over 10ms*/
 978:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*4. Turn Off PLL*/
 979:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     CLK_TurnsPLLOff();
 980:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*5. Set Internal Clock Source*/
 981:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     CLK_SetInternalClockSource();
 982:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*6. Set Clock Speed*/
 983:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_CLK_HOCOCR2_REG = clock_hococr2;				/*!< Set internal clock frequency*/
 984:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*7. Turn On Clock Internal*/
 985:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_CLK_HOCOCR_REG = 0x00; /*b0 = 0 ON, b0 = 1 OFF*/
 986:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 987:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     for (i = 0; i < 5; i++)
 988:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
 989:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
 990:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*8. Define Clock Value(Frequency Divider)*/
 991:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
 992:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (clock_configure)
 993:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
 994:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* Internal Clock 20MHZ*/
 995:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 0:
 996:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*PCLKD(b0-b3)=20Mhz,Reserved(b4-b7),PCLKB(b8-b11)=20MHz,Reserved(b12-15),BCLK(b16-b19)=20M
 997:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SYSTEM.SCKCR.LONG = 0x11011111; /* Syestem Clock ICK=PLL/2,FCK and PCK and BCL=PLL/4*/
 998:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         internalClockFreq = 20000000;
 999:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1000:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* Internal Clock 32MHz*/
1001:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 1:
1002:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*PCLKD(b0-b3)=32Mhz,Reserved(b4-b7),PCLKB(b8-b11)=32MHz,Reserved(b12-15),BCLK(b16-b19)=16M
1003:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SYSTEM.SCKCR.LONG = 0x00011010; /* Syestem Clock ICK=PLL/2,FCK and PCK and BCL=PLL/4*/
1004:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         internalClockFreq = 32000000;
1005:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1006:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* Internal Clock 36864 kHz*/
1007:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 2:
1008:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*PCLKD(b0-b3)=16Mhz,Reserved(b4-b7),PCLKB(b8-b11)=16MHz,Reserved(b12-15),BCLK(b16-b19)=16M
1009:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SYSTEM.SCKCR.LONG = 0x10011111; /* Syestem Clock ICK=PLL/2,FCK and PCK and BCL=PLL/4*/
1010:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         internalClockFreq = 36864000;
1011:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1012:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* Internal Clock 40MHz*/
1013:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 3:
1014:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*PCLKD(b0-b3)=20Mhz,Reserved(b4-b7),PCLKB(b8-b11)=20MHz,Reserved(b12-15),BCLK(b16-b19)=20M
1015:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SYSTEM.SCKCR.LONG = 0x10011111; /* Syestem Clock ICK=PLL/2,FCK and PCK and BCL=PLL/4*/
1016:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         internalClockFreq = 40000000;
1017:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1018:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* Internal Clock 50MHz*/
1019:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 4:
1020:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*PCLKD(b0-b3)=25Mhz,Reserved(b4-b7),PCLKB(b8-b11)=25MHz,Reserved(b12-15),BCLK(b16-b19)=25M
1021:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SYSTEM.SCKCR.LONG = 0x10011111; /* Syestem Clock ICK=PLL/2,FCK and PCK and BCL=PLL/4*/
1022:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         internalClockFreq = 50000000;
1023:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1024:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
1025:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1026:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RX210_WRITE_PROTEC_ON;
1027:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1028:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return (bool_t) 1;
1029:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** } /*end function CLK_SetInternalClockSync*/
1030:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1031:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint32_t CLK_GetInternalClockSync(void)
1032:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
1033:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return internalClockFreq;
1034:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
1035:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
1036:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*! \fn CLK_SetExternalClockSync(uint32_t desiredClock)
1037:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \brief Sets up the system clock frequency as close to the desiredClock
1038:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  value as possible. The system will run on the external
1039:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  reference clock in the FLL bypass mode
1040:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \param  Desidered Clock 32 bit value in Hz
1041:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \return Bool value 1 is set, o no set
1042:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * \section Informazioni
1043:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Company: SPES scpa
1044:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Author: Andrea Emili
1045:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Date: 04/11/2011
1046:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- File: "File name"
1047:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Comment: This Function Set only the ICLK. The other clock (PCKD,PCLKB,BCLK,FCLK) are set at ma
1048:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
1049:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t CLK_SetExternalClockSync(uint32_t desiredClock)
1050:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
1051:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined (CLK_EXT_REF_CLOCK_ACTIVE)
1052:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     int32_t frequency, frequency0;
1053:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     int32_t difference, difference0;
1054:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     int32_t divider_temp = 0x0000000000000000;
1055:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t i;
1056:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1057:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* 1 Calculate the Main Clock divider Parameter */
1058:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     i = 0;
1059:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     frequency0 = (int32_t) CLK_EXT_CLOCK_FREQ; /* !< Assign the EXT Clock value defined in RN_RX210
1060:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1061:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     do
1062:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
1063:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         frequency = frequency0 >> i;
1064:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         i++;
1065:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
1066:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     while ((i < 255) && !(frequency <= desiredClock));
1067:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1068:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Difference between the desired and possible frequency */
1069:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     difference = desiredClock - frequency;
1070:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1071:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Makes absolute value */
1072:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if (difference < 0)
1073:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
1074:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         difference = -difference;
1075:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
1076:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1077:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Difference between the desired and possible frequency from the previous step */
1078:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     difference0 = desiredClock - frequency0;
1079:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1080:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Makes absolute value */
1081:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if (difference0 < 0)
1082:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
1083:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         difference0 = -difference0;
1084:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
1085:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1086:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* If the previous step frequncy was closer to the disered, changes the i */
1087:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if (difference0 < difference)
1088:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
1089:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         i--;
1090:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end*/
1091:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*2. Remove Write Protection*/
1092:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RX210_WRITE_PROTEC_OFF;
1093:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*3. Define a waiting time*/
1094:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_CLK_MOSCWTCR_REG = 0x0D; /* 131072 state, wait over 10ms */
1095:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*4. Turn Off PLL*/
1096:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     CLK_TurnsPLLOff();
1097:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* 5. Set Clock Source to External */
1098:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     CLK_SetExternalClockSource();
1099:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* 6. Set Divider */
1100:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     divider_temp = (divider_temp | i);
1101:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     divider_temp = divider_temp << 24; /* Dal primo byte all'ultimo byte*/
1102:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_CLK_SCKCR_REG = divider_temp;
1103:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*. Enable Write Protect*/
1104:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RX210_WRITE_PROTEC_ON;
1105:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1106:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return (bool_t) 1;
1107:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
1108:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return (bool_t)0;
1109:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
1110:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** } /*end function CLK_SetExternalClockSync*/
1111:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1112:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*! \fn CLK_SetTrimSync(uint16_t desiredTrim)
1113:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \brief Sets up the trimming value. The function feeds both
1114:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  the trimming register and the fine trimming bit.
1115:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \param
1116:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \return
1117:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * \section Informazioni
1118:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Company: SPES scpa
1119:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Author: Andrea Emili
1120:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Date: "Date"
1121:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- File: "File name"
1122:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Comment:
1123:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
1124:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void CLK_SetTrimSync(uint16_t desiredTrim)
1125:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
1126:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*CLK_SetTrim((uint8_t)(desiredTrim));*/
1127:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1128:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end function CLK_SetTrimSync*/
1129:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1130:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*! \fn CLK_SetFLLExternalClockSync(uint32_t desiredClock)
1131:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \brief
1132:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \param
1133:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \return
1134:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * \section Informazioni
1135:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Company: SPES scpa
1136:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Author: Andrea Emili
1137:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Date: "Date"
1138:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- File: "File name"
1139:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Note: Considered a Cristall of 20MHz
1140:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Comment: This function Set Clock System with PLL and External Oscillator. With this function i
1141:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	The other clock((PCKD,PCLKB,BCLK,FCLK) are set at max admission frequency in function of PLL Set
1142:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *		- PLL at Max Frequency 100MHz with 20MHz EXT CLK
1143:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *		- PCLKD: PLL_OUT/4
1144:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *		- PCLKB: PLL_OUT/4
1145:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *		- BCLK: PLL_OUT/4
1146:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *		- FCLK: PLL_OUT/4
1147:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *		- FIXED EXT OSCILLATOR TO 20MHz (Take information about parametric version)
1148:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
1149:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t CLK_SetFLLExternalClockSync(uint32_t desiredClock)
1150:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
1151:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined (CLK_EXT_REF_CLOCK_ACTIVE)
1152:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     int32_t reference;
1153:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     unsigned char difference = 0;
1154:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     int32_t i = 0;
1155:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1156:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     reference = (int32_t) CLK_EXT_CLOCK_FREQ;
1157:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1158:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if (CLK_EXT_CLOCK_FREQ != 20000000)
1159:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
1160:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (bool_t) 0; /* !< The CKL Value is fixed with at 20MHz (Verificare) */
1161:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
1162:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1163:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*1. Remove Write Protection*/
1164:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RX210_WRITE_PROTEC_OFF; /* Disable Protection*/
1165:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Main Clock Oscillator Wait Control Register*/
1166:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SYSTEM.MOSCWTCR.BYTE = 0x0D; /* 131072 state, wait over 10ms*/
1167:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* PLL Wait Control Register*/
1168:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SYSTEM.PLLWTCR.BYTE = 0x0E; /* 2097152 state, wait over 12ms  @PLL=100MHz(20MHz/2*10) */
1169:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Config PLL Control Register*/
1170:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SYSTEM.PLLCR.WORD = 0x0901; /* ((ExternalClock x 10)/2) @PLL Frequency*/
1171:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Main Clock Oscillator Control Register*/
1172:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Main Clock Oscillator Control Register*/
1173:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SYSTEM.MOSCCR.BYTE = 0x02; /* External oscillation input selection, Disable Internal Oscillator
1174:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* PLL Control Register 2 (if 1 stop, if 0 operating)*/
1175:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SYSTEM.PLLCR2.BYTE = 0x00; /* Enable PLL*/
1176:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     for (i = 0; i < 0x168; i++)
1177:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ; /* wait over 12ms*/
1178:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* System Clock Control Register*/
1179:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SYSTEM.SCKCR.LONG = 0x21022222; /* Syestem Clock ICK=PLL/2,FCK and PCK and BCL=PLL/4*/
1180:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* PLL source clock*/
1181:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SYSTEM.SCKCR3.WORD = 0x400; /* Select PLL like clock source*/
1182:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /**/
1183:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RX210_WRITE_PROTEC_ON; /* Enable Protection*/
1184:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1185:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return (bool_t) 1;
1186:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
1187:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return (bool_t) 0;
1188:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end function CLK_SetFLLExternalClockSync*/
1189:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1190:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*! \fn CLK_SetFLLExternalClockSync(uint32_t desiredClock)
1191:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \brief Sets up the system clock frequency as close to the desiredClock
1192:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  value as possible. The system will run on with PLL on the internal
1193:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  reference clock.
1194:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \param
1195:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \return
1196:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * \section Informazioni
1197:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Company: SPES scpa
1198:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Author: Andrea Emili
1199:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Date: "Date"
1200:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- File: "File name"
1201:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *	- Comment:
1202:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *		- On Rx210 PLL multiply only EXT oscillator Frequency
1203:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
1204:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t CLK_SetFLLInternalClockSync(uint32_t desiredClock)
1205:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
1206:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return (bool_t) 0;
1207:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** } /* end function CLK_SetFLLInternalClockSync*/
1208:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1209:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
1210:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  END CLK Class HAL Support                                   */
1211:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
1212:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1213:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
1214:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  BEGIN DIO Class HAL Support                                   *
1215:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
1216:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1217:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DeInitGPIO(void)
1218:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
1219:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*!< Reset all IO Port Init direction*/
1220:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORT1_PDR = 0x00;
1221:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORT2_PDR = 0x00;
1222:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORT3_PDR = 0x00;
1223:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORT4_PDR = 0x00;
1224:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORT5_PDR = 0x00;
1225:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORTA_PDR = 0x00;
1226:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORTB_PDR = 0x00;
1227:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORTC_PDR = 0x00;
1228:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORTE_PDR = 0x00;
1229:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORTH_PDR = 0x00;
1230:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*!< Reset Pull Up port to Init Value*/
1231:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORT1_PCR = 0x00;
1232:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORT2_PCR = 0x00;
1233:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORT3_PCR = 0x00;
1234:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORT4_PCR = 0x00;
1235:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORT5_PCR = 0x00;
1236:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORTA_PCR = 0x00;
1237:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORTB_PCR = 0x00;
1238:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORTC_PCR = 0x00;
1239:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORTE_PCR = 0x00;
1240:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORTH_PCR = 0x00;
1241:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*  De InitiGPIO */
1242:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1243:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1244:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t DIO_IsNotDummyIO(const IO_ModuleIOMapType* ptr)
1245:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
1246:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return (bool_t) ( ((ptr->PortAddress.basic) != (DIO_PortAddressBasicType)DUMMY_PORT_DATA_ADDR) 
1247:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
1248:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1249:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1250:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define DIGITAL_FILTER_MAP_SIZE 24
1251:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** static const IO_DIGITAL_NOISE_MapType const NoiseFilterPinMap[DIGITAL_FILTER_MAP_SIZE]=
1252:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
1253:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* MTUO */
1254:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(B, 3, 0x01, CH_TGRA, DIGITAL_FILTER_MTU0),	/* 1 */
1255:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB0_ON_PA1)
1256:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(A, 1, 0x01, CH_TGRB, DIGITAL_FILTER_MTU0),	/* 2 */
1257:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
1258:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(1, 5, 0x01, CH_TGRB, DIGITAL_FILTER_MTU0),	/* 2 */
1259:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
1260:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRC0_ON_PB1)
1261:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(B, 1, 0x01, CH_TGRC, DIGITAL_FILTER_MTU0),	/* 3 */
1262:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
1263:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(3, 2, 0x01, CH_TGRC, DIGITAL_FILTER_MTU0),	/* 3 */
1264:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
1265:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(A, 3, 0x01, CH_TGRD, DIGITAL_FILTER_MTU0),	/* 4 */
1266:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(E, 4, 0x02, CH_TGRA, DIGITAL_FILTER_MTU1),	/* 5 */
1267:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(B, 5, 0x02, CH_TGRB, DIGITAL_FILTER_MTU1),	/* 6 */
1268:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRA2_ON_PB5)
1269:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(B, 5, 0x01, CH_TGRA, DIGITAL_FILTER_MTU2),	/* 7 */
1270:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
1271:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(2, 6, 0x01, CH_TGRA, DIGITAL_FILTER_MTU2),	/* 7 */
1272:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
1273:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB2_ON_PE5)
1274:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(E, 5, 0x02, CH_TGRB, DIGITAL_FILTER_MTU2),	/* 8 */
1275:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
1276:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(2, 7, 0x01, CH_TGRB, DIGITAL_FILTER_MTU2),	/* 8 */
1277:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
1278:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRA3_ON_P17)
1279:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(1, 7, 0x01, CH_TGRA, DIGITAL_FILTER_MTU3),	/* 9 */
1280:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRA3_ON_PC7)
1281:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(C, 7, 0x01, CH_TGRA, DIGITAL_FILTER_MTU3),	/* 9 */
1282:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1283:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
1284:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(1, 4, 0x01, CH_TGRA, DIGITAL_FILTER_MTU3),	/* 9 */
1285:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
1286:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1287:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB3_ON_PB7)
1288:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(B, 7, 1, CH_TGRB, DIGITAL_FILTER_MTU3),	/* 10 */
1289:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRB3_ON_P17)
1290:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(1, 7, 0x02, CH_TGRB, DIGITAL_FILTER_MTU3),	/* 10 */
1291:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
1292:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(C, 5, 0x01, CH_TGRB, DIGITAL_FILTER_MTU3),	/* 10 */
1293:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
1294:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1295:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRC3_ON_P16)
1296:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(1, 6, 0x01, CH_TGRC, DIGITAL_FILTER_MTU3),	/* 11 */
1297:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
1298:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(C, 6, 0x01, CH_TGRC, DIGITAL_FILTER_MTU3),	/* 11 */
1299:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
1300:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1301:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRD3_ON_P16)
1302:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(1, 6, 0x02, CH_TGRD, DIGITAL_FILTER_MTU3),	/* 12 */
1303:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRD3_ON_PC4)
1304:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(C, 4, 0x01, CH_TGRD, DIGITAL_FILTER_MTU3),	/* 12 */
1305:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
1306:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(B, 6, 0x01, CH_TGRD, DIGITAL_FILTER_MTU3),	/* 12 */
1307:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
1308:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1309:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRA4_ON_PB3)
1310:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(B, 3, 0x02, CH_TGRA, DIGITAL_FILTER_MTU4),	/* 13 */
1311:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRA4_ON_PE2)
1312:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(E, 2, 0x02, CH_TGRA, DIGITAL_FILTER_MTU4),	/* 13 */
1313:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
1314:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(A, 0, 0x01, CH_TGRA, DIGITAL_FILTER_MTU4),	/* 13 */
1315:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
1316:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1317:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB4_ON_P30)
1318:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(3, 0, 0x01, CH_TGRB, DIGITAL_FILTER_MTU4),	/* 14 */
1319:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRB4_ON_P54)
1320:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(5, 4, 0x01, CH_TGRB, DIGITAL_FILTER_MTU4),	/* 14 */
1321:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRB4_ON_PE3)
1322:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(E, 3, 0x01, CH_TGRB, DIGITAL_FILTER_MTU4),	/* 14 */
1323:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
1324:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(C, 2, 0x01, CH_TGRB, DIGITAL_FILTER_MTU4),	/* 14 */
1325:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
1326:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1327:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRC4_ON_PE1)
1328:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(E, 1, 0x01, CH_TGRC, DIGITAL_FILTER_MTU4),	/* 15 */
1329:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRC4_ON_PE5)
1330:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(E, 5, 0x01, CH_TGRC, DIGITAL_FILTER_MTU4),	/* 15 */
1331:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
1332:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(B, 1, 0x02, CH_TGRC, DIGITAL_FILTER_MTU4),	/* 15 */
1333:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
1334:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1335:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRD4_ON_P55)
1336:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(5, 5, 0x01, CH_TGRD, DIGITAL_FILTER_MTU4),	/* 16 */
1337:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRD4_ON_PC3)
1338:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(C, 3, 0x01, CH_TGRD, DIGITAL_FILTER_MTU4),	/* 16 */
1339:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRD4_ON_PE4)
1340:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(E, 4, 0x01, CH_TGRD, DIGITAL_FILTER_MTU4),	/* 16 */
1341:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
1342:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(3, 1, 0x01, CH_TGRD, DIGITAL_FILTER_MTU4),	/* 16 */
1343:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
1344:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1345:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(3, 0, 0x40, 0, DIGITAL_FILTER_IRQ0),				/* 17 */
1346:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(H, 1, 0x40, 0, DIGITAL_FILTER_IRQ0),				/* 18 */
1347:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(3, 1, 0x40, 0, DIGITAL_FILTER_IRQ1),				/* 19 */
1348:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(H, 2, 0x40, 0, DIGITAL_FILTER_IRQ1),				/* 20 */
1349:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(1, 5, 0x40, 0, DIGITAL_FILTER_IRQ5),				/* 21 */
1350:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(E, 5, 0x40, 0, DIGITAL_FILTER_IRQ5),				/* 22 */
1351:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(A, 4, 0x40, 0, DIGITAL_FILTER_IRQ5),				/* 23 */
1352:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_DIGITAL_FILTER_PIN(A, 3, 0x40, 0, DIGITAL_FILTER_IRQ6),				/* 24 */
1353:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** };
1354:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1355:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** unsigned char DIO_CheckDigitalFilterPin(const IO_ModuleIOMapType* pMap)
1356:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
1357:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t i = 0;
1358:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t pin_found = 0xFF;
1359:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1360:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     DIO_ModuleMapPortAddressType portAddress = pMap->PortAddress;
1361:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     DIO_ModuleMapMaskType pinMask = pMap->PinMask;
1362:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1363:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     for (i = 0; i < DIGITAL_FILTER_MAP_SIZE; i++)
1364:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
1365:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     	/* Find pin from digital pin list */
1366:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ((NoiseFilterPinMap[i].PortAddress == portAddress.basic) &&
1367:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         		(NoiseFilterPinMap[i].PinMask == pinMask))
1368:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
1369:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         	uint8_t tmpMPCMask = (NoiseFilterPinMap[i].MPCFuncVal <= 0x0f ? 0x0f : 0xf0);
1370:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1371:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         	/* Check if pin found is enabled to its function */
1372:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if ( (*NoiseFilterPinMap[i].MPCAddress & tmpMPCMask) == NoiseFilterPinMap[i].MPCFuncVal
1373:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             {
1374:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 pin_found = i;
1375:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 break;
1376:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             }
1377:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
1378:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
1379:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return pin_found;
1380:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DIO_CheckDigitalFilterPin */
1381:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
1382:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Date: 06/18/2012
1383:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DIO_IsDigitalFilterAvailable(IO_ModuleIOMapType* pMap)
1384:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
1385:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** unsigned char DIO_IsDigitalFilterAvailable(const IO_ModuleIOMapType* pMap)
1386:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
1387:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t pin_found = FALSE;
1388:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     pin_found = DIO_CheckDigitalFilterPin(pMap);
1389:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(pin_found != 0xFF)
1390:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         pin_found = TRUE;
1391:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
1392:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         pin_found = FALSE;
1393:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return pin_found;
1394:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
1395:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1396:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
1397:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DIO_DigitalFilterEnable
1398:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
1399:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 	- To write MTU2a Noise filter register you must wake up the MTU2a periphera from low power mode
1400:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 	- IRQ Pin PFS register must be written before to use this function
1401:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 	- The check of which pin functionalities are enabled is done only in MTU2a shared pins.
1402:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
1403:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DIO_DigitalFilterEnable(const IO_ModuleIOMapType* pMap)
1404:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
1405:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t j;
1406:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t pin_mask;
1407:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     j = DIO_CheckDigitalFilterPin(pMap);
1408:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1409:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if (j < DIGITAL_FILTER_MAP_SIZE)
1410:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
1411:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         pin_mask = NoiseFilterPinMap[j].channel;
1412:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1413:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(NoiseFilterPinMap[j].digital_filter_peripheral)
1414:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
1415:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* Timers confugration */
1416:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU0:
1417:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU0.NFCR.BYTE |= (1 << pin_mask);
1418:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1419:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU1:
1420:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU1.NFCR.BYTE |= (1 << pin_mask);
1421:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1422:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU2:
1423:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU2.NFCR.BYTE |= (1 << pin_mask);
1424:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1425:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU3:
1426:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU3.NFCR.BYTE |= (1 << pin_mask);
1427:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1428:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU4:
1429:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU4.NFCR.BYTE |= (1 << pin_mask);
1430:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1431:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		/* IRQ pin confugration */
1432:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_IRQ0:
1433:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IRQFLTE0.BIT.FLTEN0 = 0x01;
1434:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1435:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_IRQ1:
1436:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IRQFLTE0.BIT.FLTEN1 = 0x01;
1437:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1438:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_IRQ5:
1439:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IRQFLTE0.BIT.FLTEN5 = 0x01;
1440:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1441:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_IRQ6:
1442:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IRQFLTE0.BIT.FLTEN6 = 0x01;
1443:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1444:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         default:
1445:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         	break;
1446:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }/* end switch */
1447:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
1448:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DIO_DigitalFilterEnable */
1449:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1450:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
1451:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DIO_SetDigitalFltClkFreq
1452:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
1453:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DIO_DigitalFilterClkFrequencySet(const IO_ModuleIOMapType* pMap, uint16_t filterFrequency)
1454:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
1455:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t j;
1456:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t divisor = 0;
1457:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint16_t frequency_khz = (uint16_t) (CLK_GetInternalClockSync() / 1000);
1458:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1459:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     j = DIO_CheckDigitalFilterPin(pMap);
1460:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1461:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if (j < DIGITAL_FILTER_MAP_SIZE)
1462:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
1463:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (filterFrequency <= (frequency_khz / 64))
1464:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
1465:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         	if (NoiseFilterPinMap[j].digital_filter_peripheral > DIGITAL_FILTER_MTU4)
1466:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         	{
1467:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             	divisor = 0x03;
1468:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         	}
1469:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         	else
1470:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         	{
1471:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         		/* Timers maximum divisor index is 2 */
1472:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             	divisor = 0x02;
1473:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         	}
1474:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
1475:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (filterFrequency <= (frequency_khz / 32))
1476:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
1477:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         	divisor = 0x02;
1478:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
1479:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (filterFrequency <= (frequency_khz / 8))
1480:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
1481:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         	divisor = 0x01;
1482:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
1483:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
1484:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
1485:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         	divisor = 0;
1486:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
1487:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1488:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* Setting of noise filter */
1489:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(NoiseFilterPinMap[j].digital_filter_peripheral)
1490:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
1491:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* Timers confugration */
1492:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU0:
1493:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU0.NFCR.BIT.NFCS = divisor;
1494:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1495:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU1:
1496:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU1.NFCR.BIT.NFCS = divisor;
1497:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1498:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU2:
1499:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU2.NFCR.BIT.NFCS = divisor;
1500:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1501:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU3:
1502:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU3.NFCR.BIT.NFCS = divisor;
1503:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1504:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU4:
1505:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU4.NFCR.BIT.NFCS = divisor;
1506:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1507:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1508:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		/* IRQ pin confugration */
1509:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case DIGITAL_FILTER_IRQ0:
1510:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IRQFLTC0.BIT.FCLKSEL0 = divisor;
1511:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
1512:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case DIGITAL_FILTER_IRQ1:
1513:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IRQFLTC0.BIT.FCLKSEL1 = divisor;
1514:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
1515:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case DIGITAL_FILTER_IRQ5:
1516:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IRQFLTC0.BIT.FCLKSEL5 = divisor;
1517:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
1518:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case DIGITAL_FILTER_IRQ6:
1519:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IRQFLTC0.BIT.FCLKSEL6 = divisor;
1520:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
1521:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		default:
1522:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
1523:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1524:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }/* end switch */
1525:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
1526:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1527:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DIO_SetDigitalFltClkFreq */
1528:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1529:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
1530:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DIO_DigitalFilterClkFrequencyGet
1531:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
1532:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint16_t DIO_DigitalFilterClkFrequencyGet(const IO_ModuleIOMapType* pMap)
1533:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
1534:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t j;
1535:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t divisor=0xff;
1536:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint16_t frequency_khz = (uint16_t) CLK_GetInternalClockSync() / 1000;
1537:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1538:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     j = DIO_CheckDigitalFilterPin(pMap);
1539:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1540:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if (j < DIGITAL_FILTER_MAP_SIZE)
1541:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
1542:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(NoiseFilterPinMap[j].digital_filter_peripheral)
1543:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
1544:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* Timers confugration */
1545:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU0:
1546:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             divisor = MTU0.NFCR.BIT.NFCS;
1547:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1548:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU1:
1549:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             divisor = MTU1.NFCR.BIT.NFCS;
1550:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1551:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU2:
1552:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             divisor = MTU2.NFCR.BIT.NFCS;
1553:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1554:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU3:
1555:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             divisor = MTU3.NFCR.BIT.NFCS;
1556:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1557:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU4:
1558:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             divisor = MTU4.NFCR.BIT.NFCS;
1559:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1560:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1561:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1562:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		/* IRQ pin confugration */
1563:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case DIGITAL_FILTER_IRQ0:
1564:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             divisor = ICU.IRQFLTC0.BIT.FCLKSEL0;
1565:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
1566:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case DIGITAL_FILTER_IRQ1:
1567:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             divisor = ICU.IRQFLTC0.BIT.FCLKSEL1;
1568:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
1569:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case DIGITAL_FILTER_IRQ5:
1570:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             divisor = ICU.IRQFLTC0.BIT.FCLKSEL5;
1571:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
1572:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case DIGITAL_FILTER_IRQ6:
1573:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             divisor = ICU.IRQFLTC0.BIT.FCLKSEL6;
1574:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
1575:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		default:
1576:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
1577:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1578:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }/* end switch */
1579:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1580:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(divisor)
1581:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
1582:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case 0:
1583:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         	break;
1584:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case 1:
1585:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         	frequency_khz = frequency_khz / 8;
1586:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         	break;
1587:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case 2:
1588:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         	frequency_khz = frequency_khz / 32;
1589:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         	break;
1590:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case 3:
1591:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         	frequency_khz = frequency_khz / 64;
1592:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         	break;
1593:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         default:
1594:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         	frequency_khz = 0;
1595:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         	break;
1596:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
1597:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1598:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
1599:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return frequency_khz;
1600:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1601:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DIO_DigitalFilterClkFrequencyGet */
1602:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1603:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
1604:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DIO_DigitalFilterDisable
1605:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
1606:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DIO_DigitalFilterDisable(const IO_ModuleIOMapType* pMap)
1607:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
1608:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t j;
1609:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* uint8_t pin_mask; */
1610:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     j = DIO_CheckDigitalFilterPin(pMap);
1611:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Check for IRQ functionality */
1612:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1613:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if (j < DIGITAL_FILTER_MAP_SIZE)
1614:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
1615:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(NoiseFilterPinMap[j].digital_filter_peripheral)
1616:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
1617:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* Timers confugration */
1618:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU0:
1619:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU0.NFCR.BYTE = 0x00;
1620:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1621:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU1:
1622:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU1.NFCR.BYTE = 0x00;
1623:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1624:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU2:
1625:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU2.NFCR.BYTE = 0x00;
1626:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1627:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU3:
1628:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU3.NFCR.BYTE = 0x00;
1629:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1630:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU4:
1631:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU4.NFCR.BYTE = 0x00;
1632:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1633:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1634:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		/* IRQ pin confugration */
1635:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case DIGITAL_FILTER_IRQ0:
1636:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IRQFLTE0.BIT.FLTEN0 = 0x00;
1637:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
1638:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case DIGITAL_FILTER_IRQ1:
1639:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IRQFLTE0.BIT.FLTEN1 = 0x00;
1640:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
1641:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case DIGITAL_FILTER_IRQ5:
1642:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IRQFLTE0.BIT.FLTEN5 = 0x00;
1643:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
1644:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case DIGITAL_FILTER_IRQ6:
1645:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IRQFLTE0.BIT.FLTEN6 = 0x00;
1646:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
1647:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		default:
1648:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
1649:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1650:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }/* end switch */
1651:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
1652:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DIO_DigitalFilterDisable */
1653:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1654:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
1655:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DIO_IsDigitalFilterEnabled
1656:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
1657:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** unsigned char DIO_IsDigitalFilterEnabled(const IO_ModuleIOMapType* pMap)
1658:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
1659:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t j;
1660:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t pin_mask;
1661:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t is_digital_filter_enabled = FALSE;
1662:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     j = DIO_CheckDigitalFilterPin(pMap);
1663:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Check for IRQ functionality */
1664:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1665:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if (j < DIGITAL_FILTER_MAP_SIZE)
1666:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
1667:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         pin_mask = NoiseFilterPinMap[j].channel;
1668:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* Setting of noise filter */
1669:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(NoiseFilterPinMap[j].digital_filter_peripheral)
1670:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
1671:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* Timers confugration */
1672:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU0:
1673:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             is_digital_filter_enabled = MTU0.NFCR.BYTE & (1 << pin_mask);
1674:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1675:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU1:
1676:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             is_digital_filter_enabled = MTU1.NFCR.BYTE & (1 << pin_mask);
1677:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1678:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU2:
1679:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             is_digital_filter_enabled = MTU2.NFCR.BYTE & (1 << pin_mask);
1680:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1681:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU3:
1682:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             is_digital_filter_enabled = MTU3.NFCR.BYTE & (1 << pin_mask);
1683:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1684:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case DIGITAL_FILTER_MTU4:
1685:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             is_digital_filter_enabled = MTU4.NFCR.BYTE & (1 << pin_mask);
1686:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
1687:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1688:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		/* IRQ pin confugration */
1689:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case DIGITAL_FILTER_IRQ0:
1690:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             is_digital_filter_enabled = (ICU.IRQFLTE0.BYTE & 0x01);
1691:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
1692:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case DIGITAL_FILTER_IRQ1:
1693:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             is_digital_filter_enabled = (ICU.IRQFLTE0.BYTE & 0x02);
1694:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
1695:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case DIGITAL_FILTER_IRQ5:
1696:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             is_digital_filter_enabled = (ICU.IRQFLTE0.BYTE & 0x20);
1697:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
1698:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case DIGITAL_FILTER_IRQ6:
1699:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             is_digital_filter_enabled = (ICU.IRQFLTE0.BYTE & 0x40);
1700:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
1701:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		default:
1702:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
1703:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1704:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }/* end switch */
1705:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
1706:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1707:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return is_digital_filter_enabled;
1708:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1709:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DIO_IsDigitalFilterEnabled */
1710:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1711:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
1712:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  END DIO Class HAL Support                                     *
1713:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
1714:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1715:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
1716:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  BEGIN TMR Class HAL Support                                   *
1717:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
1718:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1719:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*MTUO Interrupt vector define*/
1720:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define MTU0_BASE_INT_VECTOR 		114
1721:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define MTU0_INT_ENABLE_REGISTER 	0x0E
1722:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define MTU0_INTERRUPT_PRIORITY 	0x01
1723:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIA0_INT_SHIF_VECTOR		0
1724:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIB0_INT_SHIF_VECTOR		1
1725:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIC0_INT_SHIF_VECTOR		2
1726:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGID0_INT_SHIF_VECTOR		3
1727:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIV0_INT_SHIF_VECTOR		4
1728:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIE0_INT_SHIF_VECTOR		5
1729:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIF0_INT_SHIF_VECTOR		6
1730:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*MTU1 Interrupt vector define*/
1731:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define MTU1_BASE_INT_VECTOR 		121
1732:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define MTU1_INT_ENABLE_REGISTER 	0x0F
1733:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define MTU1_INTERRUPT_PRIORITY 	0x01
1734:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIA1_INT_SHIF_VECTOR		0
1735:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIB1_INT_SHIF_VECTOR		1
1736:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIV1_INT_SHIF_VECTOR		2
1737:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIU1_INT_SHIF_VECTOR		3
1738:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*MTU2 Interrupt vector define*/
1739:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define MTU2_BASE_INT_VECTOR 		125
1740:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define MTU2_INT_ENABLE_REGISTER 	0x0F
1741:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define MTU2_INTERRUPT_PRIORITY 	0x01
1742:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIA2_INT_SHIF_VECTOR		0
1743:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIB2_INT_SHIF_VECTOR		1
1744:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIV2_INT_SHIF_VECTOR		2
1745:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIU2_INT_SHIF_VECTOR		3
1746:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*MTU3 Interrupt vector define*/
1747:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define MTU3_BASE_INT_VECTOR 		129
1748:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define MTU3_INT_ENABLE_REGISTER 	0x10
1749:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define MTU3_INTERRUPT_PRIORITY 	0x01
1750:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIA3_INT_SHIF_VECTOR		0
1751:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIB3_INT_SHIF_VECTOR		1
1752:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIC3_INT_SHIF_VECTOR		2
1753:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGID3_INT_SHIF_VECTOR		3
1754:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIV3_INT_SHIF_VECTOR		3
1755:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*MTU4 Interrupt vector define*/
1756:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define MTU4_BASE_INT_VECTOR 		134
1757:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define MTU4_INT_ENABLE_REGISTER 	0x10
1758:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define MTU4_INTERRUPT_PRIORITY 	0x01
1759:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIA4_INT_SHIF_VECTOR		0
1760:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIB4_INT_SHIF_VECTOR		1
1761:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIC4_INT_SHIF_VECTOR		2
1762:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGID4_INT_SHIF_VECTOR		3
1763:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIV4_INT_SHIF_VECTOR		3
1764:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1765:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1766:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /** end Timer Interrupt define **/
1767:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1768:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* Define Reset source in TRC and in TMR_CLEAR_SOURCE_IS_INTERNAL macro*/
1769:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TCNT_RESET_SOURCE_OVERFLOW	0x00
1770:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TCNT_RESET_SOURCE_TGRA  	0x01
1771:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TCNT_RESET_SOURCE_TGRB  	0x02
1772:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TCNT_RESET_SOURCE_TGRC  	0x05
1773:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TCNT_RESET_SOURCE_TGRD  	0x06
1774:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1775:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1776:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1777:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
1778:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * RX200 MTUx Timer INTERRUPT DEFINE
1779:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * TIER REGISTER: COUNTER INTERRUPT ENABLE/DISABLE
1780:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
1781:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIA_INTERRUPT_ENABLE		0x01		/* TIER Register b0*/
1782:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIB_INTERRUPT_ENABLE		0x02		/* TIER Register b1*/
1783:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGIC_INTERRUPT_ENABLE		0x04		/* TIER Register b2*/
1784:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define TGID_INTERRUPT_ENABLE		0x08		/* TIER Register b3*/
1785:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define OVERFLOW_ISR_ENABLE			0x10		/* TIER Register b4*/
1786:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define UNDERFLOW_ISR_ENABLE		0x20		/* TIER Register b5*/
1787:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1788:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
1789:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * RX200 MTUxA Timer PWM DEFINE
1790:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
1791:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #define RX_PWM_MODE_1	0x02	/* PWM mode in TMDR register*/
1792:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1793:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1794:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
1795:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Variable: TimerClockGate
1796:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Contains the counter mask for power enable register
1797:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
1798:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
1799:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** static const uint32_t const TimerClockGate[HAL_NUM_HW_CNTR] =
1800:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
1801:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ENABLE_MTU2A_MASK,
1802:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ENABLE_MTU2A_MASK,
1803:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ENABLE_MTU2A_MASK,
1804:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ENABLE_MTU2A_MASK,
1805:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ENABLE_MTU2A_MASK,
1806:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** };/*end const*/
1807:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1808:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*MS ottimizzazione
1809:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
1810:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint8_t* const ChModeRegAddr[] =
1811:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
1812:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* MTU0 ------------------*/
1813:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)&MTU0.TIORH.BYTE, /* HAL_CH_TGRA0 MTU0 IOA*/
1814:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)&MTU0.TIORH.BYTE, /* HAL_CH_TGRB0 MTU0 IOB*/
1815:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)&MTU0.TIORL.BYTE, /* HAL_CH_TGRC0 MTU0 IOC*/
1816:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)&MTU0.TIORL.BYTE, /* HAL_CH_TGRD0 MTU0 IOD*/
1817:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)0,					/* HAL_CH_TGRV0	 overfow MTU0*/
1818:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)0,					/* HAL_CH_TGRE0	*/
1819:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)0,					/* HAL_CH_TGRF0 */
1820:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1821:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* MTU1 ------------------*/
1822:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)&MTU1.TIOR.BYTE,   	/* HAL_CH_TGRA1 MTU1 IOA*/
1823:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)&MTU1.TIOR.BYTE,   	/* HAL_CH_TGRB1 MTU1 IOB*/
1824:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)0,					/* HAL_CH_TGRV1	overfow MTU1*/
1825:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)0,					/* HAL_CH_TGRU1 */
1826:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* MTU2 ------------------*/
1827:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)&MTU2.TIOR.BYTE,   /* HAL_CH_TGRA2 MTU2 IOA*/
1828:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)&MTU2.TIOR.BYTE,   /* HAL_CH_TGRB2 MTU2 IOB*/
1829:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)0,					/* HAL_CH_TGRV2 */
1830:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)0,					/* HAL_CH_TGRU2 */
1831:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1832:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)&MTU3.TIORH.BYTE,  	/* HAL_CH_TGRA3 MTU3 IOA*/
1833:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)&MTU3.TIORH.BYTE,	/* HAL_CH_TGRB3 MTU3 IOB*/
1834:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)&MTU3.TIORL.BYTE,  	/* HAL_CH_TGRC3 MTU3 IOC*/
1835:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)&MTU3.TIORL.BYTE,	/* HAL_CH_TGRD3 MTU3 IOD*/
1836:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)0, /* HAL_CH_TGRV3	 overfow MTU3*/
1837:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1838:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)&MTU4.TIORH.BYTE,  /* HAL_CH_TGRA4 MTU4 IOA*/
1839:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)&MTU4.TIORH.BYTE,/* HAL_CH_TGRB4 MTU4 IOB*/
1840:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)&MTU4.TIORL.BYTE,  /* HAL_CH_TGRC4 MTU4 IOC*/
1841:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)&MTU4.TIORL.BYTE,/* HAL_CH_TGRD4 MTU4 IOD*/
1842:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint8_t*)0,				/* HAL_CH_TGRV4 overfow MTU4*/
1843:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** };
1844:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1845:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** const uint32_t ChModeRegAddr_Nibble = 0xA5110A; /* 101001010001000100001010b each bit means if the 
1846:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1847:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint16_t* const ChTGRAAddr[] =
1848:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
1849:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* MTU0 ------------------*/
1850:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)&MTU0_TGRA, /* HAL_CH_TGRA0 MTU0 TGRA*/
1851:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)&MTU0_TGRB, /* HAL_CH_TGRB0 MTU0 TRGB*/
1852:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)&MTU0_TGRC, /* HAL_CH_TGRC0 MTU0 TGRC*/
1853:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)&MTU0_TGRD, /* HAL_CH_TGRD0 MTU0 TGRD*/
1854:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)0,			/* HAL_CH_TGRV0	 overfow TGRV*/
1855:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)&MTU0_TGRE, /* HAL_CH_TGRE0	*/
1856:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)&MUT0_TGRF,	/* HAL_CH_TGRF0 */
1857:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1858:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* MTU1 ------------------*/
1859:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)&MTU1_TGRA, /* HAL_CH_TGRA1 MTU1 TRGA*/
1860:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)&MTU1_TGRB, /* HAL_CH_TGRB1 MTU1 TGRB*/
1861:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)0,			/* HAL_CH_TGRV1	overfow MTU1*/
1862:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)0,			/* HAL_CH_TGRU1 */
1863:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* MTU2 ------------------*/
1864:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)&MTU2_TGRA, /* HAL_CH_TGRA2 MTU2 TRGA*/
1865:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)&MTU2_TGRB, /* HAL_CH_TGRB2 MTU2 TGRB*/
1866:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)0,			/* HAL_CH_TGRV2 */
1867:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)0,			/* HAL_CH_TGRU2 */
1868:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* MTU3 ------------------*/
1869:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)&MTU3_TGRA,	/* HAL_CH_TGRA3 MTU3 TGRA*/
1870:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)&MTU3_TGRB,	/* HAL_CH_TGRB3 MTU3 TGRB*/
1871:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)&MTU3_TGRC,	/* HAL_CH_TGRC3 MTU3 TGRC*/
1872:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)&MTU3_TGRD,	/* HAL_CH_TGRD3 MTU3 TGRD*/
1873:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)0, 			/* HAL_CH_TGRV3	overfow MTU3*/
1874:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* MTU4 ------------------*/
1875:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)&MTU4_TGRA, /* HAL_CH_TGRA4 MTU4 IOA*/
1876:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)&MTU4_TGRB, /* HAL_CH_TGRB4 MTU4 IOB*/
1877:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)&MTU4_TGRC, /* HAL_CH_TGRC4 MTU4 IOC*/
1878:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)&MTU4_TGRD, /* HAL_CH_TGRD4 MTU4 IOD*/
1879:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     (uint16_t*)0,				/* HAL_CH_TGRV4 overfow MTU4*/
1880:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** };
1881:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1882:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1883:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1884:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** static uint32_t TMR_GetMultiBmp(uint32_t uBmp);
1885:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1886:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint8_t MapClearResourceValue(uint8_t clrSrcId)
1887:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
1888:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t retValue=0;
1889:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(clrSrcId)
1890:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
1891:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case TCNT_CLEARING_TGRA:
1892:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retValue = TCNT_RESET_SOURCE_TGRA;
1893:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1894:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case TCNT_CLEARING_TGRB:
1895:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retValue = TCNT_RESET_SOURCE_TGRB;
1896:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1897:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case TCNT_CLEARING_TGRC:
1898:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retValue = TCNT_RESET_SOURCE_TGRC;
1899:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1900:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case TCNT_CLEARING_TGRD:
1901:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retValue = TCNT_RESET_SOURCE_TGRD;
1902:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1903:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case TCNT_CLEARING_OVERFLOW:
1904:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retValue = TCNT_RESET_SOURCE_OVERFLOW;
1905:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1906:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
1907:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
1908:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1909:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
1910:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return retValue;
1911:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
1912:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1913:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint8_t MapClearResourceId(uint8_t clrValue)
1914:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
1915:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t retValue=0;
1916:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(clrValue)
1917:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
1918:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case TCNT_RESET_SOURCE_TGRA:
1919:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retValue = TCNT_CLEARING_TGRA;
1920:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1921:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case TCNT_RESET_SOURCE_TGRB:
1922:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retValue = TCNT_CLEARING_TGRB;
1923:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1924:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case TCNT_RESET_SOURCE_TGRC:
1925:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retValue = TCNT_CLEARING_TGRC;
1926:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1927:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case TCNT_RESET_SOURCE_TGRD:
1928:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retValue = TCNT_CLEARING_TGRD;
1929:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1930:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case TCNT_RESET_SOURCE_OVERFLOW:
1931:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retValue = TCNT_CLEARING_OVERFLOW;
1932:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1933:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
1934:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
1935:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1936:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
1937:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return retValue;
1938:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
1939:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1940:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1941:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** static void SetInternalHWClearSourceId(uint8_t tmrId, uint8_t clrSrcId)
1942:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
1943:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t clrValue;
1944:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     clrValue = MapClearResourceValue(clrSrcId);
1945:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1946:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(tmrId)
1947:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
1948:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU0:
1949:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TCR.BIT.CCLR = clrValue;
1950:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1951:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU1:
1952:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1.TCR.BIT.CCLR = clrValue;
1953:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1954:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU2:
1955:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2.TCR.BIT.CCLR = clrValue;
1956:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1957:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU3:
1958:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TCR.BIT.CCLR = clrValue;
1959:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1960:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU4:
1961:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TCR.BIT.CCLR = clrValue;
1962:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1963:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
1964:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
1965:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1966:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
1967:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
1968:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1969:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** static uint8_t GetInternalHWClearSourceValue(uint8_t tmrId)
1970:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
1971:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t clrValue = 0;
1972:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1973:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(tmrId)
1974:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
1975:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU0:
1976:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         clrValue = MTU0.TCR.BIT.CCLR;
1977:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1978:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU1:
1979:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         clrValue = MTU1.TCR.BIT.CCLR;
1980:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1981:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU2:
1982:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         clrValue = MTU2.TCR.BIT.CCLR;
1983:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1984:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU3:
1985:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         clrValue = MTU3.TCR.BIT.CCLR;
1986:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1987:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU4:
1988:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         clrValue = MTU4.TCR.BIT.CCLR;
1989:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1990:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
1991:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
1992:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
1993:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
1994:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return clrValue;
1995:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end*/
1996:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
1997:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint8_t TMR_GetClearSourceId(uint8_t tmrId)
1998:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
1999:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t clrValue;
2000:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2001:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     clrValue = GetInternalHWClearSourceValue(tmrId);
2002:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2003:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return	MapClearResourceId(clrValue);
2004:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
2005:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2006:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
2007:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: Threshold2SetUpUnsupported
2008:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
2009:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
2010:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Check if this MCU support Threshold2 config
2011:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
2012:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2013:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t Threshold2SetUpUnsupported(uint8_t channel)
2014:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
2015:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return (TRUE);
2016:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end Thereshold2SetUpUnsupported*/
2017:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2018:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2019:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
2020:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: CheckClearSourceIdFailed
2021:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: this function fails if the clock source for modulo (clear source) is correct
2022:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
2023:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
2024:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
2025:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2026:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t TMR_CheckClearSourceIdFailed(TMR_CNTAddressType tmrID, uint8_t clrSrcId)
2027:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
2028:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     bool_t retVal=1; /* fail*/
2029:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(  clrSrcId == TCNT_CLEARING_OVERFLOW )
2030:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
2031:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return 0; /* not fail*/
2032:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
2033:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (tmrID)
2034:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
2035:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU0:
2036:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (   (clrSrcId == TCNT_CLEARING_TGRA)
2037:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 || (clrSrcId == TCNT_CLEARING_TGRB)
2038:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 || (clrSrcId == TCNT_CLEARING_TGRC)
2039:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 || (clrSrcId == TCNT_CLEARING_TGRD))
2040:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2041:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 0;
2042:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2043:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2044:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU1:
2045:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if((clrSrcId == TCNT_CLEARING_TGRA)
2046:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 || (clrSrcId == TCNT_CLEARING_TGRB))
2047:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2048:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 0;
2049:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2050:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2051:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU2:
2052:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(		(clrSrcId == TCNT_CLEARING_TGRA)
2053:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 ||  (clrSrcId == TCNT_CLEARING_TGRB))
2054:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2055:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 0;
2056:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2057:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2058:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU3:
2059:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(    (clrSrcId == TCNT_CLEARING_TGRA)
2060:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 || (clrSrcId == TCNT_CLEARING_TGRB)
2061:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 || (clrSrcId == TCNT_CLEARING_TGRC)
2062:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 || (clrSrcId == TCNT_CLEARING_TGRD))
2063:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2064:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 0;
2065:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2066:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2067:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU4:
2068:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(    (clrSrcId == TCNT_CLEARING_TGRA)
2069:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 || (clrSrcId == TCNT_CLEARING_TGRB)
2070:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 || (clrSrcId == TCNT_CLEARING_TGRC)
2071:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 || (clrSrcId == TCNT_CLEARING_TGRD))
2072:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2073:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 0;
2074:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2075:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2076:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
2077:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal = 1;
2078:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2079:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end switch*/
2080:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2081:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return retVal;
2082:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_CheckClearSourceIdFailed*/
2083:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2084:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
2085:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_GetClearSourceCh
2086:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: this function return the chid related to the clearsourceid of a timer, -1 if no cha
2087:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
2088:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
2089:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
2090:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** TMR_CHAddressType TMR_GetClearSourceCh(TMR_CNTAddressType tmrID, uint8_t clrSrcId)
2091:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
2092:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     TMR_CHAddressType chId=NO_CHANNEL_ID; /* no ch source*/
2093:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(  clrSrcId == TCNT_CLEARING_OVERFLOW )
2094:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
2095:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return NO_CHANNEL_ID; /* no ch source*/
2096:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
2097:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (tmrID)
2098:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
2099:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU0:
2100:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
2101:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(clrSrcId)
2102:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2103:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_CLEARING_TGRA:
2104:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             chId =	HAL_CH_TGRA0;
2105:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
2106:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_CLEARING_TGRB:
2107:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             chId =	HAL_CH_TGRB0;
2108:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
2109:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_CLEARING_TGRC:
2110:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             chId =	HAL_CH_TGRC0;
2111:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
2112:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_CLEARING_TGRD:
2113:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             chId =	HAL_CH_TGRD0;
2114:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
2115:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2116:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
2117:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     break;
2118:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU1:
2119:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
2120:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(clrSrcId)
2121:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2122:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_CLEARING_TGRA:
2123:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             chId =	HAL_CH_TGRA1;
2124:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
2125:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_CLEARING_TGRB:
2126:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             chId =	HAL_CH_TGRB1;
2127:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
2128:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2129:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
2130:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     break;
2131:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU2:
2132:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
2133:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(clrSrcId)
2134:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2135:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_CLEARING_TGRA:
2136:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             chId =	HAL_CH_TGRA2;
2137:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
2138:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_CLEARING_TGRB:
2139:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             chId =	HAL_CH_TGRB2;
2140:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
2141:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2142:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
2143:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     break;
2144:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU3:
2145:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
2146:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(clrSrcId)
2147:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2148:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_CLEARING_TGRA:
2149:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             chId =	HAL_CH_TGRA3;
2150:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
2151:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_CLEARING_TGRB:
2152:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             chId =	HAL_CH_TGRB3;
2153:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
2154:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_CLEARING_TGRC:
2155:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             chId =	HAL_CH_TGRC3;
2156:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
2157:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_CLEARING_TGRD:
2158:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             chId =	HAL_CH_TGRD3;
2159:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
2160:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2161:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
2162:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     break;
2163:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU4:
2164:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
2165:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(clrSrcId)
2166:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2167:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_CLEARING_TGRA:
2168:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             chId =	HAL_CH_TGRA4;
2169:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
2170:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_CLEARING_TGRB:
2171:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             chId =	HAL_CH_TGRB4;
2172:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
2173:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_CLEARING_TGRC:
2174:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             chId =	HAL_CH_TGRC4;
2175:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
2176:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_CLEARING_TGRD:
2177:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             chId =	HAL_CH_TGRD4;
2178:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
2179:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2180:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
2181:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     break;
2182:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
2183:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2184:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2185:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end switch*/
2186:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return chId;
2187:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_CheckClearSourceIdFailed*/
2188:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2189:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2190:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2191:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
2192:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMT_ClockGate
2193:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Author: Andrea Emili, SPES scpa
2194:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Enable timer module Power Up and route clock to timer module enabled
2195:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * TODO: Function, Test, inside critical section
2196:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: GP clock gating deve essere fatto all'interno di una critical section */
2197:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* invece exit critical viene chiamata prima di TMR_ClockGate */
2198:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* true means the timer gets clocked
2199:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
2200:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2201:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_ClockGate(TMR_CNTAddressType hwCntrlId, bool_t gate)
2202:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
2203:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* uint32_t scg1Mask; */
2204:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( hwCntrlId >= NUM_HW_CNTR)
2205:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
2206:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(0);
2207:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
2208:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* scg1Mask = TimerClockGate[hwCntrlId];*/ /* Select the timer module to enable*/
2209:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2210:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     DISABLE_REGISTER_WRITE_PROTECTION;
2211:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if (TRUE == gate)
2212:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
2213:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SYSTEM.MSTPCRA.BIT.MSTPA9 = 0; /* Power up module*/
2214:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
2215:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
2216:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
2217:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SYSTEM.MSTPCRA.BIT.MSTPA9 = 1; /* Power up module*/
2218:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
2219:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ENABLE_REGISTER_WRITE_PROTECTION;
2220:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2221:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMT_ClockGate function*/
2222:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2223:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2224:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** const uint32_t prescalerDivMap[8]= { 1, 4,16, 64, 256, 1024, 1024, 1024};
2225:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
2226:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_SetPrescaler
2227:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
2228:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
2229:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_SetPrescaler(TMR_CNTAddressType tmrID, uint8_t prescaler)
2230:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
2231:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(tmrID)
2232:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
2233:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU0:
2234:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TCR.BIT.TPSC = prescaler;
2235:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2236:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU1:
2237:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1.TCR.BIT.TPSC = prescaler;
2238:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2239:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU2:
2240:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2.TCR.BIT.TPSC = prescaler;
2241:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2242:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU3:
2243:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TCR.BIT.TPSC = prescaler;
2244:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2245:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU4:
2246:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TCR.BIT.TPSC = prescaler;
2247:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2248:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
2249:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(0);
2250:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2251:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
2252:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_SetPrescale*/
2253:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2254:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ritorna il divisore del prescaler del timer*/
2255:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint32_t TMR_GetPrescalerDiv(TMR_CNTAddressType tmrID )
2256:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
2257:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint32_t retVal=0;
2258:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2259:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(tmrID)
2260:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
2261:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU0:
2262:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal = prescalerDivMap[MTU0.TCR.BIT.TPSC];
2263:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2264:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU1:
2265:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal = prescalerDivMap[MTU1.TCR.BIT.TPSC];
2266:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2267:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU2:
2268:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal = prescalerDivMap[MTU2.TCR.BIT.TPSC];
2269:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2270:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU3:
2271:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal = prescalerDivMap[MTU3.TCR.BIT.TPSC];
2272:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2273:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU4:
2274:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal = prescalerDivMap[MTU4.TCR.BIT.TPSC];
2275:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2276:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
2277:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(0);
2278:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2279:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
2280:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return retVal;
2281:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
2282:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2283:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*  ritorna la tick resolution in base alla sorgente del timer ed al prescaler*/
2284:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint32_t TMR_GetTickResolution( TMR_CNTAddressType tmrId )
2285:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
2286:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint32_t retVal;
2287:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     retVal = 1000000000/(CLK_GetInternalClockSync()/TMR_GetPrescalerDiv(tmrId));
2288:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return retVal;
2289:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
2290:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*MS TODO: imposta il prescaler in base alla sorgente del timer*/
2291:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint32_t TMR_SetSetPrescaleForTickResolution(TMR_CNTAddressType tmrId, uint32_t tickRes)
2292:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
2293:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
2294:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
2295:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2296:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
2297:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_SetPrescalerDfltValue
2298:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Set Prescaler to the default value
2299:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: Reset value for prescaler is 0. So TCR bo-b3 clear to 0
2300:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Test me!
2301:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
2302:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_SetPrescalerDfltValue(TMR_CNTAddressType tmrID)
2303:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
2304:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(tmrID)
2305:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
2306:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU0:
2307:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TCR.BYTE &= _PR_DEFAULT;
2308:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2309:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU1:
2310:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1.TCR.BYTE &= _PR_DEFAULT;
2311:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2312:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU2:
2313:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2.TCR.BYTE &= _PR_DEFAULT;
2314:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2315:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU3:
2316:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TCR.BYTE &= _PR_DEFAULT;
2317:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2318:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU4:
2319:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TCR.BYTE &= _PR_DEFAULT;
2320:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2321:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
2322:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
2323:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
2324:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end TMR_SetPrescalerDfltValue*/
2325:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2326:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2327:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2328:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
2329:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_SetCountDir
2330:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
2331:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: No selection of counter direction in RX200
2332:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: To check!
2333:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * TODO: Check with Renesas the possibility to set this feature
2334:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
2335:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_SetCountDir( TMR_CNTAddressType pTmr_cnt, uint8_t direction )
2336:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
2337:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( direction != 1) /* only TMR_COUNT_UP ia allowed*/
2338:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
2339:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
2340:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2341:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
2342:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Macro: TMR_SetCountDirDfltValue
2343:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
2344:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: Only up counter direction
2345:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
2346:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_SetCountDirDfltValue(TMR_CNTAddressType tmrId)
2347:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
2348:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* DO NOTHING: only TMR_COUNT_UP ia allowed*/
2349:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
2350:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
2351:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_SetModulo
2352:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: this function configures the modulo value for the specific channel
2353:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 				it is being called by both OCHWCNTR_InitSync and by OCPWM_SetPeriodSync
2354:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 				the modulo period must be consistent in the two configurations
2355:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 				in case the configuration is being changed by the PWM setup, it will overwrite the period se
2356:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * within the hardware timer configuration done by OCHWCNTR_InitSync
2357:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Test me!
2358:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
2359:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_SetModulo(TMR_CNTAddressType tmrID, Period_ValueType period, uint8_t clrSrcId)
2360:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
2361:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SetInternalHWClearSourceId( tmrID, clrSrcId);
2362:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2363:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if (clrSrcId == TCNT_CLEARING_OVERFLOW && period != 0xFFFF )
2364:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
2365:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
2366:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
2367:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2368:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (tmrID)
2369:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
2370:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU0:
2371:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_TGRA) /* Set MTU0 compare value in TGRx*/
2372:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU0.TGRA = period;
2373:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_TGRB)
2374:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU0.TGRB = period;
2375:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_TGRC)
2376:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU0.TGRC = period;
2377:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_TGRD)
2378:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU0.TGRD = period;
2379:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_OVERFLOW)
2380:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2381:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             /* nothing to do */
2382:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2383:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
2384:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             HAL_ErrorHandler(1);
2385:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2386:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU1:
2387:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_TGRA) /* Set MTU0 compare value in TGRx*/
2388:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU1.TGRA = period;
2389:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_TGRB)
2390:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU1.TGRB = period;
2391:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_OVERFLOW)
2392:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2393:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             /* nothing to do */
2394:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2395:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
2396:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             HAL_ErrorHandler(1);
2397:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2398:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU2:
2399:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_TGRA) /* Set MTU0 compare value in TGRx*/
2400:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU2.TGRA = period;
2401:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_TGRB)
2402:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU2.TGRB = period;
2403:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_OVERFLOW)
2404:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		{
2405:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             /* nothing to do */
2406:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2407:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
2408:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             HAL_ErrorHandler(1);
2409:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2410:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU3:
2411:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_TGRA) /* Set MTU0 compare value in TGRx*/
2412:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU3.TGRA = period;
2413:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_TGRB)
2414:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU3.TGRB = period;
2415:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_TGRC)
2416:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU3.TGRC = period;
2417:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_TGRD)
2418:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU3.TGRD = period;
2419:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_OVERFLOW)
2420:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		{
2421:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             /* nothing to do */
2422:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2423:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
2424:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             HAL_ErrorHandler(1);
2425:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2426:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU4:
2427:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_TGRA) /* Set MTU0 compare value in TGRx*/
2428:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU4.TGRA = period;
2429:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_TGRB)
2430:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU4.TGRB = period;
2431:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_TGRC)
2432:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU4.TGRC = period;
2433:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_TGRD)
2434:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU4.TGRD = period;
2435:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_OVERFLOW)
2436:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		{
2437:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             /* nothing to do */
2438:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2439:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
2440:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             HAL_ErrorHandler(1);
2441:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2442:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
2443:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
2444:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2445:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end switch*/
2446:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_SetModulo*/
2447:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2448:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
2449:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_StopClockSource
2450:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Disable Clock source, TSTR Register Start/Stop timer counter
2451:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
2452:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Test me!
2453:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
2454:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_StopClockSource( TMR_CNTAddressType tmrID)
2455:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
2456:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(tmrID >= HAL_NUM_HW_CNTR)	/* Check for errors*/
2457:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
2458:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
2459:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
2460:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(tmrID > 2)				/* TSTR Reg*/
2461:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
2462:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         tmrID += 3;
2463:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
2464:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2465:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     CLEAR_BIT(MTU.TSTR.BYTE, tmrID);
2466:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
2467:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2468:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
2469:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_EnableTI
2470:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: This function enables the modulo channel interrupt
2471:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * there is no dedicated overflow register so one of the match channels is used
2472:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
2473:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_EnableTI( TMR_CNTAddressType tmrID, TMR_CHAddressType clrSrcId)
2474:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
2475:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(tmrID)
2476:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
2477:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU0:/* MTU0*/
2478:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_OVERFLOW) /* Set Interrupt priority*/
2479:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2480:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IPR[MTU0_BASE_INT_VECTOR + clrSrcId].BYTE = MTU0_INTERRUPT_PRIORITY;
2481:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2482:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
2483:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2484:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IPR[MTU0_BASE_INT_VECTOR].BYTE = MTU0_INTERRUPT_PRIORITY;
2485:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2486:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2487:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IR[MTU0_BASE_INT_VECTOR + clrSrcId].BYTE = 0x00; /* Clear interrupt flag*/
2488:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU0_INT_ENABLE_REGISTER].BYTE |= (1 << (2 + clrSrcId)); /* Enable Interrupt for se
2489:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2490:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(MTU0.TIER.BYTE, clrSrcId);
2491:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2492:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU1:
2493:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_OVERFLOW) /* Set Interrupt priority*/
2494:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2495:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IPR[MTU1_BASE_INT_VECTOR + 2].BYTE = MTU1_INTERRUPT_PRIORITY;
2496:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IR[MTU1_BASE_INT_VECTOR + 2].BYTE = 0x00;
2497:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IER[MTU1_INT_ENABLE_REGISTER].BYTE |= (1 << (clrSrcId - 1));
2498:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2499:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
2500:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2501:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IPR[MTU1_BASE_INT_VECTOR].BYTE = MTU1_INTERRUPT_PRIORITY;
2502:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IR[MTU1_BASE_INT_VECTOR + clrSrcId].BYTE = 0x00;
2503:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IER[MTU1_INT_ENABLE_REGISTER].BYTE |= (1 << (clrSrcId +1));
2504:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2505:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2506:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(MTU1.TIER.BYTE, clrSrcId);
2507:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2508:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU2:
2509:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_OVERFLOW)/* Set Interrupt priority*/
2510:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2511:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IPR[MTU2_BASE_INT_VECTOR + 2].BYTE = MTU2_INTERRUPT_PRIORITY;
2512:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IR[MTU2_BASE_INT_VECTOR + 2].BYTE = 0x00;
2513:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IER[MTU2_INT_ENABLE_REGISTER].BYTE |= (1 << (clrSrcId + 3));
2514:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2515:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
2516:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2517:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IPR[MTU2_BASE_INT_VECTOR].BYTE = MTU2_INTERRUPT_PRIORITY;
2518:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IR[MTU2_BASE_INT_VECTOR + clrSrcId].BYTE = 0x00;
2519:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IER[MTU2_INT_ENABLE_REGISTER].BYTE |= (1 << (clrSrcId + 5));
2520:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2521:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2522:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(MTU2.TIER.BYTE, clrSrcId);
2523:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2524:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU3:
2525:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_OVERFLOW)/* Set Interrupt priority*/
2526:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IPR[MTU3_BASE_INT_VECTOR + clrSrcId].BYTE = MTU3_INTERRUPT_PRIORITY;
2527:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
2528:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IPR[MTU3_BASE_INT_VECTOR].BYTE = MTU3_INTERRUPT_PRIORITY;
2529:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2530:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IR[MTU3_BASE_INT_VECTOR + clrSrcId].BYTE = 0x00; /* Clear interrupt flag*/
2531:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE |= (1 << (1 + clrSrcId));
2532:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2533:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(MTU3.TIER.BYTE, clrSrcId);
2534:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2535:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU4:
2536:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_OVERFLOW)/* Set Interrupt priority*/
2537:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IPR[MTU4_BASE_INT_VECTOR + clrSrcId].BYTE = MTU4_INTERRUPT_PRIORITY;
2538:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
2539:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IPR[MTU4_BASE_INT_VECTOR].BYTE = MTU4_INTERRUPT_PRIORITY;
2540:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2541:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IR[MTU3_BASE_INT_VECTOR + clrSrcId].BYTE = 0x00; /* Clear interrupt flag*/
2542:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2543:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId > TCNT_CLEARING_TGRC)
2544:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IER[MTU3_INT_ENABLE_REGISTER + 1].BYTE |= (1 << (clrSrcId - 2));
2545:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
2546:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             /*TGRA and TGRB*/
2547:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE |= (1 << (clrSrcId + 6));
2548:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2549:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2550:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(MTU4.TIER.BYTE, clrSrcId);
2551:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2552:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
2553:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
2554:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
2555:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_EnableTI*/
2556:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2557:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
2558:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_DisableTI
2559:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: This function is used to disable the overflow interrupt.
2560:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * There is no dedicated overflow register so one the match channels is used.
2561:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
2562:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Test me!
2563:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
2564:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_DisableTI(TMR_CNTAddressType tmrID, TMR_CHAddressType clrSrcId)
2565:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
2566:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(tmrID)
2567:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
2568:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU0:
2569:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* Disable Interrupt IER*/
2570:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         CLEAR_BIT( ICU.IER[MTU0_INT_ENABLE_REGISTER].BYTE ,(2+clrSrcId));
2571:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         CLEAR_BIT(MTU0.TIER.BYTE, clrSrcId);
2572:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2573:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU1:
2574:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(clrSrcId == TCNT_CLEARING_OVERFLOW)
2575:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2576:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             CLEAR_BIT( ICU.IER[MTU1_INT_ENABLE_REGISTER].BYTE ,(clrSrcId-1));
2577:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2578:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
2579:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2580:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             CLEAR_BIT(ICU.IER[MTU1_INT_ENABLE_REGISTER].BYTE, (clrSrcId + 1));	/*AE(04122012)*/
2581:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2582:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         CLEAR_BIT(MTU1.TIER.BYTE, clrSrcId);
2583:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2584:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2585:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU2:
2586:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(clrSrcId == TCNT_CLEARING_OVERFLOW)
2587:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2588:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             CLEAR_BIT(ICU.IER[MTU2_INT_ENABLE_REGISTER].BYTE,  (clrSrcId+3));
2589:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2590:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
2591:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2592:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             CLEAR_BIT(ICU.IER[MTU2_INT_ENABLE_REGISTER].BYTE, (clrSrcId+5));
2593:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2594:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         CLEAR_BIT(MTU2.TIER.BYTE, clrSrcId);
2595:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2596:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2597:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU3:
2598:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         CLEAR_BIT(ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE, (1+clrSrcId));
2599:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         CLEAR_BIT(MTU3.TIER.BYTE, clrSrcId);
2600:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2601:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU4:
2602:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(clrSrcId > TCNT_CLEARING_TGRC)
2603:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2604:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             CLEAR_BIT(ICU.IER[MTU3_INT_ENABLE_REGISTER+1].BYTE, (clrSrcId-2));
2605:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2606:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
2607:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2608:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             CLEAR_BIT(ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE, (clrSrcId+6));
2609:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2610:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             CLEAR_BIT(MTU4.TIER.BYTE, clrSrcId);
2611:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2612:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
2613:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(0);
2614:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2615:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
2616:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end TMR_DisableTI*/
2617:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2618:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2619:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
2620:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_ClearTOF
2621:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: This function clears the interrupt flag for the module channel.
2622:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * There is no dedicated overflow register so one of the match channels is used.
2623:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
2624:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 1.
2625:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 	 1- Disable TMR Interrupt
2626:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *   2- Clear INT Flag
2627:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *   3- Enable Interrupt
2628:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 2.
2629:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *  Disable interrupt because in Test the IR flag isn't cleared otherwise.
2630:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Test me
2631:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
2632:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2633:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_ClearTOF( TMR_CNTAddressType tmrId, TMR_CHAddressType clrSrcId)
2634:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
2635:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*MS clrSrcId = TMR_GetClearSourceId(tmrId); non necessario */
2636:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch ( tmrId)
2637:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
2638:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HW_TMR_ID_0:
2639:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IR[MTU0_BASE_INT_VECTOR + clrSrcId].BYTE = 0x00; /* Clear interrupt flag*/
2640:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2641:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HW_TMR_ID_1:
2642:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_OVERFLOW)/* Set Interrupt priority*/
2643:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2644:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IR[MTU1_BASE_INT_VECTOR + 2].BYTE = 0x00;
2645:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2646:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
2647:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2648:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IR[MTU1_BASE_INT_VECTOR + clrSrcId].BYTE = 0x00;
2649:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2650:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2651:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HW_TMR_ID_2:
2652:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_OVERFLOW)/* Set Interrupt priority*/
2653:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2654:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IR[MTU2_BASE_INT_VECTOR + 2].BYTE = 0x00;
2655:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2656:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
2657:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2658:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IR[MTU2_BASE_INT_VECTOR + clrSrcId].BYTE = 0x00;
2659:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2660:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2661:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HW_TMR_ID_3:
2662:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IR[MTU3_BASE_INT_VECTOR + clrSrcId].BYTE = 0x00;
2663:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2664:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HW_TMR_ID_4:
2665:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IR[MTU4_BASE_INT_VECTOR + clrSrcId].BYTE = 0x00;
2666:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2667:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end switch*/
2668:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2669:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end TMR_ClearTOF*/
2670:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2671:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
2672:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_GetTOF
2673:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Check if IR request is set and return with 1 is set or with 0 is not set
2674:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
2675:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Test me!
2676:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
2677:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2678:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t TMR_GetTOF( TMR_CNTAddressType pTmr_cnt, TMR_CHAddressType channel)
2679:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
2680:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t clrSrcId;
2681:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     clrSrcId = TMR_GetClearSourceId( pTmr_cnt);
2682:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2683:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (pTmr_cnt)
2684:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
2685:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HW_TMR_ID_0:
2686:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ((ICU.IR[MTU0_BASE_INT_VECTOR + clrSrcId].BYTE & 0x01) == 0x01)
2687:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             return 1;
2688:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2689:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HW_TMR_ID_1:
2690:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_OVERFLOW)
2691:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2692:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if ((ICU.IR[MTU1_BASE_INT_VECTOR + 2].BYTE & 0x01) == 0x01)
2693:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 return 1;
2694:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }/*end if*/
2695:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
2696:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2697:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if ((ICU.IR[MTU1_BASE_INT_VECTOR + clrSrcId].BYTE & 0x01) == 0x01)
2698:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 return 1;
2699:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }/*end else*/
2700:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2701:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HW_TMR_ID_2:
2702:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_OVERFLOW)
2703:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2704:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if ((ICU.IR[MTU2_BASE_INT_VECTOR + 2].BYTE & 0x01) == 0x01)
2705:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 return 1;
2706:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2707:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
2708:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
2709:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if ((ICU.IR[MTU2_BASE_INT_VECTOR + clrSrcId].BYTE & 0x01) == 0x01)
2710:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 return 1;
2711:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
2712:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2713:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HW_TMR_ID_3:
2714:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ((ICU.IR[MTU3_BASE_INT_VECTOR + clrSrcId].BYTE & 0x01) == 0x01)
2715:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             return 1;
2716:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2717:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HW_TMR_ID_4:
2718:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ((ICU.IR[MTU4_BASE_INT_VECTOR + clrSrcId].BYTE & 0x01) == 0x01)
2719:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             return 1;
2720:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2721:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end switch*/
2722:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* get the bit in the IR with appropriate mask */
2723:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
2724:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end TMR_GETTOF*/
2725:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2726:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
2727:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_SetChannelInputChapture
2728:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Set a channel in Input Capture Mode
2729:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: ICU can have one or two pin configurations.
2730:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Test me!
2731:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
2732:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_SetChannelInputChapture( TMR_CHAddressType chId)
2733:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
2734:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     volatile unsigned char *p1=0;
2735:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     volatile unsigned char *p2=0;
2736:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     volatile unsigned char *p3=0;
2737:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     unsigned char value=0;
2738:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     unsigned char bitNum=0;
2739:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2740:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (chId)
2741:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
2742:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU0*/
2743:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA0:/* (MTUO, MTI0C0A), (PB3,Pin36)*/
2744:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTB.PDR.BYTE;
2745:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTB.PMR.BYTE;
2746:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 3;
2747:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PB3PFS.BYTE;
2748:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2749:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2750:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2751:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB0:/* (MTUO, MTI0C0B), (P15,Pin19), (PA1,Pin44)*/
2752:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB0_ON_PA1)
2753:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTA.PDR.BYTE;
2754:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTA.PMR.BYTE;
2755:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 1;
2756:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PA1PFS.BYTE;
2757:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2758:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
2759:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORT1.PDR.BYTE;
2760:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORT1.PMR.BYTE;
2761:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 5;
2762:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.P15PFS.BYTE;
2763:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2764:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
2765:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2766:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2767:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC0:/*((MTUO, MTIOCOC),(P32,Pin12), (PB1,Pin37)*/
2768:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRC0_ON_PB1)
2769:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTB.PDR.BYTE;
2770:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTB.PMR.BYTE;
2771:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 1;
2772:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PB1PFS.BYTE;
2773:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2774:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
2775:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORT3.PDR.BYTE;
2776:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORT3.PMR.BYTE;
2777:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 2;
2778:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.P32PFS.BYTE;
2779:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2780:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
2781:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2782:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2783:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD0: /*((MTUO, MTIOCOD),(PA3,Pin43)*/
2784:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTA.PDR.BYTE;
2785:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTA.PMR.BYTE;
2786:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 3;
2787:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PA3PFS.BYTE;
2788:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2789:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2790:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2791:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU1*/
2792:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA1:/* (MTU1, MTIOC1A), (PE4, Pin47)*/
2793:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTE.PDR.BYTE;
2794:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTE.PMR.BYTE;
2795:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 4;
2796:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PE4PFS.BYTE ;
2797:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x02;
2798:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2799:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2800:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB1:/* (MTU1, MTIOC1B), (PB5, Pin35)*/
2801:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTB.PDR.BYTE;
2802:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTB.PMR.BYTE;
2803:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 5;
2804:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PB5PFS.BYTE;
2805:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x02;
2806:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2807:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2808:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU2*/
2809:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA2:/*(MTU2, MTIOC2A), (P26,Pin16), (PB5,Pin35)*/
2810:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRA2_ON_PB5)
2811:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTB.PDR.BYTE;
2812:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTB.PMR.BYTE;
2813:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 5;
2814:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PB5PFS.BYTE;
2815:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2816:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
2817:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORT2.PDR.BYTE;
2818:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORT2.PMR.BYTE;
2819:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 6;
2820:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.P26PFS.BYTE;
2821:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2822:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
2823:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2824:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2825:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB2:/*(MTU2, MTIOC2B), (P27,Pin15), (PE5,Pin46)*/
2826:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB2_ON_PE5)
2827:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTE.PDR.BYTE;
2828:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTE.PMR.BYTE;
2829:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 5;
2830:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PE5PFS.BYTE;
2831:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x02;
2832:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
2833:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORT2.PDR.BYTE;
2834:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORT2.PMR.BYTE;
2835:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 7;
2836:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.P27PFS.BYTE;
2837:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2838:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
2839:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2840:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2841:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU3*/
2842:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA3:/*(MTU3, MTIOC3A), (P14,Pin20),(PC7,Pin27),(P17,Pin17)*/
2843:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRA3_ON_PC7)
2844:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTC.PDR.BYTE;
2845:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTC.PMR.BYTE;
2846:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 7;
2847:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PC7PFS.BYTE;
2848:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2849:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRA3_ON_P17)
2850:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORT1.PDR.BYTE;
2851:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORT1.PMR.BYTE;
2852:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 7;
2853:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.P17PFS.BYTE;
2854:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2855:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
2856:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORT1.PDR.BYTE;
2857:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORT1.PMR.BYTE;
2858:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 4;
2859:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.P14PFS.BYTE;
2860:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2861:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
2862:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2863:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2864:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB3:/*(MTU3, MTIOC3B), (PC5,Pin29),(P17,Pin17),(PB7,Pin33)*/
2865:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB3_ON_PB7)
2866:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTB.PDR.BYTE;
2867:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTB.PMR.BYTE;
2868:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 7;
2869:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PB7PFS.BYTE;
2870:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2871:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRB3_ON_P17)
2872:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORT1.PDR.BYTE;
2873:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORT1.PMR.BYTE;
2874:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 7;
2875:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.P17PFS.BYTE;
2876:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x02;
2877:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
2878:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTC.PDR.BYTE;
2879:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTC.PMR.BYTE;
2880:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 5;
2881:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PC5PFS.BYTE;
2882:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2883:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
2884:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2885:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2886:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC3:/* (MTU3, MTIOC3C), (PC6,Pin 28), (P16, Pin18),*/
2887:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRC3_ON_P16)
2888:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORT1.PDR.BYTE;
2889:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORT1.PMR.BYTE;
2890:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 6;
2891:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.P16PFS.BYTE;
2892:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2893:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
2894:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTC.PDR.BYTE;
2895:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTC.PMR.BYTE;
2896:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 6;
2897:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PC6PFS.BYTE;
2898:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2899:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
2900:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2901:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2902:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD3:/* (MTU3, MTIOC3D), (PB6, Pin34),P16,Pin 18), (PC4, Pin30)*/
2903:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRD3_ON_P16)
2904:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORT1.PDR.BYTE;
2905:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORT1.PMR.BYTE;
2906:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 6;
2907:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.P16PFS.BYTE;
2908:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x02;
2909:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRD3_ON_PC4)
2910:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTC.PDR.BYTE;
2911:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTC.PMR.BYTE;
2912:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 4;
2913:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PC4PFS.BYTE;
2914:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2915:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
2916:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTB.PDR.BYTE;
2917:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTB.PMR.BYTE;
2918:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 6;
2919:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PB6PFS.BYTE;
2920:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2921:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
2922:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2923:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2924:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* MTU4*/
2925:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA4:/* (MTU4, MTIOC4A), (PA0,Pin45),(PB3,Pin36),(PE2,Pin49),*/
2926:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRA4_ON_PB3)
2927:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTB.PDR.BYTE;
2928:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTB.PMR.BYTE;
2929:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 3;
2930:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PB3PFS.BYTE;
2931:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x02;
2932:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRA4_ON_PE2)
2933:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTE.PDR.BYTE;
2934:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTE.PMR.BYTE;
2935:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 2;
2936:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PE2PFS.BYTE;
2937:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2938:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
2939:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTA.PDR.BYTE;
2940:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTA.PMR.BYTE;
2941:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 0;
2942:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PA0PFS.BYTE;
2943:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2944:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
2945:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2946:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2947:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB4:/* (MTU4, MTIOC4B), (PC2,Pin32),(P30,Pin14),(P54,Pin26),(PE3,Pin48)*/
2948:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB4_ON_P30)
2949:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORT3.PDR.BYTE;
2950:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORT3.PMR.BYTE;
2951:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 0;
2952:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.P30PFS.BYTE;
2953:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2954:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRB4_ON_P54)
2955:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORT5.PDR.BYTE;
2956:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORT5.PMR.BYTE;
2957:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 4;
2958:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.P54PFS.BYTE;
2959:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2960:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRB4_ON_PE3)
2961:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTE.PDR.BYTE;
2962:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTE.PMR.BYTE;
2963:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 3;
2964:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PE3PFS.BYTE;
2965:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2966:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
2967:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTC.PDR.BYTE;
2968:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTC.PMR.BYTE;
2969:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 2;
2970:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PC2PFS.BYTE;
2971:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2972:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
2973:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2974:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2975:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC4:/* (MTU4, MTIOC4C), (PB1, Pin37),(PE5,Pin46),(PE1,Pin50)*/
2976:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRC4_ON_PE5)
2977:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTE.PDR.BYTE;
2978:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTE.PMR.BYTE;
2979:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 5;
2980:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PE5PFS.BYTE;
2981:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2982:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRC4_ON_PE1)
2983:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTE.PDR.BYTE;
2984:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTE.PMR.BYTE;
2985:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 1;
2986:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PE1PFS.BYTE;
2987:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
2988:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
2989:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTB.PDR.BYTE;
2990:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTB.PMR.BYTE;
2991:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 1;
2992:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PB1PFS.BYTE;
2993:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x02;
2994:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
2995:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
2996:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
2997:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD4:/* (MTU4, MTIOC4D), (P31, Pin13),(P55,Pin25),(PC3,Pin31), (PE4,Pin47)*/
2998:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRD4_ON_P55)
2999:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORT5.PDR.BYTE;
3000:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORT5.PMR.BYTE;
3001:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 5;
3002:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.P55PFS.BYTE;
3003:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
3004:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRD4_ON_PC3)
3005:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTC.PDR.BYTE;
3006:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTC.PMR.BYTE;
3007:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 3;
3008:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PC3PFS.BYTE;
3009:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
3010:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRD4_ON_PE4)
3011:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTE.PDR.BYTE;
3012:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTE.PMR.BYTE;
3013:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 4;
3014:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PE4PFS.BYTE;
3015:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
3016:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3017:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORT3.PDR.BYTE;
3018:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORT3.PMR.BYTE;
3019:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 1;
3020:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.P31PFS.BYTE;
3021:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x02;
3022:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3023:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3024:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3025:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
3026:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
3027:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3028:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end switch*/
3029:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3030:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( p1 != 0 && p2 != 0 && p3 != 0)
3031:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
3032:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         CLEAR_BIT(*p1, bitNum);
3033:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(*p2, bitNum);
3034:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         DISABLE_PORT_REGISTER_WRITE_PROTECTION();
3035:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         *p3 = value;
3036:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ENABLE_PORT_REGISTER_WRITE_PROTECTION();
3037:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
3038:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_SetChannelInputChapture*/
3039:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3040:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3041:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
3042:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_SetChannelOutputCompare
3043:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Set a channel in Output Compare Mode (Software compare only, not deals with functio
3044:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Notes: TGRA is the threshold of HW timer
3045:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
3046:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 	- Check the Indesit file maybe error!
3047:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *  - To do!
3048:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *
3049:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
3050:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_SetChannelOutputCompare( TMR_CHAddressType chId)
3051:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
3052:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     volatile unsigned char *p1=0;
3053:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     unsigned char mode =MTUO_TIOR_MODE_OUTPUT_PROIBITED;
3054:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3055:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PLT_ASSERT( chId >= HAL_CH_TGRA0 && chId < HAL_CH_MAX)
3056:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3057:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     p1 = ChModeRegAddr[chId];
3058:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3059:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(p1 != 0)
3060:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	{
3061:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		if( GET_BIT(ChModeRegAddr_Nibble, chId))
3062:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		{
3063:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			SET_H_NIBBLE(*p1, mode);
3064:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		}
3065:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		else
3066:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		{
3067:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			SET_L_NIBBLE(*p1, mode);
3068:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		}
3069:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	}
3070:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end TMR_SetChannelOutputCompare*/
3071:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3072:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
3073:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_SetChannelPWM
3074:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Setting of PWM Channel
3075:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
3076:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
3077:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
3078:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_SetChannelPWM( TMR_CHAddressType chId)
3079:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
3080:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3081:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (chId)
3082:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
3083:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* MTU0 ----------*/
3084:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA0:	/* (MTU0, MTIOC0A),PB3,Pin36*/
3085:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
3086:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU0.TIORH.BYTE, MTU_TIOR_MODE_PIN_1_0);
3087:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU0.TIORH.BYTE, MTU_TIOR_MODE_PIN_0_1);
3088:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         PORTB.PDR.BYTE |= PORTX_BIT3_MASK;; 	/* PB3 is input*/
3089:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         PORTB.PMR.BYTE |= PORTX_BIT3_MASK;; 	/* PB3 is for peripheral function*/
3090:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3091:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB0:/* (MTUO, MTI0C0B), (P15,Pin19), (PA1,Pin44)*/
3092:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM Mode*/
3093:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU0.TIORH.BYTE, MTU_TIOR_MODE_PIN_1_0);
3094:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU0.TIORH.BYTE, MTU_TIOR_MODE_PIN_0_1);
3095:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB0_ON_PA1)
3096:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTA.PDR.BYTE, 1);					/* is output */
3097:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTA.PMR.BYTE, 1);					/* is for peripheral function */
3098:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3099:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT1.PDR.BYTE, 5);					/* is output */
3100:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT1.PMR.BYTE, 5);					/* is for peripheral function */
3101:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3102:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3103:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC0:/*((MTUO, MTIOCOC), P32, Pin12*/
3104:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM Mode*/
3105:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU0.TIORL.BYTE, MTU_TIOR_MODE_PIN_1_0);
3106:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU0.TIORL.BYTE, MTU_TIOR_MODE_PIN_0_1);
3107:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         PORT3.PDR.BYTE |= PORTX_BIT2_MASK; 		/* P32 is Output*/
3108:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         PORT3.PMR.BYTE |= PORTX_BIT2_MASK; 		/* P32 is for peripheral function*/
3109:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3110:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD0: /*((MTUO, MTIOCOD),(PA3,Pin43)*/
3111:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
3112:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU0.TIORL.BYTE, MTU_TIOR_MODE_PIN_0_1);
3113:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU0.TIORL.BYTE, MTU_TIOR_MODE_PIN_1_0);
3114:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTA.PDR.BYTE, 3);					/* is output*/
3115:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTA.PMR.BYTE, 3);
3116:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3117:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU1 -----------*/
3118:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA1:/* (MTU1, MTIOC1A, PE4, Pin47)*/
3119:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
3120:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU1.TIOR.BYTE, MTU_TIOR_MODE_PIN_0_1);
3121:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU1.TIOR.BYTE, MTU_TIOR_MODE_PIN_1_0);
3122:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTE.PDR.BYTE, 4);					/* is output*/
3123:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTE.PMR.BYTE, 4);
3124:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3125:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB1:/* (MTU1, MTIOC1B), (PB5, Pin35)*/
3126:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
3127:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU1.TIOR.BYTE, MTU_TIOR_MODE_PIN_0_1);
3128:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU1.TIOR.BYTE, MTU_TIOR_MODE_PIN_1_0);
3129:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTB.PDR.BYTE, 5);					/* is output*/
3130:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTB.PMR.BYTE, 5);
3131:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3132:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU2 ----------*/
3133:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA2:/*(MTU2, MTIOC2A), (P26,Pin16), (PB5,Pin35)*/
3134:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
3135:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU2.TIOR.BYTE, MTU_TIOR_MODE_PIN_1_0);
3136:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU2.TIOR.BYTE, MTU_TIOR_MODE_PIN_0_1);
3137:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRA2_ON_PB5)
3138:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTB.PDR.BYTE, 5);					/* is output*/
3139:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTB.PMR.BYTE, 5);
3140:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3141:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT2.PDR.BYTE, 6);					/* is output*/
3142:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT2.PMR.BYTE, 6);
3143:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3144:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3145:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB2:/*(MTU2, MTIOC2B), (P27,Pin15), (PE5,Pin46)*/
3146:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
3147:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU2.TIOR.BYTE, MTU_TIOR_MODE_PIN_1_0);
3148:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU2.TIOR.BYTE, MTU_TIOR_MODE_PIN_0_1);
3149:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB2_ON_PE5)
3150:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTE.PDR.BYTE, 5);					/* is output*/
3151:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTE.PMR.BYTE, 5);
3152:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3153:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT2.PDR.BYTE, 7);					/* is output*/
3154:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT2.PMR.BYTE, 7);
3155:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3156:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3157:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU3 -----------*/
3158:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA3:/*(MTU3, MTIOC3A), (P14,Pin20),(PC7,Pin27),(P17,Pin17)*/
3159:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
3160:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU3.TIORH.BYTE, MTU_TIOR_MODE_PIN_1_0);
3161:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU3.TIORH.BYTE, MTU_TIOR_MODE_PIN_0_1);
3162:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRA3_ON_PC7)
3163:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTC.PDR.BYTE, 7);					/* is output*/
3164:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTC.PMR.BYTE, 7);
3165:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRA3_ON_P17)
3166:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT1.PDR.BYTE, 7);					/* is output*/
3167:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT1.PMR.BYTE, 7);
3168:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3169:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT1.PDR.BYTE, 4);					/* is output*/
3170:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT1.PMR.BYTE, 4);
3171:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3172:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3173:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB3:/*(MTU3, MTIOC3B), (PC5,Pin29),(P17,Pin17),(PB7,Pin33)*/
3174:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
3175:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU.TOER.BIT.OE3B = 1;
3176:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU3.TIORH.BYTE, MTU_TIOR_MODE_PIN_1_0);
3177:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU3.TIORH.BYTE, MTU_TIOR_MODE_PIN_0_1);
3178:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB3_ON_P17)
3179:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT1.PDR.BYTE, 7);					/* is output*/
3180:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT1.PMR.BYTE, 7);
3181:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRB3_ON_PB7)
3182:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTB.PDR.BYTE, 7);					/* is output*/
3183:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTB.PMR.BYTE, 7);
3184:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3185:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTC.PDR.BYTE, 5);					/* is output*/
3186:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTC.PMR.BYTE, 5);
3187:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3188:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3189:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC3:/* (MTU3, MTIOC3C), (PC6,Pin 28), (P16, Pin18),*/
3190:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
3191:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU3.TIORL.BYTE, MTU_TIOR_MODE_PIN_1_0);
3192:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU3.TIORL.BYTE, MTU_TIOR_MODE_PIN_0_1);
3193:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRC3_ON_P16)
3194:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT1.PDR.BYTE, 6);					/* is output*/
3195:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT1.PMR.BYTE, 6);
3196:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3197:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTC.PDR.BYTE, 6);					/* is output*/
3198:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTC.PMR.BYTE, 6);
3199:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3200:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3201:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD3:/* (MTU3, MTIOC3D), (PB6, Pin34),P16,Pin 18), (PC4, Pin30)*/
3202:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
3203:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU.TOER.BIT.OE3D = 1;
3204:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU3.TIORL.BYTE, MTU_TIOR_MODE_PIN_1_0);
3205:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU3.TIORL.BYTE, MTU_TIOR_MODE_PIN_0_1);
3206:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRD3_ON_P16)
3207:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT1.PDR.BYTE, 6);					/*  is output */
3208:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT1.PMR.BYTE, 6);
3209:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRD3_ON_PC4)
3210:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTC.PDR.BYTE, 4);					/*  is output */
3211:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTC.PMR.BYTE, 4);
3212:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3213:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTB.PDR.BYTE, 6);					/*  is output */
3214:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTB.PMR.BYTE, 6);
3215:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3216:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3217:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* MTU4 ----------- */
3218:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA4:/* (MTU4, MTIOC4A), (PA0,Pin45),(PB3,Pin36),(PE2,Pin49), */
3219:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TMDR.BYTE |= (RX_PWM_MODE_1); /*  Select PWM Mode */
3220:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU.TOER.BIT.OE4A = 1;
3221:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU4.TIORH.BYTE, MTU_TIOR_MODE_PIN_1_0);
3222:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU4.TIORH.BYTE, MTU_TIOR_MODE_PIN_0_1);
3223:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRA4_ON_PB3)
3224:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTB.PDR.BYTE, 3);					/* is output*/
3225:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTB.PMR.BYTE, 3);
3226:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRA4_ON_PE2)
3227:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTE.PDR.BYTE, 2);					/* is output*/
3228:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTE.PMR.BYTE, 2);
3229:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3230:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTA.PDR.BYTE, 0);					/* is output*/
3231:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTA.PMR.BYTE, 0);
3232:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3233:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3234:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB4:/* (MTU4, MTIOC4B), (PC2,Pin32),(P30,Pin14),(P54,Pin26),(PE3,Pin48)*/
3235:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
3236:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU.TOER.BIT.OE4B = 1;
3237:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU4.TIORH.BYTE, MTU_TIOR_MODE_PIN_1_0);
3238:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU4.TIORH.BYTE, MTU_TIOR_MODE_PIN_0_1);
3239:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB4_ON_P30)
3240:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT3.PDR.BYTE, 0);					/* is output*/
3241:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT3.PMR.BYTE, 0);
3242:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRB4_ON_P54)
3243:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT5.PDR.BYTE, 4);					/* is output*/
3244:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT5.PMR.BYTE, 4);
3245:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRB4_ON_PE3)
3246:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTE.PDR.BYTE, 3);					/* is output*/
3247:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTE.PMR.BYTE, 3);
3248:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3249:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTC.PDR.BYTE, 2);					/* is output*/
3250:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTC.PMR.BYTE, 2);
3251:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3252:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3253:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC4:/* (MTU4, MTIOC4C), (PB1, Pin37),(PE5,Pin46),(PE1,Pin50)*/
3254:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
3255:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU.TOER.BIT.OE4C = 1;
3256:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU4.TIORL.BYTE, MTU_TIOR_MODE_PIN_1_0);
3257:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU4.TIORL.BYTE, MTU_TIOR_MODE_PIN_0_1);
3258:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRC4_ON_PE5)
3259:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTE.PDR.BYTE, 5);					/* is output*/
3260:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTE.PMR.BYTE, 5);
3261:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRC4_ON_PE1)
3262:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTE.PDR.BYTE, 1);					/* is output*/
3263:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTE.PMR.BYTE, 1);
3264:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3265:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTB.PDR.BYTE, 1);					/* is output*/
3266:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTB.PMR.BYTE, 1);
3267:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3268:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3269:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD4:/* (MTU4, MTIOC4D), (P31, Pin13),(P55,Pin25),(PC3,Pin31), (PE4,Pin47)*/
3270:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
3271:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU.TOER.BIT.OE4D = 1;
3272:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU4.TIORL.BYTE, MTU_TIOR_MODE_PIN_1_0);
3273:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU4.TIORL.BYTE, MTU_TIOR_MODE_PIN_0_1);
3274:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRD4_ON_P55)
3275:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT5.PDR.BYTE, 5);					/* is output*/
3276:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT5.PMR.BYTE, 5);
3277:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRD4_ON_PC3)
3278:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTC.PDR.BYTE, 3);					/* is output*/
3279:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTC.PMR.BYTE, 3);
3280:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRD4_ON_PE4)
3281:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTE.PDR.BYTE, 4);					/* is output*/
3282:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTE.PMR.BYTE, 4);
3283:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3284:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT3.PDR.BYTE, 1);					/* is output*/
3285:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT3.PMR.BYTE, 1);
3286:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3287:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3288:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
3289:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(0);
3290:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3291:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end switch*/
3292:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end TMR_SetChannelPWM*/
3293:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3294:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
3295:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_ToggleChannelEdgeMode
3296:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Toogle edged type to falling or rising
3297:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
3298:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Test me!
3299:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
3300:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
3301:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_ToggleChannelEdgeMode( TMR_CHAddressType pChannel)
3302:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
3303:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     int chId = (int)pChannel;
3304:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t	mode;
3305:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t highNibble=0;
3306:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t *p1;
3307:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3308:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch( chId )
3309:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
3310:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU0 ----------------------------------------------------------*/
3311:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA0:
3312:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* highNibble = 0; */
3313:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & MTU0.TIORH.BYTE;
3314:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
3315:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_L_NIBBLE(MTU0.TIORH.BYTE);
3316:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ( mode == MTU_TIOR_MODE_RISING_EDGE )
3317:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_L_NIBBLE( MTU0.TIORH.BYTE, MTU_TIOR_MODE_FALING_EDGE);
3318:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if(  mode == MTU_TIOR_MODE_FALING_EDGE )
3319:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_L_NIBBLE( MTU0.TIORH.BYTE, MTU_TIOR_MODE_RISING_EDGE);
3320:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3321:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3322:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB0:
3323:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         highNibble = 1;
3324:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & MTU0.TIORH.BYTE;
3325:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
3326:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_H_NIBBLE(MTU0.TIORH.BYTE);
3327:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ( mode == MTU_TIOR_MODE_RISING_EDGE )
3328:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_H_NIBBLE(MTU0.TIORH.BYTE, MTU_TIOR_MODE_FALING_EDGE);
3329:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if(  mode == MTU_TIOR_MODE_FALING_EDGE )
3330:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_H_NIBBLE(MTU0.TIORH.BYTE, MTU_TIOR_MODE_RISING_EDGE);
3331:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3332:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3333:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC0:
3334:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* highNibble = 0; */
3335:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & MTU0.TIORL.BYTE;
3336:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
3337:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_L_NIBBLE(MTU0.TIORL.BYTE);
3338:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ( mode == MTU_TIOR_MODE_RISING_EDGE )
3339:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_L_NIBBLE(MTU0.TIORL.BYTE, MTU_TIOR_MODE_FALING_EDGE);
3340:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if(  mode == MTU_TIOR_MODE_FALING_EDGE )
3341:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_L_NIBBLE(MTU0.TIORL.BYTE, MTU_TIOR_MODE_RISING_EDGE);
3342:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3343:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3344:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD0:
3345:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         highNibble = 1;
3346:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & MTU0.TIORL.BYTE;
3347:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
3348:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_H_NIBBLE(MTU0.TIORL.BYTE);
3349:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ( mode == MTU_TIOR_MODE_RISING_EDGE )
3350:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_H_NIBBLE(MTU0.TIORL.BYTE, MTU_TIOR_MODE_FALING_EDGE);
3351:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if(  mode == MTU_TIOR_MODE_FALING_EDGE )
3352:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_H_NIBBLE(MTU0.TIORL.BYTE, MTU_TIOR_MODE_RISING_EDGE);
3353:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3354:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3355:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU1 ---------------------------------------------------------*/
3356:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA1:
3357:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* highNibble = 0; */
3358:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & MTU1.TIOR.BYTE;
3359:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
3360:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_L_NIBBLE(MTU1.TIOR.BYTE);
3361:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ( mode == MTU_TIOR_MODE_RISING_EDGE )
3362:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_L_NIBBLE(MTU1.TIOR.BYTE, MTU_TIOR_MODE_FALING_EDGE);
3363:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if(  mode == MTU_TIOR_MODE_FALING_EDGE )
3364:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_L_NIBBLE(MTU1.TIOR.BYTE, MTU_TIOR_MODE_RISING_EDGE);
3365:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3366:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3367:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB1:
3368:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         highNibble = 1;
3369:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & MTU1.TIOR.BYTE;
3370:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
3371:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_H_NIBBLE(MTU1.TIOR.BYTE);
3372:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ( mode == MTU_TIOR_MODE_RISING_EDGE )
3373:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_H_NIBBLE(MTU1.TIOR.BYTE, MTU_TIOR_MODE_FALING_EDGE);
3374:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if(  mode == MTU_TIOR_MODE_FALING_EDGE )
3375:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_H_NIBBLE(MTU1.TIOR.BYTE, MTU_TIOR_MODE_RISING_EDGE);
3376:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3377:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3378:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU2 -------------------------------------------------------*/
3379:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA2:
3380:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* highNibble = 0; */
3381:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & MTU2.TIOR.BYTE;
3382:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
3383:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_L_NIBBLE(MTU2.TIOR.BYTE);
3384:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ( mode == MTU_TIOR_MODE_RISING_EDGE )
3385:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_L_NIBBLE(MTU2.TIOR.BYTE, MTU_TIOR_MODE_FALING_EDGE);
3386:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if(  mode == MTU_TIOR_MODE_FALING_EDGE )
3387:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_L_NIBBLE(MTU2.TIOR.BYTE, MTU_TIOR_MODE_RISING_EDGE);
3388:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3389:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3390:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB2:
3391:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         highNibble = 1;
3392:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & MTU2.TIOR.BYTE;
3393:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
3394:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_H_NIBBLE(MTU2.TIOR.BYTE);
3395:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ( mode == MTU_TIOR_MODE_RISING_EDGE )
3396:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_H_NIBBLE(MTU2.TIOR.BYTE, MTU_TIOR_MODE_FALING_EDGE);
3397:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if(  mode == MTU_TIOR_MODE_FALING_EDGE )
3398:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_H_NIBBLE(MTU2.TIOR.BYTE, MTU_TIOR_MODE_RISING_EDGE);
3399:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3400:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3401:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU3 ---------------------------------------------------------*/
3402:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA3:
3403:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* highNibble = 0; */
3404:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & MTU3.TIORH.BYTE;
3405:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
3406:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_L_NIBBLE(MTU3.TIORH.BYTE);
3407:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ( mode == MTU_TIOR_MODE_RISING_EDGE )
3408:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_L_NIBBLE(MTU3.TIORH.BYTE, MTU_TIOR_MODE_FALING_EDGE);
3409:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if(  mode == MTU_TIOR_MODE_FALING_EDGE )
3410:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_L_NIBBLE(MTU3.TIORH.BYTE, MTU_TIOR_MODE_RISING_EDGE);
3411:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3412:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3413:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB3:
3414:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         highNibble = 1;
3415:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & MTU3.TIORH.BYTE;
3416:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
3417:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_H_NIBBLE(MTU3.TIORH.BYTE);
3418:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ( mode == MTU_TIOR_MODE_RISING_EDGE )
3419:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_H_NIBBLE(MTU3.TIORH.BYTE, MTU_TIOR_MODE_FALING_EDGE);
3420:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if(  mode == MTU_TIOR_MODE_FALING_EDGE )
3421:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_H_NIBBLE(MTU3.TIORH.BYTE, MTU_TIOR_MODE_RISING_EDGE);
3422:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3423:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3424:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC3:
3425:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* highNibble = 0; */
3426:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & MTU3.TIORL.BYTE;
3427:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
3428:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_L_NIBBLE(MTU3.TIORL.BYTE);
3429:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ( mode == MTU_TIOR_MODE_RISING_EDGE )
3430:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_L_NIBBLE(MTU3.TIORL.BYTE, MTU_TIOR_MODE_FALING_EDGE);
3431:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if(  mode == MTU_TIOR_MODE_FALING_EDGE )
3432:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_L_NIBBLE(MTU3.TIORL.BYTE, MTU_TIOR_MODE_RISING_EDGE);
3433:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3434:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3435:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD3:
3436:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         highNibble = 1;
3437:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & MTU3.TIORL.BYTE;
3438:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
3439:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_H_NIBBLE(MTU3.TIORL.BYTE);
3440:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ( mode == MTU_TIOR_MODE_RISING_EDGE )
3441:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_H_NIBBLE(MTU3.TIORL.BYTE, MTU_TIOR_MODE_FALING_EDGE);
3442:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if(  mode == MTU_TIOR_MODE_FALING_EDGE )
3443:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_H_NIBBLE(MTU3.TIORL.BYTE, MTU_TIOR_MODE_RISING_EDGE);
3444:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3445:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3446:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU4 ----------------------------------------------------------*/
3447:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA4:
3448:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* highNibble = 0; */
3449:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & MTU4.TIORH.BYTE;
3450:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
3451:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_L_NIBBLE(MTU4.TIORH.BYTE);
3452:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ( mode == MTU_TIOR_MODE_RISING_EDGE )
3453:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_L_NIBBLE(MTU4.TIORH.BYTE, MTU_TIOR_MODE_FALING_EDGE);
3454:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if(  mode == MTU_TIOR_MODE_FALING_EDGE )
3455:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_L_NIBBLE(MTU4.TIORH.BYTE, MTU_TIOR_MODE_RISING_EDGE);
3456:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3457:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3458:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB4:
3459:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         highNibble = 1;
3460:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & MTU4.TIORH.BYTE;
3461:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
3462:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_H_NIBBLE(MTU4.TIORH.BYTE);
3463:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ( mode == MTU_TIOR_MODE_RISING_EDGE )
3464:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_H_NIBBLE(MTU4.TIORH.BYTE, MTU_TIOR_MODE_FALING_EDGE);
3465:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if(  mode == MTU_TIOR_MODE_FALING_EDGE )
3466:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_H_NIBBLE(MTU4.TIORH.BYTE, MTU_TIOR_MODE_RISING_EDGE);
3467:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3468:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3469:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC4:
3470:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
3471:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* highNibble = 0; */
3472:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & MTU4.TIORL.BYTE;
3473:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
3474:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_L_NIBBLE(MTU4.TIORL.BYTE);
3475:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ( mode == MTU_TIOR_MODE_RISING_EDGE )
3476:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_L_NIBBLE(MTU4.TIORL.BYTE, MTU_TIOR_MODE_FALING_EDGE);
3477:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if(  mode == MTU_TIOR_MODE_FALING_EDGE )
3478:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_L_NIBBLE(MTU4.TIORL.BYTE, MTU_TIOR_MODE_RISING_EDGE);
3479:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3480:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
3481:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     break;
3482:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD4:
3483:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         highNibble = 1;
3484:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & MTU4.TIORL.BYTE;
3485:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
3486:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_H_NIBBLE(MTU4.TIORL.BYTE);
3487:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ( mode == MTU_TIOR_MODE_RISING_EDGE )
3488:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_H_NIBBLE(MTU4.TIORL.BYTE, MTU_TIOR_MODE_FALING_EDGE);
3489:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if(  mode == MTU_TIOR_MODE_FALING_EDGE )
3490:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_H_NIBBLE(MTU4.TIORL.BYTE, MTU_TIOR_MODE_RISING_EDGE);
3491:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3492:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3493:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
3494:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
3495:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3496:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end switch*/
3497:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3498:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(highNibble)
3499:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
3500:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ( GET_H_NIBBLE(*p1) == MTU_TIOR_MODE_RISING_EDGE )
3501:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_H_NIBBLE( *p1, MTU_TIOR_MODE_FALING_EDGE);
3502:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
3503:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_H_NIBBLE( MTU0.TIORH.BYTE, MTU_TIOR_MODE_RISING_EDGE);
3504:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
3505:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
3506:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
3507:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ( GET_L_NIBBLE(*p1) == MTU_TIOR_MODE_RISING_EDGE )
3508:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_L_NIBBLE( *p1, MTU_TIOR_MODE_FALING_EDGE);
3509:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
3510:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_L_NIBBLE( MTU0.TIORH.BYTE, MTU_TIOR_MODE_RISING_EDGE);
3511:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
3512:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3513:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_ToggleChannelEdgeMode*/
3514:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3515:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_ToggleChannelEdgeMode( TMR_CHAddressType pChannel)
3516:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
3517:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     int chId = (int)pChannel;
3518:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     volatile uint8_t *p1;
3519:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3520:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     p1 = ChModeRegAddr[chId];
3521:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3522:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( p1 !=0 )
3523:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
3524:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( GET_BIT(ChModeRegAddr_Nibble, chId))
3525:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
3526:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if ( GET_H_NIBBLE(*p1) == MTU_TIOR_MODE_RISING_EDGE )
3527:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 SET_H_NIBBLE( *p1, MTU_TIOR_MODE_FALING_EDGE);
3528:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             else
3529:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 SET_H_NIBBLE( *p1, MTU_TIOR_MODE_RISING_EDGE);
3530:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
3531:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
3532:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
3533:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if ( GET_L_NIBBLE(*p1) == MTU_TIOR_MODE_RISING_EDGE )
3534:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 SET_L_NIBBLE( *p1, MTU_TIOR_MODE_FALING_EDGE);
3535:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             else
3536:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 SET_L_NIBBLE( *p1, MTU_TIOR_MODE_RISING_EDGE);
3537:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
3538:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
3539:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
3540:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
3541:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
3542:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
3543:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_ToggleChannelEdgeMode*/
3544:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3545:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
3546:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_SetTimeOn
3547:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: This function defines the match point for the PWM.
3548:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *              When the counter reaches value	the outputs are switched high.
3549:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
3550:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
3551:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
3552:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_SetTimeOn( TMR_CHAddressType chID, Period_ValueType tOn)
3553:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
3554:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     volatile uint16_t* p1;
3555:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
3556:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch( chID )
3557:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
3558:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* MTU0 ---------*/
3559:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA0:
3560:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0_TGRA = tOn;
3561:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3562:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB0:
3563:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0_TGRB = tOn;
3564:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3565:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC0:
3566:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0_TGRC = tOn;
3567:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3568:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD0:
3569:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0_TGRD = tOn;
3570:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3571:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU1 --------*/
3572:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA1:
3573:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1_TGRA = tOn;
3574:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3575:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB1:
3576:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1_TGRB = tOn;
3577:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3578:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* MTU2 -----------------*/
3579:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA2:
3580:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2_TGRA = tOn;
3581:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3582:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB2:
3583:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2_TGRB = tOn;
3584:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3585:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* MTU3 -----------------*/
3586:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA3:
3587:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3_TGRA = tOn;
3588:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3589:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB3:
3590:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3_TGRB = tOn;
3591:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3592:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC3:
3593:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3_TGRC = tOn;
3594:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3595:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD3:
3596:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3_TGRD = tOn;
3597:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3598:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* MTU4 -----------------*/
3599:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA4:
3600:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4_TGRA = tOn;
3601:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3602:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB4:
3603:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4_TGRB = tOn;
3604:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3605:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC4:
3606:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4_TGRC = tOn;
3607:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3608:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD4:
3609:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4_TGRD = tOn;
3610:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3611:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
3612:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
3613:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3614:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
3615:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3616:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     p1 = ChTGRAAddr[chID];
3617:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( p1 != 0)
3618:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
3619:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         *p1 = tOn;
3620:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
3621:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
3622:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
3623:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
3624:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
3625:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
3626:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3627:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void     TMR_GetTimeOn( TMR_CHAddressType chID, Period_ValueType *tOn)
3628:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
3629:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     *tOn = TMR_GetChValue(chID);
3630:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
3631:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3632:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
3633:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_GetChValue
3634:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: This function return the cannel registr register value.
3635:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
3636:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** Period_ValueType TMR_GetChValue( TMR_CHAddressType chID )
3637:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
3638:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     Period_ValueType value = 0;
3639:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     volatile uint16_t* p1;
3640:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
3641:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch( chID )
3642:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
3643:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* MTU0 ---------*/
3644:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA0:
3645:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = MTU0_TGRA;
3646:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3647:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB0:
3648:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = MTU0_TGRB;
3649:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3650:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC0:
3651:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = MTU0_TGRC;
3652:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3653:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD0:
3654:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = MTU0_TGRD;
3655:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3656:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU1 --------*/
3657:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA1:
3658:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = MTU1_TGRA;
3659:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3660:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB1:
3661:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = MTU1_TGRB;
3662:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3663:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* MTU2 -----------------*/
3664:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA2:
3665:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = MTU2_TGRA;
3666:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3667:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB2:
3668:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = MTU2_TGRB;
3669:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3670:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* MTU3 -----------------*/
3671:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA3:
3672:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = MTU3_TGRA;
3673:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3674:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB3:
3675:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = MTU3_TGRB;
3676:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3677:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3678:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC3:
3679:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = MTU3_TGRC;
3680:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3681:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD3:
3682:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = MTU3_TGRD;
3683:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3684:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* MTU4 -----------------*/
3685:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA4:
3686:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = MTU4_TGRA;
3687:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3688:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB4:
3689:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = MTU4_TGRB;
3690:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3691:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC4:
3692:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = MTU4_TGRC;
3693:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3694:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD4:
3695:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = MTU4_TGRD;
3696:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3697:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3698:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
3699:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
3700:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3701:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
3702:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3703:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     p1 = ChTGRAAddr[chID];
3704:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( p1 != 0)
3705:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
3706:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = *p1;
3707:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
3708:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
3709:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
3710:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
3711:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
3712:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return value;
3713:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
3714:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3715:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3716:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
3717:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_SetChannelPulses
3718:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Turns on the PWM mode. Enable the output of PWM on PIN.
3719:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: Enable PWM Mode, inverted not used
3720:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:  Tested
3721:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
3722:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_SetChannelPulses(TMR_CHAddressType chId, uint8_t inverted)
3723:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
3724:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     DISABLE_PORT_REGISTER_WRITE_PROTECTION();
3725:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (chId)
3726:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
3727:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* MTU0 ----------*/
3728:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA0:								/* (MTU0, MTIOC0A),PB3,Pin36*/
3729:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PB3PFS.BYTE = 0x01; 					/* PB3 is select as TMO0 function*/
3730:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3731:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB0:/* (MTUO, MTI0C0B), (P15,Pin19), (PA1,Pin44)*/
3732:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB0_ON_PA1)
3733:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PA1PFS.BYTE = 0x01; 					/* PA1 is select as MTI0C0B*/
3734:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3735:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P15PFS.BYTE = 0x01; 					/* P15 is select as MTI0C0B*/
3736:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3737:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3738:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC0:/*((MTUO, MTIOCOC), P32, Pin12*/
3739:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P32PFS.BYTE = 0x01; 					/* P32 is select as TMO0 function*/
3740:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3741:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD0: /*((MTUO, MTIOCOD),(PA3,Pin43)*/
3742:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PA3PFS.BYTE = 0x01;
3743:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3744:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU1 -----------*/
3745:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA1:/* (MTU1, MTIOC1A, PE4, Pin47)*/
3746:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PE4PFS.BYTE = 0x02; 					/* PE$ is select as TMO0 function*/
3747:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3748:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB1:/* (MTU1, MTIOC1B), (PB5, Pin35)*/
3749:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PB5PFS.BYTE = 0x02;
3750:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3751:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU2 ----------*/
3752:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA2:/*(MTU2, MTIOC2A), (P26,Pin16), (PB5,Pin35)*/
3753:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRA2_ON_PB5)
3754:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PB5PFS.BYTE = 0x01; 					/*PB5 is select as TMO0 function*/
3755:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3756:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P26PFS.BYTE = 0x01; 					/*P26 is select as TMO0 function*/
3757:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3758:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3759:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB2:/*(MTU2, MTIOC2B), (P27,Pin15), (PE5,Pin46)*/
3760:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB2_ON_PE5)
3761:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PE5PFS.BYTE = 0x02; 					/* PE5 is selected as MTIOC2B*/
3762:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3763:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P27PFS.BYTE = 0x01; 					/* P27 is selected as MTIOC2B*/
3764:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3765:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3766:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU3 -----------*/
3767:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA3:/*(MTU3, MTIOC3A), (P14,Pin20),(PC7,Pin27),(P17,Pin17)*/
3768:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRA3_ON_PC7)
3769:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PC7PFS.BYTE = 0x01; 					/* PC7 is select as TMO0 function*/
3770:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRA3_ON_P17)
3771:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P17PFS.BYTE = 0x01; 					/* P17 is select as TMO0 function*/
3772:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3773:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P14PFS.BYTE = 0x01; 					/* P14 is select as TMO0 function*/
3774:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3775:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3776:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB3:/*(MTU3, MTIOC3B), (PC5,Pin29),(P17,Pin17),(PB7,Pin33)*/
3777:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB3_ON_P17)
3778:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P17PFS.BYTE = 0x02; 					/* P17 is selected as MTIOC3B*/
3779:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRB3_ON_PB7)
3780:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PB7PFS.BYTE = 0x01; 					/* PB7 is selected as MTIOC3B*/
3781:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3782:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PC5PFS.BYTE = 0x01; 					/* PC5 is selected as MTIOC3B*/
3783:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3784:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3785:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC3:/* (MTU3, MTIOC3C), (PC6,Pin 28), (P16, Pin18),*/
3786:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRC3_ON_P16)
3787:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P16PFS.BYTE = 0x01; 					/* P16 is select as MTIOC3C function*/
3788:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3789:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PC6PFS.BYTE = 0x01; 					/* PC6 is select as MTIOC3C function*/
3790:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3791:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3792:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD3:/* (MTU3, MTIOC3D), (PB6, Pin34), (P16,Pin 18), (PC4, Pin30)*/
3793:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRD3_ON_P16)
3794:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P16PFS.BYTE = 0x02; 					/* P16 is select as MTIOC3D function*/
3795:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRD3_ON_PC4)
3796:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PC4PFS.BYTE = 0x01; 					/* PC4 is select as MTIOC3D function*/
3797:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3798:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PB6PFS.BYTE = 0x01; 					/* PB6 is selected as MTIOC3D */
3799:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3800:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3801:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU4 -----------*/
3802:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA4:/* (MTU4, MTIOC4A), (PA0,Pin45),(PB3,Pin36),(PE2,Pin49),*/
3803:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRA4_ON_PB3)
3804:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PB3PFS.BYTE = 0x02; 					/* PB3 is select as MTIOC4A function*/
3805:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRA4_ON_PE2)
3806:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PE2PFS.BYTE = 0x01; 					/* PE2 is select as MTIOC4A function*/
3807:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3808:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PA0PFS.BYTE = 0x01; 					/* PA0 is select as MTIOC4A function*/
3809:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3810:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3811:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB4:/* (MTU4, MTIOC4B), (PC2,Pin32),(P30,Pin14),(P54,Pin26),(PE3,Pin48)*/
3812:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB4_ON_P30)
3813:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P30PFS.BYTE = 0x01; 					/* P30 is select as MTIOC4B function*/
3814:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRB4_ON_P54)
3815:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P54PFS.BYTE = 0x01; 					/* P54 is select as MTIOC4B function*/
3816:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRB4_ON_PE3)
3817:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PE3PFS.BYTE = 0x01; 					/* PE3 is select as MTIOC4B function*/
3818:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3819:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PC2PFS.BYTE = 0x01; 					/* PC2 is select as MTIOC4B function*/
3820:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3821:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3822:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC4:/* (MTU4, MTIOC4C), (PB1, Pin37),(PE5,Pin46),(PE1,Pin50)*/
3823:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRC4_ON_PE5)
3824:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PE5PFS.BYTE = 0x01; 					/* PE5 is select as MTIOC4C function*/
3825:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRC4_ON_PE1)
3826:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PE1PFS.BYTE = 0x01; 					/* PE1 is select as MTIOC4C function*/
3827:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3828:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PB1PFS.BYTE = 0x02; 				/* PB1 is select as MTIOC4C function*/
3829:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3830:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3831:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD4:/* (MTU4, MTIOC4D), (P31, Pin13),(P55,Pin25),(PC3,Pin31), (PE4,Pin47)*/
3832:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRD4_ON_P55)
3833:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P55PFS.BYTE = 0x01; 					/* P30 is select as MTIOC4D function*/
3834:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRD4_ON_PC3)
3835:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PC3PFS.BYTE = 0x01; 					/* P54 is select as MTIOC4D function*/
3836:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRD4_ON_PE4)
3837:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PE4PFS.BYTE = 0x01; 					/* PE3 is select as MTIOC4D function*/
3838:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3839:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P31PFS.BYTE = 0x02; 					/* P31 is select as MTIOC4D*/
3840:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3841:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3842:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
3843:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(0);
3844:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3845:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end switch*/
3846:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ENABLE_PORT_REGISTER_WRITE_PROTECTION();
3847:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_SetChannelPulses*/
3848:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3849:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
3850:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** * Function: Clear Channel Pulse
3851:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** * Description: Set the initial state of PWM Pin
3852:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** *
3853:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** */
3854:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_ClearChannelPulses(TMR_CHAddressType chId)
3855:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
3856:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     DISABLE_PORT_REGISTER_WRITE_PROTECTION();
3857:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (chId)
3858:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
3859:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* MTU0 ----------*/
3860:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA0:	/* (MTU0, MTIOC0A),PB3,Pin36*/
3861:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PB3PFS.BYTE = 0x00; /* PB3 is select as TMO0 function*/
3862:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3863:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB0:/* (MTUO, MTI0C0B), (P15,Pin19), (PA1,Pin44)*/
3864:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB0_ON_PA1)
3865:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PA1PFS.BYTE = 0x00; 					/* PA1 is select as MTI0C0B*/
3866:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3867:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P15PFS.BYTE = 0x00; 					/* P15 is select as MTI0C0B*/
3868:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3869:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3870:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC0:/*((MTUO, MTIOCOC), P32, Pin12*/
3871:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P32PFS.BYTE = 0x00; 					/* P32 is select as MTIOCOC function*/
3872:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3873:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD0: /*((MTUO, MTIOCOD),(PA3,Pin43)*/
3874:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PA3PFS.BYTE = 0x00;
3875:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3876:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU1 -----------*/
3877:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA1:/* (MTU1, MTIOC1A, PE4, Pin47)*/
3878:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PE4PFS.BYTE = 0x00; 					/* PE4 is select as MTIOC1A function*/
3879:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3880:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB1:/* (MTU1, MTIOC1B), (PB5, Pin35)*/
3881:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PB5PFS.BYTE = 0x00;
3882:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3883:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU2 ----------*/
3884:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA2:/*(MTU2, MTIOC2A), (P26,Pin16), (PB5,Pin35)*/
3885:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRA2_ON_PB5)
3886:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PB5PFS.BYTE = 0x00; 					/*PB5 is select as MTIOC2A function*/
3887:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3888:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P26PFS.BYTE = 0x00; 					/* P32 is select as MTIOC2A function*/
3889:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3890:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3891:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB2:/*(MTU2, MTIOC2B), (P27,Pin15), (PE5,Pin46)*/
3892:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB2_ON_PE5)
3893:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PE5PFS.BYTE = 0x00; 					/* PE5 is selected as MTIOC2B*/
3894:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3895:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P27PFS.BYTE = 0x00; 					/* P27 is selected as MTIOC2B*/
3896:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3897:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3898:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU3 -----------*/
3899:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA3:/*(MTU3, MTIOC3A), (P14,Pin20),(PC7,Pin27),(P17,Pin17)*/
3900:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRA3_ON_PC7)
3901:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PC7PFS.BYTE = 0x00; 					/* PC7 is select as MTIOC3A function*/
3902:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRA3_ON_P17)
3903:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P17PFS.BYTE = 0x00; 					/* P17 is select as MTIOC3A function*/
3904:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3905:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P14PFS.BYTE = 0x00; 					/* P14 is select as MTIOC3A function*/
3906:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3907:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3908:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB3:/*(MTU3, MTIOC3B), (PC5,Pin29),(P17,Pin17),(PB7,Pin33)*/
3909:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB3_ON_P17)
3910:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P17PFS.BYTE = 0x00; 					/* P17 is selected as MTIOC3B*/
3911:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRB3_ON_PB7)
3912:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PB7PFS.BYTE = 0x00; 					/* PB7 is selected as MTIOC3B*/
3913:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3914:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PC5PFS.BYTE = 0x00; 					/* PC5 is selected as MTIOC3B*/
3915:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3916:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3917:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC3:/* (MTU3, MTIOC3C), (PC6,Pin 28), (P16, Pin18),*/
3918:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRC3_ON_P16)
3919:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P16PFS.BYTE = 0x00; 					/* P16 is select as MTIOC3C function*/
3920:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3921:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PC6PFS.BYTE = 0x00; 					/* PC6 is select as MTIOC3C function*/
3922:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3923:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3924:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD3:/* (MTU3, MTIOC3D), (PB6, Pin34),P16,Pin 18), (PC4, Pin30)*/
3925:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRD3_ON_P16)
3926:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P16PFS.BYTE = 0x00; 					/* P16 is select as MTIOC3D function*/
3927:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRD3_ON_PC4)
3928:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PC4PFS.BYTE = 0x00; 					/* PC4 is select as MTIOC3D function*/
3929:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3930:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PB6PFS.BYTE = 0x00; 					/* PC6 is selected as MTIOC3D*/
3931:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3932:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3933:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU4 -----------*/
3934:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA4:/* (MTU4, MTIOC4A), (PA0,Pin45),(PB3,Pin36),(PE2,Pin49),*/
3935:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRA4_ON_PB3)
3936:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PB3PFS.BYTE = 0x00; 					/* PB3 is select as MTIOC4A function*/
3937:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRA4_ON_PE2)
3938:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PE2PFS.BYTE = 0x00; 					/* PE2 is select as MTIOC4A function*/
3939:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3940:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PA0PFS.BYTE = 0x00; 					/* PA0 is select as MTIOC4A function*/
3941:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3942:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3943:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB4:/* (MTU4, MTIOC4B), (PC2,Pin32),(P30,Pin14),(P54,Pin26),(PE3,Pin48)*/
3944:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB4_ON_P30)
3945:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P30PFS.BYTE = 0x00; 					/* P30 is select as MTIOC4B function*/
3946:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRB4_ON_P54)
3947:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P54PFS.BYTE = 0x00; 					/* P54 is select as MTIOC4B function*/
3948:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRB4_ON_PE3)
3949:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PE3PFS.BYTE = 0x00; 					/* PE3 is select as MTIOC4B function*/
3950:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3951:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PC2PFS.BYTE = 0x00; 				/* PA0 is select as MTIOC4B function*/
3952:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3953:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3954:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC4:/* (MTU4, MTIOC4C), (PB1, Pin37),(PE5,Pin46),(PE1,Pin50)*/
3955:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRC4_ON_PE5)
3956:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PE5PFS.BYTE = 0x00; 					/* PE5 is select as MTIOC4C function*/
3957:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRC4_ON_PE1)
3958:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PE1PFS.BYTE = 0x00; 					/* PE1 is select as MTIOC4C function*/
3959:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3960:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PB1PFS.BYTE = 0x00; 				/* PB1 is select as MTIOC4C function*/
3961:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3962:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3963:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD4:/* (MTU4, MTIOC4D), (P31, Pin13),(P55,Pin25),(PC3,Pin31), (PE4,Pin47)*/
3964:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRD4_ON_P55)
3965:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P55PFS.BYTE = 0x00; 					/* P30 is select as MTIOC4D function*/
3966:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRD4_ON_PC3)
3967:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PC3PFS.BYTE = 0x00; 					/* P54 is select as MTIOC4D function*/
3968:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRD4_ON_PE4)
3969:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PE4PFS.BYTE = 0x00; 					/* PE3 is select as MTIOC4D function*/
3970:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
3971:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P31PFS.BYTE = 0x00; 				/* P31 is select as MTIOC4D*/
3972:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
3973:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3974:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
3975:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(0);
3976:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3977:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end switch*/
3978:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ENABLE_PORT_REGISTER_WRITE_PROTECTION();
3979:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_SetChannelPulses*/
3980:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3981:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
3982:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_SetChannelEdgeMode
3983:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: This function configures the channel as InputCapture
3984:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
3985:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Macro:
3986:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
3987:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_SetChannelEdgeMode( TMR_CHAddressType chId, uint8_t mode, bool_t inversion)
3988:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
3989:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t *p1;
3990:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
3991:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* mapping del mode*/
3992:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch( mode )
3993:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
3994:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case TMR_CH_IC_POS_EDGE:
3995:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( inversion ) mode=MTU_TIOR_MODE_FALING_EDGE;
3996:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else		mode=MTU_TIOR_MODE_RISING_EDGE;
3997:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
3998:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case TMR_CH_IC_NEG_EDGE:
3999:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( inversion ) mode=MTU_TIOR_MODE_RISING_EDGE;
4000:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else 		mode=MTU_TIOR_MODE_FALING_EDGE;
4001:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4002:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case TMR_CH_IC_BOTH_EDGE:
4003:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode=MTU_TIOR_MODE_BOTH_EDGE;
4004:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4005:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
4006:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4007:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
4008:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (chId)
4009:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4010:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU0*/
4011:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA0:
4012:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE(MTU0.TIORH.BYTE, mode);	/* IOA*/
4013:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4014:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB0:
4015:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE(MTU0.TIORH.BYTE, mode);	/* IOB*/
4016:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4017:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC0:
4018:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE(MTU0.TIORL.BYTE, mode); 	/* IOC*/
4019:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4020:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD0:
4021:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE(MTU0.TIORL.BYTE, mode);	/* IOD*/
4022:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4023:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU1*/
4024:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA1:
4025:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE(MTU1.TIOR.BYTE, mode); 	/* IOA*/
4026:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4027:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB1:
4028:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE(MTU1.TIOR.BYTE, mode); 	/* IOB*/
4029:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4030:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU2*/
4031:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA2:
4032:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE(MTU2.TIOR.BYTE, mode); 	/* IOA*/
4033:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4034:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB2:
4035:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE(MTU2.TIOR.BYTE, mode); 	/* IOB*/
4036:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4037:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU3*/
4038:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA3:
4039:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE(MTU3.TIORH.BYTE, mode); 	/* IOA*/
4040:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4041:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB3:
4042:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE(MTU3.TIORH.BYTE, mode); 	/* IOB*/
4043:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4044:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC3:
4045:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE(MTU3.TIORL.BYTE, mode); 	/* IOC*/
4046:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4047:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD3:
4048:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE(MTU3.TIORL.BYTE, mode); 	/* IOD*/
4049:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4050:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU4*/
4051:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA4:
4052:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE(MTU4.TIORH.BYTE, mode); 	/* IOA*/
4053:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4054:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB4:
4055:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE(MTU4.TIORH.BYTE, mode); 	/* IOB*/
4056:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4057:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC4:
4058:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE(MTU4.TIORL.BYTE, mode); 	/* IOC*/
4059:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4060:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD4:
4061:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE(MTU4.TIORL.BYTE, mode); 	/* IOD*/
4062:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4063:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
4064:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
4065:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4066:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
4067:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
4068:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     p1 = ChModeRegAddr[chId];
4069:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( p1 !=0 )
4070:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4071:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( GET_BIT(ChModeRegAddr_Nibble, chId))
4072:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
4073:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_H_NIBBLE(*p1, mode);
4074:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
4075:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
4076:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
4077:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_L_NIBBLE(*p1, mode);
4078:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
4079:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
4080:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
4081:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4082:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
4083:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
4084:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_SetChannelEdgeMode*/
4085:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4086:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4087:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
4088:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_GetValue
4089:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: This function return the timer counter value
4090:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
4091:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
4092:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
4093:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** Period_ValueType TMR_GetValue(TMR_CNTAddressType tmrID)
4094:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
4095:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RegType tcnt_value = 0;
4096:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4097:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch( tmrID )
4098:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4099:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU0:
4100:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         tcnt_value = MTU0.TCNT;
4101:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4102:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU1:
4103:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         tcnt_value = MTU1.TCNT;
4104:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4105:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU2:
4106:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         tcnt_value = MTU2.TCNT;
4107:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4108:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU3:
4109:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         tcnt_value = MTU3.TCNT;
4110:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4111:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU4:
4112:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         tcnt_value = MTU4.TCNT;
4113:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4114:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
4115:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
4116:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4117:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end switch*/
4118:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4119:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return (tcnt_value);
4120:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_GETValue*/
4121:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4122:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
4123:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_EnableCHI
4124:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Enables the interrupt for the channel, output compare/input compare
4125:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: What interrupt enable? Check with indesit...
4126:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: To implement.
4127:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
4128:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_EnableCHI( TMR_CHAddressType chId)
4129:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
4130:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (chId)
4131:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4132:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTUO*/
4133:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA0:
4134:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU0_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
4135:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TIER.BYTE |= (TGIA_INTERRUPT_ENABLE);
4136:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU0_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT2_MASK;
4137:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4138:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB0:
4139:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU0_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
4140:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TIER.BYTE |= (TGIB_INTERRUPT_ENABLE);
4141:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU0_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT3_MASK;
4142:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4143:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC0:
4144:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU0_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
4145:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TIER.BYTE |= (TGIC_INTERRUPT_ENABLE);
4146:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU0_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT4_MASK;
4147:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4148:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD0:
4149:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU0_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
4150:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TIER.BYTE |= (TGID_INTERRUPT_ENABLE);
4151:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU0_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT5_MASK;
4152:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4153:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU1*/
4154:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA1:
4155:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU1_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
4156:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1.TIER.BYTE |= (TGIA_INTERRUPT_ENABLE);
4157:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU1_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT1_MASK;
4158:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4159:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB1:
4160:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU1_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
4161:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1.TIER.BYTE |= (TGIB_INTERRUPT_ENABLE);
4162:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU1_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT2_MASK;
4163:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4164:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU2*/
4165:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA2:
4166:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU2_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
4167:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2.TIER.BYTE |= (TGIA_INTERRUPT_ENABLE);
4168:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU2_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT5_MASK;
4169:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4170:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB2:
4171:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU2_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
4172:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2.TIER.BYTE |= (TGIB_INTERRUPT_ENABLE);
4173:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU2_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT6_MASK;
4174:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4175:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU3*/
4176:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA3:
4177:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU3_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
4178:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TIER.BYTE |= (TGIA_INTERRUPT_ENABLE);
4179:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT1_MASK;
4180:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4181:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB3:
4182:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU3_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
4183:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TIER.BYTE |= (TGIB_INTERRUPT_ENABLE);
4184:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT2_MASK;
4185:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4186:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC3:
4187:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU3_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
4188:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TIER.BYTE |= (TGIC_INTERRUPT_ENABLE);
4189:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT3_MASK;
4190:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4191:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD3:
4192:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU3_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
4193:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TIER.BYTE |= (TGID_INTERRUPT_ENABLE);
4194:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT4_MASK;
4195:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4196:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU4*/
4197:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA4:
4198:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU4_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
4199:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TIER.BYTE |= (TGIA_INTERRUPT_ENABLE);
4200:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU4_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT6_MASK;
4201:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4202:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB4:
4203:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU4_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
4204:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TIER.BYTE |= (TGIB_INTERRUPT_ENABLE);
4205:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU4_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT7_MASK;
4206:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4207:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC4:
4208:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU4_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
4209:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TIER.BYTE |= (TGIC_INTERRUPT_ENABLE);
4210:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU4_INT_ENABLE_REGISTER +1].BYTE |= _HAL_BIT0_MASK;
4211:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4212:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD4:
4213:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU4_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
4214:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TIER.BYTE |= (TGID_INTERRUPT_ENABLE);
4215:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU4_INT_ENABLE_REGISTER +1].BYTE |= _HAL_BIT1_MASK;
4216:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4217:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
4218:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
4219:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4220:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end switch icu_id*/
4221:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end TMR_EnableCHI*/
4222:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4223:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
4224:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_DisableCHI
4225:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Disable the interrupt for the channel
4226:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
4227:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
4228:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 	- AE 25/05/2012: Completed with all CHI
4229:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
4230:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_DisableCHI( TMR_CHAddressType chId)
4231:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
4232:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (chId)
4233:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4234:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTUO*/
4235:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA0:
4236:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU0_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT2_MASK;
4237:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TIER.BYTE &= (~TGIA_INTERRUPT_ENABLE);
4238:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4239:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB0:
4240:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU0_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT3_MASK;
4241:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TIER.BYTE &= ~(TGIB_INTERRUPT_ENABLE);
4242:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4243:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC0:
4244:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU0_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT4_MASK;
4245:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TIER.BYTE &= (~TGIC_INTERRUPT_ENABLE);
4246:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4247:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD0:
4248:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU0_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT5_MASK;
4249:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TIER.BYTE &= ~(TGID_INTERRUPT_ENABLE);
4250:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4251:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU1*/
4252:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA1:
4253:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU1_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT1_MASK;
4254:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1.TIER.BYTE &= ~(TGIA_INTERRUPT_ENABLE);
4255:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4256:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB1:
4257:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU1_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT2_MASK;
4258:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1.TIER.BYTE &= ~(TGIB_INTERRUPT_ENABLE);
4259:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4260:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU2*/
4261:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA2:/*(MTU2, MTIOC2A), P26, Pin16*/
4262:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU2_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT5_MASK;
4263:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2.TIER.BYTE &= (~TGIA_INTERRUPT_ENABLE);
4264:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4265:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB2:
4266:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU2_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT6_MASK;
4267:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2.TIER.BYTE &= (~TGIB_INTERRUPT_ENABLE);
4268:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4269:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU3*/
4270:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA3:/*(MTU3, MTIOC3A), P14, Pin20*/
4271:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT1_MASK;
4272:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TIER.BYTE &= (~TGIA_INTERRUPT_ENABLE);
4273:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4274:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB3:
4275:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT2_MASK;
4276:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TIER.BYTE &= ~(TGIB_INTERRUPT_ENABLE);
4277:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4278:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC3:/* (MTU3, MTIOC3C), PC6, Pin 28*/
4279:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT3_MASK;
4280:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TIER.BYTE &= (~TGIC_INTERRUPT_ENABLE);
4281:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4282:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD3:
4283:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT4_MASK;
4284:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TIER.BYTE &= ~(TGID_INTERRUPT_ENABLE);
4285:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4286:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU4*/
4287:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA4:/* (MTU4, MTIOC4A), PA0, Pin45*/
4288:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU4_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT6_MASK;
4289:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TIER.BYTE &= ~(TGIA_INTERRUPT_ENABLE);
4290:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4291:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB4:
4292:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU4_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT7_MASK;
4293:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TIER.BYTE &= ~(TGIB_INTERRUPT_ENABLE);
4294:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4295:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC4:/* (MTU4, MTIOC4C), PB1, Pin37*/
4296:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU4_INT_ENABLE_REGISTER +1].BYTE &= ~_HAL_BIT0_MASK;
4297:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TIER.BYTE &= (~TGIC_INTERRUPT_ENABLE);
4298:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4299:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD4:
4300:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU4_INT_ENABLE_REGISTER +1].BYTE &= ~_HAL_BIT1_MASK;
4301:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TIER.BYTE &= ~(TGID_INTERRUPT_ENABLE);
4302:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4303:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
4304:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
4305:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4306:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end switch*/
4307:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4308:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     TMR_ClearCHF(chId);
4309:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4310:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if ( (ICU.IER[MTU0_INT_ENABLE_REGISTER].BYTE & (_HAL_BIT2_MASK | _HAL_BIT3_MASK | _HAL_BIT4_MAS
4311:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4312:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU0_BASE_INT_VECTOR].BYTE = 0x00;
4313:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
4314:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4315:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if ( (ICU.IER[MTU1_INT_ENABLE_REGISTER].BYTE & (_HAL_BIT1_MASK | _HAL_BIT2_MASK)) == 0)
4316:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4317:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU1_BASE_INT_VECTOR].BYTE = 0x00;
4318:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
4319:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4320:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if ( (ICU.IER[MTU2_INT_ENABLE_REGISTER].BYTE & (_HAL_BIT5_MASK | _HAL_BIT6_MASK)) == 0)
4321:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4322:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU2_BASE_INT_VECTOR].BYTE = 0x00;
4323:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
4324:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4325:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if ( (ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE & (_HAL_BIT1_MASK | _HAL_BIT2_MASK | _HAL_BIT3_MAS
4326:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4327:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU3_BASE_INT_VECTOR].BYTE = 0x00;
4328:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
4329:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4330:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if ( ((ICU.IER[MTU4_INT_ENABLE_REGISTER].BYTE & (_HAL_BIT6_MASK | _HAL_BIT7_MASK)) == 0) &&
4331:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     		( (ICU.IER[MTU4_INT_ENABLE_REGISTER+1].BYTE & (_HAL_BIT0_MASK | _HAL_BIT1_MASK)) == 0) )
4332:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4333:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU4_BASE_INT_VECTOR].BYTE = 0x00;
4334:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
4335:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4336:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_DisableCHI*/
4337:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4338:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
4339:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_ReadCHF
4340:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Deve ritornate true se c'è una richiesta di interrupt pendente per il canale indic
4341:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
4342:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
4343:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
4344:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t TMR_ReadCHF( TMR_CHAddressType chID)
4345:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
4346:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     bool_t retVal=FALSE;
4347:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch( chID )
4348:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4349:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTUO*/
4350:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA0:
4351:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU0_BASE_INT_VECTOR + TGIA0_INT_SHIF_VECTOR].BYTE);
4352:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4353:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB0:
4354:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU0_BASE_INT_VECTOR + TGIB0_INT_SHIF_VECTOR].BYTE);
4355:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4356:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC0:
4357:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU0_BASE_INT_VECTOR + TGIC0_INT_SHIF_VECTOR].BYTE);
4358:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4359:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD0:
4360:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU0_BASE_INT_VECTOR + TGID0_INT_SHIF_VECTOR].BYTE);
4361:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4362:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU1*/
4363:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA1:
4364:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU1_BASE_INT_VECTOR + TGIA1_INT_SHIF_VECTOR].BYTE);
4365:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4366:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB1:
4367:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU1_BASE_INT_VECTOR + TGIB1_INT_SHIF_VECTOR].BYTE);
4368:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4369:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU2*/
4370:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA2:/*(MTU2, MTIOC2A), P26, Pin16*/
4371:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU2_BASE_INT_VECTOR + TGIA2_INT_SHIF_VECTOR].BYTE);
4372:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4373:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB2:
4374:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU2_BASE_INT_VECTOR + TGIB2_INT_SHIF_VECTOR].BYTE);
4375:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4376:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU3*/
4377:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA3:/*(MTU3, MTIOC3A), P14, Pin20*/
4378:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU3_BASE_INT_VECTOR + TGIA3_INT_SHIF_VECTOR].BYTE);
4379:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4380:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB3:
4381:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU3_BASE_INT_VECTOR + TGIB3_INT_SHIF_VECTOR].BYTE);
4382:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4383:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC3:/* (MTU3, MTIOC3C), PC6, Pin 28*/
4384:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU3_BASE_INT_VECTOR + TGIC3_INT_SHIF_VECTOR].BYTE);
4385:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4386:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD3:
4387:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU3_BASE_INT_VECTOR + TGID3_INT_SHIF_VECTOR].BYTE);
4388:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4389:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU4*/
4390:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA4:/* (MTU4, MTIOC4A), PA0, Pin45*/
4391:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU4_BASE_INT_VECTOR + TGIA4_INT_SHIF_VECTOR].BYTE);
4392:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4393:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB4:
4394:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU4_BASE_INT_VECTOR + TGIB4_INT_SHIF_VECTOR].BYTE);
4395:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4396:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC4:/* (MTU4, MTIOC4C), PB1, Pin37*/
4397:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU4_BASE_INT_VECTOR + TGIC4_INT_SHIF_VECTOR].BYTE);
4398:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4399:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD4:
4400:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU4_BASE_INT_VECTOR + TGID4_INT_SHIF_VECTOR].BYTE);
4401:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4402:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
4403:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
4404:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4405:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
4406:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return retVal;
4407:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end TMR_ReadCHF*/
4408:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4409:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
4410:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_ClearCHF
4411:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: This function clears the channel interrupt flag both capture and match mode
4412:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: Used in ICU (input capture Unit)
4413:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Only TGRA interrupt is enable check what interrupt enable
4414:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
4415:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_ClearCHF( TMR_CHAddressType channel)
4416:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
4417:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( channel < HAL_CH_MAX )
4418:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4419:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IR[MTU0_BASE_INT_VECTOR + channel].BYTE = 0x00; /* Clear interrupt flag*/
4420:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
4421:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
4422:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4423:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
4424:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
4425:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4426:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_ClearCHF*/
4427:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4428:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
4429:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_SetThreshold1
4430:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: This function programs the match value
4431:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: Threshold of Counter
4432:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: To Test!
4433:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
4434:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*MS Ottimizzazione: la funzione è uguale a TMR_SetTimeOn */
4435:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_SetThreshold1( TMR_CHAddressType chId, uint16_t value)
4436:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
4437:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     TMR_SetTimeOn(chId, value);
4438:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
4439:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
4440:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_SetThreshold1( TMR_CHAddressType chId, uint16_t value)
4441:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
4442:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch( chId )
4443:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4444:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA0:
4445:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0_TGRA = value;
4446:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4447:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB0:
4448:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0_TGRB = value;
4449:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4450:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC0:
4451:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0_TGRC = value;
4452:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4453:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD0:
4454:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0_TGRD = value;
4455:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4456:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* MTU1 ------------------*/
4457:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA1:
4458:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1_TGRA = value;
4459:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4460:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB1:
4461:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1_TGRB = value;
4462:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4463:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* MTU2 ------------------*/
4464:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA2:
4465:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2_TGRA = value;
4466:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4467:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB2:
4468:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2_TGRB = value;
4469:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4470:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* MTU3 ------------------*/
4471:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA3:
4472:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3_TGRA = value;
4473:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4474:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB3:
4475:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3_TGRB = value;
4476:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4477:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC3:
4478:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3_TGRC = value;
4479:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4480:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD3:
4481:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3_TGRD = value;
4482:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4483:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /* MTU4 ------------------*/
4484:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA4:
4485:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4_TGRA = value;
4486:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4487:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB4:
4488:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4_TGRB = value;
4489:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4490:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC4:
4491:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4_TGRC = value;
4492:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4493:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD4:
4494:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4_TGRD = value;
4495:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4496:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4497:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
4498:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
4499:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4500:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
4501:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end TMR_SetThreshold1*/
4502:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
4503:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
4504:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_SetModuloDfltValue
4505:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Set Timer Counter Modulo Reg. to the default value
4506:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: Check TGRF if never used!
4507:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Test me!
4508:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
4509:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_SetModuloDfltValue(TMR_CNTAddressType tmrId, uint8_t clrSrcId)
4510:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
4511:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     TMR_SetModulo(tmrId, 0xFFFF, clrSrcId);
4512:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end TMR_SetModuloDfltValue*/
4513:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4514:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
4515:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: Period_ValueType
4516:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
4517:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: tmr_ptr non usato
4518:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
4519:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
4520:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** Period_ValueType TMR_GetModulo(TMR_CNTAddressType tmdID, uint8_t channel)
4521:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
4522:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint16_t retValue = 0;
4523:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t clrValue = GetInternalHWClearSourceValue(tmdID);
4524:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4525:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch( tmdID )
4526:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4527:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU0:
4528:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(clrValue)
4529:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
4530:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_RESET_SOURCE_TGRA:
4531:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU0_TGRA;
4532:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4533:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_RESET_SOURCE_TGRB:
4534:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU0_TGRB;
4535:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4536:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_RESET_SOURCE_TGRC:
4537:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU0_TGRC;
4538:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4539:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_RESET_SOURCE_TGRD:
4540:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU0_TGRD;
4541:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4542:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_RESET_SOURCE_OVERFLOW:
4543:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = 0xFFFF;
4544:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4545:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         default:
4546:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             HAL_ErrorHandler(1);
4547:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4548:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
4549:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4550:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU1:
4551:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(clrValue)
4552:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
4553:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_RESET_SOURCE_TGRA:
4554:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU1_TGRA;
4555:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4556:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_RESET_SOURCE_TGRB:
4557:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU1_TGRB;
4558:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4559:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_RESET_SOURCE_OVERFLOW:
4560:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = 0xFFFF;
4561:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4562:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         default:
4563:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             HAL_ErrorHandler(1);
4564:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4565:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
4566:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4567:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU2:
4568:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(clrValue)
4569:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
4570:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_RESET_SOURCE_TGRA:
4571:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU2_TGRA;
4572:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4573:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_RESET_SOURCE_TGRB:
4574:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU2_TGRB;
4575:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4576:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_RESET_SOURCE_OVERFLOW:
4577:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = 0xFFFF;
4578:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4579:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         default:
4580:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             HAL_ErrorHandler(1);
4581:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4582:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
4583:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4584:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU3:
4585:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(clrValue)
4586:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
4587:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_RESET_SOURCE_TGRA:
4588:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU3_TGRA;
4589:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4590:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_RESET_SOURCE_TGRB:
4591:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU3_TGRB;
4592:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4593:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_RESET_SOURCE_TGRC:
4594:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU3_TGRC;
4595:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4596:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_RESET_SOURCE_TGRD:
4597:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU3_TGRD;
4598:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4599:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_RESET_SOURCE_OVERFLOW:
4600:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = 0xFFFF;
4601:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4602:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         default:
4603:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             HAL_ErrorHandler(1);
4604:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4605:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
4606:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4607:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU4:
4608:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(clrValue)
4609:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
4610:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_RESET_SOURCE_TGRA:
4611:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU4_TGRA;
4612:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4613:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_RESET_SOURCE_TGRB:
4614:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU4_TGRB;
4615:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4616:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_RESET_SOURCE_TGRC:
4617:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU4_TGRC;
4618:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4619:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_RESET_SOURCE_TGRD:
4620:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU4_TGRD;
4621:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4622:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case TCNT_RESET_SOURCE_OVERFLOW:
4623:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = 0xFFFF;
4624:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4625:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         default:
4626:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             HAL_ErrorHandler(1);
4627:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
4628:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
4629:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4630:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
4631:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
4632:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4633:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end switch*/
4634:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4635:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return retValue;
4636:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end Period_ValueType*/
4637:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4638:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
4639:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_GetChannelEdgeMode
4640:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
4641:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: Check the res value
4642:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Test me!
4643:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
4644:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint8_t TMR_GetChannelEdgeMode( TMR_CHAddressType chId)
4645:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
4646:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t res = 0; /* unknown */
4647:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t mode = 0;
4648:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     volatile uint8_t* p1;
4649:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
4650:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (chId)
4651:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4652:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU0*/
4653:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA0:
4654:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_L_NIBBLE(MTU0.TIORH.BYTE); /* MTU0 IOA*/
4655:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4656:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB0:
4657:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_H_NIBBLE(MTU0.TIORH.BYTE); /* MTU0 IOB*/
4658:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4659:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC0:
4660:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_L_NIBBLE(MTU0.TIORL.BYTE); /* MTU0 IOC*/
4661:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4662:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD0:
4663:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_H_NIBBLE(MTU0.TIORL.BYTE); /* MTU0 IOC*/
4664:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4665:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU1*/
4666:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA1:
4667:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_L_NIBBLE(MTU1.TIOR.BYTE); /* MTU1 IOA*/
4668:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4669:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB1:
4670:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_H_NIBBLE(MTU1.TIOR.BYTE); /* MTU1 IOB*/
4671:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4672:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU2*/
4673:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA2:
4674:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_L_NIBBLE(MTU2.TIOR.BYTE); /* MTU2 IOA*/
4675:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4676:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB2:
4677:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_H_NIBBLE(MTU2.TIOR.BYTE); /* MTU2 IOB*/
4678:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4679:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU3*/
4680:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA3:
4681:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_L_NIBBLE(MTU3.TIORH.BYTE); /* MTU3 IOA*/
4682:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4683:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB3:
4684:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_H_NIBBLE(MTU3.TIORH.BYTE); /* MTU3 IOB*/
4685:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4686:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC3:
4687:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_L_NIBBLE(MTU3.TIORL.BYTE); /* MTU3 IOC*/
4688:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4689:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD3:
4690:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_H_NIBBLE(MTU3.TIORL.BYTE); /* MTU3 IOD*/
4691:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4692:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU4*/
4693:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA4:
4694:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_L_NIBBLE(MTU4.TIORH.BYTE); /* MTU4 IOA*/
4695:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4696:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB4:
4697:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_H_NIBBLE(MTU4.TIORH.BYTE); /* MTU4 IOB*/
4698:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4699:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC4:
4700:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_L_NIBBLE(MTU4.TIORL.BYTE); /* MTU4 C*/
4701:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4702:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD4:
4703:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = GET_H_NIBBLE(MTU4.TIORL.BYTE); /* MTU4 IOD*/
4704:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4705:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
4706:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
4707:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end switch*/
4708:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
4709:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*MS ottimizzazione codice */
4710:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     p1 = ChModeRegAddr[chId];
4711:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(p1 != 0)
4712:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4713:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( GET_BIT(ChModeRegAddr_Nibble, chId))
4714:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
4715:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             mode = GET_H_NIBBLE(*p1);
4716:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
4717:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
4718:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
4719:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             mode = GET_L_NIBBLE(*p1);
4720:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
4721:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
4722:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
4723:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4724:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
4725:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
4726:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4727:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4728:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch( mode )
4729:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4730:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case MTU_TIOR_MODE_RISING_EDGE:
4731:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         res = 1;/*ICU_EDGE_MODE_RISING;*/
4732:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4733:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case MTU_TIOR_MODE_FALING_EDGE:
4734:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         res = 2;/*ICU_EDGE_MODE_FALING;*/
4735:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4736:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case MTU_TIOR_MODE_BOTH_EDGE:
4737:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         res = 3;/*ICU_EDGE_MODE_BOTH;*/
4738:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4739:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
4740:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return res;
4741:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMT_GetChannelEdgeMode*/
4742:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4743:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
4744:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Macro: TMR_SetCounterDfltValue
4745:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
4746:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
4747:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
4748:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
4749:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_SetCounterDfltValue(TMR_CNTAddressType tmrID)
4750:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
4751:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch( tmrID )
4752:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4753:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU0:
4754:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TCNT = 0x00;
4755:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4756:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU1:
4757:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1.TCNT = 0x00;
4758:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4759:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU2:
4760:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2.TCNT = 0x00;
4761:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4762:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU3:
4763:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TCNT = 0x00;
4764:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4765:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU4:
4766:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TCNT = 0x00;
4767:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4768:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
4769:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
4770:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4771:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
4772:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_SetCounterDfltValue*/
4773:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4774:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
4775:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_GetCounter
4776:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: return the counter value
4777:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
4778:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Test me!
4779:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
4780:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4781:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** IO_HwTimerType TMR_GetCounter( TMR_CNTAddressType tmrId)
4782:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
4783:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_HwTimerType return_val = 0;
4784:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4785:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch( tmrId )
4786:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4787:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU0:
4788:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return_val = MTU0.TCNT;
4789:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4790:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU1:
4791:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return_val = MTU1.TCNT;
4792:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4793:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU2:
4794:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return_val = MTU2.TCNT;
4795:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4796:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU3:
4797:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return_val = MTU3.TCNT;
4798:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4799:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU4:
4800:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return_val = MTU4.TCNT;
4801:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4802:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
4803:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
4804:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4805:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
4806:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return (return_val);
4807:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_GetCounter*/
4808:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4809:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
4810:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_SetCounter
4811:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Set the timer counter register value
4812:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
4813:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Test me!
4814:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
4815:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_SetCounter( TMR_CNTAddressType tmrId, uint16_t value)
4816:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
4817:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(tmrId)
4818:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4819:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU0:
4820:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TCNT = value;
4821:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4822:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU1:
4823:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1.TCNT = value;
4824:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4825:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU2:
4826:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2.TCNT = value;
4827:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4828:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU3:
4829:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TCNT = value;
4830:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4831:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU4:
4832:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TCNT = value;
4833:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4834:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
4835:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
4836:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4837:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
4838:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_SetCounter*/
4839:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4840:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
4841:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: OutputCompareModeUnsupported
4842:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: This function checkes if Output Compare Mode is supported
4843:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
4844:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
4845:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
4846:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t OutputCompareModeUnsupported(uint8_t mode, bool_t inversion)
4847:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
4848:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( mode == TMR_CH_OC_PIN_HIGH ||
4849:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             mode == TMR_CH_OC_PIN_LOW  ||
4850:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             mode == TMR_CH_OC_TOGGLE_T1 ||
4851:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             mode == TMR_CH_OC_OFF )
4852:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return 0;
4853:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4854:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 1;
4855:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* OutputCompareModeUnsupported*/
4856:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4857:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
4858:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_SetClockSource
4859:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:  Start the timer, enable on & reset off
4860:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Complete me and Test me!
4861:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
4862:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_SetClockSource(TMR_CNTAddressType tmrID, uint8_t source)
4863:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
4864:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( tmrID >= HAL_NUM_HW_CNTR )
4865:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4866:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
4867:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
4868:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
4869:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4870:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( tmrID > 2)
4871:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
4872:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU.TSTR.BYTE |= (1 << (tmrID+3));
4873:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
4874:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
4875:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
4876:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU.TSTR.BYTE |= (1 << tmrID);
4877:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
4878:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4879:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
4880:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* TMR_SetClockSource*/
4881:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4882:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4883:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
4884:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_SetClockSource
4885:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:  Start the timer, enable on & reset off
4886:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Complete me and Test me!
4887:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
4888:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** static uint32_t TMR_GetMultiBmp(uint32_t uBmp)
4889:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
   9                             		.loc 1 4889 0
  10                             	.LVL0:
  11 0000 7E A7                   		push.l	r7
  12                             	.LCFI0:
  13                             	.LVL1:
4890:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	uint32_t i=0, msk =0, bmp=0, tmp=0;
  14                             		.loc 1 4890 0
  15 0002 66 03                   		mov.L	#0, r3
4891:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4892:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	for(i=0, msk=1; i<HAL_NUM_HW_CNTR; i++, msk<<=1)
  16                             		.loc 1 4892 0
  17 0004 66 14                   		mov.L	#1, r4
  18 0006 EF 3E                   		mov.L	r3, r14
  19 0008 EF 42                   		mov.L	r4, r2
  20                             	.LVL2:
  21                             		.balign 2,3,2
  22                             	.L5:
4893:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	{
4894:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		if( uBmp & msk)
  23                             		.loc 1 4894 0
  24 000a FC 33 14                		tst	r1, r4
  25 000d 20 19                   		beq	.L2
4895:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		{
4896:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			if(i>2)
  26                             		.loc 1 4896 0
  27 000f 61 2E                   		cmp	#2, r14
  28 0011 25 0D                   		bleu	.L3
4888:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** static uint32_t TMR_GetMultiBmp(uint32_t uBmp)
  29                             		.loc 1 4888 0
  30 0013 71 E5 03                		add	#3, r14, r5
4897:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			{
4898:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 				tmp = (1 << (i+3));
  31                             		.loc 1 4898 0
  32 0016 EF 27                   		mov.L	r2, r7
  33 0018 FD 62 57                		shll	r5, r7
  34 001b EF 75                   		mov.L	r7, r5
  35                             	.LVL3:
  36 001d 0F                      		bra	.L4
  37                             	.LVL4:
  38                             	.L3:
4899:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			}
4900:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			else
4901:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			{
4902:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 				tmp = (1 << i);
  39                             		.loc 1 4902 0
  40 001e EF 25                   		mov.L	r2, r5
  41 0020 FD 62 E5                		shll	r14, r5
  42                             	.LVL5:
  43 0023 03                      		.balign 2,3,1
  44                             	.L4:
4903:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			}
4904:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bmp |= tmp;
  45                             		.loc 1 4904 0
  46 0024 57 53                   		or	r5, r3
  47                             	.LVL6:
  48                             		.balign 2,3,1
  49                             	.L2:
4892:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	for(i=0, msk=1; i<HAL_NUM_HW_CNTR; i++, msk<<=1)
  50                             		.loc 1 4892 0
  51 0026 62 1E                   		add	#1, r14
  52                             	.LVL7:
  53 0028 4B 44                   		add	r4, r4
  54                             	.LVL8:
  55 002a 61 5E                   		cmp	#5, r14
  56 002c 21 DE                   		bne	.L5
4905:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		}
4906:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	}
4907:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	return bmp;
4908:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
  57                             		.loc 1 4908 0
  58 002e EF 31                   		mov.L	r3, r1
  59                             	.LVL9:
  60 0030 3F 77 01                		rtsd	#4, r7-r7
  61                             	.LFE94:
  63 0033 03                      		.section	.text.GetInternalHWClearSourceValue,"ax",@progbits
  65                             	_GetInternalHWClearSourceValue:
  66                             	.LFB51:
1970:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
  67                             		.loc 1 1970 0
  68                             	.LVL10:
1973:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(tmrId)
  69                             		.loc 1 1973 0
  70 0000 5B 11                   		movu.B	r1, r1
  71 0002 61 41                   		cmp	#4, r1
  72 0004 24 48                   		bgtu	.L12
  73 0006 FB E2 00 00 00 00       		mov.L	#.L18, r14
  74 000c FE 61 EE                		mov.L	[r1,r14], r14
  75                             		
  76 000f 7F 0E                   	1:jmp	r14
  77                             		.section	.rodata.GetInternalHWClearSourceValue,"a",@progbits
  78                             		.balign 4
  79                             		.balign 4
  80                             	.L18:
  81 0000 00 00 00 11             		.long .L13
  82 0004 00 00 00 1B             		.long .L14
  83 0008 00 00 00 25             		.long .L15
  84 000c 00 00 00 34             		.long .L16
  85 0010 00 00 00 42             		.long .L17
  86                             		.section	.text.GetInternalHWClearSourceValue
  87                             	.L13:
1976:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         clrValue = MTU0.TCR.BIT.CCLR;
  88                             		.loc 1 1976 0
  89 0011 FB EE 90 86 08          		mov.L	#0x88690, r14
  90 0016 CD E1 70                		mov.B	112[r14], r1
  91                             	.LVL11:
  92 0019 2E 23                   		bra	.L20
  93                             	.L14:
1979:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         clrValue = MTU1.TCR.BIT.CCLR;
  94                             		.loc 1 1979 0
  95 001b FB EE 90 86 08          		mov.L	#0x88690, r14
  96 0020 CD E1 F0                		mov.B	240[r14], r1
  97 0023 2E 0B                   		bra	.L21
  98                             	.L15:
1982:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         clrValue = MTU2.TCR.BIT.CCLR;
  99                             		.loc 1 1982 0
 100 0025 FB EE 92 86 08          		mov.L	#0x88692, r14
 101 002a CE E1 6E 01             		mov.B	366[r14], r1
 102                             		.balign 2,3,1
 103                             	.L21:
 104 002e 68 51                   		shlr	#5, r1
 105 0030 64 31                   		and #3, r1
 106                             	.LVL12:
1983:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 107                             		.loc 1 1983 0
 108 0032 2E 24                   		bra	.L19
 109                             	.LVL13:
 110                             	.L16:
1985:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         clrValue = MTU3.TCR.BIT.CCLR;
 111                             		.loc 1 1985 0
 112 0034 FB EE 00 86 08          		mov.L	#0x88600, r14
 113 0039 CC E1                   		mov.B	[r14], r1
 114 003b 03                      		.balign 2,3,1
 115                             	.L20:
 116 003c 5B 11                   		movu.B	r1, r1
 117 003e 68 51                   		shlr	#5, r1
 118                             	.LVL14:
1986:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 119                             		.loc 1 1986 0
 120 0040 2E 16                   		bra	.L19
 121                             	.LVL15:
 122                             	.L17:
1988:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         clrValue = MTU4.TCR.BIT.CCLR;
 123                             		.loc 1 1988 0
 124 0042 FB EE 00 86 08          		mov.L	#0x88600, r14
 125 0047 CD E1 01                		mov.B	1[r14], r1
 126 004a 2E F2                   		bra	.L20
 127                             	.L12:
1991:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 128                             		.loc 1 1991 0
 129 004c 75 41 30                		mov.L	#48, r1
 130 004f 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 131                             	.LVL16:
1971:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t clrValue = 0;
 132                             		.loc 1 1971 0
 133 0053 66 01                   		mov	#0, r1
 134                             	.LVL17:
 135 0055 03                      		.balign 2,3,1
 136                             	.L19:
1995:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end*/
 137                             		.loc 1 1995 0
 138 0056 64 71                   		and #7, r1
 139                             	.LVL18:
 140 0058 02                      		rts
 141                             	.LFE51:
 143 0059 03                      		.section	.text.LVDR_SetUp,"ax",@progbits
 144                             		.global	_LVDR_SetUp
 146                             	_LVDR_SetUp:
 147                             	.LFB0:
 199:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 148                             		.loc 1 199 0
 149                             	.LVL19:
 206:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if((tripPointVR*10) >= (415 - (i *15)))
 150                             		.loc 1 206 0
 151 0000 5B 11                   		movu.B	r1, r1
 152 0002 63 A1                   		mul	#10, r1
 153                             	.LVL20:
 204:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     for(i = 0; i < 16; i++)
 154                             		.loc 1 204 0
 155 0004 66 04                   		mov.L	#0, r4
 156                             	.LVL21:
 157                             		.balign 2,3,1
 158                             	.L24:
 198:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void LVDR_SetUp(uint8_t tripPointVR)
 159                             		.loc 1 198 0
 160 0006 EF 4E                   		mov.L	r4, r14
 161 0008 75 1E F1                		mul	#-15, r14
 162 000b 72 EE 9E 01             		add	#0x19e, r14
 206:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if((tripPointVR*10) >= (415 - (i *15)))
 163                             		.loc 1 206 0
 164 000f 47 1E                   		cmp	r1, r14
 165 0011 29 0B                   		blt	.L23
 204:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     for(i = 0; i < 16; i++)
 166                             		.loc 1 204 0
 167 0013 62 14                   		add	#1, r4
 168                             	.LVL22:
 169 0015 75 54 10                		cmp	#16, r4
 170 0018 21 EE                   		bne	.L24
 213:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         i = 15;
 171                             		.loc 1 213 0
 172 001a 66 F4                   		mov.L	#15, r4
 173                             	.LVL23:
 174                             		.balign 2,3,4
 175                             	.L23:
 215:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     DISABLE_REGISTER_WRITE_PROTECTION;
 176                             		.loc 1 215 0
 177 001c FB EE 00 00 08          		mov.L	#0x80000, r14
 178 0021 FA E9 FF 01 0F A5       		mov.W	#0xffffa50f, 1022[r14]
 216:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITOR_CONTROL_REGISTER &= 0xF0;
 179                             		.loc 1 216 0
 180 0027 CE E3 97 C2             		mov.B	49815[r14], r3
 181 002b 75 23 F0                		and #-16, r3
 182 002e CB E3 97 C2             		mov.B	r3, 49815[r14]
 217:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_DETECTION_LEVEL_SELECT_REGISTER &=	0xF0;
 183                             		.loc 1 217 0
 184 0032 CE E3 98 C2             		mov.B	49816[r14], r3
 185 0036 75 23 F0                		and #-16, r3
 186 0039 CB E3 98 C2             		mov.B	r3, 49816[r14]
 218:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SET_L_NIBBLE(_HAL_RX210_VOLTAGE_DETECTION_LEVEL_SELECT_REGISTER,i);
 187                             		.loc 1 218 0
 188 003d CE E3 98 C2             		mov.B	49816[r14], r3
 189 0041 75 23 F0                		and #-16, r3
 190 0044 57 34                   		or	r3, r4
 191                             	.LVL24:
 192 0046 CB E4 98 C2             		mov.B	r4, 49816[r14]
 220:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITOR_CONTROL_REGISTER &= ~LVCMPCR_EXCREFINP1_MASK;
 193                             		.loc 1 220 0
 194 004a F2 E8 97 C2             		bclr #0, 49815[r14].B
 222:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITOR_CONTROL_REGISTER &= ~LVCMPCR_EXVCCINP1_MASK;
 195                             		.loc 1 222 0
 196 004e F2 E9 97 C2             		bclr #1, 49815[r14].B
 224:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITOR_CONTROL_REGISTER |= LVCMPCR_LVD1E_MASK;
 197                             		.loc 1 224 0
 198 0052 F2 E5 97 C2             		bset #5, 49815[r14].B
 226:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITORING_1_CIRCUIT_COMPARATOR_REGISTER_0 |= LVD1CR0_LVD1CMPE_MASK;
 199                             		.loc 1 226 0
 200 0056 F2 E2 9A C2             		bset #2, 49818[r14].B
 228:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITORING_1_CIRCUIT_COMPARATOR_REGISTER_0 |= LVD1CR0_LVD1RI_MASK;	/* Reset 
 201                             		.loc 1 228 0
 202 005a F2 E6 9A C2             		bset #6, 49818[r14].B
 203                             	.LVL25:
 204 005e FB 4A 88 13             		mov.L	#0x1388, r4
 205                             	.LVL26:
 206                             	.L25:
 231:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         __asm__("nop");
 207                             		.loc 1 231 0 discriminator 2
 208                             	 ; 231 "C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200/RN_RX200_hal.c" 1
 209 0062 03                      		nop
 210                             	 ; 0 "" 2
 211 0063 60 14                   		sub	#1, r4
 229:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     for(i = 0; i<5000; i++)
 212                             		.loc 1 229 0 discriminator 2
 213 0065 21 FD                   		bne	.L25
 233:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITORING_1_STATUS_REGISTER &= ~LVD1SR_LVD1DET_MASK;
 214                             		.loc 1 233 0
 215 0067 F1 E8 E1                		bclr #0, 225[r14].B
 234:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITORING_1_CIRCUIT_COMPARATOR_REGISTER_0 |= LVD1CR0_LVD1RIE_MASK;	/* Inter
 216                             		.loc 1 234 0
 217 006a F2 E0 9A C2             		bset #0, 49818[r14].B
 236:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ENABLE_REGISTER_WRITE_PROTECTION;
 218                             		.loc 1 236 0
 219 006e FA E9 FF 01 00 A5       		mov.W	#0xffffa500, 1022[r14]
 220 0074 02                      		rts
 221                             	.LFE0:
 223 0075 03                      		.section	.text.LVDW_SetTrip,"ax",@progbits
 224                             		.global	_LVDW_SetTrip
 226                             	_LVDW_SetTrip:
 227                             	.LFB1:
 246:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 228                             		.loc 1 246 0
 229                             	.LVL27:
 252:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if((tripPointVW*10) >= (415 - (i *15)))
 230                             		.loc 1 252 0
 231 0000 5B 11                   		movu.B	r1, r1
 232 0002 63 A1                   		mul	#10, r1
 233                             	.LVL28:
 234 0004 66 0E                   		mov.L	#0, r14
 235                             	.LVL29:
 236                             		.balign 2,3,1
 237                             	.L30:
 238 0006 DF E4                   		mov.W	r14, r4
 245:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void LVDW_SetTrip(uint8_t tripPointVW)
 239                             		.loc 1 245 0
 240 0008 EF E3                   		mov.L	r14, r3
 241 000a 75 13 F1                		mul	#-15, r3
 242 000d 72 33 9E 01             		add	#0x19e, r3
 252:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if((tripPointVW*10) >= (415 - (i *15)))
 243                             		.loc 1 252 0
 244 0011 47 13                   		cmp	r1, r3
 245 0013 29 0B                   		blt	.L29
 246 0015 62 1E                   		add	#1, r14
 250:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     for(i = 0; i < 16; i++)
 247                             		.loc 1 250 0
 248 0017 75 5E 10                		cmp	#16, r14
 249 001a 21 EC                   		bne	.L30
 256:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         i = 15;
 250                             		.loc 1 256 0
 251 001c 66 F4                   		mov	#15, r4
 252                             		.balign 2,3,4
 253                             	.L29:
 254                             	.LVL30:
 257:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     DISABLE_REGISTER_WRITE_PROTECTION;
 255                             		.loc 1 257 0
 256 001e FB EE 00 00 08          		mov.L	#0x80000, r14
 257 0023 FA E9 FF 01 0F A5       		mov.W	#0xffffa50f, 1022[r14]
 258:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITOR_CONTROL_REGISTER &= 0x0F; 	/* Reset V1 level select*/
 258                             		.loc 1 258 0
 259 0029 CE E3 97 C2             		mov.B	49815[r14], r3
 260 002d 64 F3                   		and #15, r3
 261 002f CB E3 97 C2             		mov.B	r3, 49815[r14]
 259:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_DETECTION_LEVEL_SELECT_REGISTER &=	0x0F;
 262                             		.loc 1 259 0
 263 0033 CE E3 98 C2             		mov.B	49816[r14], r3
 264 0037 64 F3                   		and #15, r3
 265 0039 CB E3 98 C2             		mov.B	r3, 49816[r14]
 260:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SET_H_NIBBLE(_HAL_RX210_VOLTAGE_DETECTION_LEVEL_SELECT_REGISTER,i);
 266                             		.loc 1 260 0
 267 003d CE E3 98 C2             		mov.B	49816[r14], r3
 268 0041 5F 44                   		movu.W	r4, r4
 269 0043 6C 44                   		shll	#4, r4
 270                             	.LVL31:
 271 0045 64 F3                   		and #15, r3
 272 0047 57 34                   		or	r3, r4
 273 0049 CB E4 98 C2             		mov.B	r4, 49816[r14]
 262:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITOR_CONTROL_REGISTER &= ~LVCMPCR_EXCREFINP2_MASK;
 274                             		.loc 1 262 0
 275 004d F2 EA 97 C2             		bclr #2, 49815[r14].B
 264:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITOR_CONTROL_REGISTER &= ~LVCMPCR_EXVCCINP2_MASK;
 276                             		.loc 1 264 0
 277 0051 F2 EB 97 C2             		bclr #3, 49815[r14].B
 266:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITOR_CONTROL_REGISTER |= LVCMPCR_LVD2E_MASK;
 278                             		.loc 1 266 0
 279 0055 F2 E6 97 C2             		bset #6, 49815[r14].B
 268:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITORING_2_CIRCUIT_COMPARATOR_REGISTER_0 |= LVD2CR0_LVD2CMPE_MASK;
 280                             		.loc 1 268 0
 281 0059 F2 E2 9B C2             		bset #2, 49819[r14].B
 270:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITORING_2_CIRCUIT_COMPARATOR_REGISTER_0 &= ~LVD2CR0_LVD2RI_MASK;	/* Inter
 282                             		.loc 1 270 0
 283 005d F2 EE 9B C2             		bclr #6, 49819[r14].B
 272:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITORING_2_CIRCUIT_COMPARATOR_REGISTER_1  |= _HAL_BIT2_MASK;
 284                             		.loc 1 272 0
 285 0061 F1 E2 E2                		bset #2, 226[r14].B
 274:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITORING_2_STATUS_REGISTER &= ~_HAL_BIT0_MASK;
 286                             		.loc 1 274 0
 287 0064 F1 E8 E3                		bclr #0, 227[r14].B
 288                             	.LVL32:
 289 0067 FB EA 88 13             		mov	#0x1388, r14
 290                             	.LVL33:
 291                             	.L31:
 277:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         __asm__("nop");
 292                             		.loc 1 277 0 discriminator 2
 293                             	 ; 277 "C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200/RN_RX200_hal.c" 1
 294 006b 03                      		nop
 295                             	 ; 0 "" 2
 296 006c 60 1E                   		sub	#1, r14
 275:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     for(i = 0; i<5000; i++)
 297                             		.loc 1 275 0 discriminator 2
 298 006e 5F E4                   		movu.W	r14, r4
 299 0070 61 04                   		cmp	#0, r4
 300 0072 21 F9                   		bne	.L31
 279:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITORING_2_STATUS_REGISTER &= ~LVD2SR_LVD2DET_MASK;
 301                             		.loc 1 279 0
 302 0074 FB EE 00 00 08          		mov.L	#0x80000, r14
 303 0079 F1 E8 E3                		bclr #0, 227[r14].B
 280:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_VOLTAGE_MONITORING_2_CIRCUIT_COMPARATOR_REGISTER_0 |= LVD2CR0_LVD2RIE_MASK;	/* Inter
 304                             		.loc 1 280 0
 305 007c F2 E0 9B C2             		bset #0, 49819[r14].B
 282:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ENABLE_REGISTER_WRITE_PROTECTION;
 306                             		.loc 1 282 0
 307 0080 FA E9 FF 01 00 A5       		mov.W	#0xffffa500, 1022[r14]
 308 0086 02                      		rts
 309                             	.LFE1:
 311 0087 03                      		.section	.text.LVDR_GetTrip,"ax",@progbits
 312                             		.global	_LVDR_GetTrip
 314                             	_LVDR_GetTrip:
 315                             	.LFB2:
 292:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 316                             		.loc 1 292 0
 293:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return((415 - (GET_L_NIBBLE(_HAL_RX210_VOLTAGE_DETECTION_LEVEL_SELECT_REGISTER)*15))/10);
 317                             		.loc 1 293 0
 318 0000 FB EE 00 00 08          		mov.L	#0x80000, r14
 319 0005 CE E1 98 C2             		mov.B	49816[r14], r1
 320 0009 64 F1                   		and #15, r1
 321 000b 75 11 F1                		mul	#-15, r1
 322 000e 72 11 9F 01             		add	#0x19f, r1
 323 0012 FD 74 81 0A             		div	#10, r1
 294:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end LVDR_GetTrip*/
 324                             		.loc 1 294 0
 325 0016 5B 11                   		movu.B	r1, r1
 326 0018 02                      		rts
 327                             	.LFE2:
 329                             		.section	.text.LVDW_GetTrip,"ax",@progbits
 330                             		.global	_LVDW_GetTrip
 332                             	_LVDW_GetTrip:
 333                             	.LFB3:
 303:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 334                             		.loc 1 303 0
 304:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return((415 - (GET_H_NIBBLE(_HAL_RX210_VOLTAGE_DETECTION_LEVEL_SELECT_REGISTER)*15))/10);
 335                             		.loc 1 304 0
 336 0000 FB EE 00 00 08          		mov.L	#0x80000, r14
 337 0005 5A E1 98 C2             		movu.B	49816[r14], r1
 338 0009 68 41                   		shlr	#4, r1
 339 000b 75 11 F1                		mul	#-15, r1
 340 000e 72 11 9F 01             		add	#0x19f, r1
 341 0012 FD 74 81 0A             		div	#10, r1
 305:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end LDW_GetTrip*/
 342                             		.loc 1 305 0
 343 0016 5B 11                   		movu.B	r1, r1
 344 0018 02                      		rts
 345                             	.LFE3:
 347                             		.section	.text.WDT_Enabled,"ax",@progbits
 348                             		.global	_WDT_Enabled
 350                             	_WDT_Enabled:
 351                             	.LFB4:
 368:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 352                             		.loc 1 368 0
 370:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 353                             		.loc 1 370 0
 354 0000 66 11                   		mov.L	#1, r1
 355 0002 02                      		rts
 356                             	.LFE4:
 358                             		.section	.text.WDT_Refresh,"ax",@progbits
 359                             		.global	_WDT_Refresh
 361                             	_WDT_Refresh:
 362                             	.LFB5:
 383:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 363                             		.loc 1 383 0
 384:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_WDT_REFRESH_REGISTER = 0x00;
 364                             		.loc 1 384 0
 365 0000 FB EE 30 80 08          		mov.L	#0x88030, r14
 366 0005 F8 E4 00                		mov.B	#0, [r14]
 385:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_WDT_REFRESH_REGISTER = 0xFF;
 367                             		.loc 1 385 0
 368 0008 F8 E4 FF                		mov.B	#-1, [r14]
 369 000b 02                      		rts
 370                             	.LFE5:
 372                             		.section	.text.WDT_TimeoutExpired,"ax",@progbits
 373                             		.global	_WDT_TimeoutExpired
 375                             	_WDT_TimeoutExpired:
 376                             	.LFB6:
 393:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 377                             		.loc 1 393 0
 394:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	return IWDT.IWDTSR.BIT.UNDFF?TRUE:FALSE;
 378                             		.loc 1 394 0
 379 0000 FB EE 30 80 08          		mov.L	#0x88030, r14
 380 0005 DD E1 02                		mov.W	4[r14], r1
 381 0008 68 E1                   		shlr	#14, r1
 395:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 382                             		.loc 1 395 0
 383 000a 64 11                   		and #1, r1
 384 000c 02                      		rts
 385                             	.LFE6:
 387                             		.section	.text.WDT_UntimelyResetOccurred,"ax",@progbits
 388                             		.global	_WDT_UntimelyResetOccurred
 390                             	_WDT_UntimelyResetOccurred:
 391                             	.LFB7:
 401:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 392                             		.loc 1 401 0
 402:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	return IWDT.IWDTSR.BIT.REFEF?TRUE:FALSE;
 393                             		.loc 1 402 0
 394 0000 FB EE 30 80 08          		mov.L	#0x88030, r14
 395 0005 DD E1 02                		mov.W	4[r14], r1
 403:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 396                             		.loc 1 403 0
 397 0008 69 F1                   		shlr	#31, r1
 398 000a 02                      		rts
 399                             	.LFE7:
 401                             		.section	.text.WDT_ClearTimeoutExpired,"ax",@progbits
 402                             		.global	_WDT_ClearTimeoutExpired
 404                             	_WDT_ClearTimeoutExpired:
 405                             	.LFB8:
 409:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 406                             		.loc 1 409 0
 410:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	IWDT.IWDTSR.BIT.UNDFF=0;
 407                             		.loc 1 410 0
 408 0000 FB EE 30 80 08          		mov.L	#0x88030, r14
 409 0005 DD E4 02                		mov.W	4[r14], r4
 410 0008 7A E4                   		bclr	#14, r4
 411 000a D7 E4 02                		mov.W	r4, 4[r14]
 412 000d 02                      		rts
 413                             	.LFE8:
 415                             		.section	.text.WDT_ClearUntimelyResetOccurred,"ax",@progbits
 416                             		.global	_WDT_ClearUntimelyResetOccurred
 418                             	_WDT_ClearUntimelyResetOccurred:
 419                             	.LFB9:
 417:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 420                             		.loc 1 417 0
 418:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	IWDT.IWDTSR.BIT.REFEF=0;
 421                             		.loc 1 418 0
 422 0000 FB EE 30 80 08          		mov.L	#0x88030, r14
 423 0005 DD E4 02                		mov.W	4[r14], r4
 424 0008 7A F4                   		bclr	#15, r4
 425 000a D7 E4 02                		mov.W	r4, 4[r14]
 426 000d 02                      		rts
 427                             	.LFE9:
 429                             		.section	.text.WDT_AllowUpdate,"ax",@progbits
 430                             		.global	_WDT_AllowUpdate
 432                             	_WDT_AllowUpdate:
 433                             	.LFB10:
 488:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 434                             		.loc 1 488 0
 490:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 435                             		.loc 1 490 0
 436 0000 66 11                   		mov.L	#1, r1
 437 0002 02                      		rts
 438                             	.LFE10:
 440                             		.section	.text.WDT_ResetMCU,"ax",@progbits
 441                             		.global	_WDT_ResetMCU
 443                             	_WDT_ResetMCU:
 444                             	.LFB11:
 499:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 445                             		.loc 1 499 0
 446 0000 02                      		rts
 447                             	.LFE11:
 449                             		.section	.text.WDT_IsWindowOpen,"ax",@progbits
 450                             		.global	_WDT_IsWindowOpen
 452                             	_WDT_IsWindowOpen:
 453                             	.LFB12:
 526:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 454                             		.loc 1 526 0
 455                             	.LBB8:
 456                             	.LBB9:
 664:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return (_HAL_RX210_WDT_STATUS_REGISTER & 0x3FFF);
 457                             		.loc 1 664 0
 458 0000 FB EE 30 80 08          		mov.L	#0x88030, r14
 459 0005 DD E1 02                		mov.W	4[r14], r1
 460                             	.LBE9:
 461                             	.LBE8:
 529:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return (WDT_ReadCounter()<RX210_WDT_REFRESH_PERMITTED_WINDOW);
 462                             		.loc 1 529 0
 463 0008 76 21 FF 3F             		and #0x3fff, r1
 534:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end WDT_IsWindowOpen*/
 464                             		.loc 1 534 0
 465 000c 76 01 FE 07             		cmp	#0x7fe, r1
 466 0010 FC DB 15                		scleu.L	r1
 467 0013 02                      		rts
 468                             	.LFE12:
 470                             		.section	.text.WDT_IsJustBeforePermittedWindow,"ax",@progbits
 471                             		.global	_WDT_IsJustBeforePermittedWindow
 473                             	_WDT_IsJustBeforePermittedWindow:
 474                             	.LFB13:
 544:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 475                             		.loc 1 544 0
 476                             	.LBB10:
 477                             	.LBB11:
 664:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return (_HAL_RX210_WDT_STATUS_REGISTER & 0x3FFF);
 478                             		.loc 1 664 0
 479 0000 FB EE 30 80 08          		mov.L	#0x88030, r14
 480 0005 DD E1 02                		mov.W	4[r14], r1
 481                             	.LVL34:
 482                             	.LBE11:
 483                             	.LBE10:
 547:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	if (!( counter < RX210_WDT_REFRESH_PERMITTED_WINDOW ) && (counter > (uint32_t)((RX210_WDT_REFRESH_
 484                             		.loc 1 547 0
 485 0008 76 21 FF 3F             		and #0x3fff, r1
 486                             	.LVL35:
 552:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 487                             		.loc 1 552 0
 488 000c 76 01 FE 07             		cmp	#0x7fe, r1
 489 0010 FC DB 14                		scgtu.L	r1
 490 0013 02                      		rts
 491                             	.LFE13:
 493                             		.section	.text.WDT_IsRunning,"ax",@progbits
 494                             		.global	_WDT_IsRunning
 496                             	_WDT_IsRunning:
 497                             	.LFB14:
 556:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 498                             		.loc 1 556 0
 499                             	.LBB12:
 500                             	.LBB13:
 664:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return (_HAL_RX210_WDT_STATUS_REGISTER & 0x3FFF);
 501                             		.loc 1 664 0
 502 0000 FB EE 30 80 08          		mov.L	#0x88030, r14
 503 0005 DD E1 02                		mov.W	4[r14], r1
 504                             	.LBE13:
 505                             	.LBE12:
 557:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	return (WDT_ReadCounter()!=0) ? TRUE : FALSE;
 506                             		.loc 1 557 0
 507 0008 76 21 FF 3F             		and	#0x3fff, r1
 558:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 508                             		.loc 1 558 0
 509 000c FC DB 11                		scne.L	r1
 510 000f 02                      		rts
 511                             	.LFE14:
 513                             		.section	.text.WDT_InitSync,"ax",@progbits
 514                             		.global	_WDT_InitSync
 516                             	_WDT_InitSync:
 517                             	.LFB15:
 572:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 518                             		.loc 1 572 0
 519 0000 02                      		rts
 520                             	.LFE15:
 522                             		.section	.text.WDT_StartSync,"ax",@progbits
 523                             		.global	_WDT_StartSync
 525                             	_WDT_StartSync:
 526                             	.LFB16:
 620:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 527                             		.loc 1 620 0
 623:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         WDT_Refresh();
 528                             		.loc 1 623 0
 529 0000 04 00 00 00             		bra	_WDT_Refresh
 530                             	.LVL36:
 531                             	.LFE16:
 533                             		.section	.text.WDT_SetWindowingSync,"ax",@progbits
 534                             		.global	_WDT_SetWindowingSync
 536                             	_WDT_SetWindowingSync:
 537                             	.LFB17:
 637:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 538                             		.loc 1 637 0
 539                             	.LVL37:
 639:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_WDT_CONTROL_REGISTER |= (WDT_WINDOW_START | WDT_WINDOW_END);
 540                             		.loc 1 639 0
 541 0000 FB EE 30 80 08          		mov.L	#0x88030, r14
 542 0005 DD E4 01                		mov.W	2[r14], r4
 543 0008 76 34 00 13             		or	#0x1300, r4
 544 000c D7 E4 01                		mov.W	r4, 2[r14]
 545 000f 02                      		rts
 546                             	.LFE17:
 548                             		.section	.text.WDT_ReadCounter,"ax",@progbits
 549                             		.global	_WDT_ReadCounter
 551                             	_WDT_ReadCounter:
 552                             	.LFB19:
 663:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 553                             		.loc 1 663 0
 664:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return (_HAL_RX210_WDT_STATUS_REGISTER & 0x3FFF);
 554                             		.loc 1 664 0
 555 0000 FB EE 30 80 08          		mov.L	#0x88030, r14
 556 0005 DD E1 02                		mov.W	4[r14], r1
 665:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end WDT_ReadCounter*/
 557                             		.loc 1 665 0
 558 0008 76 21 FF 3F             		and #0x3fff, r1
 559 000c 02                      		rts
 560                             	.LFE19:
 562                             		.section	.text.WDT_GetWindow,"ax",@progbits
 563                             		.global	_WDT_GetWindow
 565                             	_WDT_GetWindow:
 566                             	.LFB20:
 677:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 567                             		.loc 1 677 0
 678:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return ((_HAL_RX210_WDT_CONTROL_REGISTER & 0xFF00)>>8);
 568                             		.loc 1 678 0
 569 0000 FB EE 30 80 08          		mov.L	#0x88030, r14
 570 0005 5D E1 01                		movu.W	2[r14], r1
 679:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end WDT_GetWindow*/
 571                             		.loc 1 679 0
 572 0008 68 81                   		shlr	#8, r1
 573 000a 02                      		rts
 574                             	.LFE20:
 576                             		.section	.text.WDT_ReadRSTCounter,"ax",@progbits
 577                             		.global	_WDT_ReadRSTCounter
 579                             	_WDT_ReadRSTCounter:
 580                             	.LFB21:
 689:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 581                             		.loc 1 689 0
 691:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end WDT_ReadRSTCounter*/
 582                             		.loc 1 691 0
 583 0000 66 01                   		mov.L	#0, r1
 584 0002 02                      		rts
 585                             	.LFE21:
 587                             		.section	.text.WDT_ResetRSTCounter,"ax",@progbits
 588                             		.global	_WDT_ResetRSTCounter
 590                             	_WDT_ResetRSTCounter:
 591                             	.LFB22:
 701:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 592                             		.loc 1 701 0
 593 0000 02                      		rts
 594                             	.LFE22:
 596                             		.section	.text.SYS_GetResetSrcVal,"ax",@progbits
 597                             		.global	_SYS_GetResetSrcVal
 599                             	_SYS_GetResetSrcVal:
 600                             	.LFB23:
 727:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 601                             		.loc 1 727 0
 602                             	.LVL38:
 729:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t val_0 = _RX210_RESET_STATUS_REGISTER_0;
 603                             		.loc 1 729 0
 604 0000 FB EE 00 00 08          		mov.L	#0x80000, r14
 605 0005 CE E4 90 C2             		mov.B	49808[r14], r4
 606                             	.LVL39:
 730:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t val_1 = _RX210_RESET_STATUS_REGISTER_1;
 607                             		.loc 1 730 0
 608 0009 CE E3 91 C2             		mov.B	49809[r14], r3
 609                             	.LVL40:
 731:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t val_2 = _RX210_RESET_STATUS_REGISTER_2;
 610                             		.loc 1 731 0
 611 000d CD E1 C0                		mov.B	192[r14], r1
 612                             	.LVL41:
 733:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _RX210_RESET_STATUS_REGISTER_0 = 0x00;
 613                             		.loc 1 733 0
 614 0010 FA E4 90 C2 00          		mov.B	#0, 49808[r14]
 734:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _RX210_RESET_STATUS_REGISTER_1 = 0x00;
 615                             		.loc 1 734 0
 616 0015 FA E4 91 C2 00          		mov.B	#0, 49809[r14]
 735:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _RX210_RESET_STATUS_REGISTER_2 = 0x00;
 617                             		.loc 1 735 0
 618 001a F9 E4 C0 00             		mov.B	#0, 192[r14]
 619                             	.LVL42:
 736:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     val |= ((resetSource_t) val_2 <<16);
 620                             		.loc 1 736 0
 621 001e 5B 11                   		movu.B	r1, r1
 622 0020 6D 01                   		shll	#16, r1
 623                             	.LVL43:
 737:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     val |= ((resetSource_t) val_1 <<8);
 624                             		.loc 1 737 0
 625 0022 5B 3E                   		movu.B	r3, r14
 626 0024 6C 8E                   		shll	#8, r14
 627 0026 57 E1                   		or	r14, r1
 628                             	.LVL44:
 738:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     val |= (resetSource_t) val_0;
 629                             		.loc 1 738 0
 630 0028 5B 4E                   		movu.B	r4, r14
 740:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end resetSource_t SYS_GETResetSrcVal*/
 631                             		.loc 1 740 0
 632 002a 57 E1                   		or	r14, r1
 633                             	.LVL45:
 634 002c 02                      		rts
 635                             	.LFE23:
 637                             		.section	.text.SYS_PowerOnReset,"ax",@progbits
 638                             		.global	_SYS_PowerOnReset
 640                             	_SYS_PowerOnReset:
 641                             	.LFB24:
 749:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 642                             		.loc 1 749 0
 643                             	.LVL46:
 754:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end SYS_PowerOnReset*/
 644                             		.loc 1 754 0
 645 0000 64 11                   		and #1, r1
 646                             	.LVL47:
 647 0002 02                      		rts
 648                             	.LFE24:
 650                             		.section	.text.SYS_WatchdogReset,"ax",@progbits
 651                             		.global	_SYS_WatchdogReset
 653                             	_SYS_WatchdogReset:
 654                             	.LFB25:
 763:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 655                             		.loc 1 763 0
 656                             	.LVL48:
 764:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if((rstSrc & IWDT_RESET_MASK))
 657                             		.loc 1 764 0
 658 0000 6B 01                   		shar	#16, r1
 659                             	.LVL49:
 768:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end SYS_WatchdogReset*/
 660                             		.loc 1 768 0
 661 0002 64 11                   		and #1, r1
 662 0004 02                      		rts
 663                             	.LFE25:
 665                             		.section	.text.SYS_ExternalPinReset,"ax",@progbits
 666                             		.global	_SYS_ExternalPinReset
 668                             	_SYS_ExternalPinReset:
 669                             	.LFB26:
 774:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 670                             		.loc 1 774 0
 671                             	.LVL50:
 779:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end SYS_ExternalPinReset*/
 672                             		.loc 1 779 0
 673 0000 61 01                   		cmp	#0, r1
 674 0002 FC DB 10                		sceq.L	r1
 675                             	.LVL51:
 676 0005 02                      		rts
 677                             	.LFE26:
 679                             		.section	.text.SYS_LossOfClockReset,"ax",@progbits
 680                             		.global	_SYS_LossOfClockReset
 682                             	_SYS_LossOfClockReset:
 683                             	.LFB27:
 785:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 684                             		.loc 1 785 0
 685                             	.LVL52:
 787:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end SYS_ExternalPinReset*/
 686                             		.loc 1 787 0
 687 0000 66 01                   		mov.L	#0, r1
 688                             	.LVL53:
 689 0002 02                      		rts
 690                             	.LFE27:
 692                             		.section	.text.SYS_IllegalOpcodeReset,"ax",@progbits
 693                             		.global	_SYS_IllegalOpcodeReset
 695                             	_SYS_IllegalOpcodeReset:
 696                             	.LFB28:
 793:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 697                             		.loc 1 793 0
 698                             	.LVL54:
 795:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end SYS_IllegalOpcodeReset*/
 699                             		.loc 1 795 0
 700 0000 66 01                   		mov.L	#0, r1
 701                             	.LVL55:
 702 0002 02                      		rts
 703                             	.LFE28:
 705                             		.section	.text.SYS_LowVoltageReset,"ax",@progbits
 706                             		.global	_SYS_LowVoltageReset
 708                             	_SYS_LowVoltageReset:
 709                             	.LFB29:
 801:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 710                             		.loc 1 801 0
 711                             	.LVL56:
 802:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if((rstSrc & LOW_VOLTAGE_RESET_VD1))
 712                             		.loc 1 802 0
 713 0000 6A 21                   		shar	#2, r1
 714                             	.LVL57:
 806:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end SYS_ExternalPinReset*/
 715                             		.loc 1 806 0
 716 0002 64 11                   		and #1, r1
 717 0004 02                      		rts
 718                             	.LFE29:
 720                             		.section	.text.SYS_DebuggerReset,"ax",@progbits
 721                             		.global	_SYS_DebuggerReset
 723                             	_SYS_DebuggerReset:
 724                             	.LFB30:
 812:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 725                             		.loc 1 812 0
 726                             	.LVL58:
 814:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end SYS_SetDebuggerReset*/
 727                             		.loc 1 814 0
 728 0000 66 01                   		mov.L	#0, r1
 729                             	.LVL59:
 730 0002 02                      		rts
 731                             	.LFE30:
 733                             		.section	.text.SYS_IllegalAddressReset,"ax",@progbits
 734                             		.global	_SYS_IllegalAddressReset
 736                             	_SYS_IllegalAddressReset:
 737                             	.LFB31:
 820:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 738                             		.loc 1 820 0
 739                             	.LVL60:
 822:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end SYS_IllegalAddressReset*/
 740                             		.loc 1 822 0
 741 0000 66 01                   		mov.L	#0, r1
 742                             	.LVL61:
 743 0002 02                      		rts
 744                             	.LFE31:
 746                             		.section	.text.SYS_UserReset,"ax",@progbits
 747                             		.global	_SYS_UserReset
 749                             	_SYS_UserReset:
 750                             	.LFB32:
 828:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 751                             		.loc 1 828 0
 752                             	.LVL62:
 830:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if((rstSrc & USER_RESET_MASK))
 753                             		.loc 1 830 0
 754 0000 6B 21                   		shar	#18, r1
 755                             	.LVL63:
 833:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end SYS_UserReset*/
 756                             		.loc 1 833 0
 757 0002 64 11                   		and #1, r1
 758 0004 02                      		rts
 759                             	.LFE32:
 761                             		.section	.text.CLK_EngageClkRefSync,"ax",@progbits
 762                             		.global	_CLK_EngageClkRefSync
 764                             	_CLK_EngageClkRefSync:
 765                             	.LFB33:
 855:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 766                             		.loc 1 855 0
 767 0000 02                      		rts
 768                             	.LFE33:
 770                             		.section	.text.CLK_SetInternalClockSync,"ax",@progbits
 771                             		.global	_CLK_SetInternalClockSync
 773                             	_CLK_SetInternalClockSync:
 774                             	.LFB34:
 896:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 775                             		.loc 1 896 0
 776                             	.LVL64:
 933:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** } /*end function CLK_SetInternalClockSync*/
 777                             		.loc 1 933 0
 778 0000 66 11                   		mov.L	#1, r1
 779                             	.LVL65:
 780 0002 02                      		rts
 781                             	.LFE34:
 783                             		.section	.text.CLK_SetExternalClockSync,"ax",@progbits
 784                             		.global	_CLK_SetExternalClockSync
 786                             	_CLK_SetExternalClockSync:
 787                             	.LFB35:
1050:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 788                             		.loc 1 1050 0
 789                             	.LVL66:
1110:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** } /*end function CLK_SetExternalClockSync*/
 790                             		.loc 1 1110 0
 791 0000 66 01                   		mov.L	#0, r1
 792                             	.LVL67:
 793 0002 02                      		rts
 794                             	.LFE35:
 796                             		.section	.text.CLK_SetTrimSync,"ax",@progbits
 797                             		.global	_CLK_SetTrimSync
 799                             	_CLK_SetTrimSync:
 800                             	.LFB36:
1125:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 801                             		.loc 1 1125 0
 802                             	.LVL68:
 803 0000 02                      		rts
 804                             	.LFE36:
 806                             		.section	.text.CLK_SetFLLExternalClockSync,"ax",@progbits
 807                             		.global	_CLK_SetFLLExternalClockSync
 809                             	_CLK_SetFLLExternalClockSync:
 810                             	.LFB37:
1150:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 811                             		.loc 1 1150 0
 812                             	.LVL69:
1188:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end function CLK_SetFLLExternalClockSync*/
 813                             		.loc 1 1188 0
 814 0000 66 01                   		mov.L	#0, r1
 815                             	.LVL70:
 816 0002 02                      		rts
 817                             	.LFE37:
 819                             		.section	.text.CLK_SetFLLInternalClockSync,"ax",@progbits
 820                             		.global	_CLK_SetFLLInternalClockSync
 822                             	_CLK_SetFLLInternalClockSync:
 823                             	.LFB38:
1205:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 824                             		.loc 1 1205 0
 825                             	.LVL71:
1207:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** } /* end function CLK_SetFLLInternalClockSync*/
 826                             		.loc 1 1207 0
 827 0000 66 01                   		mov.L	#0, r1
 828                             	.LVL72:
 829 0002 02                      		rts
 830                             	.LFE38:
 832                             		.section	.text.DeInitGPIO,"ax",@progbits
 833                             		.global	_DeInitGPIO
 835                             	_DeInitGPIO:
 836                             	.LFB39:
1218:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 837                             		.loc 1 1218 0
 838 0000 6E 7B                   		pushm	r7-r11
 839                             	.LCFI1:
1220:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORT1_PDR = 0x00;
 840                             		.loc 1 1220 0
 841 0002 FB BE 01 C0 08          		mov.L	#0x8c001, r11
 842 0007 F8 B4 00                		mov.B	#0, [r11]
1221:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORT2_PDR = 0x00;
 843                             		.loc 1 1221 0
 844 000a FB AE 02 C0 08          		mov.L	#0x8c002, r10
 845 000f F8 A4 00                		mov.B	#0, [r10]
1222:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORT3_PDR = 0x00;
 846                             		.loc 1 1222 0
 847 0012 FB 7E 03 C0 08          		mov.L	#0x8c003, r7
 848 0017 3C 70 00                		mov.B	#0, [r7]
1223:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORT4_PDR = 0x00;
 849                             		.loc 1 1223 0
 850 001a FB FE 04 C0 08          		mov.L	#0x8c004, r15
 851 001f F8 F4 00                		mov.B	#0, [r15]
1224:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORT5_PDR = 0x00;
 852                             		.loc 1 1224 0
 853 0022 FB 5E 05 C0 08          		mov.L	#0x8c005, r5
 854 0027 3C 50 00                		mov.B	#0, [r5]
1225:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORTA_PDR = 0x00;
 855                             		.loc 1 1225 0
 856 002a FB 1E 0A C0 08          		mov.L	#0x8c00a, r1
 857 002f 3C 10 00                		mov.B	#0, [r1]
1226:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORTB_PDR = 0x00;
 858                             		.loc 1 1226 0
 859 0032 FB 2E 0B C0 08          		mov.L	#0x8c00b, r2
 860 0037 3C 20 00                		mov.B	#0, [r2]
1227:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORTC_PDR = 0x00;
 861                             		.loc 1 1227 0
 862 003a FB 3E 0C C0 08          		mov.L	#0x8c00c, r3
 863 003f 3C 30 00                		mov.B	#0, [r3]
1228:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORTE_PDR = 0x00;
 864                             		.loc 1 1228 0
 865 0042 FB 4E 0E C0 08          		mov.L	#0x8c00e, r4
 866 0047 3C 40 00                		mov.B	#0, [r4]
1229:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORTH_PDR = 0x00;
 867                             		.loc 1 1229 0
 868 004a FB EE 11 C0 08          		mov.L	#0x8c011, r14
 869 004f F8 E4 00                		mov.B	#0, [r14]
1231:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORT1_PCR = 0x00;
 870                             		.loc 1 1231 0
 871 0052 F9 B4 C0 00             		mov.B	#0, 192[r11]
1232:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORT2_PCR = 0x00;
 872                             		.loc 1 1232 0
 873 0056 F9 A4 C0 00             		mov.B	#0, 192[r10]
1233:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORT3_PCR = 0x00;
 874                             		.loc 1 1233 0
 875 005a F9 74 C0 00             		mov.B	#0, 192[r7]
1234:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORT4_PCR = 0x00;
 876                             		.loc 1 1234 0
 877 005e F9 F4 C0 00             		mov.B	#0, 192[r15]
1235:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORT5_PCR = 0x00;
 878                             		.loc 1 1235 0
 879 0062 F9 54 C0 00             		mov.B	#0, 192[r5]
1236:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORTA_PCR = 0x00;
 880                             		.loc 1 1236 0
 881 0066 F9 14 C0 00             		mov.B	#0, 192[r1]
1237:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORTB_PCR = 0x00;
 882                             		.loc 1 1237 0
 883 006a F9 24 C0 00             		mov.B	#0, 192[r2]
1238:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORTC_PCR = 0x00;
 884                             		.loc 1 1238 0
 885 006e F9 34 C0 00             		mov.B	#0, 192[r3]
1239:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORTE_PCR = 0x00;
 886                             		.loc 1 1239 0
 887 0072 F9 44 C0 00             		mov.B	#0, 192[r4]
1240:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     PORTH_PCR = 0x00;
 888                             		.loc 1 1240 0
 889 0076 F9 E4 C0 00             		mov.B	#0, 192[r14]
1241:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*  De InitiGPIO */
 890                             		.loc 1 1241 0
 891 007a 3F 7B 05                		rtsd	#20, r7-r11
 892                             	.LFE39:
 894                             		.section	.text.DIO_IsNotDummyIO,"ax",@progbits
 895                             		.global	_DIO_IsNotDummyIO
 897                             	_DIO_IsNotDummyIO:
 898                             	.LFB40:
1245:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 899                             		.loc 1 1245 0
 900                             	.LVL73:
1246:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return (bool_t) ( ((ptr->PortAddress.basic) != (DIO_PortAddressBasicType)DUMMY_PORT_DATA_ADDR) 
 901                             		.loc 1 1246 0
 902 0000 EC 1E                   		mov.L	[r1], r14
 903 0002 61 0E                   		cmp	#0, r14
 904 0004 11                      		beq	.L74
1246:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return (bool_t) ( ((ptr->PortAddress.basic) != (DIO_PortAddressBasicType)DUMMY_PORT_DATA_ADDR) 
 905                             		.loc 1 1246 0 is_stmt 0 discriminator 1
 906 0005 B1 11                   		movu.B	4[r1], r1
 907                             	.LVL74:
 908 0007 61 01                   		cmp	#0, r1
 909 0009 FC DB 11                		scne.L	r1
 910 000c 02                      		rts
 911                             	.LVL75:
 912                             	.L74:
1246:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return (bool_t) ( ((ptr->PortAddress.basic) != (DIO_PortAddressBasicType)DUMMY_PORT_DATA_ADDR) 
 913                             		.loc 1 1246 0
 914 000d EF E1                   		mov.L	r14, r1
 915                             	.LVL76:
1247:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 916                             		.loc 1 1247 0 is_stmt 1
 917 000f 02                      		rts
 918                             	.LFE40:
 920                             		.section	.text.DIO_CheckDigitalFilterPin,"ax",@progbits
 921                             		.global	_DIO_CheckDigitalFilterPin
 923                             	_DIO_CheckDigitalFilterPin:
 924                             	.LFB41:
1356:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 925                             		.loc 1 1356 0
 926                             	.LVL77:
1360:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     DIO_ModuleMapPortAddressType portAddress = pMap->PortAddress;
 927                             		.loc 1 1360 0
 928 0000 EC 15                   		mov.L	[r1], r5
 929                             	.LVL78:
 930 0002 FB E2 08 00 00 00       		mov.L	#_NoiseFilterPinMap+8, r14
1363:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     for (i = 0; i < DIGITAL_FILTER_MAP_SIZE; i++)
 931                             		.loc 1 1363 0
 932 0008 66 04                   		mov	#0, r4
1366:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ((NoiseFilterPinMap[i].PortAddress == portAddress.basic) &&
 933                             		.loc 1 1366 0
 934 000a B1 11                   		movu.B	4[r1], r1
 935                             	.LVL79:
 936                             		.balign 2,3,2
 937                             	.L79:
1355:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** unsigned char DIO_CheckDigitalFilterPin(const IO_ModuleIOMapType* pMap)
 938                             		.loc 1 1355 0
 939 000c 71 E3 F8                		add	#-8, r14, r3
1366:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ((NoiseFilterPinMap[i].PortAddress == portAddress.basic) &&
 940                             		.loc 1 1366 0
 941 000f EC 33                   		mov.L	[r3], r3
 942 0011 47 53                   		cmp	r5, r3
 943 0013 21 27                   		bne	.L76
1366:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ((NoiseFilterPinMap[i].PortAddress == portAddress.basic) &&
 944                             		.loc 1 1366 0 is_stmt 0 discriminator 1
 945 0015 58 E3                   		movu.B	[r14], r3
 946 0017 47 13                   		cmp	r1, r3
 947 0019 21 21                   		bne	.L76
 948                             	.LBB14:
1369:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         	uint8_t tmpMPCMask = (NoiseFilterPinMap[i].MPCFuncVal <= 0x0f ? 0x0f : 0xf0);
 949                             		.loc 1 1369 0 is_stmt 1
 950 001b CD E3 01                		mov.B	1[r14], r3
 951 001e 5B 32                   		movu.B	r3, r2
 952 0020 61 F2                   		cmp	#15, r2
 953 0022 24 05                   		bgtu	.L80
 954 0024 66 F2                   		mov	#15, r2
 955 0026 0C                      		bra	.L77
 956                             	.L80:
 957 0027 FB 26 F0                		mov	#-16, r2
 958                             		.balign 2,3,2
 959                             	.L77:
 960                             	.LVL80:
1355:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** unsigned char DIO_CheckDigitalFilterPin(const IO_ModuleIOMapType* pMap)
 961                             		.loc 1 1355 0 discriminator 3
 962 002a 71 EF FC                		add	#-4, r14, r15
1372:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if ( (*NoiseFilterPinMap[i].MPCAddress & tmpMPCMask) == NoiseFilterPinMap[i].MPCFuncVal
 963                             		.loc 1 1372 0 discriminator 3
 964 002d EC FF                   		mov.L	[r15], r15
 965 002f 06 10 F2                		and	[r15].B, r2
 966                             	.LVL81:
 967 0032 5B 33                   		movu.B	r3, r3
 968 0034 5B 22                   		movu.B	r2, r2
 969 0036 47 23                   		cmp	r2, r3
 970 0038 20 11                   		beq	.L81
 971                             		.balign 2,3,1
 972                             	.L76:
 973                             	.LBE14:
1363:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     for (i = 0; i < DIGITAL_FILTER_MAP_SIZE; i++)
 974                             		.loc 1 1363 0
 975 003a 62 14                   		add	#1, r4
 976                             	.LVL82:
 977 003c 62 CE                   		add	#12, r14
 978 003e 5B 43                   		movu.B	r4, r3
 979 0040 75 53 18                		cmp	#24, r3
 980 0043 21 C9                   		bne	.L79
1358:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t pin_found = 0xFF;
 981                             		.loc 1 1358 0
 982 0045 FB 16 FF                		mov	#-1, r1
 983 0048 0C                      		bra	.L78
 984                             	.LVL83:
 985                             	.L81:
 986                             	.LBB15:
1372:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if ( (*NoiseFilterPinMap[i].MPCAddress & tmpMPCMask) == NoiseFilterPinMap[i].MPCFuncVal
 987                             		.loc 1 1372 0
 988 0049 CF 41                   		mov.B	r4, r1
 989 004b 03                      		.balign 2,3,1
 990                             	.L78:
 991                             	.LVL84:
 992                             	.LBE15:
1380:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DIO_CheckDigitalFilterPin */
 993                             		.loc 1 1380 0
 994 004c 5B 11                   		movu.B	r1, r1
 995 004e 02                      		rts
 996                             	.LFE41:
 998 004f 03                      		.section	.text.DIO_IsDigitalFilterAvailable,"ax",@progbits
 999                             		.global	_DIO_IsDigitalFilterAvailable
 1001                             	_DIO_IsDigitalFilterAvailable:
 1002                             	.LFB42:
1386:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 1003                             		.loc 1 1386 0
 1004                             	.LVL85:
1388:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     pin_found = DIO_CheckDigitalFilterPin(pMap);
 1005                             		.loc 1 1388 0
 1006 0000 05 00 00 00             		bsr	_DIO_CheckDigitalFilterPin
 1007                             	.LVL86:
1389:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(pin_found != 0xFF)
 1008                             		.loc 1 1389 0
 1009 0004 5B 11                   		movu.B	r1, r1
1394:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 1010                             		.loc 1 1394 0
 1011 0006 75 51 FF                		cmp	#0xff, r1
 1012 0009 FC DB 11                		scne.L	r1
 1013                             	.LVL87:
 1014 000c 02                      		rts
 1015                             	.LFE42:
 1017                             		.section	.text.DIO_DigitalFilterEnable,"ax",@progbits
 1018                             		.global	_DIO_DigitalFilterEnable
 1020                             	_DIO_DigitalFilterEnable:
 1021                             	.LFB43:
1404:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 1022                             		.loc 1 1404 0
 1023                             	.LVL88:
 1024 0000 7E A7                   		push.l	r7
 1025                             	.LCFI2:
1407:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     j = DIO_CheckDigitalFilterPin(pMap);
 1026                             		.loc 1 1407 0
 1027 0002 05 00 00 00             		bsr	_DIO_CheckDigitalFilterPin
 1028                             	.LVL89:
1409:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if (j < DIGITAL_FILTER_MAP_SIZE)
 1029                             		.loc 1 1409 0
 1030 0006 5B 11                   		movu.B	r1, r1
 1031 0008 75 51 17                		cmp	#23, r1
 1032 000b 25 05 38 AF 00          		bgtu	.L84
1411:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         pin_mask = NoiseFilterPinMap[j].channel;
 1033                             		.loc 1 1411 0
 1034 0010 EF 14                   		mov.L	r1, r4
 1035 0012 63 C4                   		mul	#12, r4
 1036 0014 70 44 08 00 00 00       		add	#_NoiseFilterPinMap+8, r4
 1037 001a CD 4E 02                		mov.B	2[r4], r14
 1038                             	.LVL90:
1413:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(NoiseFilterPinMap[j].digital_filter_peripheral)
 1039                             		.loc 1 1413 0
 1040 001d B0 CC                   		movu.B	3[r4], r4
 1041 001f 61 94                   		cmp	#9, r4
 1042 0021 25 05 38 99 00          		bgtu	.L84
 1043 0026 FB 32 00 00 00 00       		mov.L	#.L95, r3
 1044 002c FE 64 34                		mov.L	[r4,r3], r4
 1045                             		
 1046 002f 7F 04                   	1:jmp	r4
 1047                             		.section	.rodata.DIO_DigitalFilterEnable,"a",@progbits
 1048                             		.balign 4
 1049                             		.balign 4
 1050                             	.L95:
 1051 0000 00 00 00 31             		.long .L86
 1052 0004 00 00 00 38             		.long .L87
 1053 0008 00 00 00 BC             		.long .L84
 1054 000c 00 00 00 4A             		.long .L88
 1055 0010 00 00 00 5D             		.long .L89
 1056 0014 00 00 00 71             		.long .L90
 1057 0018 00 00 00 85             		.long .L91
 1058 001c 00 00 00 92             		.long .L92
 1059 0020 00 00 00 9F             		.long .L93
 1060 0024 00 00 00 AC             		.long .L94
 1061                             		.section	.text.DIO_DigitalFilterEnable
 1062                             	.L86:
1417:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU0.NFCR.BYTE |= (1 << pin_mask);
 1063                             		.loc 1 1417 0
 1064 0031 FB 4E 90 86 08          		mov.L	#0x88690, r4
 1065 0036 2E 1A                   		bra	.L98
 1066                             	.L87:
1420:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU1.NFCR.BYTE |= (1 << pin_mask);
 1067                             		.loc 1 1420 0
 1068 0038 FB 4E 90 86 08          		mov.L	#0x88690, r4
 1069 003d 88 4B                   		mov.B	1[r4], r3
 1070 003f 5B EE                   		movu.B	r14, r14
 1071 0041 EF 37                   		mov.L	r3, r7
 1072 0043 FC 63 7E                		bset	r14, r7
 1073 0046 80 4F                   		mov.B	r7, 1[r4]
1421:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 1074                             		.loc 1 1421 0
 1075 0048 2E 74                   		bra	.L84
 1076                             	.L88:
1423:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU2.NFCR.BYTE |= (1 << pin_mask);
 1077                             		.loc 1 1423 0
 1078 004a FB 4E 92 86 08          		mov.L	#0x88692, r4
 1079 004f 03                      		.balign 2,3,5
 1080                             	.L98:
 1081 0050 CC 43                   		mov.B	[r4], r3
 1082 0052 5B EE                   		movu.B	r14, r14
 1083 0054 EF 37                   		mov.L	r3, r7
 1084 0056 FC 63 7E                		bset	r14, r7
 1085 0059 C3 47                   		mov.B	r7, [r4]
1424:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 1086                             		.loc 1 1424 0
 1087 005b 2E 61                   		bra	.L84
 1088                             	.L89:
1426:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU3.NFCR.BYTE |= (1 << pin_mask);
 1089                             		.loc 1 1426 0
 1090 005d FB 4E 00 86 08          		mov.L	#0x88600, r4
 1091 0062 CD 43 93                		mov.B	147[r4], r3
 1092 0065 5B EE                   		movu.B	r14, r14
 1093 0067 EF 37                   		mov.L	r3, r7
 1094 0069 FC 63 7E                		bset	r14, r7
 1095 006c C7 47 93                		mov.B	r7, 147[r4]
1427:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 1096                             		.loc 1 1427 0
 1097 006f 2E 4D                   		bra	.L84
 1098                             	.L90:
1429:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU4.NFCR.BYTE |= (1 << pin_mask);
 1099                             		.loc 1 1429 0
 1100 0071 FB 4E 00 86 08          		mov.L	#0x88600, r4
 1101 0076 CD 43 94                		mov.B	148[r4], r3
 1102 0079 5B EE                   		movu.B	r14, r14
 1103 007b EF 37                   		mov.L	r3, r7
 1104 007d FC 63 7E                		bset	r14, r7
 1105 0080 C7 47 94                		mov.B	r7, 148[r4]
1430:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 1106                             		.loc 1 1430 0
 1107 0083 2E 39                   		bra	.L84
 1108                             	.L91:
1433:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IRQFLTE0.BIT.FLTEN0 = 0x01;
 1109                             		.loc 1 1433 0
 1110 0085 FB EE 00 70 08          		mov.L	#0x87000, r14
 1111                             	.LVL91:
 1112 008a CE E4 10 05             		mov.B	1296[r14], r4
 1113 008e 78 04                   		bset	#0, r4
 1114 0090 2E 28                   		bra	.L97
 1115                             	.LVL92:
 1116                             	.L92:
1436:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IRQFLTE0.BIT.FLTEN1 = 0x01;
 1117                             		.loc 1 1436 0
 1118 0092 FB EE 00 70 08          		mov.L	#0x87000, r14
 1119                             	.LVL93:
 1120 0097 CE E4 10 05             		mov.B	1296[r14], r4
 1121 009b 78 14                   		bset	#1, r4
 1122 009d 2E 1B                   		bra	.L97
 1123                             	.LVL94:
 1124                             	.L93:
1439:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IRQFLTE0.BIT.FLTEN5 = 0x01;
 1125                             		.loc 1 1439 0
 1126 009f FB EE 00 70 08          		mov.L	#0x87000, r14
 1127                             	.LVL95:
 1128 00a4 CE E4 10 05             		mov.B	1296[r14], r4
 1129 00a8 78 54                   		bset	#5, r4
 1130 00aa 2E 0E                   		bra	.L97
 1131                             	.LVL96:
 1132                             	.L94:
1442:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IRQFLTE0.BIT.FLTEN6 = 0x01;
 1133                             		.loc 1 1442 0
 1134 00ac FB EE 00 70 08          		mov.L	#0x87000, r14
 1135                             	.LVL97:
 1136 00b1 CE E4 10 05             		mov.B	1296[r14], r4
 1137 00b5 78 64                   		bset	#6, r4
 1138 00b7 03                      		.balign 2,3,5
 1139                             	.L97:
 1140 00b8 CB E4 10 05             		mov.B	r4, 1296[r14]
 1141                             	.LVL98:
 1142                             		.balign 2,3,2
 1143                             	.L84:
1448:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DIO_DigitalFilterEnable */
 1144                             		.loc 1 1448 0
 1145 00bc 3F 77 01                		rtsd	#4, r7-r7
 1146                             	.LFE43:
 1148 00bf 03                      		.section	.text.DIO_DigitalFilterClkFrequencySet,"ax",@progbits
 1149                             		.global	_DIO_DigitalFilterClkFrequencySet
 1151                             	_DIO_DigitalFilterClkFrequencySet:
 1152                             	.LFB44:
1454:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 1153                             		.loc 1 1454 0
 1154                             	.LVL99:
 1155 0000 7E A7                   		push.l	r7
 1156                             	.LCFI3:
 1157 0002 DF 27                   		mov.W	r2, r7
 1158                             	.LVL100:
1459:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     j = DIO_CheckDigitalFilterPin(pMap);
 1159                             		.loc 1 1459 0
 1160 0004 05 00 00 00             		bsr	_DIO_CheckDigitalFilterPin
 1161                             	.LVL101:
1461:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if (j < DIGITAL_FILTER_MAP_SIZE)
 1162                             		.loc 1 1461 0
 1163 0008 5B 1E                   		movu.B	r1, r14
 1164 000a 75 5E 17                		cmp	#23, r14
 1165 000d 25 05 38 FF 00          		bgtu	.L99
1463:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (filterFrequency <= (frequency_khz / 64))
 1166                             		.loc 1 1463 0
 1167 0012 5F 72                   		movu.W	r7, r2
 1168 0014 76 02 38 01             		cmp	#0x138, r2
 1169 0018 24 19                   		bgtu	.L101
1465:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         	if (NoiseFilterPinMap[j].digital_filter_peripheral > DIGITAL_FILTER_MTU4)
 1170                             		.loc 1 1465 0
 1171 001a 63 CE                   		mul	#12, r14
 1172 001c 70 EE 08 00 00 00       		add	#_NoiseFilterPinMap+8, r14
 1173 0022 59 E2 03                		movu.B	3[r14], r2
1467:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             	divisor = 0x03;
 1174                             		.loc 1 1467 0
 1175 0025 61 52                   		cmp	#5, r2
 1176 0027 FC DB 25                		scleu.L	r2
 1177 002a 66 37                   		mov.L	#3, r7
 1178                             	.LVL102:
 1179 002c FF 02 27                		sub	r2, r7, r2
 1180 002f 2E 13                   		bra	.L102
 1181                             	.LVL103:
 1182                             	.L101:
1475:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (filterFrequency <= (frequency_khz / 32))
 1183                             		.loc 1 1475 0
 1184 0031 76 02 71 02             		cmp	#0x271, r2
 1185 0035 25 0A                   		bleu	.L114
1479:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (filterFrequency <= (frequency_khz / 8))
 1186                             		.loc 1 1479 0
 1187 0037 76 02 C4 09             		cmp	#0x9c4, r2
 1188 003b FC DB 25                		scleu.L	r2
 1189 003e 0C                      		bra	.L102
 1190                             	.L114:
1477:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         	divisor = 0x02;
 1191                             		.loc 1 1477 0
 1192 003f 66 22                   		mov	#2, r2
 1193                             	.LVL104:
 1194 0041 03                      		.balign 2,3,1
 1195                             	.L102:
1489:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(NoiseFilterPinMap[j].digital_filter_peripheral)
 1196                             		.loc 1 1489 0
 1197 0042 5B 11                   		movu.B	r1, r1
 1198 0044 63 C1                   		mul	#12, r1
 1199                             	.LVL105:
 1200 0046 70 11 08 00 00 00       		add	#_NoiseFilterPinMap+8, r1
 1201 004c 59 1E 03                		movu.B	3[r1], r14
 1202 004f 61 9E                   		cmp	#9, r14
 1203 0051 25 05 38 BB 00          		bgtu	.L99
 1204 0056 FB 72 00 00 00 00       		mov.L	#.L112, r7
 1205 005c FE 6E 77                		mov.L	[r14,r7], r7
 1206                             		
 1207 005f 7F 07                   	1:jmp	r7
 1208                             		.section	.rodata.DIO_DigitalFilterClkFrequencySet,"a",@progbits
 1209                             		.balign 4
 1210                             		.balign 4
 1211                             	.L112:
 1212 0000 00 00 00 61             		.long .L103
 1213 0004 00 00 00 6A             		.long .L104
 1214 0008 00 00 01 0E             		.long .L99
 1215 000c 00 00 00 81             		.long .L105
 1216 0010 00 00 00 95             		.long .L106
 1217 0014 00 00 00 AB             		.long .L107
 1218 0018 00 00 00 C1             		.long .L108
 1219 001c 00 00 00 D1             		.long .L109
 1220 0020 00 00 00 E3             		.long .L110
 1221 0024 00 00 00 F6             		.long .L111
 1222                             		.section	.text.DIO_DigitalFilterClkFrequencySet
 1223                             	.L103:
1493:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU0.NFCR.BIT.NFCS = divisor;
 1224                             		.loc 1 1493 0
 1225 0061 64 32                   		and #3, r2
 1226                             	.LVL106:
 1227 0063 FB EE 90 86 08          		mov.L	#0x88690, r14
 1228 0068 2E 20                   		bra	.L117
 1229                             	.LVL107:
 1230                             	.L104:
1496:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU1.NFCR.BIT.NFCS = divisor;
 1231                             		.loc 1 1496 0
 1232 006a 64 32                   		and #3, r2
 1233                             	.LVL108:
 1234 006c FB EE 90 86 08          		mov.L	#0x88690, r14
 1235 0071 6C 42                   		shll	#4, r2
 1236 0073 CD E7 01                		mov.B	1[r14], r7
 1237 0076 75 27 CF                		and #-49, r7
 1238 0079 57 72                   		or	r7, r2
 1239 007b C7 E2 01                		mov.B	r2, 1[r14]
1497:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 1240                             		.loc 1 1497 0
 1241 007e 38 90 00                		bra	.L99
 1242                             	.LVL109:
 1243                             	.L105:
1499:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU2.NFCR.BIT.NFCS = divisor;
 1244                             		.loc 1 1499 0
 1245 0081 64 32                   		and #3, r2
 1246                             	.LVL110:
 1247 0083 FB EE 92 86 08          		mov.L	#0x88692, r14
 1248                             		.balign 2,3,1
 1249                             	.L117:
 1250 0088 6C 42                   		shll	#4, r2
 1251 008a CC E7                   		mov.B	[r14], r7
 1252 008c 75 27 CF                		and #-49, r7
 1253 008f 57 72                   		or	r7, r2
 1254 0091 C3 E2                   		mov.B	r2, [r14]
1500:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 1255                             		.loc 1 1500 0
 1256 0093 2E 7B                   		bra	.L99
 1257                             	.LVL111:
 1258                             	.L106:
1502:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU3.NFCR.BIT.NFCS = divisor;
 1259                             		.loc 1 1502 0
 1260 0095 64 32                   		and #3, r2
 1261                             	.LVL112:
 1262 0097 FB EE 00 86 08          		mov.L	#0x88600, r14
 1263 009c 6C 42                   		shll	#4, r2
 1264 009e CD E7 93                		mov.B	147[r14], r7
 1265 00a1 75 27 CF                		and #-49, r7
 1266 00a4 57 72                   		or	r7, r2
 1267 00a6 C7 E2 93                		mov.B	r2, 147[r14]
1503:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 1268                             		.loc 1 1503 0
 1269 00a9 2E 65                   		bra	.L99
 1270                             	.LVL113:
 1271                             	.L107:
1505:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU4.NFCR.BIT.NFCS = divisor;
 1272                             		.loc 1 1505 0
 1273 00ab 64 32                   		and #3, r2
 1274                             	.LVL114:
 1275 00ad FB EE 00 86 08          		mov.L	#0x88600, r14
 1276 00b2 6C 42                   		shll	#4, r2
 1277 00b4 CD E7 94                		mov.B	148[r14], r7
 1278 00b7 75 27 CF                		and #-49, r7
 1279 00ba 57 72                   		or	r7, r2
 1280 00bc C7 E2 94                		mov.B	r2, 148[r14]
1506:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 1281                             		.loc 1 1506 0
 1282 00bf 2E 4F                   		bra	.L99
 1283                             	.LVL115:
 1284                             	.L108:
1510:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IRQFLTC0.BIT.FCLKSEL0 = divisor;
 1285                             		.loc 1 1510 0
 1286 00c1 FB EE 00 70 08          		mov.L	#0x87000, r14
 1287 00c6 64 32                   		and #3, r2
 1288                             	.LVL116:
 1289 00c8 DE E7 8A 02             		mov.W	1300[r14], r7
 1290 00cc 75 27 FC                		and #-4, r7
 1291 00cf 2E 39                   		bra	.L116
 1292                             	.LVL117:
 1293                             	.L109:
1513:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IRQFLTC0.BIT.FCLKSEL1 = divisor;
 1294                             		.loc 1 1513 0
 1295 00d1 FB EE 00 70 08          		mov.L	#0x87000, r14
 1296 00d6 64 32                   		and #3, r2
 1297                             	.LVL118:
 1298 00d8 6C 22                   		shll	#2, r2
 1299 00da DE E7 8A 02             		mov.W	1300[r14], r7
 1300 00de 75 27 F3                		and #-13, r7
 1301 00e1 2E 27                   		bra	.L116
 1302                             	.LVL119:
 1303                             	.L110:
1516:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IRQFLTC0.BIT.FCLKSEL5 = divisor;
 1304                             		.loc 1 1516 0
 1305 00e3 FB EE 00 70 08          		mov.L	#0x87000, r14
 1306 00e8 64 32                   		and #3, r2
 1307                             	.LVL120:
 1308 00ea 6C A2                   		shll	#10, r2
 1309 00ec DE E7 8A 02             		mov.W	1300[r14], r7
 1310 00f0 76 27 FF F3             		and #0xfffff3ff, r7
 1311 00f4 2E 14                   		bra	.L116
 1312                             	.LVL121:
 1313                             	.L111:
1519:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IRQFLTC0.BIT.FCLKSEL6 = divisor;
 1314                             		.loc 1 1519 0
 1315 00f6 FB EE 00 70 08          		mov.L	#0x87000, r14
 1316 00fb 64 32                   		and #3, r2
 1317                             	.LVL122:
 1318 00fd 6C C2                   		shll	#12, r2
 1319 00ff DE E7 8A 02             		mov.W	1300[r14], r7
 1320 0103 76 27 FF CF             		and #0xffffcfff, r7
 1321 0107 03                      		.balign 2,3,1
 1322                             	.L116:
 1323 0108 57 72                   		or	r7, r2
 1324 010a DB E2 8A 02             		mov.W	r2, 1300[r14]
 1325                             		.balign 2,3,2
 1326                             	.L99:
1527:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DIO_SetDigitalFltClkFreq */
 1327                             		.loc 1 1527 0
 1328 010e 3F 77 01                		rtsd	#4, r7-r7
 1329                             	.LFE44:
 1331 0111 03                      		.section	.text.DIO_DigitalFilterClkFrequencyGet,"ax",@progbits
 1332                             		.global	_DIO_DigitalFilterClkFrequencyGet
 1334                             	_DIO_DigitalFilterClkFrequencyGet:
 1335                             	.LFB45:
1533:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 1336                             		.loc 1 1533 0
 1337                             	.LVL123:
1538:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     j = DIO_CheckDigitalFilterPin(pMap);
 1338                             		.loc 1 1538 0
 1339 0000 05 00 00 00             		bsr	_DIO_CheckDigitalFilterPin
 1340                             	.LVL124:
1540:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if (j < DIGITAL_FILTER_MAP_SIZE)
 1341                             		.loc 1 1540 0
 1342 0004 5B 11                   		movu.B	r1, r1
 1343 0006 75 51 17                		cmp	#23, r1
 1344 0009 25 05 38 82 00          		bgtu	.L131
1542:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(NoiseFilterPinMap[j].digital_filter_peripheral)
 1345                             		.loc 1 1542 0
 1346 000e 63 C1                   		mul	#12, r1
 1347                             	.LVL125:
 1348 0010 70 11 08 00 00 00       		add	#_NoiseFilterPinMap+8, r1
 1349 0016 59 1E 03                		movu.B	3[r1], r14
 1350 0019 61 9E                   		cmp	#9, r14
 1351 001b 24 75                   		bgtu	.L132
 1352 001d FB 42 00 00 00 00       		mov.L	#.L129, r4
 1353 0023 FE 6E 4E                		mov.L	[r14,r4], r14
 1354                             		
 1355 0026 7F 0E                   	1:jmp	r14
 1356                             		.section	.rodata.DIO_DigitalFilterClkFrequencyGet,"a",@progbits
 1357                             		.balign 4
 1358                             		.balign 4
 1359                             	.L129:
 1360 0000 00 00 00 28             		.long .L120
 1361 0004 00 00 00 2F             		.long .L121
 1362 0008 00 00 00 90             		.long .L132
 1363 000c 00 00 00 3C             		.long .L122
 1364 0010 00 00 00 46             		.long .L123
 1365 0014 00 00 00 50             		.long .L124
 1366 0018 00 00 00 5A             		.long .L125
 1367 001c 00 00 00 65             		.long .L126
 1368 0020 00 00 00 72             		.long .L127
 1369 0024 00 00 00 7F             		.long .L128
 1370                             		.section	.text.DIO_DigitalFilterClkFrequencyGet
 1371                             	.L120:
1546:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             divisor = MTU0.NFCR.BIT.NFCS;
 1372                             		.loc 1 1546 0
 1373 0028 FB EE 90 86 08          		mov.L	#0x88690, r14
 1374 002d 2E 15                   		bra	.L136
 1375                             	.L121:
1549:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             divisor = MTU1.NFCR.BIT.NFCS;
 1376                             		.loc 1 1549 0
 1377 002f FB EE 90 86 08          		mov.L	#0x88690, r14
 1378 0034 CD EE 01                		mov.B	1[r14], r14
 1379 0037 03                      		.balign 2,3,1
 1380                             	.L135:
 1381 0038 68 4E                   		shlr	#4, r14
 1382 003a 2E 50                   		bra	.L134
 1383                             	.L122:
1552:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             divisor = MTU2.NFCR.BIT.NFCS;
 1384                             		.loc 1 1552 0
 1385 003c FB EE 92 86 08          		mov.L	#0x88692, r14
 1386 0041 03                      		.balign 2,3,5
 1387                             	.L136:
 1388 0042 CC EE                   		mov.B	[r14], r14
 1389 0044 2E F4                   		bra	.L135
 1390                             	.L123:
1555:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             divisor = MTU3.NFCR.BIT.NFCS;
 1391                             		.loc 1 1555 0
 1392 0046 FB EE 00 86 08          		mov.L	#0x88600, r14
 1393 004b CD EE 93                		mov.B	147[r14], r14
 1394 004e 2E EA                   		bra	.L135
 1395                             	.L124:
1558:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             divisor = MTU4.NFCR.BIT.NFCS;
 1396                             		.loc 1 1558 0
 1397 0050 FB EE 00 86 08          		mov.L	#0x88600, r14
 1398 0055 CD EE 94                		mov.B	148[r14], r14
 1399 0058 2E E0                   		bra	.L135
 1400                             	.L125:
1564:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             divisor = ICU.IRQFLTC0.BIT.FCLKSEL0;
 1401                             		.loc 1 1564 0
 1402 005a FB EE 00 70 08          		mov.L	#0x87000, r14
 1403 005f DE EE 8A 02             		mov.W	1300[r14], r14
 1404 0063 2E 27                   		bra	.L134
 1405                             	.L126:
1567:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             divisor = ICU.IRQFLTC0.BIT.FCLKSEL1;
 1406                             		.loc 1 1567 0
 1407 0065 FB EE 00 70 08          		mov.L	#0x87000, r14
 1408 006a DE EE 8A 02             		mov.W	1300[r14], r14
 1409 006e 68 2E                   		shlr	#2, r14
 1410 0070 2E 1A                   		bra	.L134
 1411                             	.L127:
1570:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             divisor = ICU.IRQFLTC0.BIT.FCLKSEL5;
 1412                             		.loc 1 1570 0
 1413 0072 FB EE 00 70 08          		mov.L	#0x87000, r14
 1414 0077 DE EE 8A 02             		mov.W	1300[r14], r14
 1415 007b 68 AE                   		shlr	#10, r14
 1416 007d 2E 0D                   		bra	.L134
 1417                             	.L128:
1573:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             divisor = ICU.IRQFLTC0.BIT.FCLKSEL6;
 1418                             		.loc 1 1573 0
 1419 007f FB EE 00 70 08          		mov.L	#0x87000, r14
 1420 0084 DE EE 8A 02             		mov.W	1300[r14], r14
 1421 0088 68 CE                   		shlr	#12, r14
 1422                             		.balign 2,3,1
 1423                             	.L134:
 1424 008a 64 3E                   		and #3, r14
 1425                             	.LVL126:
1574:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
 1426                             		.loc 1 1574 0
 1427 008c 09                      		bra	.L130
 1428                             	.LVL127:
 1429                             	.L131:
1536:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint16_t frequency_khz = (uint16_t) CLK_GetInternalClockSync() / 1000;
 1430                             		.loc 1 1536 0
 1431 008d 66 B1                   		mov	#11, r1
 1432                             	.LVL128:
 1433 008f 0B                      		bra	.L119
 1434                             	.L132:
1542:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(NoiseFilterPinMap[j].digital_filter_peripheral)
 1435                             		.loc 1 1542 0
 1436 0090 66 01                   		mov	#0, r1
 1437                             	.LVL129:
 1438                             		.balign 2,3,1
 1439                             	.L119:
1599:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return frequency_khz;
 1440                             		.loc 1 1599 0
 1441 0092 5F 11                   		movu.W	r1, r1
 1442 0094 02                      		rts
 1443                             	.LVL130:
 1444                             	.L130:
4909:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4910:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
4911:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_StopClockSourceMulti
4912:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:  stops the countes & reset its value
4913:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Complete me and Test me!
4914:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
4915:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_StopClockSourceMulti(uint32_t uBmp)
4916:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
4917:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	uint32_t i=0, msk =0, bmp=0;
4918:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4919:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	bmp = TMR_GetMultiBmp(uBmp);
4920:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4921:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	MTU.TSTR.BYTE &= ~bmp;
4922:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4923:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	for(i=0, msk=1; i<HAL_NUM_HW_CNTR; i++, msk<<=1)
4924:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	{
4925:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		if( uBmp & msk)
4926:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		{
4927:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			TMR_SetCounter(i, 0);
4928:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		}
4929:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	}
4930:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4931:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* TMR_SetClockSource*/
4932:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4933:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
4934:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_SetClockSourceMulti
4935:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:  Starts the timer &  enable it
4936:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Complete me and Test me!
4937:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
4938:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_SetClockSourceMulti(uint32_t uBmp)
4939:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
4940:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	uint32_t bmp=0;
4941:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	bmp = TMR_GetMultiBmp(uBmp);
4942:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4943:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	MTU.TSTR.BYTE |= bmp;
4944:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* TMR_SetClockSourceMulti*/
4945:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4946:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
4947:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_SetChannelOutputMode
4948:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: This function configures the output mode for the match event and associates the fun
4949:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
4950:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Test me!
4951:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
4952:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_SetChannelOutputMode( TMR_CHAddressType chId, uint8_t mode, bool_t inversion)
4953:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
4954:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     volatile unsigned char *p1=0;
4955:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     volatile unsigned char *p2=0;
4956:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     volatile unsigned char *p3=0;
4957:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     unsigned char value=0;
4958:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     unsigned char bitNum=0;
4959:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4960:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /**/
4961:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch( mode )
4962:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4963:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case TMR_CH_OC_OFF:	/*output off*/
4964:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*this should not be done because already done in TMR_SetChannelOutputCompare*/
4965:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     	mode = MTUO_TIOR_MODE_PIN_IO;
4966:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4967:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case TMR_CH_OC_TOGGLE_T1:
4968:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( inversion )
4969:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
4970:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             mode = MTUO_TIOR_MODE_OUTPUT_0T;
4971:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
4972:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
4973:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
4974:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             mode=MTUO_TIOR_MODE_OUTPUT_1T;
4975:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
4976:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4977:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case TMR_CH_OC_PIN_HIGH:
4978:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = MTUO_TIOR_MODE_OUTPUT_01;
4979:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4980:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case TMR_CH_OC_PIN_LOW:
4981:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = MTUO_TIOR_MODE_OUTPUT_10;
4982:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4983:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
4984:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = MTUO_TIOR_MODE_OUTPUT_PROIBITED;
4985:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
4986:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end switch*/
4987:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4988:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
4989:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(mode != MTUO_TIOR_MODE_OUTPUT_PROIBITED)
4990:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
4991:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     	switch (chId)
4992:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		{
4993:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			/*MTU0*/
4994:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case HAL_CH_TGRA0:	/* (MTU0, MTIOC0A),PB3,Pin36*/
4995:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = &PORTB.PDR.BYTE;
4996:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = &PORTB.PMR.BYTE;
4997:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01; /* PB3 is select as TMO0 function*/
4998:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 3;
4999:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.PB3PFS.BYTE;
5000:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5001:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
5002:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case HAL_CH_TGRB0:/* (MTUO, MTI0C0B), (P15,Pin19), (PA1,Pin44)*/
5003:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB0_ON_PA1)
5004:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = & PORTA.PDR.BYTE;
5005:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = & PORTA.PMR.BYTE;
5006:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5007:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 1;
5008:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &	MPC.PA1PFS.BYTE;
5009:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
5010:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = &PORT1.PDR.BYTE;
5011:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = &PORT1.PMR.BYTE;
5012:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01; /* P15 is select as MTI0C0B*/
5013:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 5;
5014:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.P15PFS.BYTE;
5015:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
5016:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
5017:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case HAL_CH_TGRC0:/*((MTUO, MTIOCOC), P32, Pin12*/
5018:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRC0_ON_PB1)
5019:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = & PORTB.PDR.BYTE;
5020:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = & PORTB.PMR.BYTE;
5021:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5022:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 1;
5023:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &	MPC.PB1PFS.BYTE;
5024:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
5025:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = &PORT3.PDR.BYTE;
5026:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = &PORT3.PMR.BYTE;
5027:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5028:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 2;
5029:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.P32PFS.BYTE;
5030:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
5031:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
5032:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case HAL_CH_TGRD0: /*((MTUO, MTIOCOD),(PA3,Pin43)*/
5033:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = &PORTA.PDR.BYTE;
5034:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = &PORTA.PMR.BYTE;
5035:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5036:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 3;
5037:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.PA3PFS.BYTE;
5038:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
5039:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			/*MTU1*/
5040:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case HAL_CH_TGRA1:/* (MTU1, MTIOC1A, PE4, Pin47)*/
5041:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = &PORTE.PDR.BYTE;
5042:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = &PORTE.PMR.BYTE;
5043:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x02;
5044:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 4;
5045:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.PE4PFS.BYTE;
5046:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
5047:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case HAL_CH_TGRB1:/* (MTU1, MTIOC1B), (PB5, Pin35)*/
5048:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = &PORTB.PDR.BYTE;
5049:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = &PORTB.PMR.BYTE;
5050:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x02;
5051:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 5;
5052:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.PB5PFS.BYTE;
5053:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
5054:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			/*MTU2*/
5055:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case HAL_CH_TGRA2:/*(MTU2, MTIOC2A), (P26,Pin16), (PB5,Pin35)*/
5056:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRA2_ON_PB5)
5057:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = & PORTB.PDR.BYTE;
5058:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = & PORTB.PMR.BYTE;
5059:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5060:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 5;
5061:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &	MPC.PB5PFS.BYTE;
5062:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
5063:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = &PORT2.PDR.BYTE;
5064:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = &PORT2.PMR.BYTE;
5065:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5066:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 6;
5067:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.P26PFS.BYTE;
5068:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
5069:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
5070:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case HAL_CH_TGRB2:/*(MTU2, MTIOC2B), (P27,Pin15), (PE5,Pin46)*/
5071:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB2_ON_PE5)
5072:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = & PORTE.PDR.BYTE;
5073:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = & PORTE.PMR.BYTE;
5074:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x02;
5075:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 5;
5076:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &	MPC.PE5PFS.BYTE;
5077:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
5078:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = &PORT2.PDR.BYTE;
5079:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = &PORT2.PMR.BYTE;
5080:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5081:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 7;
5082:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.P27PFS.BYTE;
5083:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
5084:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
5085:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			/*MTU3*/
5086:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case HAL_CH_TGRA3:/*(MTU3, MTIOC3A), (P14,Pin20),(PC7,Pin27),(P17,Pin17)*/
5087:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRA3_ON_PC7)
5088:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = & PORTC.PDR.BYTE;
5089:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = & PORTC.PMR.BYTE;
5090:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5091:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 7;
5092:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &	MPC.PC7PFS.BYTE;
5093:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRA3_ON_P17)
5094:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = & PORT1.PDR.BYTE;
5095:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = & PORT1.PMR.BYTE;
5096:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5097:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 7;
5098:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &	MPC.P17PFS.BYTE;
5099:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
5100:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = &PORT1.PDR.BYTE;
5101:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = &PORT1.PMR.BYTE;
5102:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5103:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 4;
5104:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.P14PFS.BYTE;
5105:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
5106:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
5107:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case HAL_CH_TGRB3:/*(MTU3, MTIOC3B), (PC5,Pin29),(P17,Pin17),(PB7,Pin33)*/
5108:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB3_ON_PB7)
5109:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = & PORTB.PDR.BYTE;
5110:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = & PORTB.PMR.BYTE;
5111:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5112:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 7;
5113:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &	MPC.PB7PFS.BYTE;
5114:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRB3_ON_P17)
5115:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = & PORT1.PDR.BYTE;
5116:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = & PORT1.PMR.BYTE;
5117:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x02;
5118:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 7;
5119:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &	MPC.P17PFS.BYTE;
5120:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
5121:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = &PORTC.PDR.BYTE;
5122:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = &PORTC.PMR.BYTE;
5123:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5124:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 5;
5125:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.PC5PFS.BYTE;
5126:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
5127:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
5128:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case HAL_CH_TGRC3:/* (MTU3, MTIOC3C), (PC6,Pin 28), (P16, Pin18),*/
5129:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRC3_ON_P16)
5130:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = & PORT1.PDR.BYTE;
5131:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = & PORT1.PMR.BYTE;
5132:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5133:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 6;
5134:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &	MPC.P16PFS.BYTE;
5135:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
5136:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = &PORTC.PDR.BYTE;
5137:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = &PORTC.PMR.BYTE;
5138:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5139:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 6;
5140:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.PC6PFS.BYTE;
5141:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
5142:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
5143:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case HAL_CH_TGRD3:/* (MTU3, MTIOC3D), (PB6, Pin34),P16,Pin 18), (PC4, Pin30)*/
5144:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRD3_ON_P16)
5145:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = & PORT1.PDR.BYTE;
5146:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = & PORT1.PMR.BYTE;
5147:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x02;
5148:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 6;
5149:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &	MPC.P16PFS.BYTE;
5150:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRD3_ON_PC4)
5151:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = & PORTC.PDR.BYTE;
5152:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = & PORTC.PMR.BYTE;
5153:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5154:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 4;
5155:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &	MPC.PC4PFS.BYTE;
5156:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
5157:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = &PORTB.PDR.BYTE;
5158:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = &PORTB.PMR.BYTE;
5159:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5160:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 6;
5161:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.PB6PFS.BYTE;
5162:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
5163:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			MTU.TOER.BIT.OE3D = 1;
5164:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
5165:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			/*MTU4*/
5166:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case HAL_CH_TGRA4:/* (MTU4, MTIOC4A), (PA0,Pin45),(PB3,Pin36),(PE2,Pin49),*/
5167:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRA4_ON_PB3)
5168:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = & PORTB.PDR.BYTE;
5169:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = & PORTB.PMR.BYTE;
5170:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x02;
5171:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 3;
5172:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &	MPC.PB3PFS.BYTE;
5173:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRA4_ON_PE2)
5174:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = & PORTE.PDR.BYTE;
5175:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = & PORTE.PMR.BYTE;
5176:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5177:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 2;
5178:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &	MPC.PE2PFS.BYTE;
5179:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
5180:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = &PORTA.PDR.BYTE;
5181:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = &PORTA.PMR.BYTE;
5182:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5183:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 0;
5184:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.PA0PFS.BYTE;
5185:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
5186:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
5187:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case HAL_CH_TGRB4:/* (MTU4, MTIOC4B), (PC2,Pin32),(P30,Pin14),(P54,Pin26),(PE3,Pin48)*/
5188:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRB4_ON_P30)
5189:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = & PORT3.PDR.BYTE;
5190:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = & PORT3.PMR.BYTE;
5191:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5192:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 0;
5193:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &	MPC.P30PFS.BYTE;
5194:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRB4_ON_P54)
5195:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = & PORT5.PDR.BYTE;
5196:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = & PORT5.PMR.BYTE;
5197:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5198:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 4;
5199:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &	MPC.P54PFS.BYTE;
5200:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRB4_ON_PE3)
5201:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = & PORTE.PDR.BYTE;
5202:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = & PORTE.PMR.BYTE;
5203:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5204:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 3;
5205:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &	MPC.PE3PFS.BYTE;
5206:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
5207:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = &PORTC.PDR.BYTE;
5208:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = &PORTC.PMR.BYTE;
5209:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5210:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 2;
5211:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.PC2PFS.BYTE;
5212:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
5213:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			MTU.TOER.BIT.OE4B = 1;
5214:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
5215:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case HAL_CH_TGRC4:/* (MTU4, MTIOC4C), (PB1, Pin37),(PE5,Pin46),(PE1,Pin50)*/
5216:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRC4_ON_PE5)
5217:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = & PORTE.PDR.BYTE;
5218:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = & PORTE.PMR.BYTE;
5219:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5220:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 5;
5221:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &	MPC.PE5PFS.BYTE;
5222:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRC4_ON_PE1)
5223:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = & PORTE.PDR.BYTE;
5224:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = & PORTE.PMR.BYTE;
5225:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5226:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 1;
5227:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &	MPC.PE1PFS.BYTE;
5228:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
5229:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = &PORTB.PDR.BYTE;
5230:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = &PORTB.PMR.BYTE;
5231:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x02;
5232:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 1;
5233:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.PB1PFS.BYTE;
5234:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
5235:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			MTU.TOER.BIT.OE4C = 1;
5236:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
5237:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		case HAL_CH_TGRD4:/* (MTU4, MTIOC4D), (P31, Pin13),(P55,Pin25),(PC3,Pin31), (PE4,Pin47)*/
5238:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_CH_TGRD4_ON_P55)
5239:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = & PORT5.PDR.BYTE;
5240:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = & PORT5.PMR.BYTE;
5241:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5242:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 5;
5243:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &	MPC.P55PFS.BYTE;
5244:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRD4_ON_PC3)
5245:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = & PORTC.PDR.BYTE;
5246:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = & PORTC.PMR.BYTE;
5247:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5248:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 3;
5249:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &	MPC.PC3PFS.BYTE;
5250:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #elif defined(HAL_CH_TGRD4_ON_PE4)
5251:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = & PORTE.PDR.BYTE;
5252:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = & PORTE.PMR.BYTE;
5253:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
5254:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 4;
5255:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &	MPC.PE4PFS.BYTE;
5256:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
5257:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = &PORT3.PDR.BYTE;
5258:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = &PORT3.PMR.BYTE;
5259:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x02;
5260:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 1;
5261:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.P31PFS.BYTE;
5262:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
5263:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			MTU.TOER.BIT.OE4D = 1;
5264:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
5265:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		default:
5266:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			HAL_ErrorHandler(0);
5267:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
5268:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		}/*end switch*/
5269:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5270:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		if( p1 != 0 && p2 != 0 && p3 != 0 )
5271:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		{
5272:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			if (mode == MTUO_TIOR_MODE_PIN_IO)
5273:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			{
5274:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 				value = 0;
5275:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 				CLEAR_BIT(*p1, bitNum);				/* as input*/
5276:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 				CLEAR_BIT(*p2, bitNum); 			/* Use pin as general I/O port */
5277:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 				mode = MTUO_TIOR_MODE_OUTPUT_PROIBITED;
5278:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			}
5279:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			else
5280:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			{
5281:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 				SET_BIT(*p1, bitNum);				/* as output*/
5282:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 				SET_BIT(*p2, bitNum); 				/* Use pin as I/O port for peripheral functions*/
5283:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			}
5284:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			DISABLE_PORT_REGISTER_WRITE_PROTECTION();
5285:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			*p3 = value;
5286:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			ENABLE_PORT_REGISTER_WRITE_PROTECTION();
5287:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		}
5288:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	}
5289:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5290:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5291:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     p1 = ChModeRegAddr[chId];
5292:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(p1 != 0)
5293:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
5294:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( GET_BIT(ChModeRegAddr_Nibble, chId))
5295:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
5296:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_H_NIBBLE(*p1, mode);
5297:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
5298:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
5299:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
5300:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_L_NIBBLE(*p1, mode);
5301:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
5302:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
5303:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5304:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end TMR_SetChannelOutputMode*/
5305:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5306:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
5307:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_SetChannelDefaultMode
5308:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: This function configures default modes for the channel, by clearing:
5309:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 				- reset and stop on MCR
5310:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 				- capture edges on CCR
5311:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 				- external match control on EMR (if the timer is not running!!)
5312:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 				- match mode in PWM register
5313:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: This function set at defautl value MTUx register
5314:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
5315:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
5316:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** static void TMR_SetChannelDefaultMode( TMR_CHAddressType chId)
5317:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
5318:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     volatile uint8_t* p1;
5319:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5320:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5321:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
5322:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (chId)
5323:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
5324:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA0:
5325:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE(MTU0.TIORH.BYTE,MTU_TIOR_MODE_OUTPUT_PROIBITED);
5326:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5327:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB0:
5328:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE(MTU0.TIORH.BYTE, MTU_TIOR_MODE_OUTPUT_PROIBITED);
5329:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5330:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC0:
5331:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE(MTU0.TIORL.BYTE, MTU_TIOR_MODE_OUTPUT_PROIBITED);
5332:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5333:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD0:
5334:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE(MTU0.TIORL.BYTE, MTU_TIOR_MODE_OUTPUT_PROIBITED);
5335:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5336:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU1*/
5337:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA1:
5338:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE(MTU1.TIOR.BYTE, MTU_TIOR_MODE_OUTPUT_PROIBITED);
5339:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5340:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB1:
5341:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE(MTU1.TIOR.BYTE, MTU_TIOR_MODE_OUTPUT_PROIBITED);
5342:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5343:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU2*/
5344:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA2:
5345:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE(MTU2.TIOR.BYTE, MTU_TIOR_MODE_OUTPUT_PROIBITED);
5346:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5347:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB2:
5348:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE(MTU2.TIOR.BYTE, MTU_TIOR_MODE_OUTPUT_PROIBITED);
5349:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5350:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU3*/
5351:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA3:
5352:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE(MTU3.TIORH.BYTE, MTU_TIOR_MODE_OUTPUT_PROIBITED);
5353:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5354:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB3:
5355:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU.TOER.BIT.OE3B = 0;
5356:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE(MTU3.TIORH.BYTE, MTU_TIOR_MODE_OUTPUT_PROIBITED);
5357:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5358:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC3:
5359:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE(MTU3.TIORL.BYTE, MTU_TIOR_MODE_OUTPUT_PROIBITED);
5360:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5361:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD3:
5362:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU.TOER.BIT.OE3D = 0;
5363:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE(MTU3.TIORL.BYTE, MTU_TIOR_MODE_OUTPUT_PROIBITED);
5364:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5365:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         /*MTU4*/
5366:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRA4:
5367:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU.TOER.BIT.OE4A = 0;
5368:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE(MTU4.TIORH.BYTE, MTU_TIOR_MODE_OUTPUT_PROIBITED);
5369:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5370:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRB4:
5371:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU.TOER.BIT.OE4B = 0;
5372:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE(MTU4.TIORH.BYTE, MTU_TIOR_MODE_OUTPUT_PROIBITED);
5373:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5374:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRC4:
5375:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU.TOER.BIT.OE4C = 0;
5376:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE(MTU4.TIORL.BYTE, MTU_TIOR_MODE_OUTPUT_PROIBITED);
5377:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5378:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_CH_TGRD4:
5379:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU.TOER.BIT.OE4D = 0;
5380:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE(MTU4.TIORL.BYTE, MTU_TIOR_MODE_OUTPUT_PROIBITED);
5381:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5382:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
5383:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
5384:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5385:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end switch*/
5386:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
5387:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     p1 = ChModeRegAddr[chId];
5388:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( GET_BIT(ChModeRegAddr_Nibble, chId))
5389:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
5390:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE(*p1, MTU_TIOR_MODE_OUTPUT_PROIBITED);
5391:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
5392:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
5393:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
5394:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE(*p1, MTU_TIOR_MODE_OUTPUT_PROIBITED);
5395:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
5396:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_SetChannelDefaultMode*/
5397:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5398:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
5399:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** * Date: 05/07/2012
5400:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** * Function: TMR_SetTimerDefaultMode
5401:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** * Description: Set the TMR registers at default value.
5402:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** * Notes:
5403:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	- AE: To verify the correct behaviour
5404:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** */
5405:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_SetTimerDefaultMode( TMR_CNTAddressType tmdID) /* TODO: cosa fa opera sul canale osul time
5406:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
5407:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     volatile uint8_t *p1=0;
5408:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t i = 0;
5409:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(tmdID)
5410:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
5411:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU0:
5412:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = &MTU0.TCR.BYTE;
5413:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
5414:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         for(i = 0; i<5 ; i++)
5415:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
5416:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if(i != 5)
5417:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 *(&MTU0.TCR.BYTE + i) = 0x00;
5418:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
5419:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
5420:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5421:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU1:
5422:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & MTU1.TCR.BYTE;
5423:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
5424:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         for(i = 0; i<5 ; i++)
5425:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
5426:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if(i != 5)
5427:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 *(&MTU1.TCR.BYTE + i) = 0x00;
5428:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
5429:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
5430:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5431:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU2:
5432:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & MTU2.TCR.BYTE;
5433:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
5434:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         for(i = 0; i<5 ; i++)
5435:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
5436:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if(i != 5)
5437:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 *(&MTU2.TCR.BYTE + i) = 0x00;
5438:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
5439:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
5440:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5441:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU3:
5442:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & MTU3.TCR.BYTE;
5443:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
5444:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         for(i = 0; i<5 ; i++)
5445:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
5446:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if(i != 5)
5447:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 *(&MTU3.TCR.BYTE + i) = 0x00;
5448:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
5449:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
5450:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5451:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case HAL_TMR_MTU4:
5452:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & MTU4.TCR.BYTE;
5453:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
5454:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         for(i = 0; i<5 ; i++)
5455:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
5456:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if(i != 5)
5457:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 *(&MTU4.TCR.BYTE + i) = 0x00;
5458:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
5459:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
5460:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5461:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
5462:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
5463:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5464:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end switch*/
5465:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5466:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( p1 != 0)
5467:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
5468:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         for(i = 0; i<5 ; i++)
5469:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
5470:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             *(p1 + i) = 0x00;
5471:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
5472:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
5473:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5474:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_SetChannelDefaultMode*/
5475:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5476:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
5477:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_DeInitChannel
5478:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: This function is used to bring the channel to its orginal state
5479:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
5480:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: To do!
5481:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
5482:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void TMR_DeInitChannel( TMR_CHAddressType pChannel)
5483:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
5484:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     TMR_DisableCHI(pChannel);
5485:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     TMR_SetChannelDefaultMode(pChannel); /*TODO: verificare*/
5486:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     TMR_ClearCHF(pChannel);
5487:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     TMR_ClearChannelPulses(pChannel);
5488:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* TMR_DeInitChannel*/
5489:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5490:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5491:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
5492:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: TMR_GetDelta
5493:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
5494:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
5495:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** Period_ValueType TMR_GetDelta(TMR_CNTAddressType trmId, Period_ValueType CntrVal_OLD, Period_ValueT
5496:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
5497:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     Period_ValueType period;
5498:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( CntrVal_CURR > CntrVal_OLD)
5499:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
5500:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return ((Period_ValueType) ((uint16_t) CntrVal_CURR - (uint16_t) CntrVal_OLD));
5501:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
5502:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5503:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     period = TMR_GetModulo(trmId, 0);
5504:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return ((period - CntrVal_OLD)+CntrVal_CURR);
5505:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5506:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end Period_ValueType*/
5507:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5508:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5509:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
5510:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  END TMR Class HAL Support                                     *
5511:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
5512:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5513:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
5514:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  BEGIN I2C Class HAL Support                                   *
5515:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
5516:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5517:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5518:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
5519:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  BEGIN IRQ Class HAL Support                                   *
5520:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
5521:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_IRQ_SUPPORT)
5522:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5523:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
5524:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** * Function: IRQ_Init
5525:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** * Description:
5526:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** *
5527:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** */
5528:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void IRQ_Init(uint8_t irq_id)
5529:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
5530:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(irq_id)
5531:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
5532:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ0_PH1:
5533:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         DISABLE_PORT_REGISTER_WRITE_PROTECTION();
5534:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_PH1_PORT_PIN_AS_IRQ0;
5535:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ENABLE_PORT_REGISTER_WRITE_PROTECTION();
5536:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[_HAL_RX210_ICU_IRQ0_VECTOR].BYTE = IRQ0_INTERRUPT_PRIORITY;
5537:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5538:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ1_PH2:
5539:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         DISABLE_PORT_REGISTER_WRITE_PROTECTION();
5540:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_PH2_PORT_PIN_AS_IRQ1;
5541:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ENABLE_PORT_REGISTER_WRITE_PROTECTION();
5542:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[_HAL_RX210_ICU_IRQ1_VECTOR].BYTE = IRQ1_INTERRUPT_PRIORITY;
5543:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5544:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ5_P15:
5545:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         DISABLE_PORT_REGISTER_WRITE_PROTECTION();
5546:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_P15_PORT_PIN_AS_IRQ5;
5547:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ENABLE_PORT_REGISTER_WRITE_PROTECTION();
5548:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[_HAL_RX210_ICU_IRQ5_VECTOR].BYTE = IRQ5_INTERRUPT_PRIORITY;
5549:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5550:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ6_PA3:
5551:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         DISABLE_PORT_REGISTER_WRITE_PROTECTION();
5552:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_PA3_PORT_PIN_AS_IRQ6;
5553:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ENABLE_PORT_REGISTER_WRITE_PROTECTION();
5554:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[_HAL_RX210_ICU_IRQ6_VECTOR].BYTE = IRQ6_INTERRUPT_PRIORITY;
5555:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5556:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_ELCIRQ0_PB0:
5557:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ENABLE_ELC_HW_MODULE();
5558:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.ELSR[18].BYTE |= 0x63;
5559:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.PGR1.BYTE |= ELC_PB0_MASK;
5560:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5561:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ_PB1:
5562:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ENABLE_ELC_HW_MODULE();
5563:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.ELSR[18].BYTE |= 0x63;
5564:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.PGR1.BYTE |= ELC_PB1_MASK;
5565:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5566:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ_PB3:
5567:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ENABLE_ELC_HW_MODULE();
5568:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.ELSR[18].BYTE |= 0x63;
5569:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.PGR1.BYTE |= ELC_PB3_MASK;
5570:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5571:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_ELCIRQ5_PB5:
5572:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ENABLE_ELC_HW_MODULE();
5573:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.ELSR[18].BYTE |= 0x63;
5574:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.PGR1.BYTE |= ELC_PB5_MASK;
5575:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5576:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_ELCIRQ6_PB6:
5577:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ENABLE_ELC_HW_MODULE();
5578:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.ELSR[18].BYTE |= 0x63;
5579:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.PGR1.BYTE |= ELC_PB6_MASK;
5580:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5581:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ_PB7:
5582:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ENABLE_ELC_HW_MODULE();
5583:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.ELSR[18].BYTE |= 0x63;
5584:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.PGR1.BYTE |= ELC_PB7_MASK;
5585:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5586:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/* end swith irq_id*/
5587:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(irq_id == RX210_ELCIRQ0_PB0 || irq_id == RX210_IRQ_PB1 || irq_id == RX210_IRQ_PB3 || irq_id 
5588:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
5589:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.ELCR.BYTE |= 0x80;
5590:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[_HAL_RX210_ICU_ELC_ELSR18L_VECTOR].BYTE = ELC_ELSR18L_INTERRUPT_PRIORITY;
5591:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end if*/
5592:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end IRQ_INIT*/
5593:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5594:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
5595:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: IRQ_SetEdge
5596:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
5597:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
5598:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
5599:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
5600:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5601:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void IRQ_SetEdge(uint8_t edge, uint8_t irq_id)
5602:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
5603:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*MS non ottimizzare peggiora la size */
5604:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(irq_id)
5605:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
5606:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ0_PH1:
5607:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(edge)
5608:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_CONTROL_REGISTER(IRQ0) = _HAL_RX210_DETECTION_SENSE_RAISING_EDGE;
5609:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
5610:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_CONTROL_REGISTER(IRQ0) = _HAL_RX210_DETECTION_SENSE_FALLING_EDGE;
5611:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5612:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ1_PH2:
5613:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(edge)
5614:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_CONTROL_REGISTER(IRQ1) = _HAL_RX210_DETECTION_SENSE_RAISING_EDGE;
5615:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
5616:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_CONTROL_REGISTER(IRQ1) = _HAL_RX210_DETECTION_SENSE_FALLING_EDGE;
5617:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5618:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ5_P15:
5619:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(edge)
5620:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_CONTROL_REGISTER(IRQ5) = _HAL_RX210_DETECTION_SENSE_RAISING_EDGE;
5621:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
5622:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_CONTROL_REGISTER(IRQ5) = _HAL_RX210_DETECTION_SENSE_FALLING_EDGE;
5623:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5624:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ6_PA3:
5625:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(edge)
5626:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_CONTROL_REGISTER(IRQ6) = _HAL_RX210_DETECTION_SENSE_RAISING_EDGE;
5627:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
5628:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_CONTROL_REGISTER(IRQ6) = _HAL_RX210_DETECTION_SENSE_FALLING_EDGE;
5629:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5630:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
5631:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(    irq_id == RX210_ELCIRQ0_PB0
5632:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_IRQ_PB1
5633:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_IRQ_PB3
5634:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_ELCIRQ5_PB5
5635:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_ELCIRQ6_PB6
5636:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_IRQ_PB7)
5637:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
5638:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(edge)
5639:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ELC.PGC1.BYTE = _HAL_RX210_DETECTION_SENSE_ELC_RAISING_EDGE;
5640:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
5641:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ELC.PGC1.BYTE = _HAL_RX210_DETECTION_SENSE_ELC_FALLING_EDGE;
5642:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
5643:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end IRQ_SEtEdge*/
5644:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5645:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
5646:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Macro: IRQ_IntEnable(enable)
5647:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Decritpion:
5648:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
5649:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 	- enable possible vale are 1/0 enable/disable
5650:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
5651:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 	- IRQ1; IRQ5, IRQ6 inserted
5652:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
5653:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5654:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void IRQ_IntEnable(uint8_t enable, uint8_t irq_id)
5655:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
5656:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(enable)
5657:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
5658:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(irq_id)
5659:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
5660:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case RX210_IRQ0_PH1:
5661:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_IRQ0_VECTOR) = 0x00;
5662:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_DIGITAL_FILTER_ENABLE_REGISTER |= IRQ0_DIGITAL_FILTER_MASK;
5663:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_INTERRUPT_REQUEST_ENABLE_REGISTER(_HAL_RX210_ICU_IRQ_IER_REGISTER) |= _HAL_R
5664:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
5665:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case RX210_IRQ1_PH2:
5666:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_IRQ1_VECTOR) = 0x00;
5667:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_DIGITAL_FILTER_ENABLE_REGISTER |= IRQ1_DIGITAL_FILTER_MASK;
5668:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_INTERRUPT_REQUEST_ENABLE_REGISTER(_HAL_RX210_ICU_IRQ_IER_REGISTER) |= _HAL_R
5669:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
5670:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case RX210_IRQ5_P15:
5671:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_IRQ5_VECTOR) = 0x00;
5672:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_DIGITAL_FILTER_ENABLE_REGISTER |= IRQ5_DIGITAL_FILTER_MASK;
5673:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_INTERRUPT_REQUEST_ENABLE_REGISTER(_HAL_RX210_ICU_IRQ_IER_REGISTER) |= _HAL_R
5674:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
5675:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         case RX210_IRQ6_PA3:
5676:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_IRQ6_VECTOR) = 0x00;
5677:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_DIGITAL_FILTER_ENABLE_REGISTER |= IRQ6_DIGITAL_FILTER_MASK;
5678:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_INTERRUPT_REQUEST_ENABLE_REGISTER(_HAL_RX210_ICU_IRQ_IER_REGISTER) |= _HAL_R
5679:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
5680:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }/*end switch irq_id*/
5681:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(irq_id == RX210_ELCIRQ0_PB0 || irq_id == RX210_IRQ_PB1 || irq_id == RX210_IRQ_PB3 || irq
5682:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
5683:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_ELC_ELSR18L_VECTOR) = 0x00;
5684:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_INTERRUPT_REQUEST_ENABLE_REGISTER(_HAL_RX210_ICU_ELC_IER_REGISTER) |= _HAL_R
5685:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
5686:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end if enable*/
5687:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end IRQ_IntEnable*/
5688:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5689:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
5690:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Macro: IRQ_DeInit
5691:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Clear Interrupt Request Status and Control Register & Disable Bus clock to the IRQ 
5692:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: De Init all IRQ
5693:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
5694:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
5695:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void IRQ_DeInit(uint8_t irq_id)
5696:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
5697:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (irq_id)
5698:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
5699:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ0_PH1:
5700:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_INTERRUPT_REQUEST_ENABLE_REGISTER(_HAL_RX210_ICU_IRQ_IER_REGISTER) &= ~_HAL_RX21
5701:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_IRQ0_VECTOR) = 0x00;
5702:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[_HAL_RX210_ICU_IRQ0_VECTOR].BYTE = 0x00;
5703:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_PH1_PORT_PIN_AS_IO;
5704:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5705:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ1_PH2:
5706:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_INTERRUPT_REQUEST_ENABLE_REGISTER(_HAL_RX210_ICU_IRQ_IER_REGISTER) &= ~_HAL_RX21
5707:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_IRQ1_VECTOR) = 0x00;
5708:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[_HAL_RX210_ICU_IRQ1_VECTOR].BYTE = 0x00;
5709:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_PH2_PORT_PIN_AS_IO;
5710:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5711:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ5_P15:
5712:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_INTERRUPT_REQUEST_ENABLE_REGISTER(_HAL_RX210_ICU_IRQ_IER_REGISTER) &= ~_HAL_RX21
5713:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_IRQ5_VECTOR) = 0x00;
5714:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[_HAL_RX210_ICU_IRQ5_VECTOR].BYTE = 0x00;
5715:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_P15_PORT_PIN_AS_IO;
5716:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5717:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ6_PA3:
5718:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_INTERRUPT_REQUEST_ENABLE_REGISTER(_HAL_RX210_ICU_IRQ_IER_REGISTER) &= ~_HAL_RX21
5719:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_IRQ6_VECTOR) = 0x00;
5720:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[_HAL_RX210_ICU_IRQ6_VECTOR].BYTE = 0x00;
5721:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_PA3_PORT_PIN_AS_IO;
5722:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5723:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end switch*/
5724:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(   irq_id == RX210_ELCIRQ0_PB0
5725:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_IRQ_PB1
5726:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_IRQ_PB3
5727:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_ELCIRQ5_PB5
5728:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_ELCIRQ6_PB6
5729:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_IRQ_PB7)
5730:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
5731:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(ELC.PGR1.BYTE != 0x00)
5732:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
5733:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             switch(irq_id)
5734:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             {
5735:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             case RX210_ELCIRQ0_PB0:
5736:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 ELC.PGR1.BYTE &= ~ELC_PB0_MASK;
5737:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 break;
5738:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             case RX210_IRQ_PB1:
5739:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 ELC.PGR1.BYTE &= ~ELC_PB1_MASK;
5740:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 break;
5741:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             case RX210_IRQ_PB3:
5742:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 ELC.PGR1.BYTE &= ~ELC_PB3_MASK;
5743:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 break;
5744:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             case RX210_ELCIRQ5_PB5:
5745:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 ELC.PGR1.BYTE &= ~ELC_PB5_MASK;
5746:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 break;
5747:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             case RX210_ELCIRQ6_PB6:
5748:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 ELC.PGR1.BYTE &= ~ELC_PB6_MASK;
5749:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 break;
5750:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             case RX210_IRQ_PB7:
5751:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 ELC.PGR1.BYTE &= ~ELC_PB7_MASK;
5752:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 break;
5753:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             }/*end switch*/
5754:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
5755:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else
5756:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
5757:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             DISABLE_ELC_HW_MODULE();
5758:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IPR[_HAL_RX210_ICU_ELC_ELSR18L_VECTOR].BYTE = 0x00;
5759:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_INTERRUPT_REQUEST_ENABLE_REGISTER(_HAL_RX210_ICU_ELC_IER_REGISTER) &= ~_HAL_
5760:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
5761:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end if*/
5762:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end IRQ_DeInit*/
5763:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5764:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
5765:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: IRQ_Acknowledge
5766:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
5767:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: Two NOP cycles are reccomended after the clearing of the interrupt flag in order to take i
5768:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
5769:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
5770:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void IRQ_Acknowledge(uint8_t irq_id)
5771:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
5772:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(irq_id)
5773:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
5774:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ0_PH1:
5775:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_IRQ0_VECTOR) = 0x00;
5776:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5777:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ1_PH2:
5778:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_IRQ1_VECTOR) = 0x00;
5779:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5780:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ5_P15:
5781:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_IRQ5_VECTOR) = 0x00;
5782:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5783:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ6_PA3:
5784:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_IRQ6_VECTOR) = 0x00;
5785:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5786:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end switch*/
5787:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(    irq_id == RX210_ELCIRQ0_PB0
5788:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_IRQ_PB1
5789:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_IRQ_PB3
5790:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_ELCIRQ5_PB5
5791:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_ELCIRQ6_PB6
5792:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_IRQ_PB7)
5793:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
5794:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_ELC_ELSR18L_VECTOR) = 0x00;
5795:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
5796:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end IRQ_Acknowledge*/
5797:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5798:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
5799:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: IRQ_GetEdge
5800:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: GET the interrupt setting edge
5801:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * \return  1 if RAISING_EDGE  0 not rising
5802:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
5803:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
5804:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
5805:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t IRQ_GetEdge(uint8_t irq_id)
5806:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
5807:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	bool_t retVal = 0;
5808:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5809:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	PLT_ASSERT( irq_id >= RX210_IRQ0_PH1 && irq_id <= RX210_IRQ_PB7)
5810:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5811:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(irq_id)
5812:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
5813:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ0_PH1:
5814:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(_HAL_RX210_IRQ_CONTROL_REGISTER(IRQ0) == _HAL_RX210_DETECTION_SENSE_RAISING_EDGE)
5815:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
5816:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5817:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ1_PH2:
5818:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(_HAL_RX210_IRQ_CONTROL_REGISTER(IRQ1) == _HAL_RX210_DETECTION_SENSE_RAISING_EDGE)
5819:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
5820:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5821:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ5_P15:
5822:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(_HAL_RX210_IRQ_CONTROL_REGISTER(IRQ5) == _HAL_RX210_DETECTION_SENSE_RAISING_EDGE)
5823:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
5824:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5825:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ6_PA3:
5826:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(_HAL_RX210_IRQ_CONTROL_REGISTER(IRQ6) == _HAL_RX210_DETECTION_SENSE_RAISING_EDGE)
5827:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
5828:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5829:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end switch*/
5830:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(irq_id == RX210_ELCIRQ0_PB0 || irq_id == RX210_IRQ_PB1 || irq_id == RX210_IRQ_PB3 || irq_id 
5831:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
5832:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if((ELC.PGC1.BYTE &0x03) == _HAL_RX210_DETECTION_SENSE_ELC_RAISING_EDGE)
5833:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
5834:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
5835:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return(retVal);
5836:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end IRQ_GetEdge*/
5837:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5838:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
5839:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: IRQ_pinIsHigh
5840:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Check if the IRQ pin is High
5841:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
5842:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status
5843:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
5844:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t IRQ_pinIsHigh(uint8_t irq_id)
5845:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
5846:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	bool_t retVal = 0;
5847:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	PLT_ASSERT( irq_id >= RX210_IRQ0_PH1 && irq_id <= RX210_IRQ_PB7)
5848:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5849:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(irq_id)
5850:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
5851:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ0_PH1:
5852:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(IRQ0_PIN_STATUS)
5853:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
5854:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5855:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ1_PH2:
5856:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(IRQ1_PIN_STATUS)
5857:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
5858:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5859:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ5_P15:
5860:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(IRQ5_PIN_STATUS)
5861:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
5862:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5863:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ6_PA3:
5864:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(IRQ6_PIN_STATUS)
5865:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
5866:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5867:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_ELCIRQ0_PB0:
5868:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(ELC_IRQ_PB0_STATUS)
5869:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
5870:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5871:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ_PB1:
5872:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(ELC_IRQ_PB1_STATUS)
5873:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
5874:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5875:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ_PB3:
5876:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(ELC_IRQ_PB3_STATUS)
5877:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
5878:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5879:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_ELCIRQ5_PB5:
5880:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(ELC_IRQ_PB5_STATUS)
5881:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
5882:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5883:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_ELCIRQ6_PB6:
5884:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(ELC_IRQ_PB6_STATUS)
5885:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
5886:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5887:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case RX210_IRQ_PB7:
5888:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(ELC_IRQ_PB7_STATUS)
5889:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
5890:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5891:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }/*end switch*/
5892:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return(retVal);
5893:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end IRQ_pinIsHigh*/
5894:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif /*HAL_IRQ SUPPORT*/
5895:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
5896:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  END IRQ Class HAL Support                                   */
5897:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
5898:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5899:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
5900:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  BEGIN UART Class HAL Support                                   
5901:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
5902:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5903:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if 0
5904:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* _HAL_RX200_UART_SSR_RDRF_MASK not available */
5905:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
5906:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: UART_RxByte
5907:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Desctription:
5908:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
5909:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** int UART_RxByte(int dev, char * chPtr )
5910:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
5911:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     unsigned int status;
5912:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     int retVal = 0;
5913:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(dev)
5914:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
5915:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 0:
5916:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         status = _HAL_RX200_UART_SSR_REG(0);
5917:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( status & _HAL_RX200_UART_SSR_ORER_MASK )  /* clear the overrun error*/
5918:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
5919:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX200_UART_SSR_REG(0) = 0;
5920:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
5921:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( status & _HAL_RX200_UART_SSR_RDRF_MASK )
5922:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
5923:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             *chPtr = UART_ReadData(0);
5924:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
5925:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
5926:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5927:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 1:
5928:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         status = _HAL_RX200_UART_SSR_REG(1);
5929:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( status & _HAL_RX200_UART_SSR_ORER_MASK )  /* clear the overrun error*/
5930:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
5931:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX200_UART_SSR_REG(1) = 0;
5932:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
5933:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( status & _HAL_RX200_UART_SSR_RDRF_MASK )
5934:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
5935:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             *chPtr = UART_ReadData(1);
5936:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
5937:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
5938:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5939:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 5:
5940:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         status = _HAL_RX200_UART_SSR_REG(5);
5941:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( status & _HAL_RX200_UART_SSR_ORER_MASK )  /* clear the overrun error*/
5942:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
5943:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX200_UART_SSR_REG(5) = 0;
5944:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
5945:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( status & _HAL_RX200_UART_SSR_RDRF_MASK )
5946:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
5947:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             *chPtr = UART_ReadData(5);
5948:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
5949:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
5950:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5951:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 12:
5952:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         status = _HAL_RX200_UART_SSR_REG(12);
5953:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( status & _HAL_RX200_UART_SSR_ORER_MASK )  /* clear the overrun error*/
5954:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
5955:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX200_UART_SSR_REG(12) = 0;
5956:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
5957:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( status & _HAL_RX200_UART_SSR_RDRF_MASK )
5958:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
5959:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             *chPtr = UART_ReadData(12);
5960:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
5961:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
5962:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5963:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
5964:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
5965:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5966:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
5967:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return(retVal);
5968:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end UART_RxByte*/
5969:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
5970:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
5971:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
5972:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: UART_TxByte
5973:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Desctription:
5974:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
5975:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** int UART_TxByte(int dev, char * chPtr )
5976:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
5977:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     unsigned int status;
5978:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     int retVal = 0;
5979:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(dev)
5980:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
5981:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 0:
5982:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         status = _HAL_RX200_UART_SSR_REG(0);
5983:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(status & _HAL_RX200_UART_SSR_TEND_MASK )
5984:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
5985:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             UART_WriteData(0, *chPtr);
5986:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
5987:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
5988:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5989:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 1:
5990:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         status = _HAL_RX200_UART_SSR_REG(1);
5991:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(status & _HAL_RX200_UART_SSR_TEND_MASK )
5992:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
5993:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             UART_WriteData(1, *chPtr);
5994:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
5995:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
5996:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
5997:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 5:
5998:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         status = _HAL_RX200_UART_SSR_REG(5);
5999:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(status & _HAL_RX200_UART_SSR_TEND_MASK )
6000:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
6001:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             UART_WriteData(5, *chPtr);
6002:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
6003:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
6004:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6005:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 12:
6006:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         status = _HAL_RX200_UART_SSR_REG(12);
6007:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(status & _HAL_RX200_UART_SSR_TEND_MASK )
6008:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
6009:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             UART_WriteData(12, *chPtr);
6010:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
6011:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
6012:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6013:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     default:
6014:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
6015:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6016:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
6017:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return(retVal);
6018:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end UART_TxByte*/
6019:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
6020:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  END UART  Class HAL Support                                   *
6021:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
6022:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6023:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6024:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
6025:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  BEGIN CRC Class HAL Support                                   *
6026:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
6027:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6028:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
6029:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  END CRC Class HAL Support                                   */
6030:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
6031:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6032:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
6033:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  BEGIN ADC Class HAL Support                                   *
6034:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
6035:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* Table of mapped channels */
6036:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** static const ADC_MapType ADCMap[ADC_MAPPED_CHANNELS_NUMBER]=
6037:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6038:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_PIN(4,0,0),
6039:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_PIN(4,1,1),
6040:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_PIN(4,2,2),
6041:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_PIN(4,3,3),
6042:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_PIN(4,4,4),
6043:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_PIN(4,6,6),
6044:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_PIN(E,0,8),
6045:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_PIN(E,5,13)
6046:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** };
6047:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6048:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6049:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: ADC_ConfigurePinAsChannel
6050:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
6051:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
6052:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
6053:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6054:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void ADC_ConfigurePinAsChannel(IO_ChannelType channel)
6055:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6056:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     DISABLE_PORT_REGISTER_WRITE_PROTECTION();
6057:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch((uint8_t)channel)
6058:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
6059:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 0:
6060:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_PERIPH(0);
6061:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_PIN_ENABLE_AS_ANALOG(0);
6062:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6063:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 1:
6064:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_PERIPH(1);
6065:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_PIN_ENABLE_AS_ANALOG(1);
6066:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6067:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 2:
6068:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_PERIPH(2);
6069:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_PIN_ENABLE_AS_ANALOG(2);
6070:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6071:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 3:
6072:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_PERIPH(3);
6073:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_PIN_ENABLE_AS_ANALOG(3);
6074:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6075:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 4:
6076:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_PERIPH(4);
6077:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_PIN_ENABLE_AS_ANALOG(4);
6078:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6079:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 6:
6080:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_PERIPH(6);
6081:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_PIN_ENABLE_AS_ANALOG(6);
6082:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6083:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 8:
6084:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_PERIPH(8);
6085:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_PIN_ENABLE_AS_ANALOG(8);
6086:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6087:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 13:
6088:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_PERIPH(13);
6089:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_PIN_ENABLE_AS_ANALOG(13);
6090:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6091:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
6092:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ENABLE_PORT_REGISTER_WRITE_PROTECTION();
6093:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end ADC_ConfigurePinAsChannel*/
6094:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6095:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6096:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * function: ADC_DeConfigurePinAsChannel
6097:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Configure Analog Input as Generic I/O
6098:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
6099:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
6100:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6101:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void ADC_DeConfigurePinAsChannel(IO_ChannelType channel)
6102:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6103:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     DISABLE_PORT_REGISTER_WRITE_PROTECTION();
6104:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(channel)
6105:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
6106:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 0:
6107:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_IO(0);
6108:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6109:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 1:
6110:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_IO(1);
6111:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6112:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 2:
6113:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_IO(2);
6114:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6115:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 3:
6116:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_IO(3);
6117:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6118:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 4:
6119:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_IO(4);
6120:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6121:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 6:
6122:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_IO(6);
6123:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6124:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 8:
6125:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_IO(8);
6126:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6127:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 13:
6128:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_IO(13);
6129:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6130:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
6131:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ENABLE_PORT_REGISTER_WRITE_PROTECTION();
6132:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end ADC_DeConfigurePinAsChannel*/
6133:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6134:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6135:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6136:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: ADC_GetChannel
6137:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Starting from portAddress and pinMask (read pin) search for AD channel
6138:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
6139:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status:
6140:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6141:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t ADC_GetChannel(DIO_ModuleMapPortAddressType portAddress, DIO_ModuleMapMaskType pinMask, uint
6142:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6143:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t j;
6144:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     bool_t channelfound = FALSE;
6145:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6146:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     for (j = 0; j < ADC_MAPPED_CHANNELS_NUMBER; j++)
6147:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
6148:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (ADCMap[j].PortAddress == portAddress.basic)
6149:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         {
6150:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if (ADCMap[j].PinMask == pinMask)
6151:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             {
6152:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 channelfound = TRUE;
6153:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 break;
6154:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             }
6155:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         }
6156:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
6157:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if (channelfound)
6158:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
6159:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         *pADch = ADCMap[j].channel;
6160:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
6161:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return channelfound;
6162:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end ADC_GetChannel*/
6163:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6164:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /**
6165:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \n Writes to ADC registers:
6166:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \n\li enables/disables interrupt from conversion on A
6167:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \n\li sets independent conversion
6168:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \n\li sets single converison
6169:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \n\li interrupts any running conversion
6170:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \n\li disables hw trigger
6171:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \n\li disables dma
6172:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \n\li initiates a new conversion on the defined channel.
6173:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6174:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void ADC_StartConvertionOnChannel(IO_ChannelType channel, uint8_t atdInterrupt)
6175:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6176:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if (atdInterrupt == ADC_INT_ENABLED)
6177:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
6178:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_EnableInterruptA();
6179:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
6180:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
6181:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
6182:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_DisableInterruptA();
6183:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
6184:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_SetIndependentConversion();
6185:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_SingleConversionA();
6186:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_SetSWTrigger();
6187:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_DisableDMA();
6188:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_SelectChannelA(channel);
6189:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_StartNow();
6190:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end ADC_StartConvertionOnChannel*/
6191:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6192:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if (ADC_USE_SW_DMA | ADC_USE_HW_DMA)
6193:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /**
6194:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \n Writes to ADC registers:
6195:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \n\li enables interrupt from conversion on A
6196:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \n\li sets independent conversion
6197:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \n\li sets continues converison
6198:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \n\li interrupts any running conversion
6199:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \n\li disables hw trigger
6200:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \n\li disables dma
6201:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \n\li initiates a new conversion on the defined channel.
6202:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6203:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6204:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void ADC_StartMultiSampleConvertionOnChannel(uint8_t channel)
6205:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6206:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_EnableInterruptA();
6207:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_SetIndependentConversion();
6208:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_ContinuesConversionA();
6209:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_SetSWTrigger();
6210:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_SelectChannelA(channel);
6211:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
6212:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6213:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /**
6214:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \n Writes to ADC registers:
6215:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \n\li enables interrupt from conversion on A
6216:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \n\li sets independent conversion
6217:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \n\li sets single converison
6218:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \n\li interrupts any running conversion
6219:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \n\li disables hw trigger
6220:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  \n\li disables dma
6221:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6222:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6223:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void ADC_StartMultiSampleConvertionMultiChannel( void )
6224:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6225:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_EnableInterruptA();
6226:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_SetIndependentConversion();
6227:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_SingleConversionA();
6228:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_SetSWTrigger();
6229:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
6230:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6231:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6232:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6233:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif /*  (ADC_USE_SW_DMA | ADC_USE_HW_DMA) */
6234:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6235:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6236:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: ADC_Init
6237:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Init of ADC Module
6238:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
6239:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Status: Tested!
6240:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6241:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void ADC_Init(void)
6242:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6243:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Bus clock to the ADC module is enabled  */
6244:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_ClockGateOn();
6245:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6246:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if (ADC_REFERENCE_VREFH_VREFL)
6247:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Uses the Vrefh and Vrefl pins for the reference */
6248:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_SetVRefToVrefhVrefl();
6249:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
6250:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Uses the Vdda and Vssa pins for the reference */
6251:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_SetVRefToVddaVssa();
6252:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
6253:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6254:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if (ADC_LOW_POWER_MODE)
6255:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Low power mode */
6256:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_SetLowPowerConversion();
6257:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
6258:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* High speed mode */
6259:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_SetHighSpeedConversion();
6260:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
6261:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6262:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if (ADC_LONG_SAMPLE_TIME)
6263:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Long sample time */
6264:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_SetLongSampleTime();
6265:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
6266:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Short sample time */
6267:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_SetShortSampleTime();
6268:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
6269:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6270:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     S12AD.ADCER.BIT.ADRFMT = 0; /* Right alignment format*/
6271:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if (ADC_RESOLUTION_MODE == 12)
6272:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* It is the only resolution supported*/
6273:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* ADC will sample in 12-bit operation */
6274:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*ADC_SetConversion12bit();*/
6275:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
6276:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #error "only 12 bit ADC_RESOLUTION_MODE supported"
6277:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
6278:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6279:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if (ADC_BUS_CLOCK_DIV_2)
6280:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* The ADC source clock is bus / 2 */
6281:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_SetBusClockDiv2();
6282:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #else
6283:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* The ADC source clock is bus */
6284:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_SetBusClock();
6285:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
6286:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6287:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Sets the ADC divisor */
6288:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_SelectClockDiv(ADC_DIV);
6289:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6290:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Sets the independent conversion of A & B results */
6291:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_SetIndependentConversion();
6292:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6293:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Enables the Disconnection Detection Assist Function  */
6294:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_DisconnectingDetection(0x01,0x0F); /*Precharge with time 0x0F*/
6295:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
6296:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6297:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /**
6298:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  Set all ADC Registers to the reset state value
6299:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6300:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void ADC_DeInit(void)
6301:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6302:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_ClockGateOff();
6303:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
6304:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /**
6305:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** * Get the sample on channel already converted in the right resolution
6306:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** */
6307:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint16_t ADC_GetConvertedValueOnChannel( uint8_t channel)
6308:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6309:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint16_t value=0;
6310:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(channel)
6311:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
6312:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 0:
6313:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = _HAL_RX210_ADC_ADDR_REG(0);
6314:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6315:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 1:
6316:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = _HAL_RX210_ADC_ADDR_REG(1);
6317:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6318:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 2:
6319:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = _HAL_RX210_ADC_ADDR_REG(2);
6320:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6321:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 3:
6322:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = _HAL_RX210_ADC_ADDR_REG(3);
6323:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6324:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 4:
6325:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = _HAL_RX210_ADC_ADDR_REG(4);
6326:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6327:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 6:
6328:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = _HAL_RX210_ADC_ADDR_REG(6);
6329:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6330:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 8:
6331:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = _HAL_RX210_ADC_ADDR_REG(8);
6332:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6333:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     case 13:
6334:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = _HAL_RX210_ADC_ADDR_REG(13);
6335:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
6336:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
6337:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6338:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     value = ADC_GetCorrectResolutionResult(value);
6339:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return value;
6340:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
6341:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6342:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6343:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6344:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
6345:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  END ADC Class HAL Support                                   */
6346:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
6347:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
6348:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  BEGIN DMA Class HAL Support                                   *
6349:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
6350:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6351:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6352:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6353:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_SetDevice
6354:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
6355:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6356:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_ClockGate(void)
6357:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6358:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     DISABLE_REGISTER_WRITE_PROTECTION;
6359:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SYSTEM.MSTPCRA.BIT.MSTPA28 = 0;
6360:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ENABLE_REGISTER_WRITE_PROTECTION;
6361:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* DMA_ClockGate */
6362:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6363:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_SetDevice
6364:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
6365:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6366:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_SetDevice(uint8_t channel, uint8_t device)
6367:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6368:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6369:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6370:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(0) |= DMA_DTE_BIT_MASK;
6371:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6372:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(1) |= DMA_DTE_BIT_MASK;
6373:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6374:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(2) |= DMA_DTE_BIT_MASK;
6375:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6376:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(3) |= DMA_DTE_BIT_MASK;
6377:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Enable DMAC Global */
6378:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_DMA_MODULE_ACTIVATION_REGISTER_ENABLE;
6379:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_SetDevice */
6380:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6381:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6382:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_GetDevice
6383:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6384:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint8_t DMA_GetDevice(uint8_t channel)
6385:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6386:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
6387:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_GetDevice */
6388:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6389:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6390:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_SetSAR
6391:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
6392:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6393:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_SetSAR(uint8_t channel , FLS_positionType address)
6394:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6395:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6396:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_SOURCE_ADDRESS_REGISTER(0) = address;
6397:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6398:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_SOURCE_ADDRESS_REGISTER(1) = address;
6399:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6400:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_SOURCE_ADDRESS_REGISTER(2) = address;
6401:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6402:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_SOURCE_ADDRESS_REGISTER(3) = address;
6403:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_SetSAR */
6404:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6405:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6406:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_GetSAR
6407:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
6408:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6409:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6410:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint8_t* DMA_GetSAR(uint8_t channel)
6411:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6412:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6413:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return ((uint8_t*)_HAL_RX210_DMA_SOURCE_ADDRESS_REGISTER(0));
6414:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6415:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return ((uint8_t*)_HAL_RX210_DMA_SOURCE_ADDRESS_REGISTER(1));
6416:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6417:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return ((uint8_t*)_HAL_RX210_DMA_SOURCE_ADDRESS_REGISTER(2));
6418:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6419:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return ((uint8_t*)_HAL_RX210_DMA_SOURCE_ADDRESS_REGISTER(3));
6420:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
6421:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
6422:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6423:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
6424:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_GetSAR */
6425:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6426:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6427:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function DMA_SetDAR
6428:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Set DMA destionation address
6429:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6430:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_SetDAR(uint8_t channel, FLS_positionType address)
6431:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6432:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6433:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_DESTINATION_ADDRESS_REGISTER(0) = address;
6434:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6435:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_DESTINATION_ADDRESS_REGISTER(1) = address;
6436:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6437:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_DESTINATION_ADDRESS_REGISTER(2) = address;
6438:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6439:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_DESTINATION_ADDRESS_REGISTER(3) = address;
6440:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
6441:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
6442:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_SetDAR */
6443:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6444:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Functon: DMA_GetDar
6445:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Read DMA destionation address
6446:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6447:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint8_t* DMA_GetDAR(uint8_t channel)
6448:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6449:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6450:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return ((uint8_t*)_HAL_RX210_DMA_DESTINATION_ADDRESS_REGISTER(0));
6451:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6452:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return ((uint8_t*)_HAL_RX210_DMA_DESTINATION_ADDRESS_REGISTER(1));
6453:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6454:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return ((uint8_t*)_HAL_RX210_DMA_DESTINATION_ADDRESS_REGISTER(2));
6455:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6456:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return ((uint8_t*)_HAL_RX210_DMA_DESTINATION_ADDRESS_REGISTER(3));
6457:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
6458:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
6459:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
6460:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_GetDAR */
6461:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6462:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6463:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_SetBCR(channel, count)
6464:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Set the DMA Transfer Count Register
6465:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6466:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_SetBCR(uint8_t channel, uint32_t count)
6467:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6468:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6469:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
6470:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_COUNT_REGISTER(0) = count<<16;
6471:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_COUNT_REGISTER(0) |= count;
6472:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
6473:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6474:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
6475:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_COUNT_REGISTER(1) = count<<16;
6476:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_COUNT_REGISTER(1) |= count;
6477:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
6478:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6479:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
6480:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_COUNT_REGISTER(2) = count<<16;
6481:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_COUNT_REGISTER(2) = count;
6482:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
6483:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6484:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
6485:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_COUNT_REGISTER(3) = count<<16;
6486:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_COUNT_REGISTER(3) = count;
6487:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
6488:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
6489:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
6490:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_SetBCR */
6491:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6492:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6493:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_GetBCR
6494:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Read DMA Transfer Count Register
6495:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6496:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint32_t DMA_GetBCR(uint8_t channel)
6497:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6498:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6499:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return(_HAL_RX210_DMA_TRANSFER_COUNT_REGISTER(0));
6500:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6501:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return(_HAL_RX210_DMA_TRANSFER_COUNT_REGISTER(1));
6502:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6503:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return(_HAL_RX210_DMA_TRANSFER_COUNT_REGISTER(2));
6504:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6505:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return(_HAL_RX210_DMA_TRANSFER_COUNT_REGISTER(3));
6506:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
6507:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
6508:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
6509:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_GetBCR */
6510:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6511:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6512:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function:  DMA_EnableInt(channel)
6513:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
6514:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6515:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_EnableInt(uint8_t channel)
6516:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6517:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6518:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
6519:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[(DMAC_ICU_INTERRUPT_BASE_VECTOR + channel)].BYTE = DMAC_ICU_PRIORITY_INT_CH0;
6520:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_INTERRUPT_SETTING_REGISTER(0) |= DMA_TRANSFER_END_INTERRUTP_MASK;
6521:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IR[DMAC_ICU_INTERRUPT_BASE_VECTOR  + channel].BYTE = 0x00;
6522:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[DMAC_CHANNEL0_ICU_IER].BYTE |= DMAC_CHANNEL0_IER_BIT;
6523:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
6524:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6525:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
6526:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[DMAC_ICU_INTERRUPT_BASE_VECTOR + channel].BYTE = DMAC_ICU_PRIORITY_INT_CH1;
6527:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_INTERRUPT_SETTING_REGISTER(1) |= DMA_TRANSFER_END_INTERRUTP_MASK;
6528:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IR[DMAC_ICU_INTERRUPT_BASE_VECTOR  + channel].BYTE = 0x00;
6529:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[DMAC_CHANNEL1_ICU_IER].BYTE |= DMAC_CHANNEL1_IER_BIT;
6530:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
6531:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6532:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
6533:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[DMAC_ICU_INTERRUPT_BASE_VECTOR + channel].BYTE = DMAC_ICU_PRIORITY_INT_CH2;
6534:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_INTERRUPT_SETTING_REGISTER(2) |= DMA_TRANSFER_END_INTERRUTP_MASK;
6535:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IR[DMAC_ICU_INTERRUPT_BASE_VECTOR  + channel].BYTE = 0x00;
6536:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[DMAC_CHANNEL2_ICU_IER].BYTE |= DMAC_CHANNEL2_IER_BIT;
6537:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
6538:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6539:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
6540:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[DMAC_ICU_INTERRUPT_BASE_VECTOR + channel].BYTE = DMAC_ICU_PRIORITY_INT_CH3;
6541:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_INTERRUPT_SETTING_REGISTER(3) |= DMA_TRANSFER_END_INTERRUTP_MASK;
6542:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IR[DMAC_ICU_INTERRUPT_BASE_VECTOR  + channel].BYTE = 0x00;
6543:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[DMAC_CHANNEL3_ICU_IER].BYTE |= DMAC_CHANNEL3_IER_BIT;
6544:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
6545:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
6546:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
6547:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end  DMA_EnableInt(channel) */
6548:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6549:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6550:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function:  DMA_EnableInt(channel)
6551:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
6552:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6553:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_DisableInt(uint8_t channel)
6554:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6555:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6556:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
6557:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[DMAC_CHANNEL0_ICU_IER].BYTE &= ~DMAC_CHANNEL0_IER_BIT;
6558:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_INTERRUPT_SETTING_REGISTER(0) &= ~DMA_TRANSFER_END_INTERRUTP_MASK;
6559:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
6560:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6561:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
6562:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[DMAC_CHANNEL1_ICU_IER].BYTE &= ~DMAC_CHANNEL1_IER_BIT;
6563:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_INTERRUPT_SETTING_REGISTER(1) &= ~DMA_TRANSFER_END_INTERRUTP_MASK;
6564:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
6565:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6566:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
6567:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[DMAC_CHANNEL2_ICU_IER].BYTE &= ~DMAC_CHANNEL2_IER_BIT;
6568:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_INTERRUPT_SETTING_REGISTER(2) &= ~DMA_TRANSFER_END_INTERRUTP_MASK;
6569:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
6570:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6571:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
6572:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[DMAC_CHANNEL3_ICU_IER].BYTE &= ~DMAC_CHANNEL3_IER_BIT;
6573:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_INTERRUPT_SETTING_REGISTER(3) &= ~DMA_TRANSFER_END_INTERRUTP_MASK;
6574:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
6575:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
6576:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
6577:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
6578:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
6579:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6580:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ICU.IPR[DMAC_ICU_INTERRUPT_BASE_VECTOR + channel].BYTE = 0;
6581:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ICU.IR[DMAC_ICU_INTERRUPT_BASE_VECTOR  + channel].BYTE = 0x00;
6582:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6583:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end  DMA_EnableInt(channel) */
6584:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6585:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6586:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_SetStartOn
6587:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
6588:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6589:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_SetStartOn(uint8_t channel)
6590:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6591:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Enable software trigger for DMA */
6592:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6593:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_SOFTWARE_START_REGISTER(0)|= DMREQ_SWREQ_MASK;
6594:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6595:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_SOFTWARE_START_REGISTER(1)|= DMREQ_SWREQ_MASK;
6596:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6597:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_SOFTWARE_START_REGISTER(2)|= DMREQ_SWREQ_MASK;
6598:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6599:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_SOFTWARE_START_REGISTER(3)|= DMREQ_SWREQ_MASK;
6600:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6601:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_SetStartOn */
6602:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6603:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6604:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_SetStartOff(channel)
6605:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
6606:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6607:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_SetStartOff(uint8_t channel)
6608:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6609:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /*  Delete the software start FLAG */
6610:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6611:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_SOFTWARE_START_REGISTER(0)&= ~DMREQ_SWREQ_MASK;
6612:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6613:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_SOFTWARE_START_REGISTER(1)&= ~DMREQ_SWREQ_MASK;
6614:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6615:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_SOFTWARE_START_REGISTER(2)&= ~DMREQ_SWREQ_MASK;
6616:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6617:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_SOFTWARE_START_REGISTER(3)&= ~DMREQ_SWREQ_MASK;
6618:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
6619:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
6620:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_SetStartOff */
6621:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6622:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6623:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_IsChannelBusy
6624:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
6625:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6626:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t DMA_IsChannelBusy(uint8_t channel)
6627:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6628:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6629:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (_HAL_RX210_DMA_STATUS_REGISTER(0) & DMA_ACT_BIT_MASK);
6630:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6631:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (_HAL_RX210_DMA_STATUS_REGISTER(1) & DMA_ACT_BIT_MASK);
6632:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6633:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (_HAL_RX210_DMA_STATUS_REGISTER(1) & DMA_ACT_BIT_MASK);
6634:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6635:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (_HAL_RX210_DMA_STATUS_REGISTER(1) & DMA_ACT_BIT_MASK);
6636:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
6637:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
6638:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
6639:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_IsChannelBusy */
6640:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6641:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6642:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_IsTransDone
6643:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
6644:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6645:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t DMA_IsTransDone(uint8_t channel)
6646:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6647:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6648:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (_HAL_RX210_DMA_STATUS_REGISTER(0) & DMA_DTIF_BIT_MASK);
6649:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6650:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (_HAL_RX210_DMA_STATUS_REGISTER(1) & DMA_DTIF_BIT_MASK);
6651:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6652:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (_HAL_RX210_DMA_STATUS_REGISTER(1) & DMA_DTIF_BIT_MASK);
6653:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6654:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (_HAL_RX210_DMA_STATUS_REGISTER(1) & DMA_DTIF_BIT_MASK);
6655:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
6656:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
6657:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
6658:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* DMA_IsTransDone */
6659:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6660:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6661:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_ClearTransDone(channel)
6662:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
6663:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6664:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_ClearTransDone(uint8_t channel)
6665:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6666:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6667:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_STATUS_REGISTER(0) = 0x00;
6668:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6669:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_STATUS_REGISTER(1) = 0x00;
6670:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6671:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_STATUS_REGISTER(2) = 0x00;
6672:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6673:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_STATUS_REGISTER(3) = 0x00;
6674:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
6675:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
6676:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* DMA_ClearTransDone(channel) */
6677:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6678:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6679:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: IsDMAChannelTrasferEnabled
6680:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Check if DMA on channel is Enabled
6681:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6682:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t IsDMAChannelTrasferEnabled(uint8_t channel)
6683:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6684:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6685:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (_HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(0) & DMA_DTE_BIT_MASK);
6686:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6687:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (_HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(1) & DMA_DTE_BIT_MASK);
6688:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6689:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (_HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(1) & DMA_DTE_BIT_MASK);
6690:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6691:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (_HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(1) & DMA_DTE_BIT_MASK);
6692:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
6693:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
6694:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
6695:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end IsDMAChannelTrasferEnabled */
6696:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6697:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6698:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_IsPending
6699:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
6700:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
6701:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 	- 1 if DMA is operating
6702:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 	- 0 if DMA is suspended
6703:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 	Author: Andrea Emili, SPES scpa
6704:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6705:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t DMA_IsPending(uint8_t channel)
6706:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6707:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6708:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (_HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(0) & DMA_ACT_BIT_MASK);
6709:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6710:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (_HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(1) & DMA_ACT_BIT_MASK);
6711:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6712:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (_HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(1) & DMA_ACT_BIT_MASK);
6713:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6714:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (_HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(1) & DMA_ACT_BIT_MASK);
6715:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
6716:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
6717:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
6718:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* DMA_IsPending */
6719:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6720:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6721:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_IsDestinationError
6722:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6723:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t DMA_IsDestinationError(uint8_t channel)
6724:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6725:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
6726:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* DMA_IsDestinationError */
6727:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6728:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6729:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_IsSourceError
6730:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6731:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t DMA_IsSourceError(uint8_t channel)
6732:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6733:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
6734:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* DMA_IsSourceError */
6735:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6736:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6737:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_IsConfigError
6738:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6739:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** bool_t DMA_IsConfigError(uint8_t channel)
6740:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6741:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
6742:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* DMA_IsConfigError */
6743:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6744:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6745:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_PeripheralRequestOn
6746:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6747:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_PeripheralRequestOn(uint8_t channel)
6748:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6749:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6750:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(0) |= INTERRUPT_REQUEST;
6751:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6752:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(1) |= INTERRUPT_REQUEST;
6753:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6754:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(2) |= INTERRUPT_REQUEST;
6755:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6756:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(3) |= INTERRUPT_REQUEST;
6757:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
6758:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
6759:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_PeripheralRequestOn */
6760:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6761:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6762:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_PeripheralRequestOff
6763:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Set DMA Request Source select as Software( Default modality)
6764:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6765:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_PeripheralRequestOff(uint8_t channel)
6766:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6767:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6768:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(0) &= 0xFF00;
6769:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6770:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(1) &= 0xFF00;
6771:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6772:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(2) &= 0xFF00;
6773:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6774:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(3) &= 0xFF00;
6775:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
6776:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
6777:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_PeripheralRequestOn */
6778:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6779:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6780:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_ContinuousTransfer
6781:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
6782:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6783:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_ContinuousTransfer(uint8_t channel)
6784:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6785:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6786:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(0) |= DMA_REPEAT_TRANSFER_MASK;
6787:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6788:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(1) |= DMA_REPEAT_TRANSFER_MASK;
6789:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6790:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(2) |= DMA_REPEAT_TRANSFER_MASK;
6791:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6792:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(3) |= DMA_REPEAT_TRANSFER_MASK;
6793:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
6794:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
6795:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_ContinuousTransfer */
6796:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6797:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6798:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_SingleTransfer
6799:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Set Normal Trasfer mode
6800:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6801:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_SingleTransfer(uint8_t channel)
6802:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6803:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6804:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(0) &= 0x3FFF;
6805:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6806:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(1) &= 0x3FFF;
6807:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6808:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(2) &= 0x3FFF;
6809:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6810:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(3) &= 0x3FFF;
6811:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
6812:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
6813:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_SingleTransfer */
6814:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6815:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6816:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_SingleTransfer
6817:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Set Normal Trasfer mode
6818:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6819:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_BlockTransfer(uint8_t channel)
6820:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6821:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6822:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(0) |= DMA_BLOCK_TRANSFER_MASK;
6823:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6824:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(1) |= DMA_BLOCK_TRANSFER_MASK;
6825:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6826:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(2) |= DMA_BLOCK_TRANSFER_MASK;
6827:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6828:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(3) |= DMA_BLOCK_TRANSFER_MASK;
6829:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
6830:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
6831:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_SingleTransfer */
6832:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6833:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6834:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_SetDestinationSizeToByte
6835:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6836:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_SetDestinationSizeToByte(uint8_t channel)
6837:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6838:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* TODO */
6839:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* DMA_SetDestinationSizeToByte */
6840:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6841:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6842:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_SetDestinationSizeToWord
6843:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6844:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_SetDestinationSizeToWord(uint8_t channel)
6845:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6846:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* TODO */
6847:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* DMA_SetDestinationSizeToWord */
6848:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6849:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6850:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_SetDestinationSizeToLong
6851:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6852:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_SetDestinationSizeToLong(uint8_t channel)
6853:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6854:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* TODO */
6855:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* DMA_SetDestinationSizeToLong */
6856:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6857:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: void DMA_SetSourceSizeToLong(uint8_t channel)
6858:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6859:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_SetSourceSizeToLong(uint8_t channel)
6860:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6861:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* TODO */
6862:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_SetSourceSizeToLong */
6863:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6864:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: void DMA_SetSourceSizeToByte(uint8_t channel)
6865:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6866:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_SetSourceSizeToByte(uint8_t channel)
6867:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6868:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* TODO */
6869:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_SetSourceSizeToByte */
6870:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6871:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_SetSourceSizeToWord(uint8_t channel)
6872:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6873:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_SetSourceSizeToWord(uint8_t channel)
6874:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6875:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* TODO */
6876:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* return DMA_SetSourceSizeToWord */
6877:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6878:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6879:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_EnableSourceIncrement(uint8_t channel)
6880:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6881:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_EnableSourceIncrement(uint8_t channel)
6882:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6883:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6884:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(0)|= DMA_SOURCE_ADDRESS_UPDATE_MODE_INCREMENT;
6885:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6886:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(1) |= DMA_SOURCE_ADDRESS_UPDATE_MODE_INCREMENT;
6887:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6888:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(2) |= DMA_SOURCE_ADDRESS_UPDATE_MODE_INCREMENT;
6889:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6890:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(3) |= DMA_SOURCE_ADDRESS_UPDATE_MODE_INCREMENT;
6891:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
6892:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
6893:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_EnableSourceIncrement */
6894:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6895:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6896:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_EnableSourceIncrement(uint8_t channel)
6897:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6898:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_DisableSourceIncrement(uint8_t channel)
6899:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6900:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6901:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(0) &= 0x3FFF;
6902:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6903:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(1) &= 0x3FFF;
6904:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6905:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(2) &= 0x3FFF;
6906:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6907:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(3) &= 0x3FFF;
6908:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
6909:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
6910:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_DisableSourceIncrement */
6911:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6912:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6913:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_EnableDestionationIncrement(uint8_t channel)
6914:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6915:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_EnableDestinationIncrement(uint8_t channel)
6916:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6917:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6918:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(0)|= DMA_DESTIONATION_ADDRESS_UPDATE_MODE_INCREMENT;
6919:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6920:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(1) |= DMA_DESTIONATION_ADDRESS_UPDATE_MODE_INCREMENT;
6921:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6922:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(2) |= DMA_DESTIONATION_ADDRESS_UPDATE_MODE_INCREMENT;
6923:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6924:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(3) |= DMA_DESTIONATION_ADDRESS_UPDATE_MODE_INCREMENT;
6925:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
6926:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
6927:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_EnableDestinationIncrement */
6928:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6929:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6930:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6931:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_DisableDestionationIncrement(uint8_t channel)
6932:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6933:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_DisableDestinationIncrement(uint8_t channel)
6934:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6935:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6936:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(0)|= DMA_DESTIONATION_ADDRESS_UPDATE_MODE_INCREMENT;
6937:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6938:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(1) |= DMA_DESTIONATION_ADDRESS_UPDATE_MODE_INCREMENT;
6939:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6940:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(2) |= DMA_DESTIONATION_ADDRESS_UPDATE_MODE_INCREMENT;
6941:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6942:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(3) |= DMA_DESTIONATION_ADDRESS_UPDATE_MODE_INCREMENT;
6943:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
6944:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
6945:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_EnableDestinationIncrement */
6946:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6947:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6948:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_EnableAutoAlign
6949:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
6950:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: There is not this feature in RX210 DMA
6951:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6952:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_EnableAutoAlign(uint8_t channel)
6953:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6954:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_EnableAutoAlign */
6955:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6956:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6957:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_DisableAutoAlign
6958:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: There is not this featur in RX210 DMA
6959:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6960:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_DisableAutoAlign(uint8_t channel)
6961:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6962:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_DisableAutoAlign */
6963:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6964:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6965:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * DMA_SetSourceAddressModulo
6966:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6967:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_SetSourceAddressModulo(uint8_t channel, uint8_t module)
6968:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6969:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* DMA_SetSourceAddressModulo */
6970:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6971:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6972:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * DMA_SetDestionationAddressModulo
6973:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6974:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_SetDestinationAddressModulo(uint8_t channel, uint8_t module)
6975:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6976:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* DMA_SetDestionationAddressModulo */
6977:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6978:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6979:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * DMA_SetDisableRequestOn
6980:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6981:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_SetDisableRequestOn(uint8_t channel)
6982:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
6983:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
6984:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(0) &= 0xFF00;
6985:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
6986:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(1) &= 0xFF00;
6987:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
6988:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(2) &= 0xFF00;
6989:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
6990:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(3) &= 0xFF00;
6991:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
6992:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
6993:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_SetDisableRequestOn */
6994:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
6995:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
6996:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * DMA_SetEnableRequestOn
6997:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Enable interrupt request from peripheral
6998:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
6999:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_SetEnableRequestOn(uint8_t channel)
7000:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
7001:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
7002:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(0) |= INTERRUPT_REQUEST;
7003:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
7004:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(1) |= INTERRUPT_REQUEST;
7005:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
7006:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(2) |= INTERRUPT_REQUEST;
7007:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
7008:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(3) |= INTERRUPT_REQUEST;
7009:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
7010:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
7011:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_SetEnableRequestOn */
7012:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7013:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
7014:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: void DMA_LinkChannelControlMode
7015:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description: Link the DMA to a hardware trigger form a peripheral
7016:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note:
7017:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *  - You must give the number of vector of peripheral interrupt
7018:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
7019:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_LinkChannelControlMode(uint8_t channel, uint8_t mode)
7020:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
7021:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
7022:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
7023:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(0) &= ~DMA_DTE_BIT_MASK;
7024:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ICU_ACTIVATION_REGISTER(0) = mode;
7025:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(0) |= DMA_DTE_BIT_MASK;
7026:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
7027:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
7028:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
7029:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(1) &= ~DMA_DTE_BIT_MASK;
7030:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ICU_ACTIVATION_REGISTER(1) = mode;
7031:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(1) |= DMA_DTE_BIT_MASK;
7032:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
7033:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
7034:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
7035:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(2) &= ~DMA_DTE_BIT_MASK;
7036:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ICU_ACTIVATION_REGISTER(2) = mode;
7037:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(2) |= DMA_DTE_BIT_MASK;
7038:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
7039:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7040:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
7041:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
7042:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(3) &= ~DMA_DTE_BIT_MASK;
7043:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ICU_ACTIVATION_REGISTER(3) = mode;
7044:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(3) |= DMA_DTE_BIT_MASK;
7045:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
7046:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
7047:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
7048:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* void DMA_LinkChannelControlMode */
7049:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7050:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
7051:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_LinkChannel1Mode
7052:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
7053:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_LinkChannel1Mode(uint8_t channel, uint8_t mode)
7054:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
7055:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* DMA_LinkChannel1Mode */
7056:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7057:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
7058:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_LinkChannel2Mode
7059:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
7060:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_LinkChannel2Mode(uint8_t channel, uint8_t mode)
7061:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
7062:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* DMA_LinkChannel2Mode */
7063:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7064:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
7065:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_ControlDefault
7066:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
7067:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_ControlDefault(uint8_t channel)
7068:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
7069:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* DMA_ControlDefault */
7070:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7071:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
7072:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_SetDisableRequestOff
7073:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
7074:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_SetDisableRequestOff(uint8_t channel)
7075:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
7076:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* DMA_SetDisableRequestOff */
7077:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7078:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
7079:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_GetTrasferMode
7080:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
7081:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** uint8_t DMA_GetTrasferMode(uint8_t channel)
7082:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
7083:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t transfer_mode = 0xFF;
7084:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
7085:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         transfer_mode = ((_HAL_RX210_DMA_TRANSFER_MODE_REGISTER(0) & 0xF000)>>14);
7086:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
7087:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         transfer_mode = ((_HAL_RX210_DMA_TRANSFER_MODE_REGISTER(1) & 0xF000)>>14);
7088:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
7089:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         transfer_mode = ((_HAL_RX210_DMA_TRANSFER_MODE_REGISTER(2) & 0xF000)>>14);
7090:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
7091:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         transfer_mode = ((_HAL_RX210_DMA_TRANSFER_MODE_REGISTER(3) & 0xF000)>>14);
7092:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
7093:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
7094:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7095:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return (transfer_mode);
7096:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* DMA_SetDisableRequestOff */
7097:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7098:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
7099:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_SetNumberOfRepetition
7100:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Description:
7101:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 	- In repetion mode set the number of repetion from 1 to 1024
7102:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
7103:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_SetNumberOfRepetion(uint8_t channel, uint16_t count)
7104:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
7105:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
7106:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_BLOCK_TRANSFER_COUNT_REGISTER(0) = count;
7107:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
7108:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_BLOCK_TRANSFER_COUNT_REGISTER(1) = count;
7109:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
7110:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_BLOCK_TRANSFER_COUNT_REGISTER(2) = count;
7111:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
7112:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_BLOCK_TRANSFER_COUNT_REGISTER(3) = count;
7113:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
7114:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
7115:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_SetNumberOfRepetition */
7116:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7117:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
7118:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: DMA_SetRepeatArea
7119:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Note: The possible modality are specificated in *hal.h, and they are:
7120:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 		REPEAT_AREA_IS_DESTIONATION
7121:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *		REPEAT_AREA_IS_SOURCE
7122:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *		REPEAT_AREA_IS_NOT_SPECIFIED
7123:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  *
7124:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
7125:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void DMA_SetRepeatArea(uint8_t channel, uint16_t mode)
7126:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
7127:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
7128:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(0) &= 0xCFFF;
7129:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
7130:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(1) &= 0xCFFF;
7131:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
7132:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(2) &= 0xCFFF;
7133:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
7134:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(3) &= 0xCFFF;
7135:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else
7136:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
7137:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7138:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(mode != REPEAT_AREA_IS_DESTIONATION)
7139:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     {
7140:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(channel == 0)
7141:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(0) |= mode;
7142:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if(channel == 1)
7143:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(1) |= mode;
7144:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if(channel == 2)
7145:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(2) |= mode;
7146:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if(channel == 3)
7147:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(3) |= mode;
7148:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     }
7149:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* nd DMA_SetRepeatArea */
7150:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7151:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
7152:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  END DMA Class HAL Support                                   */
7153:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
7154:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
7155:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  START SPI Class HAL Support                                   *
7156:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
7157:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7158:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
7159:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: SPI_ClkEnable
7160:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
7161:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void SPI_ClkEnable(unsigned char par)
7162:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
7163:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     DISABLE_REGISTER_WRITE_PROTECTION;
7164:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SYSTEM.MSTPCRB.BIT.MSTPB17 = 0;
7165:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ENABLE_REGISTER_WRITE_PROTECTION;
7166:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end SPI_ClkEnable */
7167:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7168:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
7169:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: SPI_Enable()
7170:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
7171:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void SPI_Enable(unsigned char par)
7172:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
7173:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SSLP.BIT.SSL0P = PDL_SPI_PIN_SSLO;	/* !< Slave Select Polarity Register */
7174:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPPCR.BYTE |= PDL_SPI_PIN_MOST_IDLE;	/* !< Mosi Idle control */
7175:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPDCR.BIT.SPLW = TRUE;				/* !< SPDR is access in longwords */
7176:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPCR.BIT.SPE |= TRUE;
7177:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end SPI_Enable */
7178:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7179:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
7180:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: SPI_MasterEnable
7181:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
7182:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void SPI_MasterEnable(unsigned char par)
7183:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
7184:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* SET SPI PIN */
7185:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SPI_SET_SCLK_PIN;
7186:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SPI_SET_SSL_PIN;
7187:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SPI_SET_MOSI_PIN;
7188:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SPI_SET_MISO_PIN;
7189:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Set SPI AS MASTER */
7190:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPCR.BIT.MSTR = 1;	/* !< Set SPI as Master */
7191:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end SPI_Enable */
7192:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7193:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
7194:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: SPI_SetClockPolarity
7195:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
7196:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void SPI_SetClockPolarity(unsigned char par, unsigned char par_1)
7197:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
7198:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPCMD0.BIT.CPOL = par_1;
7199:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end SPI_SetClockPolarity */
7200:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7201:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
7202:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: SPI_SetClockPhase
7203:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
7204:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void SPI_SetClockPhase(unsigned char par, unsigned char pha)
7205:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
7206:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPCMD0.BIT.CPHA = pha;
7207:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end SPI_SetClockPhase */
7208:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7209:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
7210:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: SPI_ResetStatus
7211:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
7212:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void SPI_ResetStatus(unsigned char par)
7213:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
7214:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     unsigned char i = 0;
7215:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7216:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPCR.BIT.SPE = SPI_ENABLE;
7217:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     for(i = 0; i < 100; i++)
7218:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         __asm("nop");
7219:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPCR.BIT.SPE = SPI_DISABLE;	/* !< This command disable the SPI and performs reset of peri
7220:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end SPI_ResetStatus */
7221:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7222:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
7223:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: SPI_SetBaudRate
7224:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Parameters:
7225:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 	- par_1
7226:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * 	- baudrate: The value of BaudRate to set
7227:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
7228:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void SPI_SetBaudRate(unsigned char par_1, unsigned long int baudrate)
7229:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
7230:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPCMD0.BIT.BRDV = BIT_RATE_DIVISION;
7231:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPBR.BYTE  = _HAL_SPI_BAUDRATE(baudrate);
7232:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end SPI_SetBaudRate */
7233:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7234:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
7235:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: SPI1_SetShiftDir
7236:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Descrption: Set the as first tasmit bit the MSB or the LSB.shift_direction
7237:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
7238:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void SPI_SetShiftDir(unsigned char par ,unsigned char shift_direction)
7239:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
7240:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPCMD0.BIT.LSBF = shift_direction;
7241:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end SPI1_SetShiftDir */
7242:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7243:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
7244:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: SPI_WriteData
7245:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
7246:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void SPI_WriteData(unsigned char par_1, unsigned char data)
7247:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
7248:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     while (RSPI0.SPSR.BIT.IDLNF) ;
7249:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPDR.LONG = (unsigned short)data;
7250:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** } /* end SPI_WriteData */
7251:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7252:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
7253:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: SPI_ReadData
7254:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
7255:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** unsigned char SPI_ReadData(unsigned char par_1)
7256:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
7257:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     unsigned char data;
7258:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     data = RSPI0.SPDR.LONG;
7259:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return data;
7260:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** } /* end SPI_WriteData */
7261:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7262:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
7263:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: SPI_IntEnable
7264:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
7265:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void SPI_IntEnable(unsigned char par)
7266:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
7267:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if SPI_TX_INTERRUPT_ENABLE
7268:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Clear IR */
7269:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_SPI_TX_IR = 0;
7270:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Enable peripheral TX interrupt request */
7271:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPCR.BIT.SPTIE = TRUE;
7272:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Set Interrupt Priority */
7273:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_SPI_IPR_REG = SPI_INT_PRIORITY;
7274:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Enable ICU peripheral TX interrupt */
7275:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_SPI_IER_REG |= SPI_TX_IER_BIT;
7276:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
7277:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if SPI_RX_INTERRUPT_ENABLE
7278:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Clear IR */
7279:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_SPI_RX_IR = 0;
7280:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Enable peripheral RX interrupt request */
7281:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPCR.BIT.SPRIE = TRUE;
7282:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Set Interrupt Priority */
7283:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_SPI_IPR_REG = SPI_INT_PRIORITY;
7284:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     /* Enable ICU peripheral RX interrupt */
7285:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_SPI_IER_REG |= SPI_RX_IER_BIT;
7286:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
7287:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end SPI_IntEnable */
7288:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7289:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*
7290:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  * Function: SPI_GetStatus
7291:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****  */
7292:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** unsigned char SPI_GetStatus(unsigned char par)
7293:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
7294:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     unsigned char status = 0;
7295:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     status = RSPI0.SPSR.BYTE;
7296:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return status;
7297:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end SPI_GetStatus */
7298:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7299:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7300:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
7301:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  END SPI Class HAL Support                                   */
7302:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
7303:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7304:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7305:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
7306:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  BEGIN LPM Class HAL Support                                   *
7307:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
7308:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* LOW Power Mode */
7309:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #if defined(HAL_LPM_SUPPORT)
7310:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** void LPM_SleepModeProc(void)
7311:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
7312:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	DISABLE_REGISTER_WRITE_PROTECTION;
7313:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	SYSTEM.OPCCR.BIT.OPCM=PDL_LPM_OPC_MIDDLE_SPEED_1A;
7314:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7315:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	/* RSTCKEN = 0 - osc. switch disable when return */
7316:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	SYSTEM.RSTCKCR.BIT.RSTCKEN  = 0;
7317:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	SYSTEM.RSTCKCR.BIT.RSTCKSEL = 1;
7318:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	/* Select sleep (or all-module clock stop) */
7319:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	SYSTEM.SBYCR.BIT.SSBY = 0;
7320:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	/* Prevent out-of-order execution */
7321:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	while (SYSTEM.SBYCR.BIT.SSBY != 0);
7322:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	__builtin_rx_wait();
7323:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7324:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	ENABLE_REGISTER_WRITE_PROTECTION;
7325:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
7326:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** #endif
7327:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
7328:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /*                                  END LPM Class HAL Support                                   */
7329:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** /* ********************************************************************************************** *
7330:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 
7331:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** struct _ResetInfo ResetInfo __attribute__ ((section (".ResetInfo")));
7332:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** const boot_short_info_t BootShortInfo __attribute__ ((section (".Bootloader")));
 1445                             		.loc 1 7332 0
 1446 0095 5B EE                   		movu.B	r14, r14
 1447 0097 70 EE 00 00 00 00       		add	#_CSWTCH.56, r14
 1448                             	.LVL131:
 1449 009d 58 E1                   		movu.B	[r14], r1
 1450 009f 2E F3                   		bra	.L119
 1451                             	.LFE45:
 1453 00a1 03                      		.section	.text.DIO_DigitalFilterDisable,"ax",@progbits
 1454                             		.global	_DIO_DigitalFilterDisable
 1456                             	_DIO_DigitalFilterDisable:
 1457                             	.LFB46:
1607:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 1458                             		.loc 1 1607 0
 1459                             	.LVL132:
1610:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     j = DIO_CheckDigitalFilterPin(pMap);
 1460                             		.loc 1 1610 0
 1461 0000 05 00 00 00             		bsr	_DIO_CheckDigitalFilterPin
 1462                             	.LVL133:
1613:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if (j < DIGITAL_FILTER_MAP_SIZE)
 1463                             		.loc 1 1613 0
 1464 0004 5B 11                   		movu.B	r1, r1
 1465 0006 75 51 17                		cmp	#23, r1
 1466 0009 25 05 38 81 00          		bgtu	.L137
1615:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(NoiseFilterPinMap[j].digital_filter_peripheral)
 1467                             		.loc 1 1615 0
 1468 000e 63 C1                   		mul	#12, r1
 1469                             	.LVL134:
 1470 0010 70 11 08 00 00 00       		add	#_NoiseFilterPinMap+8, r1
 1471 0016 59 1E 03                		movu.B	3[r1], r14
 1472 0019 61 9E                   		cmp	#9, r14
 1473 001b 24 71                   		bgtu	.L137
 1474 001d FB 42 00 00 00 00       		mov.L	#.L148, r4
 1475 0023 FE 6E 4E                		mov.L	[r14,r4], r14
 1476                             		
 1477 0026 7F 0E                   	1:jmp	r14
 1478                             		.section	.rodata.DIO_DigitalFilterDisable,"a",@progbits
 1479                             		.balign 4
 1480                             		.balign 4
 1481                             	.L148:
 1482 0000 00 00 00 28             		.long .L139
 1483 0004 00 00 00 2F             		.long .L140
 1484 0008 00 00 00 8C             		.long .L137
 1485 000c 00 00 00 39             		.long .L141
 1486 0010 00 00 00 42             		.long .L142
 1487 0014 00 00 00 4C             		.long .L143
 1488 0018 00 00 00 56             		.long .L144
 1489 001c 00 00 00 63             		.long .L145
 1490 0020 00 00 00 70             		.long .L146
 1491 0024 00 00 00 7D             		.long .L147
 1492                             		.section	.text.DIO_DigitalFilterDisable
 1493                             	.L139:
1619:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU0.NFCR.BYTE = 0x00;
 1494                             		.loc 1 1619 0
 1495 0028 FB EE 90 86 08          		mov.L	#0x88690, r14
 1496 002d 2E 11                   		bra	.L150
 1497                             	.L140:
1622:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU1.NFCR.BYTE = 0x00;
 1498                             		.loc 1 1622 0
 1499 002f FB EE 90 86 08          		mov.L	#0x88690, r14
 1500 0034 F9 E4 01 00             		mov.B	#0, 1[r14]
1623:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 1501                             		.loc 1 1623 0
 1502 0038 02                      		rts
 1503                             	.L141:
1625:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU2.NFCR.BYTE = 0x00;
 1504                             		.loc 1 1625 0
 1505 0039 FB EE 92 86 08          		mov.L	#0x88692, r14
 1506                             		.balign 2,3,4
 1507                             	.L150:
 1508 003e F8 E4 00                		mov.B	#0, [r14]
1626:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 1509                             		.loc 1 1626 0
 1510 0041 02                      		rts
 1511                             	.L142:
1628:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU3.NFCR.BYTE = 0x00;
 1512                             		.loc 1 1628 0
 1513 0042 FB EE 00 86 08          		mov.L	#0x88600, r14
 1514 0047 F9 E4 93 00             		mov.B	#0, 147[r14]
1629:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 1515                             		.loc 1 1629 0
 1516 004b 02                      		rts
 1517                             	.L143:
1631:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU4.NFCR.BYTE = 0x00;
 1518                             		.loc 1 1631 0
 1519 004c FB EE 00 86 08          		mov.L	#0x88600, r14
 1520 0051 F9 E4 94 00             		mov.B	#0, 148[r14]
1632:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 1521                             		.loc 1 1632 0
 1522 0055 02                      		rts
 1523                             	.L144:
1636:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IRQFLTE0.BIT.FLTEN0 = 0x00;
 1524                             		.loc 1 1636 0
 1525 0056 FB EE 00 70 08          		mov.L	#0x87000, r14
 1526 005b CE E4 10 05             		mov.B	1296[r14], r4
 1527 005f 7A 04                   		bclr	#0, r4
 1528 0061 2E 27                   		bra	.L149
 1529                             	.L145:
1639:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IRQFLTE0.BIT.FLTEN1 = 0x00;
 1530                             		.loc 1 1639 0
 1531 0063 FB EE 00 70 08          		mov.L	#0x87000, r14
 1532 0068 CE E4 10 05             		mov.B	1296[r14], r4
 1533 006c 7A 14                   		bclr	#1, r4
 1534 006e 2E 1A                   		bra	.L149
 1535                             	.L146:
1642:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IRQFLTE0.BIT.FLTEN5 = 0x00;
 1536                             		.loc 1 1642 0
 1537 0070 FB EE 00 70 08          		mov.L	#0x87000, r14
 1538 0075 CE E4 10 05             		mov.B	1296[r14], r4
 1539 0079 7A 54                   		bclr	#5, r4
 1540 007b 2E 0D                   		bra	.L149
 1541                             	.L147:
1645:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IRQFLTE0.BIT.FLTEN6 = 0x00;
 1542                             		.loc 1 1645 0
 1543 007d FB EE 00 70 08          		mov.L	#0x87000, r14
 1544 0082 CE E4 10 05             		mov.B	1296[r14], r4
 1545 0086 7A 64                   		bclr	#6, r4
 1546                             		.balign 2,3,5
 1547                             	.L149:
 1548 0088 CB E4 10 05             		mov.B	r4, 1296[r14]
 1549                             	.L137:
 1550 008c 02                      		rts
 1551                             	.LFE46:
 1553 008d 03                      		.section	.text.DIO_IsDigitalFilterEnabled,"ax",@progbits
 1554                             		.global	_DIO_IsDigitalFilterEnabled
 1556                             	_DIO_IsDigitalFilterEnabled:
 1557                             	.LFB47:
1658:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 1558                             		.loc 1 1658 0
 1559                             	.LVL135:
1662:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     j = DIO_CheckDigitalFilterPin(pMap);
 1560                             		.loc 1 1662 0
 1561 0000 05 00 00 00             		bsr	_DIO_CheckDigitalFilterPin
 1562                             	.LVL136:
1665:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if (j < DIGITAL_FILTER_MAP_SIZE)
 1563                             		.loc 1 1665 0
 1564 0004 5B 11                   		movu.B	r1, r1
 1565 0006 75 51 17                		cmp	#23, r1
 1566 0009 25 05 38 8C 00          		bgtu	.L164
1667:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         pin_mask = NoiseFilterPinMap[j].channel;
 1567                             		.loc 1 1667 0
 1568 000e EF 14                   		mov.L	r1, r4
 1569 0010 63 C4                   		mul	#12, r4
 1570 0012 70 44 08 00 00 00       		add	#_NoiseFilterPinMap+8, r4
 1571 0018 CD 4E 02                		mov.B	2[r4], r14
 1572                             	.LVL137:
1669:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(NoiseFilterPinMap[j].digital_filter_peripheral)
 1573                             		.loc 1 1669 0
 1574 001b B0 CC                   		movu.B	3[r4], r4
 1575 001d 61 94                   		cmp	#9, r4
 1576 001f 24 78                   		bgtu	.L164
 1577 0021 FB 32 00 00 00 00       		mov.L	#.L162, r3
 1578 0027 FE 64 34                		mov.L	[r4,r3], r4
 1579                             		
 1580 002a 7F 04                   	1:jmp	r4
 1581                             		.section	.rodata.DIO_IsDigitalFilterEnabled,"a",@progbits
 1582                             		.balign 4
 1583                             		.balign 4
 1584                             	.L162:
 1585 0000 00 00 00 2C             		.long .L153
 1586 0004 00 00 00 33             		.long .L154
 1587 0008 00 00 00 97             		.long .L164
 1588 000c 00 00 00 45             		.long .L155
 1589 0010 00 00 00 4E             		.long .L156
 1590 0014 00 00 00 58             		.long .L157
 1591 0018 00 00 00 62             		.long .L158
 1592 001c 00 00 00 6F             		.long .L159
 1593 0020 00 00 00 7C             		.long .L160
 1594 0024 00 00 00 8A             		.long .L161
 1595                             		.section	.text.DIO_IsDigitalFilterEnabled
 1596                             	.L153:
1673:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             is_digital_filter_enabled = MTU0.NFCR.BYTE & (1 << pin_mask);
 1597                             		.loc 1 1673 0
 1598 002c FB 4E 90 86 08          		mov.L	#0x88690, r4
 1599 0031 2E 19                   		bra	.L166
 1600                             	.L154:
1676:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             is_digital_filter_enabled = MTU1.NFCR.BYTE & (1 << pin_mask);
 1601                             		.loc 1 1676 0
 1602 0033 FB 4E 90 86 08          		mov.L	#0x88690, r4
 1603 0038 88 49                   		mov.B	1[r4], r1
 1604                             	.LVL138:
 1605                             		.balign 2,3,1
 1606                             	.L165:
 1607 003a 5B EE                   		movu.B	r14, r14
 1608 003c 66 14                   		mov.L	#1, r4
 1609 003e FD 62 E4                		shll	r14, r4
 1610 0041 53 41                   		and	r4, r1
 1611                             	.LVL139:
1677:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 1612                             		.loc 1 1677 0
 1613 0043 2E 57                   		bra	.L152
 1614                             	.LVL140:
 1615                             	.L155:
1679:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             is_digital_filter_enabled = MTU2.NFCR.BYTE & (1 << pin_mask);
 1616                             		.loc 1 1679 0
 1617 0045 FB 4E 92 86 08          		mov.L	#0x88692, r4
 1618                             		.balign 2,3,5
 1619                             	.L166:
 1620 004a CC 41                   		mov.B	[r4], r1
 1621                             	.LVL141:
 1622 004c 2E EE                   		bra	.L165
 1623                             	.LVL142:
 1624                             	.L156:
1682:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             is_digital_filter_enabled = MTU3.NFCR.BYTE & (1 << pin_mask);
 1625                             		.loc 1 1682 0
 1626 004e FB 4E 00 86 08          		mov.L	#0x88600, r4
 1627 0053 CD 41 93                		mov.B	147[r4], r1
 1628                             	.LVL143:
 1629 0056 2E E4                   		bra	.L165
 1630                             	.LVL144:
 1631                             	.L157:
1685:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             is_digital_filter_enabled = MTU4.NFCR.BYTE & (1 << pin_mask);
 1632                             		.loc 1 1685 0
 1633 0058 FB 4E 00 86 08          		mov.L	#0x88600, r4
 1634 005d CD 41 94                		mov.B	148[r4], r1
 1635                             	.LVL145:
 1636 0060 2E DA                   		bra	.L165
 1637                             	.LVL146:
 1638                             	.L158:
1690:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             is_digital_filter_enabled = (ICU.IRQFLTE0.BYTE & 0x01);
 1639                             		.loc 1 1690 0
 1640 0062 FB EE 00 70 08          		mov.L	#0x87000, r14
 1641                             	.LVL147:
 1642                             	.LVL148:
 1643 0067 CE E1 10 05             		mov.B 1296[r14], r1
 1644 006b 64 11                   		and #1, r1
1691:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
 1645                             		.loc 1 1691 0
 1646 006d 2E 2D                   		bra	.L152
 1647                             	.LVL149:
 1648                             	.L159:
1693:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             is_digital_filter_enabled = (ICU.IRQFLTE0.BYTE & 0x02);
 1649                             		.loc 1 1693 0
 1650 006f FB EE 00 70 08          		mov.L	#0x87000, r14
 1651                             	.LVL150:
 1652                             	.LVL151:
 1653 0074 CE E1 10 05             		mov.B 1296[r14], r1
 1654 0078 64 21                   		and #2, r1
1694:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
 1655                             		.loc 1 1694 0
 1656 007a 2E 20                   		bra	.L152
 1657                             	.LVL152:
 1658                             	.L160:
1696:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             is_digital_filter_enabled = (ICU.IRQFLTE0.BYTE & 0x20);
 1659                             		.loc 1 1696 0
 1660 007c FB EE 00 70 08          		mov.L	#0x87000, r14
 1661                             	.LVL153:
 1662                             	.LVL154:
 1663 0081 CE E1 10 05             		mov.B 1296[r14], r1
 1664 0085 75 21 20                		and #32, r1
1697:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
 1665                             		.loc 1 1697 0
 1666 0088 2E 12                   		bra	.L152
 1667                             	.LVL155:
 1668                             	.L161:
1699:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             is_digital_filter_enabled = (ICU.IRQFLTE0.BYTE & 0x40);
 1669                             		.loc 1 1699 0
 1670 008a FB EE 00 70 08          		mov.L	#0x87000, r14
 1671                             	.LVL156:
 1672                             	.LVL157:
 1673 008f CE E1 10 05             		mov.B 1296[r14], r1
 1674 0093 75 21 40                		and #64, r1
1700:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
 1675                             		.loc 1 1700 0
 1676 0096 0C                      		bra	.L152
 1677                             	.LVL158:
 1678                             	.L164:
1661:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t is_digital_filter_enabled = FALSE;
 1679                             		.loc 1 1661 0
 1680 0097 66 01                   		mov	#0, r1
 1681                             	.LVL159:
 1682 0099 03                      		.balign 2,3,1
 1683                             	.L152:
1709:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DIO_IsDigitalFilterEnabled */
 1684                             		.loc 1 1709 0
 1685 009a 5B 11                   		movu.B	r1, r1
 1686 009c 02                      		rts
 1687                             	.LFE47:
 1689 009d 03                      		.section	.text.MapClearResourceValue,"ax",@progbits
 1690                             		.global	_MapClearResourceValue
 1692                             	_MapClearResourceValue:
 1693                             	.LFB48:
1887:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 1694                             		.loc 1 1887 0
 1695                             	.LVL160:
1889:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(clrSrcId)
 1696                             		.loc 1 1889 0
 1697 0000 5B 11                   		movu.B	r1, r1
 1698 0002 61 41                   		cmp	#4, r1
 1699 0004 24 19                   		bgtu	.L168
 1700 0006 FB E2 00 00 00 00       		mov.L	#.L174, r14
 1701 000c FE 61 EE                		mov.L	[r1,r14], r14
 1702                             		
 1703 000f 7F 0E                   	1:jmp	r14
 1704                             		.section	.rodata.MapClearResourceValue,"a",@progbits
 1705                             		.balign 4
 1706                             		.balign 4
 1707                             	.L174:
 1708 0000 00 00 00 11             		.long .L169
 1709 0004 00 00 00 27             		.long .L175
 1710 0008 00 00 00 15             		.long .L171
 1711 000c 00 00 00 19             		.long .L172
 1712 0010 00 00 00 24             		.long .L176
 1713                             		.section	.text.MapClearResourceValue
 1714                             	.L169:
1892:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retValue = TCNT_RESET_SOURCE_TGRA;
 1715                             		.loc 1 1892 0
 1716 0011 66 11                   		mov	#1, r1
 1717                             	.LVL161:
 1718 0013 2E 17                   		bra	.L170
 1719                             	.L171:
 1720                             	.LVL162:
1898:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retValue = TCNT_RESET_SOURCE_TGRC;
 1721                             		.loc 1 1898 0
 1722 0015 66 51                   		mov	#5, r1
1899:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 1723                             		.loc 1 1899 0
 1724 0017 2E 13                   		bra	.L170
 1725                             	.LVL163:
 1726                             	.L172:
1901:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retValue = TCNT_RESET_SOURCE_TGRD;
 1727                             		.loc 1 1901 0
 1728 0019 66 61                   		mov	#6, r1
1902:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 1729                             		.loc 1 1902 0
 1730 001b 2E 0F                   		bra	.L170
 1731                             	.LVL164:
 1732                             	.L168:
1907:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 1733                             		.loc 1 1907 0
 1734 001d 75 41 30                		mov.L	#48, r1
 1735 0020 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 1736                             	.LVL165:
 1737                             		.balign 2,3,1
 1738                             	.L176:
1888:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t retValue=0;
 1739                             		.loc 1 1888 0
 1740 0024 66 01                   		mov	#0, r1
1908:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 1741                             		.loc 1 1908 0
 1742 0026 0C                      		bra	.L170
 1743                             	.L175:
1895:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retValue = TCNT_RESET_SOURCE_TGRB;
 1744                             		.loc 1 1895 0
 1745 0027 66 21                   		mov	#2, r1
 1746                             	.LVL166:
 1747 0029 03                      		.balign 2,3,1
 1748                             	.L170:
1911:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 1749                             		.loc 1 1911 0
 1750 002a 64 71                   		and #7, r1
 1751                             	.LVL167:
 1752 002c 02                      		rts
 1753                             	.LFE48:
 1755 002d 03                      		.section	.text.MapClearResourceId,"ax",@progbits
 1756                             		.global	_MapClearResourceId
 1758                             	_MapClearResourceId:
 1759                             	.LFB49:
1914:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 1760                             		.loc 1 1914 0
 1761                             	.LVL168:
1916:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(clrValue)
 1762                             		.loc 1 1916 0
 1763 0000 5B 11                   		movu.B	r1, r1
 1764 0002 61 61                   		cmp	#6, r1
 1765 0004 24 19                   		bgtu	.L178
 1766 0006 FB E2 00 00 00 00       		mov.L	#.L184, r14
 1767 000c FE 61 EE                		mov.L	[r1,r14], r14
 1768                             		
 1769 000f 7F 0E                   	1:jmp	r14
 1770                             		.section	.rodata.MapClearResourceId,"a",@progbits
 1771                             		.balign 4
 1772                             		.balign 4
 1773                             	.L184:
 1774 0000 00 00 00 19             		.long .L179
 1775 0004 00 00 00 24             		.long .L186
 1776 0008 00 00 00 27             		.long .L185
 1777 000c 00 00 00 1D             		.long .L178
 1778 0010 00 00 00 1D             		.long .L178
 1779 0014 00 00 00 11             		.long .L182
 1780 0018 00 00 00 15             		.long .L183
 1781                             		.section	.text.MapClearResourceId
 1782                             	.L182:
 1783                             	.LVL169:
1925:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retValue = TCNT_CLEARING_TGRC;
 1784                             		.loc 1 1925 0
 1785 0011 66 21                   		mov	#2, r1
 1786                             	.LVL170:
1926:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 1787                             		.loc 1 1926 0
 1788 0013 2E 17                   		bra	.L181
 1789                             	.LVL171:
 1790                             	.L183:
1928:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retValue = TCNT_CLEARING_TGRD;
 1791                             		.loc 1 1928 0
 1792 0015 66 31                   		mov	#3, r1
1929:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 1793                             		.loc 1 1929 0
 1794 0017 2E 13                   		bra	.L181
 1795                             	.LVL172:
 1796                             	.L179:
1931:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retValue = TCNT_CLEARING_OVERFLOW;
 1797                             		.loc 1 1931 0
 1798 0019 66 41                   		mov	#4, r1
1932:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 1799                             		.loc 1 1932 0
 1800 001b 2E 0F                   		bra	.L181
 1801                             	.LVL173:
 1802                             	.L178:
1934:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 1803                             		.loc 1 1934 0
 1804 001d 75 41 30                		mov.L	#48, r1
 1805 0020 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 1806                             	.LVL174:
 1807                             		.balign 2,3,1
 1808                             	.L186:
1915:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t retValue=0;
 1809                             		.loc 1 1915 0
 1810 0024 66 01                   		mov	#0, r1
1935:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 1811                             		.loc 1 1935 0
 1812 0026 0C                      		bra	.L181
 1813                             	.L185:
1922:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retValue = TCNT_CLEARING_TGRB;
 1814                             		.loc 1 1922 0
 1815 0027 66 11                   		mov	#1, r1
 1816                             	.LVL175:
 1817 0029 03                      		.balign 2,3,1
 1818                             	.L181:
1938:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 1819                             		.loc 1 1938 0
 1820 002a 64 71                   		and #7, r1
 1821                             	.LVL176:
 1822 002c 02                      		rts
 1823                             	.LFE49:
 1825 002d 03                      		.section	.text.TMR_GetClearSourceId,"ax",@progbits
 1826                             		.global	_TMR_GetClearSourceId
 1828                             	_TMR_GetClearSourceId:
 1829                             	.LFB52:
1998:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 1830                             		.loc 1 1998 0
 1831                             	.LVL177:
2001:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     clrValue = GetInternalHWClearSourceValue(tmrId);
 1832                             		.loc 1 2001 0
 1833 0000 05 00 00 00             		bsr	_GetInternalHWClearSourceValue
 1834                             	.LVL178:
2003:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return	MapClearResourceId(clrValue);
 1835                             		.loc 1 2003 0
 1836 0004 04 00 00 00             		bra	_MapClearResourceId
 1837                             	.LVL179:
 1838                             	.LFE52:
 1840                             		.section	.text.Threshold2SetUpUnsupported,"ax",@progbits
 1841                             		.global	_Threshold2SetUpUnsupported
 1843                             	_Threshold2SetUpUnsupported:
 1844                             	.LFB53:
2014:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 1845                             		.loc 1 2014 0
 1846                             	.LVL180:
2016:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end Thereshold2SetUpUnsupported*/
 1847                             		.loc 1 2016 0
 1848 0000 66 11                   		mov.L	#1, r1
 1849                             	.LVL181:
 1850 0002 02                      		rts
 1851                             	.LFE53:
 1853                             		.section	.text.TMR_CheckClearSourceIdFailed,"ax",@progbits
 1854                             		.global	_TMR_CheckClearSourceIdFailed
 1856                             	_TMR_CheckClearSourceIdFailed:
 1857                             	.LFB54:
2027:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 1858                             		.loc 1 2027 0
 1859                             	.LVL182:
2029:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(  clrSrcId == TCNT_CLEARING_OVERFLOW )
 1860                             		.loc 1 2029 0
 1861 0000 5B 22                   		movu.B	r2, r2
 1862 0002 61 42                   		cmp	#4, r2
 1863 0004 20 1C                   		beq	.L197
2033:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (tmrID)
 1864                             		.loc 1 2033 0
 1865 0006 5B 11                   		movu.B	r1, r1
 1866 0008 61 41                   		cmp	#4, r1
 1867 000a 24 19                   		bgtu	.L198
 1868 000c FB E2 00 00 00 00       		mov.L	#.L196, r14
 1869 0012 FE 61 EE                		mov.L	[r1,r14], r14
 1870                             		
 1871 0015 7F 0E                   	1:jmp	r14
 1872                             		.section	.rodata.TMR_CheckClearSourceIdFailed,"a",@progbits
 1873                             		.balign 4
 1874                             		.balign 4
 1875                             	.L196:
 1876 0000 00 00 00 1A             		.long .L195
 1877 0004 00 00 00 17             		.long .L193
 1878 0008 00 00 00 17             		.long .L193
 1879 000c 00 00 00 1A             		.long .L195
 1880 0010 00 00 00 1A             		.long .L195
 1881                             		.section	.text.TMR_CheckClearSourceIdFailed
 1882                             	.L193:
2031:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return 0; /* not fail*/
 1883                             		.loc 1 2031 0
 1884 0017 61 12                   		cmp	#1, r2
 1885 0019 0B                      		bra	.L199
 1886                             	.L195:
 1887 001a 61 32                   		cmp	#3, r2
 1888                             		.balign 2,3,2
 1889                             	.L199:
 1890 001c FC DB 14                		scgtu.L	r1
 1891                             	.LVL183:
 1892 001f 02                      		rts
 1893                             	.LVL184:
 1894                             	.L197:
 1895 0020 66 01                   		mov.L	#0, r1
 1896                             	.LVL185:
 1897 0022 02                      		rts
 1898                             	.L198:
2077:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal = 1;
 1899                             		.loc 1 2077 0
 1900 0023 66 11                   		mov.L	#1, r1
2082:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_CheckClearSourceIdFailed*/
 1901                             		.loc 1 2082 0
 1902 0025 02                      		rts
 1903                             	.LFE54:
 1905                             		.section	.text.TMR_GetClearSourceCh,"ax",@progbits
 1906                             		.global	_TMR_GetClearSourceCh
 1908                             	_TMR_GetClearSourceCh:
 1909                             	.LFB55:
2091:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 1910                             		.loc 1 2091 0
 1911                             	.LVL186:
2093:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(  clrSrcId == TCNT_CLEARING_OVERFLOW )
 1912                             		.loc 1 2093 0
 1913 0000 5B 22                   		movu.B	r2, r2
 1914 0002 61 42                   		cmp	#4, r2
 1915 0004 20 51                   		beq	.L214
2097:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (tmrID)
 1916                             		.loc 1 2097 0
 1917 0006 5B 11                   		movu.B	r1, r1
 1918 0008 61 41                   		cmp	#4, r1
 1919 000a 24 4B                   		bgtu	.L214
 1920 000c FB E2 00 00 00 00       		mov.L	#.L207, r14
 1921 0012 FE 61 EE                		mov.L	[r1,r14], r14
 1922                             		
 1923 0015 7F 0E                   	1:jmp	r14
 1924                             		.section	.rodata.TMR_GetClearSourceCh,"a",@progbits
 1925                             		.balign 4
 1926                             		.balign 4
 1927                             	.L207:
 1928 0000 00 00 00 17             		.long .L202
 1929 0004 00 00 00 23             		.long .L203
 1930 0008 00 00 00 2F             		.long .L204
 1931 000c 00 00 00 3B             		.long .L205
 1932 0010 00 00 00 47             		.long .L206
 1933                             		.section	.text.TMR_GetClearSourceCh
 1934                             	.L202:
 1935 0017 61 32                   		cmp	#3, r2
 1936 0019 24 3C                   		bgtu	.L214
 1937 001b 70 22 00 00 00 00       		add	#_CSWTCH.67, r2
 1938                             	.LVL187:
 1939 0021 2E 31                   		bra	.L215
 1940                             	.LVL188:
 1941                             	.L203:
 1942 0023 61 12                   		cmp	#1, r2
 1943 0025 24 30                   		bgtu	.L214
 1944 0027 70 22 00 00 00 00       		add	#_CSWTCH.69, r2
 1945                             	.LVL189:
 1946 002d 2E 25                   		bra	.L215
 1947                             	.LVL190:
 1948                             	.L204:
 1949 002f 61 12                   		cmp	#1, r2
 1950 0031 24 24                   		bgtu	.L214
 1951 0033 70 22 00 00 00 00       		add	#_CSWTCH.71, r2
 1952                             	.LVL191:
 1953 0039 2E 19                   		bra	.L215
 1954                             	.LVL192:
 1955                             	.L205:
 1956 003b 61 32                   		cmp	#3, r2
 1957 003d 24 18                   		bgtu	.L214
 1958 003f 70 22 00 00 00 00       		add	#_CSWTCH.73, r2
 1959                             	.LVL193:
 1960 0045 2E 0D                   		bra	.L215
 1961                             	.LVL194:
 1962                             	.L206:
 1963 0047 61 32                   		cmp	#3, r2
 1964 0049 24 0C                   		bgtu	.L214
 1965 004b 70 22 00 00 00 00       		add	#_CSWTCH.75, r2
 1966                             	.LVL195:
 1967 0051 03                      		.balign 2,3,5
 1968                             	.L215:
 1969 0052 CC 21                   		mov.B	[r2], r1
 1970                             	.LVL196:
 1971 0054 0C                      		bra	.L201
 1972                             	.L214:
2095:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return NO_CHANNEL_ID; /* no ch source*/
 1973                             		.loc 1 2095 0
 1974 0055 FB 16 FF                		mov	#-1, r1
 1975                             		.balign 2,3,1
 1976                             	.L201:
2187:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_CheckClearSourceIdFailed*/
 1977                             		.loc 1 2187 0
 1978 0058 5B 11                   		movu.B	r1, r1
 1979 005a 02                      		rts
 1980                             	.LFE55:
 1982 005b 03                      		.section	.text.TMR_ClockGate,"ax",@progbits
 1983                             		.global	_TMR_ClockGate
 1985                             	_TMR_ClockGate:
 1986                             	.LFB56:
2202:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 1987                             		.loc 1 2202 0
 1988                             	.LVL197:
 1989 0000 7E A7                   		push.l	r7
 1990                             	.LCFI4:
 1991 0002 EF 27                   		mov.L	r2, r7
2204:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( hwCntrlId >= NUM_HW_CNTR)
 1992                             		.loc 1 2204 0
 1993 0004 5B 11                   		movu.B	r1, r1
 1994 0006 61 41                   		cmp	#4, r1
 1995 0008 25 0A                   		bleu	.L217
2206:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(0);
 1996                             		.loc 1 2206 0
 1997 000a 75 41 30                		mov.L	#48, r1
 1998                             	.LVL198:
 1999 000d 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 2000                             	.LVL199:
 2001 0011 03                      		.balign 2,3,4
 2002                             	.L217:
2210:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     DISABLE_REGISTER_WRITE_PROTECTION;
 2003                             		.loc 1 2210 0
 2004 0012 FB EE 00 00 08          		mov.L	#0x80000, r14
 2005 0017 FA E9 FF 01 0F A5       		mov.W	#0xffffa50f, 1022[r14]
2213:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SYSTEM.MSTPCRA.BIT.MSTPA9 = 0; /* Power up module*/
 2006                             		.loc 1 2213 0
 2007 001d ED E4 04                		mov.L	16[r14], r4
2211:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if (TRUE == gate)
 2008                             		.loc 1 2211 0
 2009 0020 61 17                   		cmp	#1, r7
 2010 0022 1C                      		bne	.L218
2213:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SYSTEM.MSTPCRA.BIT.MSTPA9 = 0; /* Power up module*/
 2011                             		.loc 1 2213 0
 2012 0023 7A 94                   		bclr	#9, r4
 2013 0025 0B                      		bra	.L221
 2014                             	.L218:
2217:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SYSTEM.MSTPCRA.BIT.MSTPA9 = 1; /* Power up module*/
 2015                             		.loc 1 2217 0
 2016 0026 78 94                   		bset	#9, r4
 2017                             		.balign 2,3,5
 2018                             	.L221:
 2019 0028 E7 E4 04                		mov.L	r4, 16[r14]
2219:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ENABLE_REGISTER_WRITE_PROTECTION;
 2020                             		.loc 1 2219 0
 2021 002b FA E9 FF 01 00 A5       		mov.W	#0xffffa500, 1022[r14]
2221:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMT_ClockGate function*/
 2022                             		.loc 1 2221 0
 2023 0031 3F 77 01                		rtsd	#4, r7-r7
 2024                             	.LFE56:
 2026                             		.section	.text.TMR_SetPrescaler,"ax",@progbits
 2027                             		.global	_TMR_SetPrescaler
 2029                             	_TMR_SetPrescaler:
 2030                             	.LFB57:
2230:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 2031                             		.loc 1 2230 0
 2032                             	.LVL200:
2231:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(tmrID)
 2033                             		.loc 1 2231 0
 2034 0000 5B 11                   		movu.B	r1, r1
 2035 0002 61 41                   		cmp	#4, r1
 2036 0004 24 64                   		bgtu	.L223
 2037 0006 FB E2 00 00 00 00       		mov.L	#.L229, r14
 2038 000c FE 61 EE                		mov.L	[r1,r14], r14
2246:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TCR.BIT.TPSC = prescaler;
 2039                             		.loc 1 2246 0
 2040 000f 64 72                   		and #7, r2
 2041                             	.LVL201:
2231:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(tmrID)
 2042                             		.loc 1 2231 0
 2043                             		
 2044 0011 7F 0E                   	1:jmp	r14
 2045                             		.section	.rodata.TMR_SetPrescaler,"a",@progbits
 2046                             		.balign 4
 2047                             		.balign 4
 2048                             	.L229:
 2049 0000 00 00 00 13             		.long .L224
 2050 0004 00 00 00 24             		.long .L225
 2051 0008 00 00 00 35             		.long .L226
 2052 000c 00 00 00 48             		.long .L227
 2053 0010 00 00 00 57             		.long .L228
 2054                             		.section	.text.TMR_SetPrescaler
 2055                             	.L224:
2234:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TCR.BIT.TPSC = prescaler;
 2056                             		.loc 1 2234 0
 2057 0013 FB EE 90 86 08          		mov.L	#0x88690, r14
 2058 0018 CD E4 70                		mov.B	112[r14], r4
 2059 001b 75 24 F8                		and #-8, r4
 2060 001e 57 42                   		or	r4, r2
 2061 0020 C7 E2 70                		mov.B	r2, 112[r14]
2235:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 2062                             		.loc 1 2235 0
 2063 0023 02                      		rts
 2064                             	.L225:
2237:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1.TCR.BIT.TPSC = prescaler;
 2065                             		.loc 1 2237 0
 2066 0024 FB EE 90 86 08          		mov.L	#0x88690, r14
 2067 0029 CD E4 F0                		mov.B	240[r14], r4
 2068 002c 75 24 F8                		and #-8, r4
 2069 002f 57 42                   		or	r4, r2
 2070 0031 C7 E2 F0                		mov.B	r2, 240[r14]
2238:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 2071                             		.loc 1 2238 0
 2072 0034 02                      		rts
 2073                             	.L226:
2240:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2.TCR.BIT.TPSC = prescaler;
 2074                             		.loc 1 2240 0
 2075 0035 FB EE 92 86 08          		mov.L	#0x88692, r14
 2076 003a CE E4 6E 01             		mov.B	366[r14], r4
 2077 003e 75 24 F8                		and #-8, r4
 2078 0041 57 42                   		or	r4, r2
 2079 0043 CB E2 6E 01             		mov.B	r2, 366[r14]
2241:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 2080                             		.loc 1 2241 0
 2081 0047 02                      		rts
 2082                             	.L227:
2243:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TCR.BIT.TPSC = prescaler;
 2083                             		.loc 1 2243 0
 2084 0048 FB EE 00 86 08          		mov.L	#0x88600, r14
 2085 004d CC E4                   		mov.B	[r14], r4
 2086 004f 75 24 F8                		and #-8, r4
 2087 0052 57 42                   		or	r4, r2
 2088 0054 C3 E2                   		mov.B	r2, [r14]
2244:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 2089                             		.loc 1 2244 0
 2090 0056 02                      		rts
 2091                             	.L228:
2246:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TCR.BIT.TPSC = prescaler;
 2092                             		.loc 1 2246 0
 2093 0057 FB EE 00 86 08          		mov.L	#0x88600, r14
 2094 005c CD E4 01                		mov.B	1[r14], r4
 2095 005f 75 24 F8                		and #-8, r4
 2096 0062 57 42                   		or	r4, r2
 2097 0064 C7 E2 01                		mov.B	r2, 1[r14]
2247:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 2098                             		.loc 1 2247 0
 2099 0067 02                      		rts
 2100                             	.LVL202:
 2101                             	.L223:
2249:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(0);
 2102                             		.loc 1 2249 0
 2103 0068 75 41 30                		mov.L	#48, r1
 2104                             	.LVL203:
 2105 006b 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 2106                             	.LVL204:
 2107                             	.LFE57:
 2109                             		.section	.text.TMR_GetPrescalerDiv,"ax",@progbits
 2110                             		.global	_TMR_GetPrescalerDiv
 2112                             	_TMR_GetPrescalerDiv:
 2113                             	.LFB58:
2256:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 2114                             		.loc 1 2256 0
 2115                             	.LVL205:
2259:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(tmrID)
 2116                             		.loc 1 2259 0
 2117 0000 5B 11                   		movu.B	r1, r1
 2118 0002 61 41                   		cmp	#4, r1
 2119 0004 24 48                   		bgtu	.L232
 2120 0006 FB E2 00 00 00 00       		mov.L	#.L238, r14
 2121 000c FE 61 EE                		mov.L	[r1,r14], r14
 2122                             		
 2123 000f 7F 0E                   	1:jmp	r14
 2124                             		.section	.rodata.TMR_GetPrescalerDiv,"a",@progbits
 2125                             		.balign 4
 2126                             		.balign 4
 2127                             	.L238:
 2128 0000 00 00 00 11             		.long .L233
 2129 0004 00 00 00 1A             		.long .L234
 2130 0008 00 00 00 2E             		.long .L235
 2131 000c 00 00 00 39             		.long .L236
 2132 0010 00 00 00 42             		.long .L237
 2133                             		.section	.text.TMR_GetPrescalerDiv
 2134                             	.L233:
2262:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal = prescalerDivMap[MTU0.TCR.BIT.TPSC];
 2135                             		.loc 1 2262 0
 2136 0011 FB EE 90 86 08          		mov.L	#0x88690, r14
 2137 0016 CD E4 70                		mov.B	112[r14], r4
 2138 0019 09                      		bra	.L240
 2139                             	.L234:
2265:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal = prescalerDivMap[MTU1.TCR.BIT.TPSC];
 2140                             		.loc 1 2265 0
 2141 001a FB EE 90 86 08          		mov.L	#0x88690, r14
 2142 001f CD E4 F0                		mov.B	240[r14], r4
 2143                             		.balign 2,3,1
 2144                             	.L240:
 2145 0022 64 74                   		and #7, r4
 2146 0024 FB E2 00 00 00 00       		mov.L	#_prescalerDivMap, r14
 2147 002a FE 64 E1                		mov.L	[r4,r14], r1
 2148                             	.LVL206:
2266:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 2149                             		.loc 1 2266 0
 2150 002d 02                      		rts
 2151                             	.LVL207:
 2152                             	.L235:
2268:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal = prescalerDivMap[MTU2.TCR.BIT.TPSC];
 2153                             		.loc 1 2268 0
 2154 002e FB EE 92 86 08          		mov.L	#0x88692, r14
 2155 0033 CE E4 6E 01             		mov.B	366[r14], r4
 2156 0037 2E EB                   		bra	.L240
 2157                             	.L236:
2271:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal = prescalerDivMap[MTU3.TCR.BIT.TPSC];
 2158                             		.loc 1 2271 0
 2159 0039 FB EE 00 86 08          		mov.L	#0x88600, r14
 2160 003e CC E4                   		mov.B	[r14], r4
 2161 0040 2E E2                   		bra	.L240
 2162                             	.L237:
2274:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal = prescalerDivMap[MTU4.TCR.BIT.TPSC];
 2163                             		.loc 1 2274 0
 2164 0042 FB EE 00 86 08          		mov.L	#0x88600, r14
 2165 0047 CD E4 01                		mov.B	1[r14], r4
 2166 004a 2E D8                   		bra	.L240
 2167                             	.L232:
2277:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(0);
 2168                             		.loc 1 2277 0
 2169 004c 75 41 30                		mov.L	#48, r1
 2170 004f 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 2171                             	.LVL208:
2257:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint32_t retVal=0;
 2172                             		.loc 1 2257 0
 2173 0053 66 01                   		mov.L	#0, r1
 2174                             	.LVL209:
2281:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 2175                             		.loc 1 2281 0
 2176 0055 02                      		rts
 2177                             	.LFE58:
 2179                             		.section	.text.TMR_GetTickResolution,"ax",@progbits
 2180                             		.global	_TMR_GetTickResolution
 2182                             	_TMR_GetTickResolution:
 2183                             	.LFB59:
2285:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 2184                             		.loc 1 2285 0
 2185                             	.LVL210:
2287:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     retVal = 1000000000/(CLK_GetInternalClockSync()/TMR_GetPrescalerDiv(tmrId));
 2186                             		.loc 1 2287 0
 2187 0000 05 00 00 00             		bsr	_TMR_GetPrescalerDiv
 2188                             	.LVL211:
 2189 0004 FB E2 00 2D 31 01       		mov.L	#0x1312d00, r14
 2190 000a FC 27 1E                		divu	r1, r14
2289:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 2191                             		.loc 1 2289 0
 2192 000d FB 12 00 CA 9A 3B       		mov.L	#0x3b9aca00, r1
 2193                             	.LVL212:
 2194 0013 FC 27 E1                		divu	r14, r1
 2195                             	.LVL213:
 2196 0016 02                      		rts
 2197                             	.LFE59:
 2199                             		.section	.text.TMR_SetSetPrescaleForTickResolution,"ax",@progbits
 2200                             		.global	_TMR_SetSetPrescaleForTickResolution
 2202                             	_TMR_SetSetPrescaleForTickResolution:
 2203                             	.LFB60:
2292:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 2204                             		.loc 1 2292 0
 2205                             	.LVL214:
2294:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 2206                             		.loc 1 2294 0
 2207 0000 66 01                   		mov.L	#0, r1
 2208                             	.LVL215:
 2209 0002 02                      		rts
 2210                             	.LFE60:
 2212                             		.section	.text.TMR_SetPrescalerDfltValue,"ax",@progbits
 2213                             		.global	_TMR_SetPrescalerDfltValue
 2215                             	_TMR_SetPrescalerDfltValue:
 2216                             	.LFB61:
2303:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 2217                             		.loc 1 2303 0
 2218                             	.LVL216:
2304:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(tmrID)
 2219                             		.loc 1 2304 0
 2220 0000 5B 11                   		movu.B	r1, r1
 2221 0002 61 41                   		cmp	#4, r1
 2222 0004 24 58                   		bgtu	.L244
 2223 0006 FB E2 00 00 00 00       		mov.L	#.L250, r14
 2224 000c FE 61 EE                		mov.L	[r1,r14], r14
 2225                             		
 2226 000f 7F 0E                   	1:jmp	r14
 2227                             		.section	.rodata.TMR_SetPrescalerDfltValue,"a",@progbits
 2228                             		.balign 4
 2229                             		.balign 4
 2230                             	.L250:
 2231 0000 00 00 00 11             		.long .L245
 2232 0004 00 00 00 20             		.long .L246
 2233 0008 00 00 00 2F             		.long .L247
 2234 000c 00 00 00 40             		.long .L248
 2235 0010 00 00 00 4D             		.long .L249
 2236                             		.section	.text.TMR_SetPrescalerDfltValue
 2237                             	.L245:
2307:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TCR.BYTE &= _PR_DEFAULT;
 2238                             		.loc 1 2307 0
 2239 0011 FB EE 90 86 08          		mov.L	#0x88690, r14
 2240 0016 CD E4 70                		mov.B	112[r14], r4
 2241 0019 75 24 F8                		and #-8, r4
 2242 001c C7 E4 70                		mov.B	r4, 112[r14]
2308:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 2243                             		.loc 1 2308 0
 2244 001f 02                      		rts
 2245                             	.L246:
2310:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1.TCR.BYTE &= _PR_DEFAULT;
 2246                             		.loc 1 2310 0
 2247 0020 FB EE 90 86 08          		mov.L	#0x88690, r14
 2248 0025 CD E4 F0                		mov.B	240[r14], r4
 2249 0028 75 24 F8                		and #-8, r4
 2250 002b C7 E4 F0                		mov.B	r4, 240[r14]
2311:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 2251                             		.loc 1 2311 0
 2252 002e 02                      		rts
 2253                             	.L247:
2313:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2.TCR.BYTE &= _PR_DEFAULT;
 2254                             		.loc 1 2313 0
 2255 002f FB EE 92 86 08          		mov.L	#0x88692, r14
 2256 0034 CE E4 6E 01             		mov.B	366[r14], r4
 2257 0038 75 24 F8                		and #-8, r4
 2258 003b CB E4 6E 01             		mov.B	r4, 366[r14]
2314:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 2259                             		.loc 1 2314 0
 2260 003f 02                      		rts
 2261                             	.L248:
2316:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TCR.BYTE &= _PR_DEFAULT;
 2262                             		.loc 1 2316 0
 2263 0040 FB EE 00 86 08          		mov.L	#0x88600, r14
 2264 0045 CC E4                   		mov.B	[r14], r4
 2265 0047 75 24 F8                		and #-8, r4
 2266 004a C3 E4                   		mov.B	r4, [r14]
2317:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 2267                             		.loc 1 2317 0
 2268 004c 02                      		rts
 2269                             	.L249:
2319:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TCR.BYTE &= _PR_DEFAULT;
 2270                             		.loc 1 2319 0
 2271 004d FB EE 00 86 08          		mov.L	#0x88600, r14
 2272 0052 CD E4 01                		mov.B	1[r14], r4
 2273 0055 75 24 F8                		and #-8, r4
 2274 0058 C7 E4 01                		mov.B	r4, 1[r14]
2320:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 2275                             		.loc 1 2320 0
 2276 005b 02                      		rts
 2277                             	.L244:
2322:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 2278                             		.loc 1 2322 0
 2279 005c 75 41 30                		mov.L	#48, r1
 2280                             	.LVL217:
 2281 005f 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 2282                             	.LVL218:
 2283                             	.LFE61:
 2285                             		.section	.text.TMR_SetCountDir,"ax",@progbits
 2286                             		.global	_TMR_SetCountDir
 2288                             	_TMR_SetCountDir:
 2289                             	.LFB62:
2336:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 2290                             		.loc 1 2336 0
 2291                             	.LVL219:
2337:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( direction != 1) /* only TMR_COUNT_UP ia allowed*/
 2292                             		.loc 1 2337 0
 2293 0000 5B 22                   		movu.B	r2, r2
 2294 0002 61 12                   		cmp	#1, r2
 2295 0004 10                      		beq	.L252
2338:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 2296                             		.loc 1 2338 0
 2297 0005 75 41 30                		mov.L	#48, r1
 2298                             	.LVL220:
 2299 0008 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 2300                             	.LVL221:
 2301                             	.L252:
 2302 000c 02                      		rts
 2303                             	.LFE62:
 2305                             		.section	.text.TMR_SetCountDirDfltValue,"ax",@progbits
 2306                             		.global	_TMR_SetCountDirDfltValue
 2308                             	_TMR_SetCountDirDfltValue:
 2309                             	.LFB63:
2347:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 2310                             		.loc 1 2347 0
 2311                             	.LVL222:
 2312 0000 02                      		rts
 2313                             	.LFE63:
 2315                             		.section	.text.TMR_SetModulo,"ax",@progbits
 2316                             		.global	_TMR_SetModulo
 2318                             	_TMR_SetModulo:
 2319                             	.LFB64:
2360:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 2320                             		.loc 1 2360 0
2360:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 2321                             		.loc 1 2360 0
 2322 0000 6E 7B                   		pushm	r7-r11
 2323                             	.LCFI5:
 2324 0002 CF 1B                   		mov.B	r1, r11
 2325 0004 DF 27                   		mov.W	r2, r7
 2326 0006 CF 3A                   		mov.B	r3, r10
 2327                             	.LBB18:
 2328                             	.LBB19:
1944:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     clrValue = MapClearResourceValue(clrSrcId);
 2329                             		.loc 1 1944 0
 2330 0008 CF 31                   		mov.B	r3, r1
 2331 000a 05 00 00 00             		bsr	_MapClearResourceValue
1946:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(tmrId)
 2332                             		.loc 1 1946 0
 2333 000e 5B B4                   		movu.B	r11, r4
 2334 0010 61 44                   		cmp	#4, r4
 2335 0012 24 7B                   		bgtu	.L256
 2336 0014 FB 32 00 00 00 00       		mov.L	#.L262, r3
 2337 001a FE 64 34                		mov.L	[r4,r3], r4
1961:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TCR.BIT.CCLR = clrValue;
 2338                             		.loc 1 1961 0
 2339 001d EF 1E                   		mov.L	r1, r14
1946:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(tmrId)
 2340                             		.loc 1 1946 0
 2341                             		
 2342 001f 7F 04                   	1:jmp	r4
 2343                             		.section	.rodata.TMR_SetModulo,"a",@progbits
 2344                             		.balign 4
 2345                             		.balign 4
 2346                             	.L262:
 2347 0000 00 00 00 21             		.long .L257
 2348 0004 00 00 00 37             		.long .L258
 2349 0008 00 00 00 4D             		.long .L259
 2350 000c 00 00 00 65             		.long .L260
 2351 0010 00 00 00 79             		.long .L261
 2352                             		.section	.text.TMR_SetModulo
 2353                             	.L257:
1949:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TCR.BIT.CCLR = clrValue;
 2354                             		.loc 1 1949 0
 2355 0021 64 7E                   		and #7, r14
 2356 0023 FB 4E 90 86 08          		mov.L	#0x88690, r4
 2357 0028 6C 5E                   		shll	#5, r14
 2358 002a CD 43 70                		mov.B	112[r4], r3
 2359 002d 75 23 1F                		and #31, r3
 2360 0030 57 3E                   		or	r3, r14
 2361 0032 C7 4E 70                		mov.B	r14, 112[r4]
 2362 0035 2E 5F                   		bra	.L263
 2363                             	.L258:
1952:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1.TCR.BIT.CCLR = clrValue;
 2364                             		.loc 1 1952 0
 2365 0037 64 3E                   		and #3, r14
 2366 0039 FB 4E 90 86 08          		mov.L	#0x88690, r4
 2367 003e 6C 5E                   		shll	#5, r14
 2368 0040 CD 43 F0                		mov.B	240[r4], r3
 2369 0043 75 23 9F                		and #0xffffff9f, r3
 2370 0046 57 3E                   		or	r3, r14
 2371 0048 C7 4E F0                		mov.B	r14, 240[r4]
 2372 004b 2E 49                   		bra	.L263
 2373                             	.L259:
1955:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2.TCR.BIT.CCLR = clrValue;
 2374                             		.loc 1 1955 0
 2375 004d 64 3E                   		and #3, r14
 2376 004f FB 4E 92 86 08          		mov.L	#0x88692, r4
 2377 0054 6C 5E                   		shll	#5, r14
 2378 0056 CE 43 6E 01             		mov.B	366[r4], r3
 2379 005a 75 23 9F                		and #0xffffff9f, r3
 2380 005d 57 3E                   		or	r3, r14
 2381 005f CB 4E 6E 01             		mov.B	r14, 366[r4]
 2382 0063 2E 31                   		bra	.L263
 2383                             	.L260:
1958:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TCR.BIT.CCLR = clrValue;
 2384                             		.loc 1 1958 0
 2385 0065 64 7E                   		and #7, r14
 2386 0067 FB 4E 00 86 08          		mov.L	#0x88600, r4
 2387 006c 6C 5E                   		shll	#5, r14
 2388 006e CC 43                   		mov.B	[r4], r3
 2389 0070 75 23 1F                		and #31, r3
 2390 0073 57 3E                   		or	r3, r14
 2391 0075 C3 4E                   		mov.B	r14, [r4]
 2392 0077 2E 1D                   		bra	.L263
 2393                             	.L261:
1961:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TCR.BIT.CCLR = clrValue;
 2394                             		.loc 1 1961 0
 2395 0079 64 7E                   		and #7, r14
 2396 007b FB 4E 00 86 08          		mov.L	#0x88600, r4
 2397 0080 6C 5E                   		shll	#5, r14
 2398 0082 88 4B                   		mov.B	1[r4], r3
 2399 0084 75 23 1F                		and #31, r3
 2400 0087 57 3E                   		or	r3, r14
 2401 0089 C7 4E 01                		mov.B	r14, 1[r4]
 2402 008c 08                      		bra	.L263
 2403                             	.L256:
1964:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 2404                             		.loc 1 1964 0
 2405 008d 75 41 30                		mov.L	#48, r1
 2406 0090 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 2407                             		.balign 2,3,1
 2408                             	.L263:
 2409                             	.LBE19:
 2410                             	.LBE18:
2363:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if (clrSrcId == TCNT_CLEARING_OVERFLOW && period != 0xFFFF )
 2411                             		.loc 1 2363 0
 2412 0094 5B AE                   		movu.B	r10, r14
 2413 0096 61 4E                   		cmp	#4, r14
 2414 0098 21 12                   		bne	.L264
2363:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if (clrSrcId == TCNT_CLEARING_OVERFLOW && period != 0xFFFF )
 2415                             		.loc 1 2363 0 is_stmt 0 discriminator 1
 2416 009a 5F 7E                   		movu.W	r7, r14
 2417 009c 77 0E FF FF 00          		cmp	#0xffff, r14
 2418 00a1 11                      		beq	.L264
2365:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 2419                             		.loc 1 2365 0 is_stmt 1
 2420 00a2 75 41 30                		mov.L	#48, r1
 2421 00a5 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 2422 00a9 03                      		.balign 2,3,1
 2423                             	.L264:
2368:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (tmrID)
 2424                             		.loc 1 2368 0
 2425 00aa 5B BB                   		movu.B	r11, r11
 2426 00ac 61 4B                   		cmp	#4, r11
 2427 00ae 25 05 38 F9 00          		bgtu	.L265
 2428 00b3 FB E2 14 00 00 00       		mov.L	#.L271, r14
 2429 00b9 FE 6B EB                		mov.L	[r11,r14], r11
 2430 00bc 5B AE                   		movu.B	r10, r14
2427:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_TGRA) /* Set MTU0 compare value in TGRx*/
 2431                             		.loc 1 2427 0
 2432 00be 61 0E                   		cmp	#0, r14
2368:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (tmrID)
 2433                             		.loc 1 2368 0
 2434                             		
 2435 00c0 7F 0B                   	1:jmp	r11
 2436                             		.section	.rodata.TMR_SetModulo
 2437                             		.balign 4
 2438                             		.balign 4
 2439                             	.L271:
 2440 0014 00 00 00 C2             		.long .L266
 2441 0018 00 00 01 06             		.long .L267
 2442 001c 00 00 01 22             		.long .L268
 2443 0020 00 00 01 3D             		.long .L269
 2444 0024 00 00 01 73             		.long .L270
 2445                             		.section	.text.TMR_SetModulo
 2446                             	.L266:
2371:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_TGRA) /* Set MTU0 compare value in TGRx*/
 2447                             		.loc 1 2371 0
 2448 00c2 21 0D                   		bne	.L272
2372:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU0.TGRA = period;
 2449                             		.loc 1 2372 0
 2450 00c4 FB AE 90 86 08          		mov.L	#0x88690, r10
 2451 00c9 D7 A7 3C                		mov.W	r7, 120[r10]
 2452 00cc 38 E6 00                		bra	.L255
 2453                             	.L272:
2373:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_TGRB)
 2454                             		.loc 1 2373 0
 2455 00cf 61 1E                   		cmp	#1, r14
 2456 00d1 21 0D                   		bne	.L274
2374:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU0.TGRB = period;
 2457                             		.loc 1 2374 0
 2458 00d3 FB AE 90 86 08          		mov.L	#0x88690, r10
 2459 00d8 D7 A7 3D                		mov.W	r7, 122[r10]
 2460 00db 38 D7 00                		bra	.L255
 2461                             	.L274:
2375:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_TGRC)
 2462                             		.loc 1 2375 0
 2463 00de 61 2E                   		cmp	#2, r14
 2464 00e0 21 0D                   		bne	.L275
2376:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU0.TGRC = period;
 2465                             		.loc 1 2376 0
 2466 00e2 FB AE 90 86 08          		mov.L	#0x88690, r10
 2467 00e7 D7 A7 3E                		mov.W	r7, 124[r10]
 2468 00ea 38 C8 00                		bra	.L255
 2469                             	.L275:
2377:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_TGRD)
 2470                             		.loc 1 2377 0
 2471 00ed 61 3E                   		cmp	#3, r14
 2472 00ef 21 0D                   		bne	.L276
2378:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU0.TGRD = period;
 2473                             		.loc 1 2378 0
 2474 00f1 FB AE 90 86 08          		mov.L	#0x88690, r10
 2475 00f6 D7 A7 3F                		mov.W	r7, 126[r10]
 2476 00f9 38 B9 00                		bra	.L255
 2477                             	.L276:
2379:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_OVERFLOW)
 2478                             		.loc 1 2379 0
 2479 00fc 5B AA                   		movu.B	r10, r10
 2480 00fe 61 4A                   		cmp	#4, r10
 2481 0100 3A B2 00                		beq	.L255
 2482 0103 38 A6 00                		bra	.L265
 2483                             	.L267:
2387:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_TGRA) /* Set MTU0 compare value in TGRx*/
 2484                             		.loc 1 2387 0
 2485 0106 21 0D                   		bne	.L277
2388:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU1.TGRA = period;
 2486                             		.loc 1 2388 0
 2487 0108 FB AE 90 86 08          		mov.L	#0x88690, r10
 2488 010d D7 A7 7C                		mov.W	r7, 248[r10]
 2489 0110 38 A2 00                		bra	.L255
 2490                             	.L277:
2389:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_TGRB)
 2491                             		.loc 1 2389 0
 2492 0113 61 1E                   		cmp	#1, r14
 2493 0115 21 E7                   		bne	.L276
2390:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU1.TGRB = period;
 2494                             		.loc 1 2390 0
 2495 0117 FB AE 90 86 08          		mov.L	#0x88690, r10
 2496 011c D7 A7 7D                		mov.W	r7, 250[r10]
 2497 011f 38 93 00                		bra	.L255
 2498                             	.L268:
2399:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_TGRA) /* Set MTU0 compare value in TGRx*/
 2499                             		.loc 1 2399 0
 2500 0122 21 0D                   		bne	.L278
2400:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU2.TGRA = period;
 2501                             		.loc 1 2400 0
 2502 0124 FB AE 92 86 08          		mov.L	#0x88692, r10
 2503 0129 D7 A7 BB                		mov.W	r7, 374[r10]
 2504 012c 38 86 00                		bra	.L255
 2505                             	.L278:
2401:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_TGRB)
 2506                             		.loc 1 2401 0
 2507 012f 61 1E                   		cmp	#1, r14
 2508 0131 21 CB                   		bne	.L276
2402:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU2.TGRB = period;
 2509                             		.loc 1 2402 0
 2510 0133 FB AE 92 86 08          		mov.L	#0x88692, r10
 2511 0138 D7 A7 BC                		mov.W	r7, 376[r10]
 2512 013b 2E 77                   		bra	.L255
 2513                             	.L269:
2411:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_TGRA) /* Set MTU0 compare value in TGRx*/
 2514                             		.loc 1 2411 0
 2515 013d 21 0C                   		bne	.L279
2412:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU3.TGRA = period;
 2516                             		.loc 1 2412 0
 2517 013f FB AE 00 86 08          		mov.L	#0x88600, r10
 2518 0144 D7 A7 0C                		mov.W	r7, 24[r10]
 2519 0147 2E 6B                   		bra	.L255
 2520                             	.L279:
2413:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_TGRB)
 2521                             		.loc 1 2413 0
 2522 0149 61 1E                   		cmp	#1, r14
 2523 014b 21 0C                   		bne	.L280
2414:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU3.TGRB = period;
 2524                             		.loc 1 2414 0
 2525 014d FB AE 00 86 08          		mov.L	#0x88600, r10
 2526 0152 D7 A7 0D                		mov.W	r7, 26[r10]
 2527 0155 2E 5D                   		bra	.L255
 2528                             	.L280:
2415:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_TGRC)
 2529                             		.loc 1 2415 0
 2530 0157 61 2E                   		cmp	#2, r14
 2531 0159 21 0C                   		bne	.L281
2416:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU3.TGRC = period;
 2532                             		.loc 1 2416 0
 2533 015b FB AE 00 86 08          		mov.L	#0x88600, r10
 2534 0160 D7 A7 12                		mov.W	r7, 36[r10]
 2535 0163 2E 4F                   		bra	.L255
 2536                             	.L281:
2417:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_TGRD)
 2537                             		.loc 1 2417 0
 2538 0165 61 3E                   		cmp	#3, r14
 2539 0167 21 95                   		bne	.L276
2418:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU3.TGRD = period;
 2540                             		.loc 1 2418 0
 2541 0169 FB AE 00 86 08          		mov.L	#0x88600, r10
 2542 016e D7 A7 13                		mov.W	r7, 38[r10]
 2543 0171 2E 41                   		bra	.L255
 2544                             	.L270:
2427:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_TGRA) /* Set MTU0 compare value in TGRx*/
 2545                             		.loc 1 2427 0
 2546 0173 21 0C                   		bne	.L282
2428:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU4.TGRA = period;
 2547                             		.loc 1 2428 0
 2548 0175 FB AE 00 86 08          		mov.L	#0x88600, r10
 2549 017a D7 A7 0E                		mov.W	r7, 28[r10]
 2550 017d 2E 35                   		bra	.L255
 2551                             	.L282:
2429:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_TGRB)
 2552                             		.loc 1 2429 0
 2553 017f 61 1E                   		cmp	#1, r14
 2554 0181 21 0C                   		bne	.L283
2430:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU4.TGRB = period;
 2555                             		.loc 1 2430 0
 2556 0183 FB AE 00 86 08          		mov.L	#0x88600, r10
 2557 0188 D7 A7 0F                		mov.W	r7, 30[r10]
 2558 018b 2E 27                   		bra	.L255
 2559                             	.L283:
2431:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_TGRC)
 2560                             		.loc 1 2431 0
 2561 018d 61 2E                   		cmp	#2, r14
 2562 018f 21 0C                   		bne	.L284
2432:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU4.TGRC = period;
 2563                             		.loc 1 2432 0
 2564 0191 FB AE 00 86 08          		mov.L	#0x88600, r10
 2565 0196 D7 A7 14                		mov.W	r7, 40[r10]
 2566 0199 2E 19                   		bra	.L255
 2567                             	.L284:
2433:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         else if (clrSrcId == TCNT_CLEARING_TGRD)
 2568                             		.loc 1 2433 0
 2569 019b 61 3E                   		cmp	#3, r14
 2570 019d 3B 5F FF                		bne	.L276
2434:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU4.TGRD = period;
 2571                             		.loc 1 2434 0
 2572 01a0 FB AE 00 86 08          		mov.L	#0x88600, r10
 2573 01a5 D7 A7 15                		mov.W	r7, 42[r10]
 2574 01a8 0A                      		bra	.L255
 2575                             	.L265:
2443:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 2576                             		.loc 1 2443 0
 2577 01a9 75 41 30                		mov.L	#48, r1
2446:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_SetModulo*/
 2578                             		.loc 1 2446 0
 2579 01ac 6F 7B                   		popm	r7-r11
2443:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 2580                             		.loc 1 2443 0
 2581 01ae 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 2582                             	.L255:
2446:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_SetModulo*/
 2583                             		.loc 1 2446 0
 2584 01b2 3F 7B 05                		rtsd	#20, r7-r11
 2585                             	.LFE64:
 2587 01b5 03                      		.section	.text.TMR_StopClockSource,"ax",@progbits
 2588                             		.global	_TMR_StopClockSource
 2590                             	_TMR_StopClockSource:
 2591                             	.LFB65:
2455:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 2592                             		.loc 1 2455 0
 2593                             	.LVL223:
 2594 0000 7E A7                   		push.l	r7
 2595                             	.LCFI6:
 2596 0002 CF 17                   		mov.B	r1, r7
2456:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(tmrID >= HAL_NUM_HW_CNTR)	/* Check for errors*/
 2597                             		.loc 1 2456 0
 2598 0004 5B 1E                   		movu.B	r1, r14
 2599 0006 61 4E                   		cmp	#4, r14
 2600 0008 25 0A                   		bleu	.L293
2458:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 2601                             		.loc 1 2458 0
 2602 000a 75 41 30                		mov.L	#48, r1
 2603                             	.LVL224:
 2604 000d 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 2605                             	.LVL225:
 2606 0011 0D                      		bra	.L294
 2607                             	.LVL226:
 2608                             	.L293:
2460:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(tmrID > 2)				/* TSTR Reg*/
 2609                             		.loc 1 2460 0
 2610 0012 61 2E                   		cmp	#2, r14
 2611 0014 25 04                   		bleu	.L295
 2612                             	.LVL227:
 2613                             		.balign 2,3,1
 2614                             	.L294:
2462:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         tmrID += 3;
 2615                             		.loc 1 2462 0
 2616 0016 62 37                   		add	#3, r7
 2617                             	.LVL228:
 2618                             		.balign 2,3,4
 2619                             	.L295:
2465:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     CLEAR_BIT(MTU.TSTR.BYTE, tmrID);
 2620                             		.loc 1 2465 0
 2621 0018 FB 4E 0A 86 08          		mov.L	#0x8860a, r4
 2622 001d CD 43 76                		mov.B	118[r4], r3
 2623 0020 5B 77                   		movu.B	r7, r7
 2624                             	.LVL229:
 2625 0022 FB E6 FE                		mov.L	#-2, r14
 2626 0025 FD 66 7E                		rotl	r7, r14
 2627 0028 53 3E                   		and	r3, r14
 2628 002a C7 4E 76                		mov.B	r14, 118[r4]
2466:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 2629                             		.loc 1 2466 0
 2630 002d 3F 77 01                		rtsd	#4, r7-r7
 2631                             	.LFE65:
 2633                             		.section	.text.TMR_EnableTI,"ax",@progbits
 2634                             		.global	_TMR_EnableTI
 2636                             	_TMR_EnableTI:
 2637                             	.LFB66:
2474:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 2638                             		.loc 1 2474 0
 2639 0000 7E A7                   		push.l	r7
 2640                             	.LCFI7:
2475:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(tmrID)
 2641                             		.loc 1 2475 0
 2642 0002 5B 11                   		movu.B	r1, r1
 2643 0004 61 41                   		cmp	#4, r1
 2644 0006 25 05 38 5E 01          		bgtu	.L298
 2645 000b FB E2 00 00 00 00       		mov.L	#.L304, r14
 2646 0011 FE 61 E3                		mov.L	[r1,r14], r3
 2647 0014 5B 24                   		movu.B	r2, r4
 2648 0016 FB EE 00 70 08          		mov.L	#0x87000, r14
2536:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_OVERFLOW)/* Set Interrupt priority*/
 2649                             		.loc 1 2536 0
 2650 001b 61 44                   		cmp	#4, r4
2475:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(tmrID)
 2651                             		.loc 1 2475 0
 2652                             		
 2653 001d 7F 03                   	1:jmp	r3
 2654                             		.section	.rodata.TMR_EnableTI,"a",@progbits
 2655                             		.balign 4
 2656                             		.balign 4
 2657                             	.L304:
 2658 0000 00 00 00 1F             		.long .L299
 2659 0004 00 00 00 55             		.long .L300
 2660 0008 00 00 00 99             		.long .L301
 2661 000c 00 00 00 E1             		.long .L302
 2662 0010 00 00 01 17             		.long .L303
 2663                             		.section	.text.TMR_EnableTI
 2664                             	.L299:
2478:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_OVERFLOW) /* Set Interrupt priority*/
 2665                             		.loc 1 2478 0
 2666 001f 1F                      		bne	.L305
2480:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IPR[MTU0_BASE_INT_VECTOR + clrSrcId].BYTE = MTU0_INTERRUPT_PRIORITY;
 2667                             		.loc 1 2480 0
 2668 0020 FA E4 76 03 01          		mov.B	#1, 886[r14]
 2669 0025 0F                      		bra	.L306
 2670                             	.L305:
2484:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IPR[MTU0_BASE_INT_VECTOR].BYTE = MTU0_INTERRUPT_PRIORITY;
 2671                             		.loc 1 2484 0
 2672 0026 FA E4 72 03 01          		mov.B	#1, 882[r14]
 2673 002b 03                      		.balign 2,3,1
 2674                             	.L306:
2487:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IR[MTU0_BASE_INT_VECTOR + clrSrcId].BYTE = 0x00; /* Clear interrupt flag*/
 2675                             		.loc 1 2487 0
 2676 002c 5B 22                   		movu.B	r2, r2
 2677 002e 71 24 72                		add	#0x72, r2, r4
 2678 0031 FB EE 00 70 08          		mov.L	#0x87000, r14
 2679 0036 66 07                   		mov	#0, r7
 2680 0038 FE 04 E7                		mov.B	r7, [r4,r14]
2488:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU0_INT_ENABLE_REGISTER].BYTE |= (1 << (2 + clrSrcId)); /* Enable Interrupt for se
 2681                             		.loc 1 2488 0
 2682 003b CE E4 0E 02             		mov.B	526[r14], r4
 2683 003f 71 23 02                		add	#2, r2, r3
 2684 0042 FC 63 43                		bset	r3, r4
 2685 0045 CB E4 0E 02             		mov.B	r4, 526[r14]
2490:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(MTU0.TIER.BYTE, clrSrcId);
 2686                             		.loc 1 2490 0
 2687 0049 FB EE 90 86 08          		mov.L	#0x88690, r14
 2688 004e FC 61 E2 74             		bset	r2, 116[r14].B
2491:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 2689                             		.loc 1 2491 0
 2690 0052 38 1D 01                		bra	.L297
 2691                             	.L300:
2493:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_OVERFLOW) /* Set Interrupt priority*/
 2692                             		.loc 1 2493 0
 2693 0055 21 13                   		bne	.L308
2495:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IPR[MTU1_BASE_INT_VECTOR + 2].BYTE = MTU1_INTERRUPT_PRIORITY;
 2694                             		.loc 1 2495 0
 2695 0057 FA E4 7B 03 01          		mov.B	#1, 891[r14]
2496:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IR[MTU1_BASE_INT_VECTOR + 2].BYTE = 0x00;
 2696                             		.loc 1 2496 0
 2697 005c F9 E4 7B 00             		mov.B	#0, 123[r14]
2497:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IER[MTU1_INT_ENABLE_REGISTER].BYTE |= (1 << (clrSrcId - 1));
 2698                             		.loc 1 2497 0
 2699 0060 CE E4 0F 02             		mov.B	527[r14], r4
 2700 0064 78 34                   		bset #3, r4
 2701 0066 2E 1C                   		bra	.L319
 2702                             	.L308:
2501:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IPR[MTU1_BASE_INT_VECTOR].BYTE = MTU1_INTERRUPT_PRIORITY;
 2703                             		.loc 1 2501 0
 2704 0068 FA E4 79 03 01          		mov.B	#1, 889[r14]
2502:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IR[MTU1_BASE_INT_VECTOR + clrSrcId].BYTE = 0x00;
 2705                             		.loc 1 2502 0
 2706 006d 71 43 79                		add	#0x79, r4, r3
 2707 0070 66 07                   		mov	#0, r7
 2708 0072 FE 03 E7                		mov.B	r7, [r3,r14]
2503:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IER[MTU1_INT_ENABLE_REGISTER].BYTE |= (1 << (clrSrcId +1));
 2709                             		.loc 1 2503 0
 2710 0075 CE E3 0F 02             		mov.B	527[r14], r3
 2711 0079 62 14                   		add	#1, r4
 2712 007b EF 37                   		mov.L	r3, r7
 2713 007d FC 63 74                		bset	r4, r7
 2714 0080 EF 74                   		mov.L	r7, r4
 2715                             		.balign 2,3,5
 2716                             	.L319:
 2717 0082 CB E4 0F 02             		mov.B	r4, 527[r14]
2506:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(MTU1.TIER.BYTE, clrSrcId);
 2718                             		.loc 1 2506 0
 2719 0086 FB EE 90 86 08          		mov.L	#0x88690, r14
 2720 008b CD E4 F4                		mov.B	244[r14], r4
 2721 008e 5B 22                   		movu.B	r2, r2
 2722 0090 FC 63 42                		bset	r2, r4
 2723 0093 C7 E4 F4                		mov.B	r4, 244[r14]
2507:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 2724                             		.loc 1 2507 0
 2725 0096 38 D9 00                		bra	.L297
 2726                             	.L301:
2509:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_OVERFLOW)/* Set Interrupt priority*/
 2727                             		.loc 1 2509 0
 2728 0099 21 14                   		bne	.L310
2511:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IPR[MTU2_BASE_INT_VECTOR + 2].BYTE = MTU2_INTERRUPT_PRIORITY;
 2729                             		.loc 1 2511 0
 2730 009b FA E4 7F 03 01          		mov.B	#1, 895[r14]
2512:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IR[MTU2_BASE_INT_VECTOR + 2].BYTE = 0x00;
 2731                             		.loc 1 2512 0
 2732 00a0 F9 E4 7F 00             		mov.B	#0, 127[r14]
2513:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IER[MTU2_INT_ENABLE_REGISTER].BYTE |= (1 << (clrSrcId + 3));
 2733                             		.loc 1 2513 0
 2734 00a4 CE E4 0F 02             		mov.B	527[r14], r4
 2735 00a8 75 34 80                		or	#0xffffff80, r4
 2736 00ab 2E 1D                   		bra	.L320
 2737                             	.L310:
2517:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IPR[MTU2_BASE_INT_VECTOR].BYTE = MTU2_INTERRUPT_PRIORITY;
 2738                             		.loc 1 2517 0
 2739 00ad FA E4 7D 03 01          		mov.B	#1, 893[r14]
2518:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IR[MTU2_BASE_INT_VECTOR + clrSrcId].BYTE = 0x00;
 2740                             		.loc 1 2518 0
 2741 00b2 71 43 7D                		add	#0x7d, r4, r3
 2742 00b5 66 07                   		mov	#0, r7
 2743 00b7 FE 03 E7                		mov.B	r7, [r3,r14]
2519:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IER[MTU2_INT_ENABLE_REGISTER].BYTE |= (1 << (clrSrcId + 5));
 2744                             		.loc 1 2519 0
 2745 00ba CE E3 0F 02             		mov.B	527[r14], r3
 2746 00be 62 54                   		add	#5, r4
 2747 00c0 EF 37                   		mov.L	r3, r7
 2748 00c2 FC 63 74                		bset	r4, r7
 2749 00c5 EF 74                   		mov.L	r7, r4
 2750 00c7 03                      		.balign 2,3,5
 2751                             	.L320:
 2752 00c8 CB E4 0F 02             		mov.B	r4, 527[r14]
2522:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(MTU2.TIER.BYTE, clrSrcId);
 2753                             		.loc 1 2522 0
 2754 00cc FB EE 92 86 08          		mov.L	#0x88692, r14
 2755 00d1 CE E4 72 01             		mov.B	370[r14], r4
 2756 00d5 5B 22                   		movu.B	r2, r2
 2757 00d7 FC 63 42                		bset	r2, r4
 2758 00da CB E4 72 01             		mov.B	r4, 370[r14]
2523:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 2759                             		.loc 1 2523 0
 2760 00de 38 91 00                		bra	.L297
 2761                             	.L302:
2525:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_OVERFLOW)/* Set Interrupt priority*/
 2762                             		.loc 1 2525 0
 2763 00e1 1F                      		bne	.L312
2526:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IPR[MTU3_BASE_INT_VECTOR + clrSrcId].BYTE = MTU3_INTERRUPT_PRIORITY;
 2764                             		.loc 1 2526 0
 2765 00e2 FA E4 85 03 01          		mov.B	#1, 901[r14]
 2766 00e7 0F                      		bra	.L313
 2767                             	.L312:
2528:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IPR[MTU3_BASE_INT_VECTOR].BYTE = MTU3_INTERRUPT_PRIORITY;
 2768                             		.loc 1 2528 0
 2769 00e8 FA E4 81 03 01          		mov.B	#1, 897[r14]
 2770 00ed 03                      		.balign 2,3,1
 2771                             	.L313:
2530:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IR[MTU3_BASE_INT_VECTOR + clrSrcId].BYTE = 0x00; /* Clear interrupt flag*/
 2772                             		.loc 1 2530 0
 2773 00ee 5B 22                   		movu.B	r2, r2
 2774 00f0 72 24 81 00             		add	#0x81, r2, r4
 2775 00f4 FB EE 00 70 08          		mov.L	#0x87000, r14
 2776 00f9 66 07                   		mov	#0, r7
 2777 00fb FE 04 E7                		mov.B	r7, [r4,r14]
2531:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE |= (1 << (1 + clrSrcId));
 2778                             		.loc 1 2531 0
 2779 00fe CE E4 10 02             		mov.B	528[r14], r4
 2780 0102 71 23 01                		add	#1, r2, r3
 2781 0105 FC 63 43                		bset	r3, r4
 2782 0108 CB E4 10 02             		mov.B	r4, 528[r14]
2533:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(MTU3.TIER.BYTE, clrSrcId);
 2783                             		.loc 1 2533 0
 2784 010c FB EE 00 86 08          		mov.L	#0x88600, r14
 2785 0111 FC 61 E2 08             		bset	r2, 8[r14].B
2534:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 2786                             		.loc 1 2534 0
 2787 0115 2E 5A                   		bra	.L297
 2788                             	.L303:
2536:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_OVERFLOW)/* Set Interrupt priority*/
 2789                             		.loc 1 2536 0
 2790 0117 1F                      		bne	.L314
2537:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IPR[MTU4_BASE_INT_VECTOR + clrSrcId].BYTE = MTU4_INTERRUPT_PRIORITY;
 2791                             		.loc 1 2537 0
 2792 0118 FA E4 8A 03 01          		mov.B	#1, 906[r14]
 2793 011d 0F                      		bra	.L315
 2794                             	.L314:
2539:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IPR[MTU4_BASE_INT_VECTOR].BYTE = MTU4_INTERRUPT_PRIORITY;
 2795                             		.loc 1 2539 0
 2796 011e FA E4 86 03 01          		mov.B	#1, 902[r14]
 2797 0123 03                      		.balign 2,3,1
 2798                             	.L315:
2541:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IR[MTU3_BASE_INT_VECTOR + clrSrcId].BYTE = 0x00; /* Clear interrupt flag*/
 2799                             		.loc 1 2541 0
 2800 0124 5B 22                   		movu.B	r2, r2
 2801 0126 72 24 81 00             		add	#0x81, r2, r4
 2802 012a FB EE 00 70 08          		mov.L	#0x87000, r14
 2803 012f 66 07                   		mov	#0, r7
 2804 0131 FE 04 E7                		mov.B	r7, [r4,r14]
 2805 0134 66 14                   		mov.L	#1, r4
2543:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId > TCNT_CLEARING_TGRC)
 2806                             		.loc 1 2543 0
 2807 0136 61 22                   		cmp	#2, r2
 2808 0138 25 14                   		bleu	.L316
2544:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IER[MTU3_INT_ENABLE_REGISTER + 1].BYTE |= (1 << (clrSrcId - 2));
 2809                             		.loc 1 2544 0
 2810 013a CE E3 11 02             		mov.B	529[r14], r3
 2811 013e 71 21 FE                		add	#-2, r2, r1
 2812 0141 FD 62 14                		shll	r1, r4
 2813 0144 57 34                   		or	r3, r4
 2814 0146 CB E4 11 02             		mov.B	r4, 529[r14]
 2815 014a 2E 12                   		bra	.L317
 2816                             	.L316:
2547:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE |= (1 << (clrSrcId + 6));
 2817                             		.loc 1 2547 0
 2818 014c CE E3 10 02             		mov.B	528[r14], r3
 2819 0150 71 21 06                		add	#6, r2, r1
 2820 0153 FD 62 14                		shll	r1, r4
 2821 0156 57 34                   		or	r3, r4
 2822 0158 CB E4 10 02             		mov.B	r4, 528[r14]
 2823                             		.balign 2,3,4
 2824                             	.L317:
2550:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(MTU4.TIER.BYTE, clrSrcId);
 2825                             		.loc 1 2550 0
 2826 015c FB EE 00 86 08          		mov.L	#0x88600, r14
 2827 0161 FC 61 E2 09             		bset	r2, 9[r14].B
2551:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 2828                             		.loc 1 2551 0
 2829 0165 0A                      		bra	.L297
 2830                             	.L298:
2553:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 2831                             		.loc 1 2553 0
 2832 0166 75 41 30                		mov.L	#48, r1
2555:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_EnableTI*/
 2833                             		.loc 1 2555 0
 2834 0169 7E B7                   		pop	r7
2553:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 2835                             		.loc 1 2553 0
 2836 016b 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 2837                             	.L297:
2555:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_EnableTI*/
 2838                             		.loc 1 2555 0
 2839 016f 3F 77 01                		rtsd	#4, r7-r7
 2840                             	.LFE66:
 2842                             		.section	.text.TMR_DisableTI,"ax",@progbits
 2843                             		.global	_TMR_DisableTI
 2845                             	_TMR_DisableTI:
 2846                             	.LFB67:
2565:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 2847                             		.loc 1 2565 0
 2848 0000 7E A7                   		push.l	r7
 2849                             	.LCFI8:
2566:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(tmrID)
 2850                             		.loc 1 2566 0
 2851 0002 5B 11                   		movu.B	r1, r1
 2852 0004 61 41                   		cmp	#4, r1
 2853 0006 25 05 38 23 01          		bgtu	.L322
 2854 000b FB E2 00 00 00 00       		mov.L	#.L328, r14
 2855 0011 FE 61 E3                		mov.L	[r1,r14], r3
 2856 0014 FB EE 00 70 08          		mov.L	#0x87000, r14
 2857 0019 5B 24                   		movu.B	r2, r4
 2858                             		
 2859 001b 7F 03                   	1:jmp	r3
 2860                             		.section	.rodata.TMR_DisableTI,"a",@progbits
 2861                             		.balign 4
 2862                             		.balign 4
 2863                             	.L328:
 2864 0000 00 00 00 1D             		.long .L323
 2865 0004 00 00 00 4C             		.long .L324
 2866 0008 00 00 00 80             		.long .L325
 2867 000c 00 00 00 BD             		.long .L326
 2868 0010 00 00 00 EB             		.long .L327
 2869                             		.section	.text.TMR_DisableTI
 2870                             	.L323:
2570:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         CLEAR_BIT( ICU.IER[MTU0_INT_ENABLE_REGISTER].BYTE ,(2+clrSrcId));
 2871                             		.loc 1 2570 0
 2872 001d CE E1 0E 02             		mov.B	526[r14], r1
 2873 0021 71 42 02                		add	#2, r4, r2
 2874 0024 66 13                   		mov.L	#1, r3
 2875 0026 EF 37                   		mov.L	r3, r7
 2876 0028 FD 62 27                		shll	r2, r7
 2877 002b EF 72                   		mov.L	r7, r2
 2878 002d 7E 02                   		not	r2
 2879 002f 53 12                   		and	r1, r2
 2880 0031 CB E2 0E 02             		mov.B	r2, 526[r14]
2571:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         CLEAR_BIT(MTU0.TIER.BYTE, clrSrcId);
 2881                             		.loc 1 2571 0
 2882 0035 FB EE 90 86 08          		mov.L	#0x88690, r14
 2883 003a CD E2 74                		mov.B	116[r14], r2
 2884 003d FD 62 43                		shll	r4, r3
 2885 0040 EF 34                   		mov.L	r3, r4
 2886 0042 7E 04                   		not	r4
 2887 0044 53 24                   		and	r2, r4
 2888 0046 C7 E4 74                		mov.B	r4, 116[r14]
2572:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 2889                             		.loc 1 2572 0
 2890 0049 38 EB 00                		bra	.L321
 2891                             	.L324:
2574:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(clrSrcId == TCNT_CLEARING_OVERFLOW)
 2892                             		.loc 1 2574 0
 2893 004c 61 44                   		cmp	#4, r4
 2894 004e 1F                      		bne	.L330
2576:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             CLEAR_BIT( ICU.IER[MTU1_INT_ENABLE_REGISTER].BYTE ,(clrSrcId-1));
 2895                             		.loc 1 2576 0
 2896 004f F2 EB 0F 02             		bclr #3, 527[r14].B
 2897 0053 2E 15                   		bra	.L331
 2898                             	.L330:
2580:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             CLEAR_BIT(ICU.IER[MTU1_INT_ENABLE_REGISTER].BYTE, (clrSrcId + 1));	/*AE(04122012)*/
 2899                             		.loc 1 2580 0
 2900 0055 CE E1 0F 02             		mov.B	527[r14], r1
 2901 0059 62 14                   		add	#1, r4
 2902 005b FB 36 FE                		mov.L	#-2, r3
 2903 005e FD 66 43                		rotl	r4, r3
 2904 0061 53 13                   		and	r1, r3
 2905 0063 CB E3 0F 02             		mov.B	r3, 527[r14]
 2906 0067 03                      		.balign 2,3,4
 2907                             	.L331:
2582:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         CLEAR_BIT(MTU1.TIER.BYTE, clrSrcId);
 2908                             		.loc 1 2582 0
 2909 0068 FB 4E 90 86 08          		mov.L	#0x88690, r4
 2910 006d CD 43 F4                		mov.B	244[r4], r3
 2911 0070 5B 22                   		movu.B	r2, r2
 2912 0072 FB E6 FE                		mov.L	#-2, r14
 2913 0075 FD 66 2E                		rotl	r2, r14
 2914 0078 53 3E                   		and	r3, r14
 2915 007a C7 4E F4                		mov.B	r14, 244[r4]
2584:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 2916                             		.loc 1 2584 0
 2917 007d 38 B7 00                		bra	.L321
 2918                             	.L325:
2586:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(clrSrcId == TCNT_CLEARING_OVERFLOW)
 2919                             		.loc 1 2586 0
 2920 0080 61 44                   		cmp	#4, r4
 2921 0082 21 0F                   		bne	.L332
2588:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             CLEAR_BIT(ICU.IER[MTU2_INT_ENABLE_REGISTER].BYTE,  (clrSrcId+3));
 2922                             		.loc 1 2588 0
 2923 0084 CE E4 0F 02             		mov.B	527[r14], r4
 2924 0088 75 24 7F                		and #0x7f, r4
 2925 008b CB E4 0F 02             		mov.B	r4, 527[r14]
 2926 008f 2E 15                   		bra	.L333
 2927                             	.L332:
2592:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             CLEAR_BIT(ICU.IER[MTU2_INT_ENABLE_REGISTER].BYTE, (clrSrcId+5));
 2928                             		.loc 1 2592 0
 2929 0091 CE E1 0F 02             		mov.B	527[r14], r1
 2930 0095 62 54                   		add	#5, r4
 2931 0097 FB 36 FE                		mov.L	#-2, r3
 2932 009a FD 66 43                		rotl	r4, r3
 2933 009d 53 13                   		and	r1, r3
 2934 009f CB E3 0F 02             		mov.B	r3, 527[r14]
 2935 00a3 03                      		.balign 2,3,4
 2936                             	.L333:
2594:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         CLEAR_BIT(MTU2.TIER.BYTE, clrSrcId);
 2937                             		.loc 1 2594 0
 2938 00a4 FB 4E 92 86 08          		mov.L	#0x88692, r4
 2939 00a9 CE 43 72 01             		mov.B	370[r4], r3
 2940 00ad 5B 22                   		movu.B	r2, r2
 2941 00af FB E6 FE                		mov.L	#-2, r14
 2942 00b2 FD 66 2E                		rotl	r2, r14
 2943 00b5 53 3E                   		and	r3, r14
 2944 00b7 CB 4E 72 01             		mov.B	r14, 370[r4]
2596:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 2945                             		.loc 1 2596 0
 2946 00bb 2E 79                   		bra	.L321
 2947                             	.L326:
2598:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         CLEAR_BIT(ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE, (1+clrSrcId));
 2948                             		.loc 1 2598 0
 2949 00bd CE E1 10 02             		mov.B	528[r14], r1
 2950 00c1 71 42 01                		add	#1, r4, r2
 2951 00c4 66 13                   		mov.L	#1, r3
 2952 00c6 EF 37                   		mov.L	r3, r7
 2953 00c8 FD 62 27                		shll	r2, r7
 2954 00cb EF 72                   		mov.L	r7, r2
 2955 00cd 7E 02                   		not	r2
 2956 00cf 53 12                   		and	r1, r2
 2957 00d1 CB E2 10 02             		mov.B	r2, 528[r14]
2599:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         CLEAR_BIT(MTU3.TIER.BYTE, clrSrcId);
 2958                             		.loc 1 2599 0
 2959 00d5 FB EE 00 86 08          		mov.L	#0x88600, r14
 2960 00da CD E2 08                		mov.B	8[r14], r2
 2961 00dd FD 62 43                		shll	r4, r3
 2962 00e0 EF 34                   		mov.L	r3, r4
 2963 00e2 7E 04                   		not	r4
 2964 00e4 53 24                   		and	r2, r4
 2965 00e6 C7 E4 08                		mov.B	r4, 8[r14]
2600:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 2966                             		.loc 1 2600 0
 2967 00e9 2E 4B                   		bra	.L321
 2968                             	.L327:
 2969 00eb 66 13                   		mov.L	#1, r3
2602:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(clrSrcId > TCNT_CLEARING_TGRC)
 2970                             		.loc 1 2602 0
 2971 00ed 61 24                   		cmp	#2, r4
 2972 00ef 25 15                   		bleu	.L334
2604:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             CLEAR_BIT(ICU.IER[MTU3_INT_ENABLE_REGISTER+1].BYTE, (clrSrcId-2));
 2973                             		.loc 1 2604 0
 2974 00f1 CE E1 11 02             		mov.B	529[r14], r1
 2975 00f5 60 24                   		sub	#2, r4
 2976 00f7 FD 62 43                		shll	r4, r3
 2977 00fa 7E 03                   		not	r3
 2978 00fc 53 13                   		and	r1, r3
 2979 00fe CB E3 11 02             		mov.B	r3, 529[r14]
 2980 0102 2E 14                   		bra	.L335
 2981                             	.L334:
2608:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             CLEAR_BIT(ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE, (clrSrcId+6));
 2982                             		.loc 1 2608 0
 2983 0104 CE E1 10 02             		mov.B	528[r14], r1
 2984 0108 62 64                   		add	#6, r4
 2985 010a FD 62 43                		shll	r4, r3
 2986 010d 7E 03                   		not	r3
 2987 010f 53 13                   		and	r1, r3
 2988 0111 CB E3 10 02             		mov.B	r3, 528[r14]
 2989 0115 03                      		.balign 2,3,4
 2990                             	.L335:
2610:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             CLEAR_BIT(MTU4.TIER.BYTE, clrSrcId);
 2991                             		.loc 1 2610 0
 2992 0116 FB 4E 00 86 08          		mov.L	#0x88600, r4
 2993 011b 8A 4B                   		mov.B	9[r4], r3
 2994 011d 5B 22                   		movu.B	r2, r2
 2995 011f FB E6 FE                		mov.L	#-2, r14
 2996 0122 FD 66 2E                		rotl	r2, r14
 2997 0125 53 3E                   		and	r3, r14
 2998 0127 C7 4E 09                		mov.B	r14, 9[r4]
2611:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 2999                             		.loc 1 2611 0
 3000 012a 0A                      		bra	.L321
 3001                             	.L322:
2613:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(0);
 3002                             		.loc 1 2613 0
 3003 012b 75 41 30                		mov.L	#48, r1
2616:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end TMR_DisableTI*/
 3004                             		.loc 1 2616 0
 3005 012e 7E B7                   		pop	r7
2613:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(0);
 3006                             		.loc 1 2613 0
 3007 0130 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 3008                             	.L321:
2616:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end TMR_DisableTI*/
 3009                             		.loc 1 2616 0
 3010 0134 3F 77 01                		rtsd	#4, r7-r7
 3011                             	.LFE67:
 3013 0137 03                      		.section	.text.TMR_ClearTOF,"ax",@progbits
 3014                             		.global	_TMR_ClearTOF
 3016                             	_TMR_ClearTOF:
 3017                             	.LFB68:
2634:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 3018                             		.loc 1 2634 0
 3019                             	.LVL230:
 3020 0000 7E A7                   		push.l	r7
 3021                             	.LCFI9:
2636:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch ( tmrId)
 3022                             		.loc 1 2636 0
 3023 0002 5B 11                   		movu.B	r1, r1
 3024 0004 61 41                   		cmp	#4, r1
 3025 0006 24 44                   		bgtu	.L337
 3026 0008 FB E2 00 00 00 00       		mov.L	#.L344, r14
 3027 000e FE 61 E4                		mov.L	[r1,r14], r4
 3028 0011 5B 22                   		movu.B	r2, r2
 3029 0013 FB EE 00 70 08          		mov.L	#0x87000, r14
 3030                             		
 3031 0018 7F 04                   	1:jmp	r4
 3032                             		.section	.rodata.TMR_ClearTOF,"a",@progbits
 3033                             		.balign 4
 3034                             		.balign 4
 3035                             	.L344:
 3036 0000 00 00 00 1A             		.long .L339
 3037 0004 00 00 00 1F             		.long .L340
 3038 0008 00 00 00 2D             		.long .L341
 3039 000c 00 00 00 3B             		.long .L342
 3040 0010 00 00 00 40             		.long .L343
 3041                             		.section	.text.TMR_ClearTOF
 3042                             	.L339:
2639:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IR[MTU0_BASE_INT_VECTOR + clrSrcId].BYTE = 0x00; /* Clear interrupt flag*/
 3043                             		.loc 1 2639 0
 3044 001a 71 22 72                		add	#0x72, r2
 3045                             	.LVL231:
 3046 001d 2E 27                   		bra	.L348
 3047                             	.LVL232:
 3048                             	.L340:
2642:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_OVERFLOW)/* Set Interrupt priority*/
 3049                             		.loc 1 2642 0
 3050 001f 61 42                   		cmp	#4, r2
 3051 0021 1F                      		bne	.L345
2644:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IR[MTU1_BASE_INT_VECTOR + 2].BYTE = 0x00;
 3052                             		.loc 1 2644 0
 3053 0022 F9 E4 7B 00             		mov.B	#0, 123[r14]
 3054 0026 2E 24                   		bra	.L337
 3055                             	.L345:
2648:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IR[MTU1_BASE_INT_VECTOR + clrSrcId].BYTE = 0x00;
 3056                             		.loc 1 2648 0
 3057 0028 71 22 79                		add	#0x79, r2
 3058                             	.LVL233:
 3059 002b 2E 19                   		bra	.L348
 3060                             	.LVL234:
 3061                             	.L341:
2652:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_OVERFLOW)/* Set Interrupt priority*/
 3062                             		.loc 1 2652 0
 3063 002d 61 42                   		cmp	#4, r2
 3064 002f 1F                      		bne	.L346
2654:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IR[MTU2_BASE_INT_VECTOR + 2].BYTE = 0x00;
 3065                             		.loc 1 2654 0
 3066 0030 F9 E4 7F 00             		mov.B	#0, 127[r14]
 3067 0034 2E 16                   		bra	.L337
 3068                             	.L346:
2658:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IR[MTU2_BASE_INT_VECTOR + clrSrcId].BYTE = 0x00;
 3069                             		.loc 1 2658 0
 3070 0036 71 22 7D                		add	#0x7d, r2
 3071                             	.LVL235:
 3072 0039 2E 0B                   		bra	.L348
 3073                             	.LVL236:
 3074                             	.L342:
2662:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IR[MTU3_BASE_INT_VECTOR + clrSrcId].BYTE = 0x00;
 3075                             		.loc 1 2662 0
 3076 003b 72 22 81 00             		add	#0x81, r2
 3077                             	.LVL237:
 3078 003f 0D                      		bra	.L348
 3079                             	.LVL238:
 3080                             	.L343:
2665:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IR[MTU4_BASE_INT_VECTOR + clrSrcId].BYTE = 0x00;
 3081                             		.loc 1 2665 0
 3082 0040 72 22 86 00             		add	#0x86, r2
 3083                             	.LVL239:
 3084                             		.balign 2,3,1
 3085                             	.L348:
 3086 0044 66 07                   		mov	#0, r7
 3087 0046 FE 02 E7                		mov.B	r7, [r2,r14]
 3088 0049 03                      		.balign 2,3,2
 3089                             	.L337:
2669:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end TMR_ClearTOF*/
 3090                             		.loc 1 2669 0
 3091 004a 3F 77 01                		rtsd	#4, r7-r7
 3092                             	.LFE68:
 3094 004d 03                      		.section	.text.TMR_GetTOF,"ax",@progbits
 3095                             		.global	_TMR_GetTOF
 3097                             	_TMR_GetTOF:
 3098                             	.LFB69:
2679:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 3099                             		.loc 1 2679 0
 3100                             	.LVL240:
 3101 0000 6E 7A                   		pushm	r7-r10
 3102                             	.LCFI10:
 3103 0002 CF 17                   		mov.B	r1, r7
2681:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     clrSrcId = TMR_GetClearSourceId( pTmr_cnt);
 3104                             		.loc 1 2681 0
 3105 0004 05 00 00 00             		bsr	_TMR_GetClearSourceId
 3106                             	.LVL241:
2683:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (pTmr_cnt)
 3107                             		.loc 1 2683 0
 3108 0008 5B 7E                   		movu.B	r7, r14
 3109 000a 61 4E                   		cmp	#4, r14
 3110 000c 24 47                   		bgtu	.L360
 3111 000e FB 72 00 00 00 00       		mov.L	#.L356, r7
 3112                             	.LVL242:
 3113 0014 FE 6E 77                		mov.L	[r14,r7], r7
 3114 0017 5B 11                   		movu.B	r1, r1
 3115 0019 FB EE 00 70 08          		mov.L	#0x87000, r14
 3116                             	.LVL243:
 3117                             		
 3118 001e 7F 07                   	1:jmp	r7
 3119                             		.section	.rodata.TMR_GetTOF,"a",@progbits
 3120                             		.balign 4
 3121                             		.balign 4
 3122                             	.L356:
 3123 0000 00 00 00 20             		.long .L351
 3124 0004 00 00 00 25             		.long .L352
 3125 0008 00 00 00 32             		.long .L353
 3126 000c 00 00 00 3F             		.long .L354
 3127 0010 00 00 00 44             		.long .L355
 3128                             		.section	.text.TMR_GetTOF
 3129                             	.L351:
2686:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ((ICU.IR[MTU0_BASE_INT_VECTOR + clrSrcId].BYTE & 0x01) == 0x01)
 3130                             		.loc 1 2686 0
 3131 0020 71 11 72                		add	#0x72, r1
 3132                             	.LVL244:
 3133 0023 2E 25                   		bra	.L373
 3134                             	.LVL245:
 3135                             	.L352:
2690:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_OVERFLOW)
 3136                             		.loc 1 2690 0
 3137 0025 61 41                   		cmp	#4, r1
 3138 0027 1E                      		bne	.L357
2692:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if ((ICU.IR[MTU1_BASE_INT_VECTOR + 2].BYTE & 0x01) == 0x01)
 3139                             		.loc 1 2692 0
 3140 0028 CD E7 7B                		mov.B	123[r14], r7
 3141 002b 2E 21                   		bra	.L377
 3142                             	.L357:
2697:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if ((ICU.IR[MTU1_BASE_INT_VECTOR + clrSrcId].BYTE & 0x01) == 0x01)
 3143                             		.loc 1 2697 0
 3144 002d 71 11 79                		add	#0x79, r1
 3145                             	.LVL246:
 3146 0030 2E 18                   		bra	.L373
 3147                             	.LVL247:
 3148                             	.L353:
2702:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (clrSrcId == TCNT_CLEARING_OVERFLOW)
 3149                             		.loc 1 2702 0
 3150 0032 61 41                   		cmp	#4, r1
 3151 0034 1E                      		bne	.L359
2704:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if ((ICU.IR[MTU2_BASE_INT_VECTOR + 2].BYTE & 0x01) == 0x01)
 3152                             		.loc 1 2704 0
 3153 0035 CD E7 7F                		mov.B	127[r14], r7
 3154 0038 2E 14                   		bra	.L377
 3155                             	.L359:
2709:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if ((ICU.IR[MTU2_BASE_INT_VECTOR + clrSrcId].BYTE & 0x01) == 0x01)
 3156                             		.loc 1 2709 0
 3157 003a 71 11 7D                		add	#0x7d, r1
 3158                             	.LVL248:
 3159 003d 2E 0B                   		bra	.L373
 3160                             	.LVL249:
 3161                             	.L354:
2714:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ((ICU.IR[MTU3_BASE_INT_VECTOR + clrSrcId].BYTE & 0x01) == 0x01)
 3162                             		.loc 1 2714 0
 3163 003f 72 11 81 00             		add	#0x81, r1
 3164                             	.LVL250:
 3165 0043 0D                      		bra	.L373
 3166                             	.LVL251:
 3167                             	.L355:
2718:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if ((ICU.IR[MTU4_BASE_INT_VECTOR + clrSrcId].BYTE & 0x01) == 0x01)
 3168                             		.loc 1 2718 0
 3169 0044 72 11 86 00             		add	#0x86, r1
 3170                             	.LVL252:
 3171                             		.balign 2,3,5
 3172                             	.L373:
 3173 0048 FE 41 E7                		mov.B	[r1,r14], r7
 3174 004b 03                      		.balign 2,3,6
 3175                             	.L377:
 3176 004c FD 74 C7 01             		tst	#1, r7
 3177 0050 20 03                   		beq	.L360
 3178 0052 0C                      		bra	.L366
 3179                             	.L360:
2723:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
 3180                             		.loc 1 2723 0
 3181 0053 66 01                   		mov.L	#0, r1
 3182 0055 0B                      		bra	.L350
 3183                             	.L366:
2687:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             return 1;
 3184                             		.loc 1 2687 0
 3185 0056 66 11                   		mov.L	#1, r1
 3186                             		.balign 2,3,2
 3187                             	.L350:
2724:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end TMR_GETTOF*/
 3188                             		.loc 1 2724 0
 3189 0058 3F 7A 04                		rtsd	#16, r7-r10
 3190                             	.LFE69:
 3192 005b 03                      		.section	.text.TMR_SetChannelInputChapture,"ax",@progbits
 3193                             		.global	_TMR_SetChannelInputChapture
 3195                             	_TMR_SetChannelInputChapture:
 3196                             	.LFB70:
2733:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 3197                             		.loc 1 2733 0
 3198                             	.LVL253:
2740:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (chId)
 3199                             		.loc 1 2740 0
 3200 0000 5B 11                   		movu.B	r1, r1
 3201 0002 75 51 17                		cmp	#23, r1
 3202 0005 25 05 38 CB 00          		bgtu	.L380
 3203 000a FB E2 00 00 00 00       		mov.L	#.L397, r14
 3204 0010 FE 61 EE                		mov.L	[r1,r14], r14
 3205                             		
 3206 0013 7F 0E                   	1:jmp	r14
 3207                             		.section	.rodata.TMR_SetChannelInputChapture,"a",@progbits
 3208                             		.balign 4
 3209                             		.balign 4
 3210                             	.L397:
 3211 0000 00 00 00 D9             		.long .L398
 3212 0004 00 00 01 18             		.long .L382
 3213 0008 00 00 01 2E             		.long .L399
 3214 000c 00 00 00 15             		.long .L384
 3215 0010 00 00 00 D2             		.long .L380
 3216 0014 00 00 00 D2             		.long .L380
 3217 0018 00 00 00 D2             		.long .L380
 3218 001c 00 00 00 20             		.long .L385
 3219 0020 00 00 00 36             		.long .L386
 3220 0024 00 00 00 D2             		.long .L380
 3221 0028 00 00 00 D2             		.long .L380
 3222 002c 00 00 00 42             		.long .L387
 3223 0030 00 00 00 4D             		.long .L388
 3224 0034 00 00 00 D2             		.long .L380
 3225 0038 00 00 00 D2             		.long .L380
 3226 003c 00 00 00 63             		.long .L389
 3227 0040 00 00 00 6F             		.long .L390
 3228 0044 00 00 00 7A             		.long .L391
 3229 0048 00 00 00 85             		.long .L392
 3230 004c 00 00 00 D2             		.long .L380
 3231 0050 00 00 00 90             		.long .L393
 3232 0054 00 00 00 A6             		.long .L394
 3233 0058 00 00 00 BC             		.long .L395
 3234 005c 00 00 00 C7             		.long .L396
 3235                             		.section	.text.TMR_SetChannelInputChapture
 3236                             	.L384:
 3237                             	.LVL254:
2786:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 3;
 3238                             		.loc 1 2786 0
 3239 0015 66 31                   		mov	#3, r1
 3240                             	.LVL255:
2788:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
 3241                             		.loc 1 2788 0
 3242 0017 66 12                   		mov	#1, r2
2787:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PA3PFS.BYTE;
 3243                             		.loc 1 2787 0
 3244 0019 FB 3E 93 C1 08          		mov.L	#0x8c193, r3
 3245 001e 2E 7C                   		bra	.L402
 3246                             	.LVL256:
 3247                             	.L385:
2795:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 4;
 3248                             		.loc 1 2795 0
 3249 0020 66 41                   		mov	#4, r1
2797:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x02;
 3250                             		.loc 1 2797 0
 3251 0022 66 22                   		mov	#2, r2
2796:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PE4PFS.BYTE ;
 3252                             		.loc 1 2796 0
 3253 0024 FB 3E B4 C1 08          		mov.L	#0x8c1b4, r3
2794:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTE.PMR.BYTE;
 3254                             		.loc 1 2794 0
 3255 0029 FB 4E 6E C0 08          		mov.L	#0x8c06e, r4
2793:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTE.PDR.BYTE;
 3256                             		.loc 1 2793 0
 3257 002e FB EE 0E C0 08          		mov.L	#0x8c00e, r14
2798:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 3258                             		.loc 1 2798 0
 3259 0033 38 B9 00                		bra	.L381
 3260                             	.LVL257:
 3261                             	.L386:
2803:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 5;
 3262                             		.loc 1 2803 0
 3263 0036 66 51                   		mov	#5, r1
2805:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x02;
 3264                             		.loc 1 2805 0
 3265 0038 66 22                   		mov	#2, r2
2804:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PB5PFS.BYTE;
 3266                             		.loc 1 2804 0
 3267 003a FB 3E 9D C1 08          		mov.L	#0x8c19d, r3
 3268 003f 38 A3 00                		bra	.L403
 3269                             	.LVL258:
 3270                             	.L387:
2819:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 6;
 3271                             		.loc 1 2819 0
 3272 0042 66 61                   		mov	#6, r1
2821:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
 3273                             		.loc 1 2821 0
 3274 0044 66 12                   		mov	#1, r2
2820:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.P26PFS.BYTE;
 3275                             		.loc 1 2820 0
 3276 0046 FB 3E 56 C1 08          		mov.L	#0x8c156, r3
 3277 004b 2E 0B                   		bra	.L404
 3278                             	.LVL259:
 3279                             	.L388:
2835:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 7;
 3280                             		.loc 1 2835 0
 3281 004d 66 71                   		mov	#7, r1
2837:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
 3282                             		.loc 1 2837 0
 3283 004f 66 12                   		mov	#1, r2
2836:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.P27PFS.BYTE;
 3284                             		.loc 1 2836 0
 3285 0051 FB 3E 57 C1 08          		mov.L	#0x8c157, r3
 3286                             	.LVL260:
 3287                             		.balign 2,3,4
 3288                             	.L404:
2834:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORT2.PMR.BYTE;
 3289                             		.loc 1 2834 0
 3290 0056 FB 4E 62 C0 08          		mov.L	#0x8c062, r4
2833:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORT2.PDR.BYTE;
 3291                             		.loc 1 2833 0
 3292 005b FB EE 02 C0 08          		mov.L	#0x8c002, r14
2839:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 3293                             		.loc 1 2839 0
 3294 0060 38 8C 00                		bra	.L381
 3295                             	.LVL261:
 3296                             	.L389:
2858:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 4;
 3297                             		.loc 1 2858 0
 3298 0063 66 41                   		mov	#4, r1
2860:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
 3299                             		.loc 1 2860 0
 3300 0065 66 12                   		mov	#1, r2
2859:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.P14PFS.BYTE;
 3301                             		.loc 1 2859 0
 3302 0067 FB 3E 4C C1 08          		mov.L	#0x8c14c, r3
 3303 006c 38 B6 00                		bra	.L406
 3304                             	.LVL262:
 3305                             	.L390:
2880:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 5;
 3306                             		.loc 1 2880 0
 3307 006f 66 51                   		mov	#5, r1
2882:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
 3308                             		.loc 1 2882 0
 3309 0071 66 12                   		mov	#1, r2
2881:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PC5PFS.BYTE;
 3310                             		.loc 1 2881 0
 3311 0073 FB 3E A5 C1 08          		mov.L	#0x8c1a5, r3
 3312 0078 2E 38                   		bra	.L405
 3313                             	.LVL263:
 3314                             	.L391:
2896:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 6;
 3315                             		.loc 1 2896 0
 3316 007a 66 61                   		mov	#6, r1
2898:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
 3317                             		.loc 1 2898 0
 3318 007c 66 12                   		mov	#1, r2
2897:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PC6PFS.BYTE;
 3319                             		.loc 1 2897 0
 3320 007e FB 3E A6 C1 08          		mov.L	#0x8c1a6, r3
 3321 0083 2E 2D                   		bra	.L405
 3322                             	.LVL264:
 3323                             	.L392:
2918:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 6;
 3324                             		.loc 1 2918 0
 3325 0085 66 61                   		mov	#6, r1
2920:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
 3326                             		.loc 1 2920 0
 3327 0087 66 12                   		mov	#1, r2
2919:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PB6PFS.BYTE;
 3328                             		.loc 1 2919 0
 3329 0089 FB 3E 9E C1 08          		mov.L	#0x8c19e, r3
 3330 008e 2E 54                   		bra	.L403
 3331                             	.LVL265:
 3332                             	.L393:
2941:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 0;
 3333                             		.loc 1 2941 0
 3334 0090 66 01                   		mov	#0, r1
2943:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
 3335                             		.loc 1 2943 0
 3336 0092 66 12                   		mov	#1, r2
2942:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PA0PFS.BYTE;
 3337                             		.loc 1 2942 0
 3338 0094 FB 3E 90 C1 08          		mov.L	#0x8c190, r3
 3339                             	.LVL266:
 3340 0099 03                      		.balign 2,3,4
 3341                             	.L402:
2940:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTA.PMR.BYTE;
 3342                             		.loc 1 2940 0
 3343 009a FB 4E 6A C0 08          		mov.L	#0x8c06a, r4
2939:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTA.PDR.BYTE;
 3344                             		.loc 1 2939 0
 3345 009f FB EE 0A C0 08          		mov.L	#0x8c00a, r14
2945:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 3346                             		.loc 1 2945 0
 3347 00a4 2E 48                   		bra	.L381
 3348                             	.LVL267:
 3349                             	.L394:
2969:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 2;
 3350                             		.loc 1 2969 0
 3351 00a6 66 21                   		mov	#2, r1
2971:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
 3352                             		.loc 1 2971 0
 3353 00a8 66 12                   		mov	#1, r2
2970:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PC2PFS.BYTE;
 3354                             		.loc 1 2970 0
 3355 00aa FB 3E A2 C1 08          		mov.L	#0x8c1a2, r3
 3356                             	.LVL268:
 3357 00af 03                      		.balign 2,3,4
 3358                             	.L405:
2968:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTC.PMR.BYTE;
 3359                             		.loc 1 2968 0
 3360 00b0 FB 4E 6C C0 08          		mov.L	#0x8c06c, r4
2967:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTC.PDR.BYTE;
 3361                             		.loc 1 2967 0
 3362 00b5 FB EE 0C C0 08          		mov.L	#0x8c00c, r14
2973:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 3363                             		.loc 1 2973 0
 3364 00ba 2E 32                   		bra	.L381
 3365                             	.LVL269:
 3366                             	.L395:
2991:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 1;
 3367                             		.loc 1 2991 0
 3368 00bc 66 11                   		mov	#1, r1
2993:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x02;
 3369                             		.loc 1 2993 0
 3370 00be 66 22                   		mov	#2, r2
2992:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PB1PFS.BYTE;
 3371                             		.loc 1 2992 0
 3372 00c0 FB 3E 99 C1 08          		mov.L	#0x8c199, r3
 3373 00c5 2E 1D                   		bra	.L403
 3374                             	.LVL270:
 3375                             	.L396:
3019:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 1;
 3376                             		.loc 1 3019 0
 3377 00c7 66 11                   		mov	#1, r1
3021:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x02;
 3378                             		.loc 1 3021 0
 3379 00c9 66 22                   		mov	#2, r2
3020:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.P31PFS.BYTE;
 3380                             		.loc 1 3020 0
 3381 00cb FB 3E 59 C1 08          		mov.L	#0x8c159, r3
 3382 00d0 2E 68                   		bra	.L401
 3383                             	.LVL271:
 3384                             	.L380:
3026:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 3385                             		.loc 1 3026 0
 3386 00d2 75 41 30                		mov.L	#48, r1
 3387 00d5 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 3388                             	.LVL272:
 3389                             	.L398:
2746:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 3;
 3390                             		.loc 1 2746 0
 3391 00d9 66 31                   		mov	#3, r1
2748:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
 3392                             		.loc 1 2748 0
 3393 00db 66 12                   		mov	#1, r2
2747:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.PB3PFS.BYTE;
 3394                             		.loc 1 2747 0
 3395 00dd FB 3E 9B C1 08          		mov.L	#0x8c19b, r3
 3396                             	.LVL273:
 3397                             		.balign 2,3,4
 3398                             	.L403:
2745:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORTB.PMR.BYTE;
 3399                             		.loc 1 2745 0
 3400 00e2 FB 4E 6B C0 08          		mov.L	#0x8c06b, r4
2744:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORTB.PDR.BYTE;
 3401                             		.loc 1 2744 0
 3402 00e7 FB EE 0B C0 08          		mov.L	#0x8c00b, r14
 3403                             		.balign 2,3,5
 3404                             	.L381:
3032:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         CLEAR_BIT(*p1, bitNum);
 3405                             		.loc 1 3032 0
 3406 00ec CC EF                   		mov.B	[r14], r15
 3407 00ee 5B 11                   		movu.B	r1, r1
 3408 00f0 66 15                   		mov.L	#1, r5
 3409 00f2 FD 62 15                		shll	r1, r5
 3410 00f5 FC 3B 51                		not	r5, r1
 3411 00f8 53 F1                   		and	r15, r1
 3412 00fa C3 E1                   		mov.B	r1, [r14]
3033:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(*p2, bitNum);
 3413                             		.loc 1 3033 0
 3414 00fc 06 14 45                		or	[r4].B, r5
 3415 00ff C3 45                   		mov.B	r5, [r4]
3034:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         DISABLE_PORT_REGISTER_WRITE_PROTECTION();
 3416                             		.loc 1 3034 0
 3417 0101 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 3418 0106 F9 E4 1F 00             		mov.B	#0, 31[r14]
 3419 010a F1 E6 1F                		bset #6, 31[r14].B
3035:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         *p3 = value;
 3420                             		.loc 1 3035 0
 3421 010d C3 32                   		mov.B	r2, [r3]
3036:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ENABLE_PORT_REGISTER_WRITE_PROTECTION();
 3422                             		.loc 1 3036 0
 3423 010f F9 E4 1F 00             		mov.B	#0, 31[r14]
 3424 0113 F9 E4 1F 80             		mov.B	#0xffffff80, 31[r14]
 3425 0117 02                      		rts
 3426                             	.LVL274:
 3427                             	.L382:
2761:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 5;
 3428                             		.loc 1 2761 0
 3429 0118 66 51                   		mov	#5, r1
2763:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
 3430                             		.loc 1 2763 0
 3431 011a 66 12                   		mov	#1, r2
2762:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.P15PFS.BYTE;
 3432                             		.loc 1 2762 0
 3433 011c FB 3E 4D C1 08          		mov.L	#0x8c14d, r3
 3434                             	.LVL275:
 3435 0121 03                      		.balign 2,3,4
 3436                             	.L406:
2760:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORT1.PMR.BYTE;
 3437                             		.loc 1 2760 0
 3438 0122 FB 4E 61 C0 08          		mov.L	#0x8c061, r4
2759:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORT1.PDR.BYTE;
 3439                             		.loc 1 2759 0
 3440 0127 FB EE 01 C0 08          		mov.L	#0x8c001, r14
 3441 012c 2E C0                   		bra	.L381
 3442                             	.LVL276:
 3443                             	.L399:
2777:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         bitNum = 2;
 3444                             		.loc 1 2777 0
 3445 012e 66 21                   		mov	#2, r1
2779:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = 0x01;
 3446                             		.loc 1 2779 0
 3447 0130 66 12                   		mov	#1, r2
2778:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p3 = &	MPC.P32PFS.BYTE;
 3448                             		.loc 1 2778 0
 3449 0132 FB 3E 5A C1 08          		mov.L	#0x8c15a, r3
 3450                             	.LVL277:
 3451 0137 03                      		.balign 2,3,4
 3452                             	.L401:
2776:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p2 = & PORT3.PMR.BYTE;
 3453                             		.loc 1 2776 0
 3454 0138 FB 4E 63 C0 08          		mov.L	#0x8c063, r4
2775:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & PORT3.PDR.BYTE;
 3455                             		.loc 1 2775 0
 3456 013d FB EE 03 C0 08          		mov.L	#0x8c003, r14
 3457                             	.LVL278:
 3458 0142 2E AA                   		bra	.L381
 3459                             	.LFE70:
 3461                             		.section	.text.TMR_SetChannelOutputCompare,"ax",@progbits
 3462                             		.global	_TMR_SetChannelOutputCompare
 3464                             	_TMR_SetChannelOutputCompare:
 3465                             	.LFB71:
3051:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 3466                             		.loc 1 3051 0
 3467                             	.LVL279:
3057:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     p1 = ChModeRegAddr[chId];
 3468                             		.loc 1 3057 0
 3469 0000 5B 11                   		movu.B	r1, r1
 3470 0002 FB E2 00 00 00 00       		mov.L	#_ChModeRegAddr, r14
 3471 0008 FE 61 EE                		mov.L	[r1,r14], r14
 3472                             	.LVL280:
3059:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(p1 != 0)
 3473                             		.loc 1 3059 0
 3474 000b 61 0E                   		cmp	#0, r14
 3475 000d 20 17                   		beq	.L407
3061:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		if( GET_BIT(ChModeRegAddr_Nibble, chId))
 3476                             		.loc 1 3061 0
 3477 000f FB 42 0A 11 A5 00       		mov.L	#0xa5110a, r4
 3478 0015 FC 6B 41                		btst	r1, r4
3063:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			SET_H_NIBBLE(*p1, mode);
 3479                             		.loc 1 3063 0
 3480 0018 CC E4                   		mov.B	[r14], r4
3061:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		if( GET_BIT(ChModeRegAddr_Nibble, chId))
 3481                             		.loc 1 3061 0
 3482 001a 14                      		beq	.L409
3063:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			SET_H_NIBBLE(*p1, mode);
 3483                             		.loc 1 3063 0
 3484 001b 64 F4                   		and #15, r4
 3485 001d 0D                      		bra	.L413
 3486                             	.L409:
3067:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			SET_L_NIBBLE(*p1, mode);
 3487                             		.loc 1 3067 0
 3488 001e 75 24 F0                		and #-16, r4
 3489 0021 03                      		.balign 2,3,1
 3490                             	.L413:
 3491 0022 C3 E4                   		mov.B	r4, [r14]
 3492                             	.L407:
 3493 0024 02                      		rts
 3494                             	.LFE71:
 3496 0025 03                      		.section	.text.TMR_SetChannelPWM,"ax",@progbits
 3497                             		.global	_TMR_SetChannelPWM
 3499                             	_TMR_SetChannelPWM:
 3500                             	.LFB72:
3079:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 3501                             		.loc 1 3079 0
 3502                             	.LVL281:
3081:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (chId)
 3503                             		.loc 1 3081 0
 3504 0000 5B 11                   		movu.B	r1, r1
 3505 0002 75 51 17                		cmp	#23, r1
 3506 0005 25 05 38 F1 02          		bgtu	.L415
 3507 000a FB E2 00 00 00 00       		mov.L	#.L432, r14
 3508 0010 FE 61 EE                		mov.L	[r1,r14], r14
 3509                             		
 3510 0013 7F 0E                   	1:jmp	r14
 3511                             		.section	.rodata.TMR_SetChannelPWM,"a",@progbits
 3512                             		.balign 4
 3513                             		.balign 4
 3514                             	.L432:
 3515 0000 00 00 00 15             		.long .L416
 3516 0004 00 00 00 39             		.long .L417
 3517 0008 00 00 00 5F             		.long .L418
 3518 000c 00 00 00 84             		.long .L419
 3519 0010 00 00 02 F8             		.long .L415
 3520 0014 00 00 02 F8             		.long .L415
 3521 0018 00 00 02 F8             		.long .L415
 3522 001c 00 00 00 B2             		.long .L420
 3523 0020 00 00 00 D7             		.long .L421
 3524 0024 00 00 02 F8             		.long .L415
 3525 0028 00 00 02 F8             		.long .L415
 3526 002c 00 00 00 FD             		.long .L422
 3527 0030 00 00 01 27             		.long .L423
 3528 0034 00 00 02 F8             		.long .L415
 3529 0038 00 00 02 F8             		.long .L415
 3530 003c 00 00 01 5F             		.long .L424
 3531 0040 00 00 01 8C             		.long .L425
 3532 0044 00 00 01 C4             		.long .L426
 3533 0048 00 00 01 E8             		.long .L427
 3534 004c 00 00 02 F8             		.long .L415
 3535 0050 00 00 02 20             		.long .L428
 3536 0054 00 00 02 57             		.long .L429
 3537 0058 00 00 02 8F             		.long .L430
 3538 005c 00 00 02 BE             		.long .L431
 3539                             		.section	.text.TMR_SetChannelPWM
 3540                             	.L416:
3085:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
 3541                             		.loc 1 3085 0
 3542 0015 FB EE 90 86 08          		mov.L	#0x88690, r14
 3543 001a F1 E1 71                		bset #1, 113[r14].B
3086:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU0.TIORH.BYTE, MTU_TIOR_MODE_PIN_1_0);
 3544                             		.loc 1 3086 0
 3545 001d CD E4 72                		mov.B	114[r14], r4
 3546 0020 75 24 F0                		and #-16, r4
 3547 0023 65 54                   		or	#5, r4
 3548 0025 C7 E4 72                		mov.B	r4, 114[r14]
3087:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU0.TIORH.BYTE, MTU_TIOR_MODE_PIN_0_1);
 3549                             		.loc 1 3087 0
 3550 0028 CD E4 72                		mov.B	114[r14], r4
 3551 002b 64 F4                   		and #15, r4
 3552 002d 78 54                   		bset #5, r4
 3553 002f C7 E4 72                		mov.B	r4, 114[r14]
3088:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         PORTB.PDR.BYTE |= PORTX_BIT3_MASK;; 	/* PB3 is input*/
 3554                             		.loc 1 3088 0
 3555 0032 FB EE 0B C0 08          		mov.L	#0x8c00b, r14
 3556 0037 2E 71                   		bra	.L437
 3557                             	.L417:
3092:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM Mode*/
 3558                             		.loc 1 3092 0
 3559 0039 FB EE 90 86 08          		mov.L	#0x88690, r14
 3560 003e F1 E1 71                		bset #1, 113[r14].B
3093:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU0.TIORH.BYTE, MTU_TIOR_MODE_PIN_1_0);
 3561                             		.loc 1 3093 0
 3562 0041 CD E4 72                		mov.B	114[r14], r4
 3563 0044 64 F4                   		and #15, r4
 3564 0046 75 34 50                		or	#0x50, r4
 3565 0049 C7 E4 72                		mov.B	r4, 114[r14]
3094:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU0.TIORH.BYTE, MTU_TIOR_MODE_PIN_0_1);
 3566                             		.loc 1 3094 0
 3567 004c CD E4 72                		mov.B	114[r14], r4
 3568 004f 75 24 F0                		and #-16, r4
 3569 0052 78 14                   		bset #1, r4
 3570 0054 C7 E4 72                		mov.B	r4, 114[r14]
3099:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT1.PDR.BYTE, 5);					/* is output */
 3571                             		.loc 1 3099 0
 3572 0057 FB EE 01 C0 08          		mov.L	#0x8c001, r14
 3573 005c 38 5E 01                		bra	.L438
 3574                             	.L418:
3104:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM Mode*/
 3575                             		.loc 1 3104 0
 3576 005f FB EE 90 86 08          		mov.L	#0x88690, r14
 3577 0064 F1 E1 71                		bset #1, 113[r14].B
3105:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU0.TIORL.BYTE, MTU_TIOR_MODE_PIN_1_0);
 3578                             		.loc 1 3105 0
 3579 0067 CD E4 73                		mov.B	115[r14], r4
 3580 006a 75 24 F0                		and #-16, r4
 3581 006d 65 54                   		or	#5, r4
 3582 006f C7 E4 73                		mov.B	r4, 115[r14]
3106:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU0.TIORL.BYTE, MTU_TIOR_MODE_PIN_0_1);
 3583                             		.loc 1 3106 0
 3584 0072 CD E4 73                		mov.B	115[r14], r4
 3585 0075 64 F4                   		and #15, r4
 3586 0077 78 54                   		bset #5, r4
 3587 0079 C7 E4 73                		mov.B	r4, 115[r14]
3107:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         PORT3.PDR.BYTE |= PORTX_BIT2_MASK; 		/* P32 is Output*/
 3588                             		.loc 1 3107 0
 3589 007c FB EE 03 C0 08          		mov.L	#0x8c003, r14
 3590 0081 38 05 02                		bra	.L439
 3591                             	.L419:
3111:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
 3592                             		.loc 1 3111 0
 3593 0084 FB EE 90 86 08          		mov.L	#0x88690, r14
 3594 0089 F1 E1 71                		bset #1, 113[r14].B
3112:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU0.TIORL.BYTE, MTU_TIOR_MODE_PIN_0_1);
 3595                             		.loc 1 3112 0
 3596 008c CD E4 73                		mov.B	115[r14], r4
 3597 008f 75 24 F0                		and #-16, r4
 3598 0092 78 14                   		bset #1, r4
 3599 0094 C7 E4 73                		mov.B	r4, 115[r14]
3113:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU0.TIORL.BYTE, MTU_TIOR_MODE_PIN_1_0);
 3600                             		.loc 1 3113 0
 3601 0097 CD E4 73                		mov.B	115[r14], r4
 3602 009a 64 F4                   		and #15, r4
 3603 009c 75 34 50                		or	#0x50, r4
 3604 009f C7 E4 73                		mov.B	r4, 115[r14]
3114:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTA.PDR.BYTE, 3);					/* is output*/
 3605                             		.loc 1 3114 0
 3606 00a2 FB EE 0A C0 08          		mov.L	#0x8c00a, r14
 3607 00a7 03                      		.balign 2,3,5
 3608                             	.L437:
 3609 00a8 F0 E3                   		bset #3, [r14].B
3115:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTA.PMR.BYTE, 3);
 3610                             		.loc 1 3115 0
 3611 00aa CD E4 60                		mov.B	96[r14], r4
 3612 00ad 78 34                   		bset #3, r4
 3613 00af 38 45 02                		bra	.L435
 3614                             	.L420:
3119:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
 3615                             		.loc 1 3119 0
 3616 00b2 FB EE 90 86 08          		mov.L	#0x88690, r14
 3617 00b7 F1 E1 F1                		bset #1, 241[r14].B
3120:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU1.TIOR.BYTE, MTU_TIOR_MODE_PIN_0_1);
 3618                             		.loc 1 3120 0
 3619 00ba CD E4 F2                		mov.B	242[r14], r4
 3620 00bd 64 F4                   		and #15, r4
 3621 00bf 78 54                   		bset #5, r4
 3622 00c1 C7 E4 F2                		mov.B	r4, 242[r14]
3121:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU1.TIOR.BYTE, MTU_TIOR_MODE_PIN_1_0);
 3623                             		.loc 1 3121 0
 3624 00c4 CD E4 F2                		mov.B	242[r14], r4
 3625 00c7 75 24 F0                		and #-16, r4
 3626 00ca 65 54                   		or	#5, r4
 3627 00cc C7 E4 F2                		mov.B	r4, 242[r14]
3122:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTE.PDR.BYTE, 4);					/* is output*/
 3628                             		.loc 1 3122 0
 3629 00cf FB EE 0E C0 08          		mov.L	#0x8c00e, r14
 3630 00d4 38 AE 00                		bra	.L440
 3631                             	.L421:
3126:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
 3632                             		.loc 1 3126 0
 3633 00d7 FB EE 90 86 08          		mov.L	#0x88690, r14
 3634 00dc F1 E1 F1                		bset #1, 241[r14].B
3127:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU1.TIOR.BYTE, MTU_TIOR_MODE_PIN_0_1);
 3635                             		.loc 1 3127 0
 3636 00df CD E4 F2                		mov.B	242[r14], r4
 3637 00e2 75 24 F0                		and #-16, r4
 3638 00e5 78 14                   		bset #1, r4
 3639 00e7 C7 E4 F2                		mov.B	r4, 242[r14]
3128:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU1.TIOR.BYTE, MTU_TIOR_MODE_PIN_1_0);
 3640                             		.loc 1 3128 0
 3641 00ea CD E4 F2                		mov.B	242[r14], r4
 3642 00ed 64 F4                   		and #15, r4
 3643 00ef 75 34 50                		or	#0x50, r4
 3644 00f2 C7 E4 F2                		mov.B	r4, 242[r14]
3129:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTB.PDR.BYTE, 5);					/* is output*/
 3645                             		.loc 1 3129 0
 3646 00f5 FB EE 0B C0 08          		mov.L	#0x8c00b, r14
 3647 00fa 38 C0 00                		bra	.L438
 3648                             	.L422:
3134:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
 3649                             		.loc 1 3134 0
 3650 00fd FB EE 92 86 08          		mov.L	#0x88692, r14
 3651 0102 F2 E1 6F 01             		bset #1, 367[r14].B
3135:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU2.TIOR.BYTE, MTU_TIOR_MODE_PIN_1_0);
 3652                             		.loc 1 3135 0
 3653 0106 CE E4 70 01             		mov.B	368[r14], r4
 3654 010a 75 24 F0                		and #-16, r4
 3655 010d 65 54                   		or	#5, r4
 3656 010f CB E4 70 01             		mov.B	r4, 368[r14]
3136:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU2.TIOR.BYTE, MTU_TIOR_MODE_PIN_0_1);
 3657                             		.loc 1 3136 0
 3658 0113 CE E4 70 01             		mov.B	368[r14], r4
 3659 0117 64 F4                   		and #15, r4
 3660 0119 78 54                   		bset #5, r4
 3661 011b CB E4 70 01             		mov.B	r4, 368[r14]
3141:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT2.PDR.BYTE, 6);					/* is output*/
 3662                             		.loc 1 3141 0
 3663 011f FB EE 02 C0 08          		mov.L	#0x8c002, r14
 3664 0124 38 F2 00                		bra	.L436
 3665                             	.L423:
3146:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
 3666                             		.loc 1 3146 0
 3667 0127 FB EE 92 86 08          		mov.L	#0x88692, r14
 3668 012c F2 E1 6F 01             		bset #1, 367[r14].B
3147:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU2.TIOR.BYTE, MTU_TIOR_MODE_PIN_1_0);
 3669                             		.loc 1 3147 0
 3670 0130 CE E4 70 01             		mov.B	368[r14], r4
 3671 0134 64 F4                   		and #15, r4
 3672 0136 75 34 50                		or	#0x50, r4
 3673 0139 CB E4 70 01             		mov.B	r4, 368[r14]
3148:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU2.TIOR.BYTE, MTU_TIOR_MODE_PIN_0_1);
 3674                             		.loc 1 3148 0
 3675 013d CE E4 70 01             		mov.B	368[r14], r4
 3676 0141 75 24 F0                		and #-16, r4
 3677 0144 78 14                   		bset #1, r4
 3678 0146 CB E4 70 01             		mov.B	r4, 368[r14]
3153:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT2.PDR.BYTE, 7);					/* is output*/
 3679                             		.loc 1 3153 0
 3680 014a FB EE 02 C0 08          		mov.L	#0x8c002, r14
 3681 014f CC E4                   		mov.B	[r14], r4
 3682 0151 75 34 80                		or	#0xffffff80, r4
 3683 0154 C3 E4                   		mov.B	r4, [r14]
3154:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT2.PMR.BYTE, 7);
 3684                             		.loc 1 3154 0
 3685 0156 CD E4 60                		mov.B	96[r14], r4
 3686 0159 75 34 80                		or	#0xffffff80, r4
 3687 015c 38 98 01                		bra	.L435
 3688                             	.L424:
3159:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
 3689                             		.loc 1 3159 0
 3690 015f FB EE 00 86 08          		mov.L	#0x88600, r14
 3691 0164 F1 E1 02                		bset #1, 2[r14].B
3160:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU3.TIORH.BYTE, MTU_TIOR_MODE_PIN_1_0);
 3692                             		.loc 1 3160 0
 3693 0167 CD E4 04                		mov.B	4[r14], r4
 3694 016a 75 24 F0                		and #-16, r4
 3695 016d 65 54                   		or	#5, r4
 3696 016f C7 E4 04                		mov.B	r4, 4[r14]
3161:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU3.TIORH.BYTE, MTU_TIOR_MODE_PIN_0_1);
 3697                             		.loc 1 3161 0
 3698 0172 CD E4 04                		mov.B	4[r14], r4
 3699 0175 64 F4                   		and #15, r4
 3700 0177 78 54                   		bset #5, r4
 3701 0179 C7 E4 04                		mov.B	r4, 4[r14]
3169:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT1.PDR.BYTE, 4);					/* is output*/
 3702                             		.loc 1 3169 0
 3703 017c FB EE 01 C0 08          		mov.L	#0x8c001, r14
 3704 0181 03                      		.balign 2,3,5
 3705                             	.L440:
 3706 0182 F0 E4                   		bset #4, [r14].B
3170:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT1.PMR.BYTE, 4);
 3707                             		.loc 1 3170 0
 3708 0184 CD E4 60                		mov.B	96[r14], r4
 3709 0187 78 44                   		bset #4, r4
 3710 0189 38 6B 01                		bra	.L435
 3711                             	.L425:
3174:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
 3712                             		.loc 1 3174 0
 3713 018c FB EE 00 86 08          		mov.L	#0x88600, r14
 3714 0191 F1 E1 02                		bset #1, 2[r14].B
3175:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU.TOER.BIT.OE3B = 1;
 3715                             		.loc 1 3175 0
 3716 0194 FB 4E 0A 86 08          		mov.L	#0x8860a, r4
 3717 0199 CC 43                   		mov.B	[r4], r3
 3718 019b 78 03                   		bset	#0, r3
 3719 019d C3 43                   		mov.B	r3, [r4]
3176:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU3.TIORH.BYTE, MTU_TIOR_MODE_PIN_1_0);
 3720                             		.loc 1 3176 0
 3721 019f CD E4 04                		mov.B	4[r14], r4
 3722 01a2 64 F4                   		and #15, r4
 3723 01a4 75 34 50                		or	#0x50, r4
 3724 01a7 C7 E4 04                		mov.B	r4, 4[r14]
3177:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU3.TIORH.BYTE, MTU_TIOR_MODE_PIN_0_1);
 3725                             		.loc 1 3177 0
 3726 01aa CD E4 04                		mov.B	4[r14], r4
 3727 01ad 75 24 F0                		and #-16, r4
 3728 01b0 78 14                   		bset #1, r4
 3729 01b2 C7 E4 04                		mov.B	r4, 4[r14]
3185:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTC.PDR.BYTE, 5);					/* is output*/
 3730                             		.loc 1 3185 0
 3731 01b5 FB EE 0C C0 08          		mov.L	#0x8c00c, r14
 3732                             		.balign 2,3,5
 3733                             	.L438:
 3734 01ba F0 E5                   		bset #5, [r14].B
3186:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTC.PMR.BYTE, 5);
 3735                             		.loc 1 3186 0
 3736 01bc CD E4 60                		mov.B	96[r14], r4
 3737 01bf 78 54                   		bset #5, r4
 3738 01c1 38 33 01                		bra	.L435
 3739                             	.L426:
3190:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
 3740                             		.loc 1 3190 0
 3741 01c4 FB EE 00 86 08          		mov.L	#0x88600, r14
 3742 01c9 F1 E1 02                		bset #1, 2[r14].B
3191:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU3.TIORL.BYTE, MTU_TIOR_MODE_PIN_1_0);
 3743                             		.loc 1 3191 0
 3744 01cc CD E4 05                		mov.B	5[r14], r4
 3745 01cf 75 24 F0                		and #-16, r4
 3746 01d2 65 54                   		or	#5, r4
 3747 01d4 C7 E4 05                		mov.B	r4, 5[r14]
3192:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU3.TIORL.BYTE, MTU_TIOR_MODE_PIN_0_1);
 3748                             		.loc 1 3192 0
 3749 01d7 CD E4 05                		mov.B	5[r14], r4
 3750 01da 64 F4                   		and #15, r4
 3751 01dc 78 54                   		bset #5, r4
 3752 01de C7 E4 05                		mov.B	r4, 5[r14]
3197:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTC.PDR.BYTE, 6);					/* is output*/
 3753                             		.loc 1 3197 0
 3754 01e1 FB EE 0C C0 08          		mov.L	#0x8c00c, r14
 3755 01e6 2E 30                   		bra	.L436
 3756                             	.L427:
3202:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
 3757                             		.loc 1 3202 0
 3758 01e8 FB EE 00 86 08          		mov.L	#0x88600, r14
 3759 01ed F1 E1 02                		bset #1, 2[r14].B
3203:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU.TOER.BIT.OE3D = 1;
 3760                             		.loc 1 3203 0
 3761 01f0 FB 4E 0A 86 08          		mov.L	#0x8860a, r4
 3762 01f5 CC 43                   		mov.B	[r4], r3
 3763 01f7 78 33                   		bset	#3, r3
 3764 01f9 C3 43                   		mov.B	r3, [r4]
3204:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU3.TIORL.BYTE, MTU_TIOR_MODE_PIN_1_0);
 3765                             		.loc 1 3204 0
 3766 01fb CD E4 05                		mov.B	5[r14], r4
 3767 01fe 64 F4                   		and #15, r4
 3768 0200 75 34 50                		or	#0x50, r4
 3769 0203 C7 E4 05                		mov.B	r4, 5[r14]
3205:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU3.TIORL.BYTE, MTU_TIOR_MODE_PIN_0_1);
 3770                             		.loc 1 3205 0
 3771 0206 CD E4 05                		mov.B	5[r14], r4
 3772 0209 75 24 F0                		and #-16, r4
 3773 020c 78 14                   		bset #1, r4
 3774 020e C7 E4 05                		mov.B	r4, 5[r14]
3213:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTB.PDR.BYTE, 6);					/*  is output */
 3775                             		.loc 1 3213 0
 3776 0211 FB EE 0B C0 08          		mov.L	#0x8c00b, r14
 3777                             		.balign 2,3,5
 3778                             	.L436:
 3779 0216 F0 E6                   		bset #6, [r14].B
3214:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTB.PMR.BYTE, 6);
 3780                             		.loc 1 3214 0
 3781 0218 CD E4 60                		mov.B	96[r14], r4
 3782 021b 78 64                   		bset #6, r4
 3783 021d 38 D7 00                		bra	.L435
 3784                             	.L428:
3219:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TMDR.BYTE |= (RX_PWM_MODE_1); /*  Select PWM Mode */
 3785                             		.loc 1 3219 0
 3786 0220 FB EE 00 86 08          		mov.L	#0x88600, r14
 3787 0225 F1 E1 03                		bset #1, 3[r14].B
3220:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU.TOER.BIT.OE4A = 1;
 3788                             		.loc 1 3220 0
 3789 0228 FB 4E 0A 86 08          		mov.L	#0x8860a, r4
 3790 022d CC 43                   		mov.B	[r4], r3
 3791 022f 78 13                   		bset	#1, r3
 3792 0231 C3 43                   		mov.B	r3, [r4]
3221:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU4.TIORH.BYTE, MTU_TIOR_MODE_PIN_1_0);
 3793                             		.loc 1 3221 0
 3794 0233 CD E4 06                		mov.B	6[r14], r4
 3795 0236 75 24 F0                		and #-16, r4
 3796 0239 65 54                   		or	#5, r4
 3797 023b C7 E4 06                		mov.B	r4, 6[r14]
3222:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU4.TIORH.BYTE, MTU_TIOR_MODE_PIN_0_1);
 3798                             		.loc 1 3222 0
 3799 023e CD E4 06                		mov.B	6[r14], r4
 3800 0241 64 F4                   		and #15, r4
 3801 0243 78 54                   		bset #5, r4
 3802 0245 C7 E4 06                		mov.B	r4, 6[r14]
3230:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTA.PDR.BYTE, 0);					/* is output*/
 3803                             		.loc 1 3230 0
 3804 0248 FB EE 0A C0 08          		mov.L	#0x8c00a, r14
 3805 024d F0 E0                   		bset #0, [r14].B
3231:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTA.PMR.BYTE, 0);
 3806                             		.loc 1 3231 0
 3807 024f CD E4 60                		mov.B	96[r14], r4
 3808 0252 78 04                   		bset #0, r4
 3809 0254 38 A0 00                		bra	.L435
 3810                             	.L429:
3235:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
 3811                             		.loc 1 3235 0
 3812 0257 FB EE 00 86 08          		mov.L	#0x88600, r14
 3813 025c F1 E1 03                		bset #1, 3[r14].B
3236:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU.TOER.BIT.OE4B = 1;
 3814                             		.loc 1 3236 0
 3815 025f FB 4E 0A 86 08          		mov.L	#0x8860a, r4
 3816 0264 CC 43                   		mov.B	[r4], r3
 3817 0266 78 23                   		bset	#2, r3
 3818 0268 C3 43                   		mov.B	r3, [r4]
3237:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU4.TIORH.BYTE, MTU_TIOR_MODE_PIN_1_0);
 3819                             		.loc 1 3237 0
 3820 026a CD E4 06                		mov.B	6[r14], r4
 3821 026d 64 F4                   		and #15, r4
 3822 026f 75 34 50                		or	#0x50, r4
 3823 0272 C7 E4 06                		mov.B	r4, 6[r14]
3238:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU4.TIORH.BYTE, MTU_TIOR_MODE_PIN_0_1);
 3824                             		.loc 1 3238 0
 3825 0275 CD E4 06                		mov.B	6[r14], r4
 3826 0278 75 24 F0                		and #-16, r4
 3827 027b 78 14                   		bset #1, r4
 3828 027d C7 E4 06                		mov.B	r4, 6[r14]
3249:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTC.PDR.BYTE, 2);					/* is output*/
 3829                             		.loc 1 3249 0
 3830 0280 FB EE 0C C0 08          		mov.L	#0x8c00c, r14
 3831 0285 03                      		.balign 2,3,5
 3832                             	.L439:
 3833 0286 F0 E2                   		bset #2, [r14].B
3250:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTC.PMR.BYTE, 2);
 3834                             		.loc 1 3250 0
 3835 0288 CD E4 60                		mov.B	96[r14], r4
 3836 028b 78 24                   		bset #2, r4
 3837 028d 2E 67                   		bra	.L435
 3838                             	.L430:
3254:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
 3839                             		.loc 1 3254 0
 3840 028f FB EE 00 86 08          		mov.L	#0x88600, r14
 3841 0294 F1 E1 03                		bset #1, 3[r14].B
3255:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU.TOER.BIT.OE4C = 1;
 3842                             		.loc 1 3255 0
 3843 0297 FB 4E 0A 86 08          		mov.L	#0x8860a, r4
 3844 029c CC 43                   		mov.B	[r4], r3
 3845 029e 78 43                   		bset	#4, r3
 3846 02a0 C3 43                   		mov.B	r3, [r4]
3256:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU4.TIORL.BYTE, MTU_TIOR_MODE_PIN_1_0);
 3847                             		.loc 1 3256 0
 3848 02a2 CD E4 07                		mov.B	7[r14], r4
 3849 02a5 75 24 F0                		and #-16, r4
 3850 02a8 65 54                   		or	#5, r4
 3851 02aa C7 E4 07                		mov.B	r4, 7[r14]
3257:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU4.TIORL.BYTE, MTU_TIOR_MODE_PIN_0_1);
 3852                             		.loc 1 3257 0
 3853 02ad CD E4 07                		mov.B	7[r14], r4
 3854 02b0 64 F4                   		and #15, r4
 3855 02b2 78 54                   		bset #5, r4
 3856 02b4 C7 E4 07                		mov.B	r4, 7[r14]
3265:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORTB.PDR.BYTE, 1);					/* is output*/
 3857                             		.loc 1 3265 0
 3858 02b7 FB EE 0B C0 08          		mov.L	#0x8c00b, r14
 3859 02bc 2E 30                   		bra	.L434
 3860                             	.L431:
3270:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TMDR.BYTE |= (RX_PWM_MODE_1); /* Select PWM ModeÃ¬*/
 3861                             		.loc 1 3270 0
 3862 02be FB EE 00 86 08          		mov.L	#0x88600, r14
 3863 02c3 F1 E1 03                		bset #1, 3[r14].B
3271:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU.TOER.BIT.OE4D = 1;
 3864                             		.loc 1 3271 0
 3865 02c6 FB 4E 0A 86 08          		mov.L	#0x8860a, r4
 3866 02cb CC 43                   		mov.B	[r4], r3
 3867 02cd 78 53                   		bset	#5, r3
 3868 02cf C3 43                   		mov.B	r3, [r4]
3272:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE( MTU4.TIORL.BYTE, MTU_TIOR_MODE_PIN_1_0);
 3869                             		.loc 1 3272 0
 3870 02d1 CD E4 07                		mov.B	7[r14], r4
 3871 02d4 64 F4                   		and #15, r4
 3872 02d6 75 34 50                		or	#0x50, r4
 3873 02d9 C7 E4 07                		mov.B	r4, 7[r14]
3273:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE( MTU4.TIORL.BYTE, MTU_TIOR_MODE_PIN_0_1);
 3874                             		.loc 1 3273 0
 3875 02dc CD E4 07                		mov.B	7[r14], r4
 3876 02df 75 24 F0                		and #-16, r4
 3877 02e2 78 14                   		bset #1, r4
 3878 02e4 C7 E4 07                		mov.B	r4, 7[r14]
3284:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT3.PDR.BYTE, 1);					/* is output*/
 3879                             		.loc 1 3284 0
 3880 02e7 FB EE 03 C0 08          		mov.L	#0x8c003, r14
 3881                             		.balign 2,3,5
 3882                             	.L434:
 3883 02ec F0 E1                   		bset #1, [r14].B
3285:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_BIT(PORT3.PMR.BYTE, 1);
 3884                             		.loc 1 3285 0
 3885 02ee CD E4 60                		mov.B	96[r14], r4
 3886 02f1 78 14                   		bset #1, r4
 3887 02f3 03                      		.balign 2,3,5
 3888                             	.L435:
 3889 02f4 C7 E4 60                		mov.B	r4, 96[r14]
3287:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 3890                             		.loc 1 3287 0
 3891 02f7 02                      		rts
 3892                             	.L415:
3289:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(0);
 3893                             		.loc 1 3289 0
 3894 02f8 75 41 30                		mov.L	#48, r1
 3895                             	.LVL282:
 3896 02fb 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 3897                             	.LVL283:
 3898                             	.LFE72:
 3900 02ff 03                      		.section	.text.TMR_ToggleChannelEdgeMode,"ax",@progbits
 3901                             		.global	_TMR_ToggleChannelEdgeMode
 3903                             	_TMR_ToggleChannelEdgeMode:
 3904                             	.LFB73:
3516:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 3905                             		.loc 1 3516 0
 3906                             	.LVL284:
3517:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     int chId = (int)pChannel;
 3907                             		.loc 1 3517 0
 3908 0000 5B 11                   		movu.B	r1, r1
 3909                             	.LVL285:
3520:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     p1 = ChModeRegAddr[chId];
 3910                             		.loc 1 3520 0
 3911 0002 FB E2 00 00 00 00       		mov.L	#_ChModeRegAddr, r14
 3912 0008 FE 61 EE                		mov.L	[r1,r14], r14
 3913                             	.LVL286:
3522:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( p1 !=0 )
 3914                             		.loc 1 3522 0
 3915 000b 61 0E                   		cmp	#0, r14
 3916 000d 20 3C                   		beq	.L442
3524:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( GET_BIT(ChModeRegAddr_Nibble, chId))
 3917                             		.loc 1 3524 0
 3918 000f FB 42 0A 11 A5 00       		mov.L	#0xa5110a, r4
 3919 0015 FC 6B 41                		btst	r1, r4
3526:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if ( GET_H_NIBBLE(*p1) == MTU_TIOR_MODE_RISING_EDGE )
 3920                             		.loc 1 3526 0
 3921 0018 CC E4                   		mov.B	[r14], r4
3524:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( GET_BIT(ChModeRegAddr_Nibble, chId))
 3922                             		.loc 1 3524 0
 3923 001a 20 19                   		beq	.L443
3526:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if ( GET_H_NIBBLE(*p1) == MTU_TIOR_MODE_RISING_EDGE )
 3924                             		.loc 1 3526 0
 3925 001c 5B 44                   		movu.B	r4, r4
 3926 001e 68 44                   		shlr	#4, r4
 3927 0020 61 84                   		cmp	#8, r4
3527:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 SET_H_NIBBLE( *p1, MTU_TIOR_MODE_FALING_EDGE);
 3928                             		.loc 1 3527 0
 3929 0022 CC E4                   		mov.B	[r14], r4
3526:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if ( GET_H_NIBBLE(*p1) == MTU_TIOR_MODE_RISING_EDGE )
 3930                             		.loc 1 3526 0
 3931 0024 18                      		bne	.L444
3527:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 SET_H_NIBBLE( *p1, MTU_TIOR_MODE_FALING_EDGE);
 3932                             		.loc 1 3527 0
 3933 0025 64 F4                   		and #15, r4
 3934 0027 75 34 90                		or	#0xffffff90, r4
 3935 002a 2E 1C                   		bra	.L447
 3936                             	.L444:
3529:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 SET_H_NIBBLE( *p1, MTU_TIOR_MODE_RISING_EDGE);
 3937                             		.loc 1 3529 0
 3938 002c 64 F4                   		and #15, r4
 3939 002e 75 34 80                		or	#0xffffff80, r4
 3940 0031 2E 15                   		bra	.L447
 3941                             	.L443:
3533:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if ( GET_L_NIBBLE(*p1) == MTU_TIOR_MODE_RISING_EDGE )
 3942                             		.loc 1 3533 0
 3943 0033 64 F4                   		and #15, r4
 3944 0035 61 84                   		cmp	#8, r4
3534:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 SET_L_NIBBLE( *p1, MTU_TIOR_MODE_FALING_EDGE);
 3945                             		.loc 1 3534 0
 3946 0037 CC E4                   		mov.B	[r14], r4
3533:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if ( GET_L_NIBBLE(*p1) == MTU_TIOR_MODE_RISING_EDGE )
 3947                             		.loc 1 3533 0
 3948 0039 1F                      		bne	.L446
3534:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 SET_L_NIBBLE( *p1, MTU_TIOR_MODE_FALING_EDGE);
 3949                             		.loc 1 3534 0
 3950 003a 75 24 F0                		and #-16, r4
 3951 003d 65 94                   		or	#9, r4
 3952 003f 0F                      		bra	.L447
 3953                             	.L446:
3536:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 SET_L_NIBBLE( *p1, MTU_TIOR_MODE_RISING_EDGE);
 3954                             		.loc 1 3536 0
 3955 0040 75 24 F0                		and #-16, r4
 3956 0043 78 34                   		bset #3, r4
 3957 0045 03                      		.balign 2,3,1
 3958                             	.L447:
 3959 0046 C3 E4                   		mov.B	r4, [r14]
 3960 0048 02                      		rts
 3961                             	.L442:
3541:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 3962                             		.loc 1 3541 0
 3963 0049 75 41 30                		mov.L	#48, r1
 3964                             	.LVL287:
 3965 004c 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 3966                             	.LVL288:
 3967                             	.LFE73:
 3969                             		.section	.text.TMR_SetTimeOn,"ax",@progbits
 3970                             		.global	_TMR_SetTimeOn
 3972                             	_TMR_SetTimeOn:
 3973                             	.LFB74:
3553:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 3974                             		.loc 1 3553 0
 3975                             	.LVL289:
3616:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     p1 = ChTGRAAddr[chID];
 3976                             		.loc 1 3616 0
 3977 0000 5B 11                   		movu.B	r1, r1
 3978 0002 FB E2 00 00 00 00       		mov.L	#_ChTGRAAddr, r14
 3979 0008 FE 61 EE                		mov.L	[r1,r14], r14
 3980                             	.LVL290:
3617:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( p1 != 0)
 3981                             		.loc 1 3617 0
 3982 000b 61 0E                   		cmp	#0, r14
 3983 000d 14                      		beq	.L449
3619:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         *p1 = tOn;
 3984                             		.loc 1 3619 0
 3985 000e D3 E2                   		mov.W	r2, [r14]
 3986 0010 02                      		rts
 3987                             	.L449:
3623:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 3988                             		.loc 1 3623 0
 3989 0011 75 41 30                		mov.L	#48, r1
 3990                             	.LVL291:
 3991 0014 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 3992                             	.LVL292:
 3993                             	.LFE74:
 3995                             		.section	.text.TMR_GetChValue,"ax",@progbits
 3996                             		.global	_TMR_GetChValue
 3998                             	_TMR_GetChValue:
 3999                             	.LFB76:
3637:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 4000                             		.loc 1 3637 0
 4001                             	.LVL293:
 4002 0000 7E A7                   		push.l	r7
 4003                             	.LCFI11:
 4004                             	.LVL294:
3703:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     p1 = ChTGRAAddr[chID];
 4005                             		.loc 1 3703 0
 4006 0002 5B 11                   		movu.B	r1, r1
 4007 0004 FB 72 00 00 00 00       		mov.L	#_ChTGRAAddr, r7
 4008 000a FE 61 77                		mov.L	[r1,r7], r7
 4009                             	.LVL295:
3704:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( p1 != 0)
 4010                             		.loc 1 3704 0
 4011 000d 61 07                   		cmp	#0, r7
 4012 000f 14                      		beq	.L453
3706:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = *p1;
 4013                             		.loc 1 3706 0
 4014 0010 DC 71                   		mov.W	[r7], r1
 4015                             	.LVL296:
 4016 0012 0A                      		bra	.L454
 4017                             	.LVL297:
 4018                             	.L453:
3710:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 4019                             		.loc 1 3710 0
 4020 0013 75 41 30                		mov.L	#48, r1
 4021 0016 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 4022                             	.LVL298:
3638:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     Period_ValueType value = 0;
 4023                             		.loc 1 3638 0
 4024 001a DF 71                   		mov.W	r7, r1
 4025                             	.LVL299:
 4026                             		.balign 2,3,1
 4027                             	.L454:
3713:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 4028                             		.loc 1 3713 0
 4029 001c 5F 11                   		movu.W	r1, r1
 4030 001e 3F 77 01                		rtsd	#4, r7-r7
 4031                             	.LFE76:
 4033 0021 03                      		.section	.text.TMR_GetTimeOn,"ax",@progbits
 4034                             		.global	_TMR_GetTimeOn
 4036                             	_TMR_GetTimeOn:
 4037                             	.LFB75:
3628:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 4038                             		.loc 1 3628 0
 4039                             	.LVL300:
 4040 0000 7E A7                   		push.l	r7
 4041                             	.LCFI12:
 4042 0002 EF 27                   		mov.L	r2, r7
3629:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     *tOn = TMR_GetChValue(chID);
 4043                             		.loc 1 3629 0
 4044 0004 05 00 00 00             		bsr	_TMR_GetChValue
 4045                             	.LVL301:
 4046 0008 D3 71                   		mov.W	r1, [r7]
3630:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 4047                             		.loc 1 3630 0
 4048 000a 3F 77 01                		rtsd	#4, r7-r7
 4049                             	.LFE75:
 4051                             		.section	.text.TMR_SetChannelPulses,"ax",@progbits
 4052                             		.global	_TMR_SetChannelPulses
 4054                             	_TMR_SetChannelPulses:
 4055                             	.LFB77:
3723:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 4056                             		.loc 1 3723 0
 4057                             	.LVL302:
3724:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     DISABLE_PORT_REGISTER_WRITE_PROTECTION();
 4058                             		.loc 1 3724 0
 4059 0000 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 4060 0005 F9 E4 1F 00             		mov.B	#0, 31[r14]
 4061 0009 F1 E6 1F                		bset #6, 31[r14].B
3725:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (chId)
 4062                             		.loc 1 3725 0
 4063 000c 5B 11                   		movu.B	r1, r1
 4064 000e 75 51 17                		cmp	#23, r1
 4065 0011 24 6C                   		bgtu	.L459
 4066 0013 FB 42 00 00 00 00       		mov.L	#.L476, r4
 4067 0019 FE 61 44                		mov.L	[r1,r4], r4
 4068                             		
 4069 001c 7F 04                   	1:jmp	r4
 4070                             		.section	.rodata.TMR_SetChannelPulses,"a",@progbits
 4071                             		.balign 4
 4072                             		.balign 4
 4073                             	.L476:
 4074 0000 00 00 00 1E             		.long .L460
 4075 0004 00 00 00 24             		.long .L461
 4076 0008 00 00 00 2A             		.long .L462
 4077 000c 00 00 00 30             		.long .L463
 4078 0010 00 00 00 7D             		.long .L459
 4079 0014 00 00 00 7D             		.long .L459
 4080 0018 00 00 00 7D             		.long .L459
 4081 001c 00 00 00 36             		.long .L464
 4082 0020 00 00 00 3C             		.long .L465
 4083 0024 00 00 00 7D             		.long .L459
 4084 0028 00 00 00 7D             		.long .L459
 4085 002c 00 00 00 42             		.long .L466
 4086 0030 00 00 00 48             		.long .L467
 4087 0034 00 00 00 7D             		.long .L459
 4088 0038 00 00 00 7D             		.long .L459
 4089 003c 00 00 00 4E             		.long .L468
 4090 0040 00 00 00 54             		.long .L469
 4091 0044 00 00 00 5A             		.long .L470
 4092 0048 00 00 00 60             		.long .L471
 4093 004c 00 00 00 7D             		.long .L459
 4094 0050 00 00 00 66             		.long .L472
 4095 0054 00 00 00 6C             		.long .L473
 4096 0058 00 00 00 72             		.long .L474
 4097 005c 00 00 00 78             		.long .L475
 4098                             		.section	.text.TMR_SetChannelPulses
 4099                             	.L460:
3729:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PB3PFS.BYTE = 0x01; 					/* PB3 is select as TMO0 function*/
 4100                             		.loc 1 3729 0
 4101 001e F9 E4 9B 01             		mov.B	#1, 155[r14]
3730:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4102                             		.loc 1 3730 0
 4103 0022 2E 62                   		bra	.L477
 4104                             	.L461:
3735:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P15PFS.BYTE = 0x01; 					/* P15 is select as MTI0C0B*/
 4105                             		.loc 1 3735 0
 4106 0024 F9 E4 4D 01             		mov.B	#1, 77[r14]
3737:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4107                             		.loc 1 3737 0
 4108 0028 2E 5C                   		bra	.L477
 4109                             	.L462:
3739:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P32PFS.BYTE = 0x01; 					/* P32 is select as TMO0 function*/
 4110                             		.loc 1 3739 0
 4111 002a F9 E4 5A 01             		mov.B	#1, 90[r14]
3740:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4112                             		.loc 1 3740 0
 4113 002e 2E 56                   		bra	.L477
 4114                             	.L463:
3742:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PA3PFS.BYTE = 0x01;
 4115                             		.loc 1 3742 0
 4116 0030 F9 E4 93 01             		mov.B	#1, 147[r14]
3743:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4117                             		.loc 1 3743 0
 4118 0034 2E 50                   		bra	.L477
 4119                             	.L464:
3746:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PE4PFS.BYTE = 0x02; 					/* PE$ is select as TMO0 function*/
 4120                             		.loc 1 3746 0
 4121 0036 F9 E4 B4 02             		mov.B	#2, 180[r14]
3747:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4122                             		.loc 1 3747 0
 4123 003a 2E 4A                   		bra	.L477
 4124                             	.L465:
3749:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PB5PFS.BYTE = 0x02;
 4125                             		.loc 1 3749 0
 4126 003c F9 E4 9D 02             		mov.B	#2, 157[r14]
3750:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4127                             		.loc 1 3750 0
 4128 0040 2E 44                   		bra	.L477
 4129                             	.L466:
3756:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P26PFS.BYTE = 0x01; 					/*P26 is select as TMO0 function*/
 4130                             		.loc 1 3756 0
 4131 0042 F9 E4 56 01             		mov.B	#1, 86[r14]
3758:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4132                             		.loc 1 3758 0
 4133 0046 2E 3E                   		bra	.L477
 4134                             	.L467:
3763:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P27PFS.BYTE = 0x01; 					/* P27 is selected as MTIOC2B*/
 4135                             		.loc 1 3763 0
 4136 0048 F9 E4 57 01             		mov.B	#1, 87[r14]
3765:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4137                             		.loc 1 3765 0
 4138 004c 2E 38                   		bra	.L477
 4139                             	.L468:
3773:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P14PFS.BYTE = 0x01; 					/* P14 is select as TMO0 function*/
 4140                             		.loc 1 3773 0
 4141 004e F9 E4 4C 01             		mov.B	#1, 76[r14]
3775:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4142                             		.loc 1 3775 0
 4143 0052 2E 32                   		bra	.L477
 4144                             	.L469:
3782:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PC5PFS.BYTE = 0x01; 					/* PC5 is selected as MTIOC3B*/
 4145                             		.loc 1 3782 0
 4146 0054 F9 E4 A5 01             		mov.B	#1, 165[r14]
3784:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4147                             		.loc 1 3784 0
 4148 0058 2E 2C                   		bra	.L477
 4149                             	.L470:
3789:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PC6PFS.BYTE = 0x01; 					/* PC6 is select as MTIOC3C function*/
 4150                             		.loc 1 3789 0
 4151 005a F9 E4 A6 01             		mov.B	#1, 166[r14]
3791:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4152                             		.loc 1 3791 0
 4153 005e 2E 26                   		bra	.L477
 4154                             	.L471:
3798:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PB6PFS.BYTE = 0x01; 					/* PB6 is selected as MTIOC3D */
 4155                             		.loc 1 3798 0
 4156 0060 F9 E4 9E 01             		mov.B	#1, 158[r14]
3800:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4157                             		.loc 1 3800 0
 4158 0064 2E 20                   		bra	.L477
 4159                             	.L472:
3808:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PA0PFS.BYTE = 0x01; 					/* PA0 is select as MTIOC4A function*/
 4160                             		.loc 1 3808 0
 4161 0066 F9 E4 90 01             		mov.B	#1, 144[r14]
3810:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4162                             		.loc 1 3810 0
 4163 006a 2E 1A                   		bra	.L477
 4164                             	.L473:
3819:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PC2PFS.BYTE = 0x01; 					/* PC2 is select as MTIOC4B function*/
 4165                             		.loc 1 3819 0
 4166 006c F9 E4 A2 01             		mov.B	#1, 162[r14]
3821:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4167                             		.loc 1 3821 0
 4168 0070 2E 14                   		bra	.L477
 4169                             	.L474:
3828:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PB1PFS.BYTE = 0x02; 				/* PB1 is select as MTIOC4C function*/
 4170                             		.loc 1 3828 0
 4171 0072 F9 E4 99 02             		mov.B	#2, 153[r14]
3830:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4172                             		.loc 1 3830 0
 4173 0076 2E 0E                   		bra	.L477
 4174                             	.L475:
3839:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P31PFS.BYTE = 0x02; 					/* P31 is select as MTIOC4D*/
 4175                             		.loc 1 3839 0
 4176 0078 F9 E4 59 02             		mov.B	#2, 89[r14]
3841:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4177                             		.loc 1 3841 0
 4178 007c 08                      		bra	.L477
 4179                             	.L459:
3843:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(0);
 4180                             		.loc 1 3843 0
 4181 007d 75 41 30                		mov.L	#48, r1
 4182                             	.LVL303:
 4183 0080 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 4184                             	.LVL304:
 4185                             		.balign 2,3,4
 4186                             	.L477:
3846:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ENABLE_PORT_REGISTER_WRITE_PROTECTION();
 4187                             		.loc 1 3846 0
 4188 0084 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 4189 0089 F9 E4 1F 00             		mov.B	#0, 31[r14]
 4190 008d F9 E4 1F 80             		mov.B	#0xffffff80, 31[r14]
 4191 0091 02                      		rts
 4192                             	.LFE77:
 4194                             		.section	.text.TMR_ClearChannelPulses,"ax",@progbits
 4195                             		.global	_TMR_ClearChannelPulses
 4197                             	_TMR_ClearChannelPulses:
 4198                             	.LFB78:
3855:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 4199                             		.loc 1 3855 0
 4200                             	.LVL305:
3856:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     DISABLE_PORT_REGISTER_WRITE_PROTECTION();
 4201                             		.loc 1 3856 0
 4202 0000 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 4203 0005 F9 E4 1F 00             		mov.B	#0, 31[r14]
 4204 0009 F1 E6 1F                		bset #6, 31[r14].B
3857:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (chId)
 4205                             		.loc 1 3857 0
 4206 000c 5B 11                   		movu.B	r1, r1
 4207 000e 75 51 17                		cmp	#23, r1
 4208 0011 24 6C                   		bgtu	.L479
 4209 0013 FB 42 00 00 00 00       		mov.L	#.L496, r4
 4210 0019 FE 61 44                		mov.L	[r1,r4], r4
 4211                             		
 4212 001c 7F 04                   	1:jmp	r4
 4213                             		.section	.rodata.TMR_ClearChannelPulses,"a",@progbits
 4214                             		.balign 4
 4215                             		.balign 4
 4216                             	.L496:
 4217 0000 00 00 00 1E             		.long .L480
 4218 0004 00 00 00 24             		.long .L481
 4219 0008 00 00 00 2A             		.long .L482
 4220 000c 00 00 00 30             		.long .L483
 4221 0010 00 00 00 7D             		.long .L479
 4222 0014 00 00 00 7D             		.long .L479
 4223 0018 00 00 00 7D             		.long .L479
 4224 001c 00 00 00 36             		.long .L484
 4225 0020 00 00 00 3C             		.long .L485
 4226 0024 00 00 00 7D             		.long .L479
 4227 0028 00 00 00 7D             		.long .L479
 4228 002c 00 00 00 42             		.long .L486
 4229 0030 00 00 00 48             		.long .L487
 4230 0034 00 00 00 7D             		.long .L479
 4231 0038 00 00 00 7D             		.long .L479
 4232 003c 00 00 00 4E             		.long .L488
 4233 0040 00 00 00 54             		.long .L489
 4234 0044 00 00 00 5A             		.long .L490
 4235 0048 00 00 00 60             		.long .L491
 4236 004c 00 00 00 7D             		.long .L479
 4237 0050 00 00 00 66             		.long .L492
 4238 0054 00 00 00 6C             		.long .L493
 4239 0058 00 00 00 72             		.long .L494
 4240 005c 00 00 00 78             		.long .L495
 4241                             		.section	.text.TMR_ClearChannelPulses
 4242                             	.L480:
3861:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PB3PFS.BYTE = 0x00; /* PB3 is select as TMO0 function*/
 4243                             		.loc 1 3861 0
 4244 001e F9 E4 9B 00             		mov.B	#0, 155[r14]
3862:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4245                             		.loc 1 3862 0
 4246 0022 2E 62                   		bra	.L497
 4247                             	.L481:
3867:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P15PFS.BYTE = 0x00; 					/* P15 is select as MTI0C0B*/
 4248                             		.loc 1 3867 0
 4249 0024 F9 E4 4D 00             		mov.B	#0, 77[r14]
3869:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4250                             		.loc 1 3869 0
 4251 0028 2E 5C                   		bra	.L497
 4252                             	.L482:
3871:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P32PFS.BYTE = 0x00; 					/* P32 is select as MTIOCOC function*/
 4253                             		.loc 1 3871 0
 4254 002a F9 E4 5A 00             		mov.B	#0, 90[r14]
3872:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4255                             		.loc 1 3872 0
 4256 002e 2E 56                   		bra	.L497
 4257                             	.L483:
3874:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PA3PFS.BYTE = 0x00;
 4258                             		.loc 1 3874 0
 4259 0030 F9 E4 93 00             		mov.B	#0, 147[r14]
3875:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4260                             		.loc 1 3875 0
 4261 0034 2E 50                   		bra	.L497
 4262                             	.L484:
3878:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PE4PFS.BYTE = 0x00; 					/* PE4 is select as MTIOC1A function*/
 4263                             		.loc 1 3878 0
 4264 0036 F9 E4 B4 00             		mov.B	#0, 180[r14]
3879:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4265                             		.loc 1 3879 0
 4266 003a 2E 4A                   		bra	.L497
 4267                             	.L485:
3881:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PB5PFS.BYTE = 0x00;
 4268                             		.loc 1 3881 0
 4269 003c F9 E4 9D 00             		mov.B	#0, 157[r14]
3882:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4270                             		.loc 1 3882 0
 4271 0040 2E 44                   		bra	.L497
 4272                             	.L486:
3888:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P26PFS.BYTE = 0x00; 					/* P32 is select as MTIOC2A function*/
 4273                             		.loc 1 3888 0
 4274 0042 F9 E4 56 00             		mov.B	#0, 86[r14]
3890:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4275                             		.loc 1 3890 0
 4276 0046 2E 3E                   		bra	.L497
 4277                             	.L487:
3895:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P27PFS.BYTE = 0x00; 					/* P27 is selected as MTIOC2B*/
 4278                             		.loc 1 3895 0
 4279 0048 F9 E4 57 00             		mov.B	#0, 87[r14]
3897:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4280                             		.loc 1 3897 0
 4281 004c 2E 38                   		bra	.L497
 4282                             	.L488:
3905:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P14PFS.BYTE = 0x00; 					/* P14 is select as MTIOC3A function*/
 4283                             		.loc 1 3905 0
 4284 004e F9 E4 4C 00             		mov.B	#0, 76[r14]
3907:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4285                             		.loc 1 3907 0
 4286 0052 2E 32                   		bra	.L497
 4287                             	.L489:
3914:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PC5PFS.BYTE = 0x00; 					/* PC5 is selected as MTIOC3B*/
 4288                             		.loc 1 3914 0
 4289 0054 F9 E4 A5 00             		mov.B	#0, 165[r14]
3916:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4290                             		.loc 1 3916 0
 4291 0058 2E 2C                   		bra	.L497
 4292                             	.L490:
3921:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PC6PFS.BYTE = 0x00; 					/* PC6 is select as MTIOC3C function*/
 4293                             		.loc 1 3921 0
 4294 005a F9 E4 A6 00             		mov.B	#0, 166[r14]
3923:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4295                             		.loc 1 3923 0
 4296 005e 2E 26                   		bra	.L497
 4297                             	.L491:
3930:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PB6PFS.BYTE = 0x00; 					/* PC6 is selected as MTIOC3D*/
 4298                             		.loc 1 3930 0
 4299 0060 F9 E4 9E 00             		mov.B	#0, 158[r14]
3932:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4300                             		.loc 1 3932 0
 4301 0064 2E 20                   		bra	.L497
 4302                             	.L492:
3940:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PA0PFS.BYTE = 0x00; 					/* PA0 is select as MTIOC4A function*/
 4303                             		.loc 1 3940 0
 4304 0066 F9 E4 90 00             		mov.B	#0, 144[r14]
3942:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4305                             		.loc 1 3942 0
 4306 006a 2E 1A                   		bra	.L497
 4307                             	.L493:
3951:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PC2PFS.BYTE = 0x00; 				/* PA0 is select as MTIOC4B function*/
 4308                             		.loc 1 3951 0
 4309 006c F9 E4 A2 00             		mov.B	#0, 162[r14]
3953:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4310                             		.loc 1 3953 0
 4311 0070 2E 14                   		bra	.L497
 4312                             	.L494:
3960:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.PB1PFS.BYTE = 0x00; 				/* PB1 is select as MTIOC4C function*/
 4313                             		.loc 1 3960 0
 4314 0072 F9 E4 99 00             		mov.B	#0, 153[r14]
3962:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4315                             		.loc 1 3962 0
 4316 0076 2E 0E                   		bra	.L497
 4317                             	.L495:
3971:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MPC.P31PFS.BYTE = 0x00; 				/* P31 is select as MTIOC4D*/
 4318                             		.loc 1 3971 0
 4319 0078 F9 E4 59 00             		mov.B	#0, 89[r14]
3973:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4320                             		.loc 1 3973 0
 4321 007c 08                      		bra	.L497
 4322                             	.L479:
3975:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(0);
 4323                             		.loc 1 3975 0
 4324 007d 75 41 30                		mov.L	#48, r1
 4325                             	.LVL306:
 4326 0080 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 4327                             	.LVL307:
 4328                             		.balign 2,3,4
 4329                             	.L497:
3978:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ENABLE_PORT_REGISTER_WRITE_PROTECTION();
 4330                             		.loc 1 3978 0
 4331 0084 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 4332 0089 F9 E4 1F 00             		mov.B	#0, 31[r14]
 4333 008d F9 E4 1F 80             		mov.B	#0xffffff80, 31[r14]
 4334 0091 02                      		rts
 4335                             	.LFE78:
 4337                             		.section	.text.TMR_SetChannelEdgeMode,"ax",@progbits
 4338                             		.global	_TMR_SetChannelEdgeMode
 4340                             	_TMR_SetChannelEdgeMode:
 4341                             	.LFB79:
3988:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 4342                             		.loc 1 3988 0
 4343                             	.LVL308:
3992:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch( mode )
 4344                             		.loc 1 3992 0
 4345 0000 5B 2E                   		movu.B	r2, r14
 4346 0002 61 2E                   		cmp	#2, r14
 4347 0004 20 17                   		beq	.L501
 4348 0006 61 3E                   		cmp	#3, r14
 4349 0008 16                      		beq	.L502
 4350 0009 61 1E                   		cmp	#1, r14
 4351 000b 21 19                   		bne	.L499
 4352 000d 0D                      		bra	.L500
 4353                             	.L502:
4003:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode=MTU_TIOR_MODE_BOTH_EDGE;
 4354                             		.loc 1 4003 0
 4355 000e 66 A2                   		mov	#10, r2
 4356                             	.LVL309:
 4357 0010 2E 14                   		bra	.L499
 4358                             	.LVL310:
 4359                             	.L500:
3995:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( inversion ) mode=MTU_TIOR_MODE_FALING_EDGE;
 4360                             		.loc 1 3995 0
 4361 0012 61 03                   		cmp	#0, r3
 4362 0014 66 82                   		mov.L	#8, r2
 4363                             	.LVL311:
 4364 0016 FD 74 F2 09             		stnz	#9, r2
 4365 001a 0A                      		bra	.L499
 4366                             	.LVL312:
 4367                             	.L501:
3999:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( inversion ) mode=MTU_TIOR_MODE_RISING_EDGE;
 4368                             		.loc 1 3999 0
 4369 001b 61 03                   		cmp	#0, r3
 4370 001d 66 92                   		mov.L	#9, r2
 4371                             	.LVL313:
 4372 001f FD 74 F2 08             		stnz	#8, r2
 4373 0023 03                      		.balign 2,3,1
 4374                             	.L499:
 4375                             	.LVL314:
4068:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     p1 = ChModeRegAddr[chId];
 4376                             		.loc 1 4068 0
 4377 0024 5B 11                   		movu.B	r1, r1
 4378 0026 FB E2 00 00 00 00       		mov.L	#_ChModeRegAddr, r14
 4379 002c FE 61 EE                		mov.L	[r1,r14], r14
 4380                             	.LVL315:
4069:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( p1 !=0 )
 4381                             		.loc 1 4069 0
 4382 002f 61 0E                   		cmp	#0, r14
 4383 0031 20 24                   		beq	.L503
4071:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( GET_BIT(ChModeRegAddr_Nibble, chId))
 4384                             		.loc 1 4071 0
 4385 0033 FB 42 0A 11 A5 00       		mov.L	#0xa5110a, r4
 4386 0039 FD 60 14                		shlr	r1, r4
 4387 003c CC E3                   		mov.B	[r14], r3
 4388                             	.LVL316:
 4389 003e FD 74 C4 01             		tst	#1, r4
 4390 0042 10                      		beq	.L504
4073:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_H_NIBBLE(*p1, mode);
 4391                             		.loc 1 4073 0
 4392 0043 5B 22                   		movu.B	r2, r2
 4393 0045 6C 42                   		shll	#4, r2
 4394                             	.LVL317:
 4395 0047 64 F3                   		and #15, r3
 4396 0049 0F                      		bra	.L508
 4397                             	.LVL318:
 4398                             	.L504:
4077:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_L_NIBBLE(*p1, mode);
 4399                             		.loc 1 4077 0
 4400 004a 64 F2                   		and #15, r2
 4401                             	.LVL319:
 4402 004c 75 23 F0                		and #-16, r3
 4403 004f 03                      		.balign 2,3,1
 4404                             	.L508:
 4405 0050 57 23                   		or	r2, r3
 4406 0052 C3 E3                   		mov.B	r3, [r14]
 4407 0054 02                      		rts
 4408                             	.LVL320:
 4409                             	.L503:
4082:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 4410                             		.loc 1 4082 0
 4411 0055 75 41 30                		mov.L	#48, r1
 4412                             	.LVL321:
 4413 0058 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 4414                             	.LVL322:
 4415                             	.LFE79:
 4417                             		.section	.text.TMR_GetValue,"ax",@progbits
 4418                             		.global	_TMR_GetValue
 4420                             	_TMR_GetValue:
 4421                             	.LFB80:
4094:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 4422                             		.loc 1 4094 0
 4423                             	.LVL323:
4097:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch( tmrID )
 4424                             		.loc 1 4097 0
 4425 0000 5B 11                   		movu.B	r1, r1
 4426 0002 61 41                   		cmp	#4, r1
 4427 0004 24 3F                   		bgtu	.L510
 4428 0006 FB E2 00 00 00 00       		mov.L	#.L516, r14
 4429 000c FE 61 EE                		mov.L	[r1,r14], r14
 4430                             		
 4431 000f 7F 0E                   	1:jmp	r14
 4432                             		.section	.rodata.TMR_GetValue,"a",@progbits
 4433                             		.balign 4
 4434                             		.balign 4
 4435                             	.L516:
 4436 0000 00 00 00 11             		.long .L511
 4437 0004 00 00 00 1A             		.long .L512
 4438 0008 00 00 00 25             		.long .L513
 4439 000c 00 00 00 2F             		.long .L514
 4440 0010 00 00 00 39             		.long .L515
 4441                             		.section	.text.TMR_GetValue
 4442                             	.L511:
4100:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         tcnt_value = MTU0.TCNT;
 4443                             		.loc 1 4100 0
 4444 0011 FB EE 90 86 08          		mov.L	#0x88690, r14
 4445 0016 DD E1 3B                		mov.W	118[r14], r1
 4446                             	.LVL324:
 4447 0019 09                      		bra	.L518
 4448                             	.L512:
4103:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         tcnt_value = MTU1.TCNT;
 4449                             		.loc 1 4103 0
 4450 001a FB EE 90 86 08          		mov.L	#0x88690, r14
 4451 001f DD E1 7B                		mov.W	246[r14], r1
 4452                             		.balign 2,3,1
 4453                             	.L518:
 4454 0022 5F 11                   		movu.W	r1, r1
 4455                             	.LVL325:
4104:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4456                             		.loc 1 4104 0
 4457 0024 02                      		rts
 4458                             	.LVL326:
 4459                             	.L513:
4106:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         tcnt_value = MTU2.TCNT;
 4460                             		.loc 1 4106 0
 4461 0025 FB EE 92 86 08          		mov.L	#0x88692, r14
 4462 002a DD E1 BA                		mov.W	372[r14], r1
 4463 002d 2E F5                   		bra	.L518
 4464                             	.L514:
4109:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         tcnt_value = MTU3.TCNT;
 4465                             		.loc 1 4109 0
 4466 002f FB EE 00 86 08          		mov.L	#0x88600, r14
 4467 0034 DD E1 08                		mov.W	16[r14], r1
 4468 0037 2E EB                   		bra	.L518
 4469                             	.L515:
4112:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         tcnt_value = MTU4.TCNT;
 4470                             		.loc 1 4112 0
 4471 0039 FB EE 00 86 08          		mov.L	#0x88600, r14
 4472 003e DD E1 09                		mov.W	18[r14], r1
 4473 0041 2E E1                   		bra	.L518
 4474                             	.L510:
4115:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 4475                             		.loc 1 4115 0
 4476 0043 75 41 30                		mov.L	#48, r1
 4477 0046 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 4478                             	.LVL327:
4095:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RegType tcnt_value = 0;
 4479                             		.loc 1 4095 0
 4480 004a 66 01                   		mov.L	#0, r1
 4481                             	.LVL328:
4120:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_GETValue*/
 4482                             		.loc 1 4120 0
 4483 004c 02                      		rts
 4484                             	.LFE80:
 4486 004d 03                      		.section	.text.TMR_EnableCHI,"ax",@progbits
 4487                             		.global	_TMR_EnableCHI
 4489                             	_TMR_EnableCHI:
 4490                             	.LFB81:
4129:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 4491                             		.loc 1 4129 0
 4492                             	.LVL329:
4130:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (chId)
 4493                             		.loc 1 4130 0
 4494 0000 5B 11                   		movu.B	r1, r1
 4495 0002 75 51 17                		cmp	#23, r1
 4496 0005 25 05 38 C2 01          		bgtu	.L520
 4497 000a FB E2 00 00 00 00       		mov.L	#.L537, r14
 4498 0010 FE 61 EE                		mov.L	[r1,r14], r14
 4499                             		
 4500 0013 7F 0E                   	1:jmp	r14
 4501                             		.section	.rodata.TMR_EnableCHI,"a",@progbits
 4502                             		.balign 4
 4503                             		.balign 4
 4504                             	.L537:
 4505 0000 00 00 00 15             		.long .L521
 4506 0004 00 00 00 2F             		.long .L522
 4507 0008 00 00 00 4D             		.long .L523
 4508 000c 00 00 00 67             		.long .L524
 4509 0010 00 00 01 C9             		.long .L520
 4510 0014 00 00 01 C9             		.long .L520
 4511 0018 00 00 01 C9             		.long .L520
 4512 001c 00 00 00 81             		.long .L525
 4513 0020 00 00 00 9B             		.long .L526
 4514 0024 00 00 01 C9             		.long .L520
 4515 0028 00 00 01 C9             		.long .L520
 4516 002c 00 00 00 B5             		.long .L527
 4517 0030 00 00 00 D0             		.long .L528
 4518 0034 00 00 01 C9             		.long .L520
 4519 0038 00 00 01 C9             		.long .L520
 4520 003c 00 00 00 EF             		.long .L529
 4521 0040 00 00 01 0A             		.long .L530
 4522 0044 00 00 01 24             		.long .L531
 4523 0048 00 00 01 3E             		.long .L532
 4524 004c 00 00 01 C9             		.long .L520
 4525 0050 00 00 01 58             		.long .L533
 4526 0054 00 00 01 72             		.long .L534
 4527 0058 00 00 01 91             		.long .L535
 4528 005c 00 00 01 AB             		.long .L536
 4529                             		.section	.text.TMR_EnableCHI
 4530                             	.L521:
4134:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU0_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
 4531                             		.loc 1 4134 0
 4532 0015 FB EE 00 70 08          		mov.L	#0x87000, r14
 4533 001a FA E4 72 03 01          		mov.B	#1, 882[r14]
4135:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TIER.BYTE |= (TGIA_INTERRUPT_ENABLE);
 4534                             		.loc 1 4135 0
 4535 001f FB 4E 90 86 08          		mov.L	#0x88690, r4
 4536 0024 F1 40 74                		bset #0, 116[r4].B
4136:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU0_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT2_MASK;
 4537                             		.loc 1 4136 0
 4538 0027 CE E4 0E 02             		mov.B	526[r14], r4
 4539 002b 78 24                   		bset #2, r4
 4540 002d 2E 1B                   		bra	.L541
 4541                             	.L522:
4139:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU0_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
 4542                             		.loc 1 4139 0
 4543 002f FB EE 00 70 08          		mov.L	#0x87000, r14
 4544 0034 FA E4 72 03 01          		mov.B	#1, 882[r14]
4140:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TIER.BYTE |= (TGIB_INTERRUPT_ENABLE);
 4545                             		.loc 1 4140 0
 4546 0039 FB 4E 90 86 08          		mov.L	#0x88690, r4
 4547 003e F1 41 74                		bset #1, 116[r4].B
4141:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU0_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT3_MASK;
 4548                             		.loc 1 4141 0
 4549 0041 CE E4 0E 02             		mov.B	526[r14], r4
 4550 0045 78 34                   		bset #3, r4
 4551 0047 03                      		.balign 2,3,5
 4552                             	.L541:
 4553 0048 CB E4 0E 02             		mov.B	r4, 526[r14]
4142:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4554                             		.loc 1 4142 0
 4555 004c 02                      		rts
 4556                             	.L523:
4144:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU0_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
 4557                             		.loc 1 4144 0
 4558 004d FB EE 00 70 08          		mov.L	#0x87000, r14
 4559 0052 FA E4 72 03 01          		mov.B	#1, 882[r14]
4145:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TIER.BYTE |= (TGIC_INTERRUPT_ENABLE);
 4560                             		.loc 1 4145 0
 4561 0057 FB 4E 90 86 08          		mov.L	#0x88690, r4
 4562 005c F1 42 74                		bset #2, 116[r4].B
4146:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU0_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT4_MASK;
 4563                             		.loc 1 4146 0
 4564 005f CE E4 0E 02             		mov.B	526[r14], r4
 4565 0063 78 44                   		bset #4, r4
 4566 0065 2E E3                   		bra	.L541
 4567                             	.L524:
4149:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU0_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
 4568                             		.loc 1 4149 0
 4569 0067 FB EE 00 70 08          		mov.L	#0x87000, r14
 4570 006c FA E4 72 03 01          		mov.B	#1, 882[r14]
4150:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TIER.BYTE |= (TGID_INTERRUPT_ENABLE);
 4571                             		.loc 1 4150 0
 4572 0071 FB 4E 90 86 08          		mov.L	#0x88690, r4
 4573 0076 F1 43 74                		bset #3, 116[r4].B
4151:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU0_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT5_MASK;
 4574                             		.loc 1 4151 0
 4575 0079 CE E4 0E 02             		mov.B	526[r14], r4
 4576 007d 78 54                   		bset #5, r4
 4577 007f 2E C9                   		bra	.L541
 4578                             	.L525:
4155:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU1_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
 4579                             		.loc 1 4155 0
 4580 0081 FB EE 00 70 08          		mov.L	#0x87000, r14
 4581 0086 FA E4 79 03 01          		mov.B	#1, 889[r14]
4156:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1.TIER.BYTE |= (TGIA_INTERRUPT_ENABLE);
 4582                             		.loc 1 4156 0
 4583 008b FB 4E 90 86 08          		mov.L	#0x88690, r4
 4584 0090 F1 40 F4                		bset #0, 244[r4].B
4157:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU1_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT1_MASK;
 4585                             		.loc 1 4157 0
 4586 0093 CE E4 0F 02             		mov.B	527[r14], r4
 4587 0097 78 14                   		bset #1, r4
 4588 0099 2E 51                   		bra	.L542
 4589                             	.L526:
4160:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU1_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
 4590                             		.loc 1 4160 0
 4591 009b FB EE 00 70 08          		mov.L	#0x87000, r14
 4592 00a0 FA E4 79 03 01          		mov.B	#1, 889[r14]
4161:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1.TIER.BYTE |= (TGIB_INTERRUPT_ENABLE);
 4593                             		.loc 1 4161 0
 4594 00a5 FB 4E 90 86 08          		mov.L	#0x88690, r4
 4595 00aa F1 41 F4                		bset #1, 244[r4].B
4162:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU1_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT2_MASK;
 4596                             		.loc 1 4162 0
 4597 00ad CE E4 0F 02             		mov.B	527[r14], r4
 4598 00b1 78 24                   		bset #2, r4
 4599 00b3 2E 37                   		bra	.L542
 4600                             	.L527:
4166:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU2_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
 4601                             		.loc 1 4166 0
 4602 00b5 FB EE 00 70 08          		mov.L	#0x87000, r14
 4603 00ba FA E4 7D 03 01          		mov.B	#1, 893[r14]
4167:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2.TIER.BYTE |= (TGIA_INTERRUPT_ENABLE);
 4604                             		.loc 1 4167 0
 4605 00bf FB 4E 92 86 08          		mov.L	#0x88692, r4
 4606 00c4 F2 40 72 01             		bset #0, 370[r4].B
4168:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU2_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT5_MASK;
 4607                             		.loc 1 4168 0
 4608 00c8 CE E4 0F 02             		mov.B	527[r14], r4
 4609 00cc 78 54                   		bset #5, r4
 4610 00ce 2E 1C                   		bra	.L542
 4611                             	.L528:
4171:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU2_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
 4612                             		.loc 1 4171 0
 4613 00d0 FB EE 00 70 08          		mov.L	#0x87000, r14
 4614 00d5 FA E4 7D 03 01          		mov.B	#1, 893[r14]
4172:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2.TIER.BYTE |= (TGIB_INTERRUPT_ENABLE);
 4615                             		.loc 1 4172 0
 4616 00da FB 4E 92 86 08          		mov.L	#0x88692, r4
 4617 00df F2 41 72 01             		bset #1, 370[r4].B
4173:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU2_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT6_MASK;
 4618                             		.loc 1 4173 0
 4619 00e3 CE E4 0F 02             		mov.B	527[r14], r4
 4620 00e7 78 64                   		bset #6, r4
 4621 00e9 03                      		.balign 2,3,5
 4622                             	.L542:
 4623 00ea CB E4 0F 02             		mov.B	r4, 527[r14]
4174:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4624                             		.loc 1 4174 0
 4625 00ee 02                      		rts
 4626                             	.L529:
4177:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU3_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
 4627                             		.loc 1 4177 0
 4628 00ef FB EE 00 70 08          		mov.L	#0x87000, r14
 4629 00f4 FA E4 81 03 01          		mov.B	#1, 897[r14]
4178:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TIER.BYTE |= (TGIA_INTERRUPT_ENABLE);
 4630                             		.loc 1 4178 0
 4631 00f9 FB 4E 00 86 08          		mov.L	#0x88600, r4
 4632 00fe F1 40 08                		bset #0, 8[r4].B
4179:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT1_MASK;
 4633                             		.loc 1 4179 0
 4634 0101 CE E4 10 02             		mov.B	528[r14], r4
 4635 0105 78 14                   		bset #1, r4
 4636 0107 38 85 00                		bra	.L540
 4637                             	.L530:
4182:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU3_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
 4638                             		.loc 1 4182 0
 4639 010a FB EE 00 70 08          		mov.L	#0x87000, r14
 4640 010f FA E4 81 03 01          		mov.B	#1, 897[r14]
4183:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TIER.BYTE |= (TGIB_INTERRUPT_ENABLE);
 4641                             		.loc 1 4183 0
 4642 0114 FB 4E 00 86 08          		mov.L	#0x88600, r4
 4643 0119 F1 41 08                		bset #1, 8[r4].B
4184:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT2_MASK;
 4644                             		.loc 1 4184 0
 4645 011c CE E4 10 02             		mov.B	528[r14], r4
 4646 0120 78 24                   		bset #2, r4
 4647 0122 2E 6A                   		bra	.L540
 4648                             	.L531:
4187:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU3_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
 4649                             		.loc 1 4187 0
 4650 0124 FB EE 00 70 08          		mov.L	#0x87000, r14
 4651 0129 FA E4 81 03 01          		mov.B	#1, 897[r14]
4188:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TIER.BYTE |= (TGIC_INTERRUPT_ENABLE);
 4652                             		.loc 1 4188 0
 4653 012e FB 4E 00 86 08          		mov.L	#0x88600, r4
 4654 0133 F1 42 08                		bset #2, 8[r4].B
4189:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT3_MASK;
 4655                             		.loc 1 4189 0
 4656 0136 CE E4 10 02             		mov.B	528[r14], r4
 4657 013a 78 34                   		bset #3, r4
 4658 013c 2E 50                   		bra	.L540
 4659                             	.L532:
4192:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU3_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
 4660                             		.loc 1 4192 0
 4661 013e FB EE 00 70 08          		mov.L	#0x87000, r14
 4662 0143 FA E4 81 03 01          		mov.B	#1, 897[r14]
4193:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TIER.BYTE |= (TGID_INTERRUPT_ENABLE);
 4663                             		.loc 1 4193 0
 4664 0148 FB 4E 00 86 08          		mov.L	#0x88600, r4
 4665 014d F1 43 08                		bset #3, 8[r4].B
4194:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT4_MASK;
 4666                             		.loc 1 4194 0
 4667 0150 CE E4 10 02             		mov.B	528[r14], r4
 4668 0154 78 44                   		bset #4, r4
 4669 0156 2E 36                   		bra	.L540
 4670                             	.L533:
4198:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU4_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
 4671                             		.loc 1 4198 0
 4672 0158 FB EE 00 70 08          		mov.L	#0x87000, r14
 4673 015d FA E4 86 03 01          		mov.B	#1, 902[r14]
4199:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TIER.BYTE |= (TGIA_INTERRUPT_ENABLE);
 4674                             		.loc 1 4199 0
 4675 0162 FB 4E 00 86 08          		mov.L	#0x88600, r4
 4676 0167 F1 40 09                		bset #0, 9[r4].B
4200:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU4_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT6_MASK;
 4677                             		.loc 1 4200 0
 4678 016a CE E4 10 02             		mov.B	528[r14], r4
 4679 016e 78 64                   		bset #6, r4
 4680 0170 2E 1C                   		bra	.L540
 4681                             	.L534:
4203:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU4_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
 4682                             		.loc 1 4203 0
 4683 0172 FB EE 00 70 08          		mov.L	#0x87000, r14
 4684 0177 FA E4 86 03 01          		mov.B	#1, 902[r14]
4204:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TIER.BYTE |= (TGIB_INTERRUPT_ENABLE);
 4685                             		.loc 1 4204 0
 4686 017c FB 4E 00 86 08          		mov.L	#0x88600, r4
 4687 0181 F1 41 09                		bset #1, 9[r4].B
4205:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU4_INT_ENABLE_REGISTER].BYTE |= _HAL_BIT7_MASK;
 4688                             		.loc 1 4205 0
 4689 0184 CE E4 10 02             		mov.B	528[r14], r4
 4690 0188 75 34 80                		or	#0xffffff80, r4
 4691 018b 03                      		.balign 2,3,5
 4692                             	.L540:
 4693 018c CB E4 10 02             		mov.B	r4, 528[r14]
4206:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4694                             		.loc 1 4206 0
 4695 0190 02                      		rts
 4696                             	.L535:
4208:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU4_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
 4697                             		.loc 1 4208 0
 4698 0191 FB EE 00 70 08          		mov.L	#0x87000, r14
 4699 0196 FA E4 86 03 01          		mov.B	#1, 902[r14]
4209:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TIER.BYTE |= (TGIC_INTERRUPT_ENABLE);
 4700                             		.loc 1 4209 0
 4701 019b FB 4E 00 86 08          		mov.L	#0x88600, r4
 4702 01a0 F1 42 09                		bset #2, 9[r4].B
4210:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU4_INT_ENABLE_REGISTER +1].BYTE |= _HAL_BIT0_MASK;
 4703                             		.loc 1 4210 0
 4704 01a3 CE E4 11 02             		mov.B	529[r14], r4
 4705 01a7 78 04                   		bset #0, r4
 4706 01a9 2E 1B                   		bra	.L539
 4707                             	.L536:
4213:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU4_BASE_INT_VECTOR].BYTE = HAL_CHANNEL_DEFAULT_INT_PRIO;
 4708                             		.loc 1 4213 0
 4709 01ab FB EE 00 70 08          		mov.L	#0x87000, r14
 4710 01b0 FA E4 86 03 01          		mov.B	#1, 902[r14]
4214:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TIER.BYTE |= (TGID_INTERRUPT_ENABLE);
 4711                             		.loc 1 4214 0
 4712 01b5 FB 4E 00 86 08          		mov.L	#0x88600, r4
 4713 01ba F1 43 09                		bset #3, 9[r4].B
4215:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU4_INT_ENABLE_REGISTER +1].BYTE |= _HAL_BIT1_MASK;
 4714                             		.loc 1 4215 0
 4715 01bd CE E4 11 02             		mov.B	529[r14], r4
 4716 01c1 78 14                   		bset #1, r4
 4717 01c3 03                      		.balign 2,3,5
 4718                             	.L539:
 4719 01c4 CB E4 11 02             		mov.B	r4, 529[r14]
4216:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4720                             		.loc 1 4216 0
 4721 01c8 02                      		rts
 4722                             	.L520:
4218:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 4723                             		.loc 1 4218 0
 4724 01c9 75 41 30                		mov.L	#48, r1
 4725                             	.LVL330:
 4726 01cc 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 4727                             	.LVL331:
 4728                             	.LFE81:
 4730                             		.section	.text.TMR_ReadCHF,"ax",@progbits
 4731                             		.global	_TMR_ReadCHF
 4733                             	_TMR_ReadCHF:
 4734                             	.LFB83:
4345:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 4735                             		.loc 1 4345 0
 4736                             	.LVL332:
4347:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch( chID )
 4737                             		.loc 1 4347 0
 4738 0000 5B 11                   		movu.B	r1, r1
 4739 0002 75 51 17                		cmp	#23, r1
 4740 0005 25 05 38 B0 00          		bgtu	.L544
 4741 000a FB E2 00 00 00 00       		mov.L	#.L561, r14
 4742 0010 FE 61 EE                		mov.L	[r1,r14], r14
 4743                             		
 4744 0013 7F 0E                   	1:jmp	r14
 4745                             		.section	.rodata.TMR_ReadCHF,"a",@progbits
 4746                             		.balign 4
 4747                             		.balign 4
 4748                             	.L561:
 4749 0000 00 00 00 15             		.long .L545
 4750 0004 00 00 00 1E             		.long .L546
 4751 0008 00 00 00 29             		.long .L547
 4752 000c 00 00 00 33             		.long .L548
 4753 0010 00 00 00 B7             		.long .L544
 4754 0014 00 00 00 B7             		.long .L544
 4755 0018 00 00 00 B7             		.long .L544
 4756 001c 00 00 00 3D             		.long .L549
 4757 0020 00 00 00 47             		.long .L550
 4758 0024 00 00 00 B7             		.long .L544
 4759 0028 00 00 00 B7             		.long .L544
 4760 002c 00 00 00 51             		.long .L551
 4761 0030 00 00 00 5B             		.long .L552
 4762 0034 00 00 00 B7             		.long .L544
 4763 0038 00 00 00 B7             		.long .L544
 4764 003c 00 00 00 65             		.long .L553
 4765 0040 00 00 00 6F             		.long .L554
 4766 0044 00 00 00 79             		.long .L555
 4767 0048 00 00 00 83             		.long .L556
 4768 004c 00 00 00 B7             		.long .L544
 4769 0050 00 00 00 8D             		.long .L557
 4770 0054 00 00 00 97             		.long .L558
 4771 0058 00 00 00 A1             		.long .L559
 4772 005c 00 00 00 AC             		.long .L560
 4773                             		.section	.text.TMR_ReadCHF
 4774                             	.L545:
4351:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU0_BASE_INT_VECTOR + TGIA0_INT_SHIF_VECTOR].BYTE);
 4775                             		.loc 1 4351 0
 4776 0015 FB EE 00 70 08          		mov.L	#0x87000, r14
 4777 001a CD E1 72                		mov.B	114[r14], r1
 4778                             	.LVL333:
 4779 001d 09                      		bra	.L563
 4780                             	.L546:
4354:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU0_BASE_INT_VECTOR + TGIB0_INT_SHIF_VECTOR].BYTE);
 4781                             		.loc 1 4354 0
 4782 001e FB EE 00 70 08          		mov.L	#0x87000, r14
 4783 0023 CD E1 73                		mov.B	115[r14], r1
 4784                             		.balign 2,3,1
 4785                             	.L563:
 4786 0026 5B 11                   		movu.B	r1, r1
 4787                             	.LVL334:
4355:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4788                             		.loc 1 4355 0
 4789 0028 02                      		rts
 4790                             	.LVL335:
 4791                             	.L547:
4357:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU0_BASE_INT_VECTOR + TGIC0_INT_SHIF_VECTOR].BYTE);
 4792                             		.loc 1 4357 0
 4793 0029 FB EE 00 70 08          		mov.L	#0x87000, r14
 4794 002e CD E1 74                		mov.B	116[r14], r1
 4795 0031 2E F5                   		bra	.L563
 4796                             	.L548:
4360:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU0_BASE_INT_VECTOR + TGID0_INT_SHIF_VECTOR].BYTE);
 4797                             		.loc 1 4360 0
 4798 0033 FB EE 00 70 08          		mov.L	#0x87000, r14
 4799 0038 CD E1 75                		mov.B	117[r14], r1
 4800 003b 2E EB                   		bra	.L563
 4801                             	.L549:
4364:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU1_BASE_INT_VECTOR + TGIA1_INT_SHIF_VECTOR].BYTE);
 4802                             		.loc 1 4364 0
 4803 003d FB EE 00 70 08          		mov.L	#0x87000, r14
 4804 0042 CD E1 79                		mov.B	121[r14], r1
 4805 0045 2E E1                   		bra	.L563
 4806                             	.L550:
4367:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU1_BASE_INT_VECTOR + TGIB1_INT_SHIF_VECTOR].BYTE);
 4807                             		.loc 1 4367 0
 4808 0047 FB EE 00 70 08          		mov.L	#0x87000, r14
 4809 004c CD E1 7A                		mov.B	122[r14], r1
 4810 004f 2E D7                   		bra	.L563
 4811                             	.L551:
4371:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU2_BASE_INT_VECTOR + TGIA2_INT_SHIF_VECTOR].BYTE);
 4812                             		.loc 1 4371 0
 4813 0051 FB EE 00 70 08          		mov.L	#0x87000, r14
 4814 0056 CD E1 7D                		mov.B	125[r14], r1
 4815 0059 2E CD                   		bra	.L563
 4816                             	.L552:
4374:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU2_BASE_INT_VECTOR + TGIB2_INT_SHIF_VECTOR].BYTE);
 4817                             		.loc 1 4374 0
 4818 005b FB EE 00 70 08          		mov.L	#0x87000, r14
 4819 0060 CD E1 7E                		mov.B	126[r14], r1
 4820 0063 2E C3                   		bra	.L563
 4821                             	.L553:
4378:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU3_BASE_INT_VECTOR + TGIA3_INT_SHIF_VECTOR].BYTE);
 4822                             		.loc 1 4378 0
 4823 0065 FB EE 00 70 08          		mov.L	#0x87000, r14
 4824 006a CD E1 81                		mov.B	129[r14], r1
 4825 006d 2E B9                   		bra	.L563
 4826                             	.L554:
4381:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU3_BASE_INT_VECTOR + TGIB3_INT_SHIF_VECTOR].BYTE);
 4827                             		.loc 1 4381 0
 4828 006f FB EE 00 70 08          		mov.L	#0x87000, r14
 4829 0074 CD E1 82                		mov.B	130[r14], r1
 4830 0077 2E AF                   		bra	.L563
 4831                             	.L555:
4384:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU3_BASE_INT_VECTOR + TGIC3_INT_SHIF_VECTOR].BYTE);
 4832                             		.loc 1 4384 0
 4833 0079 FB EE 00 70 08          		mov.L	#0x87000, r14
 4834 007e CD E1 83                		mov.B	131[r14], r1
 4835 0081 2E A5                   		bra	.L563
 4836                             	.L556:
4387:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU3_BASE_INT_VECTOR + TGID3_INT_SHIF_VECTOR].BYTE);
 4837                             		.loc 1 4387 0
 4838 0083 FB EE 00 70 08          		mov.L	#0x87000, r14
 4839 0088 CD E1 84                		mov.B	132[r14], r1
 4840 008b 2E 9B                   		bra	.L563
 4841                             	.L557:
4391:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU4_BASE_INT_VECTOR + TGIA4_INT_SHIF_VECTOR].BYTE);
 4842                             		.loc 1 4391 0
 4843 008d FB EE 00 70 08          		mov.L	#0x87000, r14
 4844 0092 CD E1 86                		mov.B	134[r14], r1
 4845 0095 2E 91                   		bra	.L563
 4846                             	.L558:
4394:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU4_BASE_INT_VECTOR + TGIB4_INT_SHIF_VECTOR].BYTE);
 4847                             		.loc 1 4394 0
 4848 0097 FB EE 00 70 08          		mov.L	#0x87000, r14
 4849 009c CD E1 87                		mov.B	135[r14], r1
 4850 009f 2E 87                   		bra	.L563
 4851                             	.L559:
4397:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU4_BASE_INT_VECTOR + TGIC4_INT_SHIF_VECTOR].BYTE);
 4852                             		.loc 1 4397 0
 4853 00a1 FB EE 00 70 08          		mov.L	#0x87000, r14
 4854 00a6 CD E1 88                		mov.B	136[r14], r1
 4855 00a9 38 7D FF                		bra	.L563
 4856                             	.L560:
4400:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         retVal=(ICU.IR[MTU4_BASE_INT_VECTOR + TGID4_INT_SHIF_VECTOR].BYTE);
 4857                             		.loc 1 4400 0
 4858 00ac FB EE 00 70 08          		mov.L	#0x87000, r14
 4859 00b1 CD E1 89                		mov.B	137[r14], r1
 4860 00b4 38 72 FF                		bra	.L563
 4861                             	.L544:
4403:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 4862                             		.loc 1 4403 0
 4863 00b7 75 41 30                		mov.L	#48, r1
 4864 00ba 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 4865                             	.LVL336:
4346:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     bool_t retVal=FALSE;
 4866                             		.loc 1 4346 0
 4867 00be 66 01                   		mov.L	#0, r1
 4868                             	.LVL337:
4407:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end TMR_ReadCHF*/
 4869                             		.loc 1 4407 0
 4870 00c0 02                      		rts
 4871                             	.LFE83:
 4873 00c1 03                      		.section	.text.TMR_ClearCHF,"ax",@progbits
 4874                             		.global	_TMR_ClearCHF
 4876                             	_TMR_ClearCHF:
 4877                             	.LFB84:
4416:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 4878                             		.loc 1 4416 0
4417:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( channel < HAL_CH_MAX )
 4879                             		.loc 1 4417 0
 4880 0000 5B 11                   		movu.B	r1, r1
 4881 0002 75 51 18                		cmp	#24, r1
 4882 0005 24 12                   		bgtu	.L565
4416:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 4883                             		.loc 1 4416 0
 4884 0007 7E A7                   		push.l	r7
 4885                             	.LCFI13:
4419:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IR[MTU0_BASE_INT_VECTOR + channel].BYTE = 0x00; /* Clear interrupt flag*/
 4886                             		.loc 1 4419 0
 4887 0009 71 11 72                		add	#0x72, r1
 4888 000c FB EE 00 70 08          		mov.L	#0x87000, r14
 4889 0011 66 07                   		mov	#0, r7
 4890 0013 FE 01 E7                		mov.B	r7, [r1,r14]
 4891 0016 08                      		bra	.L567
 4892                             	.L565:
 4893                             	.LCFI14:
4423:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 4894                             		.loc 1 4423 0
 4895 0017 75 41 30                		mov.L	#48, r1
 4896 001a 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 4897                             	.L567:
 4898                             	.LCFI15:
4426:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_ClearCHF*/
 4899                             		.loc 1 4426 0
 4900 001e 3F 77 01                		rtsd	#4, r7-r7
 4901                             	.LFE84:
 4903                             		.section	.text.TMR_DisableCHI,"ax",@progbits
 4904                             		.global	_TMR_DisableCHI
 4906                             	_TMR_DisableCHI:
 4907                             	.LFB82:
4231:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 4908                             		.loc 1 4231 0
 4909                             	.LVL338:
 4910 0000 7E A7                   		push.l	r7
 4911                             	.LCFI16:
 4912 0002 CF 17                   		mov.B	r1, r7
4232:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (chId)
 4913                             		.loc 1 4232 0
 4914 0004 5B 1E                   		movu.B	r1, r14
 4915 0006 75 5E 17                		cmp	#23, r14
 4916 0009 25 05 38 2F 01          		bgtu	.L570
 4917 000e FB 42 00 00 00 00       		mov.L	#.L587, r4
 4918 0014 FE 6E 44                		mov.L	[r14,r4], r4
 4919 0017 FB EE 00 70 08          		mov.L	#0x87000, r14
 4920                             		
 4921 001c 7F 04                   	1:jmp	r4
 4922                             		.section	.rodata.TMR_DisableCHI,"a",@progbits
 4923                             		.balign 4
 4924                             		.balign 4
 4925                             	.L587:
 4926 0000 00 00 00 1E             		.long .L571
 4927 0004 00 00 00 2E             		.long .L572
 4928 0008 00 00 00 42             		.long .L573
 4929 000c 00 00 00 52             		.long .L574
 4930 0010 00 00 01 3A             		.long .L570
 4931 0014 00 00 01 3A             		.long .L570
 4932 0018 00 00 01 3A             		.long .L570
 4933 001c 00 00 00 62             		.long .L575
 4934 0020 00 00 00 72             		.long .L576
 4935 0024 00 00 01 3A             		.long .L570
 4936 0028 00 00 01 3A             		.long .L570
 4937 002c 00 00 00 86             		.long .L577
 4938 0030 00 00 00 97             		.long .L578
 4939 0034 00 00 01 3A             		.long .L570
 4940 0038 00 00 01 3A             		.long .L570
 4941 003c 00 00 00 AD             		.long .L579
 4942 0040 00 00 00 BD             		.long .L580
 4943 0044 00 00 00 CD             		.long .L581
 4944 0048 00 00 00 DD             		.long .L582
 4945 004c 00 00 01 3A             		.long .L570
 4946 0050 00 00 00 F1             		.long .L583
 4947 0054 00 00 01 01             		.long .L584
 4948 0058 00 00 01 18             		.long .L585
 4949 005c 00 00 01 28             		.long .L586
 4950                             		.section	.text.TMR_DisableCHI
 4951                             	.L571:
4236:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU0_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT2_MASK;
 4952                             		.loc 1 4236 0
 4953 001e F2 EA 0E 02             		bclr #2, 526[r14].B
4237:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TIER.BYTE &= (~TGIA_INTERRUPT_ENABLE);
 4954                             		.loc 1 4237 0
 4955 0022 FB EE 90 86 08          		mov.L	#0x88690, r14
 4956 0027 CD E4 74                		mov.B	116[r14], r4
 4957 002a 7A 04                   		bclr #0, r4
 4958 002c 2E 10                   		bra	.L595
 4959                             	.L572:
4240:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU0_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT3_MASK;
 4960                             		.loc 1 4240 0
 4961 002e F2 EB 0E 02             		bclr #3, 526[r14].B
4241:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TIER.BYTE &= ~(TGIB_INTERRUPT_ENABLE);
 4962                             		.loc 1 4241 0
 4963 0032 FB EE 90 86 08          		mov.L	#0x88690, r14
 4964 0037 CD E4 74                		mov.B	116[r14], r4
 4965 003a 7A 14                   		bclr #1, r4
 4966                             		.balign 2,3,5
 4967                             	.L595:
 4968 003c C7 E4 74                		mov.B	r4, 116[r14]
4242:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 4969                             		.loc 1 4242 0
 4970 003f 38 03 01                		bra	.L588
 4971                             	.L573:
4244:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU0_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT4_MASK;
 4972                             		.loc 1 4244 0
 4973 0042 F2 EC 0E 02             		bclr #4, 526[r14].B
4245:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TIER.BYTE &= (~TGIC_INTERRUPT_ENABLE);
 4974                             		.loc 1 4245 0
 4975 0046 FB EE 90 86 08          		mov.L	#0x88690, r14
 4976 004b CD E4 74                		mov.B	116[r14], r4
 4977 004e 7A 24                   		bclr #2, r4
 4978 0050 2E EC                   		bra	.L595
 4979                             	.L574:
4248:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU0_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT5_MASK;
 4980                             		.loc 1 4248 0
 4981 0052 F2 ED 0E 02             		bclr #5, 526[r14].B
4249:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TIER.BYTE &= ~(TGID_INTERRUPT_ENABLE);
 4982                             		.loc 1 4249 0
 4983 0056 FB EE 90 86 08          		mov.L	#0x88690, r14
 4984 005b CD E4 74                		mov.B	116[r14], r4
 4985 005e 7A 34                   		bclr #3, r4
 4986 0060 2E DC                   		bra	.L595
 4987                             	.L575:
4253:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU1_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT1_MASK;
 4988                             		.loc 1 4253 0
 4989 0062 F2 E9 0F 02             		bclr #1, 527[r14].B
4254:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1.TIER.BYTE &= ~(TGIA_INTERRUPT_ENABLE);
 4990                             		.loc 1 4254 0
 4991 0066 FB EE 90 86 08          		mov.L	#0x88690, r14
 4992 006b CD E4 F4                		mov.B	244[r14], r4
 4993 006e 7A 04                   		bclr #0, r4
 4994 0070 2E 10                   		bra	.L598
 4995                             	.L576:
4257:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU1_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT2_MASK;
 4996                             		.loc 1 4257 0
 4997 0072 F2 EA 0F 02             		bclr #2, 527[r14].B
4258:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1.TIER.BYTE &= ~(TGIB_INTERRUPT_ENABLE);
 4998                             		.loc 1 4258 0
 4999 0076 FB EE 90 86 08          		mov.L	#0x88690, r14
 5000 007b CD E4 F4                		mov.B	244[r14], r4
 5001 007e 7A 14                   		bclr #1, r4
 5002                             		.balign 2,3,5
 5003                             	.L598:
 5004 0080 C7 E4 F4                		mov.B	r4, 244[r14]
4259:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 5005                             		.loc 1 4259 0
 5006 0083 38 BF 00                		bra	.L588
 5007                             	.L577:
4262:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU2_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT5_MASK;
 5008                             		.loc 1 4262 0
 5009 0086 F2 ED 0F 02             		bclr #5, 527[r14].B
4263:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2.TIER.BYTE &= (~TGIA_INTERRUPT_ENABLE);
 5010                             		.loc 1 4263 0
 5011 008a FB EE 92 86 08          		mov.L	#0x88692, r14
 5012 008f CE E4 72 01             		mov.B	370[r14], r4
 5013 0093 7A 04                   		bclr #0, r4
 5014 0095 2E 11                   		bra	.L599
 5015                             	.L578:
4266:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU2_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT6_MASK;
 5016                             		.loc 1 4266 0
 5017 0097 F2 EE 0F 02             		bclr #6, 527[r14].B
4267:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2.TIER.BYTE &= (~TGIB_INTERRUPT_ENABLE);
 5018                             		.loc 1 4267 0
 5019 009b FB EE 92 86 08          		mov.L	#0x88692, r14
 5020 00a0 CE E4 72 01             		mov.B	370[r14], r4
 5021 00a4 7A 14                   		bclr #1, r4
 5022                             		.balign 2,3,5
 5023                             	.L599:
 5024 00a6 CB E4 72 01             		mov.B	r4, 370[r14]
4268:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 5025                             		.loc 1 4268 0
 5026 00aa 38 98 00                		bra	.L588
 5027                             	.L579:
4271:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT1_MASK;
 5028                             		.loc 1 4271 0
 5029 00ad F2 E9 10 02             		bclr #1, 528[r14].B
4272:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TIER.BYTE &= (~TGIA_INTERRUPT_ENABLE);
 5030                             		.loc 1 4272 0
 5031 00b1 FB EE 00 86 08          		mov.L	#0x88600, r14
 5032 00b6 CD E4 08                		mov.B	8[r14], r4
 5033 00b9 7A 04                   		bclr #0, r4
 5034 00bb 2E 31                   		bra	.L597
 5035                             	.L580:
4275:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT2_MASK;
 5036                             		.loc 1 4275 0
 5037 00bd F2 EA 10 02             		bclr #2, 528[r14].B
4276:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TIER.BYTE &= ~(TGIB_INTERRUPT_ENABLE);
 5038                             		.loc 1 4276 0
 5039 00c1 FB EE 00 86 08          		mov.L	#0x88600, r14
 5040 00c6 CD E4 08                		mov.B	8[r14], r4
 5041 00c9 7A 14                   		bclr #1, r4
 5042 00cb 2E 21                   		bra	.L597
 5043                             	.L581:
4279:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT3_MASK;
 5044                             		.loc 1 4279 0
 5045 00cd F2 EB 10 02             		bclr #3, 528[r14].B
4280:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TIER.BYTE &= (~TGIC_INTERRUPT_ENABLE);
 5046                             		.loc 1 4280 0
 5047 00d1 FB EE 00 86 08          		mov.L	#0x88600, r14
 5048 00d6 CD E4 08                		mov.B	8[r14], r4
 5049 00d9 7A 24                   		bclr #2, r4
 5050 00db 2E 11                   		bra	.L597
 5051                             	.L582:
4283:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT4_MASK;
 5052                             		.loc 1 4283 0
 5053 00dd F2 EC 10 02             		bclr #4, 528[r14].B
4284:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TIER.BYTE &= ~(TGID_INTERRUPT_ENABLE);
 5054                             		.loc 1 4284 0
 5055 00e1 FB EE 00 86 08          		mov.L	#0x88600, r14
 5056 00e6 CD E4 08                		mov.B	8[r14], r4
 5057 00e9 7A 34                   		bclr #3, r4
 5058 00eb 03                      		.balign 2,3,5
 5059                             	.L597:
 5060 00ec C7 E4 08                		mov.B	r4, 8[r14]
4285:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 5061                             		.loc 1 4285 0
 5062 00ef 2E 53                   		bra	.L588
 5063                             	.L583:
4288:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU4_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT6_MASK;
 5064                             		.loc 1 4288 0
 5065 00f1 F2 EE 10 02             		bclr #6, 528[r14].B
4289:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TIER.BYTE &= ~(TGIA_INTERRUPT_ENABLE);
 5066                             		.loc 1 4289 0
 5067 00f5 FB EE 00 86 08          		mov.L	#0x88600, r14
 5068 00fa CD E4 09                		mov.B	9[r14], r4
 5069 00fd 7A 04                   		bclr #0, r4
 5070 00ff 2E 37                   		bra	.L596
 5071                             	.L584:
4292:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU4_INT_ENABLE_REGISTER].BYTE &= ~_HAL_BIT7_MASK;
 5072                             		.loc 1 4292 0
 5073 0101 CE E4 10 02             		mov.B	528[r14], r4
 5074 0105 75 24 7F                		and #0x7f, r4
 5075 0108 CB E4 10 02             		mov.B	r4, 528[r14]
4293:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TIER.BYTE &= ~(TGIB_INTERRUPT_ENABLE);
 5076                             		.loc 1 4293 0
 5077 010c FB EE 00 86 08          		mov.L	#0x88600, r14
 5078 0111 CD E4 09                		mov.B	9[r14], r4
 5079 0114 7A 14                   		bclr #1, r4
 5080 0116 2E 20                   		bra	.L596
 5081                             	.L585:
4296:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU4_INT_ENABLE_REGISTER +1].BYTE &= ~_HAL_BIT0_MASK;
 5082                             		.loc 1 4296 0
 5083 0118 F2 E8 11 02             		bclr #0, 529[r14].B
4297:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TIER.BYTE &= (~TGIC_INTERRUPT_ENABLE);
 5084                             		.loc 1 4297 0
 5085 011c FB EE 00 86 08          		mov.L	#0x88600, r14
 5086 0121 CD E4 09                		mov.B	9[r14], r4
 5087 0124 7A 24                   		bclr #2, r4
 5088 0126 2E 10                   		bra	.L596
 5089                             	.L586:
4300:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[MTU4_INT_ENABLE_REGISTER +1].BYTE &= ~_HAL_BIT1_MASK;
 5090                             		.loc 1 4300 0
 5091 0128 F2 E9 11 02             		bclr #1, 529[r14].B
4301:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TIER.BYTE &= ~(TGID_INTERRUPT_ENABLE);
 5092                             		.loc 1 4301 0
 5093 012c FB EE 00 86 08          		mov.L	#0x88600, r14
 5094 0131 CD E4 09                		mov.B	9[r14], r4
 5095 0134 7A 34                   		bclr #3, r4
 5096                             		.balign 2,3,5
 5097                             	.L596:
 5098 0136 C7 E4 09                		mov.B	r4, 9[r14]
4302:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 5099                             		.loc 1 4302 0
 5100 0139 09                      		bra	.L588
 5101                             	.L570:
4304:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 5102                             		.loc 1 4304 0
 5103 013a 75 41 30                		mov.L	#48, r1
 5104                             	.LVL339:
 5105 013d 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 5106                             	.LVL340:
 5107 0141 03                      		.balign 2,3,1
 5108                             	.L588:
4308:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     TMR_ClearCHF(chId);
 5109                             		.loc 1 4308 0
 5110 0142 CF 71                   		mov.B	r7, r1
 5111 0144 05 00 00 00             		bsr	_TMR_ClearCHF
 5112                             	.LVL341:
4310:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if ( (ICU.IER[MTU0_INT_ENABLE_REGISTER].BYTE & (_HAL_BIT2_MASK | _HAL_BIT3_MASK | _HAL_BIT4_MAS
 5113                             		.loc 1 4310 0
 5114 0148 FB 7E 00 70 08          		mov.L	#0x87000, r7
 5115                             	.LVL342:
 5116 014d CE 7E 0E 02             		mov.B	526[r7], r14
 5117 0151 75 2E 3C                		and	#60, r14
 5118 0154 1E                      		bne	.L589
4312:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU0_BASE_INT_VECTOR].BYTE = 0x00;
 5119                             		.loc 1 4312 0
 5120 0155 CB 7E 72 03             		mov.B	r14, 882[r7]
 5121 0159 03                      		.balign 2,3,5
 5122                             	.L589:
4315:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if ( (ICU.IER[MTU1_INT_ENABLE_REGISTER].BYTE & (_HAL_BIT1_MASK | _HAL_BIT2_MASK)) == 0)
 5123                             		.loc 1 4315 0
 5124 015a CE 77 0F 02             		mov.B	527[r7], r7
 5125 015e 64 67                   		and	#6, r7
 5126 0160 21 0C                   		bne	.L590
4317:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU1_BASE_INT_VECTOR].BYTE = 0x00;
 5127                             		.loc 1 4317 0
 5128 0162 FB EE 00 70 08          		mov.L	#0x87000, r14
 5129 0167 CB E7 79 03             		mov.B	r7, 889[r14]
 5130 016b 03                      		.balign 2,3,4
 5131                             	.L590:
4320:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if ( (ICU.IER[MTU2_INT_ENABLE_REGISTER].BYTE & (_HAL_BIT5_MASK | _HAL_BIT6_MASK)) == 0)
 5132                             		.loc 1 4320 0
 5133 016c FB 7E 00 70 08          		mov.L	#0x87000, r7
 5134 0171 CE 7E 0F 02             		mov.B	527[r7], r14
 5135 0175 75 2E 60                		and	#0x60, r14
 5136 0178 1E                      		bne	.L591
4322:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU2_BASE_INT_VECTOR].BYTE = 0x00;
 5137                             		.loc 1 4322 0
 5138 0179 CB 7E 7D 03             		mov.B	r14, 893[r7]
 5139 017d 03                      		.balign 2,3,5
 5140                             	.L591:
4325:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if ( (ICU.IER[MTU3_INT_ENABLE_REGISTER].BYTE & (_HAL_BIT1_MASK | _HAL_BIT2_MASK | _HAL_BIT3_MAS
 5141                             		.loc 1 4325 0
 5142 017e CE 77 10 02             		mov.B	528[r7], r7
 5143 0182 75 27 1E                		and	#30, r7
 5144 0185 21 0B                   		bne	.L592
4327:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU3_BASE_INT_VECTOR].BYTE = 0x00;
 5145                             		.loc 1 4327 0
 5146 0187 FB EE 00 70 08          		mov.L	#0x87000, r14
 5147 018c CB E7 81 03             		mov.B	r7, 897[r14]
 5148                             		.balign 2,3,4
 5149                             	.L592:
4330:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if ( ((ICU.IER[MTU4_INT_ENABLE_REGISTER].BYTE & (_HAL_BIT6_MASK | _HAL_BIT7_MASK)) == 0) &&
 5150                             		.loc 1 4330 0
 5151 0190 FB EE 00 70 08          		mov.L	#0x87000, r14
 5152 0195 CE E7 10 02             		mov.B	528[r14], r7
 5153 0199 76 27 C0 00             		and	#0xc0, r7
 5154 019d 21 0D                   		bne	.L569
4331:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     		( (ICU.IER[MTU4_INT_ENABLE_REGISTER+1].BYTE & (_HAL_BIT0_MASK | _HAL_BIT1_MASK)) == 0) )
 5155                             		.loc 1 4331 0 discriminator 1
 5156 019f CE E7 11 02             		mov.B	529[r14], r7
 5157 01a3 64 37                   		and	#3, r7
4330:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if ( ((ICU.IER[MTU4_INT_ENABLE_REGISTER].BYTE & (_HAL_BIT6_MASK | _HAL_BIT7_MASK)) == 0) &&
 5158                             		.loc 1 4330 0 discriminator 1
 5159 01a5 1D                      		bne	.L569
4333:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[MTU4_BASE_INT_VECTOR].BYTE = 0x00;
 5160                             		.loc 1 4333 0
 5161 01a6 CB E7 86 03             		mov.B	r7, 902[r14]
 5162                             		.balign 2,3,2
 5163                             	.L569:
4336:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_DisableCHI*/
 5164                             		.loc 1 4336 0
 5165 01aa 3F 77 01                		rtsd	#4, r7-r7
 5166                             	.LFE82:
 5168 01ad 03                      		.section	.text.TMR_SetThreshold1,"ax",@progbits
 5169                             		.global	_TMR_SetThreshold1
 5171                             	_TMR_SetThreshold1:
 5172                             	.LFB85:
4436:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 5173                             		.loc 1 4436 0
 5174                             	.LVL343:
4437:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     TMR_SetTimeOn(chId, value);
 5175                             		.loc 1 4437 0
 5176 0000 04 00 00 00             		bra	_TMR_SetTimeOn
 5177                             	.LVL344:
 5178                             	.LFE85:
 5180                             		.section	.text.TMR_SetModuloDfltValue,"ax",@progbits
 5181                             		.global	_TMR_SetModuloDfltValue
 5183                             	_TMR_SetModuloDfltValue:
 5184                             	.LFB86:
4510:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 5185                             		.loc 1 4510 0
 5186                             	.LVL345:
 5187 0000 CF 23                   		mov.B	r2, r3
4511:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     TMR_SetModulo(tmrId, 0xFFFF, clrSrcId);
 5188                             		.loc 1 4511 0
 5189 0002 FB 26 FF                		mov	#-1, r2
 5190                             	.LVL346:
 5191 0005 04 00 00 00             		bra	_TMR_SetModulo
 5192                             	.LVL347:
 5193                             	.LFE86:
 5195                             		.section	.text.TMR_GetModulo,"ax",@progbits
 5196                             		.global	_TMR_GetModulo
 5198                             	_TMR_GetModulo:
 5199                             	.LFB87:
4521:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 5200                             		.loc 1 4521 0
 5201                             	.LVL348:
 5202 0000 7E A7                   		push.l	r7
 5203                             	.LCFI17:
 5204 0002 CF 17                   		mov.B	r1, r7
 5205                             	.LVL349:
4523:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t clrValue = GetInternalHWClearSourceValue(tmdID);
 5206                             		.loc 1 4523 0
 5207 0004 05 00 00 00             		bsr	_GetInternalHWClearSourceValue
 5208                             	.LVL350:
4525:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch( tmdID )
 5209                             		.loc 1 4525 0
 5210 0008 5B 7E                   		movu.B	r7, r14
 5211 000a 61 4E                   		cmp	#4, r14
 5212 000c 25 05 38 FE 00          		bgtu	.L603
 5213 0011 FB 72 00 00 00 00       		mov.L	#.L609, r7
 5214                             	.LVL351:
 5215 0017 FE 6E 77                		mov.L	[r14,r7], r7
 5216 001a 5B 11                   		movu.B	r1, r1
 5217                             		
 5218 001c 7F 07                   	1:jmp	r7
 5219                             		.section	.rodata.TMR_GetModulo,"a",@progbits
 5220                             		.balign 4
 5221                             		.balign 4
 5222                             	.L609:
 5223 0000 00 00 00 1E             		.long .L604
 5224 0004 00 00 00 5C             		.long .L605
 5225 0008 00 00 00 82             		.long .L606
 5226 000c 00 00 00 A6             		.long .L607
 5227 0010 00 00 00 D9             		.long .L608
 5228                             		.section	.text.TMR_GetModulo
 5229                             	.L604:
4528:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(clrValue)
 5230                             		.loc 1 4528 0
 5231 001e 61 61                   		cmp	#6, r1
 5232 0020 25 05 38 EA 00          		bgtu	.L603
 5233 0025 FB 72 14 00 00 00       		mov.L	#.L616, r7
 5234 002b FE 61 77                		mov.L	[r1,r7], r7
 5235                             		
 5236 002e 7F 07                   	1:jmp	r7
 5237                             		.section	.rodata.TMR_GetModulo
 5238                             		.balign 4
 5239                             		.balign 4
 5240                             	.L616:
 5241 0014 00 00 01 16             		.long .L639
 5242 0018 00 00 00 30             		.long .L612
 5243 001c 00 00 00 3B             		.long .L613
 5244 0020 00 00 01 0C             		.long .L603
 5245 0024 00 00 01 0C             		.long .L603
 5246 0028 00 00 00 46             		.long .L614
 5247 002c 00 00 00 51             		.long .L615
 5248                             		.section	.text.TMR_GetModulo
 5249                             	.L612:
4531:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU0_TGRA;
 5250                             		.loc 1 4531 0
 5251 0030 FB 7E 90 86 08          		mov.L	#0x88690, r7
 5252 0035 DD 71 3C                		mov.W	120[r7], r1
 5253                             	.LVL352:
4532:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 5254                             		.loc 1 4532 0
 5255 0038 38 E2 00                		bra	.L611
 5256                             	.LVL353:
 5257                             	.L613:
4534:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU0_TGRB;
 5258                             		.loc 1 4534 0
 5259 003b FB 7E 90 86 08          		mov.L	#0x88690, r7
 5260 0040 DD 71 3D                		mov.W	122[r7], r1
 5261                             	.LVL354:
4535:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 5262                             		.loc 1 4535 0
 5263 0043 38 D7 00                		bra	.L611
 5264                             	.LVL355:
 5265                             	.L614:
4537:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU0_TGRC;
 5266                             		.loc 1 4537 0
 5267 0046 FB 7E 90 86 08          		mov.L	#0x88690, r7
 5268 004b DD 71 3E                		mov.W	124[r7], r1
 5269                             	.LVL356:
4538:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 5270                             		.loc 1 4538 0
 5271 004e 38 CC 00                		bra	.L611
 5272                             	.LVL357:
 5273                             	.L615:
4540:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU0_TGRD;
 5274                             		.loc 1 4540 0
 5275 0051 FB 7E 90 86 08          		mov.L	#0x88690, r7
 5276 0056 DD 71 3F                		mov.W	126[r7], r1
 5277                             	.LVL358:
4541:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 5278                             		.loc 1 4541 0
 5279 0059 38 C1 00                		bra	.L611
 5280                             	.LVL359:
 5281                             	.L605:
4551:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(clrValue)
 5282                             		.loc 1 4551 0
 5283 005c 61 11                   		cmp	#1, r1
 5284 005e 20 0E                   		beq	.L618
 5285 0060 61 01                   		cmp	#0, r1
 5286 0062 3A B4 00                		beq	.L639
 5287 0065 61 21                   		cmp	#2, r1
 5288 0067 3B A5 00                		bne	.L603
 5289 006a 2E 0D                   		bra	.L619
 5290                             	.L618:
4554:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU1_TGRA;
 5291                             		.loc 1 4554 0
 5292 006c FB 7E 90 86 08          		mov.L	#0x88690, r7
 5293 0071 DD 71 7C                		mov.W	248[r7], r1
 5294                             	.LVL360:
4555:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 5295                             		.loc 1 4555 0
 5296 0074 38 A6 00                		bra	.L611
 5297                             	.LVL361:
 5298                             	.L619:
4557:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU1_TGRB;
 5299                             		.loc 1 4557 0
 5300 0077 FB 7E 90 86 08          		mov.L	#0x88690, r7
 5301 007c DD 71 7D                		mov.W	250[r7], r1
 5302                             	.LVL362:
4558:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 5303                             		.loc 1 4558 0
 5304 007f 38 9B 00                		bra	.L611
 5305                             	.LVL363:
 5306                             	.L606:
4568:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(clrValue)
 5307                             		.loc 1 4568 0
 5308 0082 61 11                   		cmp	#1, r1
 5309 0084 20 0D                   		beq	.L621
 5310 0086 61 01                   		cmp	#0, r1
 5311 0088 3A 8E 00                		beq	.L639
 5312 008b 61 21                   		cmp	#2, r1
 5313 008d 21 7F                   		bne	.L603
 5314 008f 2E 0D                   		bra	.L622
 5315                             	.L621:
4571:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU2_TGRA;
 5316                             		.loc 1 4571 0
 5317 0091 FB 7E 92 86 08          		mov.L	#0x88692, r7
 5318 0096 DD 71 BB                		mov.W	374[r7], r1
 5319                             	.LVL364:
4572:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 5320                             		.loc 1 4572 0
 5321 0099 38 81 00                		bra	.L611
 5322                             	.LVL365:
 5323                             	.L622:
4574:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU2_TGRB;
 5324                             		.loc 1 4574 0
 5325 009c FB 7E 92 86 08          		mov.L	#0x88692, r7
 5326 00a1 DD 71 BC                		mov.W	376[r7], r1
 5327                             	.LVL366:
4575:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 5328                             		.loc 1 4575 0
 5329 00a4 2E 76                   		bra	.L611
 5330                             	.LVL367:
 5331                             	.L607:
4585:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(clrValue)
 5332                             		.loc 1 4585 0
 5333 00a6 61 61                   		cmp	#6, r1
 5334 00a8 24 64                   		bgtu	.L603
 5335 00aa FB 72 30 00 00 00       		mov.L	#.L628, r7
 5336 00b0 FE 61 77                		mov.L	[r1,r7], r7
 5337                             		
 5338 00b3 7F 07                   	1:jmp	r7
 5339                             		.section	.rodata.TMR_GetModulo
 5340                             		.balign 4
 5341                             		.balign 4
 5342                             	.L628:
 5343 0030 00 00 01 16             		.long .L639
 5344 0034 00 00 00 B5             		.long .L624
 5345 0038 00 00 00 BE             		.long .L625
 5346 003c 00 00 01 0C             		.long .L603
 5347 0040 00 00 01 0C             		.long .L603
 5348 0044 00 00 00 C7             		.long .L626
 5349 0048 00 00 00 D0             		.long .L627
 5350                             		.section	.text.TMR_GetModulo
 5351                             	.L624:
4588:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU3_TGRA;
 5352                             		.loc 1 4588 0
 5353 00b5 FB 7E 00 86 08          		mov.L	#0x88600, r7
 5354 00ba 9B 71                   		mov.W	24[r7], r1
 5355                             	.LVL368:
4589:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 5356                             		.loc 1 4589 0
 5357 00bc 2E 5E                   		bra	.L611
 5358                             	.LVL369:
 5359                             	.L625:
4591:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU3_TGRB;
 5360                             		.loc 1 4591 0
 5361 00be FB 7E 00 86 08          		mov.L	#0x88600, r7
 5362 00c3 9B 79                   		mov.W	26[r7], r1
 5363                             	.LVL370:
4592:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 5364                             		.loc 1 4592 0
 5365 00c5 2E 55                   		bra	.L611
 5366                             	.LVL371:
 5367                             	.L626:
4594:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU3_TGRC;
 5368                             		.loc 1 4594 0
 5369 00c7 FB 7E 00 86 08          		mov.L	#0x88600, r7
 5370 00cc 9C F1                   		mov.W	36[r7], r1
 5371                             	.LVL372:
4595:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 5372                             		.loc 1 4595 0
 5373 00ce 2E 4C                   		bra	.L611
 5374                             	.LVL373:
 5375                             	.L627:
4597:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU3_TGRD;
 5376                             		.loc 1 4597 0
 5377 00d0 FB 7E 00 86 08          		mov.L	#0x88600, r7
 5378 00d5 9C F9                   		mov.W	38[r7], r1
 5379                             	.LVL374:
4598:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 5380                             		.loc 1 4598 0
 5381 00d7 2E 43                   		bra	.L611
 5382                             	.LVL375:
 5383                             	.L608:
4608:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(clrValue)
 5384                             		.loc 1 4608 0
 5385 00d9 61 61                   		cmp	#6, r1
 5386 00db 24 31                   		bgtu	.L603
 5387 00dd FB 72 4C 00 00 00       		mov.L	#.L634, r7
 5388 00e3 FE 61 77                		mov.L	[r1,r7], r7
 5389                             		
 5390 00e6 7F 07                   	1:jmp	r7
 5391                             		.section	.rodata.TMR_GetModulo
 5392                             		.balign 4
 5393                             		.balign 4
 5394                             	.L634:
 5395 004c 00 00 01 16             		.long .L639
 5396 0050 00 00 00 E8             		.long .L630
 5397 0054 00 00 00 F1             		.long .L631
 5398 0058 00 00 01 0C             		.long .L603
 5399 005c 00 00 01 0C             		.long .L603
 5400 0060 00 00 00 FA             		.long .L632
 5401 0064 00 00 01 03             		.long .L633
 5402                             		.section	.text.TMR_GetModulo
 5403                             	.L630:
4611:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU4_TGRA;
 5404                             		.loc 1 4611 0
 5405 00e8 FB 7E 00 86 08          		mov.L	#0x88600, r7
 5406 00ed 9B F1                   		mov.W	28[r7], r1
 5407                             	.LVL376:
4612:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 5408                             		.loc 1 4612 0
 5409 00ef 2E 2B                   		bra	.L611
 5410                             	.LVL377:
 5411                             	.L631:
4614:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU4_TGRB;
 5412                             		.loc 1 4614 0
 5413 00f1 FB 7E 00 86 08          		mov.L	#0x88600, r7
 5414 00f6 9B F9                   		mov.W	30[r7], r1
 5415                             	.LVL378:
4615:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 5416                             		.loc 1 4615 0
 5417 00f8 2E 22                   		bra	.L611
 5418                             	.LVL379:
 5419                             	.L632:
4617:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU4_TGRC;
 5420                             		.loc 1 4617 0
 5421 00fa FB 7E 00 86 08          		mov.L	#0x88600, r7
 5422 00ff 9D 71                   		mov.W	40[r7], r1
 5423                             	.LVL380:
4618:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 5424                             		.loc 1 4618 0
 5425 0101 2E 19                   		bra	.L611
 5426                             	.LVL381:
 5427                             	.L633:
4620:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = MTU4_TGRD;
 5428                             		.loc 1 4620 0
 5429 0103 FB 7E 00 86 08          		mov.L	#0x88600, r7
 5430 0108 9D 79                   		mov.W	42[r7], r1
 5431                             	.LVL382:
4621:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 5432                             		.loc 1 4621 0
 5433 010a 2E 10                   		bra	.L611
 5434                             	.LVL383:
 5435                             	.L603:
4631:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 5436                             		.loc 1 4631 0
 5437 010c 75 41 30                		mov.L	#48, r1
 5438 010f 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 5439                             	.LVL384:
4522:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint16_t retValue = 0;
 5440                             		.loc 1 4522 0
 5441 0113 66 01                   		mov	#0, r1
4632:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 5442                             		.loc 1 4632 0
 5443 0115 0D                      		bra	.L611
 5444                             	.LVL385:
 5445                             	.L639:
4623:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retValue = 0xFFFF;
 5446                             		.loc 1 4623 0
 5447 0116 FB 16 FF                		mov	#-1, r1
 5448                             	.LVL386:
 5449 0119 03                      		.balign 2,3,1
 5450                             	.L611:
4636:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end Period_ValueType*/
 5451                             		.loc 1 4636 0
 5452 011a 5F 11                   		movu.W	r1, r1
 5453 011c 3F 77 01                		rtsd	#4, r7-r7
 5454                             	.LFE87:
 5456 011f 03                      		.section	.text.TMR_GetChannelEdgeMode,"ax",@progbits
 5457                             		.global	_TMR_GetChannelEdgeMode
 5459                             	_TMR_GetChannelEdgeMode:
 5460                             	.LFB88:
4645:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 5461                             		.loc 1 4645 0
 5462                             	.LVL387:
 5463 0000 6E 7A                   		pushm	r7-r10
 5464                             	.LCFI18:
 5465                             	.LVL388:
4710:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     p1 = ChModeRegAddr[chId];
 5466                             		.loc 1 4710 0
 5467 0002 5B 11                   		movu.B	r1, r1
 5468 0004 FB 72 00 00 00 00       		mov.L	#_ChModeRegAddr, r7
 5469 000a FE 61 77                		mov.L	[r1,r7], r7
 5470                             	.LVL389:
4711:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(p1 != 0)
 5471                             		.loc 1 4711 0
 5472 000d 61 07                   		cmp	#0, r7
 5473 000f 20 1E                   		beq	.L644
4713:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( GET_BIT(ChModeRegAddr_Nibble, chId))
 5474                             		.loc 1 4713 0
 5475 0011 FB E2 0A 11 A5 00       		mov.L	#0xa5110a, r14
 5476 0017 FD 60 1E                		shlr	r1, r14
4715:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             mode = GET_H_NIBBLE(*p1);
 5477                             		.loc 1 4715 0
 5478 001a CC 77                   		mov.B	[r7], r7
 5479                             	.LVL390:
4713:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( GET_BIT(ChModeRegAddr_Nibble, chId))
 5480                             		.loc 1 4713 0
 5481 001c FD 74 CE 01             		tst	#1, r14
 5482 0020 12                      		beq	.L645
4715:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             mode = GET_H_NIBBLE(*p1);
 5483                             		.loc 1 4715 0
 5484 0021 5B 77                   		movu.B	r7, r7
 5485 0023 FD 84 7A                		shlr	#4, r7, r10
 5486 0026 EF A7                   		mov.L	r10, r7
 5487                             	.LVL391:
 5488 0028 2E 0C                   		bra	.L646
 5489                             	.LVL392:
 5490                             	.L645:
4719:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             mode = GET_L_NIBBLE(*p1);
 5491                             		.loc 1 4719 0
 5492 002a 64 F7                   		and #15, r7
 5493                             	.LVL393:
 5494 002c 08                      		bra	.L646
 5495                             	.LVL394:
 5496                             	.L644:
4724:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 5497                             		.loc 1 4724 0
 5498 002d 75 41 30                		mov.L	#48, r1
 5499                             	.LVL395:
 5500 0030 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 5501                             	.LVL396:
 5502                             		.balign 2,3,1
 5503                             	.L646:
 5504 0034 60 87                   		sub	#8, r7
 5505                             	.LVL397:
 5506 0036 5B 77                   		movu.B	r7, r7
 5507 0038 61 27                   		cmp	#2, r7
 5508 003a 24 0C                   		bgtu	.L648
 5509 003c FB E2 00 00 00 00       		mov.L	#_CSWTCH.110, r14
 5510 0042 FE 47 E1                		mov.B	[r7,r14], r1
 5511 0045 0B                      		bra	.L647
 5512                             	.L648:
4647:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t mode = 0;
 5513                             		.loc 1 4647 0
 5514 0046 66 01                   		mov	#0, r1
 5515                             		.balign 2,3,1
 5516                             	.L647:
 5517                             	.LVL398:
4741:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMT_GetChannelEdgeMode*/
 5518                             		.loc 1 4741 0
 5519 0048 5B 11                   		movu.B	r1, r1
 5520 004a 3F 7A 04                		rtsd	#16, r7-r10
 5521                             	.LFE88:
 5523 004d 03                      		.section	.text.TMR_SetCounterDfltValue,"ax",@progbits
 5524                             		.global	_TMR_SetCounterDfltValue
 5526                             	_TMR_SetCounterDfltValue:
 5527                             	.LFB89:
4750:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 5528                             		.loc 1 4750 0
 5529                             	.LVL399:
4751:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch( tmrID )
 5530                             		.loc 1 4751 0
 5531 0000 5B 11                   		movu.B	r1, r1
 5532 0002 61 41                   		cmp	#4, r1
 5533 0004 24 3F                   		bgtu	.L651
 5534 0006 FB E2 00 00 00 00       		mov.L	#.L657, r14
 5535 000c FE 61 EE                		mov.L	[r1,r14], r14
 5536                             		
 5537 000f 7F 0E                   	1:jmp	r14
 5538                             		.section	.rodata.TMR_SetCounterDfltValue,"a",@progbits
 5539                             		.balign 4
 5540                             		.balign 4
 5541                             	.L657:
 5542 0000 00 00 00 11             		.long .L652
 5543 0004 00 00 00 1B             		.long .L653
 5544 0008 00 00 00 25             		.long .L654
 5545 000c 00 00 00 2F             		.long .L655
 5546 0010 00 00 00 39             		.long .L656
 5547                             		.section	.text.TMR_SetCounterDfltValue
 5548                             	.L652:
4754:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TCNT = 0x00;
 5549                             		.loc 1 4754 0
 5550 0011 FB EE 90 86 08          		mov.L	#0x88690, r14
 5551 0016 F9 E5 3B 00             		mov.W	#0, 118[r14]
4755:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 5552                             		.loc 1 4755 0
 5553 001a 02                      		rts
 5554                             	.L653:
4757:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1.TCNT = 0x00;
 5555                             		.loc 1 4757 0
 5556 001b FB EE 90 86 08          		mov.L	#0x88690, r14
 5557 0020 F9 E5 7B 00             		mov.W	#0, 246[r14]
4758:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 5558                             		.loc 1 4758 0
 5559 0024 02                      		rts
 5560                             	.L654:
4760:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2.TCNT = 0x00;
 5561                             		.loc 1 4760 0
 5562 0025 FB EE 92 86 08          		mov.L	#0x88692, r14
 5563 002a F9 E5 BA 00             		mov.W	#0, 372[r14]
4761:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 5564                             		.loc 1 4761 0
 5565 002e 02                      		rts
 5566                             	.L655:
4763:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TCNT = 0x00;
 5567                             		.loc 1 4763 0
 5568 002f FB EE 00 86 08          		mov.L	#0x88600, r14
 5569 0034 F9 E5 08 00             		mov.W	#0, 16[r14]
4764:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 5570                             		.loc 1 4764 0
 5571 0038 02                      		rts
 5572                             	.L656:
4766:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TCNT = 0x00;
 5573                             		.loc 1 4766 0
 5574 0039 FB EE 00 86 08          		mov.L	#0x88600, r14
 5575 003e F9 E5 09 00             		mov.W	#0, 18[r14]
4767:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 5576                             		.loc 1 4767 0
 5577 0042 02                      		rts
 5578                             	.L651:
4769:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 5579                             		.loc 1 4769 0
 5580 0043 75 41 30                		mov.L	#48, r1
 5581                             	.LVL400:
 5582 0046 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 5583                             	.LVL401:
 5584                             	.LFE89:
 5586                             		.section	.text.TMR_GetCounter,"ax",@progbits
 5587                             		.global	_TMR_GetCounter
 5589                             	_TMR_GetCounter:
 5590                             	.LFB90:
4782:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 5591                             		.loc 1 4782 0
 5592                             	.LVL402:
4785:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch( tmrId )
 5593                             		.loc 1 4785 0
 5594 0000 5B 11                   		movu.B	r1, r1
 5595 0002 61 41                   		cmp	#4, r1
 5596 0004 24 3F                   		bgtu	.L660
 5597 0006 FB E2 00 00 00 00       		mov.L	#.L666, r14
 5598 000c FE 61 EE                		mov.L	[r1,r14], r14
 5599                             		
 5600 000f 7F 0E                   	1:jmp	r14
 5601                             		.section	.rodata.TMR_GetCounter,"a",@progbits
 5602                             		.balign 4
 5603                             		.balign 4
 5604                             	.L666:
 5605 0000 00 00 00 11             		.long .L661
 5606 0004 00 00 00 1B             		.long .L662
 5607 0008 00 00 00 25             		.long .L663
 5608 000c 00 00 00 2F             		.long .L664
 5609 0010 00 00 00 39             		.long .L665
 5610                             		.section	.text.TMR_GetCounter
 5611                             	.L661:
4788:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return_val = MTU0.TCNT;
 5612                             		.loc 1 4788 0
 5613 0011 FB EE 90 86 08          		mov.L	#0x88690, r14
 5614 0016 DD E1 3B                		mov.W	118[r14], r1
 5615                             	.LVL403:
4789:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 5616                             		.loc 1 4789 0
 5617 0019 2E 33                   		bra	.L667
 5618                             	.LVL404:
 5619                             	.L662:
4791:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return_val = MTU1.TCNT;
 5620                             		.loc 1 4791 0
 5621 001b FB EE 90 86 08          		mov.L	#0x88690, r14
 5622 0020 DD E1 7B                		mov.W	246[r14], r1
 5623                             	.LVL405:
4792:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 5624                             		.loc 1 4792 0
 5625 0023 2E 29                   		bra	.L667
 5626                             	.LVL406:
 5627                             	.L663:
4794:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return_val = MTU2.TCNT;
 5628                             		.loc 1 4794 0
 5629 0025 FB EE 92 86 08          		mov.L	#0x88692, r14
 5630 002a DD E1 BA                		mov.W	372[r14], r1
 5631                             	.LVL407:
4795:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 5632                             		.loc 1 4795 0
 5633 002d 2E 1F                   		bra	.L667
 5634                             	.LVL408:
 5635                             	.L664:
4797:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return_val = MTU3.TCNT;
 5636                             		.loc 1 4797 0
 5637 002f FB EE 00 86 08          		mov.L	#0x88600, r14
 5638 0034 DD E1 08                		mov.W	16[r14], r1
 5639                             	.LVL409:
4798:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 5640                             		.loc 1 4798 0
 5641 0037 2E 15                   		bra	.L667
 5642                             	.LVL410:
 5643                             	.L665:
4800:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return_val = MTU4.TCNT;
 5644                             		.loc 1 4800 0
 5645 0039 FB EE 00 86 08          		mov.L	#0x88600, r14
 5646 003e DD E1 09                		mov.W	18[r14], r1
 5647                             	.LVL411:
4801:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 5648                             		.loc 1 4801 0
 5649 0041 2E 0B                   		bra	.L667
 5650                             	.LVL412:
 5651                             	.L660:
4803:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 5652                             		.loc 1 4803 0
 5653 0043 75 41 30                		mov.L	#48, r1
 5654 0046 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 5655                             	.LVL413:
4783:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     IO_HwTimerType return_val = 0;
 5656                             		.loc 1 4783 0
 5657 004a 66 01                   		mov	#0, r1
 5658                             	.LVL414:
 5659                             		.balign 2,3,1
 5660                             	.L667:
4807:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end TMR_GetCounter*/
 5661                             		.loc 1 4807 0
 5662 004c 5F 11                   		movu.W	r1, r1
 5663 004e 02                      		rts
 5664                             	.LFE90:
 5666 004f 03                      		.section	.text.TMR_SetCounter,"ax",@progbits
 5667                             		.global	_TMR_SetCounter
 5669                             	_TMR_SetCounter:
 5670                             	.LFB91:
4816:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 5671                             		.loc 1 4816 0
 5672                             	.LVL415:
4817:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(tmrId)
 5673                             		.loc 1 4817 0
 5674 0000 5B 11                   		movu.B	r1, r1
 5675 0002 61 41                   		cmp	#4, r1
 5676 0004 24 3A                   		bgtu	.L669
 5677 0006 FB E2 00 00 00 00       		mov.L	#.L675, r14
 5678 000c FE 61 EE                		mov.L	[r1,r14], r14
 5679                             		
 5680 000f 7F 0E                   	1:jmp	r14
 5681                             		.section	.rodata.TMR_SetCounter,"a",@progbits
 5682                             		.balign 4
 5683                             		.balign 4
 5684                             	.L675:
 5685 0000 00 00 00 11             		.long .L670
 5686 0004 00 00 00 1A             		.long .L671
 5687 0008 00 00 00 23             		.long .L672
 5688 000c 00 00 00 2C             		.long .L673
 5689 0010 00 00 00 35             		.long .L674
 5690                             		.section	.text.TMR_SetCounter
 5691                             	.L670:
4820:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU0.TCNT = value;
 5692                             		.loc 1 4820 0
 5693 0011 FB EE 90 86 08          		mov.L	#0x88690, r14
 5694 0016 D7 E2 3B                		mov.W	r2, 118[r14]
4821:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 5695                             		.loc 1 4821 0
 5696 0019 02                      		rts
 5697                             	.L671:
4823:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU1.TCNT = value;
 5698                             		.loc 1 4823 0
 5699 001a FB EE 90 86 08          		mov.L	#0x88690, r14
 5700 001f D7 E2 7B                		mov.W	r2, 246[r14]
4824:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 5701                             		.loc 1 4824 0
 5702 0022 02                      		rts
 5703                             	.L672:
4826:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU2.TCNT = value;
 5704                             		.loc 1 4826 0
 5705 0023 FB EE 92 86 08          		mov.L	#0x88692, r14
 5706 0028 D7 E2 BA                		mov.W	r2, 372[r14]
4827:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 5707                             		.loc 1 4827 0
 5708 002b 02                      		rts
 5709                             	.L673:
4829:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU3.TCNT = value;
 5710                             		.loc 1 4829 0
 5711 002c FB EE 00 86 08          		mov.L	#0x88600, r14
 5712 0031 D7 E2 08                		mov.W	r2, 16[r14]
4830:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 5713                             		.loc 1 4830 0
 5714 0034 02                      		rts
 5715                             	.L674:
4832:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         MTU4.TCNT = value;
 5716                             		.loc 1 4832 0
 5717 0035 FB EE 00 86 08          		mov.L	#0x88600, r14
 5718 003a D7 E2 09                		mov.W	r2, 18[r14]
4833:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 5719                             		.loc 1 4833 0
 5720 003d 02                      		rts
 5721                             	.L669:
4835:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 5722                             		.loc 1 4835 0
 5723 003e 75 41 30                		mov.L	#48, r1
 5724                             	.LVL416:
 5725 0041 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 5726                             	.LVL417:
 5727                             	.LFE91:
 5729                             		.section	.text.OutputCompareModeUnsupported,"ax",@progbits
 5730                             		.global	_OutputCompareModeUnsupported
 5732                             	_OutputCompareModeUnsupported:
 5733                             	.LFB92:
4847:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 5734                             		.loc 1 4847 0
 5735                             	.LVL418:
4848:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( mode == TMR_CH_OC_PIN_HIGH ||
 5736                             		.loc 1 4848 0
 5737 0000 71 1E F9                		add	#-7, r1, r14
 5738 0003 5B EE                   		movu.B	r14, r14
 5739 0005 61 1E                   		cmp	#1, r14
 5740 0007 25 0D                   		bleu	.L680
4849:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             mode == TMR_CH_OC_PIN_LOW  ||
 5741                             		.loc 1 4849 0
 5742 0009 5B 11                   		movu.B	r1, r1
 5743 000b 61 51                   		cmp	#5, r1
 5744 000d 17                      		beq	.L680
4852:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return 0;
 5745                             		.loc 1 4852 0
 5746 000e 61 41                   		cmp	#4, r1
 5747 0010 FC DB 11                		scne.L	r1
 5748                             	.LVL419:
 5749 0013 02                      		rts
 5750                             	.L680:
 5751 0014 66 01                   		mov.L	#0, r1
4855:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* OutputCompareModeUnsupported*/
 5752                             		.loc 1 4855 0
 5753 0016 02                      		rts
 5754                             	.LFE92:
 5756                             		.section	.text.TMR_SetClockSource,"ax",@progbits
 5757                             		.global	_TMR_SetClockSource
 5759                             	_TMR_SetClockSource:
 5760                             	.LFB93:
4863:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 5761                             		.loc 1 4863 0
 5762                             	.LVL420:
4864:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( tmrID >= HAL_NUM_HW_CNTR )
 5763                             		.loc 1 4864 0
 5764 0000 5B 11                   		movu.B	r1, r1
 5765 0002 61 41                   		cmp	#4, r1
 5766 0004 25 09                   		bleu	.L682
4866:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 5767                             		.loc 1 4866 0
 5768 0006 75 41 30                		mov.L	#48, r1
 5769                             	.LVL421:
 5770 0009 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 5771                             	.LVL422:
 5772                             	.L682:
 5773 000d FB EE 0A 86 08          		mov.L	#0x8860a, r14
 5774 0012 66 14                   		mov.L	#1, r4
4872:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU.TSTR.BYTE |= (1 << (tmrID+3));
 5775                             		.loc 1 4872 0
 5776 0014 CD E3 76                		mov.B	118[r14], r3
4870:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( tmrID > 2)
 5777                             		.loc 1 4870 0
 5778 0017 61 21                   		cmp	#2, r1
 5779 0019 25 05                   		bleu	.L683
4872:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU.TSTR.BYTE |= (1 << (tmrID+3));
 5780                             		.loc 1 4872 0
 5781 001b 62 31                   		add	#3, r1
 5782 001d 03                      		.balign 2,3,2
 5783                             	.L683:
4876:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             MTU.TSTR.BYTE |= (1 << tmrID);
 5784                             		.loc 1 4876 0
 5785 001e FD 62 14                		shll	r1, r4
 5786 0021 57 34                   		or	r3, r4
 5787 0023 C7 E4 76                		mov.B	r4, 118[r14]
 5788 0026 02                      		rts
 5789                             	.LFE93:
 5791 0027 03                      		.section	.text.TMR_StopClockSourceMulti,"ax",@progbits
 5792                             		.global	_TMR_StopClockSourceMulti
 5794                             	_TMR_StopClockSourceMulti:
 5795                             	.LFB95:
4916:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 5796                             		.loc 1 4916 0
 5797                             	.LVL423:
 5798 0000 6E 7B                   		pushm	r7-r11
 5799                             	.LCFI19:
 5800 0002 EF 1B                   		mov.L	r1, r11
 5801                             	.LVL424:
4919:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	bmp = TMR_GetMultiBmp(uBmp);
 5802                             		.loc 1 4919 0
 5803 0004 05 00 00 00             		bsr	_TMR_GetMultiBmp
 5804                             	.LVL425:
4921:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	MTU.TSTR.BYTE &= ~bmp;
 5805                             		.loc 1 4921 0
 5806 0008 FB 7E 0A 86 08          		mov.L	#0x8860a, r7
 5807 000d CD 7A 76                		mov.B	118[r7], r10
 5808 0010 7E 01                   		not	r1
 5809                             	.LVL426:
 5810 0012 53 1A                   		and	r1, r10
 5811 0014 C7 7A 76                		mov.B	r10, 118[r7]
 5812                             	.LVL427:
4923:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	for(i=0, msk=1; i<HAL_NUM_HW_CNTR; i++, msk<<=1)
 5813                             		.loc 1 4923 0
 5814 0017 66 1A                   		mov.L	#1, r10
 5815 0019 66 07                   		mov.L	#0, r7
 5816                             	.LVL428:
 5817 001b 03                      		.balign 2,3,2
 5818                             	.L687:
4925:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 		if( uBmp & msk)
 5819                             		.loc 1 4925 0
 5820 001c FC 33 BA                		tst	r11, r10
 5821 001f 11                      		beq	.L686
4927:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			TMR_SetCounter(i, 0);
 5822                             		.loc 1 4927 0
 5823 0020 CF 71                   		mov.B	r7, r1
 5824 0022 66 02                   		mov	#0, r2
 5825 0024 05 00 00 00             		bsr	_TMR_SetCounter
 5826                             	.LVL429:
 5827                             		.balign 2,3,1
 5828                             	.L686:
4923:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	for(i=0, msk=1; i<HAL_NUM_HW_CNTR; i++, msk<<=1)
 5829                             		.loc 1 4923 0
 5830 0028 62 17                   		add	#1, r7
 5831                             	.LVL430:
 5832 002a 4B AA                   		add	r10, r10
 5833                             	.LVL431:
 5834 002c 61 57                   		cmp	#5, r7
 5835 002e 21 EE                   		bne	.L687
4931:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* TMR_SetClockSource*/
 5836                             		.loc 1 4931 0
 5837 0030 3F 7B 05                		rtsd	#20, r7-r11
 5838                             	.LFE95:
 5840 0033 03                      		.section	.text.TMR_SetClockSourceMulti,"ax",@progbits
 5841                             		.global	_TMR_SetClockSourceMulti
 5843                             	_TMR_SetClockSourceMulti:
 5844                             	.LFB96:
4939:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 5845                             		.loc 1 4939 0
 5846                             	.LVL432:
4941:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	bmp = TMR_GetMultiBmp(uBmp);
 5847                             		.loc 1 4941 0
 5848 0000 05 00 00 00             		bsr	_TMR_GetMultiBmp
 5849                             	.LVL433:
4943:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	MTU.TSTR.BYTE |= bmp;
 5850                             		.loc 1 4943 0
 5851 0004 FB EE 0A 86 08          		mov.L	#0x8860a, r14
 5852 0009 06 15 E1 76             		or	118[r14].B, r1
 5853                             	.LVL434:
 5854 000d C7 E1 76                		mov.B	r1, 118[r14]
 5855 0010 02                      		rts
 5856                             	.LFE96:
 5858                             		.section	.text.TMR_SetChannelOutputMode,"ax",@progbits
 5859                             		.global	_TMR_SetChannelOutputMode
 5861                             	_TMR_SetChannelOutputMode:
 5862                             	.LFB97:
4953:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 5863                             		.loc 1 4953 0
 5864                             	.LVL435:
 5865 0000 6E 7A                   		pushm	r7-r10
 5866                             	.LCFI20:
 5867 0002 CF 1A                   		mov.B	r1, r10
 5868                             	.LVL436:
4961:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch( mode )
 5869                             		.loc 1 4961 0
 5870 0004 5B 22                   		movu.B	r2, r2
 5871 0006 61 52                   		cmp	#5, r2
 5872 0008 20 18                   		beq	.L697
 5873 000a 24 0A                   		bgtu	.L700
 5874 000c 61 42                   		cmp	#4, r2
 5875 000e 3B 65 01                		bne	.L723
 5876 0011 38 95 01                		bra	.L696
 5877                             	.L700:
 5878 0014 61 72                   		cmp	#7, r2
 5879 0016 3A 93 01                		beq	.L724
 5880 0019 61 82                   		cmp	#8, r2
 5881 001b 3B 58 01                		bne	.L723
 5882 001e 2E 0C                   		bra	.L699
 5883                             	.L697:
4968:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( inversion )
 5884                             		.loc 1 4968 0
 5885 0020 61 03                   		cmp	#0, r3
 5886 0022 3A 8A 01                		beq	.L725
4970:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             mode = MTUO_TIOR_MODE_OUTPUT_0T;
 5887                             		.loc 1 4970 0
 5888 0025 66 37                   		mov	#3, r7
 5889 0027 38 87 01                		bra	.L698
 5890                             	.L699:
 5891                             	.LVL437:
4981:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = MTUO_TIOR_MODE_OUTPUT_10;
 5892                             		.loc 1 4981 0
 5893 002a 66 57                   		mov	#5, r7
4982:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 5894                             		.loc 1 4982 0
 5895 002c 38 82 01                		bra	.L698
 5896                             	.LVL438:
 5897                             	.L701:
5044:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 4;
 5898                             		.loc 1 5044 0
 5899 002f 66 45                   		mov	#4, r5
5043:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x02;
 5900                             		.loc 1 5043 0
 5901 0031 66 23                   		mov	#2, r3
 5902                             	.LVL439:
5045:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.PE4PFS.BYTE;
 5903                             		.loc 1 5045 0
 5904 0033 FB 2E B4 C1 08          		mov.L	#0x8c1b4, r2
5042:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = &PORTE.PMR.BYTE;
 5905                             		.loc 1 5042 0
 5906 0038 FB 4E 6E C0 08          		mov.L	#0x8c06e, r4
5041:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = &PORTE.PDR.BYTE;
 5907                             		.loc 1 5041 0
 5908 003d FB EE 0E C0 08          		mov.L	#0x8c00e, r14
5046:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
 5909                             		.loc 1 5046 0
 5910 0042 38 E8 00                		bra	.L715
 5911                             	.LVL440:
 5912                             	.L703:
5051:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 5;
 5913                             		.loc 1 5051 0
 5914 0045 66 55                   		mov	#5, r5
5050:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x02;
 5915                             		.loc 1 5050 0
 5916 0047 66 23                   		mov	#2, r3
 5917                             	.LVL441:
5052:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.PB5PFS.BYTE;
 5918                             		.loc 1 5052 0
 5919 0049 FB 2E 9D C1 08          		mov.L	#0x8c19d, r2
 5920 004e 38 94 01                		bra	.L732
 5921                             	.LVL442:
 5922                             	.L704:
5066:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 6;
 5923                             		.loc 1 5066 0
 5924 0051 66 65                   		mov	#6, r5
5065:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
 5925                             		.loc 1 5065 0
 5926 0053 66 13                   		mov	#1, r3
 5927                             	.LVL443:
5067:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.P26PFS.BYTE;
 5928                             		.loc 1 5067 0
 5929 0055 FB 2E 56 C1 08          		mov.L	#0x8c156, r2
 5930 005a 2E 0C                   		bra	.L733
 5931                             	.LVL444:
 5932                             	.L705:
5081:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 7;
 5933                             		.loc 1 5081 0
 5934 005c 66 75                   		mov	#7, r5
5080:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
 5935                             		.loc 1 5080 0
 5936 005e 66 13                   		mov	#1, r3
 5937                             	.LVL445:
5082:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.P27PFS.BYTE;
 5938                             		.loc 1 5082 0
 5939 0060 FB 2E 57 C1 08          		mov.L	#0x8c157, r2
 5940                             	.LVL446:
 5941 0065 03                      		.balign 2,3,4
 5942                             	.L733:
5079:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = &PORT2.PMR.BYTE;
 5943                             		.loc 1 5079 0
 5944 0066 FB 4E 62 C0 08          		mov.L	#0x8c062, r4
5078:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = &PORT2.PDR.BYTE;
 5945                             		.loc 1 5078 0
 5946 006b FB EE 02 C0 08          		mov.L	#0x8c002, r14
5084:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
 5947                             		.loc 1 5084 0
 5948 0070 38 BA 00                		bra	.L715
 5949                             	.LVL447:
 5950                             	.L706:
5103:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 4;
 5951                             		.loc 1 5103 0
 5952 0073 66 45                   		mov	#4, r5
5102:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
 5953                             		.loc 1 5102 0
 5954 0075 66 13                   		mov	#1, r3
 5955                             	.LVL448:
5104:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.P14PFS.BYTE;
 5956                             		.loc 1 5104 0
 5957 0077 FB 2E 4C C1 08          		mov.L	#0x8c14c, r2
5101:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = &PORT1.PMR.BYTE;
 5958                             		.loc 1 5101 0
 5959 007c FB 4E 61 C0 08          		mov.L	#0x8c061, r4
 5960 0081 38 A3 00                		bra	.L735
 5961                             	.LVL449:
 5962                             	.L707:
5124:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 5;
 5963                             		.loc 1 5124 0
 5964 0084 66 55                   		mov	#5, r5
5123:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
 5965                             		.loc 1 5123 0
 5966 0086 66 13                   		mov	#1, r3
 5967                             	.LVL450:
5125:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.PC5PFS.BYTE;
 5968                             		.loc 1 5125 0
 5969 0088 FB 2E A5 C1 08          		mov.L	#0x8c1a5, r2
 5970 008d 2E 45                   		bra	.L737
 5971                             	.LVL451:
 5972                             	.L708:
5139:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 6;
 5973                             		.loc 1 5139 0
 5974 008f 66 65                   		mov	#6, r5
5138:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
 5975                             		.loc 1 5138 0
 5976 0091 66 13                   		mov	#1, r3
 5977                             	.LVL452:
5140:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.PC6PFS.BYTE;
 5978                             		.loc 1 5140 0
 5979 0093 FB 2E A6 C1 08          		mov.L	#0x8c1a6, r2
 5980 0098 2E 3A                   		bra	.L737
 5981                             	.LVL453:
 5982                             	.L709:
5163:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			MTU.TOER.BIT.OE3D = 1;
 5983                             		.loc 1 5163 0
 5984 009a FB EE 0A 86 08          		mov.L	#0x8860a, r14
 5985 009f CC E4                   		mov.B	[r14], r4
 5986 00a1 78 34                   		bset	#3, r4
 5987 00a3 C3 E4                   		mov.B	r4, [r14]
5160:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 6;
 5988                             		.loc 1 5160 0
 5989 00a5 66 65                   		mov	#6, r5
5159:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
 5990                             		.loc 1 5159 0
 5991 00a7 66 13                   		mov	#1, r3
 5992                             	.LVL454:
5161:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.PB6PFS.BYTE;
 5993                             		.loc 1 5161 0
 5994 00a9 FB 2E 9E C1 08          		mov.L	#0x8c19e, r2
 5995 00ae 38 34 01                		bra	.L732
 5996                             	.LVL455:
 5997                             	.L710:
5183:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 0;
 5998                             		.loc 1 5183 0
 5999 00b1 66 05                   		mov	#0, r5
5182:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
 6000                             		.loc 1 5182 0
 6001 00b3 66 13                   		mov	#1, r3
 6002                             	.LVL456:
5184:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.PA0PFS.BYTE;
 6003                             		.loc 1 5184 0
 6004 00b5 FB 2E 90 C1 08          		mov.L	#0x8c190, r2
 6005 00ba 38 3E 01                		bra	.L736
 6006                             	.LVL457:
 6007                             	.L711:
5213:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			MTU.TOER.BIT.OE4B = 1;
 6008                             		.loc 1 5213 0
 6009 00bd FB EE 0A 86 08          		mov.L	#0x8860a, r14
 6010 00c2 CC E4                   		mov.B	[r14], r4
 6011 00c4 78 24                   		bset	#2, r4
 6012 00c6 C3 E4                   		mov.B	r4, [r14]
5210:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 2;
 6013                             		.loc 1 5210 0
 6014 00c8 66 25                   		mov	#2, r5
5209:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
 6015                             		.loc 1 5209 0
 6016 00ca 66 13                   		mov	#1, r3
 6017                             	.LVL458:
5211:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.PC2PFS.BYTE;
 6018                             		.loc 1 5211 0
 6019 00cc FB 2E A2 C1 08          		mov.L	#0x8c1a2, r2
 6020                             	.LVL459:
 6021 00d1 03                      		.balign 2,3,4
 6022                             	.L737:
5208:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = &PORTC.PMR.BYTE;
 6023                             		.loc 1 5208 0
 6024 00d2 FB 4E 6C C0 08          		mov.L	#0x8c06c, r4
5207:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = &PORTC.PDR.BYTE;
 6025                             		.loc 1 5207 0
 6026 00d7 FB EE 0C C0 08          		mov.L	#0x8c00c, r14
5214:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			break;
 6027                             		.loc 1 5214 0
 6028 00dc 2E 4E                   		bra	.L715
 6029                             	.LVL460:
 6030                             	.L712:
5235:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			MTU.TOER.BIT.OE4C = 1;
 6031                             		.loc 1 5235 0
 6032 00de FB EE 0A 86 08          		mov.L	#0x8860a, r14
 6033 00e3 CC E4                   		mov.B	[r14], r4
 6034 00e5 78 44                   		bset	#4, r4
 6035 00e7 C3 E4                   		mov.B	r4, [r14]
5232:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 1;
 6036                             		.loc 1 5232 0
 6037 00e9 66 15                   		mov	#1, r5
5231:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x02;
 6038                             		.loc 1 5231 0
 6039 00eb 66 23                   		mov	#2, r3
 6040                             	.LVL461:
5233:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.PB1PFS.BYTE;
 6041                             		.loc 1 5233 0
 6042 00ed FB 2E 99 C1 08          		mov.L	#0x8c199, r2
 6043 00f2 38 F0 00                		bra	.L732
 6044                             	.LVL462:
 6045                             	.L713:
5263:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			MTU.TOER.BIT.OE4D = 1;
 6046                             		.loc 1 5263 0
 6047 00f5 FB EE 0A 86 08          		mov.L	#0x8860a, r14
 6048 00fa CC E4                   		mov.B	[r14], r4
 6049 00fc 78 54                   		bset	#5, r4
 6050 00fe C3 E4                   		mov.B	r4, [r14]
5260:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 1;
 6051                             		.loc 1 5260 0
 6052 0100 66 15                   		mov	#1, r5
5259:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x02;
 6053                             		.loc 1 5259 0
 6054 0102 66 23                   		mov	#2, r3
 6055                             	.LVL463:
5261:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.P31PFS.BYTE;
 6056                             		.loc 1 5261 0
 6057 0104 FB 2E 59 C1 08          		mov.L	#0x8c159, r2
 6058 0109 38 C3 00                		bra	.L734
 6059                             	.LVL464:
 6060                             	.L714:
5266:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			HAL_ErrorHandler(0);
 6061                             		.loc 1 5266 0
 6062 010c 75 41 30                		mov.L	#48, r1
 6063                             	.LVL465:
 6064 010f 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 6065                             	.LVL466:
 6066 0113 2E 63                   		bra	.L695
 6067                             	.LVL467:
 6068                             	.L726:
5011:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = &PORT1.PMR.BYTE;
 6069                             		.loc 1 5011 0
 6070 0115 FB 4E 61 C0 08          		mov.L	#0x8c061, r4
5014:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.P15PFS.BYTE;
 6071                             		.loc 1 5014 0
 6072 011a FB 2E 4D C1 08          		mov.L	#0x8c14d, r2
5012:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01; /* P15 is select as MTI0C0B*/
 6073                             		.loc 1 5012 0
 6074 011f 66 13                   		mov	#1, r3
 6075                             	.LVL468:
5013:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 5;
 6076                             		.loc 1 5013 0
 6077 0121 66 55                   		mov	#5, r5
 6078                             	.LVL469:
 6079 0123 03                      		.balign 2,3,4
 6080                             	.L735:
5010:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = &PORT1.PDR.BYTE;
 6081                             		.loc 1 5010 0
 6082 0124 FB EE 01 C0 08          		mov.L	#0x8c001, r14
 6083 0129 03                      		.balign 2,3,1
 6084                             	.L715:
5272:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			if (mode == MTUO_TIOR_MODE_PIN_IO)
 6085                             		.loc 1 5272 0
 6086 012a 5B 7F                   		movu.B	r7, r15
 6087 012c 5B 55                   		movu.B	r5, r5
 6088 012e 66 11                   		mov.L	#1, r1
 6089                             	.LVL470:
 6090 0130 61 8F                   		cmp	#8, r15
 6091 0132 21 1A                   		bne	.L716
 6092                             	.LVL471:
5275:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 				CLEAR_BIT(*p1, bitNum);				/* as input*/
 6093                             		.loc 1 5275 0
 6094 0134 CC E7                   		mov.B	[r14], r7
 6095                             	.LVL472:
 6096 0136 FD 62 51                		shll	r5, r1
 6097 0139 EF 15                   		mov.L	r1, r5
 6098 013b 7E 05                   		not	r5
 6099 013d 53 57                   		and	r5, r7
 6100 013f C3 E7                   		mov.B	r7, [r14]
5276:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 				CLEAR_BIT(*p2, bitNum); 			/* Use pin as general I/O port */
 6101                             		.loc 1 5276 0
 6102 0141 06 10 45                		and	[r4].B, r5
 6103 0144 C3 45                   		mov.B	r5, [r4]
 6104                             	.LVL473:
5274:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 				value = 0;
 6105                             		.loc 1 5274 0
 6106 0146 66 03                   		mov	#0, r3
5277:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 				mode = MTUO_TIOR_MODE_OUTPUT_PROIBITED;
 6107                             		.loc 1 5277 0
 6108 0148 CF 37                   		mov.B	r3, r7
 6109 014a 2E 12                   		bra	.L717
 6110                             	.LVL474:
 6111                             	.L716:
5281:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 				SET_BIT(*p1, bitNum);				/* as output*/
 6112                             		.loc 1 5281 0
 6113 014c CC EF                   		mov.B	[r14], r15
 6114 014e FD 62 51                		shll	r5, r1
 6115 0151 EF 15                   		mov.L	r1, r5
 6116 0153 57 F1                   		or	r15, r1
 6117 0155 C3 E1                   		mov.B	r1, [r14]
5282:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 				SET_BIT(*p2, bitNum); 				/* Use pin as I/O port for peripheral functions*/
 6118                             		.loc 1 5282 0
 6119 0157 06 14 45                		or	[r4].B, r5
 6120 015a C3 45                   		mov.B	r5, [r4]
 6121                             	.LVL475:
 6122                             		.balign 2,3,4
 6123                             	.L717:
5284:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			DISABLE_PORT_REGISTER_WRITE_PROTECTION();
 6124                             		.loc 1 5284 0
 6125 015c FB EE 00 C1 08          		mov.L	#0x8c100, r14
 6126 0161 F9 E4 1F 00             		mov.B	#0, 31[r14]
 6127 0165 F1 E6 1F                		bset #6, 31[r14].B
5285:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			*p3 = value;
 6128                             		.loc 1 5285 0
 6129 0168 C3 23                   		mov.B	r3, [r2]
5286:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			ENABLE_PORT_REGISTER_WRITE_PROTECTION();
 6130                             		.loc 1 5286 0
 6131 016a F9 E4 1F 00             		mov.B	#0, 31[r14]
 6132 016e F9 E4 1F 80             		mov.B	#0xffffff80, 31[r14]
 6133 0172 0C                      		bra	.L695
 6134                             	.LVL476:
 6135                             	.L723:
4961:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch( mode )
 6136                             		.loc 1 4961 0
 6137 0173 66 07                   		mov	#0, r7
 6138                             	.LVL477:
 6139 0175 03                      		.balign 2,3,1
 6140                             	.L695:
5291:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     p1 = ChModeRegAddr[chId];
 6141                             		.loc 1 5291 0
 6142 0176 5B AA                   		movu.B	r10, r10
 6143 0178 FB E2 00 00 00 00       		mov.L	#_ChModeRegAddr, r14
 6144 017e FE 6A EE                		mov.L	[r10,r14], r14
 6145                             	.LVL478:
5292:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(p1 != 0)
 6146                             		.loc 1 5292 0
 6147 0181 61 0E                   		cmp	#0, r14
 6148 0183 3A 82 00                		beq	.L694
5294:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( GET_BIT(ChModeRegAddr_Nibble, chId))
 6149                             		.loc 1 5294 0
 6150 0186 FB 42 0A 11 A5 00       		mov.L	#0xa5110a, r4
 6151 018c FD 60 A4                		shlr	r10, r4
5296:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_H_NIBBLE(*p1, mode);
 6152                             		.loc 1 5296 0
 6153 018f CC EA                   		mov.B	[r14], r10
 6154                             	.LVL479:
5294:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if( GET_BIT(ChModeRegAddr_Nibble, chId))
 6155                             		.loc 1 5294 0
 6156 0191 FD 74 C4 01             		tst	#1, r4
 6157 0195 10                      		beq	.L719
5296:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_H_NIBBLE(*p1, mode);
 6158                             		.loc 1 5296 0
 6159 0196 5B 77                   		movu.B	r7, r7
 6160                             	.LVL480:
 6161 0198 6C 47                   		shll	#4, r7
 6162                             	.LVL481:
 6163 019a 64 FA                   		and #15, r10
 6164 019c 0C                      		bra	.L738
 6165                             	.LVL482:
 6166                             	.L719:
5300:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             SET_L_NIBBLE(*p1, mode);
 6167                             		.loc 1 5300 0
 6168 019d 75 2A F0                		and #-16, r10
 6169                             	.LVL483:
 6170                             		.balign 2,3,1
 6171                             	.L738:
 6172 01a0 57 A7                   		or	r10, r7
 6173 01a2 C3 E7                   		mov.B	r7, [r14]
 6174 01a4 2E 61                   		bra	.L694
 6175                             	.LVL484:
 6176                             	.L696:
4965:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     	mode = MTUO_TIOR_MODE_PIN_IO;
 6177                             		.loc 1 4965 0
 6178 01a6 66 87                   		mov	#8, r7
 6179 01a8 0E                      		bra	.L698
 6180                             	.L724:
4978:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         mode = MTUO_TIOR_MODE_OUTPUT_01;
 6181                             		.loc 1 4978 0
 6182 01a9 66 27                   		mov	#2, r7
 6183 01ab 0B                      		bra	.L698
 6184                             	.L725:
4974:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             mode=MTUO_TIOR_MODE_OUTPUT_1T;
 6185                             		.loc 1 4974 0
 6186 01ac 66 77                   		mov	#7, r7
 6187                             	.LVL485:
 6188                             		.balign 2,3,1
 6189                             	.L698:
4991:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     	switch (chId)
 6190                             		.loc 1 4991 0
 6191 01ae 5B AE                   		movu.B	r10, r14
 6192 01b0 75 5E 17                		cmp	#23, r14
 6193 01b3 25 05 38 57 FF          		bgtu	.L714
 6194 01b8 FB 42 00 00 00 00       		mov.L	#.L722, r4
 6195 01be FE 6E 4E                		mov.L	[r14,r4], r14
 6196                             		
 6197 01c1 7F 0E                   	1:jmp	r14
 6198                             		.section	.rodata.TMR_SetChannelOutputMode,"a",@progbits
 6199                             		.balign 4
 6200                             		.balign 4
 6201                             	.L722:
 6202 0000 00 00 01 D9             		.long .L720
 6203 0004 00 00 01 15             		.long .L726
 6204 0008 00 00 01 C3             		.long .L721
 6205 000c 00 00 01 EF             		.long .L727
 6206 0010 00 00 01 0C             		.long .L714
 6207 0014 00 00 01 0C             		.long .L714
 6208 0018 00 00 01 0C             		.long .L714
 6209 001c 00 00 00 2F             		.long .L701
 6210 0020 00 00 00 45             		.long .L703
 6211 0024 00 00 01 0C             		.long .L714
 6212 0028 00 00 01 0C             		.long .L714
 6213 002c 00 00 00 51             		.long .L704
 6214 0030 00 00 00 5C             		.long .L705
 6215 0034 00 00 01 0C             		.long .L714
 6216 0038 00 00 01 0C             		.long .L714
 6217 003c 00 00 00 73             		.long .L706
 6218 0040 00 00 00 84             		.long .L707
 6219 0044 00 00 00 8F             		.long .L708
 6220 0048 00 00 00 9A             		.long .L709
 6221 004c 00 00 01 0C             		.long .L714
 6222 0050 00 00 00 B1             		.long .L710
 6223 0054 00 00 00 BD             		.long .L711
 6224 0058 00 00 00 DE             		.long .L712
 6225 005c 00 00 00 F5             		.long .L713
 6226                             		.section	.text.TMR_SetChannelOutputMode
 6227                             	.L721:
5028:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 2;
 6228                             		.loc 1 5028 0
 6229 01c3 66 25                   		mov	#2, r5
5027:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
 6230                             		.loc 1 5027 0
 6231 01c5 66 13                   		mov	#1, r3
 6232                             	.LVL486:
5029:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.P32PFS.BYTE;
 6233                             		.loc 1 5029 0
 6234 01c7 FB 2E 5A C1 08          		mov.L	#0x8c15a, r2
 6235                             	.LVL487:
 6236                             		.balign 2,3,4
 6237                             	.L734:
5026:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = &PORT3.PMR.BYTE;
 6238                             		.loc 1 5026 0
 6239 01cc FB 4E 63 C0 08          		mov.L	#0x8c063, r4
5025:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = &PORT3.PDR.BYTE;
 6240                             		.loc 1 5025 0
 6241 01d1 FB EE 03 C0 08          		mov.L	#0x8c003, r14
 6242 01d6 38 54 FF                		bra	.L715
 6243                             	.LVL488:
 6244                             	.L720:
4998:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 3;
 6245                             		.loc 1 4998 0
 6246 01d9 66 35                   		mov	#3, r5
4997:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01; /* PB3 is select as TMO0 function*/
 6247                             		.loc 1 4997 0
 6248 01db 66 13                   		mov	#1, r3
 6249                             	.LVL489:
4999:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.PB3PFS.BYTE;
 6250                             		.loc 1 4999 0
 6251 01dd FB 2E 9B C1 08          		mov.L	#0x8c19b, r2
 6252                             	.LVL490:
 6253                             		.balign 2,3,4
 6254                             	.L732:
4996:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = &PORTB.PMR.BYTE;
 6255                             		.loc 1 4996 0
 6256 01e2 FB 4E 6B C0 08          		mov.L	#0x8c06b, r4
4995:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = &PORTB.PDR.BYTE;
 6257                             		.loc 1 4995 0
 6258 01e7 FB EE 0B C0 08          		mov.L	#0x8c00b, r14
 6259 01ec 38 3E FF                		bra	.L715
 6260                             	.LVL491:
 6261                             	.L727:
5036:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			bitNum = 3;
 6262                             		.loc 1 5036 0
 6263 01ef 66 35                   		mov	#3, r5
5035:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			value = 0x01;
 6264                             		.loc 1 5035 0
 6265 01f1 66 13                   		mov	#1, r3
 6266                             	.LVL492:
5037:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p3 = &MPC.PA3PFS.BYTE;
 6267                             		.loc 1 5037 0
 6268 01f3 FB 2E 93 C1 08          		mov.L	#0x8c193, r2
 6269                             	.LVL493:
 6270                             		.balign 2,3,4
 6271                             	.L736:
5034:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p2 = &PORTA.PMR.BYTE;
 6272                             		.loc 1 5034 0
 6273 01f8 FB 4E 6A C0 08          		mov.L	#0x8c06a, r4
5033:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 			p1 = &PORTA.PDR.BYTE;
 6274                             		.loc 1 5033 0
 6275 01fd FB EE 0A C0 08          		mov.L	#0x8c00a, r14
 6276                             	.LVL494:
 6277 0202 38 28 FF                		bra	.L715
 6278                             	.LVL495:
 6279                             	.L694:
5304:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end TMR_SetChannelOutputMode*/
 6280                             		.loc 1 5304 0
 6281 0205 3F 7A 04                		rtsd	#16, r7-r10
 6282                             	.LFE97:
 6284                             		.section	.text.TMR_SetTimerDefaultMode,"ax",@progbits
 6285                             		.global	_TMR_SetTimerDefaultMode
 6287                             	_TMR_SetTimerDefaultMode:
 6288                             	.LFB99:
5406:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 6289                             		.loc 1 5406 0
 6290                             	.LVL496:
5409:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(tmdID)
 6291                             		.loc 1 5409 0
 6292 0000 5B 11                   		movu.B	r1, r1
 6293 0002 61 41                   		cmp	#4, r1
 6294 0004 24 22                   		bgtu	.L740
 6295 0006 FB E2 00 00 00 00       		mov.L	#.L746, r14
 6296 000c FE 61 EE                		mov.L	[r1,r14], r14
 6297                             		
 6298 000f 7F 0E                   	1:jmp	r14
 6299                             		.section	.rodata.TMR_SetTimerDefaultMode,"a",@progbits
 6300                             		.balign 4
 6301                             		.balign 4
 6302                             	.L746:
 6303 0000 00 00 00 2D             		.long .L741
 6304 0004 00 00 00 33             		.long .L748
 6305 0008 00 00 00 11             		.long .L743
 6306 000c 00 00 00 18             		.long .L744
 6307 0010 00 00 00 1F             		.long .L745
 6308                             		.section	.text.TMR_SetTimerDefaultMode
 6309                             	.L743:
 6310                             	.LVL497:
5432:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & MTU2.TCR.BYTE;
 6311                             		.loc 1 5432 0
 6312 0011 FB EE 00 88 08          		mov.L	#0x88800, r14
5440:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 6313                             		.loc 1 5440 0
 6314 0016 2E 22                   		bra	.L742
 6315                             	.LVL498:
 6316                             	.L744:
5442:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & MTU3.TCR.BYTE;
 6317                             		.loc 1 5442 0
 6318 0018 FB EE 00 86 08          		mov.L	#0x88600, r14
5450:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 6319                             		.loc 1 5450 0
 6320 001d 2E 1B                   		bra	.L742
 6321                             	.LVL499:
 6322                             	.L745:
5452:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & MTU4.TCR.BYTE;
 6323                             		.loc 1 5452 0
 6324 001f FB EE 01 86 08          		mov.L	#0x88601, r14
5460:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 6325                             		.loc 1 5460 0
 6326 0024 2E 14                   		bra	.L742
 6327                             	.LVL500:
 6328                             	.L740:
5462:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 6329                             		.loc 1 5462 0
 6330 0026 75 41 30                		mov.L	#48, r1
 6331                             	.LVL501:
 6332 0029 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 6333                             	.LVL502:
 6334                             	.L741:
5412:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = &MTU0.TCR.BYTE;
 6335                             		.loc 1 5412 0
 6336 002d FB EE 00 87 08          		mov.L	#0x88700, r14
 6337 0032 0E                      		bra	.L742
 6338                             	.L748:
5422:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         p1 = & MTU1.TCR.BYTE;
 6339                             		.loc 1 5422 0
 6340 0033 FB EE 80 87 08          		mov.L	#0x88780, r14
 6341                             	.LVL503:
 6342                             		.balign 2,3,4
 6343                             	.L742:
5470:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             *(p1 + i) = 0x00;
 6344                             		.loc 1 5470 0
 6345 0038 F8 E4 00                		mov.B	#0, [r14]
 6346                             	.LVL504:
 6347 003b F9 E4 01 00             		mov.B	#0, 1[r14]
 6348                             	.LVL505:
 6349 003f F9 E4 02 00             		mov.B	#0, 2[r14]
 6350                             	.LVL506:
 6351 0043 F9 E4 03 00             		mov.B	#0, 3[r14]
 6352                             	.LVL507:
 6353 0047 F9 E4 04 00             		mov.B	#0, 4[r14]
 6354                             	.LVL508:
 6355 004b 02                      		rts
 6356                             	.LFE99:
 6358                             		.section	.text.TMR_DeInitChannel,"ax",@progbits
 6359                             		.global	_TMR_DeInitChannel
 6361                             	_TMR_DeInitChannel:
 6362                             	.LFB100:
5483:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 6363                             		.loc 1 5483 0
 6364                             	.LVL509:
 6365 0000 7E A7                   		push.l	r7
 6366                             	.LCFI21:
 6367 0002 CF 17                   		mov.B	r1, r7
5484:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     TMR_DisableCHI(pChannel);
 6368                             		.loc 1 5484 0
 6369 0004 05 00 00 00             		bsr	_TMR_DisableCHI
 6370                             	.LVL510:
 6371                             	.LBB22:
 6372                             	.LBB23:
5387:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     p1 = ChModeRegAddr[chId];
 6373                             		.loc 1 5387 0
 6374 0008 5B 73                   		movu.B	r7, r3
 6375 000a FB E2 00 00 00 00       		mov.L	#_ChModeRegAddr, r14
 6376 0010 FE 63 EE                		mov.L	[r3,r14], r14
 6377                             	.LVL511:
5388:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( GET_BIT(ChModeRegAddr_Nibble, chId))
 6378                             		.loc 1 5388 0
 6379 0013 FB 42 0A 11 A5 00       		mov.L	#0xa5110a, r4
 6380 0019 FC 6B 43                		btst	r3, r4
5390:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE(*p1, MTU_TIOR_MODE_OUTPUT_PROIBITED);
 6381                             		.loc 1 5390 0
 6382 001c CC E4                   		mov.B	[r14], r4
5388:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( GET_BIT(ChModeRegAddr_Nibble, chId))
 6383                             		.loc 1 5388 0
 6384 001e 14                      		beq	.L750
5390:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_H_NIBBLE(*p1, MTU_TIOR_MODE_OUTPUT_PROIBITED);
 6385                             		.loc 1 5390 0
 6386 001f 64 F4                   		and #15, r4
 6387 0021 0D                      		bra	.L753
 6388                             	.L750:
5394:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         SET_L_NIBBLE(*p1, MTU_TIOR_MODE_OUTPUT_PROIBITED);
 6389                             		.loc 1 5394 0
 6390 0022 75 24 F0                		and #-16, r4
 6391 0025 03                      		.balign 2,3,1
 6392                             	.L753:
 6393 0026 C3 E4                   		mov.B	r4, [r14]
 6394                             	.LBE23:
 6395                             	.LBE22:
5486:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     TMR_ClearCHF(pChannel);
 6396                             		.loc 1 5486 0
 6397 0028 CF 71                   		mov.B	r7, r1
 6398 002a 05 00 00 00             		bsr	_TMR_ClearCHF
 6399                             	.LVL512:
5487:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     TMR_ClearChannelPulses(pChannel);
 6400                             		.loc 1 5487 0
 6401 002e CF 71                   		mov.B	r7, r1
5488:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* TMR_DeInitChannel*/
 6402                             		.loc 1 5488 0
 6403 0030 7E B7                   		pop	r7
 6404                             	.LVL513:
5487:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     TMR_ClearChannelPulses(pChannel);
 6405                             		.loc 1 5487 0
 6406 0032 04 00 00 00             		bra	_TMR_ClearChannelPulses
 6407                             	.LVL514:
 6408                             	.LFE100:
 6410                             		.section	.text.TMR_GetDelta,"ax",@progbits
 6411                             		.global	_TMR_GetDelta
 6413                             	_TMR_GetDelta:
 6414                             	.LFB101:
5496:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 6415                             		.loc 1 5496 0
 6416                             	.LVL515:
 6417 0000 6E 7B                   		pushm	r7-r11
 6418                             	.LCFI22:
 6419 0002 DF 27                   		mov.W	r2, r7
 6420 0004 DF 3A                   		mov.W	r3, r10
5498:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if( CntrVal_CURR > CntrVal_OLD)
 6421                             		.loc 1 5498 0
 6422 0006 5F 34                   		movu.W	r3, r4
 6423 0008 5F 2E                   		movu.W	r2, r14
 6424 000a 47 E4                   		cmp	r14, r4
 6425 000c 25 09                   		bleu	.L755
5500:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return ((Period_ValueType) ((uint16_t) CntrVal_CURR - (uint16_t) CntrVal_OLD));
 6426                             		.loc 1 5500 0
 6427 000e EF 7B                   		mov.L	r7, r11
 6428 0010 FF 01 BA                		sub	r11, r10, r1
 6429                             	.LVL516:
 6430 0013 2E 0F                   		bra	.L756
 6431                             	.LVL517:
 6432                             	.L755:
5503:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     period = TMR_GetModulo(trmId, 0);
 6433                             		.loc 1 5503 0
 6434 0015 66 02                   		mov	#0, r2
 6435                             	.LVL518:
 6436 0017 05 00 00 00             		bsr	_TMR_GetModulo
 6437                             	.LVL519:
5504:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return ((period - CntrVal_OLD)+CntrVal_CURR);
 6438                             		.loc 1 5504 0
 6439 001b EF 7B                   		mov.L	r7, r11
 6440 001d FF 07 BA                		sub	r11, r10, r7
 6441                             	.LVL520:
 6442 0020 4B 71                   		add	r7, r1
 6443                             	.LVL521:
 6444                             		.balign 2,3,1
 6445                             	.L756:
5506:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end Period_ValueType*/
 6446                             		.loc 1 5506 0
 6447 0022 5F 11                   		movu.W	r1, r1
 6448 0024 3F 7B 05                		rtsd	#20, r7-r11
 6449                             	.LFE101:
 6451 0027 03                      		.section	.text.IRQ_Init,"ax",@progbits
 6452                             		.global	_IRQ_Init
 6454                             	_IRQ_Init:
 6455                             	.LFB102:
5529:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 6456                             		.loc 1 5529 0
 6457                             	.LVL522:
5530:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(irq_id)
 6458                             		.loc 1 5530 0
 6459 0000 5B 1E                   		movu.B	r1, r14
 6460 0002 61 9E                   		cmp	#9, r14
 6461 0004 25 05 38 B6 01          		bgtu	.L759
 6462 0009 FB 42 00 00 00 00       		mov.L	#.L770, r4
 6463 000f FE 6E 4E                		mov.L	[r14,r4], r14
 6464                             		
 6465 0012 7F 0E                   	1:jmp	r14
 6466                             		.section	.rodata.IRQ_Init,"a",@progbits
 6467                             		.balign 4
 6468                             		.balign 4
 6469                             	.L770:
 6470 0000 00 00 00 14             		.long .L760
 6471 0004 00 00 00 38             		.long .L761
 6472 0008 00 00 00 5C             		.long .L762
 6473 000c 00 00 00 80             		.long .L763
 6474 0010 00 00 00 A4             		.long .L764
 6475 0014 00 00 01 2F             		.long .L765
 6476 0018 00 00 01 5D             		.long .L766
 6477 001c 00 00 00 D1             		.long .L767
 6478 0020 00 00 01 00             		.long .L768
 6479 0024 00 00 01 8B             		.long .L769
 6480                             		.section	.text.IRQ_Init
 6481                             	.L760:
5533:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         DISABLE_PORT_REGISTER_WRITE_PROTECTION();
 6482                             		.loc 1 5533 0
 6483 0014 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 6484 0019 F9 E4 1F 00             		mov.B	#0, 31[r14]
 6485 001d F1 E6 1F                		bset #6, 31[r14].B
5534:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_PH1_PORT_PIN_AS_IRQ0;
 6486                             		.loc 1 5534 0
 6487 0020 F1 E6 C9                		bset #6, 201[r14].B
5535:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ENABLE_PORT_REGISTER_WRITE_PROTECTION();
 6488                             		.loc 1 5535 0
 6489 0023 F9 E4 1F 00             		mov.B	#0, 31[r14]
 6490 0027 F9 E4 1F 80             		mov.B	#0xffffff80, 31[r14]
5536:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[_HAL_RX210_ICU_IRQ0_VECTOR].BYTE = IRQ0_INTERRUPT_PRIORITY;
 6491                             		.loc 1 5536 0
 6492 002b FB EE 00 70 08          		mov.L	#0x87000, r14
 6493 0030 FA E4 40 03 01          		mov.B	#1, 832[r14]
5537:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 6494                             		.loc 1 5537 0
 6495 0035 38 8B 01                		bra	.L773
 6496                             	.L761:
5539:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         DISABLE_PORT_REGISTER_WRITE_PROTECTION();
 6497                             		.loc 1 5539 0
 6498 0038 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 6499 003d F9 E4 1F 00             		mov.B	#0, 31[r14]
 6500 0041 F1 E6 1F                		bset #6, 31[r14].B
5540:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_PH2_PORT_PIN_AS_IRQ1;
 6501                             		.loc 1 5540 0
 6502 0044 F1 E6 CA                		bset #6, 202[r14].B
5541:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ENABLE_PORT_REGISTER_WRITE_PROTECTION();
 6503                             		.loc 1 5541 0
 6504 0047 F9 E4 1F 00             		mov.B	#0, 31[r14]
 6505 004b F9 E4 1F 80             		mov.B	#0xffffff80, 31[r14]
5542:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[_HAL_RX210_ICU_IRQ1_VECTOR].BYTE = IRQ1_INTERRUPT_PRIORITY;
 6506                             		.loc 1 5542 0
 6507 004f FB EE 00 70 08          		mov.L	#0x87000, r14
 6508 0054 FA E4 41 03 01          		mov.B	#1, 833[r14]
5543:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 6509                             		.loc 1 5543 0
 6510 0059 38 67 01                		bra	.L773
 6511                             	.L762:
5545:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         DISABLE_PORT_REGISTER_WRITE_PROTECTION();
 6512                             		.loc 1 5545 0
 6513 005c FB EE 00 C1 08          		mov.L	#0x8c100, r14
 6514 0061 F9 E4 1F 00             		mov.B	#0, 31[r14]
 6515 0065 F1 E6 1F                		bset #6, 31[r14].B
5546:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_P15_PORT_PIN_AS_IRQ5;
 6516                             		.loc 1 5546 0
 6517 0068 F1 E6 4D                		bset #6, 77[r14].B
5547:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ENABLE_PORT_REGISTER_WRITE_PROTECTION();
 6518                             		.loc 1 5547 0
 6519 006b F9 E4 1F 00             		mov.B	#0, 31[r14]
 6520 006f F9 E4 1F 80             		mov.B	#0xffffff80, 31[r14]
5548:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[_HAL_RX210_ICU_IRQ5_VECTOR].BYTE = IRQ5_INTERRUPT_PRIORITY;
 6521                             		.loc 1 5548 0
 6522 0073 FB EE 00 70 08          		mov.L	#0x87000, r14
 6523 0078 FA E4 45 03 01          		mov.B	#1, 837[r14]
5549:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 6524                             		.loc 1 5549 0
 6525 007d 38 43 01                		bra	.L773
 6526                             	.L763:
5551:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         DISABLE_PORT_REGISTER_WRITE_PROTECTION();
 6527                             		.loc 1 5551 0
 6528 0080 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 6529 0085 F9 E4 1F 00             		mov.B	#0, 31[r14]
 6530 0089 F1 E6 1F                		bset #6, 31[r14].B
5552:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_PA3_PORT_PIN_AS_IRQ6;
 6531                             		.loc 1 5552 0
 6532 008c F1 E6 93                		bset #6, 147[r14].B
5553:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ENABLE_PORT_REGISTER_WRITE_PROTECTION();
 6533                             		.loc 1 5553 0
 6534 008f F9 E4 1F 00             		mov.B	#0, 31[r14]
 6535 0093 F9 E4 1F 80             		mov.B	#0xffffff80, 31[r14]
5554:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[_HAL_RX210_ICU_IRQ6_VECTOR].BYTE = IRQ6_INTERRUPT_PRIORITY;
 6536                             		.loc 1 5554 0
 6537 0097 FB EE 00 70 08          		mov.L	#0x87000, r14
 6538 009c FA E4 46 03 01          		mov.B	#1, 838[r14]
5555:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 6539                             		.loc 1 5555 0
 6540 00a1 38 1F 01                		bra	.L773
 6541                             	.L764:
5557:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ENABLE_ELC_HW_MODULE();
 6542                             		.loc 1 5557 0
 6543 00a4 FB EE 00 00 08          		mov.L	#0x80000, r14
 6544 00a9 FA E9 FF 01 0F A5       		mov.W	#0xffffa50f, 1022[r14]
 6545 00af ED E4 05                		mov.L	20[r14], r4
 6546 00b2 7A 94                   		bclr #9, r4
 6547 00b4 E7 E4 05                		mov.L	r4, 20[r14]
 6548 00b7 FA E9 FF 01 00 A5       		mov.W	#0xffffa500, 1022[r14]
5558:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.ELSR[18].BYTE |= 0x63;
 6549                             		.loc 1 5558 0
 6550 00bd FB EE 00 B1 08          		mov.L	#0x8b100, r14
 6551 00c2 CD E4 13                		mov.B	19[r14], r4
 6552 00c5 75 34 63                		or	#0x63, r4
 6553 00c8 C7 E4 13                		mov.B	r4, 19[r14]
5559:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.PGR1.BYTE |= ELC_PB0_MASK;
 6554                             		.loc 1 5559 0
 6555 00cb F1 E0 23                		bset #0, 35[r14].B
 6556 00ce 38 06 01                		bra	.L772
 6557                             	.L767:
5562:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ENABLE_ELC_HW_MODULE();
 6558                             		.loc 1 5562 0
 6559 00d1 FB EE 00 00 08          		mov.L	#0x80000, r14
 6560 00d6 FA E9 FF 01 0F A5       		mov.W	#0xffffa50f, 1022[r14]
 6561 00dc ED E4 05                		mov.L	20[r14], r4
 6562 00df 7A 94                   		bclr #9, r4
 6563 00e1 E7 E4 05                		mov.L	r4, 20[r14]
 6564 00e4 FA E9 FF 01 00 A5       		mov.W	#0xffffa500, 1022[r14]
5563:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.ELSR[18].BYTE |= 0x63;
 6565                             		.loc 1 5563 0
 6566 00ea FB EE 00 B1 08          		mov.L	#0x8b100, r14
 6567 00ef CD E4 13                		mov.B	19[r14], r4
 6568 00f2 75 34 63                		or	#0x63, r4
 6569 00f5 C7 E4 13                		mov.B	r4, 19[r14]
5564:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.PGR1.BYTE |= ELC_PB1_MASK;
 6570                             		.loc 1 5564 0
 6571 00f8 CD E4 23                		mov.B	35[r14], r4
 6572 00fb 78 14                   		bset #1, r4
 6573 00fd 38 BB 00                		bra	.L791
 6574                             	.L768:
5567:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ENABLE_ELC_HW_MODULE();
 6575                             		.loc 1 5567 0
 6576 0100 FB EE 00 00 08          		mov.L	#0x80000, r14
 6577 0105 FA E9 FF 01 0F A5       		mov.W	#0xffffa50f, 1022[r14]
 6578 010b ED E4 05                		mov.L	20[r14], r4
 6579 010e 7A 94                   		bclr #9, r4
 6580 0110 E7 E4 05                		mov.L	r4, 20[r14]
 6581 0113 FA E9 FF 01 00 A5       		mov.W	#0xffffa500, 1022[r14]
5568:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.ELSR[18].BYTE |= 0x63;
 6582                             		.loc 1 5568 0
 6583 0119 FB EE 00 B1 08          		mov.L	#0x8b100, r14
 6584 011e CD E4 13                		mov.B	19[r14], r4
 6585 0121 75 34 63                		or	#0x63, r4
 6586 0124 C7 E4 13                		mov.B	r4, 19[r14]
5569:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.PGR1.BYTE |= ELC_PB3_MASK;
 6587                             		.loc 1 5569 0
 6588 0127 CD E4 23                		mov.B	35[r14], r4
 6589 012a 78 34                   		bset #3, r4
 6590 012c 38 8C 00                		bra	.L791
 6591                             	.L765:
5572:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ENABLE_ELC_HW_MODULE();
 6592                             		.loc 1 5572 0
 6593 012f FB EE 00 00 08          		mov.L	#0x80000, r14
 6594 0134 FA E9 FF 01 0F A5       		mov.W	#0xffffa50f, 1022[r14]
 6595 013a ED E4 05                		mov.L	20[r14], r4
 6596 013d 7A 94                   		bclr #9, r4
 6597 013f E7 E4 05                		mov.L	r4, 20[r14]
 6598 0142 FA E9 FF 01 00 A5       		mov.W	#0xffffa500, 1022[r14]
5573:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.ELSR[18].BYTE |= 0x63;
 6599                             		.loc 1 5573 0
 6600 0148 FB EE 00 B1 08          		mov.L	#0x8b100, r14
 6601 014d CD E4 13                		mov.B	19[r14], r4
 6602 0150 75 34 63                		or	#0x63, r4
 6603 0153 C7 E4 13                		mov.B	r4, 19[r14]
5574:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.PGR1.BYTE |= ELC_PB5_MASK;
 6604                             		.loc 1 5574 0
 6605 0156 CD E4 23                		mov.B	35[r14], r4
 6606 0159 78 54                   		bset #5, r4
 6607 015b 2E 5D                   		bra	.L791
 6608                             	.L766:
5577:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ENABLE_ELC_HW_MODULE();
 6609                             		.loc 1 5577 0
 6610 015d FB EE 00 00 08          		mov.L	#0x80000, r14
 6611 0162 FA E9 FF 01 0F A5       		mov.W	#0xffffa50f, 1022[r14]
 6612 0168 ED E4 05                		mov.L	20[r14], r4
 6613 016b 7A 94                   		bclr #9, r4
 6614 016d E7 E4 05                		mov.L	r4, 20[r14]
 6615 0170 FA E9 FF 01 00 A5       		mov.W	#0xffffa500, 1022[r14]
5578:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.ELSR[18].BYTE |= 0x63;
 6616                             		.loc 1 5578 0
 6617 0176 FB EE 00 B1 08          		mov.L	#0x8b100, r14
 6618 017b CD E4 13                		mov.B	19[r14], r4
 6619 017e 75 34 63                		or	#0x63, r4
 6620 0181 C7 E4 13                		mov.B	r4, 19[r14]
5579:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.PGR1.BYTE |= ELC_PB6_MASK;
 6621                             		.loc 1 5579 0
 6622 0184 CD E4 23                		mov.B	35[r14], r4
 6623 0187 78 64                   		bset #6, r4
 6624 0189 2E 2F                   		bra	.L791
 6625                             	.L769:
5582:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ENABLE_ELC_HW_MODULE();
 6626                             		.loc 1 5582 0
 6627 018b FB EE 00 00 08          		mov.L	#0x80000, r14
 6628 0190 FA E9 FF 01 0F A5       		mov.W	#0xffffa50f, 1022[r14]
 6629 0196 ED E4 05                		mov.L	20[r14], r4
 6630 0199 7A 94                   		bclr #9, r4
 6631 019b E7 E4 05                		mov.L	r4, 20[r14]
 6632 019e FA E9 FF 01 00 A5       		mov.W	#0xffffa500, 1022[r14]
5583:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.ELSR[18].BYTE |= 0x63;
 6633                             		.loc 1 5583 0
 6634 01a4 FB EE 00 B1 08          		mov.L	#0x8b100, r14
 6635 01a9 CD E4 13                		mov.B	19[r14], r4
 6636 01ac 75 34 63                		or	#0x63, r4
 6637 01af C7 E4 13                		mov.B	r4, 19[r14]
5584:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.PGR1.BYTE |= ELC_PB7_MASK;
 6638                             		.loc 1 5584 0
 6639 01b2 CD E4 23                		mov.B	35[r14], r4
 6640 01b5 75 34 80                		or	#0xffffff80, r4
 6641                             		.balign 2,3,5
 6642                             	.L791:
 6643 01b8 C7 E4 23                		mov.B	r4, 35[r14]
5585:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 6644                             		.loc 1 5585 0
 6645 01bb 0D                      		bra	.L773
 6646                             	.L759:
5587:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(irq_id == RX210_ELCIRQ0_PB0 || irq_id == RX210_IRQ_PB1 || irq_id == RX210_IRQ_PB3 || irq_id 
 6647                             		.loc 1 5587 0
 6648 01bc 61 4E                   		cmp	#4, r14
 6649 01be 20 16                   		beq	.L772
 6650                             		.balign 2,3,1
 6651                             	.L773:
5587:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(irq_id == RX210_ELCIRQ0_PB0 || irq_id == RX210_IRQ_PB1 || irq_id == RX210_IRQ_PB3 || irq_id 
 6652                             		.loc 1 5587 0 is_stmt 0 discriminator 1
 6653 01c0 5B 11                   		movu.B	r1, r1
 6654 01c2 61 71                   		cmp	#7, r1
 6655 01c4 20 10                   		beq	.L772
 6656 01c6 61 81                   		cmp	#8, r1
 6657 01c8 20 0C                   		beq	.L772
 6658 01ca 61 51                   		cmp	#5, r1
 6659 01cc 10                      		beq	.L772
 6660 01cd 61 61                   		cmp	#6, r1
 6661 01cf 15                      		beq	.L772
 6662 01d0 61 91                   		cmp	#9, r1
 6663 01d2 21 18                   		bne	.L758
 6664                             	.LVL523:
 6665                             		.balign 2,3,4
 6666                             	.L772:
5589:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ELC.ELCR.BYTE |= 0x80;
 6667                             		.loc 1 5589 0 is_stmt 1
 6668 01d4 FB EE 00 B1 08          		mov.L	#0x8b100, r14
 6669 01d9 CC E4                   		mov.B	[r14], r4
 6670 01db 75 34 80                		or	#0xffffff80, r4
 6671 01de C3 E4                   		mov.B	r4, [r14]
5590:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[_HAL_RX210_ICU_ELC_ELSR18L_VECTOR].BYTE = ELC_ELSR18L_INTERRUPT_PRIORITY;
 6672                             		.loc 1 5590 0
 6673 01e0 FB EE 00 70 08          		mov.L	#0x87000, r14
 6674 01e5 FA E4 6A 03 01          		mov.B	#1, 874[r14]
 6675                             	.L758:
 6676 01ea 02                      		rts
 6677                             	.LFE102:
 6679 01eb 03                      		.section	.text.IRQ_SetEdge,"ax",@progbits
 6680                             		.global	_IRQ_SetEdge
 6682                             	_IRQ_SetEdge:
 6683                             	.LFB103:
5602:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 6684                             		.loc 1 5602 0
 6685                             	.LVL524:
5604:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(irq_id)
 6686                             		.loc 1 5604 0
 6687 0000 5B 2E                   		movu.B	r2, r14
 6688 0002 61 1E                   		cmp	#1, r14
 6689 0004 20 28                   		beq	.L795
 6690 0006 61 0E                   		cmp	#0, r14
 6691 0008 20 0C                   		beq	.L794
 6692 000a 61 2E                   		cmp	#2, r14
 6693 000c 20 38                   		beq	.L796
 6694 000e 61 3E                   		cmp	#3, r14
 6695 0010 21 64                   		bne	.L823
 6696 0012 2E 4A                   		bra	.L797
 6697                             	.L794:
5607:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(edge)
 6698                             		.loc 1 5607 0
 6699 0014 5B 14                   		movu.B	r1, r4
 6700 0016 FB EE 00 70 08          		mov.L	#0x87000, r14
 6701 001b 61 04                   		cmp	#0, r4
 6702 001d 10                      		beq	.L798
5608:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_CONTROL_REGISTER(IRQ0) = _HAL_RX210_DETECTION_SENSE_RAISING_EDGE;
 6703                             		.loc 1 5608 0
 6704 001e FA E4 00 05 08          		mov.B	#8, 1280[r14]
 6705 0023 2E 62                   		bra	.L803
 6706                             	.L798:
5610:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_CONTROL_REGISTER(IRQ0) = _HAL_RX210_DETECTION_SENSE_FALLING_EDGE;
 6707                             		.loc 1 5610 0
 6708 0025 FA E4 00 05 04          		mov.B	#4, 1280[r14]
 6709 002a 2E 5B                   		bra	.L803
 6710                             	.L795:
5613:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(edge)
 6711                             		.loc 1 5613 0
 6712 002c 5B 14                   		movu.B	r1, r4
 6713 002e FB EE 00 70 08          		mov.L	#0x87000, r14
 6714 0033 61 04                   		cmp	#0, r4
 6715 0035 10                      		beq	.L800
5614:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_CONTROL_REGISTER(IRQ1) = _HAL_RX210_DETECTION_SENSE_RAISING_EDGE;
 6716                             		.loc 1 5614 0
 6717 0036 FA E4 01 05 08          		mov.B	#8, 1281[r14]
 6718 003b 2E 4A                   		bra	.L803
 6719                             	.L800:
5616:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_CONTROL_REGISTER(IRQ1) = _HAL_RX210_DETECTION_SENSE_FALLING_EDGE;
 6720                             		.loc 1 5616 0
 6721 003d FA E4 01 05 04          		mov.B	#4, 1281[r14]
 6722 0042 2E 43                   		bra	.L803
 6723                             	.L796:
5619:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(edge)
 6724                             		.loc 1 5619 0
 6725 0044 5B 14                   		movu.B	r1, r4
 6726 0046 FB EE 00 70 08          		mov.L	#0x87000, r14
 6727 004b 61 04                   		cmp	#0, r4
 6728 004d 10                      		beq	.L801
5620:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_CONTROL_REGISTER(IRQ5) = _HAL_RX210_DETECTION_SENSE_RAISING_EDGE;
 6729                             		.loc 1 5620 0
 6730 004e FA E4 05 05 08          		mov.B	#8, 1285[r14]
 6731 0053 2E 32                   		bra	.L803
 6732                             	.L801:
5622:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_CONTROL_REGISTER(IRQ5) = _HAL_RX210_DETECTION_SENSE_FALLING_EDGE;
 6733                             		.loc 1 5622 0
 6734 0055 FA E4 05 05 04          		mov.B	#4, 1285[r14]
 6735 005a 2E 2B                   		bra	.L803
 6736                             	.L797:
5625:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(edge)
 6737                             		.loc 1 5625 0
 6738 005c 5B 14                   		movu.B	r1, r4
 6739 005e FB EE 00 70 08          		mov.L	#0x87000, r14
 6740 0063 61 04                   		cmp	#0, r4
 6741 0065 10                      		beq	.L802
5626:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_CONTROL_REGISTER(IRQ6) = _HAL_RX210_DETECTION_SENSE_RAISING_EDGE;
 6742                             		.loc 1 5626 0
 6743 0066 FA E4 06 05 08          		mov.B	#8, 1286[r14]
 6744 006b 2E 1A                   		bra	.L803
 6745                             	.L802:
5628:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_CONTROL_REGISTER(IRQ6) = _HAL_RX210_DETECTION_SENSE_FALLING_EDGE;
 6746                             		.loc 1 5628 0
 6747 006d FA E4 06 05 04          		mov.B	#4, 1286[r14]
 6748 0072 2E 13                   		bra	.L803
 6749                             	.L823:
5631:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(    irq_id == RX210_ELCIRQ0_PB0
 6750                             		.loc 1 5631 0
 6751 0074 61 4E                   		cmp	#4, r14
 6752 0076 21 0F                   		bne	.L803
 6753                             	.LVL525:
 6754                             		.balign 2,3,1
 6755                             	.L806:
5638:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(edge)
 6756                             		.loc 1 5638 0
 6757 0078 5B 11                   		movu.B	r1, r1
 6758 007a FB EE 00 B1 08          		mov.L	#0x8b100, r14
 6759 007f 61 01                   		cmp	#0, r1
 6760 0081 20 21                   		beq	.L824
 6761 0083 2E 1A                   		bra	.L804
 6762                             	.LVL526:
 6763                             	.L803:
5632:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_IRQ_PB1
 6764                             		.loc 1 5632 0
 6765 0085 5B 22                   		movu.B	r2, r2
 6766 0087 61 72                   		cmp	#7, r2
 6767 0089 20 EF                   		beq	.L806
5633:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_IRQ_PB3
 6768                             		.loc 1 5633 0
 6769 008b 61 82                   		cmp	#8, r2
 6770 008d 20 EB                   		beq	.L806
5634:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_ELCIRQ5_PB5
 6771                             		.loc 1 5634 0
 6772 008f 61 52                   		cmp	#5, r2
 6773 0091 20 E7                   		beq	.L806
5635:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_ELCIRQ6_PB6
 6774                             		.loc 1 5635 0
 6775 0093 61 62                   		cmp	#6, r2
 6776 0095 20 E3                   		beq	.L806
5636:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_IRQ_PB7)
 6777                             		.loc 1 5636 0
 6778 0097 61 92                   		cmp	#9, r2
 6779 0099 21 0D                   		bne	.L792
 6780 009b 2E DD                   		bra	.L806
 6781                             	.LVL527:
 6782                             	.L804:
5639:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ELC.PGC1.BYTE = _HAL_RX210_DETECTION_SENSE_ELC_RAISING_EDGE;
 6783                             		.loc 1 5639 0
 6784 009d F9 E4 25 00             		mov.B	#0, 37[r14]
 6785 00a1 02                      		rts
 6786                             	.L824:
5641:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ELC.PGC1.BYTE = _HAL_RX210_DETECTION_SENSE_ELC_FALLING_EDGE;
 6787                             		.loc 1 5641 0
 6788 00a2 F9 E4 25 01             		mov.B	#1, 37[r14]
 6789                             	.LVL528:
 6790                             	.L792:
 6791 00a6 02                      		rts
 6792                             	.LFE103:
 6794 00a7 03                      		.section	.text.IRQ_IntEnable,"ax",@progbits
 6795                             		.global	_IRQ_IntEnable
 6797                             	_IRQ_IntEnable:
 6798                             	.LFB104:
5655:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 6799                             		.loc 1 5655 0
 6800                             	.LVL529:
5656:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(enable)
 6801                             		.loc 1 5656 0
 6802 0000 76 21 FF 00             		and #0xff, r1
 6803                             	.LVL530:
 6804 0004 3A 96 00                		beq	.L825
5658:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         switch(irq_id)
 6805                             		.loc 1 5658 0
 6806 0007 5B 2E                   		movu.B	r2, r14
 6807 0009 61 1E                   		cmp	#1, r14
 6808 000b 20 24                   		beq	.L830
 6809 000d 61 0E                   		cmp	#0, r14
 6810 000f 20 0C                   		beq	.L829
 6811 0011 61 2E                   		cmp	#2, r14
 6812 0013 20 31                   		beq	.L831
 6813 0015 61 3E                   		cmp	#3, r14
 6814 0017 21 5B                   		bne	.L852
 6815 0019 2E 40                   		bra	.L832
 6816                             	.L829:
5661:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_IRQ0_VECTOR) = 0x00;
 6817                             		.loc 1 5661 0
 6818 001b FB EE 00 70 08          		mov.L	#0x87000, r14
 6819 0020 C7 E2 40                		mov.B	r2, 64[r14]
5662:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_DIGITAL_FILTER_ENABLE_REGISTER |= IRQ0_DIGITAL_FILTER_MASK;
 6820                             		.loc 1 5662 0
 6821 0023 F2 E0 10 05             		bset #0, 1296[r14].B
5663:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_INTERRUPT_REQUEST_ENABLE_REGISTER(_HAL_RX210_ICU_IRQ_IER_REGISTER) |= _HAL_R
 6822                             		.loc 1 5663 0
 6823 0027 CE E4 08 02             		mov.B	520[r14], r4
 6824 002b 78 04                   		bset #0, r4
 6825 002d 2E 3F                   		bra	.L853
 6826                             	.L830:
5666:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_IRQ1_VECTOR) = 0x00;
 6827                             		.loc 1 5666 0
 6828 002f FB EE 00 70 08          		mov.L	#0x87000, r14
 6829 0034 F9 E4 41 00             		mov.B	#0, 65[r14]
5667:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_DIGITAL_FILTER_ENABLE_REGISTER |= IRQ1_DIGITAL_FILTER_MASK;
 6830                             		.loc 1 5667 0
 6831 0038 F2 E1 10 05             		bset #1, 1296[r14].B
5668:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_INTERRUPT_REQUEST_ENABLE_REGISTER(_HAL_RX210_ICU_IRQ_IER_REGISTER) |= _HAL_R
 6832                             		.loc 1 5668 0
 6833 003c CE E4 08 02             		mov.B	520[r14], r4
 6834 0040 78 14                   		bset #1, r4
 6835 0042 2E 2A                   		bra	.L853
 6836                             	.L831:
5671:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_IRQ5_VECTOR) = 0x00;
 6837                             		.loc 1 5671 0
 6838 0044 FB EE 00 70 08          		mov.L	#0x87000, r14
 6839 0049 F9 E4 45 00             		mov.B	#0, 69[r14]
5672:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_DIGITAL_FILTER_ENABLE_REGISTER |= IRQ5_DIGITAL_FILTER_MASK;
 6840                             		.loc 1 5672 0
 6841 004d F2 E5 10 05             		bset #5, 1296[r14].B
5673:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_INTERRUPT_REQUEST_ENABLE_REGISTER(_HAL_RX210_ICU_IRQ_IER_REGISTER) |= _HAL_R
 6842                             		.loc 1 5673 0
 6843 0051 CE E4 08 02             		mov.B	520[r14], r4
 6844 0055 78 54                   		bset #5, r4
 6845 0057 2E 15                   		bra	.L853
 6846                             	.L832:
5676:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_IRQ6_VECTOR) = 0x00;
 6847                             		.loc 1 5676 0
 6848 0059 FB EE 00 70 08          		mov.L	#0x87000, r14
 6849 005e F9 E4 46 00             		mov.B	#0, 70[r14]
5677:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_DIGITAL_FILTER_ENABLE_REGISTER |= IRQ6_DIGITAL_FILTER_MASK;
 6850                             		.loc 1 5677 0
 6851 0062 F2 E6 10 05             		bset #6, 1296[r14].B
5678:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_INTERRUPT_REQUEST_ENABLE_REGISTER(_HAL_RX210_ICU_IRQ_IER_REGISTER) |= _HAL_R
 6852                             		.loc 1 5678 0
 6853 0066 CE E4 08 02             		mov.B	520[r14], r4
 6854 006a 78 64                   		bset #6, r4
 6855                             		.balign 2,3,5
 6856                             	.L853:
 6857 006c CB E4 08 02             		mov.B	r4, 520[r14]
5679:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             break;
 6858                             		.loc 1 5679 0
 6859 0070 2E 14                   		bra	.L834
 6860                             	.L852:
5681:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(irq_id == RX210_ELCIRQ0_PB0 || irq_id == RX210_IRQ_PB1 || irq_id == RX210_IRQ_PB3 || irq
 6861                             		.loc 1 5681 0
 6862 0072 61 4E                   		cmp	#4, r14
 6863 0074 21 10                   		bne	.L834
 6864                             	.LVL531:
 6865                             		.balign 2,3,4
 6866                             	.L835:
5683:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_ELC_ELSR18L_VECTOR) = 0x00;
 6867                             		.loc 1 5683 0
 6868 0076 FB EE 00 70 08          		mov.L	#0x87000, r14
 6869 007b F9 E4 6A 00             		mov.B	#0, 106[r14]
5684:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_INTERRUPT_REQUEST_ENABLE_REGISTER(_HAL_RX210_ICU_ELC_IER_REGISTER) |= _HAL_R
 6870                             		.loc 1 5684 0
 6871 007f F2 E2 0D 02             		bset #2, 525[r14].B
 6872 0083 02                      		rts
 6873                             	.LVL532:
 6874                             	.L834:
5681:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(irq_id == RX210_ELCIRQ0_PB0 || irq_id == RX210_IRQ_PB1 || irq_id == RX210_IRQ_PB3 || irq
 6875                             		.loc 1 5681 0 discriminator 1
 6876 0084 5B 22                   		movu.B	r2, r2
 6877 0086 61 72                   		cmp	#7, r2
 6878 0088 20 EE                   		beq	.L835
 6879 008a 61 82                   		cmp	#8, r2
 6880 008c 20 EA                   		beq	.L835
 6881 008e 61 52                   		cmp	#5, r2
 6882 0090 20 E6                   		beq	.L835
 6883 0092 61 62                   		cmp	#6, r2
 6884 0094 20 E2                   		beq	.L835
 6885 0096 61 92                   		cmp	#9, r2
 6886 0098 20 DE                   		beq	.L835
 6887                             	.LVL533:
 6888                             	.L825:
 6889 009a 02                      		rts
 6890                             	.LFE104:
 6892 009b 03                      		.section	.text.IRQ_DeInit,"ax",@progbits
 6893                             		.global	_IRQ_DeInit
 6895                             	_IRQ_DeInit:
 6896                             	.LFB105:
5696:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 6897                             		.loc 1 5696 0
 6898                             	.LVL534:
5697:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch (irq_id)
 6899                             		.loc 1 5697 0
 6900 0000 5B 1E                   		movu.B	r1, r14
 6901 0002 61 1E                   		cmp	#1, r14
 6902 0004 20 34                   		beq	.L857
 6903 0006 61 0E                   		cmp	#0, r14
 6904 0008 20 0D                   		beq	.L856
 6905 000a 61 2E                   		cmp	#2, r14
 6906 000c 20 50                   		beq	.L858
 6907 000e 61 3E                   		cmp	#3, r14
 6908 0010 3B 9C 00                		bne	.L888
 6909 0013 2E 6D                   		bra	.L859
 6910                             	.L856:
5700:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_INTERRUPT_REQUEST_ENABLE_REGISTER(_HAL_RX210_ICU_IRQ_IER_REGISTER) &= ~_HAL_RX21
 6911                             		.loc 1 5700 0
 6912 0015 FB EE 00 70 08          		mov.L	#0x87000, r14
 6913 001a F2 E8 08 02             		bclr #0, 520[r14].B
5701:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_IRQ0_VECTOR) = 0x00;
 6914                             		.loc 1 5701 0
 6915 001e C7 E1 40                		mov.B	r1, 64[r14]
5702:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[_HAL_RX210_ICU_IRQ0_VECTOR].BYTE = 0x00;
 6916                             		.loc 1 5702 0
 6917 0021 CB E1 40 03             		mov.B	r1, 832[r14]
5703:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_PH1_PORT_PIN_AS_IO;
 6918                             		.loc 1 5703 0
 6919 0025 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 6920 002a C7 E1 1F                		mov.B	r1, 31[r14]
 6921 002d F1 E6 1F                		bset #6, 31[r14].B
 6922 0030 C7 E1 C9                		mov.B	r1, 201[r14]
 6923 0033 C7 E1 1F                		mov.B	r1, 31[r14]
 6924 0036 2E 70                   		bra	.L891
 6925                             	.L857:
5706:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_INTERRUPT_REQUEST_ENABLE_REGISTER(_HAL_RX210_ICU_IRQ_IER_REGISTER) &= ~_HAL_RX21
 6926                             		.loc 1 5706 0
 6927 0038 FB EE 00 70 08          		mov.L	#0x87000, r14
 6928 003d F2 E9 08 02             		bclr #1, 520[r14].B
5707:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_IRQ1_VECTOR) = 0x00;
 6929                             		.loc 1 5707 0
 6930 0041 F9 E4 41 00             		mov.B	#0, 65[r14]
5708:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[_HAL_RX210_ICU_IRQ1_VECTOR].BYTE = 0x00;
 6931                             		.loc 1 5708 0
 6932 0045 FA E4 41 03 00          		mov.B	#0, 833[r14]
5709:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_PH2_PORT_PIN_AS_IO;
 6933                             		.loc 1 5709 0
 6934 004a FB EE 00 C1 08          		mov.L	#0x8c100, r14
 6935 004f F9 E4 1F 00             		mov.B	#0, 31[r14]
 6936 0053 F1 E6 1F                		bset #6, 31[r14].B
 6937 0056 F9 E4 CA 00             		mov.B	#0, 202[r14]
 6938 005a 2E 48                   		bra	.L890
 6939                             	.L858:
5712:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_INTERRUPT_REQUEST_ENABLE_REGISTER(_HAL_RX210_ICU_IRQ_IER_REGISTER) &= ~_HAL_RX21
 6940                             		.loc 1 5712 0
 6941 005c FB EE 00 70 08          		mov.L	#0x87000, r14
 6942 0061 F2 ED 08 02             		bclr #5, 520[r14].B
5713:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_IRQ5_VECTOR) = 0x00;
 6943                             		.loc 1 5713 0
 6944 0065 F9 E4 45 00             		mov.B	#0, 69[r14]
5714:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[_HAL_RX210_ICU_IRQ5_VECTOR].BYTE = 0x00;
 6945                             		.loc 1 5714 0
 6946 0069 FA E4 45 03 00          		mov.B	#0, 837[r14]
5715:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_P15_PORT_PIN_AS_IO;
 6947                             		.loc 1 5715 0
 6948 006e FB EE 00 C1 08          		mov.L	#0x8c100, r14
 6949 0073 F9 E4 1F 00             		mov.B	#0, 31[r14]
 6950 0077 F1 E6 1F                		bset #6, 31[r14].B
 6951 007a F9 E4 4D 00             		mov.B	#0, 77[r14]
 6952 007e 2E 24                   		bra	.L890
 6953                             	.L859:
5718:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_INTERRUPT_REQUEST_ENABLE_REGISTER(_HAL_RX210_ICU_IRQ_IER_REGISTER) &= ~_HAL_RX21
 6954                             		.loc 1 5718 0
 6955 0080 FB EE 00 70 08          		mov.L	#0x87000, r14
 6956 0085 F2 EE 08 02             		bclr #6, 520[r14].B
5719:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_IRQ6_VECTOR) = 0x00;
 6957                             		.loc 1 5719 0
 6958 0089 F9 E4 46 00             		mov.B	#0, 70[r14]
5720:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[_HAL_RX210_ICU_IRQ6_VECTOR].BYTE = 0x00;
 6959                             		.loc 1 5720 0
 6960 008d FA E4 46 03 00          		mov.B	#0, 838[r14]
5721:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_PA3_PORT_PIN_AS_IO;
 6961                             		.loc 1 5721 0
 6962 0092 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 6963 0097 F9 E4 1F 00             		mov.B	#0, 31[r14]
 6964 009b F1 E6 1F                		bset #6, 31[r14].B
 6965 009e F9 E4 93 00             		mov.B	#0, 147[r14]
 6966                             		.balign 2,3,4
 6967                             	.L890:
 6968 00a2 F9 E4 1F 00             		mov.B	#0, 31[r14]
 6969                             		.balign 2,3,4
 6970                             	.L891:
 6971 00a6 F9 E4 1F 80             		mov.B	#0xffffff80, 31[r14]
5722:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 6972                             		.loc 1 5722 0
 6973 00aa 2E 16                   		bra	.L861
 6974                             	.L888:
5724:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(   irq_id == RX210_ELCIRQ0_PB0
 6975                             		.loc 1 5724 0
 6976 00ac 61 4E                   		cmp	#4, r14
 6977 00ae 21 12                   		bne	.L861
 6978                             		.balign 2,3,4
 6979                             	.L864:
5731:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(ELC.PGR1.BYTE != 0x00)
 6980                             		.loc 1 5731 0
 6981 00b0 FB EE 00 B1 08          		mov.L	#0x8b100, r14
 6982 00b5 CD E3 23                		mov.B	35[r14], r3
 6983 00b8 5B 34                   		movu.B	r3, r4
 6984 00ba 61 04                   		cmp	#0, r4
 6985 00bc 21 1C                   		bne	.L862
 6986 00be 2E 5A                   		bra	.L889
 6987                             	.L861:
5725:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_IRQ_PB1
 6988                             		.loc 1 5725 0
 6989 00c0 5B 1E                   		movu.B	r1, r14
 6990 00c2 61 7E                   		cmp	#7, r14
 6991 00c4 20 EC                   		beq	.L864
5726:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_IRQ_PB3
 6992                             		.loc 1 5726 0
 6993 00c6 61 8E                   		cmp	#8, r14
 6994 00c8 20 E8                   		beq	.L864
5727:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_ELCIRQ5_PB5
 6995                             		.loc 1 5727 0
 6996 00ca 61 5E                   		cmp	#5, r14
 6997 00cc 20 E4                   		beq	.L864
5728:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_ELCIRQ6_PB6
 6998                             		.loc 1 5728 0
 6999 00ce 61 6E                   		cmp	#6, r14
 7000 00d0 20 E0                   		beq	.L864
5729:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_IRQ_PB7)
 7001                             		.loc 1 5729 0
 7002 00d2 61 9E                   		cmp	#9, r14
 7003 00d4 21 6A                   		bne	.L854
 7004 00d6 2E DA                   		bra	.L864
 7005                             	.L862:
5733:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             switch(irq_id)
 7006                             		.loc 1 5733 0
 7007 00d8 60 41                   		sub	#4, r1
 7008                             	.LVL535:
 7009 00da 5B 11                   		movu.B	r1, r1
 7010 00dc 61 51                   		cmp	#5, r1
 7011 00de 24 60                   		bgtu	.L854
 7012 00e0 FB 42 00 00 00 00       		mov.L	#.L872, r4
 7013 00e6 FE 61 44                		mov.L	[r1,r4], r4
 7014                             		
 7015 00e9 7F 04                   	1:jmp	r4
 7016                             		.section	.rodata.IRQ_DeInit,"a",@progbits
 7017                             		.balign 4
 7018                             		.balign 4
 7019                             	.L872:
 7020 0000 00 00 00 EB             		.long .L866
 7021 0004 00 00 01 00             		.long .L867
 7022 0008 00 00 01 07             		.long .L868
 7023 000c 00 00 00 F2             		.long .L869
 7024 0010 00 00 00 F9             		.long .L870
 7025 0014 00 00 01 0D             		.long .L871
 7026                             		.section	.text.IRQ_DeInit
 7027                             	.L866:
5736:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 ELC.PGR1.BYTE &= ~ELC_PB0_MASK;
 7028                             		.loc 1 5736 0
 7029 00eb CD E4 23                		mov.B	35[r14], r4
 7030 00ee 7A 04                   		bclr #0, r4
 7031 00f0 2E 24                   		bra	.L892
 7032                             	.L869:
5739:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 ELC.PGR1.BYTE &= ~ELC_PB1_MASK;
 7033                             		.loc 1 5739 0
 7034 00f2 CD E4 23                		mov.B	35[r14], r4
 7035 00f5 7A 14                   		bclr #1, r4
 7036 00f7 2E 1D                   		bra	.L892
 7037                             	.L870:
5742:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 ELC.PGR1.BYTE &= ~ELC_PB3_MASK;
 7038                             		.loc 1 5742 0
 7039 00f9 CD E4 23                		mov.B	35[r14], r4
 7040 00fc 7A 34                   		bclr #3, r4
 7041 00fe 2E 16                   		bra	.L892
 7042                             	.L867:
5745:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 ELC.PGR1.BYTE &= ~ELC_PB5_MASK;
 7043                             		.loc 1 5745 0
 7044 0100 CD E4 23                		mov.B	35[r14], r4
 7045 0103 7A 54                   		bclr #5, r4
 7046 0105 2E 0F                   		bra	.L892
 7047                             	.L868:
5748:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 ELC.PGR1.BYTE &= ~ELC_PB6_MASK;
 7048                             		.loc 1 5748 0
 7049 0107 CD E4 23                		mov.B	35[r14], r4
 7050 010a 7A 64                   		bclr #6, r4
 7051 010c 08                      		bra	.L892
 7052                             	.L871:
5751:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 ELC.PGR1.BYTE &= ~ELC_PB7_MASK;
 7053                             		.loc 1 5751 0
 7054 010d CD E4 23                		mov.B	35[r14], r4
 7055 0110 75 24 7F                		and #0x7f, r4
 7056 0113 03                      		.balign 2,3,5
 7057                             	.L892:
 7058 0114 C7 E4 23                		mov.B	r4, 35[r14]
5752:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 break;
 7059                             		.loc 1 5752 0
 7060 0117 02                      		rts
 7061                             	.LVL536:
 7062                             	.L889:
5757:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             DISABLE_ELC_HW_MODULE();
 7063                             		.loc 1 5757 0
 7064 0118 FB EE 00 00 08          		mov.L	#0x80000, r14
 7065 011d FA E9 FF 01 0F A5       		mov.W	#0xffffa50f, 1022[r14]
 7066 0123 ED E4 05                		mov.L	20[r14], r4
 7067 0126 78 94                   		bset #9, r4
 7068 0128 E7 E4 05                		mov.L	r4, 20[r14]
 7069 012b FA E9 FF 01 00 A5       		mov.W	#0xffffa500, 1022[r14]
5758:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             ICU.IPR[_HAL_RX210_ICU_ELC_ELSR18L_VECTOR].BYTE = 0x00;
 7070                             		.loc 1 5758 0
 7071 0131 FB EE 00 70 08          		mov.L	#0x87000, r14
 7072 0136 CB E3 6A 03             		mov.B	r3, 874[r14]
5759:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_INTERRUPT_REQUEST_ENABLE_REGISTER(_HAL_RX210_ICU_ELC_IER_REGISTER) &= ~_HAL_
 7073                             		.loc 1 5759 0
 7074 013a F2 EA 0D 02             		bclr #2, 525[r14].B
 7075                             	.LVL537:
 7076                             	.L854:
 7077 013e 02                      		rts
 7078                             	.LFE105:
 7080 013f 03                      		.section	.text.IRQ_Acknowledge,"ax",@progbits
 7081                             		.global	_IRQ_Acknowledge
 7083                             	_IRQ_Acknowledge:
 7084                             	.LFB106:
5771:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 7085                             		.loc 1 5771 0
 7086                             	.LVL538:
5772:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(irq_id)
 7087                             		.loc 1 5772 0
 7088 0000 5B 1E                   		movu.B	r1, r14
 7089 0002 61 1E                   		cmp	#1, r14
 7090 0004 20 1A                   		beq	.L896
 7091 0006 61 0E                   		cmp	#0, r14
 7092 0008 20 0C                   		beq	.L895
 7093 000a 61 2E                   		cmp	#2, r14
 7094 000c 20 1D                   		beq	.L897
 7095 000e 61 3E                   		cmp	#3, r14
 7096 0010 21 2F                   		bne	.L918
 7097 0012 2E 22                   		bra	.L898
 7098                             	.L895:
5775:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_IRQ0_VECTOR) = 0x00;
 7099                             		.loc 1 5775 0
 7100 0014 FB EE 00 70 08          		mov.L	#0x87000, r14
 7101 0019 C7 E1 40                		mov.B	r1, 64[r14]
5776:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7102                             		.loc 1 5776 0
 7103 001c 2E 32                   		bra	.L900
 7104                             	.L896:
5778:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_IRQ1_VECTOR) = 0x00;
 7105                             		.loc 1 5778 0
 7106 001e FB EE 00 70 08          		mov.L	#0x87000, r14
 7107 0023 F9 E4 41 00             		mov.B	#0, 65[r14]
5779:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7108                             		.loc 1 5779 0
 7109 0027 2E 27                   		bra	.L900
 7110                             	.L897:
5781:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_IRQ5_VECTOR) = 0x00;
 7111                             		.loc 1 5781 0
 7112 0029 FB EE 00 70 08          		mov.L	#0x87000, r14
 7113 002e F9 E4 45 00             		mov.B	#0, 69[r14]
5782:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7114                             		.loc 1 5782 0
 7115 0032 2E 1C                   		bra	.L900
 7116                             	.L898:
5784:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_IRQ6_VECTOR) = 0x00;
 7117                             		.loc 1 5784 0
 7118 0034 FB EE 00 70 08          		mov.L	#0x87000, r14
 7119 0039 F9 E4 46 00             		mov.B	#0, 70[r14]
5785:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7120                             		.loc 1 5785 0
 7121 003d 2E 11                   		bra	.L900
 7122                             	.L918:
5787:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(    irq_id == RX210_ELCIRQ0_PB0
 7123                             		.loc 1 5787 0
 7124 003f 61 4E                   		cmp	#4, r14
 7125 0041 21 0D                   		bne	.L900
 7126                             	.LVL539:
 7127 0043 03                      		.balign 2,3,4
 7128                             	.L902:
5794:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_IRQ_INTERRUPT_REQUEST_REGISTER(_HAL_RX210_ICU_ELC_ELSR18L_VECTOR) = 0x00;
 7129                             		.loc 1 5794 0
 7130 0044 FB EE 00 70 08          		mov.L	#0x87000, r14
 7131 0049 F9 E4 6A 00             		mov.B	#0, 106[r14]
 7132 004d 02                      		rts
 7133                             	.LVL540:
 7134                             	.L900:
5788:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_IRQ_PB1
 7135                             		.loc 1 5788 0
 7136 004e 5B 11                   		movu.B	r1, r1
 7137 0050 61 71                   		cmp	#7, r1
 7138 0052 20 F2                   		beq	.L902
5789:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_IRQ_PB3
 7139                             		.loc 1 5789 0
 7140 0054 61 81                   		cmp	#8, r1
 7141 0056 20 EE                   		beq	.L902
5790:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_ELCIRQ5_PB5
 7142                             		.loc 1 5790 0
 7143 0058 61 51                   		cmp	#5, r1
 7144 005a 20 EA                   		beq	.L902
5791:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_ELCIRQ6_PB6
 7145                             		.loc 1 5791 0
 7146 005c 61 61                   		cmp	#6, r1
 7147 005e 20 E6                   		beq	.L902
5792:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             || irq_id == RX210_IRQ_PB7)
 7148                             		.loc 1 5792 0
 7149 0060 61 91                   		cmp	#9, r1
 7150 0062 20 E2                   		beq	.L902
 7151 0064 02                      		rts
 7152                             	.LFE106:
 7154 0065 03                      		.section	.text.IRQ_GetEdge,"ax",@progbits
 7155                             		.global	_IRQ_GetEdge
 7157                             	_IRQ_GetEdge:
 7158                             	.LFB107:
5806:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 7159                             		.loc 1 5806 0
 7160                             	.LVL541:
5811:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(irq_id)
 7161                             		.loc 1 5811 0
 7162 0000 5B 14                   		movu.B	r1, r4
 7163 0002 61 14                   		cmp	#1, r4
 7164 0004 20 1B                   		beq	.L922
 7165 0006 61 04                   		cmp	#0, r4
 7166 0008 20 0C                   		beq	.L921
 7167 000a 61 24                   		cmp	#2, r4
 7168 000c 20 1E                   		beq	.L923
 7169 000e 61 34                   		cmp	#3, r4
 7170 0010 21 36                   		bne	.L944
 7171 0012 2E 23                   		bra	.L924
 7172                             	.L921:
5814:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(_HAL_RX210_IRQ_CONTROL_REGISTER(IRQ0) == _HAL_RX210_DETECTION_SENSE_RAISING_EDGE)
 7173                             		.loc 1 5814 0
 7174 0014 FB EE 00 70 08          		mov.L	#0x87000, r14
 7175 0019 CE EE 00 05             		mov.B	1280[r14], r14
 7176 001d 2E 21                   		bra	.L945
 7177                             	.L922:
5818:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(_HAL_RX210_IRQ_CONTROL_REGISTER(IRQ1) == _HAL_RX210_DETECTION_SENSE_RAISING_EDGE)
 7178                             		.loc 1 5818 0
 7179 001f FB EE 00 70 08          		mov.L	#0x87000, r14
 7180 0024 CE EE 01 05             		mov.B	1281[r14], r14
 7181 0028 2E 16                   		bra	.L945
 7182                             	.L923:
5822:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(_HAL_RX210_IRQ_CONTROL_REGISTER(IRQ5) == _HAL_RX210_DETECTION_SENSE_RAISING_EDGE)
 7183                             		.loc 1 5822 0
 7184 002a FB EE 00 70 08          		mov.L	#0x87000, r14
 7185 002f CE EE 05 05             		mov.B	1285[r14], r14
 7186 0033 2E 0B                   		bra	.L945
 7187                             	.L924:
5826:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(_HAL_RX210_IRQ_CONTROL_REGISTER(IRQ6) == _HAL_RX210_DETECTION_SENSE_RAISING_EDGE)
 7188                             		.loc 1 5826 0
 7189 0035 FB EE 00 70 08          		mov.L	#0x87000, r14
 7190 003a CE EE 06 05             		mov.B	1286[r14], r14
 7191                             		.balign 2,3,1
 7192                             	.L945:
 7193 003e 5B EE                   		movu.B	r14, r14
5807:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	bool_t retVal = 0;
 7194                             		.loc 1 5807 0
 7195 0040 61 8E                   		cmp	#8, r14
 7196 0042 FC DB E0                		sceq.L	r14
 7197 0045 0F                      		bra	.L928
 7198                             	.L944:
 7199 0046 66 0E                   		mov.L	#0, r14
5830:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(irq_id == RX210_ELCIRQ0_PB0 || irq_id == RX210_IRQ_PB1 || irq_id == RX210_IRQ_PB3 || irq_id 
 7200                             		.loc 1 5830 0
 7201 0048 61 44                   		cmp	#4, r4
 7202 004a 20 16                   		beq	.L926
 7203                             		.balign 2,3,1
 7204                             	.L928:
5830:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(irq_id == RX210_ELCIRQ0_PB0 || irq_id == RX210_IRQ_PB1 || irq_id == RX210_IRQ_PB3 || irq_id 
 7205                             		.loc 1 5830 0 is_stmt 0 discriminator 1
 7206 004c 5B 11                   		movu.B	r1, r1
 7207 004e 61 71                   		cmp	#7, r1
 7208 0050 20 10                   		beq	.L926
 7209 0052 61 81                   		cmp	#8, r1
 7210 0054 20 0C                   		beq	.L926
 7211 0056 61 51                   		cmp	#5, r1
 7212 0058 10                      		beq	.L926
 7213 0059 61 61                   		cmp	#6, r1
 7214 005b 15                      		beq	.L926
 7215 005c 61 91                   		cmp	#9, r1
 7216 005e 21 12                   		bne	.L927
 7217                             	.LVL542:
 7218                             		.balign 2,3,4
 7219                             	.L926:
5832:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if((ELC.PGC1.BYTE &0x03) == _HAL_RX210_DETECTION_SENSE_ELC_RAISING_EDGE)
 7220                             		.loc 1 5832 0 is_stmt 1
 7221 0060 FB 4E 00 B1 08          		mov.L	#0x8b100, r4
 7222                             	.LVL543:
 7223 0065 CD 44 25                		mov.B	37[r4], r4
 7224 0068 FD 74 C4 03             		tst	#3, r4
 7225 006c 1C                      		bne	.L927
5833:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
 7226                             		.loc 1 5833 0
 7227 006d 66 1E                   		mov.L	#1, r14
 7228 006f 03                      		.balign 2,3,1
 7229                             	.L927:
 7230                             	.LVL544:
5836:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end IRQ_GetEdge*/
 7231                             		.loc 1 5836 0
 7232 0070 EF E1                   		mov.L	r14, r1
 7233 0072 02                      		rts
 7234                             	.LFE107:
 7236 0073 03                      		.section	.text.IRQ_pinIsHigh,"ax",@progbits
 7237                             		.global	_IRQ_pinIsHigh
 7239                             	_IRQ_pinIsHigh:
 7240                             	.LFB108:
5845:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 7241                             		.loc 1 5845 0
 7242                             	.LVL545:
5849:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(irq_id)
 7243                             		.loc 1 5849 0
 7244 0000 5B 11                   		movu.B	r1, r1
 7245 0002 61 91                   		cmp	#9, r1
 7246 0004 24 76                   		bgtu	.L959
 7247 0006 FB E2 00 00 00 00       		mov.L	#.L958, r14
 7248 000c FE 61 EE                		mov.L	[r1,r14], r14
 7249                             		
 7250 000f 7F 0E                   	1:jmp	r14
 7251                             		.section	.rodata.IRQ_pinIsHigh,"a",@progbits
 7252                             		.balign 4
 7253                             		.balign 4
 7254                             	.L958:
 7255 0000 00 00 00 11             		.long .L948
 7256 0004 00 00 00 18             		.long .L949
 7257 0008 00 00 00 24             		.long .L950
 7258 000c 00 00 00 2B             		.long .L951
 7259 0010 00 00 00 32             		.long .L952
 7260 0014 00 00 00 55             		.long .L953
 7261 0018 00 00 00 61             		.long .L954
 7262 001c 00 00 00 3C             		.long .L955
 7263 0020 00 00 00 49             		.long .L956
 7264 0024 00 00 00 6F             		.long .L957
 7265                             		.section	.text.IRQ_pinIsHigh
 7266                             	.L948:
5852:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(IRQ0_PIN_STATUS)
 7267                             		.loc 1 5852 0
 7268 0011 FB EE 11 C0 08          		mov.L	#0x8c011, r14
 7269 0016 2E 2C                   		bra	.L961
 7270                             	.L949:
5856:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(IRQ1_PIN_STATUS)
 7271                             		.loc 1 5856 0
 7272 0018 FB EE 11 C0 08          		mov.L	#0x8c011, r14
 7273 001d CD E1 40                		mov.B	64[r14], r1
 7274                             	.LVL546:
 7275 0020 68 21                   		shlr	#2, r1
 7276 0022 2E 4A                   		bra	.L960
 7277                             	.L950:
5860:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(IRQ5_PIN_STATUS)
 7278                             		.loc 1 5860 0
 7279 0024 FB EE 01 C0 08          		mov.L	#0x8c001, r14
 7280 0029 2E 31                   		bra	.L962
 7281                             	.L951:
5864:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(IRQ6_PIN_STATUS)
 7282                             		.loc 1 5864 0
 7283 002b FB EE 0A C0 08          		mov.L	#0x8c00a, r14
 7284 0030 2E 1E                   		bra	.L963
 7285                             	.L952:
5868:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(ELC_IRQ_PB0_STATUS)
 7286                             		.loc 1 5868 0
 7287 0032 FB EE 0B C0 08          		mov.L	#0x8c00b, r14
 7288 0037 CD E1 40                		mov.B	64[r14], r1
 7289 003a 2E 32                   		bra	.L960
 7290                             	.L955:
5872:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(ELC_IRQ_PB1_STATUS)
 7291                             		.loc 1 5872 0
 7292 003c FB EE 0B C0 08          		mov.L	#0x8c00b, r14
 7293 0041 03                      		.balign 2,3,5
 7294                             	.L961:
 7295 0042 CD E1 40                		mov.B	64[r14], r1
 7296 0045 68 11                   		shlr	#1, r1
 7297 0047 2E 25                   		bra	.L960
 7298                             	.L956:
5876:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(ELC_IRQ_PB3_STATUS)
 7299                             		.loc 1 5876 0
 7300 0049 FB EE 0B C0 08          		mov.L	#0x8c00b, r14
 7301                             		.balign 2,3,5
 7302                             	.L963:
 7303 004e CD E1 40                		mov.B	64[r14], r1
 7304 0051 68 31                   		shlr	#3, r1
 7305 0053 2E 19                   		bra	.L960
 7306                             	.L953:
5880:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(ELC_IRQ_PB5_STATUS)
 7307                             		.loc 1 5880 0
 7308 0055 FB EE 0B C0 08          		mov.L	#0x8c00b, r14
 7309                             		.balign 2,3,5
 7310                             	.L962:
 7311 005a CD E1 40                		mov.B	64[r14], r1
 7312 005d 68 51                   		shlr	#5, r1
 7313 005f 2E 0D                   		bra	.L960
 7314                             	.L954:
5884:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(ELC_IRQ_PB6_STATUS)
 7315                             		.loc 1 5884 0
 7316 0061 FB EE 0B C0 08          		mov.L	#0x8c00b, r14
 7317 0066 CD E1 40                		mov.B	64[r14], r1
 7318 0069 68 61                   		shlr	#6, r1
 7319 006b 03                      		.balign 2,3,1
 7320                             	.L960:
5846:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	bool_t retVal = 0;
 7321                             		.loc 1 5846 0
 7322 006c 64 11                   		and #1, r1
 7323 006e 02                      		rts
 7324                             	.L957:
5888:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(ELC_IRQ_PB7_STATUS)
 7325                             		.loc 1 5888 0
 7326 006f FB EE 0B C0 08          		mov.L	#0x8c00b, r14
 7327 0074 CD E1 40                		mov.B	64[r14], r1
5846:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** 	bool_t retVal = 0;
 7328                             		.loc 1 5846 0
 7329 0077 69 F1                   		shlr	#31, r1
 7330 0079 02                      		rts
 7331                             	.L959:
 7332 007a 66 01                   		mov.L	#0, r1
 7333                             	.LVL547:
5893:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end IRQ_pinIsHigh*/
 7334                             		.loc 1 5893 0
 7335 007c 02                      		rts
 7336                             	.LFE108:
 7338 007d 03                      		.section	.text.UART_TxByte,"ax",@progbits
 7339                             		.global	_UART_TxByte
 7341                             	_UART_TxByte:
 7342                             	.LFB109:
5976:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 7343                             		.loc 1 5976 0
 7344                             	.LVL548:
5979:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(dev)
 7345                             		.loc 1 5979 0
 7346 0000 61 11                   		cmp	#1, r1
 7347 0002 20 1B                   		beq	.L967
 7348 0004 2A 08                   		bgt	.L970
 7349 0006 61 01                   		cmp	#0, r1
 7350 0008 20 0E                   		beq	.L966
 7351 000a 2E 3F                   		bra	.L965
 7352                             	.L970:
 7353 000c 61 51                   		cmp	#5, r1
 7354 000e 20 21                   		beq	.L968
 7355 0010 61 C1                   		cmp	#12, r1
 7356 0012 21 37                   		bne	.L965
 7357 0014 2E 21                   		bra	.L969
 7358                             	.L966:
5982:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         status = _HAL_RX200_UART_SSR_REG(0);
 7359                             		.loc 1 5982 0
 7360 0016 FB EE 00 A0 08          		mov.L	#0x8a000, r14
 7361 001b 2E 1F                   		bra	.L979
 7362                             	.L967:
5990:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         status = _HAL_RX200_UART_SSR_REG(1);
 7363                             		.loc 1 5990 0
 7364 001d FB 4E 20 A0 08          		mov.L	#0x8a020, r4
 7365                             	.LVL549:
 7366 0022 CD 4E 04                		mov.B 4[r4], r14
 7367 0025 64 4E                   		and #4, r14
5991:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(status & _HAL_RX200_UART_SSR_TEND_MASK )
 7368                             		.loc 1 5991 0
 7369 0027 20 2C                   		beq	.L973
5993:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             UART_WriteData(1, *chPtr);
 7370                             		.loc 1 5993 0
 7371 0029 CC 2E                   		mov.B	[r2], r14
 7372 002b C7 4E 03                		mov.B	r14, 3[r4]
 7373                             	.LVL550:
 7374 002e 02                      		rts
 7375                             	.LVL551:
 7376                             	.L968:
5998:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         status = _HAL_RX200_UART_SSR_REG(5);
 7377                             		.loc 1 5998 0
 7378 002f FB EE A0 A0 08          		mov.L	#0x8a0a0, r14
 7379 0034 0E                      		bra	.L979
 7380                             	.L969:
6006:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         status = _HAL_RX200_UART_SSR_REG(12);
 7381                             		.loc 1 6006 0
 7382 0035 FB EE 00 B3 08          		mov.L	#0x8b300, r14
 7383                             		.balign 2,3,5
 7384                             	.L979:
 7385                             	.LVL552:
 7386 003a CD E1 04                		mov.B 4[r14], r1
 7387 003d 64 41                   		and #4, r1
6007:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if(status & _HAL_RX200_UART_SSR_TEND_MASK )
 7388                             		.loc 1 6007 0
 7389 003f 20 16                   		beq	.L971
6009:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             UART_WriteData(12, *chPtr);
 7390                             		.loc 1 6009 0
 7391 0041 CC 24                   		mov.B	[r2], r4
 7392 0043 C7 E4 03                		mov.B	r4, 3[r14]
 7393                             	.LVL553:
6010:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             retVal = 1;
 7394                             		.loc 1 6010 0
 7395 0046 66 11                   		mov.L	#1, r1
 7396 0048 02                      		rts
 7397                             	.LVL554:
 7398                             	.L965:
6014:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 7399                             		.loc 1 6014 0
 7400 0049 75 41 30                		mov.L	#48, r1
 7401                             	.LVL555:
 7402 004c 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 7403                             	.LVL556:
5978:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     int retVal = 0;
 7404                             		.loc 1 5978 0
 7405 0050 66 01                   		mov.L	#0, r1
6015:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7406                             		.loc 1 6015 0
 7407 0052 02                      		rts
 7408                             	.LVL557:
 7409                             	.L973:
5978:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     int retVal = 0;
 7410                             		.loc 1 5978 0
 7411 0053 EF E1                   		mov.L	r14, r1
 7412                             	.LVL558:
 7413                             	.L971:
6018:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end UART_TxByte*/
 7414                             		.loc 1 6018 0
 7415 0055 02                      		rts
 7416                             	.LFE109:
 7418                             		.section	.text.ADC_ConfigurePinAsChannel,"ax",@progbits
 7419                             		.global	_ADC_ConfigurePinAsChannel
 7421                             	_ADC_ConfigurePinAsChannel:
 7422                             	.LFB110:
6055:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 7423                             		.loc 1 6055 0
 7424                             	.LVL559:
6056:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     DISABLE_PORT_REGISTER_WRITE_PROTECTION();
 7425                             		.loc 1 6056 0
 7426 0000 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 7427 0005 F9 E4 1F 00             		mov.B	#0, 31[r14]
 7428 0009 F1 E6 1F                		bset #6, 31[r14].B
6057:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch((uint8_t)channel)
 7429                             		.loc 1 6057 0
 7430 000c 5B 11                   		movu.B	r1, r1
 7431 000e 61 D1                   		cmp	#13, r1
 7432 0010 25 05 38 CE 00          		bgtu	.L982
 7433 0015 FB E2 00 00 00 00       		mov.L	#.L991, r14
 7434 001b FE 61 EE                		mov.L	[r1,r14], r14
 7435                             		
 7436 001e 7F 0E                   	1:jmp	r14
 7437                             		.section	.rodata.ADC_ConfigurePinAsChannel,"a",@progbits
 7438                             		.balign 4
 7439                             		.balign 4
 7440                             	.L991:
 7441 0000 00 00 00 20             		.long .L983
 7442 0004 00 00 00 39             		.long .L984
 7443 0008 00 00 00 52             		.long .L985
 7444 000c 00 00 00 6A             		.long .L986
 7445 0010 00 00 00 82             		.long .L987
 7446 0014 00 00 00 E0             		.long .L982
 7447 0018 00 00 00 9A             		.long .L988
 7448 001c 00 00 00 E0             		.long .L982
 7449 0020 00 00 00 B2             		.long .L989
 7450 0024 00 00 00 E0             		.long .L982
 7451 0028 00 00 00 E0             		.long .L982
 7452 002c 00 00 00 E0             		.long .L982
 7453 0030 00 00 00 E0             		.long .L982
 7454 0034 00 00 00 CA             		.long .L990
 7455                             		.section	.text.ADC_ConfigurePinAsChannel
 7456                             	.L983:
6060:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_PERIPH(0);
 7457                             		.loc 1 6060 0
 7458 0020 FB EE 04 C0 08          		mov.L	#0x8c004, r14
 7459 0025 F1 E0 60                		bset #0, 96[r14].B
6061:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_PIN_ENABLE_AS_ANALOG(0);
 7460                             		.loc 1 6061 0
 7461 0028 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 7462 002d CD E4 60                		mov.B	96[r14], r4
 7463 0030 75 34 80                		or	#0xffffff80, r4
 7464 0033 C7 E4 60                		mov.B	r4, 96[r14]
6062:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7465                             		.loc 1 6062 0
 7466 0036 38 AA 00                		bra	.L982
 7467                             	.L984:
6064:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_PERIPH(1);
 7468                             		.loc 1 6064 0
 7469 0039 FB EE 04 C0 08          		mov.L	#0x8c004, r14
 7470 003e F1 E1 60                		bset #1, 96[r14].B
6065:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_PIN_ENABLE_AS_ANALOG(1);
 7471                             		.loc 1 6065 0
 7472 0041 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 7473 0046 CD E4 61                		mov.B	97[r14], r4
 7474 0049 75 34 80                		or	#0xffffff80, r4
 7475 004c C7 E4 61                		mov.B	r4, 97[r14]
6066:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7476                             		.loc 1 6066 0
 7477 004f 38 91 00                		bra	.L982
 7478                             	.L985:
6068:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_PERIPH(2);
 7479                             		.loc 1 6068 0
 7480 0052 FB EE 04 C0 08          		mov.L	#0x8c004, r14
 7481 0057 F1 E2 60                		bset #2, 96[r14].B
6069:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_PIN_ENABLE_AS_ANALOG(2);
 7482                             		.loc 1 6069 0
 7483 005a FB EE 00 C1 08          		mov.L	#0x8c100, r14
 7484 005f CD E4 62                		mov.B	98[r14], r4
 7485 0062 75 34 80                		or	#0xffffff80, r4
 7486 0065 C7 E4 62                		mov.B	r4, 98[r14]
6070:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7487                             		.loc 1 6070 0
 7488 0068 2E 78                   		bra	.L982
 7489                             	.L986:
6072:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_PERIPH(3);
 7490                             		.loc 1 6072 0
 7491 006a FB EE 04 C0 08          		mov.L	#0x8c004, r14
 7492 006f F1 E3 60                		bset #3, 96[r14].B
6073:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_PIN_ENABLE_AS_ANALOG(3);
 7493                             		.loc 1 6073 0
 7494 0072 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 7495 0077 CD E4 63                		mov.B	99[r14], r4
 7496 007a 75 34 80                		or	#0xffffff80, r4
 7497 007d C7 E4 63                		mov.B	r4, 99[r14]
6074:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7498                             		.loc 1 6074 0
 7499 0080 2E 60                   		bra	.L982
 7500                             	.L987:
6076:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_PERIPH(4);
 7501                             		.loc 1 6076 0
 7502 0082 FB EE 04 C0 08          		mov.L	#0x8c004, r14
 7503 0087 F1 E4 60                		bset #4, 96[r14].B
6077:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_PIN_ENABLE_AS_ANALOG(4);
 7504                             		.loc 1 6077 0
 7505 008a FB EE 00 C1 08          		mov.L	#0x8c100, r14
 7506 008f CD E4 64                		mov.B	100[r14], r4
 7507 0092 75 34 80                		or	#0xffffff80, r4
 7508 0095 C7 E4 64                		mov.B	r4, 100[r14]
6078:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7509                             		.loc 1 6078 0
 7510 0098 2E 48                   		bra	.L982
 7511                             	.L988:
6080:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_PERIPH(6);
 7512                             		.loc 1 6080 0
 7513 009a FB EE 04 C0 08          		mov.L	#0x8c004, r14
 7514 009f F1 E6 60                		bset #6, 96[r14].B
6081:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_PIN_ENABLE_AS_ANALOG(6);
 7515                             		.loc 1 6081 0
 7516 00a2 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 7517 00a7 CD E4 66                		mov.B	102[r14], r4
 7518 00aa 75 34 80                		or	#0xffffff80, r4
 7519 00ad C7 E4 66                		mov.B	r4, 102[r14]
6082:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7520                             		.loc 1 6082 0
 7521 00b0 2E 30                   		bra	.L982
 7522                             	.L989:
6084:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_PERIPH(8);
 7523                             		.loc 1 6084 0
 7524 00b2 FB EE 0E C0 08          		mov.L	#0x8c00e, r14
 7525 00b7 F1 E0 60                		bset #0, 96[r14].B
6085:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_PIN_ENABLE_AS_ANALOG(8);
 7526                             		.loc 1 6085 0
 7527 00ba FB EE 00 C1 08          		mov.L	#0x8c100, r14
 7528 00bf CD E4 B0                		mov.B	176[r14], r4
 7529 00c2 75 34 80                		or	#0xffffff80, r4
 7530 00c5 C7 E4 B0                		mov.B	r4, 176[r14]
6086:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7531                             		.loc 1 6086 0
 7532 00c8 2E 18                   		bra	.L982
 7533                             	.L990:
6088:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_PERIPH(13);
 7534                             		.loc 1 6088 0
 7535 00ca FB EE 0E C0 08          		mov.L	#0x8c00e, r14
 7536 00cf F1 E5 60                		bset #5, 96[r14].B
6089:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_PIN_ENABLE_AS_ANALOG(13);
 7537                             		.loc 1 6089 0
 7538 00d2 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 7539 00d7 CD E4 B5                		mov.B	181[r14], r4
 7540 00da 75 34 80                		or	#0xffffff80, r4
 7541 00dd C7 E4 B5                		mov.B	r4, 181[r14]
 7542                             		.balign 2,3,4
 7543                             	.L982:
6092:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ENABLE_PORT_REGISTER_WRITE_PROTECTION();
 7544                             		.loc 1 6092 0
 7545 00e0 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 7546 00e5 F9 E4 1F 00             		mov.B	#0, 31[r14]
 7547 00e9 F9 E4 1F 80             		mov.B	#0xffffff80, 31[r14]
 7548 00ed 02                      		rts
 7549                             	.LFE110:
 7551                             		.section	.text.ADC_DeConfigurePinAsChannel,"ax",@progbits
 7552                             		.global	_ADC_DeConfigurePinAsChannel
 7554                             	_ADC_DeConfigurePinAsChannel:
 7555                             	.LFB111:
6102:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 7556                             		.loc 1 6102 0
 7557                             	.LVL560:
6103:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     DISABLE_PORT_REGISTER_WRITE_PROTECTION();
 7558                             		.loc 1 6103 0
 7559 0000 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 7560 0005 F9 E4 1F 00             		mov.B	#0, 31[r14]
 7561 0009 F1 E6 1F                		bset #6, 31[r14].B
6104:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(channel)
 7562                             		.loc 1 6104 0
 7563 000c 5B 11                   		movu.B	r1, r1
 7564 000e 61 D1                   		cmp	#13, r1
 7565 0010 25 05 38 D4 00          		bgtu	.L993
 7566 0015 FB E2 00 00 00 00       		mov.L	#.L1002, r14
 7567 001b FE 61 EE                		mov.L	[r1,r14], r14
 7568                             		
 7569 001e 7F 0E                   	1:jmp	r14
 7570                             		.section	.rodata.ADC_DeConfigurePinAsChannel,"a",@progbits
 7571                             		.balign 4
 7572                             		.balign 4
 7573                             	.L1002:
 7574 0000 00 00 00 20             		.long .L994
 7575 0004 00 00 00 39             		.long .L995
 7576 0008 00 00 00 52             		.long .L996
 7577 000c 00 00 00 6A             		.long .L997
 7578 0010 00 00 00 82             		.long .L998
 7579 0014 00 00 00 E6             		.long .L993
 7580 0018 00 00 00 9A             		.long .L999
 7581 001c 00 00 00 E6             		.long .L993
 7582 0020 00 00 00 B2             		.long .L1000
 7583 0024 00 00 00 E6             		.long .L993
 7584 0028 00 00 00 E6             		.long .L993
 7585 002c 00 00 00 E6             		.long .L993
 7586 0030 00 00 00 E6             		.long .L993
 7587 0034 00 00 00 D0             		.long .L1001
 7588                             		.section	.text.ADC_DeConfigurePinAsChannel
 7589                             	.L994:
6107:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_IO(0);
 7590                             		.loc 1 6107 0
 7591 0020 FB EE 04 C0 08          		mov.L	#0x8c004, r14
 7592 0025 F1 E8 60                		bclr #0, 96[r14].B
 7593 0028 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 7594 002d CD E4 60                		mov.B	96[r14], r4
 7595 0030 75 24 7F                		and #0x7f, r4
 7596 0033 C7 E4 60                		mov.B	r4, 96[r14]
6108:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7597                             		.loc 1 6108 0
 7598 0036 38 B0 00                		bra	.L993
 7599                             	.L995:
6110:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_IO(1);
 7600                             		.loc 1 6110 0
 7601 0039 FB EE 04 C0 08          		mov.L	#0x8c004, r14
 7602 003e F1 E9 60                		bclr #1, 96[r14].B
 7603 0041 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 7604 0046 CD E4 61                		mov.B	97[r14], r4
 7605 0049 75 24 7F                		and #0x7f, r4
 7606 004c C7 E4 61                		mov.B	r4, 97[r14]
6111:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7607                             		.loc 1 6111 0
 7608 004f 38 97 00                		bra	.L993
 7609                             	.L996:
6113:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_IO(2);
 7610                             		.loc 1 6113 0
 7611 0052 FB EE 04 C0 08          		mov.L	#0x8c004, r14
 7612 0057 F1 EE 60                		bclr #6, 96[r14].B
 7613 005a FB EE 00 C1 08          		mov.L	#0x8c100, r14
 7614 005f CD E4 62                		mov.B	98[r14], r4
 7615 0062 75 24 7F                		and #0x7f, r4
 7616 0065 C7 E4 62                		mov.B	r4, 98[r14]
6114:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7617                             		.loc 1 6114 0
 7618 0068 2E 7E                   		bra	.L993
 7619                             	.L997:
6116:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_IO(3);
 7620                             		.loc 1 6116 0
 7621 006a FB EE 04 C0 08          		mov.L	#0x8c004, r14
 7622 006f F1 EB 60                		bclr #3, 96[r14].B
 7623 0072 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 7624 0077 CD E4 63                		mov.B	99[r14], r4
 7625 007a 75 24 7F                		and #0x7f, r4
 7626 007d C7 E4 63                		mov.B	r4, 99[r14]
6117:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7627                             		.loc 1 6117 0
 7628 0080 2E 66                   		bra	.L993
 7629                             	.L998:
6119:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_IO(4);
 7630                             		.loc 1 6119 0
 7631 0082 FB EE 04 C0 08          		mov.L	#0x8c004, r14
 7632 0087 F1 EC 60                		bclr #4, 96[r14].B
 7633 008a FB EE 00 C1 08          		mov.L	#0x8c100, r14
 7634 008f CD E4 64                		mov.B	100[r14], r4
 7635 0092 75 24 7F                		and #0x7f, r4
 7636 0095 C7 E4 64                		mov.B	r4, 100[r14]
6120:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7637                             		.loc 1 6120 0
 7638 0098 2E 4E                   		bra	.L993
 7639                             	.L999:
6122:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_IO(6);
 7640                             		.loc 1 6122 0
 7641 009a FB EE 04 C0 08          		mov.L	#0x8c004, r14
 7642 009f F1 EE 60                		bclr #6, 96[r14].B
 7643 00a2 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 7644 00a7 CD E4 66                		mov.B	102[r14], r4
 7645 00aa 75 24 7F                		and #0x7f, r4
 7646 00ad C7 E4 66                		mov.B	r4, 102[r14]
6123:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7647                             		.loc 1 6123 0
 7648 00b0 2E 36                   		bra	.L993
 7649                             	.L1000:
6125:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_IO(8);
 7650                             		.loc 1 6125 0
 7651 00b2 FB EE 0E C0 08          		mov.L	#0x8c00e, r14
 7652 00b7 CD E4 60                		mov.B	96[r14], r4
 7653 00ba 75 24 7F                		and #0x7f, r4
 7654 00bd C7 E4 60                		mov.B	r4, 96[r14]
 7655 00c0 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 7656 00c5 CD E4 B0                		mov.B	176[r14], r4
 7657 00c8 75 24 7F                		and #0x7f, r4
 7658 00cb C7 E4 B0                		mov.B	r4, 176[r14]
6126:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7659                             		.loc 1 6126 0
 7660 00ce 2E 18                   		bra	.L993
 7661                             	.L1001:
6128:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_CHx_ENABLE_AS_IO(13);
 7662                             		.loc 1 6128 0
 7663 00d0 FB EE 0E C0 08          		mov.L	#0x8c00e, r14
 7664 00d5 F1 E8 60                		bclr #0, 96[r14].B
 7665 00d8 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 7666 00dd CD E4 B5                		mov.B	181[r14], r4
 7667 00e0 75 24 7F                		and #0x7f, r4
 7668 00e3 C7 E4 B5                		mov.B	r4, 181[r14]
 7669                             		.balign 2,3,4
 7670                             	.L993:
6131:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ENABLE_PORT_REGISTER_WRITE_PROTECTION();
 7671                             		.loc 1 6131 0
 7672 00e6 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 7673 00eb F9 E4 1F 00             		mov.B	#0, 31[r14]
 7674 00ef F9 E4 1F 80             		mov.B	#0xffffff80, 31[r14]
 7675 00f3 02                      		rts
 7676                             	.LFE111:
 7678                             		.section	.text.ADC_GetChannel,"ax",@progbits
 7679                             		.global	_ADC_GetChannel
 7681                             	_ADC_GetChannel:
 7682                             	.LFB112:
6142:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 7683                             		.loc 1 6142 0
 7684                             	.LVL561:
 7685 0000 FB 42 00 00 00 00       		mov.L	#_ADCMap, r4
6148:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (ADCMap[j].PortAddress == portAddress.basic)
 7686                             		.loc 1 6148 0
 7687 0006 66 0E                   		mov.L	#0, r14
6150:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if (ADCMap[j].PinMask == pinMask)
 7688                             		.loc 1 6150 0
 7689 0008 5B 22                   		movu.B	r2, r2
 7690                             	.LVL562:
 7691                             		.balign 2,3,1
 7692                             	.L1006:
6148:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         if (ADCMap[j].PortAddress == portAddress.basic)
 7693                             		.loc 1 6148 0
 7694 000a EC 45                   		mov.L	[r4], r5
 7695 000c 47 15                   		cmp	r1, r5
 7696 000e 18                      		bne	.L1004
6150:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             if (ADCMap[j].PinMask == pinMask)
 7697                             		.loc 1 6150 0
 7698 000f B1 45                   		movu.B	4[r4], r5
 7699 0011 47 25                   		cmp	r2, r5
 7700 0013 20 0E                   		beq	.L1005
 7701 0015 03                      		.balign 2,3,1
 7702                             	.L1004:
 7703 0016 62 1E                   		add	#1, r14
 7704 0018 62 84                   		add	#8, r4
6146:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     for (j = 0; j < ADC_MAPPED_CHANNELS_NUMBER; j++)
 7705                             		.loc 1 6146 0
 7706 001a 61 8E                   		cmp	#8, r14
 7707 001c 21 EE                   		bne	.L1006
6144:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     bool_t channelfound = FALSE;
 7708                             		.loc 1 6144 0
 7709 001e 66 01                   		mov.L	#0, r1
 7710                             	.LVL563:
 7711 0020 02                      		rts
 7712                             	.LVL564:
 7713                             	.L1005:
6159:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         *pADch = ADCMap[j].channel;
 7714                             		.loc 1 6159 0
 7715 0021 6C 3E                   		shll	#3, r14
 7716 0023 70 EE 04 00 00 00       		add	#_ADCMap+4, r14
 7717 0029 C1 E3 01                		mov.B	1[r14], [r3]
6152:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****                 channelfound = TRUE;
 7718                             		.loc 1 6152 0
 7719 002c 66 11                   		mov.L	#1, r1
 7720                             	.LVL565:
6162:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/*end ADC_GetChannel*/
 7721                             		.loc 1 6162 0
 7722 002e 02                      		rts
 7723                             	.LFE112:
 7725 002f 03                      		.section	.text.ADC_StartConvertionOnChannel,"ax",@progbits
 7726                             		.global	_ADC_StartConvertionOnChannel
 7728                             	_ADC_StartConvertionOnChannel:
 7729                             	.LFB113:
6175:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 7730                             		.loc 1 6175 0
 7731                             	.LVL566:
6176:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if (atdInterrupt == ADC_INT_ENABLED)
 7732                             		.loc 1 6176 0
 7733 0000 5B 24                   		movu.B	r2, r4
 7734 0002 FB EE 00 70 08          		mov.L	#0x87000, r14
 7735 0007 61 14                   		cmp	#1, r4
 7736 0009 21 1B                   		bne	.L1011
6178:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_EnableInterruptA();
 7737                             		.loc 1 6178 0
 7738 000b CB E2 66 03             		mov.B	r2, 870[r14]
 7739 000f F9 E4 66 00             		mov.B	#0, 102[r14]
 7740 0013 FB 4E 00 90 08          		mov.L	#0x89000, r4
 7741 0018 DC 43                   		mov.W	[r4], r3
 7742 001a 78 C3                   		bset #12, r3
 7743 001c D3 43                   		mov.W	r3, [r4]
 7744 001e F2 E6 0C 02             		bset #6, 524[r14].B
 7745 0022 2E 1A                   		bra	.L1012
 7746                             	.L1011:
6182:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ADC_DisableInterruptA();
 7747                             		.loc 1 6182 0
 7748 0024 F2 EE 0C 02             		bclr #6, 524[r14].B
 7749 0028 FB 4E 00 90 08          		mov.L	#0x89000, r4
 7750 002d DC 43                   		mov.W	[r4], r3
 7751 002f 7A C3                   		bclr #12, r3
 7752 0031 D3 43                   		mov.W	r3, [r4]
 7753 0033 FA E4 66 03 00          		mov.B	#0, 870[r14]
 7754 0038 F9 E4 66 00             		mov.B	#0, 102[r14]
 7755                             		.balign 2,3,4
 7756                             	.L1012:
6185:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_SingleConversionA();
 7757                             		.loc 1 6185 0
 7758 003c FB EE 00 90 08          		mov.L	#0x89000, r14
 7759 0041 DC E4                   		mov.W	[r14], r4
 7760 0043 76 24 FF 9F             		and #0xffff9fff, r4
 7761 0047 D3 E4                   		mov.W	r4, [r14]
6186:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_SetSWTrigger();
 7762                             		.loc 1 6186 0
 7763 0049 DC E4                   		mov.W	[r14], r4
 7764 004b 76 24 FF FC             		and #0xfffffcff, r4
 7765 004f D3 E4                   		mov.W	r4, [r14]
6188:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_SelectChannelA(channel);
 7766                             		.loc 1 6188 0
 7767 0051 5B 11                   		movu.B	r1, r1
 7768 0053 66 14                   		mov.L	#1, r4
 7769 0055 FD 62 14                		shll	r1, r4
 7770 0058 D7 E4 02                		mov.W	r4, 4[r14]
6189:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_StartNow();
 7771                             		.loc 1 6189 0
 7772 005b DC E4                   		mov.W	[r14], r4
 7773 005d 76 34 00 80             		or	#0xffff8000, r4
 7774 0061 D3 E4                   		mov.W	r4, [r14]
 7775 0063 02                      		rts
 7776                             	.LFE113:
 7778                             		.section	.text.ADC_Init,"ax",@progbits
 7779                             		.global	_ADC_Init
 7781                             	_ADC_Init:
 7782                             	.LFB114:
6242:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 7783                             		.loc 1 6242 0
6244:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_ClockGateOn();
 7784                             		.loc 1 6244 0
 7785 0000 FB EE 00 00 08          		mov.L	#0x80000, r14
 7786 0005 FA E9 FF 01 0B A5       		mov.W	#0xffffa50b, 1022[r14]
 7787 000b ED E4 04                		mov.L	16[r14], r4
 7788 000e 7B 14                   		bclr #17, r4
 7789 0010 E7 E4 04                		mov.L	r4, 16[r14]
 7790 0013 FA E9 FF 01 00 A5       		mov.W	#0xffffa500, 1022[r14]
6270:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     S12AD.ADCER.BIT.ADRFMT = 0; /* Right alignment format*/
 7791                             		.loc 1 6270 0
 7792 0019 FB EE 00 90 08          		mov.L	#0x89000, r14
 7793 001e DD E4 07                		mov.W	14[r14], r4
 7794 0021 7A F4                   		bclr	#15, r4
 7795 0023 D7 E4 07                		mov.W	r4, 14[r14]
6294:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_DisconnectingDetection(0x01,0x0F); /*Precharge with time 0x0F*/
 7796                             		.loc 1 6294 0
 7797 0026 F9 E4 7A 1F             		mov.B	#31, 122[r14]
 7798 002a 02                      		rts
 7799                             	.LFE114:
 7801                             		.section	.text.ADC_DeInit,"ax",@progbits
 7802                             		.global	_ADC_DeInit
 7804                             	_ADC_DeInit:
 7805                             	.LFB115:
6301:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 7806                             		.loc 1 6301 0
6302:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ADC_ClockGateOff();
 7807                             		.loc 1 6302 0
 7808 0000 FB EE 00 00 08          		mov.L	#0x80000, r14
 7809 0005 FA E9 FF 01 0B A5       		mov.W	#0xffffa50b, 1022[r14]
 7810 000b ED E4 04                		mov.L	16[r14], r4
 7811 000e 79 14                   		bset #17, r4
 7812 0010 E7 E4 04                		mov.L	r4, 16[r14]
 7813 0013 FA E9 FF 01 00 A5       		mov.W	#0xffffa500, 1022[r14]
 7814 0019 02                      		rts
 7815                             	.LFE115:
 7817                             		.section	.text.ADC_GetConvertedValueOnChannel,"ax",@progbits
 7818                             		.global	_ADC_GetConvertedValueOnChannel
 7820                             	_ADC_GetConvertedValueOnChannel:
 7821                             	.LFB116:
6308:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 7822                             		.loc 1 6308 0
 7823                             	.LVL567:
6310:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     switch(channel)
 7824                             		.loc 1 6310 0
 7825 0000 5B 11                   		movu.B	r1, r1
 7826 0002 61 D1                   		cmp	#13, r1
 7827 0004 24 5C                   		bgtu	.L1026
 7828 0006 FB E2 00 00 00 00       		mov.L	#.L1025, r14
 7829 000c FE 61 EE                		mov.L	[r1,r14], r14
 7830                             		
 7831 000f 7F 0E                   	1:jmp	r14
 7832                             		.section	.rodata.ADC_GetConvertedValueOnChannel,"a",@progbits
 7833                             		.balign 4
 7834                             		.balign 4
 7835                             	.L1025:
 7836 0000 00 00 00 11             		.long .L1017
 7837 0004 00 00 00 1B             		.long .L1018
 7838 0008 00 00 00 25             		.long .L1019
 7839 000c 00 00 00 2F             		.long .L1020
 7840 0010 00 00 00 39             		.long .L1021
 7841 0014 00 00 00 60             		.long .L1026
 7842 0018 00 00 00 43             		.long .L1022
 7843 001c 00 00 00 60             		.long .L1026
 7844 0020 00 00 00 4D             		.long .L1023
 7845 0024 00 00 00 60             		.long .L1026
 7846 0028 00 00 00 60             		.long .L1026
 7847 002c 00 00 00 60             		.long .L1026
 7848 0030 00 00 00 60             		.long .L1026
 7849 0034 00 00 00 57             		.long .L1024
 7850                             		.section	.text.ADC_GetConvertedValueOnChannel
 7851                             	.L1017:
6313:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = _HAL_RX210_ADC_ADDR_REG(0);
 7852                             		.loc 1 6313 0
 7853 0011 FB EE 00 90 08          		mov.L	#0x89000, r14
 7854 0016 DD E1 10                		mov.W	32[r14], r1
 7855                             	.LVL568:
6314:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7856                             		.loc 1 6314 0
 7857 0019 2E 49                   		bra	.L1016
 7858                             	.LVL569:
 7859                             	.L1018:
6316:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = _HAL_RX210_ADC_ADDR_REG(1);
 7860                             		.loc 1 6316 0
 7861 001b FB EE 00 90 08          		mov.L	#0x89000, r14
 7862 0020 DD E1 11                		mov.W	34[r14], r1
 7863                             	.LVL570:
6317:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7864                             		.loc 1 6317 0
 7865 0023 2E 3F                   		bra	.L1016
 7866                             	.LVL571:
 7867                             	.L1019:
6319:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = _HAL_RX210_ADC_ADDR_REG(2);
 7868                             		.loc 1 6319 0
 7869 0025 FB EE 00 90 08          		mov.L	#0x89000, r14
 7870 002a DD E1 12                		mov.W	36[r14], r1
 7871                             	.LVL572:
6320:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7872                             		.loc 1 6320 0
 7873 002d 2E 35                   		bra	.L1016
 7874                             	.LVL573:
 7875                             	.L1020:
6322:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = _HAL_RX210_ADC_ADDR_REG(3);
 7876                             		.loc 1 6322 0
 7877 002f FB EE 00 90 08          		mov.L	#0x89000, r14
 7878 0034 DD E1 13                		mov.W	38[r14], r1
 7879                             	.LVL574:
6323:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7880                             		.loc 1 6323 0
 7881 0037 2E 2B                   		bra	.L1016
 7882                             	.LVL575:
 7883                             	.L1021:
6325:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = _HAL_RX210_ADC_ADDR_REG(4);
 7884                             		.loc 1 6325 0
 7885 0039 FB EE 00 90 08          		mov.L	#0x89000, r14
 7886 003e DD E1 14                		mov.W	40[r14], r1
 7887                             	.LVL576:
6326:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7888                             		.loc 1 6326 0
 7889 0041 2E 21                   		bra	.L1016
 7890                             	.LVL577:
 7891                             	.L1022:
6328:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = _HAL_RX210_ADC_ADDR_REG(6);
 7892                             		.loc 1 6328 0
 7893 0043 FB EE 00 90 08          		mov.L	#0x89000, r14
 7894 0048 DD E1 16                		mov.W	44[r14], r1
 7895                             	.LVL578:
6329:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7896                             		.loc 1 6329 0
 7897 004b 2E 17                   		bra	.L1016
 7898                             	.LVL579:
 7899                             	.L1023:
6331:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = _HAL_RX210_ADC_ADDR_REG(8);
 7900                             		.loc 1 6331 0
 7901 004d FB EE 00 90 08          		mov.L	#0x89000, r14
 7902 0052 DD E1 18                		mov.W	48[r14], r1
 7903                             	.LVL580:
6332:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7904                             		.loc 1 6332 0
 7905 0055 2E 0D                   		bra	.L1016
 7906                             	.LVL581:
 7907                             	.L1024:
6334:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         value = _HAL_RX210_ADC_ADDR_REG(13);
 7908                             		.loc 1 6334 0
 7909 0057 FB EE 00 90 08          		mov.L	#0x89000, r14
 7910 005c DD E1 1D                		mov.W	58[r14], r1
 7911                             	.LVL582:
6335:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         break;
 7912                             		.loc 1 6335 0
 7913 005f 0B                      		bra	.L1016
 7914                             	.LVL583:
 7915                             	.L1026:
6309:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint16_t value=0;
 7916                             		.loc 1 6309 0
 7917 0060 66 01                   		mov	#0, r1
 7918                             	.LVL584:
 7919                             		.balign 2,3,1
 7920                             	.L1016:
6338:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     value = ADC_GetCorrectResolutionResult(value);
 7921                             		.loc 1 6338 0
 7922 0062 5F 11                   		movu.W	r1, r1
6340:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }
 7923                             		.loc 1 6340 0
 7924 0064 68 21                   		shlr	#2, r1
 7925                             	.LVL585:
 7926 0066 02                      		rts
 7927                             	.LFE116:
 7929 0067 03                      		.section	.text.DMA_ClockGate,"ax",@progbits
 7930                             		.global	_DMA_ClockGate
 7932                             	_DMA_ClockGate:
 7933                             	.LFB117:
6357:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 7934                             		.loc 1 6357 0
6358:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     DISABLE_REGISTER_WRITE_PROTECTION;
 7935                             		.loc 1 6358 0
 7936 0000 FB EE 00 00 08          		mov.L	#0x80000, r14
 7937 0005 FA E9 FF 01 0F A5       		mov.W	#0xffffa50f, 1022[r14]
6359:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SYSTEM.MSTPCRA.BIT.MSTPA28 = 0;
 7938                             		.loc 1 6359 0
 7939 000b ED E4 04                		mov.L	16[r14], r4
 7940 000e 7B C4                   		bclr	#28, r4
 7941 0010 E7 E4 04                		mov.L	r4, 16[r14]
6360:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ENABLE_REGISTER_WRITE_PROTECTION;
 7942                             		.loc 1 6360 0
 7943 0013 FA E9 FF 01 00 A5       		mov.W	#0xffffa500, 1022[r14]
 7944 0019 02                      		rts
 7945                             	.LFE117:
 7947                             		.section	.text.DMA_SetDevice,"ax",@progbits
 7948                             		.global	_DMA_SetDevice
 7950                             	_DMA_SetDevice:
 7951                             	.LFB118:
6367:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 7952                             		.loc 1 6367 0
 7953                             	.LVL586:
6369:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 7954                             		.loc 1 6369 0
 7955 0000 5B 11                   		movu.B	r1, r1
 7956 0002 61 01                   		cmp	#0, r1
 7957 0004 18                      		bne	.L1029
6370:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(0) |= DMA_DTE_BIT_MASK;
 7958                             		.loc 1 6370 0
 7959 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 7960 000a 2E 1E                   		bra	.L1033
 7961                             	.L1029:
6371:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 7962                             		.loc 1 6371 0
 7963 000c 61 11                   		cmp	#1, r1
 7964 000e 18                      		bne	.L1031
6372:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(1) |= DMA_DTE_BIT_MASK;
 7965                             		.loc 1 6372 0
 7966 000f FB EE 40 20 08          		mov.L	#0x82040, r14
 7967 0014 2E 14                   		bra	.L1033
 7968                             	.L1031:
6373:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 7969                             		.loc 1 6373 0
 7970 0016 61 21                   		cmp	#2, r1
 7971 0018 1F                      		bne	.L1032
6374:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(2) |= DMA_DTE_BIT_MASK;
 7972                             		.loc 1 6374 0
 7973 0019 FB EE 80 20 08          		mov.L	#0x82080, r14
 7974 001e 0A                      		bra	.L1033
 7975                             	.L1032:
6375:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 7976                             		.loc 1 6375 0
 7977 001f 61 31                   		cmp	#3, r1
 7978 0021 21 0B                   		bne	.L1030
6376:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(3) |= DMA_DTE_BIT_MASK;
 7979                             		.loc 1 6376 0
 7980 0023 FB EE C0 20 08          		mov.L	#0x820c0, r14
 7981                             		.balign 2,3,5
 7982                             	.L1033:
 7983 0028 F1 E0 1C                		bset #0, 28[r14].B
 7984 002b 03                      		.balign 2,3,4
 7985                             	.L1030:
6378:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_DMA_MODULE_ACTIVATION_REGISTER_ENABLE;
 7986                             		.loc 1 6378 0
 7987 002c FB EE 00 22 08          		mov.L	#0x82200, r14
 7988 0031 CC E4                   		mov.B	[r14], r4
 7989 0033 78 04                   		bset	#0, r4
 7990 0035 C3 E4                   		mov.B	r4, [r14]
 7991 0037 02                      		rts
 7992                             	.LFE118:
 7994                             		.section	.text.DMA_GetDevice,"ax",@progbits
 7995                             		.global	_DMA_GetDevice
 7997                             	_DMA_GetDevice:
 7998                             	.LFB119:
6385:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 7999                             		.loc 1 6385 0
 8000                             	.LVL587:
6387:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_GetDevice */
 8001                             		.loc 1 6387 0
 8002 0000 66 01                   		mov.L	#0, r1
 8003                             	.LVL588:
 8004 0002 02                      		rts
 8005                             	.LFE119:
 8007                             		.section	.text.DMA_SetSAR,"ax",@progbits
 8008                             		.global	_DMA_SetSAR
 8010                             	_DMA_SetSAR:
 8011                             	.LFB120:
6394:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 8012                             		.loc 1 6394 0
 8013                             	.LVL589:
6395:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 8014                             		.loc 1 6395 0
 8015 0000 5B 11                   		movu.B	r1, r1
 8016 0002 61 01                   		cmp	#0, r1
 8017 0004 18                      		bne	.L1036
6396:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_SOURCE_ADDRESS_REGISTER(0) = address;
 8018                             		.loc 1 6396 0
 8019 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 8020 000a 2E 1E                   		bra	.L1040
 8021                             	.L1036:
6397:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 8022                             		.loc 1 6397 0
 8023 000c 61 11                   		cmp	#1, r1
 8024 000e 18                      		bne	.L1038
6398:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_SOURCE_ADDRESS_REGISTER(1) = address;
 8025                             		.loc 1 6398 0
 8026 000f FB EE 40 20 08          		mov.L	#0x82040, r14
 8027 0014 2E 14                   		bra	.L1040
 8028                             	.L1038:
6399:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 8029                             		.loc 1 6399 0
 8030 0016 61 21                   		cmp	#2, r1
 8031 0018 1F                      		bne	.L1039
6400:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_SOURCE_ADDRESS_REGISTER(2) = address;
 8032                             		.loc 1 6400 0
 8033 0019 FB EE 80 20 08          		mov.L	#0x82080, r14
 8034 001e 0A                      		bra	.L1040
 8035                             	.L1039:
6401:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 8036                             		.loc 1 6401 0
 8037 001f 61 31                   		cmp	#3, r1
 8038 0021 19                      		bne	.L1035
6402:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_SOURCE_ADDRESS_REGISTER(3) = address;
 8039                             		.loc 1 6402 0
 8040 0022 FB EE C0 20 08          		mov.L	#0x820c0, r14
 8041 0027 03                      		.balign 2,3,1
 8042                             	.L1040:
 8043 0028 E3 E2                   		mov.L	r2, [r14]
 8044                             	.L1035:
 8045 002a 02                      		rts
 8046                             	.LFE120:
 8048 002b 03                      		.section	.text.DMA_GetSAR,"ax",@progbits
 8049                             		.global	_DMA_GetSAR
 8051                             	_DMA_GetSAR:
 8052                             	.LFB121:
6411:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 8053                             		.loc 1 6411 0
 8054                             	.LVL590:
6412:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 8055                             		.loc 1 6412 0
 8056 0000 5B 11                   		movu.B	r1, r1
 8057 0002 61 01                   		cmp	#0, r1
 8058 0004 1F                      		bne	.L1042
6413:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return ((uint8_t*)_HAL_RX210_DMA_SOURCE_ADDRESS_REGISTER(0));
 8059                             		.loc 1 6413 0
 8060 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 8061 000a 0A                      		bra	.L1047
 8062                             	.L1042:
6414:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 8063                             		.loc 1 6414 0
 8064 000b 61 11                   		cmp	#1, r1
 8065 000d 1A                      		bne	.L1044
6415:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return ((uint8_t*)_HAL_RX210_DMA_SOURCE_ADDRESS_REGISTER(1));
 8066                             		.loc 1 6415 0
 8067 000e FB EE 40 20 08          		mov.L	#0x82040, r14
 8068 0013 03                      		.balign 2,3,1
 8069                             	.L1047:
 8070 0014 EC E1                   		mov.L	[r14], r1
 8071                             	.LVL591:
 8072 0016 02                      		rts
 8073                             	.L1044:
6416:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 8074                             		.loc 1 6416 0
 8075 0017 61 21                   		cmp	#2, r1
 8076 0019 18                      		bne	.L1045
6417:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return ((uint8_t*)_HAL_RX210_DMA_SOURCE_ADDRESS_REGISTER(2));
 8077                             		.loc 1 6417 0
 8078 001a FB EE 80 20 08          		mov.L	#0x82080, r14
 8079 001f 2E F5                   		bra	.L1047
 8080                             	.L1045:
6418:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 8081                             		.loc 1 6418 0
 8082 0021 61 31                   		cmp	#3, r1
 8083 0023 18                      		bne	.L1046
6419:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return ((uint8_t*)_HAL_RX210_DMA_SOURCE_ADDRESS_REGISTER(3));
 8084                             		.loc 1 6419 0
 8085 0024 FB EE C0 20 08          		mov.L	#0x820c0, r14
 8086 0029 2E EB                   		bra	.L1047
 8087                             	.L1046:
6421:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 8088                             		.loc 1 6421 0
 8089 002b 75 41 30                		mov.L	#48, r1
 8090 002e 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 8091                             	.LVL592:
6423:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
 8092                             		.loc 1 6423 0
 8093 0032 66 01                   		mov.L	#0, r1
6424:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_GetSAR */
 8094                             		.loc 1 6424 0
 8095 0034 02                      		rts
 8096                             	.LFE121:
 8098 0035 03                      		.section	.text.DMA_SetDAR,"ax",@progbits
 8099                             		.global	_DMA_SetDAR
 8101                             	_DMA_SetDAR:
 8102                             	.LFB122:
6431:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 8103                             		.loc 1 6431 0
 8104                             	.LVL593:
6432:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 8105                             		.loc 1 6432 0
 8106 0000 5B 11                   		movu.B	r1, r1
 8107 0002 61 01                   		cmp	#0, r1
 8108 0004 18                      		bne	.L1049
6433:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_DESTINATION_ADDRESS_REGISTER(0) = address;
 8109                             		.loc 1 6433 0
 8110 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 8111 000a 2E 1E                   		bra	.L1054
 8112                             	.L1049:
6434:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 8113                             		.loc 1 6434 0
 8114 000c 61 11                   		cmp	#1, r1
 8115 000e 18                      		bne	.L1051
6435:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_DESTINATION_ADDRESS_REGISTER(1) = address;
 8116                             		.loc 1 6435 0
 8117 000f FB EE 40 20 08          		mov.L	#0x82040, r14
 8118 0014 2E 14                   		bra	.L1054
 8119                             	.L1051:
6436:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 8120                             		.loc 1 6436 0
 8121 0016 61 21                   		cmp	#2, r1
 8122 0018 1F                      		bne	.L1052
6437:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_DESTINATION_ADDRESS_REGISTER(2) = address;
 8123                             		.loc 1 6437 0
 8124 0019 FB EE 80 20 08          		mov.L	#0x82080, r14
 8125 001e 0A                      		bra	.L1054
 8126                             	.L1052:
6438:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 8127                             		.loc 1 6438 0
 8128 001f 61 31                   		cmp	#3, r1
 8129 0021 21 0B                   		bne	.L1053
6439:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_DESTINATION_ADDRESS_REGISTER(3) = address;
 8130                             		.loc 1 6439 0
 8131 0023 FB EE C0 20 08          		mov.L	#0x820c0, r14
 8132                             		.balign 2,3,5
 8133                             	.L1054:
 8134 0028 E7 E2 01                		mov.L	r2, 4[r14]
 8135 002b 02                      		rts
 8136                             	.L1053:
6441:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 8137                             		.loc 1 6441 0
 8138 002c 75 41 30                		mov.L	#48, r1
 8139                             	.LVL594:
 8140 002f 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 8141                             	.LVL595:
 8142                             	.LFE122:
 8144 0033 03                      		.section	.text.DMA_GetDAR,"ax",@progbits
 8145                             		.global	_DMA_GetDAR
 8147                             	_DMA_GetDAR:
 8148                             	.LFB123:
6448:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 8149                             		.loc 1 6448 0
 8150                             	.LVL596:
6449:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 8151                             		.loc 1 6449 0
 8152 0000 5B 11                   		movu.B	r1, r1
 8153 0002 61 01                   		cmp	#0, r1
 8154 0004 1F                      		bne	.L1056
6450:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return ((uint8_t*)_HAL_RX210_DMA_DESTINATION_ADDRESS_REGISTER(0));
 8155                             		.loc 1 6450 0
 8156 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 8157 000a 0A                      		bra	.L1061
 8158                             	.L1056:
6451:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 8159                             		.loc 1 6451 0
 8160 000b 61 11                   		cmp	#1, r1
 8161 000d 21 0B                   		bne	.L1058
6452:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return ((uint8_t*)_HAL_RX210_DMA_DESTINATION_ADDRESS_REGISTER(1));
 8162                             		.loc 1 6452 0
 8163 000f FB EE 40 20 08          		mov.L	#0x82040, r14
 8164                             		.balign 2,3,1
 8165                             	.L1061:
 8166 0014 ED E1 01                		mov.L	4[r14], r1
 8167                             	.LVL597:
 8168 0017 02                      		rts
 8169                             	.L1058:
6453:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 8170                             		.loc 1 6453 0
 8171 0018 61 21                   		cmp	#2, r1
 8172 001a 18                      		bne	.L1059
6454:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return ((uint8_t*)_HAL_RX210_DMA_DESTINATION_ADDRESS_REGISTER(2));
 8173                             		.loc 1 6454 0
 8174 001b FB EE 80 20 08          		mov.L	#0x82080, r14
 8175 0020 2E F4                   		bra	.L1061
 8176                             	.L1059:
6455:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 8177                             		.loc 1 6455 0
 8178 0022 61 31                   		cmp	#3, r1
 8179 0024 18                      		bne	.L1060
6456:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return ((uint8_t*)_HAL_RX210_DMA_DESTINATION_ADDRESS_REGISTER(3));
 8180                             		.loc 1 6456 0
 8181 0025 FB EE C0 20 08          		mov.L	#0x820c0, r14
 8182 002a 2E EA                   		bra	.L1061
 8183                             	.L1060:
6458:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 8184                             		.loc 1 6458 0
 8185 002c 75 41 30                		mov.L	#48, r1
 8186 002f 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 8187                             	.LVL598:
6459:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
 8188                             		.loc 1 6459 0
 8189 0033 66 01                   		mov.L	#0, r1
6460:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_GetDAR */
 8190                             		.loc 1 6460 0
 8191 0035 02                      		rts
 8192                             	.LFE123:
 8194                             		.section	.text.DMA_SetBCR,"ax",@progbits
 8195                             		.global	_DMA_SetBCR
 8197                             	_DMA_SetBCR:
 8198                             	.LFB124:
6467:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 8199                             		.loc 1 6467 0
 8200                             	.LVL599:
6468:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 8201                             		.loc 1 6468 0
 8202 0000 5B 11                   		movu.B	r1, r1
 8203 0002 61 01                   		cmp	#0, r1
 8204 0004 21 0C                   		bne	.L1063
6470:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_COUNT_REGISTER(0) = count<<16;
 8205                             		.loc 1 6470 0
 8206 0006 FD D0 24                		shll	#16, r2, r4
 8207 0009 FB EE 00 20 08          		mov.L	#0x82000, r14
 8208 000e 2E 0E                   		bra	.L1070
 8209                             	.L1063:
6473:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 8210                             		.loc 1 6473 0
 8211 0010 61 11                   		cmp	#1, r1
 8212 0012 21 13                   		bne	.L1065
6475:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_COUNT_REGISTER(1) = count<<16;
 8213                             		.loc 1 6475 0
 8214 0014 FD D0 24                		shll	#16, r2, r4
 8215 0017 FB EE 40 20 08          		mov.L	#0x82040, r14
 8216                             		.balign 2,3,5
 8217                             	.L1070:
 8218 001c E7 E4 02                		mov.L	r4, 8[r14]
6476:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_COUNT_REGISTER(1) |= count;
 8219                             		.loc 1 6476 0
 8220 001f 06 95 E2 02             		or	8[r14].L, r2
 8221                             	.LVL600:
 8222 0023 2E 21                   		bra	.L1069
 8223                             	.LVL601:
 8224                             	.L1065:
6478:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 8225                             		.loc 1 6478 0
 8226 0025 61 21                   		cmp	#2, r1
 8227 0027 21 0C                   		bne	.L1066
6480:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_COUNT_REGISTER(2) = count<<16;
 8228                             		.loc 1 6480 0
 8229 0029 FD D0 24                		shll	#16, r2, r4
 8230 002c FB EE 80 20 08          		mov.L	#0x82080, r14
 8231 0031 2E 0F                   		bra	.L1068
 8232                             	.L1066:
6483:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 8233                             		.loc 1 6483 0
 8234 0033 61 31                   		cmp	#3, r1
 8235 0035 21 13                   		bne	.L1067
6485:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_COUNT_REGISTER(3) = count<<16;
 8236                             		.loc 1 6485 0
 8237 0037 FD D0 24                		shll	#16, r2, r4
 8238 003a FB EE C0 20 08          		mov.L	#0x820c0, r14
 8239 003f 03                      		.balign 2,3,5
 8240                             	.L1068:
 8241 0040 E7 E4 02                		mov.L	r4, 8[r14]
 8242                             	.LVL602:
 8243 0043 03                      		.balign 2,3,5
 8244                             	.L1069:
6486:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_COUNT_REGISTER(3) = count;
 8245                             		.loc 1 6486 0
 8246 0044 E7 E2 02                		mov.L	r2, 8[r14]
 8247 0047 02                      		rts
 8248                             	.LVL603:
 8249                             	.L1067:
6489:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 8250                             		.loc 1 6489 0
 8251 0048 75 41 30                		mov.L	#48, r1
 8252                             	.LVL604:
 8253 004b 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 8254                             	.LVL605:
 8255                             	.LFE124:
 8257 004f 03                      		.section	.text.DMA_GetBCR,"ax",@progbits
 8258                             		.global	_DMA_GetBCR
 8260                             	_DMA_GetBCR:
 8261                             	.LFB125:
6497:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 8262                             		.loc 1 6497 0
 8263                             	.LVL606:
6498:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 8264                             		.loc 1 6498 0
 8265 0000 5B 11                   		movu.B	r1, r1
 8266 0002 61 01                   		cmp	#0, r1
 8267 0004 1F                      		bne	.L1072
6499:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return(_HAL_RX210_DMA_TRANSFER_COUNT_REGISTER(0));
 8268                             		.loc 1 6499 0
 8269 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 8270 000a 0A                      		bra	.L1077
 8271                             	.L1072:
6500:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 8272                             		.loc 1 6500 0
 8273 000b 61 11                   		cmp	#1, r1
 8274 000d 21 0B                   		bne	.L1074
6501:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return(_HAL_RX210_DMA_TRANSFER_COUNT_REGISTER(1));
 8275                             		.loc 1 6501 0
 8276 000f FB EE 40 20 08          		mov.L	#0x82040, r14
 8277                             		.balign 2,3,1
 8278                             	.L1077:
 8279 0014 ED E1 02                		mov.L	8[r14], r1
 8280                             	.LVL607:
 8281 0017 02                      		rts
 8282                             	.L1074:
6502:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 8283                             		.loc 1 6502 0
 8284 0018 61 21                   		cmp	#2, r1
 8285 001a 18                      		bne	.L1075
6503:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return(_HAL_RX210_DMA_TRANSFER_COUNT_REGISTER(2));
 8286                             		.loc 1 6503 0
 8287 001b FB EE 80 20 08          		mov.L	#0x82080, r14
 8288 0020 2E F4                   		bra	.L1077
 8289                             	.L1075:
6504:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 8290                             		.loc 1 6504 0
 8291 0022 61 31                   		cmp	#3, r1
 8292 0024 18                      		bne	.L1076
6505:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return(_HAL_RX210_DMA_TRANSFER_COUNT_REGISTER(3));
 8293                             		.loc 1 6505 0
 8294 0025 FB EE C0 20 08          		mov.L	#0x820c0, r14
 8295 002a 2E EA                   		bra	.L1077
 8296                             	.L1076:
6507:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 8297                             		.loc 1 6507 0
 8298 002c 75 41 30                		mov.L	#48, r1
 8299 002f 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 8300                             	.LVL608:
6508:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
 8301                             		.loc 1 6508 0
 8302 0033 66 01                   		mov.L	#0, r1
6509:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_GetBCR */
 8303                             		.loc 1 6509 0
 8304 0035 02                      		rts
 8305                             	.LFE125:
 8307                             		.section	.text.DMA_EnableInt,"ax",@progbits
 8308                             		.global	_DMA_EnableInt
 8310                             	_DMA_EnableInt:
 8311                             	.LFB126:
6516:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 8312                             		.loc 1 6516 0
 8313                             	.LVL609:
6517:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 8314                             		.loc 1 6517 0
 8315 0000 5B 1E                   		movu.B	r1, r14
 8316 0002 61 0E                   		cmp	#0, r14
 8317 0004 21 1F                   		bne	.L1079
6519:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[(DMAC_ICU_INTERRUPT_BASE_VECTOR + channel)].BYTE = DMAC_ICU_PRIORITY_INT_CH0;
 8318                             		.loc 1 6519 0
 8319 0006 FB EE 00 70 08          		mov.L	#0x87000, r14
 8320 000b FA E4 C6 03 02          		mov.B	#2, 966[r14]
6520:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_INTERRUPT_SETTING_REGISTER(0) |= DMA_TRANSFER_END_INTERRUTP_MASK;
 8321                             		.loc 1 6520 0
 8322 0010 FB 4E 00 20 08          		mov.L	#0x82000, r4
 8323 0015 F1 44 13                		bset #4, 19[r4].B
6521:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IR[DMAC_ICU_INTERRUPT_BASE_VECTOR  + channel].BYTE = 0x00;
 8324                             		.loc 1 6521 0
 8325 0018 C7 E1 C6                		mov.B	r1, 198[r14]
6522:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[DMAC_CHANNEL0_ICU_IER].BYTE |= DMAC_CHANNEL0_IER_BIT;
 8326                             		.loc 1 6522 0
 8327 001b CE E4 18 02             		mov.B	536[r14], r4
 8328 001f 78 64                   		bset #6, r4
 8329 0021 2E 23                   		bra	.L1085
 8330                             	.L1079:
6524:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 8331                             		.loc 1 6524 0
 8332 0023 61 1E                   		cmp	#1, r14
 8333 0025 21 24                   		bne	.L1081
6526:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[DMAC_ICU_INTERRUPT_BASE_VECTOR + channel].BYTE = DMAC_ICU_PRIORITY_INT_CH1;
 8334                             		.loc 1 6526 0
 8335 0027 FB EE 00 70 08          		mov.L	#0x87000, r14
 8336 002c CB E1 C7 03             		mov.B	r1, 967[r14]
6527:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_INTERRUPT_SETTING_REGISTER(1) |= DMA_TRANSFER_END_INTERRUTP_MASK;
 8337                             		.loc 1 6527 0
 8338 0030 FB 4E 40 20 08          		mov.L	#0x82040, r4
 8339 0035 F1 44 13                		bset #4, 19[r4].B
6528:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IR[DMAC_ICU_INTERRUPT_BASE_VECTOR  + channel].BYTE = 0x00;
 8340                             		.loc 1 6528 0
 8341 0038 F9 E4 C7 00             		mov.B	#0, 199[r14]
6529:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[DMAC_CHANNEL1_ICU_IER].BYTE |= DMAC_CHANNEL1_IER_BIT;
 8342                             		.loc 1 6529 0
 8343 003c CE E4 18 02             		mov.B	536[r14], r4
 8344 0040 75 34 80                		or	#0xffffff80, r4
 8345 0043 03                      		.balign 2,3,5
 8346                             	.L1085:
 8347 0044 CB E4 18 02             		mov.B	r4, 536[r14]
 8348 0048 02                      		rts
 8349                             	.L1081:
6531:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 8350                             		.loc 1 6531 0
 8351 0049 61 2E                   		cmp	#2, r14
 8352 004b 21 20                   		bne	.L1082
6533:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[DMAC_ICU_INTERRUPT_BASE_VECTOR + channel].BYTE = DMAC_ICU_PRIORITY_INT_CH2;
 8353                             		.loc 1 6533 0
 8354 004d FB EE 00 70 08          		mov.L	#0x87000, r14
 8355 0052 FA E4 C8 03 01          		mov.B	#1, 968[r14]
6534:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_INTERRUPT_SETTING_REGISTER(2) |= DMA_TRANSFER_END_INTERRUTP_MASK;
 8356                             		.loc 1 6534 0
 8357 0057 FB 4E 80 20 08          		mov.L	#0x82080, r4
 8358 005c F1 44 13                		bset #4, 19[r4].B
6535:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IR[DMAC_ICU_INTERRUPT_BASE_VECTOR  + channel].BYTE = 0x00;
 8359                             		.loc 1 6535 0
 8360 005f F9 E4 C8 00             		mov.B	#0, 200[r14]
6536:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[DMAC_CHANNEL2_ICU_IER].BYTE |= DMAC_CHANNEL2_IER_BIT;
 8361                             		.loc 1 6536 0
 8362 0063 CE E4 19 02             		mov.B	537[r14], r4
 8363 0067 78 04                   		bset #0, r4
 8364 0069 2E 23                   		bra	.L1084
 8365                             	.L1082:
6538:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 8366                             		.loc 1 6538 0
 8367 006b 61 3E                   		cmp	#3, r14
 8368 006d 21 24                   		bne	.L1083
6540:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IPR[DMAC_ICU_INTERRUPT_BASE_VECTOR + channel].BYTE = DMAC_ICU_PRIORITY_INT_CH3;
 8369                             		.loc 1 6540 0
 8370 006f FB EE 00 70 08          		mov.L	#0x87000, r14
 8371 0074 FA E4 C9 03 01          		mov.B	#1, 969[r14]
6541:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_INTERRUPT_SETTING_REGISTER(3) |= DMA_TRANSFER_END_INTERRUTP_MASK;
 8372                             		.loc 1 6541 0
 8373 0079 FB 4E C0 20 08          		mov.L	#0x820c0, r4
 8374 007e F1 44 13                		bset #4, 19[r4].B
6542:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IR[DMAC_ICU_INTERRUPT_BASE_VECTOR  + channel].BYTE = 0x00;
 8375                             		.loc 1 6542 0
 8376 0081 F9 E4 C9 00             		mov.B	#0, 201[r14]
6543:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[DMAC_CHANNEL3_ICU_IER].BYTE |= DMAC_CHANNEL3_IER_BIT;
 8377                             		.loc 1 6543 0
 8378 0085 CE E4 19 02             		mov.B	537[r14], r4
 8379 0089 78 14                   		bset #1, r4
 8380 008b 03                      		.balign 2,3,5
 8381                             	.L1084:
 8382 008c CB E4 19 02             		mov.B	r4, 537[r14]
 8383 0090 02                      		rts
 8384                             	.L1083:
6546:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 8385                             		.loc 1 6546 0
 8386 0091 75 41 30                		mov.L	#48, r1
 8387                             	.LVL610:
 8388 0094 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 8389                             	.LVL611:
 8390                             	.LFE126:
 8392                             		.section	.text.DMA_DisableInt,"ax",@progbits
 8393                             		.global	_DMA_DisableInt
 8395                             	_DMA_DisableInt:
 8396                             	.LFB127:
6554:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 8397                             		.loc 1 6554 0
 8398                             	.LVL612:
 8399 0000 6E 7A                   		pushm	r7-r10
 8400                             	.LCFI23:
 8401 0002 CF 17                   		mov.B	r1, r7
6555:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 8402                             		.loc 1 6555 0
 8403 0004 5B 14                   		movu.B	r1, r4
 8404 0006 FB EE 00 70 08          		mov.L	#0x87000, r14
 8405 000b 61 04                   		cmp	#0, r4
 8406 000d 21 0D                   		bne	.L1087
6557:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[DMAC_CHANNEL0_ICU_IER].BYTE &= ~DMAC_CHANNEL0_IER_BIT;
 8407                             		.loc 1 6557 0
 8408 000f F2 EE 18 02             		bclr #6, 536[r14].B
6558:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_INTERRUPT_SETTING_REGISTER(0) &= ~DMA_TRANSFER_END_INTERRUTP_MASK;
 8409                             		.loc 1 6558 0
 8410 0013 FB EE 00 20 08          		mov.L	#0x82000, r14
 8411 0018 2E 16                   		bra	.L1093
 8412                             	.L1087:
6560:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 8413                             		.loc 1 6560 0
 8414 001a 61 14                   		cmp	#1, r4
 8415 001c 21 17                   		bne	.L1089
6562:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[DMAC_CHANNEL1_ICU_IER].BYTE &= ~DMAC_CHANNEL1_IER_BIT;
 8416                             		.loc 1 6562 0
 8417 001e CE E4 18 02             		mov.B	536[r14], r4
 8418 0022 75 24 7F                		and #0x7f, r4
 8419 0025 CB E4 18 02             		mov.B	r4, 536[r14]
6563:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_INTERRUPT_SETTING_REGISTER(1) &= ~DMA_TRANSFER_END_INTERRUTP_MASK;
 8420                             		.loc 1 6563 0
 8421 0029 FB EE 40 20 08          		mov.L	#0x82040, r14
 8422                             		.balign 2,3,5
 8423                             	.L1093:
 8424 002e F1 EC 13                		bclr #4, 19[r14].B
 8425 0031 2E 27                   		bra	.L1088
 8426                             	.L1089:
6565:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 8427                             		.loc 1 6565 0
 8428 0033 61 24                   		cmp	#2, r4
 8429 0035 21 0D                   		bne	.L1090
6567:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[DMAC_CHANNEL2_ICU_IER].BYTE &= ~DMAC_CHANNEL2_IER_BIT;
 8430                             		.loc 1 6567 0
 8431 0037 F2 E8 19 02             		bclr #0, 537[r14].B
6568:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_INTERRUPT_SETTING_REGISTER(2) &= ~DMA_TRANSFER_END_INTERRUTP_MASK;
 8432                             		.loc 1 6568 0
 8433 003b FB EE 80 20 08          		mov.L	#0x82080, r14
 8434 0040 2E EE                   		bra	.L1093
 8435                             	.L1090:
6570:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 8436                             		.loc 1 6570 0
 8437 0042 61 34                   		cmp	#3, r4
 8438 0044 21 0D                   		bne	.L1091
6572:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         ICU.IER[DMAC_CHANNEL3_ICU_IER].BYTE &= ~DMAC_CHANNEL3_IER_BIT;
 8439                             		.loc 1 6572 0
 8440 0046 F2 E9 19 02             		bclr #1, 537[r14].B
6573:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_INTERRUPT_SETTING_REGISTER(3) &= ~DMA_TRANSFER_END_INTERRUTP_MASK;
 8441                             		.loc 1 6573 0
 8442 004a FB EE C0 20 08          		mov.L	#0x820c0, r14
 8443 004f 2E DF                   		bra	.L1093
 8444                             	.L1091:
6577:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 8445                             		.loc 1 6577 0
 8446 0051 75 41 30                		mov.L	#48, r1
 8447                             	.LVL613:
 8448 0054 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 8449                             	.LVL614:
 8450                             		.balign 2,3,1
 8451                             	.L1088:
6580:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ICU.IPR[DMAC_ICU_INTERRUPT_BASE_VECTOR + channel].BYTE = 0;
 8452                             		.loc 1 6580 0
 8453 0058 5B 77                   		movu.B	r7, r7
 8454                             	.LVL615:
 8455 005a 72 7E C6 00             		add	#0xc6, r7, r14
 8456 005e 73 77 C6 70 08          		add	#0x870c6, r7
 8457                             	.LVL616:
 8458 0063 FA 74 00 03 00          		mov.B	#0, 768[r7]
6581:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ICU.IR[DMAC_ICU_INTERRUPT_BASE_VECTOR  + channel].BYTE = 0x00;
 8459                             		.loc 1 6581 0
 8460 0068 FB 7E 00 70 08          		mov.L	#0x87000, r7
 8461                             	.LVL617:
 8462 006d 66 0A                   		mov	#0, r10
 8463 006f FE 0E 7A                		mov.B	r10, [r14,r7]
6583:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end  DMA_EnableInt(channel) */
 8464                             		.loc 1 6583 0
 8465 0072 3F 7A 04                		rtsd	#16, r7-r10
 8466                             	.LFE127:
 8468 0075 03                      		.section	.text.DMA_SetStartOn,"ax",@progbits
 8469                             		.global	_DMA_SetStartOn
 8471                             	_DMA_SetStartOn:
 8472                             	.LFB128:
6590:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 8473                             		.loc 1 6590 0
 8474                             	.LVL618:
6592:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 8475                             		.loc 1 6592 0
 8476 0000 5B 11                   		movu.B	r1, r1
 8477 0002 61 01                   		cmp	#0, r1
 8478 0004 18                      		bne	.L1095
6593:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_SOFTWARE_START_REGISTER(0)|= DMREQ_SWREQ_MASK;
 8479                             		.loc 1 6593 0
 8480 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 8481 000a 2E 1E                   		bra	.L1099
 8482                             	.L1095:
6594:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 8483                             		.loc 1 6594 0
 8484 000c 61 11                   		cmp	#1, r1
 8485 000e 18                      		bne	.L1097
6595:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_SOFTWARE_START_REGISTER(1)|= DMREQ_SWREQ_MASK;
 8486                             		.loc 1 6595 0
 8487 000f FB EE 40 20 08          		mov.L	#0x82040, r14
 8488 0014 2E 14                   		bra	.L1099
 8489                             	.L1097:
6596:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 8490                             		.loc 1 6596 0
 8491 0016 61 21                   		cmp	#2, r1
 8492 0018 1F                      		bne	.L1098
6597:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_SOFTWARE_START_REGISTER(2)|= DMREQ_SWREQ_MASK;
 8493                             		.loc 1 6597 0
 8494 0019 FB EE 80 20 08          		mov.L	#0x82080, r14
 8495 001e 0A                      		bra	.L1099
 8496                             	.L1098:
6598:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 8497                             		.loc 1 6598 0
 8498 001f 61 31                   		cmp	#3, r1
 8499 0021 1A                      		bne	.L1094
6599:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_SOFTWARE_START_REGISTER(3)|= DMREQ_SWREQ_MASK;
 8500                             		.loc 1 6599 0
 8501 0022 FB EE C0 20 08          		mov.L	#0x820c0, r14
 8502 0027 03                      		.balign 2,3,5
 8503                             	.L1099:
 8504 0028 F1 E0 1D                		bset #0, 29[r14].B
 8505                             	.L1094:
 8506 002b 02                      		rts
 8507                             	.LFE128:
 8509                             		.section	.text.DMA_SetStartOff,"ax",@progbits
 8510                             		.global	_DMA_SetStartOff
 8512                             	_DMA_SetStartOff:
 8513                             	.LFB129:
6608:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 8514                             		.loc 1 6608 0
 8515                             	.LVL619:
6610:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 8516                             		.loc 1 6610 0
 8517 0000 5B 11                   		movu.B	r1, r1
 8518 0002 61 01                   		cmp	#0, r1
 8519 0004 18                      		bne	.L1101
6611:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_SOFTWARE_START_REGISTER(0)&= ~DMREQ_SWREQ_MASK;
 8520                             		.loc 1 6611 0
 8521 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 8522 000a 2E 1E                   		bra	.L1106
 8523                             	.L1101:
6612:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 8524                             		.loc 1 6612 0
 8525 000c 61 11                   		cmp	#1, r1
 8526 000e 18                      		bne	.L1103
6613:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_SOFTWARE_START_REGISTER(1)&= ~DMREQ_SWREQ_MASK;
 8527                             		.loc 1 6613 0
 8528 000f FB EE 40 20 08          		mov.L	#0x82040, r14
 8529 0014 2E 14                   		bra	.L1106
 8530                             	.L1103:
6614:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 8531                             		.loc 1 6614 0
 8532 0016 61 21                   		cmp	#2, r1
 8533 0018 1F                      		bne	.L1104
6615:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_SOFTWARE_START_REGISTER(2)&= ~DMREQ_SWREQ_MASK;
 8534                             		.loc 1 6615 0
 8535 0019 FB EE 80 20 08          		mov.L	#0x82080, r14
 8536 001e 0A                      		bra	.L1106
 8537                             	.L1104:
6616:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 8538                             		.loc 1 6616 0
 8539 001f 61 31                   		cmp	#3, r1
 8540 0021 21 0B                   		bne	.L1105
6617:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_SOFTWARE_START_REGISTER(3)&= ~DMREQ_SWREQ_MASK;
 8541                             		.loc 1 6617 0
 8542 0023 FB EE C0 20 08          		mov.L	#0x820c0, r14
 8543                             		.balign 2,3,5
 8544                             	.L1106:
 8545 0028 F1 E8 1D                		bclr #0, 29[r14].B
 8546 002b 02                      		rts
 8547                             	.L1105:
6619:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 8548                             		.loc 1 6619 0
 8549 002c 75 41 30                		mov.L	#48, r1
 8550                             	.LVL620:
 8551 002f 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 8552                             	.LVL621:
 8553                             	.LFE129:
 8555 0033 03                      		.section	.text.DMA_IsChannelBusy,"ax",@progbits
 8556                             		.global	_DMA_IsChannelBusy
 8558                             	_DMA_IsChannelBusy:
 8559                             	.LFB130:
6627:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 8560                             		.loc 1 6627 0
 8561                             	.LVL622:
6628:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 8562                             		.loc 1 6628 0
 8563 0000 5B 11                   		movu.B	r1, r1
 8564 0002 61 01                   		cmp	#0, r1
 8565 0004 18                      		bne	.L1108
6629:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (_HAL_RX210_DMA_STATUS_REGISTER(0) & DMA_ACT_BIT_MASK);
 8566                             		.loc 1 6629 0
 8567 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 8568 000a 2E 0C                   		bra	.L1113
 8569                             	.L1108:
6630:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 8570                             		.loc 1 6630 0
 8571 000c 61 11                   		cmp	#1, r1
 8572 000e 21 0F                   		bne	.L1110
 8573                             		.balign 2,3,4
 8574                             	.L1114:
6631:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (_HAL_RX210_DMA_STATUS_REGISTER(1) & DMA_ACT_BIT_MASK);
 8575                             		.loc 1 6631 0
 8576 0010 FB EE 40 20 08          		mov.L	#0x82040, r14
 8577 0015 03                      		.balign 2,3,5
 8578                             	.L1113:
 8579 0016 CD E1 1E                		mov.B	30[r14], r1
 8580                             	.LVL623:
 8581 0019 75 21 80                		and #0xffffff80, r1
 8582 001c 02                      		rts
 8583                             	.L1110:
6632:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 8584                             		.loc 1 6632 0
 8585 001d 61 21                   		cmp	#2, r1
 8586 001f 1B                      		bne	.L1111
 8587 0020 2E F0                   		bra	.L1114
 8588                             	.L1111:
6634:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 8589                             		.loc 1 6634 0
 8590 0022 61 31                   		cmp	#3, r1
 8591 0024 1B                      		bne	.L1112
 8592 0025 2E EB                   		bra	.L1114
 8593                             	.L1112:
6637:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 8594                             		.loc 1 6637 0
 8595 0027 75 41 30                		mov.L	#48, r1
 8596 002a 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 8597                             	.LVL624:
6638:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
 8598                             		.loc 1 6638 0
 8599 002e 66 01                   		mov.L	#0, r1
6639:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end DMA_IsChannelBusy */
 8600                             		.loc 1 6639 0
 8601 0030 02                      		rts
 8602                             	.LFE130:
 8604 0031 03                      		.section	.text.DMA_IsTransDone,"ax",@progbits
 8605                             		.global	_DMA_IsTransDone
 8607                             	_DMA_IsTransDone:
 8608                             	.LFB131:
6646:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 8609                             		.loc 1 6646 0
 8610                             	.LVL625:
6647:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 8611                             		.loc 1 6647 0
 8612 0000 5B 11                   		movu.B	r1, r1
 8613 0002 61 01                   		cmp	#0, r1
 8614 0004 18                      		bne	.L1116
6648:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (_HAL_RX210_DMA_STATUS_REGISTER(0) & DMA_DTIF_BIT_MASK);
 8615                             		.loc 1 6648 0
 8616 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 8617 000a 2E 0C                   		bra	.L1121
 8618                             	.L1116:
6649:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 8619                             		.loc 1 6649 0
 8620 000c 61 11                   		cmp	#1, r1
 8621 000e 21 0F                   		bne	.L1118
 8622                             		.balign 2,3,4
 8623                             	.L1122:
6650:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (_HAL_RX210_DMA_STATUS_REGISTER(1) & DMA_DTIF_BIT_MASK);
 8624                             		.loc 1 6650 0
 8625 0010 FB EE 40 20 08          		mov.L	#0x82040, r14
 8626 0015 03                      		.balign 2,3,5
 8627                             	.L1121:
 8628                             	.LVL626:
 8629 0016 CD E1 1E                		mov.B 30[r14], r1
 8630 0019 75 21 10                		and #16, r1
 8631 001c 02                      		rts
 8632                             	.L1118:
6651:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 8633                             		.loc 1 6651 0
 8634 001d 61 21                   		cmp	#2, r1
 8635 001f 1B                      		bne	.L1119
 8636 0020 2E F0                   		bra	.L1122
 8637                             	.L1119:
6653:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 8638                             		.loc 1 6653 0
 8639 0022 61 31                   		cmp	#3, r1
 8640 0024 1B                      		bne	.L1120
 8641 0025 2E EB                   		bra	.L1122
 8642                             	.L1120:
6656:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 8643                             		.loc 1 6656 0
 8644 0027 75 41 30                		mov.L	#48, r1
 8645 002a 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 8646                             	.LVL627:
6657:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
 8647                             		.loc 1 6657 0
 8648 002e 66 01                   		mov.L	#0, r1
6658:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* DMA_IsTransDone */
 8649                             		.loc 1 6658 0
 8650 0030 02                      		rts
 8651                             	.LFE131:
 8653 0031 03                      		.section	.text.DMA_ClearTransDone,"ax",@progbits
 8654                             		.global	_DMA_ClearTransDone
 8656                             	_DMA_ClearTransDone:
 8657                             	.LFB132:
6665:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 8658                             		.loc 1 6665 0
 8659                             	.LVL628:
6666:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 8660                             		.loc 1 6666 0
 8661 0000 5B 1E                   		movu.B	r1, r14
 8662 0002 61 0E                   		cmp	#0, r14
 8663 0004 1A                      		bne	.L1124
6667:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_STATUS_REGISTER(0) = 0x00;
 8664                             		.loc 1 6667 0
 8665 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 8666 000a C7 E1 1E                		mov.B	r1, 30[r14]
 8667 000d 02                      		rts
 8668                             	.L1124:
6668:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 8669                             		.loc 1 6668 0
 8670 000e 61 1E                   		cmp	#1, r14
 8671 0010 18                      		bne	.L1126
6669:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_STATUS_REGISTER(1) = 0x00;
 8672                             		.loc 1 6669 0
 8673 0011 FB EE 40 20 08          		mov.L	#0x82040, r14
 8674 0016 2E 14                   		bra	.L1129
 8675                             	.L1126:
6670:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 8676                             		.loc 1 6670 0
 8677 0018 61 2E                   		cmp	#2, r14
 8678 001a 1F                      		bne	.L1127
6671:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_STATUS_REGISTER(2) = 0x00;
 8679                             		.loc 1 6671 0
 8680 001b FB EE 80 20 08          		mov.L	#0x82080, r14
 8681 0020 0A                      		bra	.L1129
 8682                             	.L1127:
6672:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 8683                             		.loc 1 6672 0
 8684 0021 61 3E                   		cmp	#3, r14
 8685 0023 21 0C                   		bne	.L1128
6673:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_STATUS_REGISTER(3) = 0x00;
 8686                             		.loc 1 6673 0
 8687 0025 FB EE C0 20 08          		mov.L	#0x820c0, r14
 8688                             		.balign 2,3,4
 8689                             	.L1129:
 8690 002a F9 E4 1E 00             		mov.B	#0, 30[r14]
 8691 002e 02                      		rts
 8692                             	.L1128:
6675:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 8693                             		.loc 1 6675 0
 8694 002f 75 41 30                		mov.L	#48, r1
 8695                             	.LVL629:
 8696 0032 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 8697                             	.LVL630:
 8698                             	.LFE132:
 8700                             		.section	.text.IsDMAChannelTrasferEnabled,"ax",@progbits
 8701                             		.global	_IsDMAChannelTrasferEnabled
 8703                             	_IsDMAChannelTrasferEnabled:
 8704                             	.LFB133:
6683:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 8705                             		.loc 1 6683 0
 8706                             	.LVL631:
6684:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 8707                             		.loc 1 6684 0
 8708 0000 5B 11                   		movu.B	r1, r1
 8709 0002 61 01                   		cmp	#0, r1
 8710 0004 18                      		bne	.L1131
6685:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (_HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(0) & DMA_DTE_BIT_MASK);
 8711                             		.loc 1 6685 0
 8712 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 8713 000a 2E 0C                   		bra	.L1136
 8714                             	.L1131:
6686:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 8715                             		.loc 1 6686 0
 8716 000c 61 11                   		cmp	#1, r1
 8717 000e 21 0E                   		bne	.L1133
 8718                             		.balign 2,3,4
 8719                             	.L1137:
6687:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (_HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(1) & DMA_DTE_BIT_MASK);
 8720                             		.loc 1 6687 0
 8721 0010 FB EE 40 20 08          		mov.L	#0x82040, r14
 8722 0015 03                      		.balign 2,3,5
 8723                             	.L1136:
 8724                             	.LVL632:
 8725 0016 CD E1 1C                		mov.B 28[r14], r1
 8726 0019 64 11                   		and #1, r1
 8727 001b 02                      		rts
 8728                             	.L1133:
6688:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 8729                             		.loc 1 6688 0
 8730 001c 61 21                   		cmp	#2, r1
 8731 001e 1B                      		bne	.L1134
 8732 001f 2E F1                   		bra	.L1137
 8733                             	.L1134:
6690:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 8734                             		.loc 1 6690 0
 8735 0021 61 31                   		cmp	#3, r1
 8736 0023 1B                      		bne	.L1135
 8737 0024 2E EC                   		bra	.L1137
 8738                             	.L1135:
6693:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 8739                             		.loc 1 6693 0
 8740 0026 75 41 30                		mov.L	#48, r1
 8741 0029 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 8742                             	.LVL633:
6694:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
 8743                             		.loc 1 6694 0
 8744 002d 66 01                   		mov.L	#0, r1
6695:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end IsDMAChannelTrasferEnabled */
 8745                             		.loc 1 6695 0
 8746 002f 02                      		rts
 8747                             	.LFE133:
 8749                             		.section	.text.DMA_IsPending,"ax",@progbits
 8750                             		.global	_DMA_IsPending
 8752                             	_DMA_IsPending:
 8753                             	.LFB134:
6706:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 8754                             		.loc 1 6706 0
 8755                             	.LVL634:
6707:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 8756                             		.loc 1 6707 0
 8757 0000 5B 11                   		movu.B	r1, r1
 8758 0002 61 01                   		cmp	#0, r1
 8759 0004 18                      		bne	.L1139
6708:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (_HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(0) & DMA_ACT_BIT_MASK);
 8760                             		.loc 1 6708 0
 8761 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 8762 000a 2E 0C                   		bra	.L1144
 8763                             	.L1139:
6709:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 8764                             		.loc 1 6709 0
 8765 000c 61 11                   		cmp	#1, r1
 8766 000e 21 0F                   		bne	.L1141
 8767                             		.balign 2,3,4
 8768                             	.L1145:
6710:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         return (_HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(1) & DMA_ACT_BIT_MASK);
 8769                             		.loc 1 6710 0
 8770 0010 FB EE 40 20 08          		mov.L	#0x82040, r14
 8771 0015 03                      		.balign 2,3,5
 8772                             	.L1144:
 8773 0016 CD E1 1C                		mov.B	28[r14], r1
 8774                             	.LVL635:
 8775 0019 75 21 80                		and #0xffffff80, r1
 8776 001c 02                      		rts
 8777                             	.L1141:
6711:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 8778                             		.loc 1 6711 0
 8779 001d 61 21                   		cmp	#2, r1
 8780 001f 1B                      		bne	.L1142
 8781 0020 2E F0                   		bra	.L1145
 8782                             	.L1142:
6713:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 8783                             		.loc 1 6713 0
 8784 0022 61 31                   		cmp	#3, r1
 8785 0024 1B                      		bne	.L1143
 8786 0025 2E EB                   		bra	.L1145
 8787                             	.L1143:
6716:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 8788                             		.loc 1 6716 0
 8789 0027 75 41 30                		mov.L	#48, r1
 8790 002a 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 8791                             	.LVL636:
6717:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     return 0;
 8792                             		.loc 1 6717 0
 8793 002e 66 01                   		mov.L	#0, r1
6718:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* DMA_IsPending */
 8794                             		.loc 1 6718 0
 8795 0030 02                      		rts
 8796                             	.LFE134:
 8798 0031 03                      		.section	.text.DMA_IsDestinationError,"ax",@progbits
 8799                             		.global	_DMA_IsDestinationError
 8801                             	_DMA_IsDestinationError:
 8802                             	.LFB135:
6724:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 8803                             		.loc 1 6724 0
 8804                             	.LVL637:
6726:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* DMA_IsDestinationError */
 8805                             		.loc 1 6726 0
 8806 0000 66 01                   		mov.L	#0, r1
 8807                             	.LVL638:
 8808 0002 02                      		rts
 8809                             	.LFE135:
 8811                             		.section	.text.DMA_IsSourceError,"ax",@progbits
 8812                             		.global	_DMA_IsSourceError
 8814                             	_DMA_IsSourceError:
 8815                             	.LFB136:
6732:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 8816                             		.loc 1 6732 0
 8817                             	.LVL639:
6734:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* DMA_IsSourceError */
 8818                             		.loc 1 6734 0
 8819 0000 66 01                   		mov.L	#0, r1
 8820                             	.LVL640:
 8821 0002 02                      		rts
 8822                             	.LFE136:
 8824                             		.section	.text.DMA_IsConfigError,"ax",@progbits
 8825                             		.global	_DMA_IsConfigError
 8827                             	_DMA_IsConfigError:
 8828                             	.LFB137:
6740:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 8829                             		.loc 1 6740 0
 8830                             	.LVL641:
6742:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* DMA_IsConfigError */
 8831                             		.loc 1 6742 0
 8832 0000 66 01                   		mov.L	#0, r1
 8833                             	.LVL642:
 8834 0002 02                      		rts
 8835                             	.LFE137:
 8837                             		.section	.text.DMA_PeripheralRequestOn,"ax",@progbits
 8838                             		.global	_DMA_PeripheralRequestOn
 8840                             	_DMA_PeripheralRequestOn:
 8841                             	.LFB138:
6748:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 8842                             		.loc 1 6748 0
 8843                             	.LVL643:
6749:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 8844                             		.loc 1 6749 0
 8845 0000 5B 11                   		movu.B	r1, r1
 8846 0002 61 01                   		cmp	#0, r1
 8847 0004 18                      		bne	.L1150
6750:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(0) |= INTERRUPT_REQUEST;
 8848                             		.loc 1 6750 0
 8849 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 8850 000a 2E 1E                   		bra	.L1155
 8851                             	.L1150:
6751:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 8852                             		.loc 1 6751 0
 8853 000c 61 11                   		cmp	#1, r1
 8854 000e 18                      		bne	.L1152
6752:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(1) |= INTERRUPT_REQUEST;
 8855                             		.loc 1 6752 0
 8856 000f FB EE 40 20 08          		mov.L	#0x82040, r14
 8857 0014 2E 14                   		bra	.L1155
 8858                             	.L1152:
6753:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 8859                             		.loc 1 6753 0
 8860 0016 61 21                   		cmp	#2, r1
 8861 0018 1F                      		bne	.L1153
6754:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(2) |= INTERRUPT_REQUEST;
 8862                             		.loc 1 6754 0
 8863 0019 FB EE 80 20 08          		mov.L	#0x82080, r14
 8864 001e 0A                      		bra	.L1155
 8865                             	.L1153:
6755:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 8866                             		.loc 1 6755 0
 8867 001f 61 31                   		cmp	#3, r1
 8868 0021 21 10                   		bne	.L1154
6756:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(3) |= INTERRUPT_REQUEST;
 8869                             		.loc 1 6756 0
 8870 0023 FB EE C0 20 08          		mov.L	#0x820c0, r14
 8871                             		.balign 2,3,5
 8872                             	.L1155:
 8873 0028 DD E4 08                		mov.W	16[r14], r4
 8874 002b 78 04                   		bset #0, r4
 8875 002d D7 E4 08                		mov.W	r4, 16[r14]
 8876 0030 02                      		rts
 8877                             	.L1154:
6758:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 8878                             		.loc 1 6758 0
 8879 0031 75 41 30                		mov.L	#48, r1
 8880                             	.LVL644:
 8881 0034 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 8882                             	.LVL645:
 8883                             	.LFE138:
 8885                             		.section	.text.DMA_PeripheralRequestOff,"ax",@progbits
 8886                             		.global	_DMA_PeripheralRequestOff
 8888                             	_DMA_PeripheralRequestOff:
 8889                             	.LFB139:
6766:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 8890                             		.loc 1 6766 0
 8891                             	.LVL646:
6767:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 8892                             		.loc 1 6767 0
 8893 0000 5B 11                   		movu.B	r1, r1
 8894 0002 61 01                   		cmp	#0, r1
 8895 0004 18                      		bne	.L1157
6768:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(0) &= 0xFF00;
 8896                             		.loc 1 6768 0
 8897 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 8898 000a 2E 1E                   		bra	.L1162
 8899                             	.L1157:
6769:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 8900                             		.loc 1 6769 0
 8901 000c 61 11                   		cmp	#1, r1
 8902 000e 18                      		bne	.L1159
6770:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(1) &= 0xFF00;
 8903                             		.loc 1 6770 0
 8904 000f FB EE 40 20 08          		mov.L	#0x82040, r14
 8905 0014 2E 14                   		bra	.L1162
 8906                             	.L1159:
6771:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 8907                             		.loc 1 6771 0
 8908 0016 61 21                   		cmp	#2, r1
 8909 0018 1F                      		bne	.L1160
6772:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(2) &= 0xFF00;
 8910                             		.loc 1 6772 0
 8911 0019 FB EE 80 20 08          		mov.L	#0x82080, r14
 8912 001e 0A                      		bra	.L1162
 8913                             	.L1160:
6773:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 8914                             		.loc 1 6773 0
 8915 001f 61 31                   		cmp	#3, r1
 8916 0021 21 12                   		bne	.L1161
6774:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(3) &= 0xFF00;
 8917                             		.loc 1 6774 0
 8918 0023 FB EE C0 20 08          		mov.L	#0x820c0, r14
 8919                             		.balign 2,3,5
 8920                             	.L1162:
 8921 0028 DD E4 08                		mov.W	16[r14], r4
 8922 002b 76 24 00 FF             		and #0xffffff00, r4
 8923 002f D7 E4 08                		mov.W	r4, 16[r14]
 8924 0032 02                      		rts
 8925                             	.L1161:
6776:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 8926                             		.loc 1 6776 0
 8927 0033 75 41 30                		mov.L	#48, r1
 8928                             	.LVL647:
 8929 0036 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 8930                             	.LVL648:
 8931                             	.LFE139:
 8933                             		.section	.text.DMA_ContinuousTransfer,"ax",@progbits
 8934                             		.global	_DMA_ContinuousTransfer
 8936                             	_DMA_ContinuousTransfer:
 8937                             	.LFB140:
6784:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 8938                             		.loc 1 6784 0
 8939                             	.LVL649:
6785:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 8940                             		.loc 1 6785 0
 8941 0000 5B 11                   		movu.B	r1, r1
 8942 0002 61 01                   		cmp	#0, r1
 8943 0004 18                      		bne	.L1164
6786:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(0) |= DMA_REPEAT_TRANSFER_MASK;
 8944                             		.loc 1 6786 0
 8945 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 8946 000a 2E 1E                   		bra	.L1169
 8947                             	.L1164:
6787:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 8948                             		.loc 1 6787 0
 8949 000c 61 11                   		cmp	#1, r1
 8950 000e 18                      		bne	.L1166
6788:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(1) |= DMA_REPEAT_TRANSFER_MASK;
 8951                             		.loc 1 6788 0
 8952 000f FB EE 40 20 08          		mov.L	#0x82040, r14
 8953 0014 2E 14                   		bra	.L1169
 8954                             	.L1166:
6789:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 8955                             		.loc 1 6789 0
 8956 0016 61 21                   		cmp	#2, r1
 8957 0018 1F                      		bne	.L1167
6790:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(2) |= DMA_REPEAT_TRANSFER_MASK;
 8958                             		.loc 1 6790 0
 8959 0019 FB EE 80 20 08          		mov.L	#0x82080, r14
 8960 001e 0A                      		bra	.L1169
 8961                             	.L1167:
6791:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 8962                             		.loc 1 6791 0
 8963 001f 61 31                   		cmp	#3, r1
 8964 0021 21 10                   		bne	.L1168
6792:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(3) |= DMA_REPEAT_TRANSFER_MASK;
 8965                             		.loc 1 6792 0
 8966 0023 FB EE C0 20 08          		mov.L	#0x820c0, r14
 8967                             		.balign 2,3,5
 8968                             	.L1169:
 8969 0028 DD E4 08                		mov.W	16[r14], r4
 8970 002b 78 E4                   		bset #14, r4
 8971 002d D7 E4 08                		mov.W	r4, 16[r14]
 8972 0030 02                      		rts
 8973                             	.L1168:
6794:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 8974                             		.loc 1 6794 0
 8975 0031 75 41 30                		mov.L	#48, r1
 8976                             	.LVL650:
 8977 0034 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 8978                             	.LVL651:
 8979                             	.LFE140:
 8981                             		.section	.text.DMA_SingleTransfer,"ax",@progbits
 8982                             		.global	_DMA_SingleTransfer
 8984                             	_DMA_SingleTransfer:
 8985                             	.LFB141:
6802:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 8986                             		.loc 1 6802 0
 8987                             	.LVL652:
6803:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 8988                             		.loc 1 6803 0
 8989 0000 5B 11                   		movu.B	r1, r1
 8990 0002 61 01                   		cmp	#0, r1
 8991 0004 18                      		bne	.L1171
6804:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(0) &= 0x3FFF;
 8992                             		.loc 1 6804 0
 8993 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 8994 000a 2E 1E                   		bra	.L1176
 8995                             	.L1171:
6805:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 8996                             		.loc 1 6805 0
 8997 000c 61 11                   		cmp	#1, r1
 8998 000e 18                      		bne	.L1173
6806:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(1) &= 0x3FFF;
 8999                             		.loc 1 6806 0
 9000 000f FB EE 40 20 08          		mov.L	#0x82040, r14
 9001 0014 2E 14                   		bra	.L1176
 9002                             	.L1173:
6807:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 9003                             		.loc 1 6807 0
 9004 0016 61 21                   		cmp	#2, r1
 9005 0018 1F                      		bne	.L1174
6808:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(2) &= 0x3FFF;
 9006                             		.loc 1 6808 0
 9007 0019 FB EE 80 20 08          		mov.L	#0x82080, r14
 9008 001e 0A                      		bra	.L1176
 9009                             	.L1174:
6809:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 9010                             		.loc 1 6809 0
 9011 001f 61 31                   		cmp	#3, r1
 9012 0021 21 12                   		bne	.L1175
6810:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(3) &= 0x3FFF;
 9013                             		.loc 1 6810 0
 9014 0023 FB EE C0 20 08          		mov.L	#0x820c0, r14
 9015                             		.balign 2,3,5
 9016                             	.L1176:
 9017 0028 DD E4 08                		mov.W	16[r14], r4
 9018 002b 76 24 FF 3F             		and #0x3fff, r4
 9019 002f D7 E4 08                		mov.W	r4, 16[r14]
 9020 0032 02                      		rts
 9021                             	.L1175:
6812:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 9022                             		.loc 1 6812 0
 9023 0033 75 41 30                		mov.L	#48, r1
 9024                             	.LVL653:
 9025 0036 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 9026                             	.LVL654:
 9027                             	.LFE141:
 9029                             		.section	.text.DMA_BlockTransfer,"ax",@progbits
 9030                             		.global	_DMA_BlockTransfer
 9032                             	_DMA_BlockTransfer:
 9033                             	.LFB142:
6820:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9034                             		.loc 1 6820 0
 9035                             	.LVL655:
6821:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 9036                             		.loc 1 6821 0
 9037 0000 5B 11                   		movu.B	r1, r1
 9038 0002 61 01                   		cmp	#0, r1
 9039 0004 18                      		bne	.L1178
6822:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(0) |= DMA_BLOCK_TRANSFER_MASK;
 9040                             		.loc 1 6822 0
 9041 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 9042 000a 2E 1E                   		bra	.L1183
 9043                             	.L1178:
6823:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 9044                             		.loc 1 6823 0
 9045 000c 61 11                   		cmp	#1, r1
 9046 000e 18                      		bne	.L1180
6824:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(1) |= DMA_BLOCK_TRANSFER_MASK;
 9047                             		.loc 1 6824 0
 9048 000f FB EE 40 20 08          		mov.L	#0x82040, r14
 9049 0014 2E 14                   		bra	.L1183
 9050                             	.L1180:
6825:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 9051                             		.loc 1 6825 0
 9052 0016 61 21                   		cmp	#2, r1
 9053 0018 1F                      		bne	.L1181
6826:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(2) |= DMA_BLOCK_TRANSFER_MASK;
 9054                             		.loc 1 6826 0
 9055 0019 FB EE 80 20 08          		mov.L	#0x82080, r14
 9056 001e 0A                      		bra	.L1183
 9057                             	.L1181:
6827:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 9058                             		.loc 1 6827 0
 9059 001f 61 31                   		cmp	#3, r1
 9060 0021 21 12                   		bne	.L1182
6828:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(3) |= DMA_BLOCK_TRANSFER_MASK;
 9061                             		.loc 1 6828 0
 9062 0023 FB EE C0 20 08          		mov.L	#0x820c0, r14
 9063                             		.balign 2,3,5
 9064                             	.L1183:
 9065 0028 DD E4 08                		mov.W	16[r14], r4
 9066 002b 76 34 00 80             		or	#0xffff8000, r4
 9067 002f D7 E4 08                		mov.W	r4, 16[r14]
 9068 0032 02                      		rts
 9069                             	.L1182:
6830:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 9070                             		.loc 1 6830 0
 9071 0033 75 41 30                		mov.L	#48, r1
 9072                             	.LVL656:
 9073 0036 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 9074                             	.LVL657:
 9075                             	.LFE142:
 9077                             		.section	.text.DMA_SetDestinationSizeToByte,"ax",@progbits
 9078                             		.global	_DMA_SetDestinationSizeToByte
 9080                             	_DMA_SetDestinationSizeToByte:
 9081                             	.LFB143:
6837:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9082                             		.loc 1 6837 0
 9083                             	.LVL658:
 9084 0000 02                      		rts
 9085                             	.LFE143:
 9087                             		.section	.text.DMA_SetDestinationSizeToWord,"ax",@progbits
 9088                             		.global	_DMA_SetDestinationSizeToWord
 9090                             	_DMA_SetDestinationSizeToWord:
 9091                             	.LFB144:
6845:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9092                             		.loc 1 6845 0
 9093                             	.LVL659:
 9094 0000 02                      		rts
 9095                             	.LFE144:
 9097                             		.section	.text.DMA_SetDestinationSizeToLong,"ax",@progbits
 9098                             		.global	_DMA_SetDestinationSizeToLong
 9100                             	_DMA_SetDestinationSizeToLong:
 9101                             	.LFB145:
6853:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9102                             		.loc 1 6853 0
 9103                             	.LVL660:
 9104 0000 02                      		rts
 9105                             	.LFE145:
 9107                             		.section	.text.DMA_SetSourceSizeToLong,"ax",@progbits
 9108                             		.global	_DMA_SetSourceSizeToLong
 9110                             	_DMA_SetSourceSizeToLong:
 9111                             	.LFB146:
6860:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9112                             		.loc 1 6860 0
 9113                             	.LVL661:
 9114 0000 02                      		rts
 9115                             	.LFE146:
 9117                             		.section	.text.DMA_SetSourceSizeToByte,"ax",@progbits
 9118                             		.global	_DMA_SetSourceSizeToByte
 9120                             	_DMA_SetSourceSizeToByte:
 9121                             	.LFB147:
6867:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9122                             		.loc 1 6867 0
 9123                             	.LVL662:
 9124 0000 02                      		rts
 9125                             	.LFE147:
 9127                             		.section	.text.DMA_SetSourceSizeToWord,"ax",@progbits
 9128                             		.global	_DMA_SetSourceSizeToWord
 9130                             	_DMA_SetSourceSizeToWord:
 9131                             	.LFB148:
6874:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9132                             		.loc 1 6874 0
 9133                             	.LVL663:
 9134 0000 02                      		rts
 9135                             	.LFE148:
 9137                             		.section	.text.DMA_EnableSourceIncrement,"ax",@progbits
 9138                             		.global	_DMA_EnableSourceIncrement
 9140                             	_DMA_EnableSourceIncrement:
 9141                             	.LFB149:
6882:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9142                             		.loc 1 6882 0
 9143                             	.LVL664:
6883:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 9144                             		.loc 1 6883 0
 9145 0000 5B 11                   		movu.B	r1, r1
 9146 0002 61 01                   		cmp	#0, r1
 9147 0004 18                      		bne	.L1191
6884:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(0)|= DMA_SOURCE_ADDRESS_UPDATE_MODE_INCREMENT;
 9148                             		.loc 1 6884 0
 9149 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 9150 000a 2E 1E                   		bra	.L1196
 9151                             	.L1191:
6885:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 9152                             		.loc 1 6885 0
 9153 000c 61 11                   		cmp	#1, r1
 9154 000e 18                      		bne	.L1193
6886:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(1) |= DMA_SOURCE_ADDRESS_UPDATE_MODE_INCREMENT;
 9155                             		.loc 1 6886 0
 9156 000f FB EE 40 20 08          		mov.L	#0x82040, r14
 9157 0014 2E 14                   		bra	.L1196
 9158                             	.L1193:
6887:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 9159                             		.loc 1 6887 0
 9160 0016 61 21                   		cmp	#2, r1
 9161 0018 1F                      		bne	.L1194
6888:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(2) |= DMA_SOURCE_ADDRESS_UPDATE_MODE_INCREMENT;
 9162                             		.loc 1 6888 0
 9163 0019 FB EE 80 20 08          		mov.L	#0x82080, r14
 9164 001e 0A                      		bra	.L1196
 9165                             	.L1194:
6889:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 9166                             		.loc 1 6889 0
 9167 001f 61 31                   		cmp	#3, r1
 9168 0021 21 12                   		bne	.L1195
6890:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(3) |= DMA_SOURCE_ADDRESS_UPDATE_MODE_INCREMENT;
 9169                             		.loc 1 6890 0
 9170 0023 FB EE C0 20 08          		mov.L	#0x820c0, r14
 9171                             		.balign 2,3,5
 9172                             	.L1196:
 9173 0028 DD E4 0A                		mov.W	20[r14], r4
 9174 002b 76 34 00 80             		or	#0xffff8000, r4
 9175 002f D7 E4 0A                		mov.W	r4, 20[r14]
 9176 0032 02                      		rts
 9177                             	.L1195:
6892:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 9178                             		.loc 1 6892 0
 9179 0033 75 41 30                		mov.L	#48, r1
 9180                             	.LVL665:
 9181 0036 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 9182                             	.LVL666:
 9183                             	.LFE149:
 9185                             		.section	.text.DMA_DisableSourceIncrement,"ax",@progbits
 9186                             		.global	_DMA_DisableSourceIncrement
 9188                             	_DMA_DisableSourceIncrement:
 9189                             	.LFB150:
6899:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9190                             		.loc 1 6899 0
 9191                             	.LVL667:
6900:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 9192                             		.loc 1 6900 0
 9193 0000 5B 11                   		movu.B	r1, r1
 9194 0002 61 01                   		cmp	#0, r1
 9195 0004 18                      		bne	.L1198
6901:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(0) &= 0x3FFF;
 9196                             		.loc 1 6901 0
 9197 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 9198 000a 2E 1E                   		bra	.L1203
 9199                             	.L1198:
6902:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 9200                             		.loc 1 6902 0
 9201 000c 61 11                   		cmp	#1, r1
 9202 000e 18                      		bne	.L1200
6903:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(1) &= 0x3FFF;
 9203                             		.loc 1 6903 0
 9204 000f FB EE 40 20 08          		mov.L	#0x82040, r14
 9205 0014 2E 14                   		bra	.L1203
 9206                             	.L1200:
6904:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 9207                             		.loc 1 6904 0
 9208 0016 61 21                   		cmp	#2, r1
 9209 0018 1F                      		bne	.L1201
6905:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(2) &= 0x3FFF;
 9210                             		.loc 1 6905 0
 9211 0019 FB EE 80 20 08          		mov.L	#0x82080, r14
 9212 001e 0A                      		bra	.L1203
 9213                             	.L1201:
6906:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 9214                             		.loc 1 6906 0
 9215 001f 61 31                   		cmp	#3, r1
 9216 0021 21 12                   		bne	.L1202
6907:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(3) &= 0x3FFF;
 9217                             		.loc 1 6907 0
 9218 0023 FB EE C0 20 08          		mov.L	#0x820c0, r14
 9219                             		.balign 2,3,5
 9220                             	.L1203:
 9221 0028 DD E4 0A                		mov.W	20[r14], r4
 9222 002b 76 24 FF 3F             		and #0x3fff, r4
 9223 002f D7 E4 0A                		mov.W	r4, 20[r14]
 9224 0032 02                      		rts
 9225                             	.L1202:
6909:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 9226                             		.loc 1 6909 0
 9227 0033 75 41 30                		mov.L	#48, r1
 9228                             	.LVL668:
 9229 0036 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 9230                             	.LVL669:
 9231                             	.LFE150:
 9233                             		.section	.text.DMA_EnableDestinationIncrement,"ax",@progbits
 9234                             		.global	_DMA_EnableDestinationIncrement
 9236                             	_DMA_EnableDestinationIncrement:
 9237                             	.LFB151:
6916:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9238                             		.loc 1 6916 0
 9239                             	.LVL670:
6917:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 9240                             		.loc 1 6917 0
 9241 0000 5B 11                   		movu.B	r1, r1
 9242 0002 61 01                   		cmp	#0, r1
 9243 0004 18                      		bne	.L1205
6918:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(0)|= DMA_DESTIONATION_ADDRESS_UPDATE_MODE_INCREMENT;
 9244                             		.loc 1 6918 0
 9245 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 9246 000a 2E 1E                   		bra	.L1210
 9247                             	.L1205:
6919:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 9248                             		.loc 1 6919 0
 9249 000c 61 11                   		cmp	#1, r1
 9250 000e 18                      		bne	.L1207
6920:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(1) |= DMA_DESTIONATION_ADDRESS_UPDATE_MODE_INCREMENT;
 9251                             		.loc 1 6920 0
 9252 000f FB EE 40 20 08          		mov.L	#0x82040, r14
 9253 0014 2E 14                   		bra	.L1210
 9254                             	.L1207:
6921:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 9255                             		.loc 1 6921 0
 9256 0016 61 21                   		cmp	#2, r1
 9257 0018 1F                      		bne	.L1208
6922:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(2) |= DMA_DESTIONATION_ADDRESS_UPDATE_MODE_INCREMENT;
 9258                             		.loc 1 6922 0
 9259 0019 FB EE 80 20 08          		mov.L	#0x82080, r14
 9260 001e 0A                      		bra	.L1210
 9261                             	.L1208:
6923:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 9262                             		.loc 1 6923 0
 9263 001f 61 31                   		cmp	#3, r1
 9264 0021 21 10                   		bne	.L1209
6924:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(3) |= DMA_DESTIONATION_ADDRESS_UPDATE_MODE_INCREMENT;
 9265                             		.loc 1 6924 0
 9266 0023 FB EE C0 20 08          		mov.L	#0x820c0, r14
 9267                             		.balign 2,3,5
 9268                             	.L1210:
 9269 0028 DD E4 0A                		mov.W	20[r14], r4
 9270 002b 78 74                   		bset #7, r4
 9271 002d D7 E4 0A                		mov.W	r4, 20[r14]
 9272 0030 02                      		rts
 9273                             	.L1209:
6926:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 9274                             		.loc 1 6926 0
 9275 0031 75 41 30                		mov.L	#48, r1
 9276                             	.LVL671:
 9277 0034 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 9278                             	.LVL672:
 9279                             	.LFE151:
 9281                             		.section	.text.DMA_DisableDestinationIncrement,"ax",@progbits
 9282                             		.global	_DMA_DisableDestinationIncrement
 9284                             	_DMA_DisableDestinationIncrement:
 9285                             	.LFB152:
6934:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9286                             		.loc 1 6934 0
 9287                             	.LVL673:
6935:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 9288                             		.loc 1 6935 0
 9289 0000 5B 11                   		movu.B	r1, r1
 9290 0002 61 01                   		cmp	#0, r1
 9291 0004 18                      		bne	.L1212
6936:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(0)|= DMA_DESTIONATION_ADDRESS_UPDATE_MODE_INCREMENT;
 9292                             		.loc 1 6936 0
 9293 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 9294 000a 2E 1E                   		bra	.L1217
 9295                             	.L1212:
6937:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 9296                             		.loc 1 6937 0
 9297 000c 61 11                   		cmp	#1, r1
 9298 000e 18                      		bne	.L1214
6938:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(1) |= DMA_DESTIONATION_ADDRESS_UPDATE_MODE_INCREMENT;
 9299                             		.loc 1 6938 0
 9300 000f FB EE 40 20 08          		mov.L	#0x82040, r14
 9301 0014 2E 14                   		bra	.L1217
 9302                             	.L1214:
6939:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 9303                             		.loc 1 6939 0
 9304 0016 61 21                   		cmp	#2, r1
 9305 0018 1F                      		bne	.L1215
6940:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(2) |= DMA_DESTIONATION_ADDRESS_UPDATE_MODE_INCREMENT;
 9306                             		.loc 1 6940 0
 9307 0019 FB EE 80 20 08          		mov.L	#0x82080, r14
 9308 001e 0A                      		bra	.L1217
 9309                             	.L1215:
6941:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 9310                             		.loc 1 6941 0
 9311 001f 61 31                   		cmp	#3, r1
 9312 0021 21 10                   		bne	.L1216
6942:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ADDRESS_MODE_REGISTER(3) |= DMA_DESTIONATION_ADDRESS_UPDATE_MODE_INCREMENT;
 9313                             		.loc 1 6942 0
 9314 0023 FB EE C0 20 08          		mov.L	#0x820c0, r14
 9315                             		.balign 2,3,5
 9316                             	.L1217:
 9317 0028 DD E4 0A                		mov.W	20[r14], r4
 9318 002b 78 74                   		bset #7, r4
 9319 002d D7 E4 0A                		mov.W	r4, 20[r14]
 9320 0030 02                      		rts
 9321                             	.L1216:
6944:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 9322                             		.loc 1 6944 0
 9323 0031 75 41 30                		mov.L	#48, r1
 9324                             	.LVL674:
 9325 0034 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 9326                             	.LVL675:
 9327                             	.LFE152:
 9329                             		.section	.text.DMA_EnableAutoAlign,"ax",@progbits
 9330                             		.global	_DMA_EnableAutoAlign
 9332                             	_DMA_EnableAutoAlign:
 9333                             	.LFB153:
6953:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9334                             		.loc 1 6953 0
 9335                             	.LVL676:
 9336 0000 02                      		rts
 9337                             	.LFE153:
 9339                             		.section	.text.DMA_DisableAutoAlign,"ax",@progbits
 9340                             		.global	_DMA_DisableAutoAlign
 9342                             	_DMA_DisableAutoAlign:
 9343                             	.LFB154:
6961:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9344                             		.loc 1 6961 0
 9345                             	.LVL677:
 9346 0000 02                      		rts
 9347                             	.LFE154:
 9349                             		.section	.text.DMA_SetSourceAddressModulo,"ax",@progbits
 9350                             		.global	_DMA_SetSourceAddressModulo
 9352                             	_DMA_SetSourceAddressModulo:
 9353                             	.LFB155:
6968:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9354                             		.loc 1 6968 0
 9355                             	.LVL678:
 9356 0000 02                      		rts
 9357                             	.LFE155:
 9359                             		.section	.text.DMA_SetDestinationAddressModulo,"ax",@progbits
 9360                             		.global	_DMA_SetDestinationAddressModulo
 9362                             	_DMA_SetDestinationAddressModulo:
 9363                             	.LFB156:
6975:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9364                             		.loc 1 6975 0
 9365                             	.LVL679:
 9366 0000 02                      		rts
 9367                             	.LFE156:
 9369                             		.section	.text.DMA_SetDisableRequestOn,"ax",@progbits
 9370                             		.global	_DMA_SetDisableRequestOn
 9372                             	_DMA_SetDisableRequestOn:
 9373                             	.LFB157:
6982:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9374                             		.loc 1 6982 0
 9375                             	.LVL680:
6983:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 9376                             		.loc 1 6983 0
 9377 0000 5B 11                   		movu.B	r1, r1
 9378 0002 61 01                   		cmp	#0, r1
 9379 0004 18                      		bne	.L1223
6984:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(0) &= 0xFF00;
 9380                             		.loc 1 6984 0
 9381 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 9382 000a 2E 1E                   		bra	.L1228
 9383                             	.L1223:
6985:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 9384                             		.loc 1 6985 0
 9385 000c 61 11                   		cmp	#1, r1
 9386 000e 18                      		bne	.L1225
6986:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(1) &= 0xFF00;
 9387                             		.loc 1 6986 0
 9388 000f FB EE 40 20 08          		mov.L	#0x82040, r14
 9389 0014 2E 14                   		bra	.L1228
 9390                             	.L1225:
6987:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 9391                             		.loc 1 6987 0
 9392 0016 61 21                   		cmp	#2, r1
 9393 0018 1F                      		bne	.L1226
6988:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(2) &= 0xFF00;
 9394                             		.loc 1 6988 0
 9395 0019 FB EE 80 20 08          		mov.L	#0x82080, r14
 9396 001e 0A                      		bra	.L1228
 9397                             	.L1226:
6989:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 9398                             		.loc 1 6989 0
 9399 001f 61 31                   		cmp	#3, r1
 9400 0021 21 12                   		bne	.L1227
6990:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(3) &= 0xFF00;
 9401                             		.loc 1 6990 0
 9402 0023 FB EE C0 20 08          		mov.L	#0x820c0, r14
 9403                             		.balign 2,3,5
 9404                             	.L1228:
 9405 0028 DD E4 08                		mov.W	16[r14], r4
 9406 002b 76 24 00 FF             		and #0xffffff00, r4
 9407 002f D7 E4 08                		mov.W	r4, 16[r14]
 9408 0032 02                      		rts
 9409                             	.L1227:
6992:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 9410                             		.loc 1 6992 0
 9411 0033 75 41 30                		mov.L	#48, r1
 9412                             	.LVL681:
 9413 0036 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 9414                             	.LVL682:
 9415                             	.LFE157:
 9417                             		.section	.text.DMA_SetEnableRequestOn,"ax",@progbits
 9418                             		.global	_DMA_SetEnableRequestOn
 9420                             	_DMA_SetEnableRequestOn:
 9421                             	.LFB158:
7000:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9422                             		.loc 1 7000 0
 9423                             	.LVL683:
7001:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 9424                             		.loc 1 7001 0
 9425 0000 5B 11                   		movu.B	r1, r1
 9426 0002 61 01                   		cmp	#0, r1
 9427 0004 18                      		bne	.L1230
7002:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(0) |= INTERRUPT_REQUEST;
 9428                             		.loc 1 7002 0
 9429 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 9430 000a 2E 1E                   		bra	.L1235
 9431                             	.L1230:
7003:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 9432                             		.loc 1 7003 0
 9433 000c 61 11                   		cmp	#1, r1
 9434 000e 18                      		bne	.L1232
7004:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(1) |= INTERRUPT_REQUEST;
 9435                             		.loc 1 7004 0
 9436 000f FB EE 40 20 08          		mov.L	#0x82040, r14
 9437 0014 2E 14                   		bra	.L1235
 9438                             	.L1232:
7005:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 9439                             		.loc 1 7005 0
 9440 0016 61 21                   		cmp	#2, r1
 9441 0018 1F                      		bne	.L1233
7006:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(2) |= INTERRUPT_REQUEST;
 9442                             		.loc 1 7006 0
 9443 0019 FB EE 80 20 08          		mov.L	#0x82080, r14
 9444 001e 0A                      		bra	.L1235
 9445                             	.L1233:
7007:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 9446                             		.loc 1 7007 0
 9447 001f 61 31                   		cmp	#3, r1
 9448 0021 21 10                   		bne	.L1234
7008:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(3) |= INTERRUPT_REQUEST;
 9449                             		.loc 1 7008 0
 9450 0023 FB EE C0 20 08          		mov.L	#0x820c0, r14
 9451                             		.balign 2,3,5
 9452                             	.L1235:
 9453 0028 DD E4 08                		mov.W	16[r14], r4
 9454 002b 78 04                   		bset #0, r4
 9455 002d D7 E4 08                		mov.W	r4, 16[r14]
 9456 0030 02                      		rts
 9457                             	.L1234:
7010:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 9458                             		.loc 1 7010 0
 9459 0031 75 41 30                		mov.L	#48, r1
 9460                             	.LVL684:
 9461 0034 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 9462                             	.LVL685:
 9463                             	.LFE158:
 9465                             		.section	.text.DMA_LinkChannelControlMode,"ax",@progbits
 9466                             		.global	_DMA_LinkChannelControlMode
 9468                             	_DMA_LinkChannelControlMode:
 9469                             	.LFB159:
7020:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9470                             		.loc 1 7020 0
 9471                             	.LVL686:
7021:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 9472                             		.loc 1 7021 0
 9473 0000 5B 11                   		movu.B	r1, r1
 9474 0002 61 01                   		cmp	#0, r1
 9475 0004 21 15                   		bne	.L1237
7023:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(0) &= ~DMA_DTE_BIT_MASK;
 9476                             		.loc 1 7023 0
 9477 0006 FB EE 00 20 08          		mov.L	#0x82000, r14
 9478 000b F1 E8 1C                		bclr #0, 28[r14].B
7024:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ICU_ACTIVATION_REGISTER(0) = mode;
 9479                             		.loc 1 7024 0
 9480 000e FB 4E 00 70 08          		mov.L	#0x87000, r4
 9481 0013 CB 42 00 04             		mov.B	r2, 1024[r4]
 9482 0017 2E 45                   		bra	.L1242
 9483                             	.L1237:
7027:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 9484                             		.loc 1 7027 0
 9485 0019 61 11                   		cmp	#1, r1
 9486 001b 21 15                   		bne	.L1239
7029:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(1) &= ~DMA_DTE_BIT_MASK;
 9487                             		.loc 1 7029 0
 9488 001d FB EE 40 20 08          		mov.L	#0x82040, r14
 9489 0022 F1 E8 1C                		bclr #0, 28[r14].B
7030:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ICU_ACTIVATION_REGISTER(1) = mode;
 9490                             		.loc 1 7030 0
 9491 0025 FB 4E 00 70 08          		mov.L	#0x87000, r4
 9492 002a CB 42 04 04             		mov.B	r2, 1028[r4]
 9493 002e 2E 2E                   		bra	.L1242
 9494                             	.L1239:
7033:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 9495                             		.loc 1 7033 0
 9496 0030 61 21                   		cmp	#2, r1
 9497 0032 21 15                   		bne	.L1240
7035:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(2) &= ~DMA_DTE_BIT_MASK;
 9498                             		.loc 1 7035 0
 9499 0034 FB EE 80 20 08          		mov.L	#0x82080, r14
 9500 0039 F1 E8 1C                		bclr #0, 28[r14].B
7036:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ICU_ACTIVATION_REGISTER(2) = mode;
 9501                             		.loc 1 7036 0
 9502 003c FB 4E 00 70 08          		mov.L	#0x87000, r4
 9503 0041 CB 42 08 04             		mov.B	r2, 1032[r4]
 9504 0045 2E 17                   		bra	.L1242
 9505                             	.L1240:
7040:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 9506                             		.loc 1 7040 0
 9507 0047 61 31                   		cmp	#3, r1
 9508 0049 21 17                   		bne	.L1241
7042:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(3) &= ~DMA_DTE_BIT_MASK;
 9509                             		.loc 1 7042 0
 9510 004b FB EE C0 20 08          		mov.L	#0x820c0, r14
 9511 0050 F1 E8 1C                		bclr #0, 28[r14].B
7043:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_ICU_ACTIVATION_REGISTER(3) = mode;
 9512                             		.loc 1 7043 0
 9513 0053 FB 4E 00 70 08          		mov.L	#0x87000, r4
 9514 0058 CB 42 0C 04             		mov.B	r2, 1036[r4]
 9515                             		.balign 2,3,5
 9516                             	.L1242:
7044:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_ENABLE_REGISTER(3) |= DMA_DTE_BIT_MASK;
 9517                             		.loc 1 7044 0
 9518 005c F1 E0 1C                		bset #0, 28[r14].B
 9519 005f 02                      		rts
 9520                             	.L1241:
7047:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 9521                             		.loc 1 7047 0
 9522 0060 75 41 30                		mov.L	#48, r1
 9523                             	.LVL687:
 9524 0063 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 9525                             	.LVL688:
 9526                             	.LFE159:
 9528 0067 03                      		.section	.text.DMA_LinkChannel1Mode,"ax",@progbits
 9529                             		.global	_DMA_LinkChannel1Mode
 9531                             	_DMA_LinkChannel1Mode:
 9532                             	.LFB160:
7054:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9533                             		.loc 1 7054 0
 9534                             	.LVL689:
 9535 0000 02                      		rts
 9536                             	.LFE160:
 9538                             		.section	.text.DMA_LinkChannel2Mode,"ax",@progbits
 9539                             		.global	_DMA_LinkChannel2Mode
 9541                             	_DMA_LinkChannel2Mode:
 9542                             	.LFB161:
7061:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9543                             		.loc 1 7061 0
 9544                             	.LVL690:
 9545 0000 02                      		rts
 9546                             	.LFE161:
 9548                             		.section	.text.DMA_ControlDefault,"ax",@progbits
 9549                             		.global	_DMA_ControlDefault
 9551                             	_DMA_ControlDefault:
 9552                             	.LFB162:
7068:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9553                             		.loc 1 7068 0
 9554                             	.LVL691:
 9555 0000 02                      		rts
 9556                             	.LFE162:
 9558                             		.section	.text.DMA_SetDisableRequestOff,"ax",@progbits
 9559                             		.global	_DMA_SetDisableRequestOff
 9561                             	_DMA_SetDisableRequestOff:
 9562                             	.LFB163:
7075:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9563                             		.loc 1 7075 0
 9564                             	.LVL692:
 9565 0000 02                      		rts
 9566                             	.LFE163:
 9568                             		.section	.text.DMA_GetTrasferMode,"ax",@progbits
 9569                             		.global	_DMA_GetTrasferMode
 9571                             	_DMA_GetTrasferMode:
 9572                             	.LFB164:
7082:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9573                             		.loc 1 7082 0
 9574                             	.LVL693:
7084:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 9575                             		.loc 1 7084 0
 9576 0000 5B 11                   		movu.B	r1, r1
 9577 0002 61 01                   		cmp	#0, r1
 9578 0004 1F                      		bne	.L1248
7085:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         transfer_mode = ((_HAL_RX210_DMA_TRANSFER_MODE_REGISTER(0) & 0xF000)>>14);
 9579                             		.loc 1 7085 0
 9580 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 9581 000a 0A                      		bra	.L1253
 9582                             	.L1248:
7086:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 9583                             		.loc 1 7086 0
 9584 000b 61 11                   		cmp	#1, r1
 9585 000d 21 0E                   		bne	.L1250
7087:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         transfer_mode = ((_HAL_RX210_DMA_TRANSFER_MODE_REGISTER(1) & 0xF000)>>14);
 9586                             		.loc 1 7087 0
 9587 000f FB EE 40 20 08          		mov.L	#0x82040, r14
 9588                             		.balign 2,3,3
 9589                             	.L1253:
 9590 0014 5D E1 08                		movu.W	16[r14], r1
 9591                             	.LVL694:
 9592 0017 68 E1                   		shlr	#14, r1
 9593                             	.LVL695:
 9594 0019 2E 21                   		bra	.L1249
 9595                             	.LVL696:
 9596                             	.L1250:
7088:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 9597                             		.loc 1 7088 0
 9598 001b 61 21                   		cmp	#2, r1
 9599 001d 18                      		bne	.L1251
7089:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         transfer_mode = ((_HAL_RX210_DMA_TRANSFER_MODE_REGISTER(2) & 0xF000)>>14);
 9600                             		.loc 1 7089 0
 9601 001e FB EE 80 20 08          		mov.L	#0x82080, r14
 9602 0023 2E F1                   		bra	.L1253
 9603                             	.L1251:
7090:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 9604                             		.loc 1 7090 0
 9605 0025 61 31                   		cmp	#3, r1
 9606 0027 18                      		bne	.L1252
7091:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         transfer_mode = ((_HAL_RX210_DMA_TRANSFER_MODE_REGISTER(3) & 0xF000)>>14);
 9607                             		.loc 1 7091 0
 9608 0028 FB EE C0 20 08          		mov.L	#0x820c0, r14
 9609 002d 2E E7                   		bra	.L1253
 9610                             	.L1252:
7093:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 9611                             		.loc 1 7093 0
 9612 002f 75 41 30                		mov.L	#48, r1
 9613 0032 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 9614                             	.LVL697:
7083:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     uint8_t transfer_mode = 0xFF;
 9615                             		.loc 1 7083 0
 9616 0036 FB 16 FF                		mov	#-1, r1
 9617                             	.LVL698:
 9618 0039 03                      		.balign 2,3,1
 9619                             	.L1249:
7096:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* DMA_SetDisableRequestOff */
 9620                             		.loc 1 7096 0
 9621 003a 5B 11                   		movu.B	r1, r1
 9622 003c 02                      		rts
 9623                             	.LFE164:
 9625 003d 03                      		.section	.text.DMA_SetNumberOfRepetion,"ax",@progbits
 9626                             		.global	_DMA_SetNumberOfRepetion
 9628                             	_DMA_SetNumberOfRepetion:
 9629                             	.LFB165:
7104:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9630                             		.loc 1 7104 0
 9631                             	.LVL699:
7105:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 9632                             		.loc 1 7105 0
 9633 0000 5B 11                   		movu.B	r1, r1
 9634 0002 61 01                   		cmp	#0, r1
 9635 0004 18                      		bne	.L1255
7106:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_BLOCK_TRANSFER_COUNT_REGISTER(0) = count;
 9636                             		.loc 1 7106 0
 9637 0005 FB EE 00 20 08          		mov.L	#0x82000, r14
 9638 000a 2E 1E                   		bra	.L1260
 9639                             	.L1255:
7107:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 9640                             		.loc 1 7107 0
 9641 000c 61 11                   		cmp	#1, r1
 9642 000e 18                      		bne	.L1257
7108:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_BLOCK_TRANSFER_COUNT_REGISTER(1) = count;
 9643                             		.loc 1 7108 0
 9644 000f FB EE 40 20 08          		mov.L	#0x82040, r14
 9645 0014 2E 14                   		bra	.L1260
 9646                             	.L1257:
7109:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 9647                             		.loc 1 7109 0
 9648 0016 61 21                   		cmp	#2, r1
 9649 0018 1F                      		bne	.L1258
7110:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_BLOCK_TRANSFER_COUNT_REGISTER(2) = count;
 9650                             		.loc 1 7110 0
 9651 0019 FB EE 80 20 08          		mov.L	#0x82080, r14
 9652 001e 0A                      		bra	.L1260
 9653                             	.L1258:
7111:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 9654                             		.loc 1 7111 0
 9655 001f 61 31                   		cmp	#3, r1
 9656 0021 21 0B                   		bne	.L1259
7112:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_BLOCK_TRANSFER_COUNT_REGISTER(3) = count;
 9657                             		.loc 1 7112 0
 9658 0023 FB EE C0 20 08          		mov.L	#0x820c0, r14
 9659                             		.balign 2,3,5
 9660                             	.L1260:
 9661 0028 D7 E2 06                		mov.W	r2, 12[r14]
 9662 002b 02                      		rts
 9663                             	.L1259:
7114:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 9664                             		.loc 1 7114 0
 9665 002c 75 41 30                		mov.L	#48, r1
 9666                             	.LVL700:
 9667 002f 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 9668                             	.LVL701:
 9669                             	.LFE165:
 9671 0033 03                      		.section	.text.DMA_SetRepeatArea,"ax",@progbits
 9672                             		.global	_DMA_SetRepeatArea
 9674                             	_DMA_SetRepeatArea:
 9675                             	.LFB166:
7126:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9676                             		.loc 1 7126 0
 9677                             	.LVL702:
7127:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(channel == 0)
 9678                             		.loc 1 7127 0
 9679 0000 5B 11                   		movu.B	r1, r1
 9680 0002 61 01                   		cmp	#0, r1
 9681 0004 21 18                   		bne	.L1262
7128:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(0) &= 0xCFFF;
 9682                             		.loc 1 7128 0
 9683 0006 FB EE 00 20 08          		mov.L	#0x82000, r14
 9684 000b DD E4 08                		mov.W	16[r14], r4
 9685 000e 76 24 FF CF             		and #0xffffcfff, r4
 9686 0012 D7 E4 08                		mov.W	r4, 16[r14]
7138:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(mode != REPEAT_AREA_IS_DESTIONATION)
 9687                             		.loc 1 7138 0
 9688 0015 5F 24                   		movu.W	r2, r4
 9689 0017 61 04                   		cmp	#0, r4
 9690 0019 21 57                   		bne	.L1271
 9691 001b 02                      		rts
 9692                             	.L1262:
7129:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 1)
 9693                             		.loc 1 7129 0
 9694 001c 61 11                   		cmp	#1, r1
 9695 001e 21 18                   		bne	.L1265
7130:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(1) &= 0xCFFF;
 9696                             		.loc 1 7130 0
 9697 0020 FB EE 40 20 08          		mov.L	#0x82040, r14
 9698 0025 DD E4 08                		mov.W	16[r14], r4
 9699 0028 76 24 FF CF             		and #0xffffcfff, r4
 9700 002c D7 E4 08                		mov.W	r4, 16[r14]
7138:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(mode != REPEAT_AREA_IS_DESTIONATION)
 9701                             		.loc 1 7138 0
 9702 002f 5F 24                   		movu.W	r2, r4
 9703 0031 61 04                   		cmp	#0, r4
 9704 0033 21 3D                   		bne	.L1271
 9705 0035 02                      		rts
 9706                             	.L1265:
7131:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 2)
 9707                             		.loc 1 7131 0
 9708 0036 61 21                   		cmp	#2, r1
 9709 0038 21 18                   		bne	.L1268
7132:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(2) &= 0xCFFF;
 9710                             		.loc 1 7132 0
 9711 003a FB EE 80 20 08          		mov.L	#0x82080, r14
 9712 003f DD E4 08                		mov.W	16[r14], r4
 9713 0042 76 24 FF CF             		and #0xffffcfff, r4
 9714 0046 D7 E4 08                		mov.W	r4, 16[r14]
7138:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(mode != REPEAT_AREA_IS_DESTIONATION)
 9715                             		.loc 1 7138 0
 9716 0049 5F 24                   		movu.W	r2, r4
 9717 004b 61 04                   		cmp	#0, r4
 9718 004d 21 23                   		bne	.L1271
 9719 004f 02                      		rts
 9720                             	.L1268:
7133:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     else if(channel == 3)
 9721                             		.loc 1 7133 0
 9722 0050 61 31                   		cmp	#3, r1
 9723 0052 21 17                   		bne	.L1270
7134:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(3) &= 0xCFFF;
 9724                             		.loc 1 7134 0
 9725 0054 FB EE C0 20 08          		mov.L	#0x820c0, r14
 9726 0059 DD E4 08                		mov.W	16[r14], r4
 9727 005c 76 24 FF CF             		and #0xffffcfff, r4
 9728 0060 D7 E4 08                		mov.W	r4, 16[r14]
7138:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     if(mode != REPEAT_AREA_IS_DESTIONATION)
 9729                             		.loc 1 7138 0
 9730 0063 5F 24                   		movu.W	r2, r4
 9731 0065 61 04                   		cmp	#0, r4
 9732 0067 19                      		bne	.L1271
 9733 0068 02                      		rts
 9734                             	.L1270:
7136:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         HAL_ErrorHandler(1);
 9735                             		.loc 1 7136 0
 9736 0069 75 41 30                		mov.L	#48, r1
 9737                             	.LVL703:
 9738 006c 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 9739                             	.LVL704:
 9740                             	.L1271:
7147:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****             _HAL_RX210_DMA_TRANSFER_MODE_REGISTER(3) |= mode;
 9741                             		.loc 1 7147 0
 9742 0070 06 55 E2 08             		or	16[r14].W, r2
 9743                             	.LVL705:
 9744 0074 D7 E2 08                		mov.W	r2, 16[r14]
 9745 0077 02                      		rts
 9746                             	.LFE166:
 9748                             		.section	.text.SPI_ClkEnable,"ax",@progbits
 9749                             		.global	_SPI_ClkEnable
 9751                             	_SPI_ClkEnable:
 9752                             	.LFB167:
7162:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9753                             		.loc 1 7162 0
 9754                             	.LVL706:
7163:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     DISABLE_REGISTER_WRITE_PROTECTION;
 9755                             		.loc 1 7163 0
 9756 0000 FB EE 00 00 08          		mov.L	#0x80000, r14
 9757 0005 FA E9 FF 01 0F A5       		mov.W	#0xffffa50f, 1022[r14]
7164:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SYSTEM.MSTPCRB.BIT.MSTPB17 = 0;
 9758                             		.loc 1 7164 0
 9759 000b ED E4 05                		mov.L	20[r14], r4
 9760 000e 7B 14                   		bclr	#17, r4
 9761 0010 E7 E4 05                		mov.L	r4, 20[r14]
7165:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     ENABLE_REGISTER_WRITE_PROTECTION;
 9762                             		.loc 1 7165 0
 9763 0013 FA E9 FF 01 00 A5       		mov.W	#0xffffa500, 1022[r14]
 9764 0019 02                      		rts
 9765                             	.LFE167:
 9767                             		.section	.text.SPI_Enable,"ax",@progbits
 9768                             		.global	_SPI_Enable
 9770                             	_SPI_Enable:
 9771                             	.LFB168:
7172:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9772                             		.loc 1 7172 0
 9773                             	.LVL707:
7173:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SSLP.BIT.SSL0P = PDL_SPI_PIN_SSLO;	/* !< Slave Select Polarity Register */
 9774                             		.loc 1 7173 0
 9775 0000 FB EE 80 83 08          		mov.L	#0x88380, r14
 9776 0005 CD E4 01                		mov.B	1[r14], r4
 9777 0008 7A 04                   		bclr	#0, r4
 9778 000a C7 E4 01                		mov.B	r4, 1[r14]
7174:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPPCR.BYTE |= PDL_SPI_PIN_MOST_IDLE;	/* !< Mosi Idle control */
 9779                             		.loc 1 7174 0
 9780 000d CD E4 02                		mov.B	2[r14], r4
 9781 0010 C7 E4 02                		mov.B	r4, 2[r14]
7175:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPDCR.BIT.SPLW = TRUE;				/* !< SPDR is access in longwords */
 9782                             		.loc 1 7175 0
 9783 0013 CD E4 0B                		mov.B	11[r14], r4
 9784 0016 78 54                   		bset	#5, r4
 9785 0018 C7 E4 0B                		mov.B	r4, 11[r14]
7176:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPCR.BIT.SPE |= TRUE;
 9786                             		.loc 1 7176 0
 9787 001b CC E4                   		mov.B	[r14], r4
 9788 001d CC E4                   		mov.B	[r14], r4
 9789 001f 78 64                   		bset	#6, r4
 9790 0021 C3 E4                   		mov.B	r4, [r14]
 9791 0023 02                      		rts
 9792                             	.LFE168:
 9794                             		.section	.text.SPI_MasterEnable,"ax",@progbits
 9795                             		.global	_SPI_MasterEnable
 9797                             	_SPI_MasterEnable:
 9798                             	.LFB169:
7183:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9799                             		.loc 1 7183 0
 9800                             	.LVL708:
7185:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SPI_SET_SCLK_PIN;
 9801                             		.loc 1 7185 0
 9802 0000 FB 4E 0C C0 08          		mov.L	#0x8c00c, r4
 9803 0005 CC 4E                   		mov.B	[r4], r14
 9804 0007 78 5E                   		bset	#5, r14
 9805 0009 C3 4E                   		mov.B	r14, [r4]
 9806 000b CD 4E 60                		mov.B	96[r4], r14
 9807 000e 78 5E                   		bset	#5, r14
 9808 0010 C7 4E 60                		mov.B	r14, 96[r4]
 9809 0013 FB EE 00 C1 08          		mov.L	#0x8c100, r14
 9810 0018 F9 E4 1F 00             		mov.B	#0, 31[r14]
 9811 001c F1 E6 1F                		bset #6, 31[r14].B
 9812 001f F9 E4 A5 0D             		mov.B	#13, 165[r14]
 9813 0023 F9 E4 1F 00             		mov.B	#0, 31[r14]
 9814 0027 F9 E4 1F 80             		mov.B	#0xffffff80, 31[r14]
7186:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SPI_SET_SSL_PIN;
 9815                             		.loc 1 7186 0
 9816 002b FB 3E 0A C0 08          		mov.L	#0x8c00a, r3
 9817 0030 CC 32                   		mov.B	[r3], r2
 9818 0032 78 42                   		bset	#4, r2
 9819 0034 C3 32                   		mov.B	r2, [r3]
 9820 0036 CD 32 60                		mov.B	96[r3], r2
 9821 0039 78 42                   		bset	#4, r2
 9822 003b C7 32 60                		mov.B	r2, 96[r3]
 9823 003e F9 E4 1F 00             		mov.B	#0, 31[r14]
 9824 0042 F1 E6 1F                		bset #6, 31[r14].B
 9825 0045 F9 E4 94 0D             		mov.B	#13, 148[r14]
 9826 0049 F9 E4 1F 00             		mov.B	#0, 31[r14]
 9827 004d F9 E4 1F 80             		mov.B	#0xffffff80, 31[r14]
7187:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SPI_SET_MOSI_PIN;
 9828                             		.loc 1 7187 0
 9829 0051 CC 32                   		mov.B	[r3], r2
 9830 0053 78 62                   		bset	#6, r2
 9831 0055 C3 32                   		mov.B	r2, [r3]
 9832 0057 CD 32 60                		mov.B	96[r3], r2
 9833 005a 78 62                   		bset	#6, r2
 9834 005c C7 32 60                		mov.B	r2, 96[r3]
 9835 005f F9 E4 1F 00             		mov.B	#0, 31[r14]
 9836 0063 F1 E6 1F                		bset #6, 31[r14].B
 9837 0066 F9 E4 96 0D             		mov.B	#13, 150[r14]
 9838 006a F9 E4 1F 00             		mov.B	#0, 31[r14]
 9839 006e F9 E4 1F 80             		mov.B	#0xffffff80, 31[r14]
7188:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     SPI_SET_MISO_PIN;
 9840                             		.loc 1 7188 0
 9841 0072 CC 43                   		mov.B	[r4], r3
 9842 0074 78 73                   		bset	#7, r3
 9843 0076 C3 43                   		mov.B	r3, [r4]
 9844 0078 CD 43 60                		mov.B	96[r4], r3
 9845 007b 78 73                   		bset	#7, r3
 9846 007d C7 43 60                		mov.B	r3, 96[r4]
 9847 0080 F9 E4 1F 00             		mov.B	#0, 31[r14]
 9848 0084 F1 E6 1F                		bset #6, 31[r14].B
 9849 0087 F9 E4 A7 0D             		mov.B	#13, 167[r14]
 9850 008b F9 E4 1F 00             		mov.B	#0, 31[r14]
 9851 008f F9 E4 1F 80             		mov.B	#0xffffff80, 31[r14]
7190:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPCR.BIT.MSTR = 1;	/* !< Set SPI as Master */
 9852                             		.loc 1 7190 0
 9853 0093 FB EE 80 83 08          		mov.L	#0x88380, r14
 9854 0098 CC E4                   		mov.B	[r14], r4
 9855 009a 78 34                   		bset	#3, r4
 9856 009c C3 E4                   		mov.B	r4, [r14]
 9857 009e 02                      		rts
 9858                             	.LFE169:
 9860                             		.section	.text.SPI_SetClockPolarity,"ax",@progbits
 9861                             		.global	_SPI_SetClockPolarity
 9863                             	_SPI_SetClockPolarity:
 9864                             	.LFB170:
7197:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9865                             		.loc 1 7197 0
 9866                             	.LVL709:
7198:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPCMD0.BIT.CPOL = par_1;
 9867                             		.loc 1 7198 0
 9868 0000 FB EE 80 83 08          		mov.L	#0x88380, r14
 9869 0005 DD E4 08                		mov.W	16[r14], r4
 9870 0008 FD 74 C2 01             		tst	#1, r2
 9871 000c FD E1 14                		bmne	#1, r4
 9872 000f D7 E4 08                		mov.W	r4, 16[r14]
 9873 0012 02                      		rts
 9874                             	.LFE170:
 9876                             		.section	.text.SPI_SetClockPhase,"ax",@progbits
 9877                             		.global	_SPI_SetClockPhase
 9879                             	_SPI_SetClockPhase:
 9880                             	.LFB171:
7205:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9881                             		.loc 1 7205 0
 9882                             	.LVL710:
7206:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPCMD0.BIT.CPHA = pha;
 9883                             		.loc 1 7206 0
 9884 0000 FB EE 80 83 08          		mov.L	#0x88380, r14
 9885 0005 DD E4 08                		mov.W	16[r14], r4
 9886 0008 FD 74 C2 01             		tst	#1, r2
 9887 000c FD E0 14                		bmne	#0, r4
 9888 000f D7 E4 08                		mov.W	r4, 16[r14]
 9889 0012 02                      		rts
 9890                             	.LFE171:
 9892                             		.section	.text.SPI_ResetStatus,"ax",@progbits
 9893                             		.global	_SPI_ResetStatus
 9895                             	_SPI_ResetStatus:
 9896                             	.LFB172:
7213:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9897                             		.loc 1 7213 0
 9898                             	.LVL711:
7216:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPCR.BIT.SPE = SPI_ENABLE;
 9899                             		.loc 1 7216 0
 9900 0000 FB EE 80 83 08          		mov.L	#0x88380, r14
 9901 0005 CC E4                   		mov.B	[r14], r4
 9902 0007 78 64                   		bset	#6, r4
 9903 0009 C3 E4                   		mov.B	r4, [r14]
 9904 000b 75 4E 64                		mov	#0x64, r14
 9905                             	.LVL712:
 9906                             	.L1278:
7218:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****         __asm("nop");
 9907                             		.loc 1 7218 0 discriminator 2
 9908                             	 ; 7218 "C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200/RN_RX200_hal.c" 1
 9909 000e 03                      		nop
 9910                             	 ; 0 "" 2
 9911 000f 60 1E                   		sub	#1, r14
7217:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     for(i = 0; i < 100; i++)
 9912                             		.loc 1 7217 0 discriminator 2
 9913 0011 5B E4                   		movu.B	r14, r4
 9914 0013 61 04                   		cmp	#0, r4
 9915 0015 21 F9                   		bne	.L1278
7219:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPCR.BIT.SPE = SPI_DISABLE;	/* !< This command disable the SPI and performs reset of peri
 9916                             		.loc 1 7219 0
 9917 0017 FB EE 80 83 08          		mov.L	#0x88380, r14
 9918 001c CC E4                   		mov.B	[r14], r4
 9919 001e 7A 64                   		bclr	#6, r4
 9920 0020 C3 E4                   		mov.B	r4, [r14]
 9921 0022 02                      		rts
 9922                             	.LFE172:
 9924                             		.section	.text.SPI_SetBaudRate,"ax",@progbits
 9925                             		.global	_SPI_SetBaudRate
 9927                             	_SPI_SetBaudRate:
 9928                             	.LFB173:
7229:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9929                             		.loc 1 7229 0
 9930                             	.LVL713:
7230:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPCMD0.BIT.BRDV = BIT_RATE_DIVISION;
 9931                             		.loc 1 7230 0
 9932 0000 FB EE 80 83 08          		mov.L	#0x88380, r14
 9933 0005 DD E4 08                		mov.W	16[r14], r4
 9934 0008 65 C4                   		or	#12, r4
 9935 000a D7 E4 08                		mov.W	r4, 16[r14]
7231:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPBR.BYTE  = _HAL_SPI_BAUDRATE(baudrate);
 9936                             		.loc 1 7231 0
 9937 000d 6C 42                   		shll	#4, r2
 9938                             	.LVL714:
 9939 000f FB 42 00 2D 31 01       		mov.L	#0x1312d00, r4
 9940 0015 FC 27 24                		divu	r2, r4
 9941 0018 60 14                   		sub	#1, r4
 9942 001a C7 E4 0A                		mov.B	r4, 10[r14]
 9943 001d 02                      		rts
 9944                             	.LFE173:
 9946                             		.section	.text.SPI_SetShiftDir,"ax",@progbits
 9947                             		.global	_SPI_SetShiftDir
 9949                             	_SPI_SetShiftDir:
 9950                             	.LFB174:
7239:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9951                             		.loc 1 7239 0
 9952                             	.LVL715:
7240:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPCMD0.BIT.LSBF = shift_direction;
 9953                             		.loc 1 7240 0
 9954 0000 FB EE 80 83 08          		mov.L	#0x88380, r14
 9955 0005 DD E4 08                		mov.W	16[r14], r4
 9956 0008 FD 74 C2 01             		tst	#1, r2
 9957 000c FD EC 14                		bmne	#12, r4
 9958 000f D7 E4 08                		mov.W	r4, 16[r14]
 9959 0012 02                      		rts
 9960                             	.LFE174:
 9962                             		.section	.text.SPI_WriteData,"ax",@progbits
 9963                             		.global	_SPI_WriteData
 9965                             	_SPI_WriteData:
 9966                             	.LFB175:
7247:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9967                             		.loc 1 7247 0
 9968                             	.LVL716:
7248:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     while (RSPI0.SPSR.BIT.IDLNF) ;
 9969                             		.loc 1 7248 0
 9970 0000 FB 4E 80 83 08          		mov.L	#0x88380, r4
 9971 0005 03                      		.balign 2,3,5
 9972                             	.L1283:
7248:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     while (RSPI0.SPSR.BIT.IDLNF) ;
 9973                             		.loc 1 7248 0 is_stmt 0 discriminator 1
 9974 0006 CD 4E 03                		mov.B 3[r4], r14
 9975 0009 64 2E                   		and #2, r14
 9976 000b 21 FB                   		bne	.L1283
7249:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPDR.LONG = (unsigned short)data;
 9977                             		.loc 1 7249 0 is_stmt 1
 9978 000d 5B 22                   		movu.B	r2, r2
 9979 000f FB EE 80 83 08          		mov.L	#0x88380, r14
 9980 0014 E7 E2 01                		mov.L	r2, 4[r14]
 9981 0017 02                      		rts
 9982                             	.LFE175:
 9984                             		.section	.text.SPI_ReadData,"ax",@progbits
 9985                             		.global	_SPI_ReadData
 9987                             	_SPI_ReadData:
 9988                             	.LFB176:
7256:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 9989                             		.loc 1 7256 0
 9990                             	.LVL717:
7258:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     data = RSPI0.SPDR.LONG;
 9991                             		.loc 1 7258 0
 9992 0000 FB EE 80 83 08          		mov.L	#0x88380, r14
 9993 0005 ED E1 01                		mov.L	4[r14], r1
 9994                             	.LVL718:
7260:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** } /* end SPI_WriteData */
 9995                             		.loc 1 7260 0
 9996 0008 5B 11                   		movu.B	r1, r1
 9997                             	.LVL719:
 9998 000a 02                      		rts
 9999                             	.LFE176:
 10001                             		.section	.text.SPI_IntEnable,"ax",@progbits
 10002                             		.global	_SPI_IntEnable
 10004                             	_SPI_IntEnable:
 10005                             	.LFB177:
7266:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 10006                             		.loc 1 7266 0
 10007                             	.LVL720:
7269:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_SPI_TX_IR = 0;
 10008                             		.loc 1 7269 0
 10009 0000 FB EE 00 70 08          		mov.L	#0x87000, r14
 10010 0005 F9 E4 2E 00             		mov.B	#0, 46[r14]
7271:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPCR.BIT.SPTIE = TRUE;
 10011                             		.loc 1 7271 0
 10012 0009 FB 4E 80 83 08          		mov.L	#0x88380, r4
 10013 000e CC 43                   		mov.B	[r4], r3
 10014 0010 78 53                   		bset	#5, r3
 10015 0012 C3 43                   		mov.B	r3, [r4]
7273:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_SPI_IPR_REG = SPI_INT_PRIORITY;
 10016                             		.loc 1 7273 0
 10017 0014 FA E4 2C 03 01          		mov.B	#1, 812[r14]
7275:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_SPI_IER_REG |= SPI_TX_IER_BIT;
 10018                             		.loc 1 7275 0
 10019 0019 F2 E6 05 02             		bset #6, 517[r14].B
7279:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_SPI_RX_IR = 0;
 10020                             		.loc 1 7279 0
 10021 001d F9 E4 2D 00             		mov.B	#0, 45[r14]
7281:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     RSPI0.SPCR.BIT.SPRIE = TRUE;
 10022                             		.loc 1 7281 0
 10023 0021 CC 43                   		mov.B	[r4], r3
 10024 0023 78 73                   		bset	#7, r3
 10025 0025 C3 43                   		mov.B	r3, [r4]
7283:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_SPI_IPR_REG = SPI_INT_PRIORITY;
 10026                             		.loc 1 7283 0
 10027 0027 FA E4 2C 03 01          		mov.B	#1, 812[r14]
7285:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     _HAL_RX210_SPI_IER_REG |= SPI_RX_IER_BIT;
 10028                             		.loc 1 7285 0
 10029 002c F2 E5 05 02             		bset #5, 517[r14].B
 10030 0030 02                      		rts
 10031                             	.LFE177:
 10033                             		.section	.text.SPI_GetStatus,"ax",@progbits
 10034                             		.global	_SPI_GetStatus
 10036                             	_SPI_GetStatus:
 10037                             	.LFB178:
7293:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** {
 10038                             		.loc 1 7293 0
 10039                             	.LVL721:
7295:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c ****     status = RSPI0.SPSR.BYTE;
 10040                             		.loc 1 7295 0
 10041 0000 FB EE 80 83 08          		mov.L	#0x88380, r14
7297:C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200\RN_RX200_hal.c **** }/* end SPI_GetStatus */
 10042                             		.loc 1 7297 0
 10043 0005 59 E1 03                		movu.B	3[r14], r1
 10044                             	.LVL722:
 10045 0008 02                      		rts
 10046                             	.LFE178:
 10048                             		.global	_BootShortInfo
 10049                             		.section	.Bootloader,"aw",@progbits
 10050                             		.balign 4
 10053                             	_BootShortInfo:
 10054 0000 00 00 00 00 00 00 00 00 		.zero	8
 10055                             		.global	_ResetInfo
 10056                             		.section	.ResetInfo,"aw",@progbits
 10057                             		.balign 4
 10060                             	_ResetInfo:
 10061 0000 00 00 00 00 00 00 00 00 		.zero	8
 10062                             		.global	_prescalerDivMap
 10063                             		.section	.rodata.prescalerDivMap,"a",@progbits
 10064                             		.balign 4
 10067                             	_prescalerDivMap:
 10068 0000 00 00 00 01             		.long	1
 10069 0004 00 00 00 04             		.long	4
 10070 0008 00 00 00 10             		.long	16
 10071 000c 00 00 00 40             		.long	64
 10072 0010 00 00 01 00             		.long	0x100
 10073 0014 00 00 04 00             		.long	0x400
 10074 0018 00 00 04 00             		.long	0x400
 10075 001c 00 00 04 00             		.long	0x400
 10076                             		.global	_ChTGRAAddr
 10077                             		.section	.rodata.ChTGRAAddr,"a",@progbits
 10078                             		.balign 4
 10081                             	_ChTGRAAddr:
 10082 0000 00 08 87 08             		.long	0x88708
 10083 0004 00 08 87 0A             		.long	0x8870a
 10084 0008 00 08 87 0C             		.long	0x8870c
 10085 000c 00 08 87 0E             		.long	0x8870e
 10086 0010 00 00 00 00             		.long	0
 10087 0014 00 08 87 20             		.long	0x88720
 10088 0018 00 08 87 22             		.long	0x88722
 10089 001c 00 08 87 88             		.long	0x88788
 10090 0020 00 08 87 8A             		.long	0x8878a
 10091 0024 00 00 00 00             		.long	0
 10092 0028 00 00 00 00             		.long	0
 10093 002c 00 08 88 08             		.long	0x88808
 10094 0030 00 08 88 0A             		.long	0x8880a
 10095 0034 00 00 00 00             		.long	0
 10096 0038 00 00 00 00             		.long	0
 10097 003c 00 08 86 18             		.long	0x88618
 10098 0040 00 08 86 1A             		.long	0x8861a
 10099 0044 00 08 86 24             		.long	0x88624
 10100 0048 00 08 86 26             		.long	0x88626
 10101 004c 00 00 00 00             		.long	0
 10102 0050 00 08 86 1C             		.long	0x8861c
 10103 0054 00 08 86 1E             		.long	0x8861e
 10104 0058 00 08 86 28             		.long	0x88628
 10105 005c 00 08 86 2A             		.long	0x8862a
 10106 0060 00 00 00 00             		.long	0
 10107                             		.global	_ChModeRegAddr_Nibble
 10108                             		.section	.rodata.ChModeRegAddr_Nibble,"a",@progbits
 10109                             		.balign 4
 10112                             	_ChModeRegAddr_Nibble:
 10113 0000 00 A5 11 0A             		.long	0xa5110a
 10114                             		.global	_ChModeRegAddr
 10115                             		.section	.rodata.ChModeRegAddr,"a",@progbits
 10116                             		.balign 4
 10119                             	_ChModeRegAddr:
 10120 0000 00 08 87 02             		.long	0x88702
 10121 0004 00 08 87 02             		.long	0x88702
 10122 0008 00 08 87 03             		.long	0x88703
 10123 000c 00 08 87 03             		.long	0x88703
 10124 0010 00 00 00 00             		.long	0
 10125 0014 00 00 00 00             		.long	0
 10126 0018 00 00 00 00             		.long	0
 10127 001c 00 08 87 82             		.long	0x88782
 10128 0020 00 08 87 82             		.long	0x88782
 10129 0024 00 00 00 00             		.long	0
 10130 0028 00 00 00 00             		.long	0
 10131 002c 00 08 88 02             		.long	0x88802
 10132 0030 00 08 88 02             		.long	0x88802
 10133 0034 00 00 00 00             		.long	0
 10134 0038 00 00 00 00             		.long	0
 10135 003c 00 08 86 04             		.long	0x88604
 10136 0040 00 08 86 04             		.long	0x88604
 10137 0044 00 08 86 05             		.long	0x88605
 10138 0048 00 08 86 05             		.long	0x88605
 10139 004c 00 00 00 00             		.long	0
 10140 0050 00 08 86 06             		.long	0x88606
 10141 0054 00 08 86 06             		.long	0x88606
 10142 0058 00 08 86 07             		.long	0x88607
 10143 005c 00 08 86 07             		.long	0x88607
 10144 0060 00 00 00 00             		.long	0
 10145                             		.global	_InterruptStack
 10146                             		.section	.interruptStack,"aw",@progbits
 10147                             		.balign 4
 10150                             	_InterruptStack:
 10151 0000 00 00 00 00 00 00 00 00 		.zero	1024
 10151      00 00 00 00 00 00 00 00 
 10151      00 00 00 00 00 00 00 00 
 10151      00 00 00 00 00 00 00 00 
 10151      00 00 00 00 00 00 00 00 
 10152                             		.global	_UserStack
 10153                             		.section	.userStack,"aw",@progbits
 10154                             		.balign 4
 10157                             	_UserStack:
 10158 0000 00 00 00 00 00 00 00 00 		.zero	1024
 10158      00 00 00 00 00 00 00 00 
 10158      00 00 00 00 00 00 00 00 
 10158      00 00 00 00 00 00 00 00 
 10158      00 00 00 00 00 00 00 00 
 10159                             		.section	.rodata.NoiseFilterPinMap,"a",@progbits
 10160                             		.balign 4
 10163                             	_NoiseFilterPinMap:
 10164 0000 00 08 C0 0B             		.long	0x8c00b
 10165 0004 00 08 C1 9B             		.long	0x8c19b
 10166 0008 08                      		.byte	8
 10167 0009 01                      		.byte	1
 10168 000a 00                      		.byte	0
 10169 000b 00                      		.byte	0
 10170 000c 00 08 C0 01             		.long	0x8c001
 10171 0010 00 08 C1 4D             		.long	0x8c14d
 10172 0014 20                      		.byte	32
 10173 0015 01                      		.byte	1
 10174 0016 01                      		.byte	1
 10175 0017 00                      		.byte	0
 10176 0018 00 08 C0 03             		.long	0x8c003
 10177 001c 00 08 C1 5A             		.long	0x8c15a
 10178 0020 04                      		.byte	4
 10179 0021 01                      		.byte	1
 10180 0022 02                      		.byte	2
 10181 0023 00                      		.byte	0
 10182 0024 00 08 C0 0A             		.long	0x8c00a
 10183 0028 00 08 C1 93             		.long	0x8c193
 10184 002c 08                      		.byte	8
 10185 002d 01                      		.byte	1
 10186 002e 03                      		.byte	3
 10187 002f 00                      		.byte	0
 10188 0030 00 08 C0 0E             		.long	0x8c00e
 10189 0034 00 08 C1 B4             		.long	0x8c1b4
 10190 0038 10                      		.byte	16
 10191 0039 02                      		.byte	2
 10192 003a 00                      		.byte	0
 10193 003b 01                      		.byte	1
 10194 003c 00 08 C0 0B             		.long	0x8c00b
 10195 0040 00 08 C1 9D             		.long	0x8c19d
 10196 0044 20                      		.byte	32
 10197 0045 02                      		.byte	2
 10198 0046 01                      		.byte	1
 10199 0047 01                      		.byte	1
 10200 0048 00 08 C0 02             		.long	0x8c002
 10201 004c 00 08 C1 56             		.long	0x8c156
 10202 0050 40                      		.byte	64
 10203 0051 01                      		.byte	1
 10204 0052 00                      		.byte	0
 10205 0053 03                      		.byte	3
 10206 0054 00 08 C0 02             		.long	0x8c002
 10207 0058 00 08 C1 57             		.long	0x8c157
 10208 005c 80                      		.byte	0xffffff80
 10209 005d 01                      		.byte	1
 10210 005e 01                      		.byte	1
 10211 005f 03                      		.byte	3
 10212 0060 00 08 C0 01             		.long	0x8c001
 10213 0064 00 08 C1 4C             		.long	0x8c14c
 10214 0068 10                      		.byte	16
 10215 0069 01                      		.byte	1
 10216 006a 00                      		.byte	0
 10217 006b 04                      		.byte	4
 10218 006c 00 08 C0 0C             		.long	0x8c00c
 10219 0070 00 08 C1 A5             		.long	0x8c1a5
 10220 0074 20                      		.byte	32
 10221 0075 01                      		.byte	1
 10222 0076 01                      		.byte	1
 10223 0077 04                      		.byte	4
 10224 0078 00 08 C0 0C             		.long	0x8c00c
 10225 007c 00 08 C1 A6             		.long	0x8c1a6
 10226 0080 40                      		.byte	64
 10227 0081 01                      		.byte	1
 10228 0082 02                      		.byte	2
 10229 0083 04                      		.byte	4
 10230 0084 00 08 C0 0B             		.long	0x8c00b
 10231 0088 00 08 C1 9E             		.long	0x8c19e
 10232 008c 40                      		.byte	64
 10233 008d 01                      		.byte	1
 10234 008e 03                      		.byte	3
 10235 008f 04                      		.byte	4
 10236 0090 00 08 C0 0A             		.long	0x8c00a
 10237 0094 00 08 C1 90             		.long	0x8c190
 10238 0098 01                      		.byte	1
 10239 0099 01                      		.byte	1
 10240 009a 00                      		.byte	0
 10241 009b 05                      		.byte	5
 10242 009c 00 08 C0 0C             		.long	0x8c00c
 10243 00a0 00 08 C1 A2             		.long	0x8c1a2
 10244 00a4 04                      		.byte	4
 10245 00a5 01                      		.byte	1
 10246 00a6 01                      		.byte	1
 10247 00a7 05                      		.byte	5
 10248 00a8 00 08 C0 0B             		.long	0x8c00b
 10249 00ac 00 08 C1 99             		.long	0x8c199
 10250 00b0 02                      		.byte	2
 10251 00b1 02                      		.byte	2
 10252 00b2 02                      		.byte	2
 10253 00b3 05                      		.byte	5
 10254 00b4 00 08 C0 03             		.long	0x8c003
 10255 00b8 00 08 C1 59             		.long	0x8c159
 10256 00bc 02                      		.byte	2
 10257 00bd 01                      		.byte	1
 10258 00be 03                      		.byte	3
 10259 00bf 05                      		.byte	5
 10260 00c0 00 08 C0 03             		.long	0x8c003
 10261 00c4 00 08 C1 58             		.long	0x8c158
 10262 00c8 01                      		.byte	1
 10263 00c9 40                      		.byte	64
 10264 00ca 00                      		.byte	0
 10265 00cb 06                      		.byte	6
 10266 00cc 00 08 C0 11             		.long	0x8c011
 10267 00d0 00 08 C1 C9             		.long	0x8c1c9
 10268 00d4 02                      		.byte	2
 10269 00d5 40                      		.byte	64
 10270 00d6 00                      		.byte	0
 10271 00d7 06                      		.byte	6
 10272 00d8 00 08 C0 03             		.long	0x8c003
 10273 00dc 00 08 C1 59             		.long	0x8c159
 10274 00e0 02                      		.byte	2
 10275 00e1 40                      		.byte	64
 10276 00e2 00                      		.byte	0
 10277 00e3 07                      		.byte	7
 10278 00e4 00 08 C0 11             		.long	0x8c011
 10279 00e8 00 08 C1 CA             		.long	0x8c1ca
 10280 00ec 04                      		.byte	4
 10281 00ed 40                      		.byte	64
 10282 00ee 00                      		.byte	0
 10283 00ef 07                      		.byte	7
 10284 00f0 00 08 C0 01             		.long	0x8c001
 10285 00f4 00 08 C1 4D             		.long	0x8c14d
 10286 00f8 20                      		.byte	32
 10287 00f9 40                      		.byte	64
 10288 00fa 00                      		.byte	0
 10289 00fb 08                      		.byte	8
 10290 00fc 00 08 C0 0E             		.long	0x8c00e
 10291 0100 00 08 C1 B5             		.long	0x8c1b5
 10292 0104 20                      		.byte	32
 10293 0105 40                      		.byte	64
 10294 0106 00                      		.byte	0
 10295 0107 08                      		.byte	8
 10296 0108 00 08 C0 0A             		.long	0x8c00a
 10297 010c 00 08 C1 94             		.long	0x8c194
 10298 0110 10                      		.byte	16
 10299 0111 40                      		.byte	64
 10300 0112 00                      		.byte	0
 10301 0113 08                      		.byte	8
 10302 0114 00 08 C0 0A             		.long	0x8c00a
 10303 0118 00 08 C1 93             		.long	0x8c193
 10304 011c 08                      		.byte	8
 10305 011d 40                      		.byte	64
 10306 011e 00                      		.byte	0
 10307 011f 09                      		.byte	9
 10308                             		.section	.rodata.CSWTCH.56,"a",@progbits
 10311                             	_CSWTCH.56:
 10312 0000 0B                      		.byte	11
 10313 0001 01                      		.byte	1
 10314 0002 00                      		.byte	0
 10315 0003 00                      		.byte	0
 10316                             		.section	.rodata.CSWTCH.67,"a",@progbits
 10319                             	_CSWTCH.67:
 10320 0000 00                      		.byte	0
 10321 0001 01                      		.byte	1
 10322 0002 02                      		.byte	2
 10323 0003 03                      		.byte	3
 10324                             		.section	.rodata.CSWTCH.69,"a",@progbits
 10327                             	_CSWTCH.69:
 10328 0000 07                      		.byte	7
 10329 0001 08                      		.byte	8
 10330                             		.section	.rodata.CSWTCH.71,"a",@progbits
 10333                             	_CSWTCH.71:
 10334 0000 0B                      		.byte	11
 10335 0001 0C                      		.byte	12
 10336                             		.section	.rodata.CSWTCH.73,"a",@progbits
 10339                             	_CSWTCH.73:
 10340 0000 0F                      		.byte	15
 10341 0001 10                      		.byte	16
 10342 0002 11                      		.byte	17
 10343 0003 12                      		.byte	18
 10344                             		.section	.rodata.CSWTCH.75,"a",@progbits
 10347                             	_CSWTCH.75:
 10348 0000 14                      		.byte	20
 10349 0001 15                      		.byte	21
 10350 0002 16                      		.byte	22
 10351 0003 17                      		.byte	23
 10352                             		.section	.rodata.CSWTCH.110,"a",@progbits
 10355                             	_CSWTCH.110:
 10356 0000 01                      		.byte	1
 10357 0001 02                      		.byte	2
 10358 0002 03                      		.byte	3
 10359                             		.section	.rodata.ADCMap,"a",@progbits
 10360                             		.balign 4
 10363                             	_ADCMap:
 10364 0000 00 08 C0 04             		.long	0x8c004
 10365 0004 01                      		.byte	1
 10366 0005 00                      		.byte	0
 10367 0006 00 00                   		.zero	2
 10368 0008 00 08 C0 04             		.long	0x8c004
 10369 000c 02                      		.byte	2
 10370 000d 01                      		.byte	1
 10371 000e 00 00                   		.zero	2
 10372 0010 00 08 C0 04             		.long	0x8c004
 10373 0014 04                      		.byte	4
 10374 0015 02                      		.byte	2
 10375 0016 00 00                   		.zero	2
 10376 0018 00 08 C0 04             		.long	0x8c004
 10377 001c 08                      		.byte	8
 10378 001d 03                      		.byte	3
 10379 001e 00 00                   		.zero	2
 10380 0020 00 08 C0 04             		.long	0x8c004
 10381 0024 10                      		.byte	16
 10382 0025 04                      		.byte	4
 10383 0026 00 00                   		.zero	2
 10384 0028 00 08 C0 04             		.long	0x8c004
 10385 002c 40                      		.byte	64
 10386 002d 06                      		.byte	6
 10387 002e 00 00                   		.zero	2
 10388 0030 00 08 C0 0E             		.long	0x8c00e
 10389 0034 01                      		.byte	1
 10390 0035 08                      		.byte	8
 10391 0036 00 00                   		.zero	2
 10392 0038 00 08 C0 0E             		.long	0x8c00e
 10393 003c 20                      		.byte	32
 10394 003d 0D                      		.byte	13
 10395 003e 00 00                   		.zero	2
 12021                             	.Letext0:
 12022                             		.file 2 "C:\\Workspace\\FW_Inertia\\branch_indesit\\HAL\\HAL_General/StandardTypes.h"
 12023                             		.file 3 "C:\\Workspace\\FW_Inertia\\branch_indesit\\PlatformLibrary\\LIB_Error/LIB_Error.h"
 12024                             		.file 4 "C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200/RN_RX200_reg.h"
 12025                             		.file 5 "C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200/RN_RX200_cfg.h"
 12026                             		.file 6 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Drivers/IO_driver.h"
 12027                             		.file 7 "C:/Workspace/FW_Inertia/branch_indesit/HAL/RN_RX200/RN_RX200_hal.h"
DEFINED SYMBOLS
                            *ABS*:00000000 RN_RX200_hal.c
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6      .text.TMR_GetMultiBmp:00000000 _TMR_GetMultiBmp
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:11     .text.TMR_GetMultiBmp:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:65     .text.GetInternalHWClearSourceValue:00000000 _GetInternalHWClearSourceValue
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:70     .text.GetInternalHWClearSourceValue:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:146    .text.LVDR_SetUp:00000000 _LVDR_SetUp
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:151    .text.LVDR_SetUp:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:226    .text.LVDW_SetTrip:00000000 _LVDW_SetTrip
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:231    .text.LVDW_SetTrip:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:314    .text.LVDR_GetTrip:00000000 _LVDR_GetTrip
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:318    .text.LVDR_GetTrip:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:332    .text.LVDW_GetTrip:00000000 _LVDW_GetTrip
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:336    .text.LVDW_GetTrip:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:350    .text.WDT_Enabled:00000000 _WDT_Enabled
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:354    .text.WDT_Enabled:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:361    .text.WDT_Refresh:00000000 _WDT_Refresh
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:365    .text.WDT_Refresh:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:375    .text.WDT_TimeoutExpired:00000000 _WDT_TimeoutExpired
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:379    .text.WDT_TimeoutExpired:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:390    .text.WDT_UntimelyResetOccurred:00000000 _WDT_UntimelyResetOccurred
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:394    .text.WDT_UntimelyResetOccurred:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:404    .text.WDT_ClearTimeoutExpired:00000000 _WDT_ClearTimeoutExpired
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:408    .text.WDT_ClearTimeoutExpired:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:418    .text.WDT_ClearUntimelyResetOccurred:00000000 _WDT_ClearUntimelyResetOccurred
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:422    .text.WDT_ClearUntimelyResetOccurred:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:432    .text.WDT_AllowUpdate:00000000 _WDT_AllowUpdate
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:436    .text.WDT_AllowUpdate:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:443    .text.WDT_ResetMCU:00000000 _WDT_ResetMCU
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:446    .text.WDT_ResetMCU:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:452    .text.WDT_IsWindowOpen:00000000 _WDT_IsWindowOpen
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:458    .text.WDT_IsWindowOpen:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:473    .text.WDT_IsJustBeforePermittedWindow:00000000 _WDT_IsJustBeforePermittedWindow
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:479    .text.WDT_IsJustBeforePermittedWindow:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:496    .text.WDT_IsRunning:00000000 _WDT_IsRunning
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:502    .text.WDT_IsRunning:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:516    .text.WDT_InitSync:00000000 _WDT_InitSync
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:519    .text.WDT_InitSync:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:525    .text.WDT_StartSync:00000000 _WDT_StartSync
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:529    .text.WDT_StartSync:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:536    .text.WDT_SetWindowingSync:00000000 _WDT_SetWindowingSync
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:541    .text.WDT_SetWindowingSync:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:551    .text.WDT_ReadCounter:00000000 _WDT_ReadCounter
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:555    .text.WDT_ReadCounter:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:565    .text.WDT_GetWindow:00000000 _WDT_GetWindow
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:569    .text.WDT_GetWindow:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:579    .text.WDT_ReadRSTCounter:00000000 _WDT_ReadRSTCounter
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:583    .text.WDT_ReadRSTCounter:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:590    .text.WDT_ResetRSTCounter:00000000 _WDT_ResetRSTCounter
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:593    .text.WDT_ResetRSTCounter:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:599    .text.SYS_GetResetSrcVal:00000000 _SYS_GetResetSrcVal
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:604    .text.SYS_GetResetSrcVal:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:640    .text.SYS_PowerOnReset:00000000 _SYS_PowerOnReset
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:645    .text.SYS_PowerOnReset:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:653    .text.SYS_WatchdogReset:00000000 _SYS_WatchdogReset
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:658    .text.SYS_WatchdogReset:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:668    .text.SYS_ExternalPinReset:00000000 _SYS_ExternalPinReset
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:673    .text.SYS_ExternalPinReset:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:682    .text.SYS_LossOfClockReset:00000000 _SYS_LossOfClockReset
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:687    .text.SYS_LossOfClockReset:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:695    .text.SYS_IllegalOpcodeReset:00000000 _SYS_IllegalOpcodeReset
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:700    .text.SYS_IllegalOpcodeReset:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:708    .text.SYS_LowVoltageReset:00000000 _SYS_LowVoltageReset
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:713    .text.SYS_LowVoltageReset:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:723    .text.SYS_DebuggerReset:00000000 _SYS_DebuggerReset
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:728    .text.SYS_DebuggerReset:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:736    .text.SYS_IllegalAddressReset:00000000 _SYS_IllegalAddressReset
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:741    .text.SYS_IllegalAddressReset:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:749    .text.SYS_UserReset:00000000 _SYS_UserReset
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:754    .text.SYS_UserReset:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:764    .text.CLK_EngageClkRefSync:00000000 _CLK_EngageClkRefSync
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:767    .text.CLK_EngageClkRefSync:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:773    .text.CLK_SetInternalClockSync:00000000 _CLK_SetInternalClockSync
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:778    .text.CLK_SetInternalClockSync:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:786    .text.CLK_SetExternalClockSync:00000000 _CLK_SetExternalClockSync
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:791    .text.CLK_SetExternalClockSync:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:799    .text.CLK_SetTrimSync:00000000 _CLK_SetTrimSync
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:803    .text.CLK_SetTrimSync:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:809    .text.CLK_SetFLLExternalClockSync:00000000 _CLK_SetFLLExternalClockSync
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:814    .text.CLK_SetFLLExternalClockSync:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:822    .text.CLK_SetFLLInternalClockSync:00000000 _CLK_SetFLLInternalClockSync
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:827    .text.CLK_SetFLLInternalClockSync:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:835    .text.DeInitGPIO:00000000 _DeInitGPIO
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:838    .text.DeInitGPIO:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:897    .text.DIO_IsNotDummyIO:00000000 _DIO_IsNotDummyIO
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:902    .text.DIO_IsNotDummyIO:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:923    .text.DIO_CheckDigitalFilterPin:00000000 _DIO_CheckDigitalFilterPin
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:928    .text.DIO_CheckDigitalFilterPin:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10163  .rodata.NoiseFilterPinMap:00000000 _NoiseFilterPinMap
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1001   .text.DIO_IsDigitalFilterAvailable:00000000 _DIO_IsDigitalFilterAvailable
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1006   .text.DIO_IsDigitalFilterAvailable:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1020   .text.DIO_DigitalFilterEnable:00000000 _DIO_DigitalFilterEnable
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1024   .text.DIO_DigitalFilterEnable:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1151   .text.DIO_DigitalFilterClkFrequencySet:00000000 _DIO_DigitalFilterClkFrequencySet
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1155   .text.DIO_DigitalFilterClkFrequencySet:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1334   .text.DIO_DigitalFilterClkFrequencyGet:00000000 _DIO_DigitalFilterClkFrequencyGet
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1339   .text.DIO_DigitalFilterClkFrequencyGet:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10311  .rodata.CSWTCH.56:00000000 _CSWTCH.56
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1456   .text.DIO_DigitalFilterDisable:00000000 _DIO_DigitalFilterDisable
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1461   .text.DIO_DigitalFilterDisable:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1556   .text.DIO_IsDigitalFilterEnabled:00000000 _DIO_IsDigitalFilterEnabled
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1561   .text.DIO_IsDigitalFilterEnabled:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1692   .text.MapClearResourceValue:00000000 _MapClearResourceValue
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1697   .text.MapClearResourceValue:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1758   .text.MapClearResourceId:00000000 _MapClearResourceId
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1763   .text.MapClearResourceId:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1828   .text.TMR_GetClearSourceId:00000000 _TMR_GetClearSourceId
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1833   .text.TMR_GetClearSourceId:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1843   .text.Threshold2SetUpUnsupported:00000000 _Threshold2SetUpUnsupported
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1848   .text.Threshold2SetUpUnsupported:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1856   .text.TMR_CheckClearSourceIdFailed:00000000 _TMR_CheckClearSourceIdFailed
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1861   .text.TMR_CheckClearSourceIdFailed:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1908   .text.TMR_GetClearSourceCh:00000000 _TMR_GetClearSourceCh
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1913   .text.TMR_GetClearSourceCh:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10319  .rodata.CSWTCH.67:00000000 _CSWTCH.67
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10327  .rodata.CSWTCH.69:00000000 _CSWTCH.69
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10333  .rodata.CSWTCH.71:00000000 _CSWTCH.71
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10339  .rodata.CSWTCH.73:00000000 _CSWTCH.73
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10347  .rodata.CSWTCH.75:00000000 _CSWTCH.75
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1985   .text.TMR_ClockGate:00000000 _TMR_ClockGate
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1989   .text.TMR_ClockGate:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2029   .text.TMR_SetPrescaler:00000000 _TMR_SetPrescaler
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2034   .text.TMR_SetPrescaler:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2112   .text.TMR_GetPrescalerDiv:00000000 _TMR_GetPrescalerDiv
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2117   .text.TMR_GetPrescalerDiv:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10067  .rodata.prescalerDivMap:00000000 _prescalerDivMap
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2182   .text.TMR_GetTickResolution:00000000 _TMR_GetTickResolution
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2187   .text.TMR_GetTickResolution:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2202   .text.TMR_SetSetPrescaleForTickResolution:00000000 _TMR_SetSetPrescaleForTickResolution
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2207   .text.TMR_SetSetPrescaleForTickResolution:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2215   .text.TMR_SetPrescalerDfltValue:00000000 _TMR_SetPrescalerDfltValue
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2220   .text.TMR_SetPrescalerDfltValue:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2288   .text.TMR_SetCountDir:00000000 _TMR_SetCountDir
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2293   .text.TMR_SetCountDir:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2308   .text.TMR_SetCountDirDfltValue:00000000 _TMR_SetCountDirDfltValue
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2312   .text.TMR_SetCountDirDfltValue:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2318   .text.TMR_SetModulo:00000000 _TMR_SetModulo
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2322   .text.TMR_SetModulo:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2590   .text.TMR_StopClockSource:00000000 _TMR_StopClockSource
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2594   .text.TMR_StopClockSource:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2636   .text.TMR_EnableTI:00000000 _TMR_EnableTI
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2639   .text.TMR_EnableTI:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2845   .text.TMR_DisableTI:00000000 _TMR_DisableTI
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2848   .text.TMR_DisableTI:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3016   .text.TMR_ClearTOF:00000000 _TMR_ClearTOF
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3020   .text.TMR_ClearTOF:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3097   .text.TMR_GetTOF:00000000 _TMR_GetTOF
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3101   .text.TMR_GetTOF:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3195   .text.TMR_SetChannelInputChapture:00000000 _TMR_SetChannelInputChapture
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3200   .text.TMR_SetChannelInputChapture:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3464   .text.TMR_SetChannelOutputCompare:00000000 _TMR_SetChannelOutputCompare
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3469   .text.TMR_SetChannelOutputCompare:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10119  .rodata.ChModeRegAddr:00000000 _ChModeRegAddr
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3499   .text.TMR_SetChannelPWM:00000000 _TMR_SetChannelPWM
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3504   .text.TMR_SetChannelPWM:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3903   .text.TMR_ToggleChannelEdgeMode:00000000 _TMR_ToggleChannelEdgeMode
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3908   .text.TMR_ToggleChannelEdgeMode:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3972   .text.TMR_SetTimeOn:00000000 _TMR_SetTimeOn
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3977   .text.TMR_SetTimeOn:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10081  .rodata.ChTGRAAddr:00000000 _ChTGRAAddr
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3998   .text.TMR_GetChValue:00000000 _TMR_GetChValue
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4002   .text.TMR_GetChValue:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4036   .text.TMR_GetTimeOn:00000000 _TMR_GetTimeOn
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4040   .text.TMR_GetTimeOn:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4054   .text.TMR_SetChannelPulses:00000000 _TMR_SetChannelPulses
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4059   .text.TMR_SetChannelPulses:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4197   .text.TMR_ClearChannelPulses:00000000 _TMR_ClearChannelPulses
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4202   .text.TMR_ClearChannelPulses:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4340   .text.TMR_SetChannelEdgeMode:00000000 _TMR_SetChannelEdgeMode
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4345   .text.TMR_SetChannelEdgeMode:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4420   .text.TMR_GetValue:00000000 _TMR_GetValue
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4425   .text.TMR_GetValue:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4489   .text.TMR_EnableCHI:00000000 _TMR_EnableCHI
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4494   .text.TMR_EnableCHI:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4733   .text.TMR_ReadCHF:00000000 _TMR_ReadCHF
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4738   .text.TMR_ReadCHF:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4876   .text.TMR_ClearCHF:00000000 _TMR_ClearCHF
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4880   .text.TMR_ClearCHF:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4906   .text.TMR_DisableCHI:00000000 _TMR_DisableCHI
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4910   .text.TMR_DisableCHI:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5171   .text.TMR_SetThreshold1:00000000 _TMR_SetThreshold1
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5176   .text.TMR_SetThreshold1:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5183   .text.TMR_SetModuloDfltValue:00000000 _TMR_SetModuloDfltValue
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5187   .text.TMR_SetModuloDfltValue:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5198   .text.TMR_GetModulo:00000000 _TMR_GetModulo
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5202   .text.TMR_GetModulo:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5459   .text.TMR_GetChannelEdgeMode:00000000 _TMR_GetChannelEdgeMode
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5463   .text.TMR_GetChannelEdgeMode:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10355  .rodata.CSWTCH.110:00000000 _CSWTCH.110
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5526   .text.TMR_SetCounterDfltValue:00000000 _TMR_SetCounterDfltValue
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5531   .text.TMR_SetCounterDfltValue:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5589   .text.TMR_GetCounter:00000000 _TMR_GetCounter
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5594   .text.TMR_GetCounter:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5669   .text.TMR_SetCounter:00000000 _TMR_SetCounter
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5674   .text.TMR_SetCounter:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5732   .text.OutputCompareModeUnsupported:00000000 _OutputCompareModeUnsupported
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5737   .text.OutputCompareModeUnsupported:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5759   .text.TMR_SetClockSource:00000000 _TMR_SetClockSource
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5764   .text.TMR_SetClockSource:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5794   .text.TMR_StopClockSourceMulti:00000000 _TMR_StopClockSourceMulti
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5798   .text.TMR_StopClockSourceMulti:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5843   .text.TMR_SetClockSourceMulti:00000000 _TMR_SetClockSourceMulti
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5848   .text.TMR_SetClockSourceMulti:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5861   .text.TMR_SetChannelOutputMode:00000000 _TMR_SetChannelOutputMode
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5865   .text.TMR_SetChannelOutputMode:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6287   .text.TMR_SetTimerDefaultMode:00000000 _TMR_SetTimerDefaultMode
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6292   .text.TMR_SetTimerDefaultMode:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6361   .text.TMR_DeInitChannel:00000000 _TMR_DeInitChannel
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6365   .text.TMR_DeInitChannel:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6413   .text.TMR_GetDelta:00000000 _TMR_GetDelta
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6417   .text.TMR_GetDelta:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6454   .text.IRQ_Init:00000000 _IRQ_Init
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6459   .text.IRQ_Init:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6682   .text.IRQ_SetEdge:00000000 _IRQ_SetEdge
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6687   .text.IRQ_SetEdge:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6797   .text.IRQ_IntEnable:00000000 _IRQ_IntEnable
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6802   .text.IRQ_IntEnable:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6895   .text.IRQ_DeInit:00000000 _IRQ_DeInit
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6900   .text.IRQ_DeInit:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7083   .text.IRQ_Acknowledge:00000000 _IRQ_Acknowledge
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7088   .text.IRQ_Acknowledge:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7157   .text.IRQ_GetEdge:00000000 _IRQ_GetEdge
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7162   .text.IRQ_GetEdge:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7239   .text.IRQ_pinIsHigh:00000000 _IRQ_pinIsHigh
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7244   .text.IRQ_pinIsHigh:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7341   .text.UART_TxByte:00000000 _UART_TxByte
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7346   .text.UART_TxByte:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7421   .text.ADC_ConfigurePinAsChannel:00000000 _ADC_ConfigurePinAsChannel
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7426   .text.ADC_ConfigurePinAsChannel:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7554   .text.ADC_DeConfigurePinAsChannel:00000000 _ADC_DeConfigurePinAsChannel
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7559   .text.ADC_DeConfigurePinAsChannel:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7681   .text.ADC_GetChannel:00000000 _ADC_GetChannel
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7685   .text.ADC_GetChannel:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10363  .rodata.ADCMap:00000000 _ADCMap
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7728   .text.ADC_StartConvertionOnChannel:00000000 _ADC_StartConvertionOnChannel
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7733   .text.ADC_StartConvertionOnChannel:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7781   .text.ADC_Init:00000000 _ADC_Init
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7785   .text.ADC_Init:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7804   .text.ADC_DeInit:00000000 _ADC_DeInit
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7808   .text.ADC_DeInit:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7820   .text.ADC_GetConvertedValueOnChannel:00000000 _ADC_GetConvertedValueOnChannel
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7825   .text.ADC_GetConvertedValueOnChannel:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7932   .text.DMA_ClockGate:00000000 _DMA_ClockGate
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7936   .text.DMA_ClockGate:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7950   .text.DMA_SetDevice:00000000 _DMA_SetDevice
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7955   .text.DMA_SetDevice:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7997   .text.DMA_GetDevice:00000000 _DMA_GetDevice
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8002   .text.DMA_GetDevice:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8010   .text.DMA_SetSAR:00000000 _DMA_SetSAR
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8015   .text.DMA_SetSAR:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8051   .text.DMA_GetSAR:00000000 _DMA_GetSAR
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8056   .text.DMA_GetSAR:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8101   .text.DMA_SetDAR:00000000 _DMA_SetDAR
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8106   .text.DMA_SetDAR:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8147   .text.DMA_GetDAR:00000000 _DMA_GetDAR
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8152   .text.DMA_GetDAR:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8197   .text.DMA_SetBCR:00000000 _DMA_SetBCR
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8202   .text.DMA_SetBCR:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8260   .text.DMA_GetBCR:00000000 _DMA_GetBCR
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8265   .text.DMA_GetBCR:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8310   .text.DMA_EnableInt:00000000 _DMA_EnableInt
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8315   .text.DMA_EnableInt:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8395   .text.DMA_DisableInt:00000000 _DMA_DisableInt
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8399   .text.DMA_DisableInt:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8471   .text.DMA_SetStartOn:00000000 _DMA_SetStartOn
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8476   .text.DMA_SetStartOn:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8512   .text.DMA_SetStartOff:00000000 _DMA_SetStartOff
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8517   .text.DMA_SetStartOff:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8558   .text.DMA_IsChannelBusy:00000000 _DMA_IsChannelBusy
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8563   .text.DMA_IsChannelBusy:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8607   .text.DMA_IsTransDone:00000000 _DMA_IsTransDone
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8612   .text.DMA_IsTransDone:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8656   .text.DMA_ClearTransDone:00000000 _DMA_ClearTransDone
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8661   .text.DMA_ClearTransDone:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8703   .text.IsDMAChannelTrasferEnabled:00000000 _IsDMAChannelTrasferEnabled
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8708   .text.IsDMAChannelTrasferEnabled:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8752   .text.DMA_IsPending:00000000 _DMA_IsPending
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8757   .text.DMA_IsPending:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8801   .text.DMA_IsDestinationError:00000000 _DMA_IsDestinationError
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8806   .text.DMA_IsDestinationError:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8814   .text.DMA_IsSourceError:00000000 _DMA_IsSourceError
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8819   .text.DMA_IsSourceError:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8827   .text.DMA_IsConfigError:00000000 _DMA_IsConfigError
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8832   .text.DMA_IsConfigError:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8840   .text.DMA_PeripheralRequestOn:00000000 _DMA_PeripheralRequestOn
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8845   .text.DMA_PeripheralRequestOn:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8888   .text.DMA_PeripheralRequestOff:00000000 _DMA_PeripheralRequestOff
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8893   .text.DMA_PeripheralRequestOff:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8936   .text.DMA_ContinuousTransfer:00000000 _DMA_ContinuousTransfer
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8941   .text.DMA_ContinuousTransfer:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8984   .text.DMA_SingleTransfer:00000000 _DMA_SingleTransfer
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8989   .text.DMA_SingleTransfer:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9032   .text.DMA_BlockTransfer:00000000 _DMA_BlockTransfer
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9037   .text.DMA_BlockTransfer:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9080   .text.DMA_SetDestinationSizeToByte:00000000 _DMA_SetDestinationSizeToByte
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9084   .text.DMA_SetDestinationSizeToByte:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9090   .text.DMA_SetDestinationSizeToWord:00000000 _DMA_SetDestinationSizeToWord
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9094   .text.DMA_SetDestinationSizeToWord:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9100   .text.DMA_SetDestinationSizeToLong:00000000 _DMA_SetDestinationSizeToLong
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9104   .text.DMA_SetDestinationSizeToLong:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9110   .text.DMA_SetSourceSizeToLong:00000000 _DMA_SetSourceSizeToLong
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9114   .text.DMA_SetSourceSizeToLong:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9120   .text.DMA_SetSourceSizeToByte:00000000 _DMA_SetSourceSizeToByte
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9124   .text.DMA_SetSourceSizeToByte:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9130   .text.DMA_SetSourceSizeToWord:00000000 _DMA_SetSourceSizeToWord
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9134   .text.DMA_SetSourceSizeToWord:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9140   .text.DMA_EnableSourceIncrement:00000000 _DMA_EnableSourceIncrement
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9145   .text.DMA_EnableSourceIncrement:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9188   .text.DMA_DisableSourceIncrement:00000000 _DMA_DisableSourceIncrement
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9193   .text.DMA_DisableSourceIncrement:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9236   .text.DMA_EnableDestinationIncrement:00000000 _DMA_EnableDestinationIncrement
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9241   .text.DMA_EnableDestinationIncrement:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9284   .text.DMA_DisableDestinationIncrement:00000000 _DMA_DisableDestinationIncrement
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9289   .text.DMA_DisableDestinationIncrement:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9332   .text.DMA_EnableAutoAlign:00000000 _DMA_EnableAutoAlign
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9336   .text.DMA_EnableAutoAlign:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9342   .text.DMA_DisableAutoAlign:00000000 _DMA_DisableAutoAlign
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9346   .text.DMA_DisableAutoAlign:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9352   .text.DMA_SetSourceAddressModulo:00000000 _DMA_SetSourceAddressModulo
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9356   .text.DMA_SetSourceAddressModulo:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9362   .text.DMA_SetDestinationAddressModulo:00000000 _DMA_SetDestinationAddressModulo
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9366   .text.DMA_SetDestinationAddressModulo:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9372   .text.DMA_SetDisableRequestOn:00000000 _DMA_SetDisableRequestOn
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9377   .text.DMA_SetDisableRequestOn:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9420   .text.DMA_SetEnableRequestOn:00000000 _DMA_SetEnableRequestOn
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9425   .text.DMA_SetEnableRequestOn:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9468   .text.DMA_LinkChannelControlMode:00000000 _DMA_LinkChannelControlMode
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9473   .text.DMA_LinkChannelControlMode:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9531   .text.DMA_LinkChannel1Mode:00000000 _DMA_LinkChannel1Mode
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9535   .text.DMA_LinkChannel1Mode:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9541   .text.DMA_LinkChannel2Mode:00000000 _DMA_LinkChannel2Mode
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9545   .text.DMA_LinkChannel2Mode:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9551   .text.DMA_ControlDefault:00000000 _DMA_ControlDefault
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9555   .text.DMA_ControlDefault:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9561   .text.DMA_SetDisableRequestOff:00000000 _DMA_SetDisableRequestOff
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9565   .text.DMA_SetDisableRequestOff:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9571   .text.DMA_GetTrasferMode:00000000 _DMA_GetTrasferMode
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9576   .text.DMA_GetTrasferMode:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9628   .text.DMA_SetNumberOfRepetion:00000000 _DMA_SetNumberOfRepetion
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9633   .text.DMA_SetNumberOfRepetion:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9674   .text.DMA_SetRepeatArea:00000000 _DMA_SetRepeatArea
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9679   .text.DMA_SetRepeatArea:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9751   .text.SPI_ClkEnable:00000000 _SPI_ClkEnable
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9756   .text.SPI_ClkEnable:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9770   .text.SPI_Enable:00000000 _SPI_Enable
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9775   .text.SPI_Enable:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9797   .text.SPI_MasterEnable:00000000 _SPI_MasterEnable
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9802   .text.SPI_MasterEnable:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9863   .text.SPI_SetClockPolarity:00000000 _SPI_SetClockPolarity
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9868   .text.SPI_SetClockPolarity:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9879   .text.SPI_SetClockPhase:00000000 _SPI_SetClockPhase
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9884   .text.SPI_SetClockPhase:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9895   .text.SPI_ResetStatus:00000000 _SPI_ResetStatus
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9900   .text.SPI_ResetStatus:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9927   .text.SPI_SetBaudRate:00000000 _SPI_SetBaudRate
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9932   .text.SPI_SetBaudRate:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9949   .text.SPI_SetShiftDir:00000000 _SPI_SetShiftDir
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9954   .text.SPI_SetShiftDir:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9965   .text.SPI_WriteData:00000000 _SPI_WriteData
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9970   .text.SPI_WriteData:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9987   .text.SPI_ReadData:00000000 _SPI_ReadData
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9992   .text.SPI_ReadData:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10004  .text.SPI_IntEnable:00000000 _SPI_IntEnable
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10009  .text.SPI_IntEnable:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10036  .text.SPI_GetStatus:00000000 _SPI_GetStatus
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10041  .text.SPI_GetStatus:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10053  .Bootloader:00000000 _BootShortInfo
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10060  .ResetInfo:00000000 _ResetInfo
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10112  .rodata.ChModeRegAddr_Nibble:00000000 _ChModeRegAddr_Nibble
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10150  .interruptStack:00000000 _InterruptStack
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10157  .userStack:00000000 _UserStack
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:80     .rodata.GetInternalHWClearSourceValue:00000000 .L18
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:87     .text.GetInternalHWClearSourceValue:00000011 .L13
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:93     .text.GetInternalHWClearSourceValue:0000001b .L14
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:98     .text.GetInternalHWClearSourceValue:00000025 .L15
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:110    .text.GetInternalHWClearSourceValue:00000034 .L16
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:122    .text.GetInternalHWClearSourceValue:00000042 .L17
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1050   .rodata.DIO_DigitalFilterEnable:00000000 .L95
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1062   .text.DIO_DigitalFilterEnable:00000031 .L86
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1066   .text.DIO_DigitalFilterEnable:00000038 .L87
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1143   .text.DIO_DigitalFilterEnable:000000bc .L84
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1076   .text.DIO_DigitalFilterEnable:0000004a .L88
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1088   .text.DIO_DigitalFilterEnable:0000005d .L89
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1098   .text.DIO_DigitalFilterEnable:00000071 .L90
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1108   .text.DIO_DigitalFilterEnable:00000085 .L91
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1116   .text.DIO_DigitalFilterEnable:00000092 .L92
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1124   .text.DIO_DigitalFilterEnable:0000009f .L93
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1132   .text.DIO_DigitalFilterEnable:000000ac .L94
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1211   .rodata.DIO_DigitalFilterClkFrequencySet:00000000 .L112
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1223   .text.DIO_DigitalFilterClkFrequencySet:00000061 .L103
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1230   .text.DIO_DigitalFilterClkFrequencySet:0000006a .L104
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1326   .text.DIO_DigitalFilterClkFrequencySet:0000010e .L99
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1243   .text.DIO_DigitalFilterClkFrequencySet:00000081 .L105
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1258   .text.DIO_DigitalFilterClkFrequencySet:00000095 .L106
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1271   .text.DIO_DigitalFilterClkFrequencySet:000000ab .L107
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1284   .text.DIO_DigitalFilterClkFrequencySet:000000c1 .L108
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1293   .text.DIO_DigitalFilterClkFrequencySet:000000d1 .L109
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1303   .text.DIO_DigitalFilterClkFrequencySet:000000e3 .L110
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1313   .text.DIO_DigitalFilterClkFrequencySet:000000f6 .L111
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1359   .rodata.DIO_DigitalFilterClkFrequencyGet:00000000 .L129
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1371   .text.DIO_DigitalFilterClkFrequencyGet:00000028 .L120
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1375   .text.DIO_DigitalFilterClkFrequencyGet:0000002f .L121
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1434   .text.DIO_DigitalFilterClkFrequencyGet:00000090 .L132
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1383   .text.DIO_DigitalFilterClkFrequencyGet:0000003c .L122
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1390   .text.DIO_DigitalFilterClkFrequencyGet:00000046 .L123
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1395   .text.DIO_DigitalFilterClkFrequencyGet:00000050 .L124
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1400   .text.DIO_DigitalFilterClkFrequencyGet:0000005a .L125
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1405   .text.DIO_DigitalFilterClkFrequencyGet:00000065 .L126
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1411   .text.DIO_DigitalFilterClkFrequencyGet:00000072 .L127
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1417   .text.DIO_DigitalFilterClkFrequencyGet:0000007f .L128
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1481   .rodata.DIO_DigitalFilterDisable:00000000 .L148
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1493   .text.DIO_DigitalFilterDisable:00000028 .L139
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1497   .text.DIO_DigitalFilterDisable:0000002f .L140
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1549   .text.DIO_DigitalFilterDisable:0000008c .L137
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1503   .text.DIO_DigitalFilterDisable:00000039 .L141
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1511   .text.DIO_DigitalFilterDisable:00000042 .L142
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1517   .text.DIO_DigitalFilterDisable:0000004c .L143
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1523   .text.DIO_DigitalFilterDisable:00000056 .L144
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1529   .text.DIO_DigitalFilterDisable:00000063 .L145
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1535   .text.DIO_DigitalFilterDisable:00000070 .L146
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1541   .text.DIO_DigitalFilterDisable:0000007d .L147
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1584   .rodata.DIO_IsDigitalFilterEnabled:00000000 .L162
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1596   .text.DIO_IsDigitalFilterEnabled:0000002c .L153
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1600   .text.DIO_IsDigitalFilterEnabled:00000033 .L154
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1678   .text.DIO_IsDigitalFilterEnabled:00000097 .L164
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1615   .text.DIO_IsDigitalFilterEnabled:00000045 .L155
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1624   .text.DIO_IsDigitalFilterEnabled:0000004e .L156
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1631   .text.DIO_IsDigitalFilterEnabled:00000058 .L157
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1638   .text.DIO_IsDigitalFilterEnabled:00000062 .L158
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1648   .text.DIO_IsDigitalFilterEnabled:0000006f .L159
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1658   .text.DIO_IsDigitalFilterEnabled:0000007c .L160
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1668   .text.DIO_IsDigitalFilterEnabled:0000008a .L161
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1707   .rodata.MapClearResourceValue:00000000 .L174
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1714   .text.MapClearResourceValue:00000011 .L169
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1743   .text.MapClearResourceValue:00000027 .L175
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1719   .text.MapClearResourceValue:00000015 .L171
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1726   .text.MapClearResourceValue:00000019 .L172
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1738   .text.MapClearResourceValue:00000024 .L176
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1773   .rodata.MapClearResourceId:00000000 .L184
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1796   .text.MapClearResourceId:00000019 .L179
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1808   .text.MapClearResourceId:00000024 .L186
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1813   .text.MapClearResourceId:00000027 .L185
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1802   .text.MapClearResourceId:0000001d .L178
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1782   .text.MapClearResourceId:00000011 .L182
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1790   .text.MapClearResourceId:00000015 .L183
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1875   .rodata.TMR_CheckClearSourceIdFailed:00000000 .L196
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1886   .text.TMR_CheckClearSourceIdFailed:0000001a .L195
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1882   .text.TMR_CheckClearSourceIdFailed:00000017 .L193
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1927   .rodata.TMR_GetClearSourceCh:00000000 .L207
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1934   .text.TMR_GetClearSourceCh:00000017 .L202
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1941   .text.TMR_GetClearSourceCh:00000023 .L203
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1948   .text.TMR_GetClearSourceCh:0000002f .L204
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1955   .text.TMR_GetClearSourceCh:0000003b .L205
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1962   .text.TMR_GetClearSourceCh:00000047 .L206
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2048   .rodata.TMR_SetPrescaler:00000000 .L229
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2055   .text.TMR_SetPrescaler:00000013 .L224
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2064   .text.TMR_SetPrescaler:00000024 .L225
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2073   .text.TMR_SetPrescaler:00000035 .L226
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2082   .text.TMR_SetPrescaler:00000048 .L227
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2091   .text.TMR_SetPrescaler:00000057 .L228
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2127   .rodata.TMR_GetPrescalerDiv:00000000 .L238
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2134   .text.TMR_GetPrescalerDiv:00000011 .L233
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2139   .text.TMR_GetPrescalerDiv:0000001a .L234
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2152   .text.TMR_GetPrescalerDiv:0000002e .L235
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2157   .text.TMR_GetPrescalerDiv:00000039 .L236
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2162   .text.TMR_GetPrescalerDiv:00000042 .L237
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2230   .rodata.TMR_SetPrescalerDfltValue:00000000 .L250
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2237   .text.TMR_SetPrescalerDfltValue:00000011 .L245
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2245   .text.TMR_SetPrescalerDfltValue:00000020 .L246
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2253   .text.TMR_SetPrescalerDfltValue:0000002f .L247
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2261   .text.TMR_SetPrescalerDfltValue:00000040 .L248
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2269   .text.TMR_SetPrescalerDfltValue:0000004d .L249
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2346   .rodata.TMR_SetModulo:00000000 .L262
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2439   .rodata.TMR_SetModulo:00000014 .L271
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2353   .text.TMR_SetModulo:00000021 .L257
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2363   .text.TMR_SetModulo:00000037 .L258
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2373   .text.TMR_SetModulo:0000004d .L259
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2383   .text.TMR_SetModulo:00000065 .L260
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2393   .text.TMR_SetModulo:00000079 .L261
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2446   .text.TMR_SetModulo:000000c2 .L266
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2483   .text.TMR_SetModulo:00000106 .L267
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2498   .text.TMR_SetModulo:00000122 .L268
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2513   .text.TMR_SetModulo:0000013d .L269
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2544   .text.TMR_SetModulo:00000173 .L270
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2657   .rodata.TMR_EnableTI:00000000 .L304
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2664   .text.TMR_EnableTI:0000001f .L299
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2691   .text.TMR_EnableTI:00000055 .L300
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2726   .text.TMR_EnableTI:00000099 .L301
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2761   .text.TMR_EnableTI:000000e1 .L302
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2788   .text.TMR_EnableTI:00000117 .L303
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2863   .rodata.TMR_DisableTI:00000000 .L328
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2870   .text.TMR_DisableTI:0000001d .L323
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2891   .text.TMR_DisableTI:0000004c .L324
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2918   .text.TMR_DisableTI:00000080 .L325
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2947   .text.TMR_DisableTI:000000bd .L326
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2968   .text.TMR_DisableTI:000000eb .L327
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3035   .rodata.TMR_ClearTOF:00000000 .L344
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3042   .text.TMR_ClearTOF:0000001a .L339
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3048   .text.TMR_ClearTOF:0000001f .L340
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3061   .text.TMR_ClearTOF:0000002d .L341
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3074   .text.TMR_ClearTOF:0000003b .L342
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3080   .text.TMR_ClearTOF:00000040 .L343
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3122   .rodata.TMR_GetTOF:00000000 .L356
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3129   .text.TMR_GetTOF:00000020 .L351
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3135   .text.TMR_GetTOF:00000025 .L352
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3148   .text.TMR_GetTOF:00000032 .L353
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3161   .text.TMR_GetTOF:0000003f .L354
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3167   .text.TMR_GetTOF:00000044 .L355
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3210   .rodata.TMR_SetChannelInputChapture:00000000 .L397
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3389   .text.TMR_SetChannelInputChapture:000000d9 .L398
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3427   .text.TMR_SetChannelInputChapture:00000118 .L382
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3443   .text.TMR_SetChannelInputChapture:0000012e .L399
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3236   .text.TMR_SetChannelInputChapture:00000015 .L384
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3384   .text.TMR_SetChannelInputChapture:000000d2 .L380
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3247   .text.TMR_SetChannelInputChapture:00000020 .L385
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3261   .text.TMR_SetChannelInputChapture:00000036 .L386
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3270   .text.TMR_SetChannelInputChapture:00000042 .L387
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3279   .text.TMR_SetChannelInputChapture:0000004d .L388
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3296   .text.TMR_SetChannelInputChapture:00000063 .L389
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3305   .text.TMR_SetChannelInputChapture:0000006f .L390
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3314   .text.TMR_SetChannelInputChapture:0000007a .L391
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3323   .text.TMR_SetChannelInputChapture:00000085 .L392
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3332   .text.TMR_SetChannelInputChapture:00000090 .L393
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3349   .text.TMR_SetChannelInputChapture:000000a6 .L394
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3366   .text.TMR_SetChannelInputChapture:000000bc .L395
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3375   .text.TMR_SetChannelInputChapture:000000c7 .L396
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3514   .rodata.TMR_SetChannelPWM:00000000 .L432
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3540   .text.TMR_SetChannelPWM:00000015 .L416
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3557   .text.TMR_SetChannelPWM:00000039 .L417
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3574   .text.TMR_SetChannelPWM:0000005f .L418
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3591   .text.TMR_SetChannelPWM:00000084 .L419
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3892   .text.TMR_SetChannelPWM:000002f8 .L415
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3614   .text.TMR_SetChannelPWM:000000b2 .L420
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3631   .text.TMR_SetChannelPWM:000000d7 .L421
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3648   .text.TMR_SetChannelPWM:000000fd .L422
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3665   .text.TMR_SetChannelPWM:00000127 .L423
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3688   .text.TMR_SetChannelPWM:0000015f .L424
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3711   .text.TMR_SetChannelPWM:0000018c .L425
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3739   .text.TMR_SetChannelPWM:000001c4 .L426
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3756   .text.TMR_SetChannelPWM:000001e8 .L427
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3784   .text.TMR_SetChannelPWM:00000220 .L428
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3810   .text.TMR_SetChannelPWM:00000257 .L429
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3838   .text.TMR_SetChannelPWM:0000028f .L430
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3860   .text.TMR_SetChannelPWM:000002be .L431
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4073   .rodata.TMR_SetChannelPulses:00000000 .L476
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4099   .text.TMR_SetChannelPulses:0000001e .L460
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4104   .text.TMR_SetChannelPulses:00000024 .L461
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4109   .text.TMR_SetChannelPulses:0000002a .L462
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4114   .text.TMR_SetChannelPulses:00000030 .L463
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4179   .text.TMR_SetChannelPulses:0000007d .L459
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4119   .text.TMR_SetChannelPulses:00000036 .L464
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4124   .text.TMR_SetChannelPulses:0000003c .L465
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4129   .text.TMR_SetChannelPulses:00000042 .L466
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4134   .text.TMR_SetChannelPulses:00000048 .L467
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4139   .text.TMR_SetChannelPulses:0000004e .L468
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4144   .text.TMR_SetChannelPulses:00000054 .L469
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4149   .text.TMR_SetChannelPulses:0000005a .L470
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4154   .text.TMR_SetChannelPulses:00000060 .L471
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4159   .text.TMR_SetChannelPulses:00000066 .L472
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4164   .text.TMR_SetChannelPulses:0000006c .L473
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4169   .text.TMR_SetChannelPulses:00000072 .L474
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4174   .text.TMR_SetChannelPulses:00000078 .L475
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4216   .rodata.TMR_ClearChannelPulses:00000000 .L496
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4242   .text.TMR_ClearChannelPulses:0000001e .L480
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4247   .text.TMR_ClearChannelPulses:00000024 .L481
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4252   .text.TMR_ClearChannelPulses:0000002a .L482
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4257   .text.TMR_ClearChannelPulses:00000030 .L483
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4322   .text.TMR_ClearChannelPulses:0000007d .L479
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4262   .text.TMR_ClearChannelPulses:00000036 .L484
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4267   .text.TMR_ClearChannelPulses:0000003c .L485
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4272   .text.TMR_ClearChannelPulses:00000042 .L486
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4277   .text.TMR_ClearChannelPulses:00000048 .L487
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4282   .text.TMR_ClearChannelPulses:0000004e .L488
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4287   .text.TMR_ClearChannelPulses:00000054 .L489
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4292   .text.TMR_ClearChannelPulses:0000005a .L490
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4297   .text.TMR_ClearChannelPulses:00000060 .L491
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4302   .text.TMR_ClearChannelPulses:00000066 .L492
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4307   .text.TMR_ClearChannelPulses:0000006c .L493
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4312   .text.TMR_ClearChannelPulses:00000072 .L494
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4317   .text.TMR_ClearChannelPulses:00000078 .L495
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4435   .rodata.TMR_GetValue:00000000 .L516
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4442   .text.TMR_GetValue:00000011 .L511
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4448   .text.TMR_GetValue:0000001a .L512
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4459   .text.TMR_GetValue:00000025 .L513
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4464   .text.TMR_GetValue:0000002f .L514
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4469   .text.TMR_GetValue:00000039 .L515
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4504   .rodata.TMR_EnableCHI:00000000 .L537
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4530   .text.TMR_EnableCHI:00000015 .L521
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4541   .text.TMR_EnableCHI:0000002f .L522
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4556   .text.TMR_EnableCHI:0000004d .L523
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4567   .text.TMR_EnableCHI:00000067 .L524
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4722   .text.TMR_EnableCHI:000001c9 .L520
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4578   .text.TMR_EnableCHI:00000081 .L525
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4589   .text.TMR_EnableCHI:0000009b .L526
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4600   .text.TMR_EnableCHI:000000b5 .L527
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4611   .text.TMR_EnableCHI:000000d0 .L528
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4626   .text.TMR_EnableCHI:000000ef .L529
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4637   .text.TMR_EnableCHI:0000010a .L530
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4648   .text.TMR_EnableCHI:00000124 .L531
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4659   .text.TMR_EnableCHI:0000013e .L532
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4670   .text.TMR_EnableCHI:00000158 .L533
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4681   .text.TMR_EnableCHI:00000172 .L534
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4696   .text.TMR_EnableCHI:00000191 .L535
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4707   .text.TMR_EnableCHI:000001ab .L536
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4748   .rodata.TMR_ReadCHF:00000000 .L561
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4774   .text.TMR_ReadCHF:00000015 .L545
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4780   .text.TMR_ReadCHF:0000001e .L546
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4791   .text.TMR_ReadCHF:00000029 .L547
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4796   .text.TMR_ReadCHF:00000033 .L548
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4861   .text.TMR_ReadCHF:000000b7 .L544
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4801   .text.TMR_ReadCHF:0000003d .L549
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4806   .text.TMR_ReadCHF:00000047 .L550
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4811   .text.TMR_ReadCHF:00000051 .L551
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4816   .text.TMR_ReadCHF:0000005b .L552
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4821   .text.TMR_ReadCHF:00000065 .L553
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4826   .text.TMR_ReadCHF:0000006f .L554
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4831   .text.TMR_ReadCHF:00000079 .L555
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4836   .text.TMR_ReadCHF:00000083 .L556
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4841   .text.TMR_ReadCHF:0000008d .L557
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4846   .text.TMR_ReadCHF:00000097 .L558
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4851   .text.TMR_ReadCHF:000000a1 .L559
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4856   .text.TMR_ReadCHF:000000ac .L560
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4925   .rodata.TMR_DisableCHI:00000000 .L587
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4951   .text.TMR_DisableCHI:0000001e .L571
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4959   .text.TMR_DisableCHI:0000002e .L572
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4971   .text.TMR_DisableCHI:00000042 .L573
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4979   .text.TMR_DisableCHI:00000052 .L574
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5101   .text.TMR_DisableCHI:0000013a .L570
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4987   .text.TMR_DisableCHI:00000062 .L575
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4995   .text.TMR_DisableCHI:00000072 .L576
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5007   .text.TMR_DisableCHI:00000086 .L577
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5015   .text.TMR_DisableCHI:00000097 .L578
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5027   .text.TMR_DisableCHI:000000ad .L579
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5035   .text.TMR_DisableCHI:000000bd .L580
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5043   .text.TMR_DisableCHI:000000cd .L581
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5051   .text.TMR_DisableCHI:000000dd .L582
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5063   .text.TMR_DisableCHI:000000f1 .L583
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5071   .text.TMR_DisableCHI:00000101 .L584
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5081   .text.TMR_DisableCHI:00000118 .L585
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5089   .text.TMR_DisableCHI:00000128 .L586
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5222   .rodata.TMR_GetModulo:00000000 .L609
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5240   .rodata.TMR_GetModulo:00000014 .L616
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5342   .rodata.TMR_GetModulo:00000030 .L628
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5394   .rodata.TMR_GetModulo:0000004c .L634
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5229   .text.TMR_GetModulo:0000001e .L604
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5281   .text.TMR_GetModulo:0000005c .L605
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5306   .text.TMR_GetModulo:00000082 .L606
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5331   .text.TMR_GetModulo:000000a6 .L607
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5383   .text.TMR_GetModulo:000000d9 .L608
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5445   .text.TMR_GetModulo:00000116 .L639
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5249   .text.TMR_GetModulo:00000030 .L612
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5257   .text.TMR_GetModulo:0000003b .L613
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5435   .text.TMR_GetModulo:0000010c .L603
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5265   .text.TMR_GetModulo:00000046 .L614
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5273   .text.TMR_GetModulo:00000051 .L615
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5351   .text.TMR_GetModulo:000000b5 .L624
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5359   .text.TMR_GetModulo:000000be .L625
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5367   .text.TMR_GetModulo:000000c7 .L626
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5375   .text.TMR_GetModulo:000000d0 .L627
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5403   .text.TMR_GetModulo:000000e8 .L630
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5411   .text.TMR_GetModulo:000000f1 .L631
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5419   .text.TMR_GetModulo:000000fa .L632
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5427   .text.TMR_GetModulo:00000103 .L633
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5541   .rodata.TMR_SetCounterDfltValue:00000000 .L657
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5548   .text.TMR_SetCounterDfltValue:00000011 .L652
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5554   .text.TMR_SetCounterDfltValue:0000001b .L653
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5560   .text.TMR_SetCounterDfltValue:00000025 .L654
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5566   .text.TMR_SetCounterDfltValue:0000002f .L655
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5572   .text.TMR_SetCounterDfltValue:00000039 .L656
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5604   .rodata.TMR_GetCounter:00000000 .L666
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5611   .text.TMR_GetCounter:00000011 .L661
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5619   .text.TMR_GetCounter:0000001b .L662
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5627   .text.TMR_GetCounter:00000025 .L663
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5635   .text.TMR_GetCounter:0000002f .L664
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5643   .text.TMR_GetCounter:00000039 .L665
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5684   .rodata.TMR_SetCounter:00000000 .L675
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5691   .text.TMR_SetCounter:00000011 .L670
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5697   .text.TMR_SetCounter:0000001a .L671
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5703   .text.TMR_SetCounter:00000023 .L672
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5709   .text.TMR_SetCounter:0000002c .L673
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5715   .text.TMR_SetCounter:00000035 .L674
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6201   .rodata.TMR_SetChannelOutputMode:00000000 .L722
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6244   .text.TMR_SetChannelOutputMode:000001d9 .L720
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6068   .text.TMR_SetChannelOutputMode:00000115 .L726
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6227   .text.TMR_SetChannelOutputMode:000001c3 .L721
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6261   .text.TMR_SetChannelOutputMode:000001ef .L727
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6060   .text.TMR_SetChannelOutputMode:0000010c .L714
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5897   .text.TMR_SetChannelOutputMode:0000002f .L701
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5912   .text.TMR_SetChannelOutputMode:00000045 .L703
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5922   .text.TMR_SetChannelOutputMode:00000051 .L704
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5932   .text.TMR_SetChannelOutputMode:0000005c .L705
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5950   .text.TMR_SetChannelOutputMode:00000073 .L706
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5962   .text.TMR_SetChannelOutputMode:00000084 .L707
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5972   .text.TMR_SetChannelOutputMode:0000008f .L708
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5982   .text.TMR_SetChannelOutputMode:0000009a .L709
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5997   .text.TMR_SetChannelOutputMode:000000b1 .L710
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6007   .text.TMR_SetChannelOutputMode:000000bd .L711
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6030   .text.TMR_SetChannelOutputMode:000000de .L712
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6045   .text.TMR_SetChannelOutputMode:000000f5 .L713
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6302   .rodata.TMR_SetTimerDefaultMode:00000000 .L746
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6334   .text.TMR_SetTimerDefaultMode:0000002d .L741
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6338   .text.TMR_SetTimerDefaultMode:00000033 .L748
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6309   .text.TMR_SetTimerDefaultMode:00000011 .L743
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6316   .text.TMR_SetTimerDefaultMode:00000018 .L744
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6322   .text.TMR_SetTimerDefaultMode:0000001f .L745
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6469   .rodata.IRQ_Init:00000000 .L770
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6481   .text.IRQ_Init:00000014 .L760
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6496   .text.IRQ_Init:00000038 .L761
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6511   .text.IRQ_Init:0000005c .L762
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6526   .text.IRQ_Init:00000080 .L763
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6541   .text.IRQ_Init:000000a4 .L764
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6591   .text.IRQ_Init:0000012f .L765
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6608   .text.IRQ_Init:0000015d .L766
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6557   .text.IRQ_Init:000000d1 .L767
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6574   .text.IRQ_Init:00000100 .L768
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6625   .text.IRQ_Init:0000018b .L769
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7019   .rodata.IRQ_DeInit:00000000 .L872
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7027   .text.IRQ_DeInit:000000eb .L866
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7042   .text.IRQ_DeInit:00000100 .L867
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7047   .text.IRQ_DeInit:00000107 .L868
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7032   .text.IRQ_DeInit:000000f2 .L869
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7037   .text.IRQ_DeInit:000000f9 .L870
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7052   .text.IRQ_DeInit:0000010d .L871
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7254   .rodata.IRQ_pinIsHigh:00000000 .L958
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7266   .text.IRQ_pinIsHigh:00000011 .L948
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7270   .text.IRQ_pinIsHigh:00000018 .L949
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7277   .text.IRQ_pinIsHigh:00000024 .L950
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7281   .text.IRQ_pinIsHigh:0000002b .L951
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7285   .text.IRQ_pinIsHigh:00000032 .L952
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7306   .text.IRQ_pinIsHigh:00000055 .L953
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7314   .text.IRQ_pinIsHigh:00000061 .L954
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7290   .text.IRQ_pinIsHigh:0000003c .L955
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7298   .text.IRQ_pinIsHigh:00000049 .L956
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7324   .text.IRQ_pinIsHigh:0000006f .L957
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7440   .rodata.ADC_ConfigurePinAsChannel:00000000 .L991
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7456   .text.ADC_ConfigurePinAsChannel:00000020 .L983
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7467   .text.ADC_ConfigurePinAsChannel:00000039 .L984
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7478   .text.ADC_ConfigurePinAsChannel:00000052 .L985
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7489   .text.ADC_ConfigurePinAsChannel:0000006a .L986
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7500   .text.ADC_ConfigurePinAsChannel:00000082 .L987
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7543   .text.ADC_ConfigurePinAsChannel:000000e0 .L982
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7511   .text.ADC_ConfigurePinAsChannel:0000009a .L988
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7522   .text.ADC_ConfigurePinAsChannel:000000b2 .L989
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7533   .text.ADC_ConfigurePinAsChannel:000000ca .L990
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7573   .rodata.ADC_DeConfigurePinAsChannel:00000000 .L1002
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7589   .text.ADC_DeConfigurePinAsChannel:00000020 .L994
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7599   .text.ADC_DeConfigurePinAsChannel:00000039 .L995
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7609   .text.ADC_DeConfigurePinAsChannel:00000052 .L996
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7619   .text.ADC_DeConfigurePinAsChannel:0000006a .L997
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7629   .text.ADC_DeConfigurePinAsChannel:00000082 .L998
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7670   .text.ADC_DeConfigurePinAsChannel:000000e6 .L993
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7639   .text.ADC_DeConfigurePinAsChannel:0000009a .L999
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7649   .text.ADC_DeConfigurePinAsChannel:000000b2 .L1000
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7661   .text.ADC_DeConfigurePinAsChannel:000000d0 .L1001
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7835   .rodata.ADC_GetConvertedValueOnChannel:00000000 .L1025
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7851   .text.ADC_GetConvertedValueOnChannel:00000011 .L1017
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7859   .text.ADC_GetConvertedValueOnChannel:0000001b .L1018
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7867   .text.ADC_GetConvertedValueOnChannel:00000025 .L1019
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7875   .text.ADC_GetConvertedValueOnChannel:0000002f .L1020
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7883   .text.ADC_GetConvertedValueOnChannel:00000039 .L1021
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7915   .text.ADC_GetConvertedValueOnChannel:00000060 .L1026
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7891   .text.ADC_GetConvertedValueOnChannel:00000043 .L1022
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7899   .text.ADC_GetConvertedValueOnChannel:0000004d .L1023
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7907   .text.ADC_GetConvertedValueOnChannel:00000057 .L1024
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10397  .debug_frame:00000000 .Lframe0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7      .text.TMR_GetMultiBmp:00000000 .LFB94
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:66     .text.GetInternalHWClearSourceValue:00000000 .LFB51
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:147    .text.LVDR_SetUp:00000000 .LFB0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:227    .text.LVDW_SetTrip:00000000 .LFB1
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:315    .text.LVDR_GetTrip:00000000 .LFB2
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:333    .text.LVDW_GetTrip:00000000 .LFB3
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:351    .text.WDT_Enabled:00000000 .LFB4
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:362    .text.WDT_Refresh:00000000 .LFB5
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:376    .text.WDT_TimeoutExpired:00000000 .LFB6
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:391    .text.WDT_UntimelyResetOccurred:00000000 .LFB7
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:405    .text.WDT_ClearTimeoutExpired:00000000 .LFB8
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:419    .text.WDT_ClearUntimelyResetOccurred:00000000 .LFB9
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:433    .text.WDT_AllowUpdate:00000000 .LFB10
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:444    .text.WDT_ResetMCU:00000000 .LFB11
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:453    .text.WDT_IsWindowOpen:00000000 .LFB12
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:474    .text.WDT_IsJustBeforePermittedWindow:00000000 .LFB13
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:497    .text.WDT_IsRunning:00000000 .LFB14
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:517    .text.WDT_InitSync:00000000 .LFB15
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:526    .text.WDT_StartSync:00000000 .LFB16
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:537    .text.WDT_SetWindowingSync:00000000 .LFB17
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:552    .text.WDT_ReadCounter:00000000 .LFB19
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:566    .text.WDT_GetWindow:00000000 .LFB20
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:580    .text.WDT_ReadRSTCounter:00000000 .LFB21
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:591    .text.WDT_ResetRSTCounter:00000000 .LFB22
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:600    .text.SYS_GetResetSrcVal:00000000 .LFB23
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:641    .text.SYS_PowerOnReset:00000000 .LFB24
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:654    .text.SYS_WatchdogReset:00000000 .LFB25
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:669    .text.SYS_ExternalPinReset:00000000 .LFB26
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:683    .text.SYS_LossOfClockReset:00000000 .LFB27
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:696    .text.SYS_IllegalOpcodeReset:00000000 .LFB28
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:709    .text.SYS_LowVoltageReset:00000000 .LFB29
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:724    .text.SYS_DebuggerReset:00000000 .LFB30
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:737    .text.SYS_IllegalAddressReset:00000000 .LFB31
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:750    .text.SYS_UserReset:00000000 .LFB32
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:765    .text.CLK_EngageClkRefSync:00000000 .LFB33
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:774    .text.CLK_SetInternalClockSync:00000000 .LFB34
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:787    .text.CLK_SetExternalClockSync:00000000 .LFB35
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:800    .text.CLK_SetTrimSync:00000000 .LFB36
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:810    .text.CLK_SetFLLExternalClockSync:00000000 .LFB37
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:823    .text.CLK_SetFLLInternalClockSync:00000000 .LFB38
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:836    .text.DeInitGPIO:00000000 .LFB39
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:898    .text.DIO_IsNotDummyIO:00000000 .LFB40
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:924    .text.DIO_CheckDigitalFilterPin:00000000 .LFB41
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1002   .text.DIO_IsDigitalFilterAvailable:00000000 .LFB42
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1021   .text.DIO_DigitalFilterEnable:00000000 .LFB43
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1152   .text.DIO_DigitalFilterClkFrequencySet:00000000 .LFB44
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1335   .text.DIO_DigitalFilterClkFrequencyGet:00000000 .LFB45
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1457   .text.DIO_DigitalFilterDisable:00000000 .LFB46
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1557   .text.DIO_IsDigitalFilterEnabled:00000000 .LFB47
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1693   .text.MapClearResourceValue:00000000 .LFB48
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1759   .text.MapClearResourceId:00000000 .LFB49
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1829   .text.TMR_GetClearSourceId:00000000 .LFB52
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1844   .text.Threshold2SetUpUnsupported:00000000 .LFB53
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1857   .text.TMR_CheckClearSourceIdFailed:00000000 .LFB54
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1909   .text.TMR_GetClearSourceCh:00000000 .LFB55
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1986   .text.TMR_ClockGate:00000000 .LFB56
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2030   .text.TMR_SetPrescaler:00000000 .LFB57
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2113   .text.TMR_GetPrescalerDiv:00000000 .LFB58
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2183   .text.TMR_GetTickResolution:00000000 .LFB59
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2203   .text.TMR_SetSetPrescaleForTickResolution:00000000 .LFB60
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2216   .text.TMR_SetPrescalerDfltValue:00000000 .LFB61
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2289   .text.TMR_SetCountDir:00000000 .LFB62
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2309   .text.TMR_SetCountDirDfltValue:00000000 .LFB63
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2319   .text.TMR_SetModulo:00000000 .LFB64
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2591   .text.TMR_StopClockSource:00000000 .LFB65
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2637   .text.TMR_EnableTI:00000000 .LFB66
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2846   .text.TMR_DisableTI:00000000 .LFB67
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3017   .text.TMR_ClearTOF:00000000 .LFB68
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3098   .text.TMR_GetTOF:00000000 .LFB69
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3196   .text.TMR_SetChannelInputChapture:00000000 .LFB70
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3465   .text.TMR_SetChannelOutputCompare:00000000 .LFB71
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3500   .text.TMR_SetChannelPWM:00000000 .LFB72
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3904   .text.TMR_ToggleChannelEdgeMode:00000000 .LFB73
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3973   .text.TMR_SetTimeOn:00000000 .LFB74
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3999   .text.TMR_GetChValue:00000000 .LFB76
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4037   .text.TMR_GetTimeOn:00000000 .LFB75
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4055   .text.TMR_SetChannelPulses:00000000 .LFB77
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4198   .text.TMR_ClearChannelPulses:00000000 .LFB78
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4341   .text.TMR_SetChannelEdgeMode:00000000 .LFB79
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4421   .text.TMR_GetValue:00000000 .LFB80
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4490   .text.TMR_EnableCHI:00000000 .LFB81
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4734   .text.TMR_ReadCHF:00000000 .LFB83
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4877   .text.TMR_ClearCHF:00000000 .LFB84
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4907   .text.TMR_DisableCHI:00000000 .LFB82
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5172   .text.TMR_SetThreshold1:00000000 .LFB85
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5184   .text.TMR_SetModuloDfltValue:00000000 .LFB86
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5199   .text.TMR_GetModulo:00000000 .LFB87
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5460   .text.TMR_GetChannelEdgeMode:00000000 .LFB88
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5527   .text.TMR_SetCounterDfltValue:00000000 .LFB89
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5590   .text.TMR_GetCounter:00000000 .LFB90
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5670   .text.TMR_SetCounter:00000000 .LFB91
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5733   .text.OutputCompareModeUnsupported:00000000 .LFB92
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5760   .text.TMR_SetClockSource:00000000 .LFB93
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5795   .text.TMR_StopClockSourceMulti:00000000 .LFB95
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5844   .text.TMR_SetClockSourceMulti:00000000 .LFB96
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5862   .text.TMR_SetChannelOutputMode:00000000 .LFB97
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6288   .text.TMR_SetTimerDefaultMode:00000000 .LFB99
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6362   .text.TMR_DeInitChannel:00000000 .LFB100
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6414   .text.TMR_GetDelta:00000000 .LFB101
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6455   .text.IRQ_Init:00000000 .LFB102
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6683   .text.IRQ_SetEdge:00000000 .LFB103
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6798   .text.IRQ_IntEnable:00000000 .LFB104
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6896   .text.IRQ_DeInit:00000000 .LFB105
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7084   .text.IRQ_Acknowledge:00000000 .LFB106
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7158   .text.IRQ_GetEdge:00000000 .LFB107
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7240   .text.IRQ_pinIsHigh:00000000 .LFB108
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7342   .text.UART_TxByte:00000000 .LFB109
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7422   .text.ADC_ConfigurePinAsChannel:00000000 .LFB110
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7555   .text.ADC_DeConfigurePinAsChannel:00000000 .LFB111
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7682   .text.ADC_GetChannel:00000000 .LFB112
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7729   .text.ADC_StartConvertionOnChannel:00000000 .LFB113
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7782   .text.ADC_Init:00000000 .LFB114
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7805   .text.ADC_DeInit:00000000 .LFB115
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7821   .text.ADC_GetConvertedValueOnChannel:00000000 .LFB116
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7933   .text.DMA_ClockGate:00000000 .LFB117
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7951   .text.DMA_SetDevice:00000000 .LFB118
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7998   .text.DMA_GetDevice:00000000 .LFB119
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8011   .text.DMA_SetSAR:00000000 .LFB120
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8052   .text.DMA_GetSAR:00000000 .LFB121
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8102   .text.DMA_SetDAR:00000000 .LFB122
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8148   .text.DMA_GetDAR:00000000 .LFB123
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8198   .text.DMA_SetBCR:00000000 .LFB124
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8261   .text.DMA_GetBCR:00000000 .LFB125
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8311   .text.DMA_EnableInt:00000000 .LFB126
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8396   .text.DMA_DisableInt:00000000 .LFB127
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8472   .text.DMA_SetStartOn:00000000 .LFB128
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8513   .text.DMA_SetStartOff:00000000 .LFB129
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8559   .text.DMA_IsChannelBusy:00000000 .LFB130
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8608   .text.DMA_IsTransDone:00000000 .LFB131
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8657   .text.DMA_ClearTransDone:00000000 .LFB132
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8704   .text.IsDMAChannelTrasferEnabled:00000000 .LFB133
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8753   .text.DMA_IsPending:00000000 .LFB134
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8802   .text.DMA_IsDestinationError:00000000 .LFB135
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8815   .text.DMA_IsSourceError:00000000 .LFB136
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8828   .text.DMA_IsConfigError:00000000 .LFB137
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8841   .text.DMA_PeripheralRequestOn:00000000 .LFB138
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8889   .text.DMA_PeripheralRequestOff:00000000 .LFB139
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8937   .text.DMA_ContinuousTransfer:00000000 .LFB140
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8985   .text.DMA_SingleTransfer:00000000 .LFB141
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9033   .text.DMA_BlockTransfer:00000000 .LFB142
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9081   .text.DMA_SetDestinationSizeToByte:00000000 .LFB143
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9091   .text.DMA_SetDestinationSizeToWord:00000000 .LFB144
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9101   .text.DMA_SetDestinationSizeToLong:00000000 .LFB145
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9111   .text.DMA_SetSourceSizeToLong:00000000 .LFB146
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9121   .text.DMA_SetSourceSizeToByte:00000000 .LFB147
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9131   .text.DMA_SetSourceSizeToWord:00000000 .LFB148
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9141   .text.DMA_EnableSourceIncrement:00000000 .LFB149
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9189   .text.DMA_DisableSourceIncrement:00000000 .LFB150
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9237   .text.DMA_EnableDestinationIncrement:00000000 .LFB151
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9285   .text.DMA_DisableDestinationIncrement:00000000 .LFB152
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9333   .text.DMA_EnableAutoAlign:00000000 .LFB153
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9343   .text.DMA_DisableAutoAlign:00000000 .LFB154
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9353   .text.DMA_SetSourceAddressModulo:00000000 .LFB155
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9363   .text.DMA_SetDestinationAddressModulo:00000000 .LFB156
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9373   .text.DMA_SetDisableRequestOn:00000000 .LFB157
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9421   .text.DMA_SetEnableRequestOn:00000000 .LFB158
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9469   .text.DMA_LinkChannelControlMode:00000000 .LFB159
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9532   .text.DMA_LinkChannel1Mode:00000000 .LFB160
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9542   .text.DMA_LinkChannel2Mode:00000000 .LFB161
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9552   .text.DMA_ControlDefault:00000000 .LFB162
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9562   .text.DMA_SetDisableRequestOff:00000000 .LFB163
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9572   .text.DMA_GetTrasferMode:00000000 .LFB164
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9629   .text.DMA_SetNumberOfRepetion:00000000 .LFB165
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9675   .text.DMA_SetRepeatArea:00000000 .LFB166
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9752   .text.SPI_ClkEnable:00000000 .LFB167
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9771   .text.SPI_Enable:00000000 .LFB168
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9798   .text.SPI_MasterEnable:00000000 .LFB169
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9864   .text.SPI_SetClockPolarity:00000000 .LFB170
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9880   .text.SPI_SetClockPhase:00000000 .LFB171
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9896   .text.SPI_ResetStatus:00000000 .LFB172
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9928   .text.SPI_SetBaudRate:00000000 .LFB173
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9950   .text.SPI_SetShiftDir:00000000 .LFB174
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9966   .text.SPI_WriteData:00000000 .LFB175
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9988   .text.SPI_ReadData:00000000 .LFB176
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10005  .text.SPI_IntEnable:00000000 .LFB177
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10037  .text.SPI_GetStatus:00000000 .LFB178
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:48393  .debug_abbrev:00000000 .Ldebug_abbrev0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56639  .debug_str:000012a1 .LASF1299
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58125  .debug_str:0000328f .LASF1300
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55319  .debug_ranges:00000000 .Ldebug_ranges0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55681  .debug_line:00000000 .Ldebug_line0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58211  .debug_str:000033e9 .LASF0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58233  .debug_str:0000347d .LASF1
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55819  .debug_str:00000323 .LASF3
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57077  .debug_str:00001b6f .LASF2
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57345  .debug_str:000020c3 .LASF4
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57403  .debug_str:000021f6 .LASF5
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57273  .debug_str:00001f70 .LASF6
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57855  .debug_str:00002cd7 .LASF7
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58043  .debug_str:000030a8 .LASF8
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56611  .debug_str:00001236 .LASF9
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56289  .debug_str:00000c30 .LASF10
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57079  .debug_str:00001b82 .LASF11
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57405  .debug_str:00002208 .LASF12
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57053  .debug_str:00001a97 .LASF13
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58221  .debug_str:00003429 .LASF112
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56365  .debug_str:00000d52 .LASF14
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55931  .debug_str:00000526 .LASF15
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58223  .debug_str:0000343b .LASF16
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57435  .debug_str:00002315 .LASF17
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57823  .debug_str:00002b88 .LASF18
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55993  .debug_str:00000639 .LASF19
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55995  .debug_str:0000064c .LASF20
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57745  .debug_str:0000297f .LASF21
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57747  .debug_str:00002992 .LASF22
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57373  .debug_str:0000215f .LASF23
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56219  .debug_str:00000aa9 .LASF24
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57995  .debug_str:00002f79 .LASF25
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57997  .debug_str:00002f8e .LASF26
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56553  .debug_str:000010de .LASF27
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57489  .debug_str:00002419 .LASF28
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57195  .debug_str:00001d6d .LASF29
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56759  .debug_str:000014f8 .LASF30
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57073  .debug_str:00001b1f .LASF31
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55717  .debug_str:000000df .LASF32
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57413  .debug_str:0000224d .LASF33
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56695  .debug_str:000013a3 .LASF34
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57409  .debug_str:00002214 .LASF35
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57825  .debug_str:00002b97 .LASF36
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57827  .debug_str:00002bae .LASF37
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57829  .debug_str:00002bc5 .LASF38
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57831  .debug_str:00002bdc .LASF39
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57833  .debug_str:00002bf3 .LASF40
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57835  .debug_str:00002c0a .LASF41
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57837  .debug_str:00002c21 .LASF42
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57839  .debug_str:00002c38 .LASF43
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58107  .debug_str:000031fc .LASF44
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58109  .debug_str:00003214 .LASF45
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58111  .debug_str:0000322c .LASF46
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58115  .debug_str:0000324b .LASF47
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57841  .debug_str:00002c4f .LASF48
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57843  .debug_str:00002c67 .LASF49
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57845  .debug_str:00002c7f .LASF50
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57847  .debug_str:00002c97 .LASF51
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57991  .debug_str:00002f47 .LASF52
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57993  .debug_str:00002f60 .LASF53
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57201  .debug_str:00001dae .LASF54
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57203  .debug_str:00001dc7 .LASF55
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57999  .debug_str:00002fa3 .LASF56
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57667  .debug_str:000027d5 .LASF57
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58001  .debug_str:00002fbc .LASF58
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58003  .debug_str:00002fd5 .LASF59
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56429  .debug_str:00000e70 .LASF60
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57437  .debug_str:0000231a .LASF61
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56825  .debug_str:00001659 .LASF62
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56933  .debug_str:00001837 .LASF63
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57599  .debug_str:00002683 .LASF64
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57261  .debug_str:00001f0f .LASF65
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57727  .debug_str:00002927 .LASF66
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58229  .debug_str:00003468 .LASF67
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56231  .debug_str:00000ae8 .LASF68
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56941  .debug_str:00001862 .LASF69
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57263  .debug_str:00001f22 .LASF70
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57945  .debug_str:00002e92 .LASF71
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56239  .debug_str:00000b21 .LASF72
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57623  .debug_str:000026fe .LASF73
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56385  .debug_str:00000d8d .LASF74
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56955  .debug_str:000018be .LASF75
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57433  .debug_str:000022f5 .LASF76
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57369  .debug_str:0000213e .LASF77
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55973  .debug_str:000005c9 .LASF78
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55807  .debug_str:000002c8 .LASF79
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57545  .debug_str:0000256d .LASF80
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57483  .debug_str:000023d7 .LASF81
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58047  .debug_str:000030bd .LASF82
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56461  .debug_str:00000f18 .LASF83
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58083  .debug_str:0000317f .LASF84
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57365  .debug_str:0000211d .LASF85
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56643  .debug_str:000012cd .LASF86
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55707  .debug_str:00000079 .LASF87
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55709  .debug_str:0000009a .LASF88
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56017  .debug_str:000006b8 .LASF89
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58013  .debug_str:00003006 .LASF90
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57697  .debug_str:00002870 .LASF91
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57193  .debug_str:00001d3f .LASF92
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55889  .debug_str:00000447 .LASF93
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56101  .debug_str:0000085e .LASF94
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56789  .debug_str:000015b2 .LASF95
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57425  .debug_str:000022af .LASF96
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57215  .debug_str:00001e10 .LASF97
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57821  .debug_str:00002b6e .LASF98
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56337  .debug_str:00000cda .LASF99
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55779  .debug_str:00000226 .LASF100
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56583  .debug_str:000011b5 .LASF101
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57055  .debug_str:00001aa0 .LASF102
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56423  .debug_str:00000e46 .LASF103
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56655  .debug_str:0000130c .LASF104
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57341  .debug_str:000020a4 .LASF105
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56557  .debug_str:00001118 .LASF106
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57259  .debug_str:00001ef6 .LASF107
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57035  .debug_str:00001a40 .LASF108
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57075  .debug_str:00001b55 .LASF109
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57947  .debug_str:00002eac .LASF110
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57955  .debug_str:00002ecd .LASF115
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55899  .debug_str:00000493 .LASF111
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57793  .debug_str:00002aae .LASF113
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58207  .debug_str:000033de .LASF114
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58091  .debug_str:000031c6 .LASF116
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56223  .debug_str:00000ac4 .LASF117
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56715  .debug_str:0000143c .LASF118
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57669  .debug_str:000027f9 .LASF119
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56935  .debug_str:0000184c .LASF120
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56605  .debug_str:0000121c .LASF121
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57377  .debug_str:00002189 .LASF122
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58101  .debug_str:000031e9 .LASF123
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57473  .debug_str:000023bc .LASF124
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56421  .debug_str:00000e41 .LASF125
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58035  .debug_str:0000308c .LASF126
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56717  .debug_str:00001441 .LASF127
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57671  .debug_str:000027fe .LASF128
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57095  .debug_str:00001bb8 .LASF129
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57049  .debug_str:00001a85 .LASF130
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56773  .debug_str:00001562 .LASF131
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58185  .debug_str:0000339b .LASF132
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56009  .debug_str:0000069d .LASF133
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56011  .debug_str:000006a3 .LASF134
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57485  .debug_str:000023fd .LASF135
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57381  .debug_str:00002194 .LASF136
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57917  .debug_str:00002e2b .LASF137
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55947  .debug_str:00000561 .LASF138
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55851  .debug_str:000003b7 .LASF139
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56677  .debug_str:00001372 .LASF140
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57539  .debug_str:00002553 .LASF141
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56065  .debug_str:000007b3 .LASF142
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57051  .debug_str:00001a8e .LASF143
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58081  .debug_str:00003179 .LASF144
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55897  .debug_str:0000048c .LASF145
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58265  .debug_str:00003517 .LASF146
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58015  .debug_str:00003035 .LASF147
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56141  .debug_str:00000937 .LASF148
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55793  .debug_str:00000296 .LASF149
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55989  .debug_str:00000625 .LASF150
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58103  .debug_str:000031ee .LASF151
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58151  .debug_str:00003317 .LASF152
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58149  .debug_str:00003312 .LASF153
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58147  .debug_str:0000330d .LASF154
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58145  .debug_str:00003308 .LASF155
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58143  .debug_str:00003303 .LASF156
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58141  .debug_str:000032fe .LASF157
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58139  .debug_str:000032f9 .LASF158
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58137  .debug_str:000032f4 .LASF159
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57791  .debug_str:00002aa9 .LASF160
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57221  .debug_str:00001e43 .LASF161
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57783  .debug_str:00002a76 .LASF162
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56355  .debug_str:00000d33 .LASF163
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56353  .debug_str:00000d2d .LASF164
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56351  .debug_str:00000d27 .LASF165
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56349  .debug_str:00000d21 .LASF166
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56347  .debug_str:00000d1b .LASF167
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56345  .debug_str:00000d15 .LASF168
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56343  .debug_str:00000d0f .LASF169
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56341  .debug_str:00000d09 .LASF170
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58239  .debug_str:00003493 .LASF171
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55685  .debug_str:00000005 .LASF172
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56367  .debug_str:00000d5c .LASF173
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55917  .debug_str:000004eb .LASF174
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55919  .debug_str:000004f1 .LASF175
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55921  .debug_str:000004f7 .LASF176
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55923  .debug_str:000004fd .LASF177
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55811  .debug_str:000002fa .LASF178
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55813  .debug_str:000002ff .LASF179
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57771  .debug_str:00002a4e .LASF180
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57773  .debug_str:00002a53 .LASF181
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57651  .debug_str:00002796 .LASF182
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57653  .debug_str:0000279b .LASF183
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57655  .debug_str:000027a0 .LASF184
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57657  .debug_str:000027a5 .LASF185
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55829  .debug_str:0000035d .LASF186
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56447  .debug_str:00000ee8 .LASF187
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56731  .debug_str:0000148d .LASF188
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56823  .debug_str:00001654 .LASF189
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56821  .debug_str:0000164f .LASF190
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56819  .debug_str:0000164a .LASF191
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56817  .debug_str:00001645 .LASF192
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56815  .debug_str:00001640 .LASF193
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56813  .debug_str:0000163b .LASF194
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56811  .debug_str:00001636 .LASF195
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56129  .debug_str:000008f8 .LASF196
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56243  .debug_str:00000b62 .LASF197
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56909  .debug_str:000017db .LASF198
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56709  .debug_str:00001415 .LASF199
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55875  .debug_str:0000040a .LASF200
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55873  .debug_str:00000403 .LASF201
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55871  .debug_str:000003fc .LASF202
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55869  .debug_str:000003f5 .LASF203
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55867  .debug_str:000003ee .LASF204
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55865  .debug_str:000003e7 .LASF205
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55863  .debug_str:000003e0 .LASF206
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55861  .debug_str:000003d9 .LASF207
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57687  .debug_str:00002842 .LASF208
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57685  .debug_str:00002839 .LASF209
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57683  .debug_str:00002830 .LASF210
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57681  .debug_str:00002827 .LASF211
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57679  .debug_str:0000281e .LASF212
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57677  .debug_str:00002815 .LASF213
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57675  .debug_str:0000280c .LASF214
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57673  .debug_str:00002803 .LASF215
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57069  .debug_str:00001b12 .LASF216
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56867  .debug_str:00001724 .LASF217
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57595  .debug_str:00002668 .LASF218
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56781  .debug_str:0000157f .LASF219
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56029  .debug_str:00000704 .LASF220
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57935  .debug_str:00002e69 .LASF221
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56487  .debug_str:00000fa2 .LASF222
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56203  .debug_str:00000a65 .LASF223
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57021  .debug_str:00001a14 .LASF224
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56137  .debug_str:00000917 .LASF225
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58061  .debug_str:00003127 .LASF226
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57337  .debug_str:00002095 .LASF227
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56069  .debug_str:000007c1 .LASF228
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57423  .debug_str:000022a7 .LASF229
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58037  .debug_str:00003092 .LASF230
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56463  .debug_str:00000f3c .LASF231
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56273  .debug_str:00000bf5 .LASF232
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57311  .debug_str:00001ff4 .LASF233
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57649  .debug_str:00002790 .LASF234
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56777  .debug_str:0000156d .LASF235
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57119  .debug_str:00001c34 .LASF236
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56247  .debug_str:00000b6d .LASF237
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56483  .debug_str:00000f84 .LASF238
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57627  .debug_str:00002721 .LASF239
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56873  .debug_str:0000173a .LASF240
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56875  .debug_str:00001741 .LASF241
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56877  .debug_str:00001748 .LASF242
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56879  .debug_str:0000174f .LASF243
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56245  .debug_str:00000b67 .LASF244
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56309  .debug_str:00000c78 .LASF245
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57419  .debug_str:00002297 .LASF246
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56311  .debug_str:00000c7d .LASF247
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57339  .debug_str:0000209b .LASF248
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56313  .debug_str:00000c82 .LASF249
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57933  .debug_str:00002e63 .LASF250
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57343  .debug_str:000020bd .LASF251
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57269  .debug_str:00001f62 .LASF252
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56315  .debug_str:00000c87 .LASF253
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55725  .debug_str:0000012b .LASF254
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56317  .debug_str:00000c8c .LASF255
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57271  .debug_str:00001f68 .LASF256
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58079  .debug_str:00003174 .LASF257
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57459  .debug_str:00002385 .LASF258
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57585  .debug_str:00002637 .LASF259
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57587  .debug_str:0000263c .LASF260
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57873  .debug_str:00002d41 .LASF261
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57613  .debug_str:000026d4 .LASF262
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56961  .debug_str:000018f1 .LASF263
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58041  .debug_str:000030a1 .LASF264
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56331  .debug_str:00000cb6 .LASF265
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57659  .debug_str:000027aa .LASF266
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56965  .debug_str:000018fe .LASF267
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57593  .debug_str:00002661 .LASF268
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56193  .debug_str:00000a2c .LASF269
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58071  .debug_str:00003148 .LASF270
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57027  .debug_str:00001a28 .LASF271
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56993  .debug_str:00001987 .LASF272
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56967  .debug_str:00001905 .LASF273
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56931  .debug_str:00001832 .LASF274
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56903  .debug_str:000017c5 .LASF275
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56835  .debug_str:000016a8 .LASF276
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56795  .debug_str:000015eb .LASF277
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56743  .debug_str:000014c2 .LASF278
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56253  .debug_str:00000b9e .LASF279
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56217  .debug_str:00000aa4 .LASF280
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56175  .debug_str:000009c5 .LASF281
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56135  .debug_str:00000912 .LASF282
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56085  .debug_str:0000081c .LASF283
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56045  .debug_str:0000075a .LASF284
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56449  .debug_str:00000eed .LASF285
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56401  .debug_str:00000de8 .LASF286
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56357  .debug_str:00000d39 .LASF287
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56293  .debug_str:00000c43 .LASF288
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56455  .debug_str:00000efe .LASF289
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56409  .debug_str:00000e1f .LASF290
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56361  .debug_str:00000d45 .LASF291
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56299  .debug_str:00000c54 .LASF292
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56907  .debug_str:000017d3 .LASF293
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56211  .debug_str:00000a87 .LASF294
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57901  .debug_str:00002de7 .LASF295
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58073  .debug_str:00003152 .LASF296
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56109  .debug_str:000008a2 .LASF297
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56051  .debug_str:00000781 .LASF298
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57799  .debug_str:00002ae5 .LASF299
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57357  .debug_str:00002104 .LASF300
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57807  .debug_str:00002b28 .LASF301
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57589  .debug_str:00002642 .LASF302
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57071  .debug_str:00001b19 .LASF303
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55727  .debug_str:00000133 .LASF304
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55729  .debug_str:0000013a .LASF305
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57151  .debug_str:00001c9e .LASF306
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57153  .debug_str:00001ca5 .LASF307
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57219  .debug_str:00001e3e .LASF308
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56999  .debug_str:00001998 .LASF309
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57965  .debug_str:00002ee6 .LASF310
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56831  .debug_str:0000169c .LASF311
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56561  .debug_str:00001146 .LASF312
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57777  .debug_str:00002a5d .LASF313
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56467  .debug_str:00000f49 .LASF314
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57695  .debug_str:00002869 .LASF315
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57505  .debug_str:00002499 .LASF316
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57601  .debug_str:0000269e .LASF317
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57441  .debug_str:00002346 .LASF318
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56091  .debug_str:0000083b .LASF319
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57361  .debug_str:00002110 .LASF320
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55999  .debug_str:00000665 .LASF321
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57275  .debug_str:00001f79 .LASF322
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55913  .debug_str:000004de .LASF323
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57205  .debug_str:00001de0 .LASF324
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55809  .debug_str:000002f3 .LASF325
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58281  .debug_str:00003558 .LASF326
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56959  .debug_str:000018ea .LASF327
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58187  .debug_str:000033a1 .LASF328
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56887  .debug_str:0000176a .LASF329
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58093  .debug_str:000031cb .LASF330
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56511  .debug_str:00000ff4 .LASF331
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57723  .debug_str:00002919 .LASF332
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56391  .debug_str:00000db2 .LASF333
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57621  .debug_str:000026f7 .LASF334
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56275  .debug_str:00000bfc .LASF335
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57535  .debug_str:00002543 .LASF336
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56187  .debug_str:00000a00 .LASF337
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57449  .debug_str:00002363 .LASF338
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57117  .debug_str:00001c2d .LASF339
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55753  .debug_str:00000194 .LASF340
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56691  .debug_str:00001396 .LASF341
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57923  .debug_str:00002e44 .LASF342
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56587  .debug_str:000011de .LASF343
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56283  .debug_str:00000c1a .LASF344
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56515  .debug_str:00001002 .LASF345
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57725  .debug_str:00002920 .LASF346
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56397  .debug_str:00000dd0 .LASF347
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57625  .debug_str:0000271a .LASF348
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57467  .debug_str:000023a8 .LASF349
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56127  .debug_str:000008f1 .LASF350
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57397  .debug_str:000021cb .LASF351
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56027  .debug_str:000006fd .LASF352
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57299  .debug_str:00001fc7 .LASF353
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55951  .debug_str:0000056e .LASF354
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57239  .debug_str:00001e80 .LASF355
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55833  .debug_str:0000036a .LASF356
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55691  .debug_str:00000024 .LASF357
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56975  .debug_str:0000192a .LASF358
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56501  .debug_str:00000fd0 .LASF359
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56913  .debug_str:000017e8 .LASF360
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58117  .debug_str:00003263 .LASF361
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56797  .debug_str:000015f0 .LASF362
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58039  .debug_str:0000309a .LASF363
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56701  .debug_str:000013e8 .LASF364
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56539  .debug_str:0000107a .LASF365
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57749  .debug_str:000029a5 .LASF366
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56425  .debug_str:00000e63 .LASF367
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57647  .debug_str:00002789 .LASF368
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56307  .debug_str:00000c71 .LASF369
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57565  .debug_str:000025e6 .LASF370
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56221  .debug_str:00000abd .LASF371
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57471  .debug_str:000023b5 .LASF372
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57327  .debug_str:00002061 .LASF373
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56659  .debug_str:00001332 .LASF374
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57255  .debug_str:00001ee7 .LASF375
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56665  .debug_str:00001349 .LASF376
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57173  .debug_str:00001ced .LASF377
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55773  .debug_str:00000200 .LASF378
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56671  .debug_str:00001360 .LASF379
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55697  .debug_str:0000003b .LASF380
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57197  .debug_str:00001da2 .LASF381
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55801  .debug_str:000002b6 .LASF382
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56945  .debug_str:00001884 .LASF383
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55715  .debug_str:000000d8 .LASF384
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57439  .debug_str:0000233f .LASF385
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57359  .debug_str:00002109 .LASF386
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58031  .debug_str:00003080 .LASF387
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58029  .debug_str:0000307b .LASF388
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57971  .debug_str:00002ef7 .LASF389
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58027  .debug_str:00003076 .LASF390
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58025  .debug_str:00003071 .LASF391
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57969  .debug_str:00002ef2 .LASF392
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56577  .debug_str:0000118e .LASF393
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57045  .debug_str:00001a7b .LASF394
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57047  .debug_str:00001a80 .LASF395
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55883  .debug_str:0000042f .LASF396
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55885  .debug_str:00000434 .LASF397
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56037  .debug_str:0000071e .LASF398
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56039  .debug_str:00000724 .LASF399
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55845  .debug_str:000003a7 .LASF400
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55997  .debug_str:0000065f .LASF401
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55961  .debug_str:0000058d .LASF402
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55963  .debug_str:00000593 .LASF403
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56195  .debug_str:00000a34 .LASF404
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56925  .debug_str:0000181e .LASF405
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57527  .debug_str:0000250e .LASF406
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58045  .debug_str:000030b6 .LASF407
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56895  .debug_str:0000179a .LASF408
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57987  .debug_str:00002f3b .LASF409
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56989  .debug_str:00001975 .LASF410
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58251  .debug_str:000034b7 .LASF411
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58249  .debug_str:000034b2 .LASF412
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58247  .debug_str:000034ad .LASF413
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58245  .debug_str:000034a8 .LASF414
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58243  .debug_str:000034a3 .LASF415
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56859  .debug_str:0000170c .LASF416
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56857  .debug_str:00001706 .LASF417
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56855  .debug_str:00001700 .LASF418
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56853  .debug_str:000016fa .LASF419
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56851  .debug_str:000016f4 .LASF420
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58011  .debug_str:00002fff .LASF421
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57157  .debug_str:00001cb2 .LASF422
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57617  .debug_str:000026e0 .LASF423
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55955  .debug_str:0000057a .LASF424
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55957  .debug_str:00000580 .LASF425
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57481  .debug_str:000023d2 .LASF426
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58009  .debug_str:00002ffa .LASF427
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56573  .debug_str:0000117b .LASF428
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56593  .debug_str:000011f7 .LASF429
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57289  .debug_str:00001fa9 .LASF430
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56995  .debug_str:0000198c .LASF431
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56413  .debug_str:00000e2a .LASF432
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57555  .debug_str:000025bb .LASF433
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56475  .debug_str:00000f62 .LASF434
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56169  .debug_str:000009b4 .LASF435
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56393  .debug_str:00000db9 .LASF436
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56427  .debug_str:00000e6a .LASF437
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57639  .debug_str:0000276d .LASF438
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57689  .debug_str:0000284b .LASF439
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57443  .debug_str:0000234d .LASF440
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57227  .debug_str:00001e58 .LASF441
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56973  .debug_str:00001924 .LASF442
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56523  .debug_str:00001030 .LASF443
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58217  .debug_str:00003404 .LASF444
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57967  .debug_str:00002eed .LASF445
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55841  .debug_str:0000039c .LASF446
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57477  .debug_str:000023c7 .LASF447
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57293  .debug_str:00001fb5 .LASF448
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57291  .debug_str:00001faf .LASF449
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58065  .debug_str:00003134 .LASF450
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57287  .debug_str:00001fa3 .LASF451
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56775  .debug_str:00001568 .LASF452
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57297  .debug_str:00001fc1 .LASF453
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57295  .debug_str:00001fbb .LASF454
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56387  .debug_str:00000da7 .LASF455
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56963  .debug_str:000018f9 .LASF456
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56383  .debug_str:00000d88 .LASF457
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56067  .debug_str:000007b9 .LASF458
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57637  .debug_str:00002768 .LASF459
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56595  .debug_str:000011fc .LASF460
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56693  .debug_str:0000139d .LASF461
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56697  .debug_str:000013d8 .LASF462
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58235  .debug_str:00003487 .LASF463
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57099  .debug_str:00001bc3 .LASF464
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58269  .debug_str:0000353a .LASF465
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58271  .debug_str:0000353f .LASF466
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58273  .debug_str:00003544 .LASF467
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58275  .debug_str:00003549 .LASF468
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58277  .debug_str:0000354e .LASF469
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58279  .debug_str:00003553 .LASF470
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56769  .debug_str:00001557 .LASF471
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57097  .debug_str:00001bbe .LASF472
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57475  .debug_str:000023c1 .LASF473
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56733  .debug_str:00001492 .LASF474
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56687  .debug_str:0000138c .LASF475
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56473  .debug_str:00000f5d .LASF476
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56419  .debug_str:00000e3c .LASF477
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57517  .debug_str:000024d9 .LASF478
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56033  .debug_str:00000711 .LASF479
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58231  .debug_str:00003477 .LASF480
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56071  .debug_str:000007c9 .LASF481
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56073  .debug_str:000007d1 .LASF482
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57469  .debug_str:000023af .LASF483
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57609  .debug_str:000026c9 .LASF484
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57703  .debug_str:000028b3 .LASF485
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57701  .debug_str:000028ad .LASF486
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57741  .debug_str:0000296f .LASF487
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57927  .debug_str:00002e50 .LASF488
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56505  .debug_str:00000fde .LASF489
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57493  .debug_str:00002460 .LASF490
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57715  .debug_str:000028f4 .LASF491
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56075  .debug_str:000007d9 .LASF492
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57973  .debug_str:00002efc .LASF493
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57147  .debug_str:00001c8e .LASF494
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57149  .debug_str:00001c96 .LASF495
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57529  .debug_str:00002514 .LASF496
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57531  .debug_str:0000251d .LASF497
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56117  .debug_str:000008c4 .LASF498
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57279  .debug_str:00001f86 .LASF499
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55751  .debug_str:0000018f .LASF500
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56437  .debug_str:00000ebb .LASF501
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56439  .debug_str:00000ec0 .LASF502
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56181  .debug_str:000009d8 .LASF503
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56119  .debug_str:000008cd .LASF504
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56121  .debug_str:000008d6 .LASF505
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56123  .debug_str:000008df .LASF506
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56125  .debug_str:000008e8 .LASF507
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56145  .debug_str:00000945 .LASF508
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56147  .debug_str:0000094e .LASF509
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56149  .debug_str:00000957 .LASF510
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56151  .debug_str:00000960 .LASF511
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56157  .debug_str:00000977 .LASF512
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57229  .debug_str:00001e5e .LASF513
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57691  .debug_str:00002851 .LASF514
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56063  .debug_str:000007ad .LASF515
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57775  .debug_str:00002a58 .LASF516
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55749  .debug_str:00000188 .LASF517
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57179  .debug_str:00001cfe .LASF518
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56491  .debug_str:00000faf .LASF519
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55915  .debug_str:000004e5 .LASF520
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55859  .debug_str:000003d3 .LASF521
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55817  .debug_str:0000031d .LASF522
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55777  .debug_str:00000220 .LASF523
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56489  .debug_str:00000fa9 .LASF524
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57559  .debug_str:000025c6 .LASF525
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56569  .debug_str:00001161 .LASF526
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55971  .debug_str:000005c3 .LASF527
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56435  .debug_str:00000eb6 .LASF528
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57941  .debug_str:00002e87 .LASF529
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56087  .debug_str:00000821 .LASF530
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56103  .debug_str:0000088f .LASF531
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55757  .debug_str:000001a3 .LASF532
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57875  .debug_str:00002d47 .LASF533
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57571  .debug_str:000025fb .LASF534
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56265  .debug_str:00000bd7 .LASF535
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56025  .debug_str:000006f8 .LASF536
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56689  .debug_str:00001391 .LASF537
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57411  .debug_str:00002248 .LASF538
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56685  .debug_str:00001387 .LASF539
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56683  .debug_str:00001382 .LASF540
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56681  .debug_str:0000137d .LASF541
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56679  .debug_str:00001378 .LASF542
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57407  .debug_str:0000220f .LASF543
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56675  .debug_str:0000136d .LASF544
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56445  .debug_str:00000ee3 .LASF545
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58113  .debug_str:00003244 .LASF546
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57455  .debug_str:0000237a .LASF547
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56153  .debug_str:00000969 .LASF548
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57155  .debug_str:00001cac .LASF549
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56167  .debug_str:000009ae .LASF550
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55977  .debug_str:000005f6 .LASF551
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57521  .debug_str:000024f3 .LASF552
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56563  .debug_str:0000114d .LASF553
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56599  .debug_str:0000120c .LASF554
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56295  .debug_str:00000c48 .LASF555
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57011  .debug_str:000019cb .LASF556
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57641  .debug_str:00002772 .LASF557
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55759  .debug_str:000001a8 .LASF558
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56971  .debug_str:0000191e .LASF559
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57199  .debug_str:00001da9 .LASF560
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56057  .debug_str:00000792 .LASF561
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57281  .debug_str:00001f8b .LASF562
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56997  .debug_str:00001993 .LASF563
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56749  .debug_str:000014d7 .LASF564
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56161  .debug_str:00000989 .LASF565
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57209  .debug_str:00001dee .LASF566
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56465  .debug_str:00000f43 .LASF567
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56751  .debug_str:000014df .LASF568
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56079  .debug_str:000007ea .LASF569
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57241  .debug_str:00001e87 .LASF570
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57881  .debug_str:00002d6d .LASF571
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56227  .debug_str:00000ad3 .LASF572
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56013  .debug_str:000006a9 .LASF573
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56099  .debug_str:00000858 .LASF574
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57065  .debug_str:00001b05 .LASF575
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56531  .debug_str:00001053 .LASF576
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56411  .debug_str:00000e24 .LASF577
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57383  .debug_str:0000219a .LASF578
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57387  .debug_str:000021a8 .LASF579
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56493  .debug_str:00000fb4 .LASF580
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56495  .debug_str:00000fbb .LASF581
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56497  .debug_str:00000fc2 .LASF582
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56499  .debug_str:00000fc9 .LASF583
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57401  .debug_str:000021ef .LASF584
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56503  .debug_str:00000fd7 .LASF585
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57169  .debug_str:00001cda .LASF586
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56471  .debug_str:00000f58 .LASF587
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56727  .debug_str:00001470 .LASF588
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57957  .debug_str:00002ed2 .LASF589
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56745  .debug_str:000014c7 .LASF590
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57615  .debug_str:000026db .LASF591
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57247  .debug_str:00001eaa .LASF592
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56479  .debug_str:00000f73 .LASF593
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57167  .debug_str:00001cd3 .LASF594
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57165  .debug_str:00001ccc .LASF595
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57163  .debug_str:00001cc5 .LASF596
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57161  .debug_str:00001cbe .LASF597
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57159  .debug_str:00001cb7 .LASF598
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56207  .debug_str:00000a74 .LASF599
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55907  .debug_str:000004aa .LASF600
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55905  .debug_str:000004a4 .LASF601
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55903  .debug_str:0000049e .LASF602
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55901  .debug_str:00000498 .LASF603
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56257  .debug_str:00000ba9 .LASF604
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55893  .debug_str:00000478 .LASF605
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56255  .debug_str:00000ba3 .LASF606
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56249  .debug_str:00000b74 .LASF607
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58135  .debug_str:000032ee .LASF608
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58133  .debug_str:000032e8 .LASF609
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57911  .debug_str:00002e05 .LASF610
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57909  .debug_str:00002dff .LASF611
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57907  .debug_str:00002df9 .LASF612
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57905  .debug_str:00002df3 .LASF613
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57903  .debug_str:00002ded .LASF614
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57139  .debug_str:00001c74 .LASF615
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57137  .debug_str:00001c6f .LASF616
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56629  .debug_str:0000127c .LASF617
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57135  .debug_str:00001c6a .LASF618
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56621  .debug_str:0000125f .LASF619
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57133  .debug_str:00001c65 .LASF620
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57131  .debug_str:00001c60 .LASF621
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57129  .debug_str:00001c5b .LASF622
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56617  .debug_str:0000124d .LASF623
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57127  .debug_str:00001c56 .LASF624
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57125  .debug_str:00001c51 .LASF625
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58019  .debug_str:00003057 .LASF626
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57851  .debug_str:00002cca .LASF627
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57569  .debug_str:000025f4 .LASF628
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56469  .debug_str:00000f50 .LASF629
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55847  .debug_str:000003ad .LASF630
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55849  .debug_str:000003b2 .LASF631
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55739  .debug_str:00000167 .LASF632
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57395  .debug_str:000021c4 .LASF633
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57393  .debug_str:000021bd .LASF634
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57391  .debug_str:000021b6 .LASF635
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57389  .debug_str:000021af .LASF636
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56753  .debug_str:000014e4 .LASF637
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57385  .debug_str:000021a1 .LASF638
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58205  .debug_str:000033d8 .LASF639
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55983  .debug_str:00000612 .LASF640
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58203  .debug_str:000033d2 .LASF641
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58201  .debug_str:000033cc .LASF642
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58199  .debug_str:000033c6 .LASF643
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58197  .debug_str:000033c0 .LASF644
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58195  .debug_str:000033ba .LASF645
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58193  .debug_str:000033b4 .LASF646
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58191  .debug_str:000033ae .LASF647
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58189  .debug_str:000033a8 .LASF648
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57887  .debug_str:00002d90 .LASF649
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57611  .debug_str:000026cf .LASF650
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57781  .debug_str:00002a70 .LASF651
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56105  .debug_str:00000895 .LASF652
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56723  .debug_str:00001464 .LASF653
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57503  .debug_str:00002492 .LASF654
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57537  .debug_str:0000254a .LASF655
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57949  .debug_str:00002eb7 .LASF656
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57181  .debug_str:00001d03 .LASF657
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56861  .debug_str:00001712 .LASF658
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56837  .debug_str:000016ad .LASF659
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57363  .debug_str:00002117 .LASF660
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56957  .debug_str:000018e2 .LASF661
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55881  .debug_str:00000427 .LASF662
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57183  .debug_str:00001d0a .LASF663
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56113  .debug_str:000008af .LASF664
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55695  .debug_str:00000034 .LASF665
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55701  .debug_str:00000055 .LASF666
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57089  .debug_str:00001ba8 .LASF667
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58155  .debug_str:00003323 .LASF668
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58157  .debug_str:00003329 .LASF669
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58159  .debug_str:0000332f .LASF670
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58161  .debug_str:00003335 .LASF671
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58163  .debug_str:0000333b .LASF672
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58165  .debug_str:00003341 .LASF673
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58167  .debug_str:00003347 .LASF674
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58169  .debug_str:0000334d .LASF675
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58171  .debug_str:00003353 .LASF676
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58173  .debug_str:00003359 .LASF677
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57853  .debug_str:00002cd0 .LASF678
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56097  .debug_str:00000851 .LASF679
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57857  .debug_str:00002cee .LASF680
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57859  .debug_str:00002cf5 .LASF681
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57861  .debug_str:00002cfc .LASF682
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57863  .debug_str:00002d03 .LASF683
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56623  .debug_str:00001264 .LASF684
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56649  .debug_str:000012f7 .LASF685
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56767  .debug_str:00001550 .LASF686
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57461  .debug_str:0000238a .LASF687
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56653  .debug_str:00001304 .LASF688
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56625  .debug_str:0000126c .LASF689
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56627  .debug_str:00001274 .LASF690
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57429  .debug_str:000022d2 .LASF691
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56631  .debug_str:00001281 .LASF692
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56633  .debug_str:00001289 .LASF693
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56635  .debug_str:00001291 .LASF694
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56637  .debug_str:00001299 .LASF695
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57005  .debug_str:000019b5 .LASF696
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57547  .debug_str:00002592 .LASF697
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56581  .debug_str:000011b0 .LASF698
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57379  .debug_str:0000218f .LASF699
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56865  .debug_str:0000171f .LASF700
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57577  .debug_str:00002613 .LASF701
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56263  .debug_str:00000bd2 .LASF702
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57989  .debug_str:00002f42 .LASF703
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55857  .debug_str:000003ce .LASF704
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57355  .debug_str:000020ff .LASF705
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57733  .debug_str:0000294b .LASF706
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57729  .debug_str:00002937 .LASF707
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55953  .debug_str:00000575 .LASF708
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56917  .debug_str:00001806 .LASF709
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57101  .debug_str:00001bc8 .LASF710
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57789  .debug_str:00002aa4 .LASF711
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56809  .debug_str:0000162e .LASF712
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55743  .debug_str:00000172 .LASF713
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56985  .debug_str:00001956 .LASF714
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55981  .debug_str:0000060a .LASF715
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55763  .debug_str:000001c7 .LASF716
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57515  .debug_str:000024d1 .LASF717
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55747  .debug_str:0000017e .LASF718
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56761  .debug_str:0000152c .LASF719
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57735  .debug_str:00002950 .LASF720
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56807  .debug_str:00001626 .LASF721
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56055  .debug_str:0000078d .LASF722
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55831  .debug_str:00000364 .LASF723
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55835  .debug_str:00000371 .LASF724
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56205  .debug_str:00000a6c .LASF725
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55781  .debug_str:00000245 .LASF726
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56287  .debug_str:00000c2b .LASF727
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58023  .debug_str:0000306c .LASF728
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57929  .debug_str:00002e57 .LASF729
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57931  .debug_str:00002e5d .LASF730
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55853  .debug_str:000003bd .LASF731
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57557  .debug_str:000025c1 .LASF732
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57029  .debug_str:00001a2d .LASF733
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57865  .debug_str:00002d0a .LASF734
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57985  .debug_str:00002f36 .LASF735
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58127  .debug_str:000032d2 .LASF736
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56833  .debug_str:000016a3 .LASF737
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55683  .debug_str:00000000 .LASF738
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58283  .debug_str:0000355f .LASF739
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57415  .debug_str:00002282 .LASF740
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58087  .debug_str:000031a7 .LASF741
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57447  .debug_str:0000235e .LASF742
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58123  .debug_str:0000328a .LASF743
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56291  .debug_str:00000c3e .LASF744
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57039  .debug_str:00001a66 .LASF745
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57207  .debug_str:00001de7 .LASF746
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57103  .debug_str:00001bce .LASF747
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56441  .debug_str:00000ec5 .LASF748
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57333  .debug_str:00002082 .LASF749
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56405  .debug_str:00000dfd .LASF750
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57301  .debug_str:00001fce .LASF751
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56031  .debug_str:0000070a .LASF752
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55879  .debug_str:00000421 .LASF753
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56771  .debug_str:0000155d .LASF754
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57479  .debug_str:000023cd .LASF755
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57347  .debug_str:000020cc .LASF756
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57303  .debug_str:00001fd5 .LASF757
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57633  .debug_str:0000274a .LASF758
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58257  .debug_str:000034d5 .LASF759
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56171  .debug_str:000009b9 .LASF760
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57087  .debug_str:00001ba2 .LASF761
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56615  .debug_str:00001246 .LASF762
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56179  .debug_str:000009d1 .LASF763
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56177  .debug_str:000009ca .LASF764
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58253  .debug_str:000034bc .LASF765
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56517  .debug_str:00001009 .LASF766
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55945  .debug_str:0000055a .LASF767
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55943  .debug_str:00000553 .LASF768
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55941  .debug_str:0000054c .LASF769
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55939  .debug_str:00000545 .LASF770
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55937  .debug_str:0000053e .LASF771
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55935  .debug_str:00000537 .LASF772
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55933  .debug_str:00000530 .LASF773
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57237  .debug_str:00001e79 .LASF774
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57235  .debug_str:00001e72 .LASF775
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57233  .debug_str:00001e6b .LASF776
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57231  .debug_str:00001e64 .LASF777
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56513  .debug_str:00000ffb .LASF778
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56509  .debug_str:00000fed .LASF779
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57225  .debug_str:00001e51 .LASF780
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57223  .debug_str:00001e4a .LASF781
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57309  .debug_str:00001fef .LASF782
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57307  .debug_str:00001fea .LASF783
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57091  .debug_str:00001bad .LASF784
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57457  .debug_str:00002380 .LASF785
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56805  .debug_str:0000161d .LASF786
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55927  .debug_str:00000519 .LASF787
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58209  .debug_str:000033e4 .LASF788
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56705  .debug_str:000013f5 .LASF789
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56647  .debug_str:000012f1 .LASF790
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57277  .debug_str:00001f80 .LASF791
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56271  .debug_str:00000bee .LASF792
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58237  .debug_str:0000348c .LASF793
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56927  .debug_str:00001825 .LASF794
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57509  .debug_str:000024bf .LASF795
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57925  .debug_str:00002e4b .LASF796
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55741  .debug_str:0000016d .LASF797
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55985  .debug_str:00000618 .LASF798
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57499  .debug_str:00002486 .LASF799
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56297  .debug_str:00000c4f .LASF800
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57541  .debug_str:00002559 .LASF801
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56651  .debug_str:000012ff .LASF802
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56793  .debug_str:000015e6 .LASF803
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56923  .debug_str:00001819 .LASF804
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57819  .debug_str:00002b66 .LASF805
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57817  .debug_str:00002b5e .LASF806
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57815  .debug_str:00002b56 .LASF807
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57813  .debug_str:00002b4e .LASF808
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57767  .debug_str:00002a2f .LASF809
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57765  .debug_str:00002a27 .LASF810
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57763  .debug_str:00002a1f .LASF811
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57761  .debug_str:00002a17 .LASF812
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58033  .debug_str:00003085 .LASF813
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55949  .debug_str:00000567 .LASF814
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56519  .debug_str:00001010 .LASF815
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58131  .debug_str:000032e0 .LASF816
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58129  .debug_str:000032d8 .LASF817
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58097  .debug_str:000031da .LASF818
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58095  .debug_str:000031d2 .LASF819
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57015  .debug_str:000019da .LASF820
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57013  .debug_str:000019d2 .LASF821
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58059  .debug_str:0000311f .LASF822
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58053  .debug_str:000030fe .LASF823
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58069  .debug_str:00003141 .LASF824
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58067  .debug_str:0000313a .LASF825
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56019  .debug_str:000006db .LASF826
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58063  .debug_str:0000312d .LASF827
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55723  .debug_str:00000123 .LASF828
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55721  .debug_str:0000011b .LASF829
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57427  .debug_str:000022ca .LASF830
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58099  .debug_str:000031e2 .LASF831
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56871  .debug_str:00001733 .LASF832
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57175  .debug_str:00001cf4 .LASF833
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57177  .debug_str:00001cf9 .LASF834
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56459  .debug_str:00000f12 .LASF835
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57663  .debug_str:000027c6 .LASF836
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55843  .debug_str:000003a1 .LASF837
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57885  .debug_str:00002d88 .LASF838
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57001  .debug_str:0000199f .LASF839
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56703  .debug_str:000013ef .LASF840
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56755  .debug_str:000014eb .LASF841
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57573  .debug_str:00002601 .LASF842
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56053  .debug_str:00000787 .LASF843
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56641  .debug_str:000012c7 .LASF844
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58005  .debug_str:00002fee .LASF845
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56415  .debug_str:00000e30 .LASF846
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58007  .debug_str:00002ff4 .LASF847
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56943  .debug_str:0000187c .LASF848
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56213  .debug_str:00000a8d .LASF849
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58057  .debug_str:00003117 .LASF850
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56765  .debug_str:00001547 .LASF851
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56543  .debug_str:00001088 .LASF852
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57511  .debug_str:000024c5 .LASF853
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56547  .debug_str:000010a6 .LASF854
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56173  .debug_str:000009bf .LASF855
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56389  .debug_str:00000dac .LASF856
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55745  .debug_str:00000179 .LASF857
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56725  .debug_str:0000146a .LASF858
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57549  .debug_str:00002597 .LASF859
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57719  .debug_str:00002909 .LASF860
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56133  .debug_str:00000907 .LASF861
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57453  .debug_str:00002372 .LASF862
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57245  .debug_str:00001ea2 .LASF863
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56555  .debug_str:0000110d .LASF864
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56721  .debug_str:00001459 .LASF865
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56111  .debug_str:000008a7 .LASF866
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56021  .debug_str:000006e2 .LASF867
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57943  .debug_str:00002e8c .LASF868
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57963  .debug_str:00002ee1 .LASF869
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57961  .debug_str:00002edc .LASF870
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57959  .debug_str:00002ed7 .LASF871
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56279  .debug_str:00000c08 .LASF872
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58105  .debug_str:000031f5 .LASF873
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57321  .debug_str:00002025 .LASF874
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57143  .debug_str:00001c80 .LASF875
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57083  .debug_str:00001b94 .LASF876
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57041  .debug_str:00001a6d .LASF877
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57007  .debug_str:000019bd .LASF878
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56981  .debug_str:00001948 .LASF879
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56953  .debug_str:000018b7 .LASF880
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56919  .debug_str:0000180b .LASF881
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56883  .debug_str:0000175c .LASF882
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56093  .debug_str:00000842 .LASF883
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57629  .debug_str:00002728 .LASF884
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56451  .debug_str:00000ef2 .LASF885
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57257  .debug_str:00001eee .LASF886
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56667  .debug_str:00001350 .LASF887
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56937  .debug_str:00001852 .LASF888
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56661  .debug_str:00001339 .LASF889
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57145  .debug_str:00001c87 .LASF890
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57085  .debug_str:00001b9b .LASF891
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57043  .debug_str:00001a74 .LASF892
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57009  .debug_str:000019c4 .LASF893
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56983  .debug_str:0000194f .LASF894
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55791  .debug_str:0000028f .LASF895
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56921  .debug_str:00001812 .LASF896
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56885  .debug_str:00001763 .LASF897
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58175  .debug_str:0000335f .LASF898
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55787  .debug_str:00000273 .LASF899
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56453  .debug_str:00000ef8 .LASF900
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56363  .debug_str:00000d4a .LASF901
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56669  .debug_str:00001358 .LASF902
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56939  .debug_str:0000185a .LASF903
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56663  .debug_str:00001341 .LASF904
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56783  .debug_str:00001585 .LASF905
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56785  .debug_str:0000158d .LASF906
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55733  .debug_str:0000014c .LASF907
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56235  .debug_str:00000b0b .LASF908
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55987  .debug_str:0000061d .LASF909
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55737  .debug_str:0000015f .LASF910
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56305  .debug_str:00000c69 .LASF911
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55797  .debug_str:000002a8 .LASF912
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57981  .debug_str:00002f28 .LASF913
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58241  .debug_str:0000349a .LASF914
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56095  .debug_str:0000084a .LASF915
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56035  .debug_str:00000716 .LASF916
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56507  .debug_str:00000fe5 .LASF917
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56739  .debug_str:000014a7 .LASF918
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55755  .debug_str:0000019b .LASF919
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57501  .debug_str:0000248b .LASF920
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57023  .debug_str:00001a1b .LASF921
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56541  .debug_str:00001081 .LASF922
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57867  .debug_str:00002d0f .LASF923
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55805  .debug_str:000002c3 .LASF924
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57317  .debug_str:0000200d .LASF925
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56929  .debug_str:0000182b .LASF926
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55719  .debug_str:00000115 .LASF927
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57751  .debug_str:000029ac .LASF928
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56431  .debug_str:00000e90 .LASF929
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57141  .debug_str:00001c7a .LASF930
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57081  .debug_str:00001b8e .LASF931
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56699  .debug_str:000013de .LASF932
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57581  .debug_str:00002623 .LASF933
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57877  .debug_str:00002d4c .LASF934
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57579  .debug_str:00002618 .LASF935
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56163  .debug_str:0000098e .LASF936
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57497  .debug_str:0000247e .LASF937
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56801  .debug_str:000015fe .LASF938
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56799  .debug_str:000015f7 .LASF939
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56979  .debug_str:0000193e .LASF940
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57285  .debug_str:00001f9a .LASF941
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58077  .debug_str:0000316a .LASF942
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56843  .debug_str:000016cd .LASF943
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57033  .debug_str:00001a39 .LASF944
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57031  .debug_str:00001a32 .LASF945
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55837  .debug_str:00000376 .LASF946
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56047  .debug_str:0000075f .LASF947
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56747  .debug_str:000014cd .LASF948
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56845  .debug_str:000016d5 .LASF949
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56565  .debug_str:00001152 .LASF950
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58153  .debug_str:0000331c .LASF951
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56591  .debug_str:000011f2 .LASF952
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57921  .debug_str:00002e3d .LASF953
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55929  .debug_str:0000051f .LASF954
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56791  .debug_str:000015e0 .LASF955
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57105  .debug_str:00001bd5 .LASF956
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57107  .debug_str:00001bdd .LASF957
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57109  .debug_str:00001be5 .LASF958
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57093  .debug_str:00001bb2 .LASF959
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56609  .debug_str:0000122f .LASF960
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55767  .debug_str:000001e7 .LASF961
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56359  .debug_str:00000d3e .LASF962
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56233  .debug_str:00000b05 .LASF963
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55965  .debug_str:00000599 .LASF964
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57567  .debug_str:000025ed .LASF965
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56757  .debug_str:000014f1 .LASF966
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57189  .debug_str:00001d1f .LASF967
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57329  .debug_str:00002068 .LASF968
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57899  .debug_str:00002ddf .LASF969
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56143  .debug_str:0000093e .LASF970
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56893  .debug_str:00001793 .LASF971
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57711  .debug_str:000028e1 .LASF972
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57953  .debug_str:00002ec5 .LASF973
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56847  .debug_str:000016dd .LASF974
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55693  .debug_str:0000002b .LASF975
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57451  .debug_str:0000236a .LASF976
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57893  .debug_str:00002dac .LASF977
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57283  .debug_str:00001f90 .LASF978
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56061  .debug_str:000007a6 .LASF979
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55821  .debug_str:0000032c .LASF980
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57645  .debug_str:00002781 .LASF981
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56863  .debug_str:00001718 .LASF982
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56303  .debug_str:00000c61 .LASF983
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57067  .debug_str:00001b0b .LASF984
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57983  .debug_str:00002f31 .LASF985
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56319  .debug_str:00000c91 .LASF986
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56613  .debug_str:0000123e .LASF987
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56321  .debug_str:00000c96 .LASF988
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58177  .debug_str:00003368 .LASF989
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56323  .debug_str:00000c9b .LASF990
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58179  .debug_str:00003370 .LASF991
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56325  .debug_str:00000ca0 .LASF992
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56735  .debug_str:00001497 .LASF993
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56327  .debug_str:00000ca5 .LASF994
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56737  .debug_str:0000149f .LASF995
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56369  .debug_str:00000d61 .LASF996
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56155  .debug_str:0000096e .LASF997
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56371  .debug_str:00000d66 .LASF998
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56159  .debug_str:00000980 .LASF999
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56373  .debug_str:00000d6b .LASF1000
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57523  .debug_str:000024f9 .LASF1001
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56379  .debug_str:00000d7a .LASF1002
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56381  .debug_str:00000d81 .LASF1003
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56375  .debug_str:00000d70 .LASF1004
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58213  .debug_str:000033f6 .LASF1005
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57951  .debug_str:00002ebd .LASF1006
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56377  .debug_str:00000d75 .LASF1007
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58227  .debug_str:00003460 .LASF1008
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57063  .debug_str:00001afd .LASF1009
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57603  .debug_str:000026a5 .LASF1010
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57643  .debug_str:00002779 .LASF1011
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56301  .debug_str:00000c59 .LASF1012
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57605  .debug_str:000026aa .LASF1013
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57513  .debug_str:000024ca .LASF1014
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55815  .debug_str:00000304 .LASF1015
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55925  .debug_str:00000503 .LASF1016
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56199  .debug_str:00000a4f .LASF1017
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57399  .debug_str:000021d2 .LASF1018
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57803  .debug_str:00002b0a .LASF1019
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57465  .debug_str:000023a0 .LASF1020
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55827  .debug_str:0000034a .LASF1021
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57731  .debug_str:0000293c .LASF1022
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56657  .debug_str:00001321 .LASF1023
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57707  .debug_str:000028cc .LASF1024
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56007  .debug_str:0000068d .LASF1025
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56535  .debug_str:00001067 .LASF1026
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56399  .debug_str:00000dd7 .LASF1027
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56059  .debug_str:00000797 .LASF1028
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58183  .debug_str:00003388 .LASF1029
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57319  .debug_str:00002013 .LASF1030
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56839  .debug_str:000016b3 .LASF1031
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56991  .debug_str:0000197a .LASF1032
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56209  .debug_str:00000a7b .LASF1033
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57553  .debug_str:000025ac .LASF1034
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58121  .debug_str:0000327c .LASF1035
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57243  .debug_str:00001e8d .LASF1036
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57251  .debug_str:00001ebf .LASF1037
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57913  .debug_str:00002e0b .LASF1038
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56911  .debug_str:000017e0 .LASF1039
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58263  .debug_str:000034fd .LASF1040
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56521  .debug_str:00001017 .LASF1041
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57211  .debug_str:00001df3 .LASF1042
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55687  .debug_str:0000000a .LASF1043
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56763  .debug_str:00001537 .LASF1301
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56897  .debug_str:000017a1 .LASF1044
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:61     .text.TMR_GetMultiBmp:00000033 .LFE94
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49480  .debug_loc:00000000 .LLST0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56525  .debug_str:00001035 .LASF1046
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49493  .debug_loc:00000020 .LLST1
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49507  .debug_loc:00000041 .LLST2
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49519  .debug_loc:00000060 .LLST3
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49531  .debug_loc:0000007f .LLST4
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49543  .debug_loc:0000009e .LLST5
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57323  .debug_str:0000202e .LASF1045
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:141    .text.GetInternalHWClearSourceValue:00000059 .LFE51
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56901  .debug_str:000017bf .LASF1047
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49559  .debug_loc:000000c8 .LLST6
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56015  .debug_str:000006af .LASF1048
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49573  .debug_loc:000000e9 .LLST7
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:131    .text.GetInternalHWClearSourceValue:00000053 .LVL16
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57445  .debug_str:00002353 .LASF1050
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:221    .text.LVDR_SetUp:00000075 .LFE0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56949  .debug_str:00001897 .LASF1049
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49603  .debug_loc:00000136 .LLST8
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49617  .debug_loc:00000157 .LLST9
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56589  .debug_str:000011e5 .LASF1051
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:309    .text.LVDW_SetTrip:00000087 .LFE1
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56477  .debug_str:00000f67 .LASF1052
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49634  .debug_loc:00000182 .LLST10
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49648  .debug_loc:000001a3 .LLST11
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56575  .debug_str:00001181 .LASF1053
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:327    .text.LVDR_GetTrip:00000019 .LFE2
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56607  .debug_str:00001222 .LASF1054
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:345    .text.LVDW_GetTrip:00000019 .LFE3
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57919  .debug_str:00002e31 .LASF1055
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:356    .text.WDT_Enabled:00000003 .LFE4
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55825  .debug_str:0000033e .LASF1058
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:370    .text.WDT_Refresh:0000000c .LFE5
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56741  .debug_str:000014af .LASF1056
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:385    .text.WDT_TimeoutExpired:0000000d .LFE6
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56139  .debug_str:0000091d .LASF1057
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:399    .text.WDT_UntimelyResetOccurred:0000000b .LFE7
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57191  .debug_str:00001d27 .LASF1059
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:413    .text.WDT_ClearTimeoutExpired:0000000e .LFE8
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57507  .debug_str:000024a0 .LASF1060
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:427    .text.WDT_ClearUntimelyResetOccurred:0000000e .LFE9
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57059  .debug_str:00001acc .LASF1061
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:438    .text.WDT_AllowUpdate:00000003 .LFE10
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55823  .debug_str:00000331 .LASF1062
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:447    .text.WDT_ResetMCU:00000001 .LFE11
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58285  .debug_str:00003564 .LASF1063
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:468    .text.WDT_IsWindowOpen:00000014 .LFE12
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:455    .text.WDT_IsWindowOpen:00000000 .LBB8
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:461    .text.WDT_IsWindowOpen:00000008 .LBE8
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57801  .debug_str:00002aea .LASF1064
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:491    .text.WDT_IsJustBeforePermittedWindow:00000014 .LFE13
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57187  .debug_str:00001d17 .LASF1121
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56005  .debug_str:00000688 .LASF1065
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49665  .debug_loc:000001ce .LLST12
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:476    .text.WDT_IsJustBeforePermittedWindow:00000000 .LBB10
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:483    .text.WDT_IsJustBeforePermittedWindow:00000008 .LBE10
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56081  .debug_str:000007ef .LASF1066
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:511    .text.WDT_IsRunning:00000010 .LFE14
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:499    .text.WDT_IsRunning:00000000 .LBB12
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:505    .text.WDT_IsRunning:00000008 .LBE12
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56619  .debug_str:00001252 .LASF1067
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:520    .text.WDT_InitSync:00000001 .LFE15
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57889  .debug_str:00002d97 .LASF1068
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:531    .text.WDT_StartSync:00000004 .LFE16
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:530    .text.WDT_StartSync:00000004 .LVL36
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57661  .debug_str:000027b1 .LASF1069
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:546    .text.WDT_SetWindowingSync:00000010 .LFE17
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55959  .debug_str:00000586 .LASF1070
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:560    .text.WDT_ReadCounter:0000000d .LFE19
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57123  .debug_str:00001c43 .LASF1071
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:574    .text.WDT_GetWindow:0000000b .LFE20
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55699  .debug_str:00000042 .LASF1072
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:585    .text.WDT_ReadRSTCounter:00000003 .LFE21
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57597  .debug_str:0000266f .LASF1073
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:594    .text.WDT_ResetRSTCounter:00000001 .LFE22
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57705  .debug_str:000028b9 .LASF1074
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:635    .text.SYS_GetResetSrcVal:0000002d .LFE23
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49686  .debug_loc:000001f2 .LLST13
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55799  .debug_str:000002b0 .LASF1075
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57185  .debug_str:00001d11 .LASF1076
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55803  .debug_str:000002bd .LASF1077
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49725  .debug_loc:00000241 .LLST14
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57213  .debug_str:00001dff .LASF1078
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:648    .text.SYS_PowerOnReset:00000003 .LFE24
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56107  .debug_str:0000089b .LASF1079
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49732  .debug_loc:00000254 .LLST15
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56891  .debug_str:00001781 .LASF1080
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:663    .text.SYS_WatchdogReset:00000005 .LFE25
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49746  .debug_loc:00000275 .LLST16
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56001  .debug_str:0000066c .LASF1081
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:677    .text.SYS_ExternalPinReset:00000006 .LFE26
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49760  .debug_loc:00000296 .LLST17
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57915  .debug_str:00002e16 .LASF1082
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:690    .text.SYS_LossOfClockReset:00000003 .LFE27
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49774  .debug_loc:000002b7 .LLST18
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57895  .debug_str:00002db6 .LASF1083
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:703    .text.SYS_IllegalOpcodeReset:00000003 .LFE28
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49788  .debug_loc:000002d8 .LLST19
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56559  .debug_str:00001132 .LASF1084
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:718    .text.SYS_LowVoltageReset:00000005 .LFE29
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49802  .debug_loc:000002f9 .LLST20
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57805  .debug_str:00002b16 .LASF1085
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:731    .text.SYS_DebuggerReset:00000003 .LFE30
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49816  .debug_loc:0000031a .LLST21
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56485  .debug_str:00000f8a .LASF1086
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:744    .text.SYS_IllegalAddressReset:00000003 .LFE31
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49830  .debug_loc:0000033b .LLST22
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55785  .debug_str:00000265 .LASF1087
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:759    .text.SYS_UserReset:00000005 .LFE32
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49844  .debug_loc:0000035c .LLST23
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57739  .debug_str:00002968 .LASF1088
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49858  .debug_loc:0000037d .LLST24
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56571  .debug_str:00001166 .LASF1089
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:768    .text.CLK_EngageClkRefSync:00000001 .LFE33
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55775  .debug_str:00000207 .LASF1090
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:781    .text.CLK_SetInternalClockSync:00000003 .LFE34
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56527  .debug_str:0000103a .LASF1091
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49892  .debug_loc:000003b2 .LLST25
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57017  .debug_str:000019e2 .LASF1092
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:794    .text.CLK_SetExternalClockSync:00000003 .LFE35
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49906  .debug_loc:000003d3 .LLST26
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56201  .debug_str:00000a55 .LASF1093
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:804    .text.CLK_SetTrimSync:00000001 .LFE36
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57525  .debug_str:00002502 .LASF1094
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56241  .debug_str:00000b46 .LASF1095
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:817    .text.CLK_SetFLLExternalClockSync:00000003 .LFE37
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49920  .debug_loc:000003f4 .LLST27
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57785  .debug_str:00002a7b .LASF1096
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:830    .text.CLK_SetFLLInternalClockSync:00000003 .LFE38
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49934  .debug_loc:00000415 .LLST28
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57037  .debug_str:00001a5b .LASF1097
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:892    .text.DeInitGPIO:0000007d .LFE39
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49948  .debug_loc:00000436 .LLST29
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55711  .debug_str:000000bc .LASF1098
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:918    .text.DIO_IsNotDummyIO:00000010 .LFE40
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49961  .debug_loc:00000456 .LLST30
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57631  .debug_str:00002730 .LASF1099
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:996    .text.DIO_CheckDigitalFilterPin:0000004f .LFE41
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56567  .debug_str:0000115c .LASF1100
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:49986  .debug_loc:00000490 .LLST31
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50000  .debug_loc:000004b1 .LLST32
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56481  .debug_str:00000f7a .LASF1101
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50012  .debug_loc:000004d0 .LLST33
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56329  .debug_str:00000caa .LASF1102
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57665  .debug_str:000027cd .LASF1103
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50025  .debug_loc:000004f0 .LLST34
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58049  .debug_str:000030e1 .LASF1104
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50041  .debug_loc:00000513 .LLST35
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56579  .debug_str:00001193 .LASF1105
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1015   .text.DIO_IsDigitalFilterAvailable:0000000d .LFE42
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50048  .debug_loc:00000526 .LLST36
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50062  .debug_loc:00000547 .LLST37
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1007   .text.DIO_IsDigitalFilterAvailable:00000004 .LVL86
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57591  .debug_str:00002649 .LASF1106
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1146   .text.DIO_DigitalFilterEnable:000000bf .LFE43
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50082  .debug_loc:0000056e .LLST38
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50095  .debug_loc:0000058e .LLST39
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57975  .debug_str:00002f02 .LASF1107
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50109  .debug_loc:000005af .LLST40
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1028   .text.DIO_DigitalFilterEnable:00000006 .LVL89
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57757  .debug_str:000029d9 .LASF1108
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1329   .text.DIO_DigitalFilterClkFrequencySet:00000111 .LFE44
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50168  .debug_loc:00000633 .LLST41
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50181  .debug_loc:00000653 .LLST42
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56333  .debug_str:00000cbe .LASF1109
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50195  .debug_loc:00000674 .LLST43
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50224  .debug_loc:000006b9 .LLST44
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57353  .debug_str:000020f7 .LASF1110
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50231  .debug_loc:000006cc .LLST45
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55895  .debug_str:0000047e .LASF1111
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1161   .text.DIO_DigitalFilterClkFrequencySet:00000008 .LVL101
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57061  .debug_str:00001adc .LASF1112
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1451   .text.DIO_DigitalFilterClkFrequencyGet:000000a1 .LFE45
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50275  .debug_loc:00000743 .LLST46
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50289  .debug_loc:00000764 .LLST47
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50300  .debug_loc:00000782 .LLST48
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50332  .debug_loc:000007cd .LLST49
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1340   .text.DIO_DigitalFilterClkFrequencyGet:00000004 .LVL124
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57019  .debug_str:000019fb .LASF1113
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1551   .text.DIO_DigitalFilterDisable:0000008d .LFE46
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50349  .debug_loc:000007f8 .LLST50
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50363  .debug_loc:00000819 .LLST51
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1462   .text.DIO_DigitalFilterDisable:00000004 .LVL133
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57871  .debug_str:00002d26 .LASF1114
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1687   .text.DIO_IsDigitalFilterEnabled:0000009d .LFE47
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50370  .debug_loc:0000082c .LLST52
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50384  .debug_loc:0000084d .LLST53
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50423  .debug_loc:000008b8 .LLST54
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57607  .debug_str:000026af .LASF1115
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50482  .debug_loc:0000093c .LLST55
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1562   .text.DIO_IsDigitalFilterEnabled:00000004 .LVL136
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57487  .debug_str:00002403 .LASF1116
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1753   .text.MapClearResourceValue:0000002d .LFE48
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57753  .debug_str:000029b3 .LASF1117
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50539  .debug_loc:000009ce .LLST56
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57809  .debug_str:00002b2d .LASF1118
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50553  .debug_loc:000009ef .LLST57
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1736   .text.MapClearResourceValue:00000024 .LVL165
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57977  .debug_str:00002f0b .LASF1119
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1823   .text.MapClearResourceId:0000002d .LFE49
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50580  .debug_loc:00000a32 .LLST58
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50594  .debug_loc:00000a53 .LLST59
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1806   .text.MapClearResourceId:00000024 .LVL174
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56197  .debug_str:00000a3a .LASF1120
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1838   .text.TMR_GetClearSourceId:00000008 .LFE52
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50626  .debug_loc:00000aa2 .LLST60
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1834   .text.TMR_GetClearSourceId:00000004 .LVL178
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1837   .text.TMR_GetClearSourceId:00000008 .LVL179
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57849  .debug_str:00002caf .LASF1122
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1851   .text.Threshold2SetUpUnsupported:00000003 .LFE53
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50640  .debug_loc:00000ac3 .LLST61
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57755  .debug_str:000029bc .LASF1123
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1903   .text.TMR_CheckClearSourceIdFailed:00000026 .LFE54
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56881  .debug_str:00001756 .LASF1124
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50654  .debug_loc:00000ae4 .LLST62
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55909  .debug_str:000004b0 .LASF1125
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1980   .text.TMR_GetClearSourceCh:0000005b .LFE55
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50679  .debug_loc:00000b1e .LLST63
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50693  .debug_loc:00000b3f .LLST64
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56417  .debug_str:00000e37 .LASF1126
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57717  .debug_str:000028fb .LASF1127
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2024   .text.TMR_ClockGate:00000034 .LFE56
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50759  .debug_loc:00000bd8 .LLST65
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57979  .debug_str:00002f1e .LASF1128
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50772  .debug_loc:00000bf8 .LLST66
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56277  .debug_str:00000c03 .LASF1129
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50786  .debug_loc:00000c19 .LLST67
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2000   .text.TMR_ClockGate:00000011 .LVL199
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58055  .debug_str:00003106 .LASF1130
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2107   .text.TMR_SetPrescaler:0000006f .LFE57
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50797  .debug_loc:00000c37 .LLST68
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56225  .debug_str:00000ac9 .LASF1131
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50811  .debug_loc:00000c58 .LLST69
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2106   .text.TMR_SetPrescaler:0000006f .LVL204
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56951  .debug_str:000018a3 .LASF1132
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2177   .text.TMR_GetPrescalerDiv:00000056 .LFE58
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50836  .debug_loc:00000c92 .LLST70
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50850  .debug_loc:00000cb3 .LLST71
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2171   .text.TMR_GetPrescalerDiv:00000053 .LVL208
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56041  .debug_str:0000072a .LASF1133
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2197   .text.TMR_GetTickResolution:00000017 .LFE59
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50871  .debug_loc:00000ce9 .LLST72
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50885  .debug_loc:00000d0a .LLST73
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2188   .text.TMR_GetTickResolution:00000004 .LVL211
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56251  .debug_str:00000b7a .LASF1134
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2210   .text.TMR_SetSetPrescaleForTickResolution:00000003 .LFE60
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50916  .debug_loc:00000d42 .LLST74
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58215  .debug_str:000033fc .LASF1135
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56189  .debug_str:00000a07 .LASF1136
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2283   .text.TMR_SetPrescalerDfltValue:00000063 .LFE61
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50930  .debug_loc:00000d63 .LLST75
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2282   .text.TMR_SetPrescalerDfltValue:00000063 .LVL218
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57265  .debug_str:00001f3e .LASF1137
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2303   .text.TMR_SetCountDir:0000000d .LFE62
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56905  .debug_str:000017ca .LASF1138
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50944  .debug_loc:00000d84 .LLST76
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56285  .debug_str:00000c21 .LASF1139
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50962  .debug_loc:00000db0 .LLST77
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2300   .text.TMR_SetCountDir:0000000c .LVL221
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56545  .debug_str:0000108d .LASF1140
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2313   .text.TMR_SetCountDirDfltValue:00000001 .LFE63
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56407  .debug_str:00000e04 .LASF1187
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55771  .debug_str:000001f2 .LASF1143
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2585   .text.TMR_SetModulo:000001b5 .LFE64
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50976  .debug_loc:00000dd1 .LLST78
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57313  .debug_str:00001ffb .LASF1141
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2327   .text.TMR_SetModulo:00000008 .LBB18
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2410   .text.TMR_SetModulo:00000094 .LBE18
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2328   .text.TMR_SetModulo:00000008 .LBB19
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2409   .text.TMR_SetModulo:00000094 .LBE19
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56969  .debug_str:0000190a .LASF1142
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2631   .text.TMR_StopClockSource:00000030 .LFE65
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:50989  .debug_loc:00000df1 .LLST79
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51002  .debug_loc:00000e11 .LLST80
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2605   .text.TMR_StopClockSource:00000011 .LVL225
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57561  .debug_str:000025cc .LASF1144
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2840   .text.TMR_EnableTI:00000172 .LFE66
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51025  .debug_loc:00000e50 .LLST81
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58021  .debug_str:0000305e .LASF1145
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3011   .text.TMR_DisableTI:00000137 .LFE67
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51038  .debug_loc:00000e70 .LLST82
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56977  .debug_str:00001931 .LASF1146
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3092   .text.TMR_ClearTOF:0000004d .LFE68
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51051  .debug_loc:00000e90 .LLST83
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51064  .debug_loc:00000eb0 .LLST84
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55855  .debug_str:000003c3 .LASF1147
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3190   .text.TMR_GetTOF:0000005b .LFE69
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51118  .debug_loc:00000f35 .LLST85
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51131  .debug_loc:00000f55 .LLST86
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51153  .debug_loc:00000f8c .LLST87
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51167  .debug_loc:00000fad .LLST88
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3106   .text.TMR_GetTOF:00000008 .LVL241
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56713  .debug_str:00001420 .LASF1148
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3459   .text.TMR_SetChannelInputChapture:00000144 .LFE70
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51214  .debug_loc:00001024 .LLST89
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51228  .debug_loc:00001045 .LLST90
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51323  .debug_loc:0000113d .LLST91
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51418  .debug_loc:00001235 .LLST92
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56827  .debug_str:0000167e .LASF1149
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51525  .debug_loc:0000134d .LLST93
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57371  .debug_str:00002158 .LASF1150
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51573  .debug_loc:000013c1 .LLST94
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3388   .text.TMR_SetChannelInputChapture:000000d9 .LVL272
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58267  .debug_str:0000351e .LASF1151
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3494   .text.TMR_SetChannelOutputCompare:00000025 .LFE71
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51656  .debug_loc:00001489 .LLST95
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56711  .debug_str:0000141b .LASF1152
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57519  .debug_str:000024e1 .LASF1153
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3898   .text.TMR_SetChannelPWM:000002ff .LFE72
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51668  .debug_loc:000014a8 .LLST96
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3897   .text.TMR_SetChannelPWM:000002ff .LVL283
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55761  .debug_str:000001ad .LASF1154
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3967   .text.TMR_ToggleChannelEdgeMode:00000050 .LFE73
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57583  .debug_str:0000262e .LASF1155
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51682  .debug_loc:000014c9 .LLST97
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51696  .debug_loc:000014ea .LLST98
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51713  .debug_loc:0000150e .LLST99
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3966   .text.TMR_ToggleChannelEdgeMode:00000050 .LVL288
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57551  .debug_str:0000259e .LASF1156
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3993   .text.TMR_SetTimeOn:00000018 .LFE74
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55769  .debug_str:000001ed .LASF1157
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51734  .debug_loc:00001539 .LLST100
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51748  .debug_loc:0000155a .LLST101
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51762  .debug_loc:0000157b .LLST102
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3992   .text.TMR_SetTimeOn:00000018 .LVL292
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56457  .debug_str:00000f03 .LASF1158
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4031   .text.TMR_GetChValue:00000021 .LFE76
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51783  .debug_loc:000015a6 .LLST103
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51796  .debug_loc:000015c6 .LLST104
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51810  .debug_loc:000015e7 .LLST105
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4022   .text.TMR_GetChValue:0000001a .LVL298
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56237  .debug_str:00000b13 .LASF1159
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4049   .text.TMR_GetTimeOn:0000000d .LFE75
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51831  .debug_loc:0000161d .LLST106
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51844  .debug_loc:0000163d .LLST107
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51858  .debug_loc:0000165e .LLST108
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4045   .text.TMR_GetTimeOn:00000008 .LVL301
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57349  .debug_str:000020d2 .LASF1160
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4192   .text.TMR_SetChannelPulses:00000092 .LFE77
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51869  .debug_loc:0000167c .LLST109
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58085  .debug_str:0000319e .LASF1161
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51883  .debug_loc:0000169d .LLST110
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4184   .text.TMR_SetChannelPulses:00000084 .LVL304
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56987  .debug_str:0000195e .LASF1162
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4335   .text.TMR_ClearChannelPulses:00000092 .LFE78
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51897  .debug_loc:000016be .LLST111
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4327   .text.TMR_ClearChannelPulses:00000084 .LVL307
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57375  .debug_str:00002172 .LASF1163
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4415   .text.TMR_SetChannelEdgeMode:0000005c .LFE79
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51911  .debug_loc:000016df .LLST112
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51925  .debug_loc:00001700 .LLST113
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57937  .debug_str:00002e6f .LASF1164
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51964  .debug_loc:0000176b .LLST114
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:51989  .debug_loc:000017a5 .LLST115
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4414   .text.TMR_SetChannelEdgeMode:0000005c .LVL322
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56645  .debug_str:000012e4 .LASF1165
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4484   .text.TMR_GetValue:0000004d .LFE80
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52010  .debug_loc:000017d0 .LLST116
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57491  .debug_str:00002455 .LASF1166
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52024  .debug_loc:000017f1 .LLST117
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4478   .text.TMR_GetValue:0000004a .LVL327
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58259  .debug_str:000034da .LASF1167
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4728   .text.TMR_EnableCHI:000001d0 .LFE81
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52045  .debug_loc:00001827 .LLST118
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4727   .text.TMR_EnableCHI:000001d0 .LVL331
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56335  .debug_str:00000cce .LASF1168
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4871   .text.TMR_ReadCHF:000000c1 .LFE83
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52059  .debug_loc:00001848 .LLST119
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52073  .debug_loc:00001869 .LLST120
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4865   .text.TMR_ReadCHF:000000be .LVL336
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57563  .debug_str:000025d9 .LASF1169
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4901   .text.TMR_ClearCHF:00000021 .LFE84
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52094  .debug_loc:0000189f .LLST121
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57305  .debug_str:00001fdb .LASF1170
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5166   .text.TMR_DisableCHI:000001ad .LFE82
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52117  .debug_loc:000018d7 .LLST122
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52130  .debug_loc:000018f7 .LLST123
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5106   .text.TMR_DisableCHI:00000141 .LVL340
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5112   .text.TMR_DisableCHI:00000148 .LVL341
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58051  .debug_str:000030ec .LASF1171
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5178   .text.TMR_SetThreshold1:00000004 .LFE85
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52148  .debug_loc:00001923 .LLST124
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52162  .debug_loc:00001944 .LLST125
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5177   .text.TMR_SetThreshold1:00000004 .LVL344
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57769  .debug_str:00002a37 .LASF1172
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5193   .text.TMR_SetModuloDfltValue:00000009 .LFE86
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52176  .debug_loc:00001965 .LLST126
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52190  .debug_loc:00001986 .LLST127
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5192   .text.TMR_SetModuloDfltValue:00000009 .LVL347
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55703  .debug_str:0000005c .LASF1173
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5454   .text.TMR_GetModulo:0000011f .LFE87
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52208  .debug_loc:000019b2 .LLST128
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55891  .debug_str:00000472 .LASF1174
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52221  .debug_loc:000019d2 .LLST129
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52243  .debug_loc:00001a09 .LLST130
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52257  .debug_loc:00001a2a .LLST131
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52413  .debug_loc:00001bb9 .LLST132
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5208   .text.TMR_GetModulo:00000008 .LVL350
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5439   .text.TMR_GetModulo:00000113 .LVL384
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57879  .debug_str:00002d56 .LASF1175
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5521   .text.TMR_GetChannelEdgeMode:0000004d .LFE88
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52484  .debug_loc:00001c7c .LLST133
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52497  .debug_loc:00001c9c .LLST134
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52511  .debug_loc:00001cbd .LLST135
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52523  .debug_loc:00001cdc .LLST136
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52553  .debug_loc:00001d29 .LLST137
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5501   .text.TMR_GetChannelEdgeMode:00000034 .LVL396
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57635  .debug_str:00002750 .LASF1176
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5584   .text.TMR_SetCounterDfltValue:0000004a .LFE89
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52588  .debug_loc:00001d73 .LLST138
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5583   .text.TMR_SetCounterDfltValue:0000004a .LVL401
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58287  .debug_str:00003575 .LASF1177
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5664   .text.TMR_GetCounter:0000004f .LFE90
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52602  .debug_loc:00001d94 .LLST139
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55731  .debug_str:00000141 .LASF1178
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52616  .debug_loc:00001db5 .LLST140
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5655   .text.TMR_GetCounter:0000004a .LVL413
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57543  .debug_str:0000255e .LASF1179
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5727   .text.TMR_SetCounter:00000045 .LFE91
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52673  .debug_loc:00001e47 .LLST141
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52687  .debug_loc:00001e68 .LLST142
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5726   .text.TMR_SetCounter:00000045 .LVL417
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57253  .debug_str:00001eca .LASF1180
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5754   .text.OutputCompareModeUnsupported:00000017 .LFE92
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52701  .debug_loc:00001e89 .LLST143
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55789  .debug_str:0000027c .LASF1181
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5789   .text.TMR_SetClockSource:00000027 .LFE93
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52715  .debug_loc:00001eaa .LLST144
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56003  .debug_str:00000681 .LASF1182
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52729  .debug_loc:00001ecb .LLST145
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5771   .text.TMR_SetClockSource:0000000d .LVL422
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57113  .debug_str:00001bf4 .LASF1183
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5838   .text.TMR_StopClockSourceMulti:00000033 .LFE95
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52747  .debug_loc:00001ef7 .LLST146
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52760  .debug_loc:00001f17 .LLST147
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52771  .debug_loc:00001f35 .LLST148
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52783  .debug_loc:00001f54 .LLST149
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52800  .debug_loc:00001f7f .LLST150
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5804   .text.TMR_StopClockSourceMulti:00000008 .LVL425
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5826   .text.TMR_StopClockSourceMulti:00000028 .LVL429
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56829  .debug_str:00001684 .LASF1184
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5856   .text.TMR_SetClockSourceMulti:00000011 .LFE96
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52819  .debug_loc:00001fac .LLST151
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52833  .debug_loc:00001fcd .LLST152
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5849   .text.TMR_SetClockSourceMulti:00000004 .LVL433
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56049  .debug_str:00000768 .LASF1185
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6282   .text.TMR_SetChannelOutputMode:00000208 .LFE97
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52845  .debug_loc:00001fec .LLST153
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52858  .debug_loc:0000200c .LLST154
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52903  .debug_loc:0000207d .LLST155
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52956  .debug_loc:0000210b .LLST156
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:53157  .debug_loc:000022d5 .LLST157
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:53264  .debug_loc:000023eb .LLST158
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:53363  .debug_loc:000024eb .LLST159
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:53474  .debug_loc:0000260b .LLST160
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:53536  .debug_loc:000026a2 .LLST161
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6065   .text.TMR_SetChannelOutputMode:00000113 .LVL466
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56803  .debug_str:00001605 .LASF1186
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6356   .text.TMR_SetTimerDefaultMode:0000004c .LFE99
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:53624  .debug_loc:00002776 .LLST162
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:53638  .debug_loc:00002797 .LLST163
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:53673  .debug_loc:000027f2 .LLST164
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6333   .text.TMR_SetTimerDefaultMode:0000002d .LVL502
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56707  .debug_str:000013fb .LASF1188
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58075  .debug_str:00003158 .LASF1189
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6408   .text.TMR_DeInitChannel:00000036 .LFE100
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:53706  .debug_loc:00002842 .LLST165
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:53719  .debug_loc:00002862 .LLST166
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6371   .text.TMR_DeInitChannel:00000008 .LBB22
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6395   .text.TMR_DeInitChannel:00000028 .LBE22
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:53741  .debug_loc:00002899 .LLST167
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6372   .text.TMR_DeInitChannel:00000008 .LBB23
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6394   .text.TMR_DeInitChannel:00000028 .LBE23
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:53759  .debug_loc:000028c5 .LLST168
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6370   .text.TMR_DeInitChannel:00000008 .LVL510
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6399   .text.TMR_DeInitChannel:0000002e .LVL512
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6407   .text.TMR_DeInitChannel:00000036 .LVL514
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57335  .debug_str:00002088 .LASF1190
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6449   .text.TMR_GetDelta:00000027 .LFE101
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:53806  .debug_loc:0000291e .LLST169
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56673  .debug_str:00001367 .LASF1191
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:53819  .debug_loc:0000293e .LLST170
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56529  .debug_str:00001047 .LASF1192
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:53844  .debug_loc:00002978 .LLST171
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56115  .debug_str:000008b7 .LASF1193
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:53862  .debug_loc:000029a4 .LLST172
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:53873  .debug_loc:000029c2 .LLST173
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6437   .text.TMR_GetDelta:0000001b .LVL519
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56131  .debug_str:000008fe .LASF1194
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6677   .text.IRQ_Init:000001eb .LFE102
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57709  .debug_str:000028da .LASF1195
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:53880  .debug_loc:000029d5 .LLST174
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57779  .debug_str:00002a64 .LASF1196
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6792   .text.IRQ_SetEdge:000000a7 .LFE103
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56601  .debug_str:00001211 .LASF1197
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:53894  .debug_loc:000029f6 .LLST175
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:53908  .debug_loc:00002a17 .LLST176
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56849  .debug_str:000016e6 .LASF1198
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6890   .text.IRQ_IntEnable:0000009b .LFE104
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56267  .debug_str:00000bdd .LASF1199
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:53933  .debug_loc:00002a51 .LLST177
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:53947  .debug_loc:00002a72 .LLST178
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56585  .debug_str:000011d3 .LASF1200
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7078   .text.IRQ_DeInit:0000013f .LFE105
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:53972  .debug_loc:00002aac .LLST179
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56403  .debug_str:00000ded .LASF1201
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7152   .text.IRQ_Acknowledge:00000065 .LFE106
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:53997  .debug_loc:00002ae6 .LLST180
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56947  .debug_str:0000188b .LASF1202
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7234   .text.IRQ_GetEdge:00000073 .LFE107
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54015  .debug_loc:00002b12 .LLST181
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54033  .debug_loc:00002b3e .LLST182
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56185  .debug_str:000009f2 .LASF1203
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7336   .text.IRQ_pinIsHigh:0000007d .LFE108
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54045  .debug_loc:00002b5d .LLST183
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54059  .debug_loc:00002b7e .LLST184
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56281  .debug_str:00000c0e .LASF1204
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7416   .text.UART_TxByte:00000056 .LFE109
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54071  .debug_loc:00002b9d .LLST185
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56603  .debug_str:00001216 .LASF1205
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54107  .debug_loc:00002bf0 .LLST186
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57111  .debug_str:00001bed .LASF1206
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54125  .debug_loc:00002c1c .LLST187
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7403   .text.UART_TxByte:00000050 .LVL556
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56259  .debug_str:00000baf .LASF1207
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7549   .text.ADC_ConfigurePinAsChannel:000000ee .LFE110
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55839  .debug_str:00000380 .LASF1208
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7676   .text.ADC_DeConfigurePinAsChannel:000000f4 .LFE111
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56533  .debug_str:00001058 .LASF1209
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7723   .text.ADC_GetChannel:0000002f .LFE112
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54157  .debug_loc:00002c6b .LLST188
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57025  .debug_str:00001a22 .LASF1210
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54168  .debug_loc:00002c89 .LLST189
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57713  .debug_str:000028e7 .LASF1211
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54176  .debug_loc:00002c9d .LLST190
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57759  .debug_str:000029fa .LASF1212
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7776   .text.ADC_StartConvertionOnChannel:00000064 .LFE113
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55991  .debug_str:0000062c .LASF1213
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56077  .debug_str:000007e1 .LASF1214
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7799   .text.ADC_Init:0000002b .LFE114
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55969  .debug_str:000005b8 .LASF1215
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7815   .text.ADC_DeInit:0000001a .LFE115
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57795  .debug_str:00002ab6 .LASF1216
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7927   .text.ADC_GetConvertedValueOnChannel:00000067 .LFE116
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54189  .debug_loc:00002cbd .LLST191
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54203  .debug_loc:00002cde .LLST192
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56899  .debug_str:000017b1 .LASF1217
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7945   .text.DMA_ClockGate:0000001a .LFE117
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57737  .debug_str:0000295a .LASF1218
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7992   .text.DMA_SetDevice:00000038 .LFE118
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57367  .debug_str:00002137 .LASF1219
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56023  .debug_str:000006ea .LASF1220
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8005   .text.DMA_GetDevice:00000003 .LFE119
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54291  .debug_loc:00002db9 .LLST193
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57315  .debug_str:00002002 .LASF1221
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8046   .text.DMA_SetSAR:0000002b .LFE120
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56869  .debug_str:0000172b .LASF1222
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55795  .debug_str:0000029d .LASF1223
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8096   .text.DMA_GetSAR:00000035 .LFE121
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54305  .debug_loc:00002dda .LLST194
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8091   .text.DMA_GetSAR:00000032 .LVL592
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55735  .debug_str:00000154 .LASF1224
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8142   .text.DMA_SetDAR:00000033 .LFE122
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54319  .debug_loc:00002dfb .LLST195
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54333  .debug_loc:00002e1c .LLST196
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8141   .text.DMA_SetDAR:00000033 .LVL595
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57575  .debug_str:00002608 .LASF1225
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8192   .text.DMA_GetDAR:00000036 .LFE123
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54347  .debug_loc:00002e3d .LLST197
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8187   .text.DMA_GetDAR:00000033 .LVL598
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55713  .debug_str:000000cd .LASF1226
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8255   .text.DMA_SetBCR:0000004f .LFE124
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54361  .debug_loc:00002e5e .LLST198
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57121  .debug_str:00001c3d .LASF1227
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54375  .debug_loc:00002e7f .LLST199
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8254   .text.DMA_SetBCR:0000004f .LVL605
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56779  .debug_str:00001574 .LASF1228
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8305   .text.DMA_GetBCR:00000036 .LFE125
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54411  .debug_loc:00002ed2 .LLST200
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8300   .text.DMA_GetBCR:00000033 .LVL608
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57939  .debug_str:00002e79 .LASF1229
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8390   .text.DMA_EnableInt:00000098 .LFE126
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54425  .debug_loc:00002ef3 .LLST201
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8389   .text.DMA_EnableInt:00000098 .LVL611
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57417  .debug_str:00002288 .LASF1230
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8466   .text.DMA_DisableInt:00000075 .LFE127
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54443  .debug_loc:00002f1f .LLST202
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54456  .debug_loc:00002f3f .LLST203
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8449   .text.DMA_DisableInt:00000058 .LVL614
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56841  .debug_str:000016be .LASF1231
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8507   .text.DMA_SetStartOn:0000002c .LFE128
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57351  .debug_str:000020e7 .LASF1232
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8553   .text.DMA_SetStartOff:00000033 .LFE129
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54483  .debug_loc:00002f85 .LLST204
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8552   .text.DMA_SetStartOff:00000033 .LVL621
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56215  .debug_str:00000a92 .LASF1233
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8602   .text.DMA_IsChannelBusy:00000031 .LFE130
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54497  .debug_loc:00002fa6 .LLST205
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8597   .text.DMA_IsChannelBusy:0000002e .LVL624
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57797  .debug_str:00002ad5 .LASF1234
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8651   .text.DMA_IsTransDone:00000031 .LFE131
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54511  .debug_loc:00002fc7 .LLST206
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8646   .text.DMA_IsTransDone:0000002e .LVL627
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58255  .debug_str:000034c2 .LASF1235
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8698   .text.DMA_ClearTransDone:00000036 .LFE132
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54525  .debug_loc:00002fe8 .LLST207
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8697   .text.DMA_ClearTransDone:00000036 .LVL630
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58017  .debug_str:0000303c .LASF1236
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8747   .text.IsDMAChannelTrasferEnabled:00000030 .LFE133
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54543  .debug_loc:00003014 .LLST208
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8742   .text.IsDMAChannelTrasferEnabled:0000002d .LVL633
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55689  .debug_str:00000016 .LASF1237
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8796   .text.DMA_IsPending:00000031 .LFE134
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54557  .debug_loc:00003035 .LLST209
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8791   .text.DMA_IsPending:0000002e .LVL636
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56339  .debug_str:00000cf2 .LASF1238
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8809   .text.DMA_IsDestinationError:00000003 .LFE135
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54571  .debug_loc:00003056 .LLST210
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57619  .debug_str:000026e5 .LASF1239
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8822   .text.DMA_IsSourceError:00000003 .LFE136
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54585  .debug_loc:00003077 .LLST211
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57897  .debug_str:00002dcd .LASF1240
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8835   .text.DMA_IsConfigError:00000003 .LFE137
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54599  .debug_loc:00003098 .LLST212
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55967  .debug_str:000005a0 .LASF1241
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8883   .text.DMA_PeripheralRequestOn:00000038 .LFE138
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54613  .debug_loc:000030b9 .LLST213
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8882   .text.DMA_PeripheralRequestOn:00000038 .LVL645
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55911  .debug_str:000004c5 .LASF1242
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8931   .text.DMA_PeripheralRequestOff:0000003a .LFE139
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54627  .debug_loc:000030da .LLST214
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8930   .text.DMA_PeripheralRequestOff:0000003a .LVL648
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57495  .debug_str:00002467 .LASF1243
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8979   .text.DMA_ContinuousTransfer:00000038 .LFE140
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54641  .debug_loc:000030fb .LLST215
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8978   .text.DMA_ContinuousTransfer:00000038 .LVL651
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56719  .debug_str:00001446 .LASF1244
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9027   .text.DMA_SingleTransfer:0000003a .LFE141
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54655  .debug_loc:0000311c .LLST216
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9026   .text.DMA_SingleTransfer:0000003a .LVL654
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57869  .debug_str:00002d14 .LASF1245
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9075   .text.DMA_BlockTransfer:0000003a .LFE142
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54669  .debug_loc:0000313d .LLST217
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9074   .text.DMA_BlockTransfer:0000003a .LVL657
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56433  .debug_str:00000e99 .LASF1246
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9085   .text.DMA_SetDestinationSizeToByte:00000001 .LFE143
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56787  .debug_str:00001595 .LASF1247
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9095   .text.DMA_SetDestinationSizeToWord:00000001 .LFE144
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57533  .debug_str:00002526 .LASF1248
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9105   .text.DMA_SetDestinationSizeToLong:00000001 .LFE145
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56443  .debug_str:00000ecb .LASF1249
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9115   .text.DMA_SetSourceSizeToLong:00000001 .LFE146
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55765  .debug_str:000001cf .LASF1250
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9125   .text.DMA_SetSourceSizeToByte:00000001 .LFE147
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56165  .debug_str:00000996 .LASF1251
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9135   .text.DMA_SetSourceSizeToWord:00000001 .LFE148
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56043  .debug_str:00000740 .LASF1252
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9183   .text.DMA_EnableSourceIncrement:0000003a .LFE149
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54683  .debug_loc:0000315e .LLST218
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9182   .text.DMA_EnableSourceIncrement:0000003a .LVL666
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57431  .debug_str:000022da .LASF1253
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9231   .text.DMA_DisableSourceIncrement:0000003a .LFE150
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54697  .debug_loc:0000317f .LLST219
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9230   .text.DMA_DisableSourceIncrement:0000003a .LVL669
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56083  .debug_str:000007fd .LASF1254
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9279   .text.DMA_EnableDestinationIncrement:00000038 .LFE151
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54711  .debug_loc:000031a0 .LLST220
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9278   .text.DMA_EnableDestinationIncrement:00000038 .LVL672
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58219  .debug_str:00003409 .LASF1255
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9327   .text.DMA_DisableDestinationIncrement:00000038 .LFE152
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54725  .debug_loc:000031c1 .LLST221
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9326   .text.DMA_DisableDestinationIncrement:00000038 .LVL675
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57267  .debug_str:00001f4e .LASF1256
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9337   .text.DMA_EnableAutoAlign:00000001 .LFE153
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56183  .debug_str:000009dd .LASF1257
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9347   .text.DMA_DisableAutoAlign:00000001 .LFE154
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55783  .debug_str:0000024a .LASF1258
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9357   .text.DMA_SetSourceAddressModulo:00000001 .LFE155
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57891  .debug_str:00002da5 .LASF1259
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57115  .debug_str:00001c0d .LASF1260
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9367   .text.DMA_SetDestinationAddressModulo:00000001 .LFE156
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56549  .debug_str:000010ab .LASF1261
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9415   .text.DMA_SetDisableRequestOn:0000003a .LFE157
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54739  .debug_loc:000031e2 .LLST222
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9414   .text.DMA_SetDisableRequestOn:0000003a .LVL682
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56915  .debug_str:000017ef .LASF1262
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9463   .text.DMA_SetEnableRequestOn:00000038 .LFE158
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54753  .debug_loc:00003203 .LLST223
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9462   .text.DMA_SetEnableRequestOn:00000038 .LVL685
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56551  .debug_str:000010c3 .LASF1263
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9526   .text.DMA_LinkChannelControlMode:00000067 .LFE159
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54767  .debug_loc:00003224 .LLST224
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54781  .debug_loc:00003245 .LLST225
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9525   .text.DMA_LinkChannelControlMode:00000067 .LVL688
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57883  .debug_str:00002d73 .LASF1264
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9536   .text.DMA_LinkChannel1Mode:00000001 .LFE160
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56089  .debug_str:00000826 .LASF1265
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9546   .text.DMA_LinkChannel2Mode:00000001 .LFE161
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57331  .debug_str:0000206f .LASF1266
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9556   .text.DMA_ControlDefault:00000001 .LFE162
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58089  .debug_str:000031ad .LASF1267
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9566   .text.DMA_SetDisableRequestOff:00000001 .LFE163
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58225  .debug_str:0000344d .LASF1268
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9623   .text.DMA_GetTrasferMode:0000003d .LFE164
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54795  .debug_loc:00003266 .LLST226
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55979  .debug_str:000005fc .LASF1269
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54809  .debug_loc:00003287 .LLST227
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9614   .text.DMA_GetTrasferMode:00000036 .LVL697
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56729  .debug_str:00001475 .LASF1270
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9669   .text.DMA_SetNumberOfRepetion:00000033 .LFE165
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54832  .debug_loc:000032bf .LLST228
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54846  .debug_loc:000032e0 .LLST229
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9668   .text.DMA_SetNumberOfRepetion:00000033 .LVL701
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58119  .debug_str:0000326a .LASF1271
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9746   .text.DMA_SetRepeatArea:00000078 .LFE166
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54860  .debug_loc:00003301 .LLST230
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54874  .debug_loc:00003322 .LLST231
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9739   .text.DMA_SetRepeatArea:00000070 .LVL704
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57463  .debug_str:00002392 .LASF1272
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9765   .text.SPI_ClkEnable:0000001a .LFE167
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56597  .debug_str:00001201 .LASF1273
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9792   .text.SPI_Enable:00000024 .LFE168
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57057  .debug_str:00001abb .LASF1274
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9858   .text.SPI_MasterEnable:0000009f .LFE169
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57325  .debug_str:0000204c .LASF1275
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9874   .text.SPI_SetClockPolarity:00000013 .LFE170
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56537  .debug_str:00001074 .LASF1276
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56395  .debug_str:00000dbe .LASF1277
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9890   .text.SPI_SetClockPhase:00000013 .LFE171
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56889  .debug_str:00001771 .LASF1278
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9922   .text.SPI_ResetStatus:00000023 .LFE172
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54899  .debug_loc:0000335c .LLST232
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55877  .debug_str:00000411 .LASF1279
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9944   .text.SPI_SetBaudRate:0000001e .LFE173
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56261  .debug_str:00000bc9 .LASF1280
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54907  .debug_loc:00003370 .LLST233
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56229  .debug_str:00000ad8 .LASF1281
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9960   .text.SPI_SetShiftDir:00000013 .LFE174
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58181  .debug_str:00003378 .LASF1282
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57171  .debug_str:00001cdf .LASF1283
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9982   .text.SPI_WriteData:00000018 .LFE175
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57721  .debug_str:00002914 .LASF1284
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57787  .debug_str:00002a97 .LASF1285
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9999   .text.SPI_ReadData:0000000b .LFE176
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54921  .debug_loc:00003391 .LLST234
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54935  .debug_loc:000033b2 .LLST235
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55887  .debug_str:00000439 .LASF1286
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10031  .text.SPI_IntEnable:00000031 .LFE177
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57699  .debug_str:0000289f .LASF1287
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10046  .text.SPI_GetStatus:00000009 .LFE178
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54942  .debug_loc:000033c5 .LLST236
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57693  .debug_str:00002857 .LASF1288
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55975  .debug_str:000005e7 .LASF1289
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57421  .debug_str:000022a0 .LASF1290
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57743  .debug_str:00002975 .LASF1291
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57217  .debug_str:00001e30 .LASF1292
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56269  .debug_str:00000be4 .LASF1293
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:55705  .debug_str:0000006a .LASF1294
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57249  .debug_str:00001eb1 .LASF1295
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:58261  .debug_str:000034e8 .LASF1296
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:56191  .debug_str:00000a21 .LASF1297
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57003  .debug_str:000019a5 .LASF1298
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:57811  .debug_str:00002b36 .LASF1302
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:12     .text.TMR_GetMultiBmp:00000002 .LCFI0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10     .text.TMR_GetMultiBmp:00000000 .LVL0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:59     .text.TMR_GetMultiBmp:00000030 .LVL9
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:13     .text.TMR_GetMultiBmp:00000002 .LVL1
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:20     .text.TMR_GetMultiBmp:0000000a .LVL2
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:52     .text.TMR_GetMultiBmp:00000028 .LVL7
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:54     .text.TMR_GetMultiBmp:0000002a .LVL8
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:47     .text.TMR_GetMultiBmp:00000026 .LVL6
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:35     .text.TMR_GetMultiBmp:0000001d .LVL3
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:37     .text.TMR_GetMultiBmp:0000001e .LVL4
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:42     .text.TMR_GetMultiBmp:00000023 .LVL5
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:68     .text.GetInternalHWClearSourceValue:00000000 .LVL10
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:91     .text.GetInternalHWClearSourceValue:00000019 .LVL11
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:106    .text.GetInternalHWClearSourceValue:00000032 .LVL12
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:109    .text.GetInternalHWClearSourceValue:00000034 .LVL13
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:118    .text.GetInternalHWClearSourceValue:00000040 .LVL14
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:121    .text.GetInternalHWClearSourceValue:00000042 .LVL15
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:134    .text.GetInternalHWClearSourceValue:00000055 .LVL17
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:139    .text.GetInternalHWClearSourceValue:00000058 .LVL18
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:149    .text.LVDR_SetUp:00000000 .LVL19
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:153    .text.LVDR_SetUp:00000004 .LVL20
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:156    .text.LVDR_SetUp:00000006 .LVL21
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:168    .text.LVDR_SetUp:00000015 .LVL22
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:191    .text.LVDR_SetUp:00000046 .LVL24
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:203    .text.LVDR_SetUp:0000005e .LVL25
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:205    .text.LVDR_SetUp:00000062 .LVL26
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:229    .text.LVDW_SetTrip:00000000 .LVL27
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:233    .text.LVDW_SetTrip:00000004 .LVL28
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:235    .text.LVDW_SetTrip:00000006 .LVL29
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:254    .text.LVDW_SetTrip:0000001e .LVL30
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:270    .text.LVDW_SetTrip:00000045 .LVL31
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:288    .text.LVDW_SetTrip:00000067 .LVL32
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:290    .text.LVDW_SetTrip:0000006b .LVL33
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:481    .text.WDT_IsJustBeforePermittedWindow:00000008 .LVL34
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:486    .text.WDT_IsJustBeforePermittedWindow:0000000c .LVL35
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:602    .text.SYS_GetResetSrcVal:00000000 .LVL38
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:619    .text.SYS_GetResetSrcVal:0000001e .LVL42
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:623    .text.SYS_GetResetSrcVal:00000022 .LVL43
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:628    .text.SYS_GetResetSrcVal:00000028 .LVL44
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:633    .text.SYS_GetResetSrcVal:0000002c .LVL45
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:612    .text.SYS_GetResetSrcVal:00000010 .LVL41
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:643    .text.SYS_PowerOnReset:00000000 .LVL46
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:646    .text.SYS_PowerOnReset:00000002 .LVL47
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:656    .text.SYS_WatchdogReset:00000000 .LVL48
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:659    .text.SYS_WatchdogReset:00000002 .LVL49
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:671    .text.SYS_ExternalPinReset:00000000 .LVL50
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:675    .text.SYS_ExternalPinReset:00000005 .LVL51
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:685    .text.SYS_LossOfClockReset:00000000 .LVL52
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:688    .text.SYS_LossOfClockReset:00000002 .LVL53
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:698    .text.SYS_IllegalOpcodeReset:00000000 .LVL54
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:701    .text.SYS_IllegalOpcodeReset:00000002 .LVL55
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:711    .text.SYS_LowVoltageReset:00000000 .LVL56
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:714    .text.SYS_LowVoltageReset:00000002 .LVL57
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:726    .text.SYS_DebuggerReset:00000000 .LVL58
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:729    .text.SYS_DebuggerReset:00000002 .LVL59
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:739    .text.SYS_IllegalAddressReset:00000000 .LVL60
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:742    .text.SYS_IllegalAddressReset:00000002 .LVL61
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:752    .text.SYS_UserReset:00000000 .LVL62
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:755    .text.SYS_UserReset:00000002 .LVL63
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:776    .text.CLK_SetInternalClockSync:00000000 .LVL64
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:779    .text.CLK_SetInternalClockSync:00000002 .LVL65
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:789    .text.CLK_SetExternalClockSync:00000000 .LVL66
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:792    .text.CLK_SetExternalClockSync:00000002 .LVL67
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:812    .text.CLK_SetFLLExternalClockSync:00000000 .LVL69
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:815    .text.CLK_SetFLLExternalClockSync:00000002 .LVL70
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:825    .text.CLK_SetFLLInternalClockSync:00000000 .LVL71
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:828    .text.CLK_SetFLLInternalClockSync:00000002 .LVL72
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:839    .text.DeInitGPIO:00000002 .LCFI1
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:900    .text.DIO_IsNotDummyIO:00000000 .LVL73
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:907    .text.DIO_IsNotDummyIO:00000007 .LVL74
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:911    .text.DIO_IsNotDummyIO:0000000d .LVL75
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:915    .text.DIO_IsNotDummyIO:0000000f .LVL76
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:926    .text.DIO_CheckDigitalFilterPin:00000000 .LVL77
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:935    .text.DIO_CheckDigitalFilterPin:0000000c .LVL79
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:976    .text.DIO_CheckDigitalFilterPin:0000003c .LVL82
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:984    .text.DIO_CheckDigitalFilterPin:00000049 .LVL83
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:991    .text.DIO_CheckDigitalFilterPin:0000004c .LVL84
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:929    .text.DIO_CheckDigitalFilterPin:00000002 .LVL78
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:960    .text.DIO_CheckDigitalFilterPin:0000002a .LVL80
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:966    .text.DIO_CheckDigitalFilterPin:00000032 .LVL81
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1004   .text.DIO_IsDigitalFilterAvailable:00000000 .LVL85
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1013   .text.DIO_IsDigitalFilterAvailable:0000000c .LVL87
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1025   .text.DIO_DigitalFilterEnable:00000002 .LCFI2
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1023   .text.DIO_DigitalFilterEnable:00000000 .LVL88
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1038   .text.DIO_DigitalFilterEnable:0000001d .LVL90
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1111   .text.DIO_DigitalFilterEnable:0000008a .LVL91
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1115   .text.DIO_DigitalFilterEnable:00000092 .LVL92
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1119   .text.DIO_DigitalFilterEnable:00000097 .LVL93
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1123   .text.DIO_DigitalFilterEnable:0000009f .LVL94
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1127   .text.DIO_DigitalFilterEnable:000000a4 .LVL95
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1131   .text.DIO_DigitalFilterEnable:000000ac .LVL96
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1135   .text.DIO_DigitalFilterEnable:000000b1 .LVL97
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1141   .text.DIO_DigitalFilterEnable:000000bc .LVL98
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1156   .text.DIO_DigitalFilterClkFrequencySet:00000002 .LCFI3
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1154   .text.DIO_DigitalFilterClkFrequencySet:00000000 .LVL99
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1178   .text.DIO_DigitalFilterClkFrequencySet:0000002c .LVL102
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1181   .text.DIO_DigitalFilterClkFrequencySet:00000031 .LVL103
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1193   .text.DIO_DigitalFilterClkFrequencySet:00000041 .LVL104
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1199   .text.DIO_DigitalFilterClkFrequencySet:00000046 .LVL105
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1158   .text.DIO_DigitalFilterClkFrequencySet:00000004 .LVL100
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1226   .text.DIO_DigitalFilterClkFrequencySet:00000063 .LVL106
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1229   .text.DIO_DigitalFilterClkFrequencySet:0000006a .LVL107
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1233   .text.DIO_DigitalFilterClkFrequencySet:0000006c .LVL108
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1242   .text.DIO_DigitalFilterClkFrequencySet:00000081 .LVL109
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1246   .text.DIO_DigitalFilterClkFrequencySet:00000083 .LVL110
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1257   .text.DIO_DigitalFilterClkFrequencySet:00000095 .LVL111
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1261   .text.DIO_DigitalFilterClkFrequencySet:00000097 .LVL112
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1270   .text.DIO_DigitalFilterClkFrequencySet:000000ab .LVL113
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1274   .text.DIO_DigitalFilterClkFrequencySet:000000ad .LVL114
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1283   .text.DIO_DigitalFilterClkFrequencySet:000000c1 .LVL115
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1288   .text.DIO_DigitalFilterClkFrequencySet:000000c8 .LVL116
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1292   .text.DIO_DigitalFilterClkFrequencySet:000000d1 .LVL117
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1297   .text.DIO_DigitalFilterClkFrequencySet:000000d8 .LVL118
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1302   .text.DIO_DigitalFilterClkFrequencySet:000000e3 .LVL119
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1307   .text.DIO_DigitalFilterClkFrequencySet:000000ea .LVL120
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1312   .text.DIO_DigitalFilterClkFrequencySet:000000f6 .LVL121
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1317   .text.DIO_DigitalFilterClkFrequencySet:000000fd .LVL122
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1337   .text.DIO_DigitalFilterClkFrequencyGet:00000000 .LVL123
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1347   .text.DIO_DigitalFilterClkFrequencyGet:00000010 .LVL125
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1428   .text.DIO_DigitalFilterClkFrequencyGet:0000008d .LVL127
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1432   .text.DIO_DigitalFilterClkFrequencyGet:0000008f .LVL128
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1425   .text.DIO_DigitalFilterClkFrequencyGet:0000008c .LVL126
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1437   .text.DIO_DigitalFilterClkFrequencyGet:00000092 .LVL129
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1443   .text.DIO_DigitalFilterClkFrequencyGet:00000095 .LVL130
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1448   .text.DIO_DigitalFilterClkFrequencyGet:0000009d .LVL131
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1459   .text.DIO_DigitalFilterDisable:00000000 .LVL132
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1469   .text.DIO_DigitalFilterDisable:00000010 .LVL134
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1559   .text.DIO_IsDigitalFilterEnabled:00000000 .LVL135
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1604   .text.DIO_IsDigitalFilterEnabled:0000003a .LVL138
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1614   .text.DIO_IsDigitalFilterEnabled:00000045 .LVL140
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1621   .text.DIO_IsDigitalFilterEnabled:0000004c .LVL141
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1623   .text.DIO_IsDigitalFilterEnabled:0000004e .LVL142
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1628   .text.DIO_IsDigitalFilterEnabled:00000056 .LVL143
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1630   .text.DIO_IsDigitalFilterEnabled:00000058 .LVL144
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1635   .text.DIO_IsDigitalFilterEnabled:00000060 .LVL145
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1637   .text.DIO_IsDigitalFilterEnabled:00000062 .LVL146
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1642   .text.DIO_IsDigitalFilterEnabled:00000067 .LVL148
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1647   .text.DIO_IsDigitalFilterEnabled:0000006f .LVL149
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1652   .text.DIO_IsDigitalFilterEnabled:00000074 .LVL151
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1657   .text.DIO_IsDigitalFilterEnabled:0000007c .LVL152
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1662   .text.DIO_IsDigitalFilterEnabled:00000081 .LVL154
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1667   .text.DIO_IsDigitalFilterEnabled:0000008a .LVL155
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1672   .text.DIO_IsDigitalFilterEnabled:0000008f .LVL157
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1677   .text.DIO_IsDigitalFilterEnabled:00000097 .LVL158
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1681   .text.DIO_IsDigitalFilterEnabled:00000099 .LVL159
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1572   .text.DIO_IsDigitalFilterEnabled:0000001b .LVL137
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1641   .text.DIO_IsDigitalFilterEnabled:00000067 .LVL147
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1651   .text.DIO_IsDigitalFilterEnabled:00000074 .LVL150
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1661   .text.DIO_IsDigitalFilterEnabled:00000081 .LVL153
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1671   .text.DIO_IsDigitalFilterEnabled:0000008f .LVL156
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1611   .text.DIO_IsDigitalFilterEnabled:00000043 .LVL139
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1695   .text.MapClearResourceValue:00000000 .LVL160
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1717   .text.MapClearResourceValue:00000013 .LVL161
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1720   .text.MapClearResourceValue:00000015 .LVL162
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1725   .text.MapClearResourceValue:00000019 .LVL163
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1731   .text.MapClearResourceValue:0000001d .LVL164
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1746   .text.MapClearResourceValue:00000029 .LVL166
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1751   .text.MapClearResourceValue:0000002c .LVL167
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1761   .text.MapClearResourceId:00000000 .LVL168
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1786   .text.MapClearResourceId:00000013 .LVL170
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1783   .text.MapClearResourceId:00000011 .LVL169
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1789   .text.MapClearResourceId:00000015 .LVL171
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1795   .text.MapClearResourceId:00000019 .LVL172
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1801   .text.MapClearResourceId:0000001d .LVL173
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1816   .text.MapClearResourceId:00000029 .LVL175
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1821   .text.MapClearResourceId:0000002c .LVL176
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1831   .text.TMR_GetClearSourceId:00000000 .LVL177
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1846   .text.Threshold2SetUpUnsupported:00000000 .LVL180
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1849   .text.Threshold2SetUpUnsupported:00000002 .LVL181
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1859   .text.TMR_CheckClearSourceIdFailed:00000000 .LVL182
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1891   .text.TMR_CheckClearSourceIdFailed:0000001f .LVL183
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1893   .text.TMR_CheckClearSourceIdFailed:00000020 .LVL184
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1896   .text.TMR_CheckClearSourceIdFailed:00000022 .LVL185
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1911   .text.TMR_GetClearSourceCh:00000000 .LVL186
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1970   .text.TMR_GetClearSourceCh:00000054 .LVL196
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1938   .text.TMR_GetClearSourceCh:00000021 .LVL187
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1940   .text.TMR_GetClearSourceCh:00000023 .LVL188
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1945   .text.TMR_GetClearSourceCh:0000002d .LVL189
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1947   .text.TMR_GetClearSourceCh:0000002f .LVL190
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1952   .text.TMR_GetClearSourceCh:00000039 .LVL191
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1954   .text.TMR_GetClearSourceCh:0000003b .LVL192
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1959   .text.TMR_GetClearSourceCh:00000045 .LVL193
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1961   .text.TMR_GetClearSourceCh:00000047 .LVL194
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1966   .text.TMR_GetClearSourceCh:00000051 .LVL195
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1990   .text.TMR_ClockGate:00000002 .LCFI4
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1988   .text.TMR_ClockGate:00000000 .LVL197
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:1998   .text.TMR_ClockGate:0000000d .LVL198
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2032   .text.TMR_SetPrescaler:00000000 .LVL200
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2104   .text.TMR_SetPrescaler:0000006b .LVL203
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2041   .text.TMR_SetPrescaler:00000011 .LVL201
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2100   .text.TMR_SetPrescaler:00000068 .LVL202
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2115   .text.TMR_GetPrescalerDiv:00000000 .LVL205
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2148   .text.TMR_GetPrescalerDiv:0000002d .LVL206
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2151   .text.TMR_GetPrescalerDiv:0000002e .LVL207
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2174   .text.TMR_GetPrescalerDiv:00000055 .LVL209
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2185   .text.TMR_GetTickResolution:00000000 .LVL210
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2193   .text.TMR_GetTickResolution:00000013 .LVL212
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2195   .text.TMR_GetTickResolution:00000016 .LVL213
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2205   .text.TMR_SetSetPrescaleForTickResolution:00000000 .LVL214
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2208   .text.TMR_SetSetPrescaleForTickResolution:00000002 .LVL215
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2218   .text.TMR_SetPrescalerDfltValue:00000000 .LVL216
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2280   .text.TMR_SetPrescalerDfltValue:0000005f .LVL217
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2291   .text.TMR_SetCountDir:00000000 .LVL219
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2298   .text.TMR_SetCountDir:00000008 .LVL220
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2323   .text.TMR_SetModulo:00000002 .LCFI5
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2595   .text.TMR_StopClockSource:00000002 .LCFI6
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2593   .text.TMR_StopClockSource:00000000 .LVL223
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2603   .text.TMR_StopClockSource:0000000d .LVL224
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2607   .text.TMR_StopClockSource:00000012 .LVL226
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2612   .text.TMR_StopClockSource:00000016 .LVL227
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2624   .text.TMR_StopClockSource:00000022 .LVL229
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2640   .text.TMR_EnableTI:00000002 .LCFI7
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:2849   .text.TMR_DisableTI:00000002 .LCFI8
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3021   .text.TMR_ClearTOF:00000002 .LCFI9
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3019   .text.TMR_ClearTOF:00000000 .LVL230
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3045   .text.TMR_ClearTOF:0000001d .LVL231
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3047   .text.TMR_ClearTOF:0000001f .LVL232
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3058   .text.TMR_ClearTOF:0000002b .LVL233
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3060   .text.TMR_ClearTOF:0000002d .LVL234
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3071   .text.TMR_ClearTOF:00000039 .LVL235
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3073   .text.TMR_ClearTOF:0000003b .LVL236
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3077   .text.TMR_ClearTOF:0000003f .LVL237
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3079   .text.TMR_ClearTOF:00000040 .LVL238
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3083   .text.TMR_ClearTOF:00000044 .LVL239
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3102   .text.TMR_GetTOF:00000002 .LCFI10
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3100   .text.TMR_GetTOF:00000000 .LVL240
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3112   .text.TMR_GetTOF:00000014 .LVL242
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3116   .text.TMR_GetTOF:0000001e .LVL243
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3132   .text.TMR_GetTOF:00000023 .LVL244
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3134   .text.TMR_GetTOF:00000025 .LVL245
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3145   .text.TMR_GetTOF:00000030 .LVL246
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3147   .text.TMR_GetTOF:00000032 .LVL247
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3158   .text.TMR_GetTOF:0000003d .LVL248
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3160   .text.TMR_GetTOF:0000003f .LVL249
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3164   .text.TMR_GetTOF:00000043 .LVL250
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3166   .text.TMR_GetTOF:00000044 .LVL251
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3170   .text.TMR_GetTOF:00000048 .LVL252
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3198   .text.TMR_SetChannelInputChapture:00000000 .LVL253
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3240   .text.TMR_SetChannelInputChapture:00000017 .LVL255
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3237   .text.TMR_SetChannelInputChapture:00000015 .LVL254
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3246   .text.TMR_SetChannelInputChapture:00000020 .LVL256
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3260   .text.TMR_SetChannelInputChapture:00000036 .LVL257
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3269   .text.TMR_SetChannelInputChapture:00000042 .LVL258
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3295   .text.TMR_SetChannelInputChapture:00000063 .LVL261
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3304   .text.TMR_SetChannelInputChapture:0000006f .LVL262
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3322   .text.TMR_SetChannelInputChapture:00000085 .LVL264
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3331   .text.TMR_SetChannelInputChapture:00000090 .LVL265
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3348   .text.TMR_SetChannelInputChapture:000000a6 .LVL267
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3365   .text.TMR_SetChannelInputChapture:000000bc .LVL269
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3374   .text.TMR_SetChannelInputChapture:000000c7 .LVL270
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3383   .text.TMR_SetChannelInputChapture:000000d2 .LVL271
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3396   .text.TMR_SetChannelInputChapture:000000e2 .LVL273
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3426   .text.TMR_SetChannelInputChapture:00000118 .LVL274
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3434   .text.TMR_SetChannelInputChapture:00000121 .LVL275
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3442   .text.TMR_SetChannelInputChapture:0000012e .LVL276
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3450   .text.TMR_SetChannelInputChapture:00000137 .LVL277
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3457   .text.TMR_SetChannelInputChapture:00000142 .LVL278
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3278   .text.TMR_SetChannelInputChapture:0000004d .LVL259
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3286   .text.TMR_SetChannelInputChapture:00000056 .LVL260
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3313   .text.TMR_SetChannelInputChapture:0000007a .LVL263
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3339   .text.TMR_SetChannelInputChapture:00000099 .LVL266
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3356   .text.TMR_SetChannelInputChapture:000000af .LVL268
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3467   .text.TMR_SetChannelOutputCompare:00000000 .LVL279
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3472   .text.TMR_SetChannelOutputCompare:0000000b .LVL280
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3502   .text.TMR_SetChannelPWM:00000000 .LVL281
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3895   .text.TMR_SetChannelPWM:000002fb .LVL282
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3906   .text.TMR_ToggleChannelEdgeMode:00000000 .LVL284
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3964   .text.TMR_ToggleChannelEdgeMode:0000004c .LVL287
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3909   .text.TMR_ToggleChannelEdgeMode:00000002 .LVL285
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3913   .text.TMR_ToggleChannelEdgeMode:0000000b .LVL286
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3975   .text.TMR_SetTimeOn:00000000 .LVL289
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3990   .text.TMR_SetTimeOn:00000014 .LVL291
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:3980   .text.TMR_SetTimeOn:0000000b .LVL290
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4003   .text.TMR_GetChValue:00000002 .LCFI11
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4001   .text.TMR_GetChValue:00000000 .LVL293
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4015   .text.TMR_GetChValue:00000012 .LVL296
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4004   .text.TMR_GetChValue:00000002 .LVL294
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4017   .text.TMR_GetChValue:00000013 .LVL297
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4025   .text.TMR_GetChValue:0000001c .LVL299
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4041   .text.TMR_GetTimeOn:00000002 .LCFI12
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4039   .text.TMR_GetTimeOn:00000000 .LVL300
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4057   .text.TMR_SetChannelPulses:00000000 .LVL302
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4182   .text.TMR_SetChannelPulses:00000080 .LVL303
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4200   .text.TMR_ClearChannelPulses:00000000 .LVL305
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4325   .text.TMR_ClearChannelPulses:00000080 .LVL306
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4343   .text.TMR_SetChannelEdgeMode:00000000 .LVL308
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4412   .text.TMR_SetChannelEdgeMode:00000058 .LVL321
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4356   .text.TMR_SetChannelEdgeMode:00000010 .LVL309
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4358   .text.TMR_SetChannelEdgeMode:00000012 .LVL310
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4363   .text.TMR_SetChannelEdgeMode:00000016 .LVL311
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4366   .text.TMR_SetChannelEdgeMode:0000001b .LVL312
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4371   .text.TMR_SetChannelEdgeMode:0000001f .LVL313
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4375   .text.TMR_SetChannelEdgeMode:00000024 .LVL314
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4394   .text.TMR_SetChannelEdgeMode:00000047 .LVL317
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4397   .text.TMR_SetChannelEdgeMode:0000004a .LVL318
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4401   .text.TMR_SetChannelEdgeMode:0000004c .LVL319
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4408   .text.TMR_SetChannelEdgeMode:00000055 .LVL320
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4388   .text.TMR_SetChannelEdgeMode:0000003e .LVL316
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4380   .text.TMR_SetChannelEdgeMode:0000002f .LVL315
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4423   .text.TMR_GetValue:00000000 .LVL323
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4446   .text.TMR_GetValue:00000019 .LVL324
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4455   .text.TMR_GetValue:00000024 .LVL325
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4458   .text.TMR_GetValue:00000025 .LVL326
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4481   .text.TMR_GetValue:0000004c .LVL328
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4492   .text.TMR_EnableCHI:00000000 .LVL329
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4725   .text.TMR_EnableCHI:000001cc .LVL330
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4736   .text.TMR_ReadCHF:00000000 .LVL332
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4778   .text.TMR_ReadCHF:0000001d .LVL333
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4787   .text.TMR_ReadCHF:00000028 .LVL334
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4790   .text.TMR_ReadCHF:00000029 .LVL335
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4868   .text.TMR_ReadCHF:000000c0 .LVL337
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4885   .text.TMR_ClearCHF:00000009 .LCFI13
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4893   .text.TMR_ClearCHF:00000017 .LCFI14
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4898   .text.TMR_ClearCHF:0000001e .LCFI15
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4911   .text.TMR_DisableCHI:00000002 .LCFI16
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:4909   .text.TMR_DisableCHI:00000000 .LVL338
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5104   .text.TMR_DisableCHI:0000013d .LVL339
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5115   .text.TMR_DisableCHI:0000014d .LVL342
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5174   .text.TMR_SetThreshold1:00000000 .LVL343
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5186   .text.TMR_SetModuloDfltValue:00000000 .LVL345
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5190   .text.TMR_SetModuloDfltValue:00000005 .LVL346
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5203   .text.TMR_GetModulo:00000002 .LCFI17
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5201   .text.TMR_GetModulo:00000000 .LVL348
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5214   .text.TMR_GetModulo:00000017 .LVL351
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5205   .text.TMR_GetModulo:00000004 .LVL349
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5253   .text.TMR_GetModulo:00000038 .LVL352
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5256   .text.TMR_GetModulo:0000003b .LVL353
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5261   .text.TMR_GetModulo:00000043 .LVL354
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5264   .text.TMR_GetModulo:00000046 .LVL355
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5269   .text.TMR_GetModulo:0000004e .LVL356
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5272   .text.TMR_GetModulo:00000051 .LVL357
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5277   .text.TMR_GetModulo:00000059 .LVL358
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5280   .text.TMR_GetModulo:0000005c .LVL359
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5294   .text.TMR_GetModulo:00000074 .LVL360
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5297   .text.TMR_GetModulo:00000077 .LVL361
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5302   .text.TMR_GetModulo:0000007f .LVL362
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5305   .text.TMR_GetModulo:00000082 .LVL363
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5319   .text.TMR_GetModulo:00000099 .LVL364
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5322   .text.TMR_GetModulo:0000009c .LVL365
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5327   .text.TMR_GetModulo:000000a4 .LVL366
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5330   .text.TMR_GetModulo:000000a6 .LVL367
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5355   .text.TMR_GetModulo:000000bc .LVL368
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5358   .text.TMR_GetModulo:000000be .LVL369
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5363   .text.TMR_GetModulo:000000c5 .LVL370
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5366   .text.TMR_GetModulo:000000c7 .LVL371
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5371   .text.TMR_GetModulo:000000ce .LVL372
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5374   .text.TMR_GetModulo:000000d0 .LVL373
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5379   .text.TMR_GetModulo:000000d7 .LVL374
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5382   .text.TMR_GetModulo:000000d9 .LVL375
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5407   .text.TMR_GetModulo:000000ef .LVL376
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5410   .text.TMR_GetModulo:000000f1 .LVL377
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5415   .text.TMR_GetModulo:000000f8 .LVL378
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5418   .text.TMR_GetModulo:000000fa .LVL379
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5423   .text.TMR_GetModulo:00000101 .LVL380
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5426   .text.TMR_GetModulo:00000103 .LVL381
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5431   .text.TMR_GetModulo:0000010a .LVL382
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5434   .text.TMR_GetModulo:0000010c .LVL383
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5448   .text.TMR_GetModulo:00000119 .LVL386
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5444   .text.TMR_GetModulo:00000116 .LVL385
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5464   .text.TMR_GetChannelEdgeMode:00000002 .LCFI18
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5462   .text.TMR_GetChannelEdgeMode:00000000 .LVL387
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5499   .text.TMR_GetChannelEdgeMode:00000030 .LVL395
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5465   .text.TMR_GetChannelEdgeMode:00000002 .LVL388
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5517   .text.TMR_GetChannelEdgeMode:00000048 .LVL398
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5487   .text.TMR_GetChannelEdgeMode:00000028 .LVL391
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5489   .text.TMR_GetChannelEdgeMode:0000002a .LVL392
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5493   .text.TMR_GetChannelEdgeMode:0000002c .LVL393
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5495   .text.TMR_GetChannelEdgeMode:0000002d .LVL394
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5505   .text.TMR_GetChannelEdgeMode:00000036 .LVL397
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5470   .text.TMR_GetChannelEdgeMode:0000000d .LVL389
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5479   .text.TMR_GetChannelEdgeMode:0000001c .LVL390
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5529   .text.TMR_SetCounterDfltValue:00000000 .LVL399
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5581   .text.TMR_SetCounterDfltValue:00000046 .LVL400
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5592   .text.TMR_GetCounter:00000000 .LVL402
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5615   .text.TMR_GetCounter:00000019 .LVL403
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5618   .text.TMR_GetCounter:0000001b .LVL404
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5623   .text.TMR_GetCounter:00000023 .LVL405
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5626   .text.TMR_GetCounter:00000025 .LVL406
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5631   .text.TMR_GetCounter:0000002d .LVL407
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5634   .text.TMR_GetCounter:0000002f .LVL408
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5639   .text.TMR_GetCounter:00000037 .LVL409
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5642   .text.TMR_GetCounter:00000039 .LVL410
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5647   .text.TMR_GetCounter:00000041 .LVL411
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5650   .text.TMR_GetCounter:00000043 .LVL412
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5658   .text.TMR_GetCounter:0000004c .LVL414
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5672   .text.TMR_SetCounter:00000000 .LVL415
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5724   .text.TMR_SetCounter:00000041 .LVL416
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5735   .text.OutputCompareModeUnsupported:00000000 .LVL418
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5748   .text.OutputCompareModeUnsupported:00000013 .LVL419
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5762   .text.TMR_SetClockSource:00000000 .LVL420
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5769   .text.TMR_SetClockSource:00000009 .LVL421
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5799   .text.TMR_StopClockSourceMulti:00000002 .LCFI19
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5797   .text.TMR_StopClockSourceMulti:00000000 .LVL423
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5801   .text.TMR_StopClockSourceMulti:00000004 .LVL424
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5816   .text.TMR_StopClockSourceMulti:0000001b .LVL428
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5831   .text.TMR_StopClockSourceMulti:0000002a .LVL430
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5812   .text.TMR_StopClockSourceMulti:00000017 .LVL427
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5833   .text.TMR_StopClockSourceMulti:0000002c .LVL431
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5809   .text.TMR_StopClockSourceMulti:00000012 .LVL426
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5846   .text.TMR_SetClockSourceMulti:00000000 .LVL432
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5853   .text.TMR_SetClockSourceMulti:0000000d .LVL434
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5866   .text.TMR_SetChannelOutputMode:00000002 .LCFI20
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5864   .text.TMR_SetChannelOutputMode:00000000 .LVL435
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6063   .text.TMR_SetChannelOutputMode:0000010f .LVL465
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6067   .text.TMR_SetChannelOutputMode:00000115 .LVL467
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6089   .text.TMR_SetChannelOutputMode:00000130 .LVL470
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6134   .text.TMR_SetChannelOutputMode:00000173 .LVL476
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6138   .text.TMR_SetChannelOutputMode:00000175 .LVL477
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6154   .text.TMR_SetChannelOutputMode:00000191 .LVL479
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6175   .text.TMR_SetChannelOutputMode:000001a6 .LVL484
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6278   .text.TMR_SetChannelOutputMode:00000205 .LVL495
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5891   .text.TMR_SetChannelOutputMode:0000002a .LVL437
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5896   .text.TMR_SetChannelOutputMode:0000002f .LVL438
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6095   .text.TMR_SetChannelOutputMode:00000136 .LVL472
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6104   .text.TMR_SetChannelOutputMode:00000146 .LVL473
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6110   .text.TMR_SetChannelOutputMode:0000014c .LVL474
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6160   .text.TMR_SetChannelOutputMode:00000198 .LVL480
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6162   .text.TMR_SetChannelOutputMode:0000019a .LVL481
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6165   .text.TMR_SetChannelOutputMode:0000019d .LVL482
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6169   .text.TMR_SetChannelOutputMode:000001a0 .LVL483
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6187   .text.TMR_SetChannelOutputMode:000001ae .LVL485
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5902   .text.TMR_SetChannelOutputMode:00000033 .LVL439
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5911   .text.TMR_SetChannelOutputMode:00000045 .LVL440
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5917   .text.TMR_SetChannelOutputMode:00000049 .LVL441
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5921   .text.TMR_SetChannelOutputMode:00000051 .LVL442
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5927   .text.TMR_SetChannelOutputMode:00000055 .LVL443
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5931   .text.TMR_SetChannelOutputMode:0000005c .LVL444
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5937   .text.TMR_SetChannelOutputMode:00000060 .LVL445
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5949   .text.TMR_SetChannelOutputMode:00000073 .LVL447
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5955   .text.TMR_SetChannelOutputMode:00000077 .LVL448
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5961   .text.TMR_SetChannelOutputMode:00000084 .LVL449
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5967   .text.TMR_SetChannelOutputMode:00000088 .LVL450
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5971   .text.TMR_SetChannelOutputMode:0000008f .LVL451
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5977   .text.TMR_SetChannelOutputMode:00000093 .LVL452
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5981   .text.TMR_SetChannelOutputMode:0000009a .LVL453
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5992   .text.TMR_SetChannelOutputMode:000000a9 .LVL454
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5996   .text.TMR_SetChannelOutputMode:000000b1 .LVL455
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6002   .text.TMR_SetChannelOutputMode:000000b5 .LVL456
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6006   .text.TMR_SetChannelOutputMode:000000bd .LVL457
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6017   .text.TMR_SetChannelOutputMode:000000cc .LVL458
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6029   .text.TMR_SetChannelOutputMode:000000de .LVL460
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6040   .text.TMR_SetChannelOutputMode:000000ed .LVL461
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6044   .text.TMR_SetChannelOutputMode:000000f5 .LVL462
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6055   .text.TMR_SetChannelOutputMode:00000104 .LVL463
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6059   .text.TMR_SetChannelOutputMode:0000010c .LVL464
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6075   .text.TMR_SetChannelOutputMode:00000121 .LVL468
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6232   .text.TMR_SetChannelOutputMode:000001c7 .LVL486
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6243   .text.TMR_SetChannelOutputMode:000001d9 .LVL488
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6249   .text.TMR_SetChannelOutputMode:000001dd .LVL489
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6260   .text.TMR_SetChannelOutputMode:000001ef .LVL491
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6266   .text.TMR_SetChannelOutputMode:000001f3 .LVL492
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5868   .text.TMR_SetChannelOutputMode:00000004 .LVL436
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6078   .text.TMR_SetChannelOutputMode:00000123 .LVL469
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6145   .text.TMR_SetChannelOutputMode:00000181 .LVL478
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6235   .text.TMR_SetChannelOutputMode:000001cc .LVL487
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6252   .text.TMR_SetChannelOutputMode:000001e2 .LVL490
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6269   .text.TMR_SetChannelOutputMode:000001f8 .LVL493
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6276   .text.TMR_SetChannelOutputMode:00000202 .LVL494
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:5940   .text.TMR_SetChannelOutputMode:00000065 .LVL446
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6020   .text.TMR_SetChannelOutputMode:000000d1 .LVL459
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6092   .text.TMR_SetChannelOutputMode:00000134 .LVL471
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6121   .text.TMR_SetChannelOutputMode:0000015c .LVL475
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6290   .text.TMR_SetTimerDefaultMode:00000000 .LVL496
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6331   .text.TMR_SetTimerDefaultMode:00000029 .LVL501
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6310   .text.TMR_SetTimerDefaultMode:00000011 .LVL497
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6315   .text.TMR_SetTimerDefaultMode:00000018 .LVL498
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6321   .text.TMR_SetTimerDefaultMode:0000001f .LVL499
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6327   .text.TMR_SetTimerDefaultMode:00000026 .LVL500
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6341   .text.TMR_SetTimerDefaultMode:00000038 .LVL503
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6346   .text.TMR_SetTimerDefaultMode:0000003b .LVL504
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6348   .text.TMR_SetTimerDefaultMode:0000003f .LVL505
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6350   .text.TMR_SetTimerDefaultMode:00000043 .LVL506
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6352   .text.TMR_SetTimerDefaultMode:00000047 .LVL507
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6354   .text.TMR_SetTimerDefaultMode:0000004b .LVL508
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6366   .text.TMR_DeInitChannel:00000002 .LCFI21
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6364   .text.TMR_DeInitChannel:00000000 .LVL509
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6404   .text.TMR_DeInitChannel:00000032 .LVL513
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6377   .text.TMR_DeInitChannel:00000013 .LVL511
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6418   .text.TMR_GetDelta:00000002 .LCFI22
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6416   .text.TMR_GetDelta:00000000 .LVL515
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6429   .text.TMR_GetDelta:00000013 .LVL516
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6431   .text.TMR_GetDelta:00000015 .LVL517
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6435   .text.TMR_GetDelta:00000017 .LVL518
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6441   .text.TMR_GetDelta:00000020 .LVL520
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6443   .text.TMR_GetDelta:00000022 .LVL521
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6457   .text.IRQ_Init:00000000 .LVL522
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6664   .text.IRQ_Init:000001d4 .LVL523
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6685   .text.IRQ_SetEdge:00000000 .LVL524
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6789   .text.IRQ_SetEdge:000000a6 .LVL528
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6753   .text.IRQ_SetEdge:00000078 .LVL525
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6762   .text.IRQ_SetEdge:00000085 .LVL526
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6781   .text.IRQ_SetEdge:0000009d .LVL527
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6800   .text.IRQ_IntEnable:00000000 .LVL529
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6803   .text.IRQ_IntEnable:00000004 .LVL530
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6864   .text.IRQ_IntEnable:00000076 .LVL531
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6873   .text.IRQ_IntEnable:00000084 .LVL532
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6887   .text.IRQ_IntEnable:0000009a .LVL533
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:6898   .text.IRQ_DeInit:00000000 .LVL534
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7008   .text.IRQ_DeInit:000000da .LVL535
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7061   .text.IRQ_DeInit:00000118 .LVL536
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7075   .text.IRQ_DeInit:0000013e .LVL537
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7086   .text.IRQ_Acknowledge:00000000 .LVL538
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7126   .text.IRQ_Acknowledge:00000043 .LVL539
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7133   .text.IRQ_Acknowledge:0000004e .LVL540
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7160   .text.IRQ_GetEdge:00000000 .LVL541
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7217   .text.IRQ_GetEdge:00000060 .LVL542
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7222   .text.IRQ_GetEdge:00000065 .LVL543
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7230   .text.IRQ_GetEdge:00000070 .LVL544
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7242   .text.IRQ_pinIsHigh:00000000 .LVL545
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7274   .text.IRQ_pinIsHigh:00000020 .LVL546
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7333   .text.IRQ_pinIsHigh:0000007c .LVL547
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7344   .text.UART_TxByte:00000000 .LVL548
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7385   .text.UART_TxByte:0000003a .LVL552
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7397   .text.UART_TxByte:00000049 .LVL554
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7401   .text.UART_TxByte:0000004c .LVL555
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7408   .text.UART_TxByte:00000053 .LVL557
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7412   .text.UART_TxByte:00000055 .LVL558
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7373   .text.UART_TxByte:0000002e .LVL550
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7375   .text.UART_TxByte:0000002f .LVL551
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7393   .text.UART_TxByte:00000046 .LVL553
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7684   .text.ADC_GetChannel:00000000 .LVL561
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7710   .text.ADC_GetChannel:00000020 .LVL563
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7712   .text.ADC_GetChannel:00000021 .LVL564
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7720   .text.ADC_GetChannel:0000002e .LVL565
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7690   .text.ADC_GetChannel:0000000a .LVL562
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7823   .text.ADC_GetConvertedValueOnChannel:00000000 .LVL567
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7855   .text.ADC_GetConvertedValueOnChannel:00000019 .LVL568
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7858   .text.ADC_GetConvertedValueOnChannel:0000001b .LVL569
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7863   .text.ADC_GetConvertedValueOnChannel:00000023 .LVL570
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7866   .text.ADC_GetConvertedValueOnChannel:00000025 .LVL571
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7871   .text.ADC_GetConvertedValueOnChannel:0000002d .LVL572
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7874   .text.ADC_GetConvertedValueOnChannel:0000002f .LVL573
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7879   .text.ADC_GetConvertedValueOnChannel:00000037 .LVL574
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7882   .text.ADC_GetConvertedValueOnChannel:00000039 .LVL575
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7887   .text.ADC_GetConvertedValueOnChannel:00000041 .LVL576
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7890   .text.ADC_GetConvertedValueOnChannel:00000043 .LVL577
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7895   .text.ADC_GetConvertedValueOnChannel:0000004b .LVL578
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7898   .text.ADC_GetConvertedValueOnChannel:0000004d .LVL579
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7903   .text.ADC_GetConvertedValueOnChannel:00000055 .LVL580
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7906   .text.ADC_GetConvertedValueOnChannel:00000057 .LVL581
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7911   .text.ADC_GetConvertedValueOnChannel:0000005f .LVL582
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7914   .text.ADC_GetConvertedValueOnChannel:00000060 .LVL583
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7918   .text.ADC_GetConvertedValueOnChannel:00000062 .LVL584
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:7925   .text.ADC_GetConvertedValueOnChannel:00000066 .LVL585
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8000   .text.DMA_GetDevice:00000000 .LVL587
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8003   .text.DMA_GetDevice:00000002 .LVL588
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8054   .text.DMA_GetSAR:00000000 .LVL590
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8071   .text.DMA_GetSAR:00000016 .LVL591
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8104   .text.DMA_SetDAR:00000000 .LVL593
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8139   .text.DMA_SetDAR:0000002f .LVL594
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8150   .text.DMA_GetDAR:00000000 .LVL596
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8167   .text.DMA_GetDAR:00000017 .LVL597
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8200   .text.DMA_SetBCR:00000000 .LVL599
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8252   .text.DMA_SetBCR:0000004b .LVL604
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8221   .text.DMA_SetBCR:00000023 .LVL600
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8223   .text.DMA_SetBCR:00000025 .LVL601
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8242   .text.DMA_SetBCR:00000043 .LVL602
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8248   .text.DMA_SetBCR:00000048 .LVL603
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8263   .text.DMA_GetBCR:00000000 .LVL606
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8280   .text.DMA_GetBCR:00000017 .LVL607
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8313   .text.DMA_EnableInt:00000000 .LVL609
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8387   .text.DMA_EnableInt:00000094 .LVL610
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8400   .text.DMA_DisableInt:00000002 .LCFI23
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8398   .text.DMA_DisableInt:00000000 .LVL612
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8447   .text.DMA_DisableInt:00000054 .LVL613
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8454   .text.DMA_DisableInt:0000005a .LVL615
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8457   .text.DMA_DisableInt:00000063 .LVL616
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8461   .text.DMA_DisableInt:0000006d .LVL617
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8515   .text.DMA_SetStartOff:00000000 .LVL619
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8550   .text.DMA_SetStartOff:0000002f .LVL620
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8561   .text.DMA_IsChannelBusy:00000000 .LVL622
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8580   .text.DMA_IsChannelBusy:00000019 .LVL623
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8610   .text.DMA_IsTransDone:00000000 .LVL625
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8628   .text.DMA_IsTransDone:00000016 .LVL626
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8659   .text.DMA_ClearTransDone:00000000 .LVL628
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8695   .text.DMA_ClearTransDone:00000032 .LVL629
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8706   .text.IsDMAChannelTrasferEnabled:00000000 .LVL631
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8724   .text.IsDMAChannelTrasferEnabled:00000016 .LVL632
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8755   .text.DMA_IsPending:00000000 .LVL634
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8774   .text.DMA_IsPending:00000019 .LVL635
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8804   .text.DMA_IsDestinationError:00000000 .LVL637
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8807   .text.DMA_IsDestinationError:00000002 .LVL638
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8817   .text.DMA_IsSourceError:00000000 .LVL639
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8820   .text.DMA_IsSourceError:00000002 .LVL640
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8830   .text.DMA_IsConfigError:00000000 .LVL641
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8833   .text.DMA_IsConfigError:00000002 .LVL642
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8843   .text.DMA_PeripheralRequestOn:00000000 .LVL643
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8880   .text.DMA_PeripheralRequestOn:00000034 .LVL644
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8891   .text.DMA_PeripheralRequestOff:00000000 .LVL646
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8928   .text.DMA_PeripheralRequestOff:00000036 .LVL647
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8939   .text.DMA_ContinuousTransfer:00000000 .LVL649
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8976   .text.DMA_ContinuousTransfer:00000034 .LVL650
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:8987   .text.DMA_SingleTransfer:00000000 .LVL652
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9024   .text.DMA_SingleTransfer:00000036 .LVL653
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9035   .text.DMA_BlockTransfer:00000000 .LVL655
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9072   .text.DMA_BlockTransfer:00000036 .LVL656
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9143   .text.DMA_EnableSourceIncrement:00000000 .LVL664
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9180   .text.DMA_EnableSourceIncrement:00000036 .LVL665
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9191   .text.DMA_DisableSourceIncrement:00000000 .LVL667
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9228   .text.DMA_DisableSourceIncrement:00000036 .LVL668
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9239   .text.DMA_EnableDestinationIncrement:00000000 .LVL670
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9276   .text.DMA_EnableDestinationIncrement:00000034 .LVL671
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9287   .text.DMA_DisableDestinationIncrement:00000000 .LVL673
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9324   .text.DMA_DisableDestinationIncrement:00000034 .LVL674
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9375   .text.DMA_SetDisableRequestOn:00000000 .LVL680
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9412   .text.DMA_SetDisableRequestOn:00000036 .LVL681
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9423   .text.DMA_SetEnableRequestOn:00000000 .LVL683
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9460   .text.DMA_SetEnableRequestOn:00000034 .LVL684
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9471   .text.DMA_LinkChannelControlMode:00000000 .LVL686
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9523   .text.DMA_LinkChannelControlMode:00000063 .LVL687
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9574   .text.DMA_GetTrasferMode:00000000 .LVL693
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9591   .text.DMA_GetTrasferMode:00000017 .LVL694
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9593   .text.DMA_GetTrasferMode:00000019 .LVL695
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9595   .text.DMA_GetTrasferMode:0000001b .LVL696
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9617   .text.DMA_GetTrasferMode:00000039 .LVL698
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9631   .text.DMA_SetNumberOfRepetion:00000000 .LVL699
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9666   .text.DMA_SetNumberOfRepetion:0000002f .LVL700
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9677   .text.DMA_SetRepeatArea:00000000 .LVL702
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9737   .text.DMA_SetRepeatArea:0000006c .LVL703
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9743   .text.DMA_SetRepeatArea:00000074 .LVL705
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9898   .text.SPI_ResetStatus:00000000 .LVL711
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9905   .text.SPI_ResetStatus:0000000e .LVL712
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9930   .text.SPI_SetBaudRate:00000000 .LVL713
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9938   .text.SPI_SetBaudRate:0000000f .LVL714
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9990   .text.SPI_ReadData:00000000 .LVL717
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9994   .text.SPI_ReadData:00000008 .LVL718
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:9997   .text.SPI_ReadData:0000000a .LVL719
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10039  .text.SPI_GetStatus:00000000 .LVL721
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:10044  .text.SPI_GetStatus:00000008 .LVL722
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:12029  .debug_info:00000000 .Ldebug_info0
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:948    .text.DIO_CheckDigitalFilterPin:0000001b .LBB14
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:973    .text.DIO_CheckDigitalFilterPin:0000003a .LBE14
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:986    .text.DIO_CheckDigitalFilterPin:00000049 .LBB15
C:\Users\Andrea\AppData\Local\Temp\ccx3XWeB.s:992    .text.DIO_CheckDigitalFilterPin:0000004c .LBE15

UNDEFINED SYMBOLS
_LIB_Error_Fatal_Handler

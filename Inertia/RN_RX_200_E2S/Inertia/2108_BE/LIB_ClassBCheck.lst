   1                             		.file	"LIB_ClassBCheck.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.CheckRAM_Manager,"ax",@progbits
   6                             	_CheckRAM_Manager:
   7                             	.LFB14:
   8                             		.file 1 "C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck/LIB_ClassBCheck.
   1:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /*
   2:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** Copyright (c) 2004-2005, Indesit Company, EDT.
   3:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** Tutti i diritti sono riservati. All rights reserved.
   4:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** */
   5:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
   6:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /**
   7:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n	Il file contiene le funzioni per il drive del bloccoporta ad impulsi
   8:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n
   9:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \file		LIB_ClassBCheck.c
  10:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \ingroup    LIB_ClassB
  11:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \date	    20/09/2011
  12:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \version	01.00.00
  13:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \author		 Marco Sperandini
  14:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n
  15:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n
  16:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \par	History:
  17:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n
  18:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n 		01.00.00
  19:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n		20/09/2011
  20:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n		marco.sperandini
  21:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n		changes
  22:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n 			Creation
  23:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n
  24:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** */
  25:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #define MODULE_BODY_CLASSBCHECK
  26:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /* ******** */
  27:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /* Includes */
  28:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /* ******** */
  29:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
  30:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #include "Config.h"
  31:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #include "LIB_ClassBCheck.h"
  32:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #include "LIB_Error.h"
  33:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #include "LIB_Trace.h"
  34:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #include "LIB_Setting.h"
  35:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
  36:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
  37:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #if   defined(NXP_LPC12xx_1227)
  38:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #include "IEC60335_B_CPUregTests.h"
  39:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #include "IEC60335_B_RAMTestBIST.h"
  40:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #include "IEC60335_B_WDTest.h"
  41:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
  42:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #elif defined(FREESCALE_MCF51_AG128)
  43:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #include "IEC60335.h"
  44:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #include "IEC60335_B_CPUregTests.h"
  45:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #include "IEC60335_B_RAMTestBIST.h"
  46:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #include "IEC60335_B_WDTest.h"
  47:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
  48:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #elif defined(RN_RX200) || defined(RN_RX100)
  49:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	#include "IEC60335.h"
  50:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	/*#include "iwdt.h"*/
  51:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif
  52:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
  53:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #if defined(CONFIG_LIB_CLASS_B_USE_OCCRC)
  54:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #include "OCCRC_drv.h"
  55:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #define LIB_ClassBChk_CRC_calculate OCCRC_Calculate
  56:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #else
  57:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #include "SWCRC_drv.h"
  58:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #define LIB_ClassBChk_CRC_calculate SWCRC_Calculate
  59:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif
  60:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #include "OCWDT_drv.h"
  61:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #include "LIB_Reset.h"
  62:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #include "LIB_ClassBVar.h"
  63:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /* ****************** */
  64:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /* Defines and Macros */
  65:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /* ****************** */
  66:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #define CHECKRAM_AREA_NUM		(sizeof(RamAreaTestTable)/sizeof(ClassB_RamTestDescriptorType))
  67:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
  68:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #if defined(CONFIG_ERROR_HANDLING)
  69:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #define CLASSB_FATAL(err)		PLT_ERROR_FATAL(err)
  70:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #define CLASSB_WARNING(err)		PLT_ERROR_WARNING(err)
  71:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #else
  72:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #define CLASSB_FATAL(err) 		LIB_Reset_ForceColdReset()
  73:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #define CLASSB_WARNING(err)		{}
  74:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif
  75:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
  76:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** typedef struct ClassB_CheckRamTestState_s
  77:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
  78:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	uint8_t		AreaIndex;
  79:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	uint32_t	StartAddress;
  80:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	uint32_t	RemainingBytes;
  81:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }ClassB_CheckRamTestStateType;
  82:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /* **************************** */
  83:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /* Prototype of local functions */
  84:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /* **************************** */
  85:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #if defined (CONFIG_LIB_CLASS_B_FLASH)
  86:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** static void CheckFlash_SetBlock(uint8_t newBlock);
  87:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif
  88:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
  89:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #if defined(CONFIG_LIB_CLASS_B_RAM)
  90:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** static uint8_t CheckRAM_Manager(bool_t useCriticalSection);
  91:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** static void CheckRAM_Init(void);
  92:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif
  93:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
  94:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
  95:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /* ****************** */
  96:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /* Exported variables */
  97:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /* ****************** */
  98:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
  99:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 100:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /* **************** */
 101:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /* Global variables */
 102:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /* **************** */
 103:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /*
 104:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** .CLASS_B_temp must be an area with no destructive test
 105:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** */
 106:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** static volatile ClassB_CheckRamTestStateType ClassB_CheckRamTestState __attribute__ ((section (".CL
 107:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 108:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #ifdef CONFIG_LIB_CLASS_B_FLASH
 109:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** uint16_t flashChkCodeEval;
 110:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif
 111:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 112:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #ifdef CONFIG_LIB_CLASS_B_ADC
 113:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /** AD Check failure filter counter */
 114:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** uint16_t	ADC_CheckFilter;
 115:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif
 116:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 117:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /* ***************** */
 118:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /* Exported function */
 119:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /* ***************** */
 120:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #if defined(CONFIG_LIB_CLASS_B_CPU) && !defined(BOOTLOADER_IEC60335)
 121:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** void RegCheck(void)
 122:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 123:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	TRACE_CPU_CHECK_START();
 124:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	IEC60335_CPUregTest_BIST();
 125:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	TRACE_CPU_CHECK_END();
 126:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 127:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif /* CONFIG_LIB_CLASS_B_CPU*/
 128:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 129:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #ifdef CONFIG_LIB_CLASS_B_FLASH
 130:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** typedef struct
 131:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 132:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     uint8_t* curAddr;
 133:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     uint8_t* endAddr;
 134:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     uint16_t partialChecksum;
 135:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     uint8_t  currBankIdx;
 136:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** } FlashTestStatus_t;
 137:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 138:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** static FlashTestStatus_t flashTestStatus;
 139:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** typedef enum {  FLASH_TEST_NONE,
 140:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                 FLASH_TEST_SETTING_RUNNING,
 141:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                 FLASH_TEST_COMPLETE
 142:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 143:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** FlashTestStatusStep_t;
 144:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 145:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 146:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** static void CheckFlash_SetBlock(uint8_t newBlock)
 147:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 148:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 149:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	uint16_t len;
 150:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	if (newBlock == FLASH_BLOCK_SETTING_FILE)
 151:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	{
 152:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		LIB_SettingBIST_StartSync(&len, &(flashTestStatus.curAddr),&(flashTestStatus.partialChecksum));
 153:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		flashTestStatus.endAddr = flashTestStatus.curAddr+len;
 154:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	}
 155:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	else
 156:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	{
 157:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		if ((flashTestStatus.currBankIdx == FLASH_BLOCK_SETTING_FILE) ||
 158:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		(newBlock != (flashTestStatus.currBankIdx + 1)) ||
 159:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		( newBlock >= NUM_FLASH_CBOARD_TEST_BLOCKS ))
 160:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		{
 161:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			newBlock = 0;
 162:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			flashTestStatus.partialChecksum = 0xffff;
 163:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		}
 164:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 165:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		flashTestStatus.curAddr = (uint8_t *)AreaFlashCheckTable[newBlock].startAddr;
 166:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		flashTestStatus.endAddr = (uint8_t *)AreaFlashCheckTable[newBlock].endAddr;
 167:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	}
 168:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 169:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	flashTestStatus.currBankIdx = newBlock;
 170:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 171:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 172:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** void CheckFlash_Init(bool_t isBIST)
 173:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 174:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	if (isBIST)
 175:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	{
 176:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	    SAFETY_REGION_START();
 177:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	}
 178:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 179:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     CheckFlash_SetBlock(0);
 180:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     SAFETY_DATA_UPDATE(flashTestStatus);
 181:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 182:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     if (isBIST)
 183:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	{
 184:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	SAFETY_REGION_END();
 185:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	}
 186:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 187:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 188:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** uint8_t CheckFlash_Manager(uint16_t byte_to_check, bool_t skipSettingFile)
 189:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 190:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     uint8_t* tmpEndAddr;
 191:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     uint32_t lenght;
 192:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     uint8_t retValue=CHECK_RUNNING;
 193:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 194:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     TRACE_FLASH_CHECK_START();
 195:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 196:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     if (!skipSettingFile)
 197:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     {
 198:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****         SAFETY_REGION_START();
 199:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     }
 200:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 201:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     SAFETY_DATA_CHECK(flashTestStatus);
 202:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 203:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     tmpEndAddr = flashTestStatus.curAddr + byte_to_check;
 204:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 205:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     if( tmpEndAddr > flashTestStatus.endAddr)
 206:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     {
 207:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****         tmpEndAddr = flashTestStatus.endAddr;
 208:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     }
 209:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 210:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     lenght = tmpEndAddr - flashTestStatus.curAddr;
 211:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 212:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     if( flashTestStatus.currBankIdx == FLASH_BLOCK_SETTING_FILE )  /* per il segmento del file dei 
 213:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     {
 214:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****         flashTestStatus.partialChecksum = LIB_SettingBIST_StepSync( lenght, flashTestStatus.curAddr
 215:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     }
 216:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     else
 217:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     {
 218:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****         flashTestStatus.partialChecksum = LIB_ClassBChk_CRC_calculate( lenght, flashTestStatus.curA
 219:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     }
 220:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 221:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     flashTestStatus.curAddr = tmpEndAddr;
 222:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 223:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     if (tmpEndAddr >= flashTestStatus.endAddr)
 224:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     {
 225:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****         if (flashTestStatus.currBankIdx < (NUM_FLASH_CBOARD_TEST_BLOCKS-1))
 226:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****         {
 227:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****             CheckFlash_SetBlock(flashTestStatus.currBankIdx+1);
 228:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****         }
 229:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****         else
 230:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****         {
 231:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****             if( flashTestStatus.currBankIdx == FLASH_BLOCK_SETTING_FILE )  /* per il segmento del f
 232:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****             {
 233:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                 if ( LIB_SettingBIST_EndSync(flashTestStatus.partialChecksum)  )
 234:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                 {
 235:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                     retValue = CHECK_PASSED;
 236:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                 }
 237:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                 else
 238:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                 {
 239:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                 	retValue = CHECK_FAILED;
 240:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                 }
 241:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****             }
 242:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****             else {
 243:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****             	flashChkCodeEval = flashTestStatus.partialChecksum;
 244:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 245:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****             	/* FlashCheckCode can be == 0 to disable test; production firwmare cannot have FlashCh
 246:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                 if (FlashCheckCode && (flashTestStatus.partialChecksum != FlashCheckCode))
 247:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                 {
 248:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                 	retValue = CHECK_FAILED;
 249:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                 }else if (skipSettingFile)
 250:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                 {
 251:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                     retValue = CHECK_PASSED;
 252:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                 }
 253:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                 else
 254:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                 {
 255:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                     CheckFlash_SetBlock(FLASH_BLOCK_SETTING_FILE);
 256:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                 }
 257:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 258:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****             }
 259:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****         }
 260:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     }
 261:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 262:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     SAFETY_DATA_UPDATE(flashTestStatus);
 263:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 264:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     if (!skipSettingFile)
 265:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     {
 266:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	SAFETY_REGION_END();
 267:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     }
 268:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 269:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     TRACE_FLASH_CHECK_END();
 270:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 271:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     switch( retValue )
 272:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	{
 273:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	case CHECK_FAILED:
 274:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		CLASSB_FATAL(PLT_ERROR_CLASSBCHECK_FLASH);
 275:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		break;
 276:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	case CHECK_PASSED:
 277:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		CheckFlash_Init(!skipSettingFile);
 278:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		break;
 279:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	}
 280:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 281:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     return retValue;
 282:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 283:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif /* CONFIG_LIB_CLASS_B_FLASH*/
 284:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 285:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #ifdef CONFIG_LIB_CLASS_B_RAM
 286:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #if defined(__ICCARM__)     /* EWARM */
 287:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #pragma location = ".noinit"
 288:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** static uint8_t tempRam[CONFIG_LIB_CLASS_B_RAM_CHUNKSIZE];
 289:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #elif defined(__CWCC__)       /* Codewarrior */
 290:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 291:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #pragma define_section noinit ".noinit" far_absolute
 292:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #if _lint
 293:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #define NO_INIT_VAR
 294:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #else   /* _lint */
 295:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #define NO_INIT_VAR __declspec(noinit)
 296:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif  /* _lint */
 297:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 298:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** NO_INIT_VAR uint8_t tempRam[CONFIG_LIB_CLASS_B_RAM_CHUNKSIZE];
 299:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif
 300:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 301:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 302:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /**
 303:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** This API implements keywords BIST (Built-In Self Test)
 304:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** */
 305:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** void LIB_ClassB_Keywords_BIST(void)
 306:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 307:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	if( TRUE != LIB_CheckKeywordsRam())
 308:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	{
 309:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		LIB_Reset_ForceColdReset();
 310:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	}
 311:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 312:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 313:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /**
 314:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****  This API implements the state machine of a non destructive RAM BIST (Built-In Self Test) to be per
 315:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****  on an area of RAM or stack (nIterrupt or User).
 316:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****  */
 317:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** void LIB_ClassB_RAM_BIST(void)
 318:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 319:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	switch (CheckRAM_Manager(TRUE))
 320:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	{
 321:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	case CHECK_FAILED:
 322:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		CLASSB_FATAL(PLT_ERROR_CLASSBCHECK_RAM);
 323:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		break;
 324:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	case CHECK_PASSED:
 325:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	default:
 326:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		;
 327:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	}
 328:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 329:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 330:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif /* CONFIG_LIB_CLASS_B_RAM*/
 331:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 332:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #ifdef CONFIG_LIB_CLASS_B_CLOCK
 333:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 334:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #if defined(CONFIG_LIB_CLASS_B_CLOCK_MS)
 335:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #include "OCRTC_drv.h"
 336:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /**
 337:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** LA sorgente esterna deve essere piu lenta,
 338:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** ad ogni interrupt della sorgente esterna
 339:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** va verificato che
 340:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** */
 341:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** typedef struct
 342:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 343:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     int32_t beginSysCnt;
 344:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     int32_t endSysCnt;
 345:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     int32_t beginExtCnt;
 346:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     int32_t endExtCnt;
 347:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     int8_t nFailedCheck;
 348:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     int8_t failed;
 349:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** } ClockTestStatus_t;
 350:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 351:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** ClockTestStatus_t clockTestStatus;
 352:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** //! Fattore di scala tra rtc e tempo di sistema (1ms)
 353:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #if defined(FREESCALE_MCF51_AG128)
 354:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #define EXT_CLOCK_SCALE	1
 355:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #else if   defined(NXP_LPC12xx_1227)
 356:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** //MS TODO: fix the RTC HW problem
 357:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #define EXT_CLOCK_SCALE	10
 358:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif
 359:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 360:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** //! Tolleranza in percentuale
 361:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #define MAX_CLOCK_TOLLERANCE_PERC 10
 362:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** //! Numero di fallimenti consecutivi per dichiare test fallito
 363:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #define MAX_CLOCK_FAILURE 3
 364:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** void check( uint32_t time );
 365:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 366:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /**
 367:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** Inizializza le risorse necessareper il test sulla frequenza della cpu.
 368:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** Confronta la sorgente di clock da cui dipende quella della cpu e una
 369:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** sorgente esterna, come RTC.
 370:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** */
 371:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** void CheckClock_Init(void)
 372:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 373:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     clockTestStatus.nFailedCheck = 0;
 374:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     clockTestStatus.endExtCnt=0;
 375:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 376:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     clockTestStatus.beginSysCnt = OS_GetTime32();
 377:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     clockTestStatus.beginExtCnt = OCRTC_getTimeSync();
 378:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 379:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     OCRTC_setAlarmSync(clockTestStatus.beginExtCnt+100, check);
 380:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 381:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 382:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** void check( uint32_t time )
 383:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 384:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     //clockTestStatus.failed   = 1;
 385:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     uint32_t beginSysCnt;
 386:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     uint32_t beginExtCnt;
 387:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 388:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     beginSysCnt = OS_GetTime32();
 389:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     beginExtCnt = OCRTC_getTimeSync();
 390:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 391:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     OCRTC_setAlarmSync(clockTestStatus.beginExtCnt+100, check);
 392:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 393:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 394:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** void CheckClock_Manager(uint16_t cmd)
 395:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 396:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     int32_t sysLen;
 397:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     int32_t sysDiff;
 398:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     int32_t extDiff;
 399:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     int32_t bound;
 400:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 401:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     TRACE_CLOCK_CHECK_START();
 402:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 403:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     clockTestStatus.endSysCnt = OS_GetTime32();
 404:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     clockTestStatus.endExtCnt = OCRTC_getTimeSync();
 405:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 406:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     sysDiff = clockTestStatus.endSysCnt - clockTestStatus.beginSysCnt;
 407:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     extDiff = (clockTestStatus.endExtCnt - clockTestStatus.beginExtCnt)* EXT_CLOCK_SCALE;
 408:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 409:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     clockTestStatus.beginSysCnt = clockTestStatus.endSysCnt;
 410:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     clockTestStatus.beginExtCnt = clockTestStatus.endExtCnt;
 411:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 412:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     bound = (sysDiff/100)*MAX_CLOCK_TOLLERANCE_PERC;
 413:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     if(   ((sysDiff - extDiff) > bound)
 414:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****             || ((extDiff - sysDiff) > bound) )
 415:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     {
 416:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****         clockTestStatus.nFailedCheck++;
 417:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****         if( clockTestStatus.nFailedCheck > MAX_CLOCK_FAILURE )
 418:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****         {
 419:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****         	CLASSB_FATAL(PLT_ERROR_CLASSBCHECK_CLOCK);
 420:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****         }
 421:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     }
 422:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     clockTestStatus.nFailedCheck = 0;
 423:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     TRACE_CLOCK_CHECK_END();
 424:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 425:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 426:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #elif  defined(LIB_CLASS_B_CLOCK_NPX)
 427:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 428:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #include "OCRTC_drv.h"
 429:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /**
 430:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** NPX Implementation
 431:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** */
 432:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #include "IEC60335_B_ClockTest.h"
 433:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** void check( uint32_t time );
 434:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** void check( uint32_t time )
 435:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 436:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 437:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     IEC60335_Clocktest_RTCHandler();  /* agganciato al timer dell'rtc, indipendente da quello di cp
 438:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 439:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     OCRTC_setAlarmSync( OCRTC_getTimeSync()+1, check);
 440:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 441:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 442:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /**
 443:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** Inizializza le risorse necessareper il test sulla frequenza della cpu.
 444:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** Confronta la sorgente di clock da cui dipende quella della cpu e una
 445:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** sorgente esterna, come RTC.
 446:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** */
 447:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** void CheckClock_Init(void)
 448:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 449:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     IEC60335_initClockTest(  1 // timerOccThreshold
 450:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                              , 1 // rtcOccThreshold
 451:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                              , 0 // timerLowerBound
 452:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                              , 1 // timerUpperBound
 453:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                           );
 454:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     OCRTC_setAlarmSync( OCRTC_getTimeSync()+1, check);
 455:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 456:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /**
 457:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** Verifica che le due sorgenti di clock utilzzate per il test non
 458:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** si discostino troppo.
 459:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** */
 460:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 461:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** void CheckClock_Manager(uint16_t cmd)
 462:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 463:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     type_testResult res;
 464:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 465:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     res = IEC60335_Clocktest_MainLoopHandler();
 466:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 467:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     if ( IEC60335_testPassed != res )
 468:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     {
 469:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	CLASSB_FATAL(PLT_ERROR_CLASSBCHECK_CLOCK);
 470:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     }
 471:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 472:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #elif (defined(RN_RX200) || defined(RN_RX100)) && defined(CONFIG_LIB_CLASS_B_CLOCK_HW)
 473:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 474:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** void CheckClock_Init(void)
 475:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 476:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	IEC60335_initClockTestHW();
 477:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 478:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 479:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif /* else CONFIG_LIB_CLASS_B_CLOCK_MS*/
 480:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif /* CONFIG_LIB_CLASS_B_CLOCK*/
 481:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 482:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #if defined(CONFIG_LIB_CLASS_B_WDTEST) && defined(CONFIG_PL_DRV_OCWDT)
 483:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** typedef enum {
 484:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	WDTCHECK_START=0,			/* WDCheck init state, starts WDT and waits for timeout to occurr  */
 485:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	WDTCHECK_1,					/* if catches a reset by timeout,
 486:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 									- Windowed: then starts WDT and issues an untimely refresh
 487:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 									- normal:  end of check reached */
 488:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	WDTCHECK_2,					/* Windowed only:  if catches a reset by untimely refresh, end of check reached*/
 489:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	WDTCHECK_END,				/* not used */
 490:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	WDTCHECK_ERROR, 			/* for debug purpose only*/
 491:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	WDTCHECK_RESTART,			/* init state of WDCheck once end of check has been reached  */
 492:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 493:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** WDTCheckStepType;
 494:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 495:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #define ISTEST_KEY	0x01
 496:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** static volatile WDTCheckStepType WDTCheckStep;
 497:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** static void WDCheck(void);
 498:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 499:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /**
 500:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	Initializes WDCheck state machine.
 501:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** */
 502:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** void LIB_ClassB_WDTCheckInit(void)
 503:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 504:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	WDTCheckStep = WDTCHECK_START;
 505:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	WDT_ClearTimeoutExpired();
 506:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	WDT_ClearUntimelyResetOccurred();
 507:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 508:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 509:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /**
 510:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	WDT POST tests.
 511:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	WDT allows recovering from error situations such as runaway or deadlocked code.
 512:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 513:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	Test is performed on the same configuration of the final application,
 514:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	no custom configuration are adopted  (because IWDT register can be written
 515:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	once after reset).
 516:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 517:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	Preconditions:
 518:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	-	Windowed WDT whose timer is clocked independently from the CPU (IWDT);
 519:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	-	WDT configured with a predefined timeout and window (if required).
 520:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	-	Refresh-permitted range (or window) is end-aligned.
 521:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	-	bootloader doesn't affect WDT registers
 522:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 523:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 524:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	It's better if WDT counter not started, but start is issued only if Counter is not running
 525:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	to avoid reset by untimely refresh. (In some MCUs it could happen that test is started but WDT
 526:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	is already running, like RX200 after sw reset )
 527:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 528:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	The self-diagnostic routine basically makes sure that:
 529:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	-	system reset is issued after the occurrence of a WDT timeout
 530:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	-	in window mode only, device is reset upon untimely WDT refresh
 531:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	-	in window mode only, ensure that the window is not wider than expected
 532:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 533:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	he self-diagnostic routine should ensure that WDT counter can be refreshed, but this check can be
 534:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	avoided thanks to the architecture of the check and appropriate preconditions.
 535:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 536:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	At each reset caused by WDT, state machine increments its state. Any other reset
 537:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	reinitializes the state machine (WDTCHECK_START).
 538:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 539:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	The device is reset a number of times during the WDT test, original cause of reset
 540:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	is overwritten. Therefore, SRAM variables WDTCheckStep and bkpResetSrc are used
 541:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	by the self-diagnostic routine to keep track of the test phase and original reset source
 542:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	before the test.
 543:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 544:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	states:
 545:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	WDTCHECK_START: this step starts the WDT counter and waits for the timeout to check whether WDT
 546:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	is able to issue a reset by timeout.
 547:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	WDTCHECK_1: In windowed mode, if reset by WDT timeout occurred, the state machine starts the WDT
 548:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	counter again and refreshes the WDT untimely, that is Refresh-prohibited period (Refresh-permitted
 549:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	window is end-aligned).
 550:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	In Normal mode, if reset by WDT timeout occurred check is passed.
 551:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	WDTCHECK_2: (windowed mode only)if reset by WDT untimely refresh occurred it means that untimely
 552:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	refresh is able to cause a reset. Then the state machine is re-initilized WDTCHECK_RESTART.
 553:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 554:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	In window mode both tests must be passed to return IEC60335_testPassed.
 555:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 556:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	TODO: avoid WDT reset is a wanted reset occurs? Does WDTCheckStep need to be protected by DataCare
 557:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** */
 558:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** static void WDCheck(void)
 559:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 560:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	static volatile resetSource_t bkpResetSrc;
 561:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	bool_t ret = IEC60335_testFailed;
 562:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	RST_Type resetSrc;
 563:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 564:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	TRACE_WD_CHECK_START();
 565:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 566:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	/* get the reset source */
 567:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	resetSrc = OCRST_GetResetSourceSync();
 568:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 569:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	/* catch any source of reset except one by WDT and reset the WDCheck state machine*/
 570:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	if((RST_BY_WATCHDOG != resetSrc))
 571:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	{
 572:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		LIB_ClassB_WDTCheckInit();
 573:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	}
 574:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 575:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	/* test whether WDT timeout is able to issue system reset */
 576:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	if( !WDT_IsRunning() )
 577:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	{
 578:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		OCWDT_StartSync();	/*start WDT without refreshing*/
 579:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	}
 580:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 581:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	switch(WDTCheckStep)
 582:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	{
 583:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		case WDTCHECK_RESTART:
 584:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		case WDTCHECK_START:
 585:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			/*save original reset source*/
 586:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			bkpResetSrc = OCRST_SaveResetValue();
 587:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 588:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			while(1)
 589:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			{
 590:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				WDTCheckStep=WDTCHECK_1;
 591:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			}
 592:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			/*break;*/ /*  lint -e527 (Unreachable code at token 'break') keep break */
 593:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 594:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 595:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		case WDTCHECK_1:
 596:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 597:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			if(WDT_TimeoutExpired())
 598:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			{
 599:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				/*OK, WDT is able to issue system reset by timeout*/
 600:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 601:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				/* reset WDT Status */
 602:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				WDT_ClearTimeoutExpired();
 603:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 604:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #if (WDT_WINDOWED_MODE == 1)
 605:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				/* Now it's time to test whether untimely refresh causes a reset */
 606:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				WDTCheckStep=WDTCHECK_2;
 607:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 608:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				/* wait for counter is near the refresh permitted window */
 609:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				while( !WDT_IsJustBeforePermittedWindow() )
 610:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				{
 611:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					/* nothing to to,  wait a moment please */
 612:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				}
 613:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 614:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				/*
 615:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				one-shot refresh and then...
 616:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				*/
 617:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				WDT_Refresh(); /* issue the untimely refresh */
 618:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 619:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				/*...deadlock!!!
 620:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				Deadlock to prevent execution whether untimely refresh didn't cause a reset*/
 621:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				while(1)
 622:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				{
 623:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					/*
 624:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					 - as T1 passed, WDT timeout will cause a reset:
 625:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					 - As Next state will be WDTCHECK_2, it must catch the error
 626:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					*/
 627:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				}
 628:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				/* Please note:
 629:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				'one-shot refresh and then ... deadlock'
 630:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				Reasons:
 631:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					Due to a fault, it could happen that the refresh permitted window is not the right one
 632:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					(compared to desired one):
 633:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					a) upper boundary is shifted;
 634:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					b) lower boundary is shifted: window will is wider than the desired one
 635:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					c) is a) + b), that is a) and b) at the same time (in the worst case no window has been set).
 636:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 637:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					In the case a) there is not any sort of problem because the window is shorter than the
 638:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					desired one (because Refresh-permitted range (or window) is end-aligned).
 639:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					In the case b) window is wider than the desired one: the fault will be caught because
 640:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					the refresh	is issued in the refresh permitted window and the deadlock prevents any other
 641:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					execution of the code.
 642:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 643:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					In the case c), if the refresh is not able to reset the WD counter (not tested at this time),
 644:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					please note that a strategy like
 645:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 646:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					while(1)
 647:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					{
 648:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 						WDT_Refresh();
 649:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					}
 650:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 651:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					will not catch the fault, because sooner or later, except in the worst case,
 652:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					the untimely refresh might be able to cause a reset ('might' because it depends on the
 653:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					architecture). If the 'real' window is very wide (e.g lower boundary @ start and upper
 654:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					boundary is almost at the end of the WDT period) specifications are not met ( because
 655:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					window is wider than expected , usually 50% of the period).
 656:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 657:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					Conclusion:
 658:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					Untimely refresh must be done in a precise instant of time just before the refresh
 659:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					permitted window) and must not be repeated (in this way if the refresh is not able to
 660:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					reset the WD counter, a reset by timeout will occur (just tested).
 661:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 662:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					In this way the check is not required to ensure that the WDT counter can be refreshed.
 663:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				*/
 664:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 665:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 666:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #else
 667:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				/* End of Check sequence */
 668:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				OCRST_RestoreResetValue(bkpResetSrc);
 669:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 670:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				/*start WDT*/
 671:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				OCWDT_StartSync();
 672:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				ret=IEC60335_testPassed;
 673:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 674:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				/* state for the reset by WDT timeout */
 675:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				WDTCheckStep=WDTCHECK_RESTART;
 676:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif
 677:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			}
 678:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			else
 679:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			{
 680:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				/* error */
 681:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				WDTCheckStep=WDTCHECK_ERROR; /* this assignment is for debug purpose only */
 682:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			}
 683:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 684:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			break;
 685:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 686:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #if (WDT_WINDOWED_MODE == 1)
 687:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		case WDTCHECK_2:
 688:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 689:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			if(WDT_UntimelyResetOccurred())
 690:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			{
 691:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				/*OK, WDT is able to issue system reset by untimely refresh*/
 692:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				/* reset WDT Status */
 693:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				WDT_ClearUntimelyResetOccurred();
 694:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 695:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				/* End of Check sequence */
 696:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				OCRST_RestoreResetValue(bkpResetSrc);
 697:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 698:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				ret=IEC60335_testPassed;
 699:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 700:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				/* state for the reset by WDT timeout */
 701:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				WDTCheckStep=WDTCHECK_RESTART;
 702:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			}
 703:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			else
 704:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			{
 705:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				/* error */
 706:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				WDTCheckStep=WDTCHECK_ERROR; /* this assignment is for debug purpose only */
 707:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			}
 708:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			break;
 709:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif
 710:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		default:
 711:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			break;
 712:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 713:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	}
 714:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 715:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	TRACE_WD_CHECK_END();
 716:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	if (ret == IEC60335_testFailed)
 717:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	{
 718:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		LIB_ClassB_WDTCheckInit();
 719:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		CLASSB_FATAL(PLT_ERROR_CLASSBCHECK_WDTEST);
 720:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	}
 721:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 722:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif
 723:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 724:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #if !defined(BOOTLOADER_IEC60335)
 725:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** void InitCheck(void)
 726:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 727:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 728:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #ifdef CONFIG_LIB_CLASS_B_WDTEST
 729:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	WDCheck();
 730:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif /* CONFIG_LIB_CLASS_B_WDTEST*/
 731:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 732:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #ifdef CONFIG_LIB_CLASS_B_CLOCK
 733:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     CheckClock_Init();
 734:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif /* CONFIG_LIB_CLASS_B_CLOCK*/
 735:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 736:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 737:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif /* !defined(BOOTLOADER_IEC60335) */
 738:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 739:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** void InitMemoryCheck(void)
 740:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 741:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #if defined(BOOTLOADER_IEC60335)
 742:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	CheckRAM_Init();
 743:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	CheckFlash_Init(FALSE);
 744:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #else /* defined(BOOTLOADER_IEC60335) */
 745:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	uint8_t checkRes=CHECK_FAILED;
 746:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	uint16_t CheckRAM_bytesChecked = 0;
 747:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 748:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #ifdef CONFIG_LIB_CLASS_B_RAM
 749:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 750:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	/* RAM POST - Pre-Operation Self Test*/
 751:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	CheckRAM_Init();
 752:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	checkRes = CHECK_FAILED;
 753:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	CheckRAM_bytesChecked = 0;
 754:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 755:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	do
 756:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	{
 757:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		checkRes = CheckRAM_Manager(FALSE);
 758:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 759:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		if(checkRes == CHECK_FAILED)
 760:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		{
 761:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			CLASSB_FATAL(PLT_ERROR_CLASSBCHECK_RAM);
 762:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		}
 763:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 764:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		CheckRAM_bytesChecked += CONFIG_LIB_CLASS_B_RAM_CHUNKSIZE;
 765:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		if (CheckRAM_bytesChecked >= CONFIG_LIB_CLASS_B_RAM_REFRESH_BYTES)
 766:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		{
 767:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			OCWDT_RefreshSync();
 768:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			CheckRAM_bytesChecked = 0;
 769:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		}
 770:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 771:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	}while(checkRes == CHECK_RUNNING);
 772:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 773:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif /* CONFIG_LIB_CLASS_B_RAM*/
 774:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 775:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #ifdef CONFIG_LIB_CLASS_B_FLASH
 776:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	/* ROM POST - Pre-Operation Self Test */
 777:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	CheckFlash_Init(FALSE);
 778:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 779:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	do
 780:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	{
 781:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		  checkRes = CheckFlash_Manager(CONFIG_LIB_CLASS_B_FLASH_CHUNKSIZE, TRUE);
 782:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		  CheckRAM_bytesChecked += CONFIG_LIB_CLASS_B_FLASH_CHUNKSIZE;
 783:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		  if( checkRes == CHECK_FAILED )
 784:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		  {
 785:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			  CLASSB_FATAL(PLT_ERROR_CLASSBCHECK_FLASH);
 786:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		  }
 787:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		  if (CheckRAM_bytesChecked >= CONFIG_LIB_CLASS_B_FLASH_REFRESH_BYTES)
 788:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		  {
 789:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			  OCWDT_RefreshSync();
 790:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			  CheckRAM_bytesChecked = 0;
 791:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		  }
 792:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	}
 793:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	while( checkRes == CHECK_RUNNING );
 794:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif
 795:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif /* defined(BOOTLOADER_IE60335) */
 796:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 797:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 798:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 799:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #ifdef CONFIG_LIB_CLASS_B_ADC
 800:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 801:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 802:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /**
 803:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n	ADC Check Initialization routine
 804:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n	This function initializes ADC_CheckFilter and its Data care check
 805:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n
 806:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \param none
 807:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 808:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \return void
 809:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \retval	N.A.
 810:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 811:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 812:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \par Architecture Requirements ID:
 813:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \li
 814:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \li
 815:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 816:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 817:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** */
 818:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** void ADC_CheckInit(void)
 819:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 820:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	if(IEC60335_testFailed == IEC60335_ADCtest_POST())
 821:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	{
 822:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		CLASSB_FATAL(PLT_ERROR_CLASSBCHECK_ADC);
 823:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	}
 824:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 825:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	IEC60335_ADCtest_BITS_start();
 826:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 827:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	ADC_CheckFilter = 0;
 828:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	SAFETY_DATA_UPDATE(ADC_CheckFilter);
 829:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 830:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 831:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /**
 832:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n	ADC Check Routine
 833:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n	This function calls IEC60335_ADCtest_BITS_check and updates ADC_CheckFilter
 834:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	depending of test result; on success decrement its value up to 0, otherwise
 835:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	it will be incremented by CONFIG_LIB_CLASS_B_ADC_FLTR_INCR, and once
 836:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	CONFIG_LIB_CLASS_B_ADC_FLTR_MAXTH value is reached it will raise a
 837:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	Platform exception.
 838:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n
 839:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \param none
 840:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 841:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \return none
 842:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \retval	N.A.
 843:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 844:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 845:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \par Architecture Requirements ID:
 846:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \li
 847:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \li
 848:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 849:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 850:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** */
 851:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** void ADC_Check(void)
 852:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 853:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	bool_t retVal;
 854:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	TRACE_ADC_CHECK_START();
 855:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 856:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	retVal = (IEC60335_ADCtest_BITS_check() != IEC60335_testPassed);
 857:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 858:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	TRACE_ADC_CHECK_END();
 859:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 860:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	SAFETY_REGION_START();
 861:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	SAFETY_DATA_CHECK(ADC_CheckFilter);
 862:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 863:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	if(retVal)
 864:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	{
 865:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		ADC_CheckFilter += CONFIG_LIB_CLASS_B_ADC_FLTR_INCR;
 866:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		if(ADC_CheckFilter > CONFIG_LIB_CLASS_B_ADC_FLTR_MAXTH)
 867:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		{
 868:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			CLASSB_FATAL(PLT_ERROR_CLASSBCHECK_ADC);
 869:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		}
 870:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	}
 871:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	else
 872:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	{
 873:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		if (ADC_CheckFilter > 0)
 874:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		{
 875:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			ADC_CheckFilter--;
 876:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		}
 877:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	}
 878:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 879:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	SAFETY_DATA_UPDATE(ADC_CheckFilter);
 880:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	SAFETY_REGION_END();
 881:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 882:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 883:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #endif
 884:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 885:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /* ************** */
 886:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /* local function */
 887:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /* ************** */
 888:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 889:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** #if defined (CONFIG_LIB_CLASS_B_RAM)
 890:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 891:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /**
 892:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n
 893:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n
 894:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n
 895:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \param [in]
 896:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \param [in,out]
 897:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \param [in]
 898:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 899:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 900:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \return void
 901:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \retval	N.A.
 902:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 903:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 904:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \par Architecture Requirements ID:
 905:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \li
 906:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \li
 907:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 908:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 909:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** */
 910:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** static void CheckRAM_Init(void)
 911:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 912:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	/* Test Check RAM status area */
 913:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	IEC60335_RamMarchC((const uint32_t) &ClassB_CheckRamTestState, sizeof(ClassB_CheckRamTestState), F
 914:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 915:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	/* Init Check RAM Manager */
 916:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	ClassB_CheckRamTestState.AreaIndex=CHECKRAM_AREA_NUM;
 917:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	ClassB_CheckRamTestState.RemainingBytes=0;
 918:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 919:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     SAFETY_DATA_UPDATE(ClassB_CheckRamTestState);
 920:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 921:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** /**
 922:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n BIST is always non destructive
 923:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n POST is always destructive except for the first block in  RamAreaTestTable
 924:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n
 925:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n
 926:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \n
 927:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \param [in]
 928:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \param [in,out]
 929:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \param [in]
 930:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 931:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 932:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \return void
 933:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \retval	N.A.
 934:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 935:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 936:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \par Architecture Requirements ID:
 937:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \li
 938:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** \li
 939:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 940:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 941:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** */
 942:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** static uint8_t CheckRAM_Manager(bool_t isBIST)
 943:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
   9                             		.loc 1 943 0
  10                             	.LVL0:
  11 0000 6E 7A                   		pushm	r7-r10
  12                             	.LCFI0:
 944:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     uint32_t length;
 945:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     uint8_t retValue = CHECK_NOT_RUNNING;
 946:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     CLASSB_TEST_FUNC pTestFunc=0;
 947:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     volatile ClassB_CheckRamTestStateType* pState= &ClassB_CheckRamTestState;
 948:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 949:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     TRACE_RAM_CHECK_START();
 950:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 951:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     if(isBIST)
  13                             		.loc 1 951 0
  14 0002 71 1A 00                		add	#0, r1, r10
  15 0005 20 15                   		beq	.L2
 952:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     {
 953:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	EnterCriticalSection();
  16                             		.loc 1 953 0
  17 0007 05 00 00 00             		bsr	_OS_DisableInterrupt
  18                             	.LVL1:
  19 000b FB 72 00 00 00 00       		mov.L	#_OS_Global, r7
  20 0011 CD 7E 01                		mov.B	1[r7], r14
  21 0014 62 1E                   		add	#1, r14
  22 0016 C7 7E 01                		mov.B	r14, 1[r7]
  23 0019 03                      		.balign 2,3,5
  24                             	.L2:
 954:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     }
 955:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 956:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     SAFETY_DATA_CHECK(ClassB_CheckRamTestState);
 957:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 958:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     if(pState->AreaIndex >= CHECKRAM_AREA_NUM)
  25                             		.loc 1 958 0
  26 001a FB 72 00 00 00 00       		mov.L	#_ClassB_CheckRamTestState, r7
  27 0020 58 74                   		movu.B	[r7], r4
  28 0022 EF 7E                   		mov.L	r7, r14
  29 0024 61 44                   		cmp	#4, r4
  30 0026 25 43                   		bleu	.L3
 959:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     {
 960:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	/*	well-initialized state machine start here:
 961:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     		it's time to apply destructive test to safe ram
 962:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	*/
 963:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	if(IEC60335_testFailed ==IEC60335_RamMarchC_SafeRam())
  31                             		.loc 1 963 0
  32 0028 05 00 00 00             		bsr	_IEC60335_RamMarchC_SafeRam
  33                             	.LVL2:
  34 002c 61 01                   		cmp	#0, r1
  35 002e 3A C4 00                		beq	.L15
  36                             	.LVL3:
 964:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	{
 965:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     		retValue = CHECK_FAILED;
 966:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	}
 967:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	else
 968:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	{
 969:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     		retValue = CHECK_RUNNING;
 970:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 971:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			/* update next index */
 972:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     		pState->AreaIndex=0;
  37                             		.loc 1 972 0
  38 0031 3C 70 00                		mov.B	#0, [r7]
 973:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     		pState->StartAddress = RamAreaTestTable[pState->AreaIndex].startAddr;
  39                             		.loc 1 973 0
  40 0034 58 7E                   		movu.B	[r7], r14
  41 0036 63 CE                   		mul	#12, r14
  42 0038 70 EE 00 00 00 00       		add	#_RamAreaTestTable, r14
  43 003e EC EE                   		mov.L	[r14], r14
  44 0040 E7 7E 01                		mov.L	r14, 4[r7]
 974:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     		pState->RemainingBytes = (RamAreaTestTable[pState->AreaIndex].endAddr - RamAreaTestTable[pSta
  45                             		.loc 1 974 0
  46 0043 CC 7E                   		mov.B	[r7], r14
  47 0045 CC 74                   		mov.B	[r7], r4
  48 0047 5B EE                   		movu.B	r14, r14
  49 0049 63 CE                   		mul	#12, r14
  50 004b 70 EE 00 00 00 00       		add	#_RamAreaTestTable, r14
  51 0051 ED EE 01                		mov.L	4[r14], r14
  52 0054 62 1E                   		add	#1, r14
  53 0056 5B 44                   		movu.B	r4, r4
  54 0058 63 C4                   		mul	#12, r4
  55 005a 70 44 00 00 00 00       		add	#_RamAreaTestTable, r4
  56 0060 06 80 4E                		sub	[r4].L, r14
  57 0063 E7 7E 02                		mov.L	r14, 8[r7]
  58 0066 38 C6 00                		bra	.L34
  59                             	.LVL4:
  60                             	.L3:
 975:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		}
 976:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     }
 977:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     else
 978:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     {
 979:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	/* test */
 980:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	if(pState->RemainingBytes >= CONFIG_LIB_CLASS_B_RAM_CHUNKSIZE)
  61                             		.loc 1 980 0
  62 0069 A8 F7                   		mov.L	8[r7], r7
  63 006b 61 77                   		cmp	#7, r7
  64 006d 24 06                   		bgtu	.L16
 981:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		{
 982:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			length  = CONFIG_LIB_CLASS_B_RAM_CHUNKSIZE;
 983:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		}
 984:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		else
 985:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		{
 986:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			length = pState->RemainingBytes;
  65                             		.loc 1 986 0
  66 006f ED E7 02                		mov.L	8[r14], r7
  67                             	.LVL5:
  68 0072 0C                      		bra	.L5
  69                             	.LVL6:
  70                             	.L16:
 982:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			length  = CONFIG_LIB_CLASS_B_RAM_CHUNKSIZE;
  71                             		.loc 1 982 0
  72 0073 66 87                   		mov.L	#8, r7
  73 0075 03                      		.balign 2,3,5
  74                             	.L5:
  75                             	.LVL7:
 987:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		}
 988:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	pState->RemainingBytes -= length;
  76                             		.loc 1 988 0
  77 0076 FB 42 00 00 00 00       		mov.L	#_ClassB_CheckRamTestState, r4
  78 007c ED E3 02                		mov.L	8[r14], r3
  79 007f 43 73                   		sub	r7, r3
  80 0081 E7 E3 02                		mov.L	r3, 8[r14]
 989:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
 990:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	pTestFunc = RamAreaTestTable[pState->AreaIndex].fpTest_Func;
  81                             		.loc 1 990 0
  82 0084 58 EE                   		movu.B	[r14], r14
  83 0086 63 CE                   		mul	#12, r14
  84 0088 70 EE 00 00 00 00       		add	#_RamAreaTestTable, r14
  85 008e ED EE 02                		mov.L	8[r14], r14
  86                             	.LVL8:
 991:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	if(pTestFunc && (length))
  87                             		.loc 1 991 0
  88 0091 61 0E                   		cmp	#0, r14
  89 0093 20 5F                   		beq	.L15
  90                             		.loc 1 991 0 is_stmt 0 discriminator 1
  91 0095 61 07                   		cmp	#0, r7
  92 0097 20 5B                   		beq	.L15
 992:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	{
 993:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     		/* by default the first block is non-destructive test like in BIST */
 994:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     		if(IEC60335_testFailed == pTestFunc(pState->StartAddress, length, (pState->AreaIndex?isBIST:T
  93                             		.loc 1 994 0 is_stmt 1
  94 0099 A8 49                   		mov.L	4[r4], r1
  95 009b 58 44                   		movu.B	[r4], r4
  96 009d 61 04                   		cmp	#0, r4
  97 009f 1C                      		bne	.L17
  98 00a0 66 13                   		mov.L	#1, r3
  99 00a2 0C                      		bra	.L7
 100                             	.L17:
 101 00a3 EF A3                   		mov.L	r10, r3
 102 00a5 03                      		.balign 2,3,1
 103                             	.L7:
 104                             		.loc 1 994 0 is_stmt 0 discriminator 3
 105 00a6 EF 72                   		mov.L	r7, r2
 106 00a8 7F 1E                   		jsr	r14
 107                             	.LVL9:
 108 00aa 61 01                   		cmp	#0, r1
 109 00ac 20 46                   		beq	.L15
 110 00ae 2E 6A                   		bra	.L31
 111                             	.LVL10:
 112                             	.L13:
 995:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     		{
 996:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     			retValue = CHECK_FAILED;
 997:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     		}
 998:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     		else
 999:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     		{
1000:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     			retValue = CHECK_RUNNING;
1001:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     		}
1002:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	}
1003:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
1004:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	if(retValue == CHECK_RUNNING)
1005:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	{
1006:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     		pState->StartAddress += length;
1007:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
1008:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			if(!pState->RemainingBytes)
1009:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			{
1010:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				pState->AreaIndex++;
 113                             		.loc 1 1010 0 is_stmt 1
 114 00b0 CC E7                   		mov.B	[r14], r7
 115 00b2 62 17                   		add	#1, r7
 116 00b4 C3 E7                   		mov.B	r7, [r14]
1011:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
1012:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				if(pState->AreaIndex < CHECKRAM_AREA_NUM)
 117                             		.loc 1 1012 0
 118 00b6 58 E7                   		movu.B	[r14], r7
 119 00b8 61 47                   		cmp	#4, r7
1013:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				{
1014:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					/* configure state machine to go to the next area */
1015:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					pState->StartAddress = RamAreaTestTable[pState->AreaIndex].startAddr;
 120                             		.loc 1 1015 0
 121 00ba 58 E7                   		movu.B	[r14], r7
1012:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				if(pState->AreaIndex < CHECKRAM_AREA_NUM)
 122                             		.loc 1 1012 0
 123 00bc 24 33                   		bgtu	.L9
 124                             		.loc 1 1015 0
 125 00be 63 C7                   		mul	#12, r7
 126 00c0 70 77 00 00 00 00       		add	#_RamAreaTestTable, r7
 127 00c6 EC 77                   		mov.L	[r7], r7
 128 00c8 E7 E7 01                		mov.L	r7, 4[r14]
1016:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					pState->RemainingBytes = (RamAreaTestTable[pState->AreaIndex].endAddr - RamAreaTestTable[pStat
 129                             		.loc 1 1016 0
 130 00cb CC E7                   		mov.B	[r14], r7
 131 00cd CC E4                   		mov.B	[r14], r4
 132 00cf 5B 77                   		movu.B	r7, r7
 133 00d1 63 C7                   		mul	#12, r7
 134 00d3 70 77 00 00 00 00       		add	#_RamAreaTestTable, r7
 135 00d9 A8 7F                   		mov.L	4[r7], r7
 136 00db 62 17                   		add	#1, r7
 137 00dd 5B 44                   		movu.B	r4, r4
 138 00df 63 C4                   		mul	#12, r4
 139 00e1 70 44 00 00 00 00       		add	#_RamAreaTestTable, r4
 140 00e7 06 80 47                		sub	[r4].L, r7
 141 00ea E7 E7 02                		mov.L	r7, 8[r14]
 142 00ed 2E 3F                   		bra	.L34
 143                             	.L9:
1017:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				}
1018:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				else if(pState->AreaIndex == CHECKRAM_AREA_NUM)
 144                             		.loc 1 1018 0
 145 00ef 61 57                   		cmp	#5, r7
 146 00f1 14                      		beq	.L18
 147                             	.LVL11:
 148                             		.balign 2,3,1
 149                             	.L15:
 965:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     		retValue = CHECK_FAILED;
 150                             		.loc 1 965 0
 151 00f2 66 27                   		mov	#2, r7
 152 00f4 0C                      		bra	.L4
 153                             	.LVL12:
 154                             	.L18:
1019:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				{
1020:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					retValue = CHECK_PASSED;
 155                             		.loc 1 1020 0
 156 00f5 66 37                   		mov	#3, r7
 157                             	.LVL13:
 158 00f7 03                      		.balign 2,3,1
 159                             	.L4:
1021:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					/* in this branch state machine is already initialized */
1022:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				}
1023:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				else
1024:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				{
1025:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					/* error !!! */
1026:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 					retValue = CHECK_FAILED;
1027:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				}
1028:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			}
1029:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	}
1030:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	else
1031:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	{
1032:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     		/* error !!! */
1033:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     		retValue = CHECK_FAILED;
1034:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	}
1035:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     }
1036:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
1037:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     SAFETY_DATA_UPDATE(ClassB_CheckRamTestState);
1038:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     if(isBIST)
 160                             		.loc 1 1038 0
 161 00f8 61 0A                   		cmp	#0, r10
 162 00fa 20 1A                   		beq	.L11
1039:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     {
1040:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     	ExitCriticalSection();
 163                             		.loc 1 1040 0
 164 00fc FB E2 00 00 00 00       		mov.L	#_OS_Global, r14
 165 0102 CD EA 01                		mov.B	1[r14], r10
 166                             	.LVL14:
 167 0105 60 1A                   		sub	#1, r10
 168 0107 C7 EA 01                		mov.B	r10, 1[r14]
 169 010a 76 2A FF 00             		and #0xff, r10
 170 010e 1E                      		bne	.L11
 171                             		.loc 1 1040 0 is_stmt 0 discriminator 1
 172 010f 05 00 00 00             		bsr	_OS_EnableInterrupt
 173                             	.LVL15:
 174 0113 03                      		.balign 2,3,1
 175                             	.L11:
1041:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     }
1042:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 
1043:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     TRACE_RAM_CHECK_END();
1044:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     return retValue;
 176                             		.loc 1 1044 0 is_stmt 1
 177 0114 5B 71                   		movu.B	r7, r1
 178 0116 2E 1A                   		bra	.L32
 179                             	.LVL16:
 180                             	.L31:
1006:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     		pState->StartAddress += length;
 181                             		.loc 1 1006 0
 182 0118 FB E2 00 00 00 00       		mov.L	#_ClassB_CheckRamTestState, r14
 183 011e 06 89 E7 01             		add	4[r14].L, r7
 184                             	.LVL17:
 185 0122 E7 E7 01                		mov.L	r7, 4[r14]
1008:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			if(!pState->RemainingBytes)
 186                             		.loc 1 1008 0
 187 0125 ED E7 02                		mov.L	8[r14], r7
 188 0128 61 07                   		cmp	#0, r7
 189 012a 20 86                   		beq	.L13
 190                             		.balign 2,3,1
 191                             	.L34:
 192 012c 66 17                   		mov	#1, r7
 193 012e 2E CA                   		bra	.L4
 194                             	.LVL18:
 195                             	.L32:
1045:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 196                             		.loc 1 1045 0
 197 0130 3F 7A 04                		rtsd	#16, r7-r10
 198                             	.LFE14:
 200 0133 03                      		.section	.text.CheckFlash_SetBlock,"ax",@progbits
 202                             	_CheckFlash_SetBlock:
 203                             	.LFB1:
 147:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 204                             		.loc 1 147 0
 205                             	.LVL19:
 206 0000 7E A7                   		push.l	r7
 207                             	.LCFI1:
 208 0002 60 40                   		sub	#4, r0
 209                             	.LCFI2:
 210 0004 CF 17                   		mov.B	r1, r7
 150:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	if (newBlock == FLASH_BLOCK_SETTING_FILE)
 211                             		.loc 1 150 0
 212 0006 5B 1E                   		movu.B	r1, r14
 213 0008 75 5E FF                		cmp	#0xff, r14
 214 000b 21 24                   		bne	.L36
 152:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		LIB_SettingBIST_StartSync(&len, &(flashTestStatus.curAddr),&(flashTestStatus.partialChecksum));
 215                             		.loc 1 152 0
 216 000d EF 01                   		mov.L	r0, r1
 217                             	.LVL20:
 218 000f FB 22 00 00 00 00       		mov.L	#_flashTestStatus, r2
 219 0015 FB 32 08 00 00 00       		mov.L	#_flashTestStatus+8, r3
 220 001b 05 00 00 00             		bsr	_LIB_SettingBIST_StartSync
 221                             	.LVL21:
 153:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		flashTestStatus.endAddr = flashTestStatus.curAddr+len;
 222                             		.loc 1 153 0
 223 001f FB E2 00 00 00 00       		mov.L	#_flashTestStatus, r14
 224                             	.LVL22:
 225 0025 5C 04                   		movu.W	[r0], r4
 226                             	.LVL23:
 227 0027 06 88 E4                		add	[r14], r4
 228                             	.LVL24:
 229 002a E7 E4 01                		mov.L	r4, 4[r14]
 230 002d 2E 29                   		bra	.L37
 231                             	.LVL25:
 232                             	.L36:
 157:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		if ((flashTestStatus.currBankIdx == FLASH_BLOCK_SETTING_FILE) ||
 233                             		.loc 1 157 0
 234 002f FB 72 00 00 00 00       		mov.L	#_flashTestStatus, r7
 235 0035 B2 F4                   		movu.B	10[r7], r4
 236 0037 75 54 FF                		cmp	#0xff, r4
 237 003a 12                      		beq	.L38
 158:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		(newBlock != (flashTestStatus.currBankIdx + 1)) ||
 238                             		.loc 1 158 0 discriminator 1
 239 003b 62 14                   		add	#1, r4
 157:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		if ((flashTestStatus.currBankIdx == FLASH_BLOCK_SETTING_FILE) ||
 240                             		.loc 1 157 0 discriminator 1
 241 003d 47 4E                   		cmp	r4, r14
 242 003f 1D                      		bne	.L38
 158:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		(newBlock != (flashTestStatus.currBankIdx + 1)) ||
 243                             		.loc 1 158 0
 244 0040 61 0E                   		cmp	#0, r14
 245 0042 16                      		beq	.L39
 246 0043 03                      		.balign 2,3,4
 247                             	.L38:
 248                             	.LVL26:
 162:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			flashTestStatus.partialChecksum = 0xffff;
 249                             		.loc 1 162 0
 250 0044 F9 75 04 FF             		mov.W	#-1, 8[r7]
 251                             	.LVL27:
 252                             		.balign 2,3,5
 253                             	.L39:
 165:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		flashTestStatus.curAddr = (uint8_t *)AreaFlashCheckTable[newBlock].startAddr;
 254                             		.loc 1 165 0
 255 0048 FB E2 00 00 00 00       		mov.L	#_AreaFlashCheckTable, r14
 256 004e E0 E7                   		mov.L	[r14], [r7]
 166:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		flashTestStatus.endAddr = (uint8_t *)AreaFlashCheckTable[newBlock].endAddr;
 257                             		.loc 1 166 0
 258 0050 E5 E7 01 01             		mov.L	4[r14], 4[r7]
 259 0054 66 07                   		mov	#0, r7
 260                             	.LVL28:
 261                             		.balign 2,3,5
 262                             	.L37:
 169:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	flashTestStatus.currBankIdx = newBlock;
 263                             		.loc 1 169 0
 264 0056 FB E2 00 00 00 00       		mov.L	#_flashTestStatus, r14
 265 005c C7 E7 0A                		mov.B	r7, 10[r14]
 170:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 266                             		.loc 1 170 0
 267 005f 3F 77 02                		rtsd	#8, r7-r7
 268                             	.LFE1:
 270                             		.section	.text.RegCheck,"ax",@progbits
 271                             		.global	_RegCheck
 273                             	_RegCheck:
 274                             	.LFB0:
 122:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 275                             		.loc 1 122 0
 124:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	IEC60335_CPUregTest_BIST();
 276                             		.loc 1 124 0
 277 0000 04 00 00 00             		bra	_IEC60335_CPUregTest_BIST
 278                             	.LVL29:
 279                             	.LFE0:
 281                             		.section	.text.CheckFlash_Init,"ax",@progbits
 282                             		.global	_CheckFlash_Init
 284                             	_CheckFlash_Init:
 285                             	.LFB2:
 173:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 286                             		.loc 1 173 0
 287                             	.LVL30:
 179:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     CheckFlash_SetBlock(0);
 288                             		.loc 1 179 0
 289 0000 66 01                   		mov	#0, r1
 290                             	.LVL31:
 291 0002 04 00 00 00             		bra	_CheckFlash_SetBlock
 292                             	.LVL32:
 293                             	.LFE2:
 295                             		.section	.text.CheckFlash_Manager,"ax",@progbits
 296                             		.global	_CheckFlash_Manager
 298                             	_CheckFlash_Manager:
 299                             	.LFB3:
 189:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 300                             		.loc 1 189 0
 301                             	.LVL33:
 302 0000 6E 7B                   		pushm	r7-r11
 303                             	.LCFI3:
 304 0002 EF 2B                   		mov.L	r2, r11
 305                             	.LVL34:
 203:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     tmpEndAddr = flashTestStatus.curAddr + byte_to_check;
 306                             		.loc 1 203 0
 307 0004 FB A2 00 00 00 00       		mov.L	#_flashTestStatus, r10
 308 000a EC A2                   		mov.L	[r10], r2
 309                             	.LVL35:
 310 000c 5F 11                   		movu.W	r1, r1
 311                             	.LVL36:
 205:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     if( tmpEndAddr > flashTestStatus.endAddr)
 312                             		.loc 1 205 0
 313 000e ED AE 01                		mov.L	4[r10], r14
 314 0011 FF 27 12                		add	r1, r2, r7
 315                             	.LVL37:
 316 0014 EF A4                   		mov.L	r10, r4
 317 0016 47 E7                   		cmp	r14, r7
 318 0018 25 04                   		bleu	.L50
 319 001a EF E7                   		mov.L	r14, r7
 320                             	.LVL38:
 321                             		.balign 2,3,2
 322                             	.L50:
 210:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     lenght = tmpEndAddr - flashTestStatus.curAddr;
 323                             		.loc 1 210 0
 324 001c FF 01 27                		sub	r2, r7, r1
 325                             	.LVL39:
 212:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     if( flashTestStatus.currBankIdx == FLASH_BLOCK_SETTING_FILE )  /* per il segmento del file dei 
 326                             		.loc 1 212 0
 327 001f FB A2 00 00 00 00       		mov.L	#_flashTestStatus, r10
 328 0025 59 4E 0A                		movu.B	10[r4], r14
 214:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****         flashTestStatus.partialChecksum = LIB_SettingBIST_StepSync( lenght, flashTestStatus.curAddr
 329                             		.loc 1 214 0
 330 0028 DD A3 04                		mov.W	8[r10], r3
 212:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     if( flashTestStatus.currBankIdx == FLASH_BLOCK_SETTING_FILE )  /* per il segmento del file dei 
 331                             		.loc 1 212 0
 332 002b 75 5E FF                		cmp	#0xff, r14
 333 002e 1E                      		bne	.L51
 214:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****         flashTestStatus.partialChecksum = LIB_SettingBIST_StepSync( lenght, flashTestStatus.curAddr
 334                             		.loc 1 214 0
 335 002f 05 00 00 00             		bsr	_LIB_SettingBIST_StepSync
 336                             	.LVL40:
 337 0033 0D                      		bra	.L64
 338                             	.LVL41:
 339                             	.L51:
 218:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****         flashTestStatus.partialChecksum = LIB_ClassBChk_CRC_calculate( lenght, flashTestStatus.curA
 340                             		.loc 1 218 0
 341 0034 05 00 00 00             		bsr	_OCCRC_Calculate
 342                             	.LVL42:
 343                             		.balign 2,3,5
 344                             	.L64:
 345 0038 D7 A1 04                		mov.W	r1, 8[r10]
 221:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     flashTestStatus.curAddr = tmpEndAddr;
 346                             		.loc 1 221 0
 347 003b FB E2 00 00 00 00       		mov.L	#_flashTestStatus, r14
 348 0041 E3 E7                   		mov.L	r7, [r14]
 223:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     if (tmpEndAddr >= flashTestStatus.endAddr)
 349                             		.loc 1 223 0
 350 0043 06 85 E7 01             		cmp	4[r14].L, r7
 351 0047 23 59                   		bltu	.L53
 231:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****             if( flashTestStatus.currBankIdx == FLASH_BLOCK_SETTING_FILE )  /* per il segmento del f
 352                             		.loc 1 231 0
 353 0049 59 E7 0A                		movu.B	10[r14], r7
 354                             	.LVL43:
 355 004c 75 57 FF                		cmp	#0xff, r7
 356 004f 21 0F                   		bne	.L54
 233:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                 if ( LIB_SettingBIST_EndSync(flashTestStatus.partialChecksum)  )
 357                             		.loc 1 233 0
 358 0051 DD E1 04                		mov.W	8[r14], r1
 359 0054 05 00 00 00             		bsr	_LIB_SettingBIST_EndSync
 360                             	.LVL44:
 361 0058 61 01                   		cmp	#0, r1
 362 005a 21 3C                   		bne	.L55
 363 005c 2E 2F                   		bra	.L56
 364                             	.LVL45:
 365                             	.L54:
 243:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****             	flashChkCodeEval = flashTestStatus.partialChecksum;
 366                             		.loc 1 243 0
 367 005e DD EA 04                		mov.W	8[r14], r10
 368 0061 FB 72 00 00 00 00       		mov.L	#_flashChkCodeEval, r7
 369 0067 D3 7A                   		mov.W	r10, [r7]
 246:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                 if (FlashCheckCode && (flashTestStatus.partialChecksum != FlashCheckCode))
 370                             		.loc 1 246 0
 371 0069 FB 72 00 00 00 00       		mov.L	#_FlashCheckCode, r7
 372 006f 5C 77                   		movu.W	[r7], r7
 373 0071 61 07                   		cmp	#0, r7
 374 0073 17                      		beq	.L57
 246:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                 if (FlashCheckCode && (flashTestStatus.partialChecksum != FlashCheckCode))
 375                             		.loc 1 246 0 is_stmt 0 discriminator 1
 376 0074 5F AA                   		movu.W	r10, r10
 377 0076 47 7A                   		cmp	r7, r10
 378 0078 21 13                   		bne	.L56
 379                             		.balign 2,3,1
 380                             	.L57:
 249:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                 }else if (skipSettingFile)
 381                             		.loc 1 249 0 is_stmt 1
 382 007a 61 0B                   		cmp	#0, r11
 383 007c 21 1A                   		bne	.L55
 255:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****                     CheckFlash_SetBlock(FLASH_BLOCK_SETTING_FILE);
 384                             		.loc 1 255 0
 385 007e FB 16 FF                		mov	#-1, r1
 386 0081 05 00 00 00             		bsr	_CheckFlash_SetBlock
 387                             	.LVL46:
 388 0085 2E 1B                   		bra	.L53
 389                             	.LVL47:
 390                             	.L58:
 281:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     return retValue;
 391                             		.loc 1 281 0
 392 0087 5B 11                   		movu.B	r1, r1
 393 0089 2E 1B                   		bra	.L62
 394                             	.LVL48:
 395                             	.L56:
 274:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		CLASSB_FATAL(PLT_ERROR_CLASSBCHECK_FLASH);
 396                             		.loc 1 274 0
 397 008b 75 41 34                		mov.L	#52, r1
 398 008e 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 399                             	.LVL49:
 275:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		break;
 400                             		.loc 1 275 0
 401 0092 66 21                   		mov	#2, r1
 402 0094 2E F3                   		bra	.L58
 403                             	.LVL50:
 404                             	.L55:
 405                             	.LBB8:
 406                             	.LBB9:
 179:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     CheckFlash_SetBlock(0);
 407                             		.loc 1 179 0
 408 0096 66 01                   		mov	#0, r1
 409 0098 05 00 00 00             		bsr	_CheckFlash_SetBlock
 410                             	.LVL51:
 411 009c 66 31                   		mov	#3, r1
 412 009e 2E E9                   		bra	.L58
 413                             	.LVL52:
 414                             	.L53:
 415                             	.LBE9:
 416                             	.LBE8:
 189:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 417                             		.loc 1 189 0
 418 00a0 66 11                   		mov	#1, r1
 419 00a2 2E E5                   		bra	.L58
 420                             	.LVL53:
 421                             	.L62:
 282:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 422                             		.loc 1 282 0
 423 00a4 3F 7B 05                		rtsd	#20, r7-r11
 424                             	.LFE3:
 426 00a7 03                      		.section	.text.LIB_ClassB_Keywords_BIST,"ax",@progbits
 427                             		.global	_LIB_ClassB_Keywords_BIST
 429                             	_LIB_ClassB_Keywords_BIST:
 430                             	.LFB4:
 306:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 431                             		.loc 1 306 0
 307:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	if( TRUE != LIB_CheckKeywordsRam())
 432                             		.loc 1 307 0
 433 0000 05 00 00 00             		bsr	_LIB_CheckKeywordsRam
 434                             	.LVL54:
 435 0004 61 11                   		cmp	#1, r1
 436 0006 15                      		beq	.L65
 309:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		LIB_Reset_ForceColdReset();
 437                             		.loc 1 309 0
 438 0007 04 00 00 00             		bra	_LIB_Reset_ForceColdReset
 439                             	.LVL55:
 440                             	.L65:
 441 000b 02                      		rts
 442                             	.LFE4:
 444                             		.section	.text.LIB_ClassB_RAM_BIST,"ax",@progbits
 445                             		.global	_LIB_ClassB_RAM_BIST
 447                             	_LIB_ClassB_RAM_BIST:
 448                             	.LFB5:
 318:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 449                             		.loc 1 318 0
 319:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	switch (CheckRAM_Manager(TRUE))
 450                             		.loc 1 319 0
 451 0000 66 11                   		mov.L	#1, r1
 452 0002 05 00 00 00             		bsr	_CheckRAM_Manager
 453                             	.LVL56:
 454 0006 5B 11                   		movu.B	r1, r1
 455 0008 61 21                   		cmp	#2, r1
 456 000a 18                      		bne	.L70
 322:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		CLASSB_FATAL(PLT_ERROR_CLASSBCHECK_RAM);
 457                             		.loc 1 322 0
 458 000b 75 41 33                		mov.L	#51, r1
 459 000e 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 460                             	.LVL57:
 461                             	.L70:
 462 0012 02                      		rts
 463                             	.LFE5:
 465                             		.section	.text.CheckClock_Init,"ax",@progbits
 466                             		.global	_CheckClock_Init
 468                             	_CheckClock_Init:
 469                             	.LFB6:
 475:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 470                             		.loc 1 475 0
 476:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	IEC60335_initClockTestHW();
 471                             		.loc 1 476 0
 472 0000 04 00 00 00             		bra	_IEC60335_initClockTestHW
 473                             	.LVL58:
 474                             	.LFE6:
 476                             		.section	.text.LIB_ClassB_WDTCheckInit,"ax",@progbits
 477                             		.global	_LIB_ClassB_WDTCheckInit
 479                             	_LIB_ClassB_WDTCheckInit:
 480                             	.LFB7:
 503:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 481                             		.loc 1 503 0
 504:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	WDTCheckStep = WDTCHECK_START;
 482                             		.loc 1 504 0
 483 0000 FB E2 00 00 00 00       		mov.L	#_WDTCheckStep, r14
 484 0006 F8 E6 00                		mov.L	#0, [r14]
 505:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	WDT_ClearTimeoutExpired();
 485                             		.loc 1 505 0
 486 0009 05 00 00 00             		bsr	_WDT_ClearTimeoutExpired
 487                             	.LVL59:
 506:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	WDT_ClearUntimelyResetOccurred();
 488                             		.loc 1 506 0
 489 000d 04 00 00 00             		bra	_WDT_ClearUntimelyResetOccurred
 490                             	.LVL60:
 491                             	.LFE7:
 493                             		.section	.text.InitCheck,"ax",@progbits
 494                             		.global	_InitCheck
 496                             	_InitCheck:
 497                             	.LFB9:
 726:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 498                             		.loc 1 726 0
 499 0000 7E A7                   		push.l	r7
 500                             	.LCFI4:
 501                             	.LVL61:
 502                             	.LBB14:
 503                             	.LBB15:
 567:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	resetSrc = OCRST_GetResetSourceSync();
 504                             		.loc 1 567 0
 505 0002 05 00 00 00             		bsr	_OCRST_GetResetSourceSync
 506                             	.LVL62:
 570:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	if((RST_BY_WATCHDOG != resetSrc))
 507                             		.loc 1 570 0
 508 0006 5B 11                   		movu.B	r1, r1
 509 0008 61 31                   		cmp	#3, r1
 510 000a 16                      		beq	.L74
 572:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		LIB_ClassB_WDTCheckInit();
 511                             		.loc 1 572 0
 512 000b 05 00 00 00             		bsr	_LIB_ClassB_WDTCheckInit
 513                             	.LVL63:
 514 000f 03                      		.balign 2,3,3
 515                             	.L74:
 576:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	if( !WDT_IsRunning() )
 516                             		.loc 1 576 0
 517 0010 05 00 00 00             		bsr	_WDT_IsRunning
 518                             	.LVL64:
 519 0014 76 21 FF 00             		and #0xff, r1
 520 0018 1E                      		bne	.L75
 578:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		OCWDT_StartSync();	/*start WDT without refreshing*/
 521                             		.loc 1 578 0
 522 0019 05 00 00 00             		bsr	_OCWDT_StartSync
 523                             	.LVL65:
 524 001d 03                      		.balign 2,3,5
 525                             	.L75:
 581:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	switch(WDTCheckStep)
 526                             		.loc 1 581 0
 527 001e FB 72 00 00 00 00       		mov.L	#_WDTCheckStep, r7
 528 0024 EC 7E                   		mov.L	[r7], r14
 529 0026 61 1E                   		cmp	#1, r14
 530 0028 20 25                   		beq	.L78
 531 002a 61 0E                   		cmp	#0, r14
 532 002c 12                      		beq	.L77
 533 002d 61 2E                   		cmp	#2, r14
 534 002f 20 3B                   		beq	.L79
 535 0031 61 5E                   		cmp	#5, r14
 536 0033 21 5D                   		bne	.L76
 537 0035 03                      		.balign 2,3,3
 538                             	.L77:
 586:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			bkpResetSrc = OCRST_SaveResetValue();
 539                             		.loc 1 586 0
 540 0036 05 00 00 00             		bsr	_OCRST_SaveResetValue
 541                             	.LVL66:
 542 003a FB 72 00 00 00 00       		mov.L	#_bkpResetSrc.10388, r7
 543 0040 E3 71                   		mov.L	r1, [r7]
 590:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				WDTCheckStep=WDTCHECK_1;
 544                             		.loc 1 590 0
 545 0042 FB 72 00 00 00 00       		mov.L	#_WDTCheckStep, r7
 546                             		.balign 2,3,4
 547                             	.L80:
 548 0048 3E 70 01                		mov.L	#1, [r7]
 549 004b 2E FD                   		bra	.L80
 550                             	.L78:
 597:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			if(WDT_TimeoutExpired())
 551                             		.loc 1 597 0
 552 004d 05 00 00 00             		bsr	_WDT_TimeoutExpired
 553                             	.LVL67:
 554 0051 61 01                   		cmp	#0, r1
 555 0053 20 33                   		beq	.L84
 602:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				WDT_ClearTimeoutExpired();
 556                             		.loc 1 602 0
 557 0055 05 00 00 00             		bsr	_WDT_ClearTimeoutExpired
 558                             	.LVL68:
 606:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				WDTCheckStep=WDTCHECK_2;
 559                             		.loc 1 606 0
 560 0059 3E 70 02                		mov.L	#2, [r7]
 561                             		.balign 2,3,3
 562                             	.L82:
 609:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				while( !WDT_IsJustBeforePermittedWindow() )
 563                             		.loc 1 609 0
 564 005c 05 00 00 00             		bsr	_WDT_IsJustBeforePermittedWindow
 565                             	.LVL69:
 566 0060 61 01                   		cmp	#0, r1
 567 0062 20 FA                   		beq	.L82
 617:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				WDT_Refresh(); /* issue the untimely refresh */
 568                             		.loc 1 617 0
 569 0064 05 00 00 00             		bsr	_WDT_Refresh
 570                             	.LVL70:
 571                             		.balign 2,3,3
 572                             	.L83:
 573 0068 2E 00                   		bra	.L83
 574                             	.L79:
 689:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			if(WDT_UntimelyResetOccurred())
 575                             		.loc 1 689 0
 576 006a 05 00 00 00             		bsr	_WDT_UntimelyResetOccurred
 577                             	.LVL71:
 578 006e 61 01                   		cmp	#0, r1
 579 0070 20 16                   		beq	.L84
 693:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				WDT_ClearUntimelyResetOccurred();
 580                             		.loc 1 693 0
 581 0072 05 00 00 00             		bsr	_WDT_ClearUntimelyResetOccurred
 582                             	.LVL72:
 696:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				OCRST_RestoreResetValue(bkpResetSrc);
 583                             		.loc 1 696 0
 584 0076 FB E2 00 00 00 00       		mov.L	#_bkpResetSrc.10388, r14
 585 007c EC E1                   		mov.L	[r14], r1
 586 007e 05 00 00 00             		bsr	_OCRST_RestoreResetValue
 587                             	.LVL73:
 701:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				WDTCheckStep=WDTCHECK_RESTART;
 588                             		.loc 1 701 0
 589 0082 3E 70 05                		mov.L	#5, [r7]
 590 0085 0D                      		bra	.L85
 591                             	.LVL74:
 592                             	.L84:
 706:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 				WDTCheckStep=WDTCHECK_ERROR; /* this assignment is for debug purpose only */
 593                             		.loc 1 706 0
 594 0086 3E 70 04                		mov.L	#4, [r7]
 595 0089 0F                      		bra	.L76
 596                             	.LVL75:
 597                             	.L85:
 598                             	.LBE15:
 599                             	.LBE14:
 736:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 600                             		.loc 1 736 0
 601 008a 7E B7                   		pop	r7
 602                             	.LBB17:
 603                             	.LBB18:
 476:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	IEC60335_initClockTestHW();
 604                             		.loc 1 476 0
 605 008c 04 00 00 00             		bra	_IEC60335_initClockTestHW
 606                             	.LVL76:
 607                             	.L76:
 608                             	.LBE18:
 609                             	.LBE17:
 610                             	.LBB19:
 611                             	.LBB16:
 718:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		LIB_ClassB_WDTCheckInit();
 612                             		.loc 1 718 0
 613 0090 05 00 00 00             		bsr	_LIB_ClassB_WDTCheckInit
 614                             	.LVL77:
 719:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		CLASSB_FATAL(PLT_ERROR_CLASSBCHECK_WDTEST);
 615                             		.loc 1 719 0
 616 0094 75 41 32                		mov.L	#50, r1
 617 0097 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 618                             	.LVL78:
 619 009b 2E EF                   		bra	.L85
 620                             	.LBE16:
 621                             	.LBE19:
 622                             	.LFE9:
 624 009d 03                      		.section	.text.InitMemoryCheck,"ax",@progbits
 625                             		.global	_InitMemoryCheck
 627                             	_InitMemoryCheck:
 628                             	.LFB10:
 740:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 629                             		.loc 1 740 0
 630 0000 6E 7A                   		pushm	r7-r10
 631                             	.LCFI5:
 632                             	.LVL79:
 633                             	.LBB24:
 634                             	.LBB25:
 913:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	IEC60335_RamMarchC((const uint32_t) &ClassB_CheckRamTestState, sizeof(ClassB_CheckRamTestState), F
 635                             		.loc 1 913 0
 636 0002 FB 12 00 00 00 00       		mov.L	#_ClassB_CheckRamTestState, r1
 637 0008 66 C2                   		mov.L	#12, r2
 638 000a 66 03                   		mov.L	#0, r3
 639 000c 05 00 00 00             		bsr	_IEC60335_RamMarchC
 640                             	.LVL80:
 916:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	ClassB_CheckRamTestState.AreaIndex=CHECKRAM_AREA_NUM;
 641                             		.loc 1 916 0
 642 0010 FB 72 00 00 00 00       		mov.L	#_ClassB_CheckRamTestState, r7
 643 0016 3C 70 05                		mov.B	#5, [r7]
 917:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	ClassB_CheckRamTestState.RemainingBytes=0;
 644                             		.loc 1 917 0
 645 0019 3E 72 00                		mov.L	#0, 8[r7]
 753:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	CheckRAM_bytesChecked = 0;
 646                             		.loc 1 753 0
 647 001c 66 07                   		mov	#0, r7
 648                             	.LVL81:
 649                             		.balign 2,3,1
 650                             	.L103:
 651                             	.LBE25:
 652                             	.LBE24:
 757:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		checkRes = CheckRAM_Manager(FALSE);
 653                             		.loc 1 757 0
 654 001e 66 01                   		mov.L	#0, r1
 655 0020 05 00 00 00             		bsr	_CheckRAM_Manager
 656                             	.LVL82:
 657 0024 CF 1A                   		mov.B	r1, r10
 658                             	.LVL83:
 759:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		if(checkRes == CHECK_FAILED)
 659                             		.loc 1 759 0
 660 0026 5B 1E                   		movu.B	r1, r14
 661 0028 61 2E                   		cmp	#2, r14
 662 002a 18                      		bne	.L101
 761:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			CLASSB_FATAL(PLT_ERROR_CLASSBCHECK_RAM);
 663                             		.loc 1 761 0
 664 002b 75 41 33                		mov.L	#51, r1
 665                             	.LVL84:
 666 002e 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 667                             	.LVL85:
 668                             		.balign 2,3,1
 669                             	.L101:
 764:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		CheckRAM_bytesChecked += CONFIG_LIB_CLASS_B_RAM_CHUNKSIZE;
 670                             		.loc 1 764 0
 671 0032 62 87                   		add	#8, r7
 672                             	.LVL86:
 765:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		if (CheckRAM_bytesChecked >= CONFIG_LIB_CLASS_B_RAM_REFRESH_BYTES)
 673                             		.loc 1 765 0
 674 0034 5F 7E                   		movu.W	r7, r14
 675 0036 76 0E FF 07             		cmp	#0x7ff, r14
 676 003a 25 08                   		bleu	.L102
 767:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			OCWDT_RefreshSync();
 677                             		.loc 1 767 0
 678 003c 05 00 00 00             		bsr	_OCWDT_RefreshSync
 679                             	.LVL87:
 768:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			CheckRAM_bytesChecked = 0;
 680                             		.loc 1 768 0
 681 0040 66 07                   		mov	#0, r7
 682                             	.LVL88:
 683                             		.balign 2,3,1
 684                             	.L102:
 771:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	}while(checkRes == CHECK_RUNNING);
 685                             		.loc 1 771 0
 686 0042 5B AA                   		movu.B	r10, r10
 687 0044 61 1A                   		cmp	#1, r10
 688 0046 20 D8                   		beq	.L103
 689                             	.LVL89:
 690                             	.LBB26:
 691                             	.LBB27:
 179:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c ****     CheckFlash_SetBlock(0);
 692                             		.loc 1 179 0
 693 0048 66 01                   		mov	#0, r1
 694 004a 05 00 00 00             		bsr	_CheckFlash_SetBlock
 695                             	.LVL90:
 696                             		.balign 2,3,2
 697                             	.L106:
 698                             	.LBE27:
 699                             	.LBE26:
 781:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		  checkRes = CheckFlash_Manager(CONFIG_LIB_CLASS_B_FLASH_CHUNKSIZE, TRUE);
 700                             		.loc 1 781 0
 701 004e 75 41 20                		mov	#32, r1
 702 0051 66 12                   		mov.L	#1, r2
 703 0053 05 00 00 00             		bsr	_CheckFlash_Manager
 704                             	.LVL91:
 705 0057 CF 1A                   		mov.B	r1, r10
 706                             	.LVL92:
 782:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		  CheckRAM_bytesChecked += CONFIG_LIB_CLASS_B_FLASH_CHUNKSIZE;
 707                             		.loc 1 782 0
 708 0059 71 77 20                		add	#32, r7
 709                             	.LVL93:
 783:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		  if( checkRes == CHECK_FAILED )
 710                             		.loc 1 783 0
 711 005c 5B 1E                   		movu.B	r1, r14
 712 005e 61 2E                   		cmp	#2, r14
 713 0060 18                      		bne	.L104
 785:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			  CLASSB_FATAL(PLT_ERROR_CLASSBCHECK_FLASH);
 714                             		.loc 1 785 0
 715 0061 75 41 34                		mov.L	#52, r1
 716                             	.LVL94:
 717 0064 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 718                             	.LVL95:
 719                             		.balign 2,3,1
 720                             	.L104:
 787:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		  if (CheckRAM_bytesChecked >= CONFIG_LIB_CLASS_B_FLASH_REFRESH_BYTES)
 721                             		.loc 1 787 0
 722 0068 DF 7E                   		mov.W	r7, r14
 723 006a 61 0E                   		cmp	#0, r14
 724 006c 28 08                   		bge	.L105
 789:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			  OCWDT_RefreshSync();
 725                             		.loc 1 789 0
 726 006e 05 00 00 00             		bsr	_OCWDT_RefreshSync
 727                             	.LVL96:
 790:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			  CheckRAM_bytesChecked = 0;
 728                             		.loc 1 790 0
 729 0072 66 07                   		mov	#0, r7
 730                             	.LVL97:
 731                             		.balign 2,3,1
 732                             	.L105:
 793:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	while( checkRes == CHECK_RUNNING );
 733                             		.loc 1 793 0
 734 0074 5B AA                   		movu.B	r10, r10
 735 0076 61 1A                   		cmp	#1, r10
 736 0078 20 D6                   		beq	.L106
 797:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** }
 737                             		.loc 1 797 0
 738 007a 3F 7A 04                		rtsd	#16, r7-r10
 739                             	.LFE10:
 741 007d 03                      		.section	.text.ADC_CheckInit,"ax",@progbits
 742                             		.global	_ADC_CheckInit
 744                             	_ADC_CheckInit:
 745                             	.LFB11:
 819:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 746                             		.loc 1 819 0
 820:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	if(IEC60335_testFailed == IEC60335_ADCtest_POST())
 747                             		.loc 1 820 0
 748 0000 05 00 00 00             		bsr	_IEC60335_ADCtest_POST
 749                             	.LVL98:
 750 0004 61 01                   		cmp	#0, r1
 751 0006 18                      		bne	.L117
 822:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		CLASSB_FATAL(PLT_ERROR_CLASSBCHECK_ADC);
 752                             		.loc 1 822 0
 753 0007 75 41 35                		mov.L	#53, r1
 754 000a 05 00 00 00             		bsr	_LIB_Error_Fatal_Handler
 755                             	.LVL99:
 756                             		.balign 2,3,3
 757                             	.L117:
 825:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	IEC60335_ADCtest_BITS_start();
 758                             		.loc 1 825 0
 759 000e 05 00 00 00             		bsr	_IEC60335_ADCtest_BITS_start
 760                             	.LVL100:
 827:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	ADC_CheckFilter = 0;
 761                             		.loc 1 827 0
 762 0012 FB E2 00 00 00 00       		mov.L	#_ADC_CheckFilter, r14
 763 0018 F8 E5 00                		mov.W	#0, [r14]
 764 001b 02                      		rts
 765                             	.LFE11:
 767                             		.section	.text.ADC_Check,"ax",@progbits
 768                             		.global	_ADC_Check
 770                             	_ADC_Check:
 771                             	.LFB12:
 852:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** {
 772                             		.loc 1 852 0
 856:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	retVal = (IEC60335_ADCtest_BITS_check() != IEC60335_testPassed);
 773                             		.loc 1 856 0
 774 0000 05 00 00 00             		bsr	_IEC60335_ADCtest_BITS_check
 775                             	.LVL101:
 776 0004 FB E2 00 00 00 00       		mov.L	#_ADC_CheckFilter, r14
 865:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		ADC_CheckFilter += CONFIG_LIB_CLASS_B_ADC_FLTR_INCR;
 777                             		.loc 1 865 0
 778 000a DC E4                   		mov.W	[r14], r4
 863:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 	if(retVal)
 779                             		.loc 1 863 0
 780 000c 61 11                   		cmp	#1, r1
 781 000e 20 17                   		beq	.L119
 865:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		ADC_CheckFilter += CONFIG_LIB_CLASS_B_ADC_FLTR_INCR;
 782                             		.loc 1 865 0
 783 0010 72 44 E8 03             		add	#0x3e8, r4
 784 0014 D3 E4                   		mov.W	r4, [r14]
 866:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		if(ADC_CheckFilter > CONFIG_LIB_CLASS_B_ADC_FLTR_MAXTH)
 785                             		.loc 1 866 0
 786 0016 5F 44                   		movu.W	r4, r4
 787 0018 76 04 88 13             		cmp	#0x1388, r4
 788 001c 25 12                   		bleu	.L118
 868:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			CLASSB_FATAL(PLT_ERROR_CLASSBCHECK_ADC);
 789                             		.loc 1 868 0
 790 001e 75 41 35                		mov.L	#53, r1
 791                             	.LVL102:
 792 0021 04 00 00 00             		bra	_LIB_Error_Fatal_Handler
 793                             	.LVL103:
 794                             	.L119:
 873:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 		if (ADC_CheckFilter > 0)
 795                             		.loc 1 873 0
 796 0025 5F 43                   		movu.W	r4, r3
 797 0027 61 03                   		cmp	#0, r3
 798 0029 15                      		beq	.L118
 875:C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck\LIB_ClassBCheck.c **** 			ADC_CheckFilter--;
 799                             		.loc 1 875 0
 800 002a 60 14                   		sub	#1, r4
 801 002c D3 E4                   		mov.W	r4, [r14]
 802                             	.L118:
 803 002e 02                      		rts
 804                             	.LFE12:
 806                             		.section	.bss.bkpResetSrc.10388,"aw",@nobits
 807                             		.balign 4
 810                             	_bkpResetSrc.10388:
 811 0000 00 00 00 00             		.zero	4
 812                             		.section	.bss.WDTCheckStep,"aw",@nobits
 813                             		.balign 4
 816                             	_WDTCheckStep:
 817 0000 00 00 00 00             		.zero	4
 818                             		.comm	_ADC_CheckFilter,2,2
 819                             		.comm	_flashChkCodeEval,2,2
 820                             		.section	.CLASS_B_temp,"aw",@progbits
 821                             		.balign 4
 824                             	_ClassB_CheckRamTestState:
 825 0000 00 00 00 00 00 00 00 00 		.zero	12
 825      00 00 00 00 
 826                             		.section	.bss.flashTestStatus,"aw",@nobits
 827                             		.balign 4
 830                             	_flashTestStatus:
 831 0000 00 00 00 00 00 00 00 00 		.zero	12
 831      00 00 00 00 
 1008                             	.Letext0:
 1009                             		.file 2 "C:\\Workspace\\FW_Inertia\\branch_indesit\\HAL\\HAL_General/StandardTypes.h"
 1010                             		.file 3 "C:\\Workspace\\FW_Inertia\\branch_indesit\\OS\\EmbOS\\RX200_GNU\\V388\\Inc/RTOS.h"
 1011                             		.file 4 "C:/Workspace/FW_Inertia/branch_indesit/PlatformLibrary/LIB_SecurityCheck/LIB_ClassBCheck.
 1012                             		.file 5 "C:\\Workspace\\FW_Inertia\\branch_indesit\\PlatformLibrary\\LIB_Error/LIB_Error.h"
 1013                             		.file 6 "C:\\Workspace\\FW_Inertia\\branch_indesit\\PlatformLibrary\\LIB_Setting/LIB_Setting.h"
 1014                             		.file 7 "C:\\Workspace\\FW_Inertia\\branch_indesit\\HAL\\RN_RX200\\IEC60335_B_libs\\inc/IEC60335.h
 1015                             		.file 8 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Drivers/IO_driver.h"
 1016                             		.file 9 "C:\\Workspace\\FW_Inertia\\branch_indesit\\HAL\\RN_RX200/RN_RX200_hal.h"
 1017                             		.file 10 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Drivers\\OCCRC/OCCRC_drv.h"
 1018                             		.file 11 "C:\\Workspace\\FW_Inertia\\branch_indesit\\PlatformLibrary\\LIB_Reset/LIB_Reset.h"
 1019                             		.file 12 "C:\\Workspace\\FW_Inertia\\branch_indesit\\PlatformLibrary\\LIB_Reset/LIB_ResetExp.h"
 1020                             		.file 13 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Drivers\\OCRST/OCRST_drv.h"
 1021                             		.file 14 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Drivers\\OCWDT/OCWDT_drv.h"
DEFINED SYMBOLS
                            *ABS*:00000000 LIB_ClassBCheck.c
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:6      .text.CheckRAM_Manager:00000000 _CheckRAM_Manager
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:11     .text.CheckRAM_Manager:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:824    .CLASS_B_temp:00000000 _ClassB_CheckRamTestState
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:202    .text.CheckFlash_SetBlock:00000000 _CheckFlash_SetBlock
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:206    .text.CheckFlash_SetBlock:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:830    .bss.flashTestStatus:00000000 _flashTestStatus
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:273    .text.RegCheck:00000000 _RegCheck
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:277    .text.RegCheck:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:284    .text.CheckFlash_Init:00000000 _CheckFlash_Init
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:289    .text.CheckFlash_Init:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:298    .text.CheckFlash_Manager:00000000 _CheckFlash_Manager
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:302    .text.CheckFlash_Manager:00000000 L0
                            *COM*:00000002 _flashChkCodeEval
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:429    .text.LIB_ClassB_Keywords_BIST:00000000 _LIB_ClassB_Keywords_BIST
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:433    .text.LIB_ClassB_Keywords_BIST:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:447    .text.LIB_ClassB_RAM_BIST:00000000 _LIB_ClassB_RAM_BIST
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:451    .text.LIB_ClassB_RAM_BIST:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:468    .text.CheckClock_Init:00000000 _CheckClock_Init
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:472    .text.CheckClock_Init:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:479    .text.LIB_ClassB_WDTCheckInit:00000000 _LIB_ClassB_WDTCheckInit
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:483    .text.LIB_ClassB_WDTCheckInit:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:816    .bss.WDTCheckStep:00000000 _WDTCheckStep
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:496    .text.InitCheck:00000000 _InitCheck
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:499    .text.InitCheck:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:810    .bss.bkpResetSrc.10388:00000000 _bkpResetSrc.10388
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:627    .text.InitMemoryCheck:00000000 _InitMemoryCheck
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:630    .text.InitMemoryCheck:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:744    .text.ADC_CheckInit:00000000 _ADC_CheckInit
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:748    .text.ADC_CheckInit:00000000 L0
                            *COM*:00000002 _ADC_CheckFilter
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:770    .text.ADC_Check:00000000 _ADC_Check
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:774    .text.ADC_Check:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:833    .debug_frame:00000000 .Lframe0
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:7      .text.CheckRAM_Manager:00000000 .LFB14
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:203    .text.CheckFlash_SetBlock:00000000 .LFB1
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:274    .text.RegCheck:00000000 .LFB0
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:285    .text.CheckFlash_Init:00000000 .LFB2
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:299    .text.CheckFlash_Manager:00000000 .LFB3
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:430    .text.LIB_ClassB_Keywords_BIST:00000000 .LFB4
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:448    .text.LIB_ClassB_RAM_BIST:00000000 .LFB5
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:469    .text.CheckClock_Init:00000000 .LFB6
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:480    .text.LIB_ClassB_WDTCheckInit:00000000 .LFB7
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:497    .text.InitCheck:00000000 .LFB9
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:628    .text.InitMemoryCheck:00000000 .LFB10
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:745    .text.ADC_CheckInit:00000000 .LFB11
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:771    .text.ADC_Check:00000000 .LFB12
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:3398   .debug_abbrev:00000000 .Ldebug_abbrev0
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5022   .debug_str:000003ee .LASF256
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5138   .debug_str:00000873 .LASF257
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4874   .debug_ranges:00000000 .Ldebug_ranges0
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4916   .debug_line:00000000 .Ldebug_line0
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5234   .debug_str:00000c58 .LASF0
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5274   .debug_str:00000dce .LASF2
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5402   .debug_str:0000133a .LASF1
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5018   .debug_str:000003c0 .LASF3
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5358   .debug_str:00001156 .LASF4
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5300   .debug_str:00000ed7 .LASF5
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5028   .debug_str:00000453 .LASF6
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5124   .debug_str:000007f3 .LASF7
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5170   .debug_str:000009f4 .LASF8
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5376   .debug_str:000011dc .LASF9
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5398   .debug_str:000012ff .LASF10
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5414   .debug_str:0000139c .LASF11
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4964   .debug_str:000001a2 .LASF12
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5356   .debug_str:0000114d .LASF13
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5408   .debug_str:0000136e .LASF14
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5374   .debug_str:000011cf .LASF15
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5172   .debug_str:000009fc .LASF16
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5348   .debug_str:0000110f .LASF17
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4970   .debug_str:000001ea .LASF18
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5146   .debug_str:00000906 .LASF19
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5342   .debug_str:000010b2 .LASF33
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5038   .debug_str:00000490 .LASF20
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5120   .debug_str:000007d8 .LASF21
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4996   .debug_str:0000030b .LASF22
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4918   .debug_str:00000000 .LASF23
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5422   .debug_str:000013eb .LASF24
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4988   .debug_str:00000294 .LASF25
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5328   .debug_str:0000103f .LASF26
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5246   .debug_str:00000cbe .LASF27
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5076   .debug_str:0000060b .LASF28
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5114   .debug_str:0000079d .LASF29
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5216   .debug_str:00000b73 .LASF30
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5198   .debug_str:00000aef .LASF31
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5236   .debug_str:00000c62 .LASF32
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5188   .debug_str:00000ab0 .LASF34
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4934   .debug_str:000000aa .LASF35
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5202   .debug_str:00000b11 .LASF36
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5196   .debug_str:00000ae9 .LASF37
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5136   .debug_str:00000867 .LASF38
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5200   .debug_str:00000afe .LASF39
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5012   .debug_str:0000038c .LASF40
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5184   .debug_str:00000a89 .LASF41
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5290   .debug_str:00000e7b .LASF42
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5438   .debug_str:00001486 .LASF43
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5338   .debug_str:0000108c .LASF44
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5008   .debug_str:0000036d .LASF45
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5036   .debug_str:00000489 .LASF46
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5310   .debug_str:00000f32 .LASF47
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5238   .debug_str:00000c6f .LASF48
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5014   .debug_str:00000398 .LASF49
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5194   .debug_str:00000adc .LASF50
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5130   .debug_str:0000083d .LASF51
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5396   .debug_str:000012f7 .LASF52
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5276   .debug_str:00000dd7 .LASF53
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5230   .debug_str:00000c05 .LASF54
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5432   .debug_str:00001465 .LASF55
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5176   .debug_str:00000a1f .LASF56
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5174   .debug_str:00000a08 .LASF57
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5134   .debug_str:00000862 .LASF58
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5418   .debug_str:000013d7 .LASF59
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4956   .debug_str:0000015e .LASF60
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5204   .debug_str:00000b1a .LASF61
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4966   .debug_str:000001af .LASF62
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5364   .debug_str:0000117f .LASF63
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5110   .debug_str:00000778 .LASF64
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5048   .debug_str:000004de .LASF65
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4974   .debug_str:000001fb .LASF66
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5334   .debug_str:00001072 .LASF67
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5144   .debug_str:000008fb .LASF68
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5382   .debug_str:00001238 .LASF69
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5046   .debug_str:000004d9 .LASF70
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5410   .debug_str:00001377 .LASF71
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5292   .debug_str:00000e8c .LASF72
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5066   .debug_str:000005a6 .LASF73
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5420   .debug_str:000013e0 .LASF74
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5386   .debug_str:00001260 .LASF75
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5372   .debug_str:000011c3 .LASF76
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5186   .debug_str:00000a93 .LASF77
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5068   .debug_str:000005ae .LASF78
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5270   .debug_str:00000da8 .LASF79
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5272   .debug_str:00000dbb .LASF80
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5086   .debug_str:00000687 .LASF81
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5088   .debug_str:0000069a .LASF82
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5350   .debug_str:00001114 .LASF83
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5264   .debug_str:00000d6b .LASF84
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5278   .debug_str:00000de8 .LASF85
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5280   .debug_str:00000dfd .LASF86
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5288   .debug_str:00000e4c .LASF87
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5322   .debug_str:00000fef .LASF88
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5344   .debug_str:000010c1 .LASF89
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4968   .debug_str:000001b6 .LASF90
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5226   .debug_str:00000bc2 .LASF91
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5380   .debug_str:00001202 .LASF92
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5178   .debug_str:00000a29 .LASF93
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5232   .debug_str:00000c23 .LASF94
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5416   .debug_str:000013a3 .LASF95
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5148   .debug_str:0000090e .LASF96
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5150   .debug_str:00000925 .LASF97
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5152   .debug_str:0000093c .LASF98
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5154   .debug_str:00000953 .LASF99
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5156   .debug_str:0000096a .LASF100
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5158   .debug_str:00000981 .LASF101
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5160   .debug_str:00000998 .LASF102
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5162   .debug_str:000009af .LASF103
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5240   .debug_str:00000c76 .LASF104
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5242   .debug_str:00000c8e .LASF105
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5244   .debug_str:00000ca6 .LASF106
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5248   .debug_str:00000cc8 .LASF107
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5010   .debug_str:00000374 .LASF108
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5252   .debug_str:00000cf3 .LASF109
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5254   .debug_str:00000d0b .LASF110
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5256   .debug_str:00000d23 .LASF111
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5052   .debug_str:000004f7 .LASF112
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5054   .debug_str:00000510 .LASF113
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5056   .debug_str:00000529 .LASF114
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5058   .debug_str:00000542 .LASF115
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5060   .debug_str:0000055b .LASF116
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5298   .debug_str:00000eb3 .LASF117
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5062   .debug_str:00000574 .LASF118
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5064   .debug_str:0000058d .LASF119
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5098   .debug_str:000006f0 .LASF120
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5026   .debug_str:0000042e .LASF121
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5020   .debug_str:000003c9 .LASF122
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5078   .debug_str:00000610 .LASF123
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5100   .debug_str:00000710 .LASF124
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5250   .debug_str:00000ce0 .LASF125
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5210   .debug_str:00000b4e .LASF126
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5218   .debug_str:00000b7d .LASF127
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4980   .debug_str:00000235 .LASF128
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5442   .debug_str:000014a0 .LASF129
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5368   .debug_str:00001196 .LASF130
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5024   .debug_str:00000414 .LASF131
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5206   .debug_str:00000b1f .LASF132
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5104   .debug_str:00000744 .LASF133
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4936   .debug_str:000000b0 .LASF134
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5084   .debug_str:00000663 .LASF135
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5220   .debug_str:00000b8c .LASF136
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5412   .debug_str:00001382 .LASF137
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5182   .debug_str:00000a6b .LASF138
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5394   .debug_str:000012cc .LASF139
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4924   .debug_str:00000027 .LASF140
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5042   .debug_str:000004a0 .LASF141
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4994   .debug_str:000002e7 .LASF142
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5426   .debug_str:0000140a .LASF143
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5318   .debug_str:00000fa2 .LASF144
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4926   .debug_str:0000004c .LASF145
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5166   .debug_str:000009d5 .LASF146
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5316   .debug_str:00000f81 .LASF147
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5304   .debug_str:00000ef9 .LASF148
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5082   .debug_str:00000640 .LASF149
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5400   .debug_str:0000130b .LASF150
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5390   .debug_str:0000128a .LASF151
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5072   .debug_str:000005d3 .LASF152
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4990   .debug_str:0000029d .LASF153
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5312   .debug_str:00000f3e .LASF154
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5320   .debug_str:00000fc1 .LASF155
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5080   .debug_str:00000625 .LASF156
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5126   .debug_str:00000801 .LASF157
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5424   .debug_str:000013f0 .LASF158
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5258   .debug_str:00000d3b .LASF159
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4984   .debug_str:00000261 .LASF160
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5112   .debug_str:0000077f .LASF161
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4928   .debug_str:00000066 .LASF162
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5430   .debug_str:00001448 .LASF163
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5286   .debug_str:00000e37 .LASF164
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5268   .debug_str:00000d8f .LASF165
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5406   .debug_str:00001354 .LASF166
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5388   .debug_str:00001271 .LASF167
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4932   .debug_str:0000008f .LASF168
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5016   .debug_str:000003a6 .LASF169
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5326   .debug_str:00001034 .LASF170
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4960   .debug_str:00000171 .LASF171
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5306   .debug_str:00000f1b .LASF172
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5032   .debug_str:0000047a .LASF173
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5094   .debug_str:000006d1 .LASF174
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5002   .debug_str:0000033f .LASF175
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5314   .debug_str:00000f6f .LASF176
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4998   .debug_str:00000315 .LASF177
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5352   .debug_str:00001127 .LASF178
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5208   .debug_str:00000b44 .LASF179
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5296   .debug_str:00000ea6 .LASF180
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4920   .debug_str:00000008 .LASF181
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5384   .debug_str:00001243 .LASF182
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5260   .debug_str:00000d53 .LASF183
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5262   .debug_str:00000d5b .LASF184
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4954   .debug_str:00000152 .LASF185
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5332   .debug_str:00001060 .LASF186
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5336   .debug_str:0000107d .LASF187
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5222   .debug_str:00000bac .LASF188
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5224   .debug_str:00000bb7 .LASF189
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5228   .debug_str:00000bf8 .LASF190
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4982   .debug_str:00000252 .LASF191
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5370   .debug_str:000011b2 .LASF192
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5190   .debug_str:00000ac4 .LASF193
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5362   .debug_str:0000116f .LASF234
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5214   .debug_str:00000b6c .LASF197
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4938   .debug_str:000000ca .LASF226
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4944   .debug_str:000000fc .LASF258
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:198    .text.CheckRAM_Manager:00000133 .LFE14
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4456   .debug_loc:00000000 .LLST0
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4469   .debug_loc:00000020 .LLST1
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5308   .debug_str:00000f2b .LASF194
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4487   .debug_loc:0000004c .LLST2
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5436   .debug_str:0000147d .LASF195
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4502   .debug_loc:00000075 .LLST3
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5074   .debug_str:00000601 .LASF196
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4533   .debug_loc:000000c3 .LLST4
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5192   .debug_str:00000ad5 .LASF207
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:18     .text.CheckRAM_Manager:0000000b .LVL1
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:33     .text.CheckRAM_Manager:0000002c .LVL2
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:107    .text.CheckRAM_Manager:000000aa .LVL9
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:173    .text.CheckRAM_Manager:00000113 .LVL15
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5122   .debug_str:000007df .LASF259
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:268    .text.CheckFlash_SetBlock:00000062 .LFE1
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4540   .debug_loc:000000d6 .LLST5
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5324   .debug_str:0000102b .LASF198
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4558   .debug_loc:00000102 .LLST6
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4582   .debug_loc:00000142 .LLST7
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:221    .text.CheckFlash_SetBlock:0000001f .LVL21
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5034   .debug_str:00000480 .LASF203
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:279    .text.RegCheck:00000004 .LFE0
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:278    .text.RegCheck:00000004 .LVL29
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:293    .text.CheckFlash_Init:00000006 .LFE2
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4590   .debug_loc:00000156 .LLST8
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:292    .text.CheckFlash_Init:00000006 .LVL32
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5092   .debug_str:000006be .LASF260
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:424    .text.CheckFlash_Manager:000000a7 .LFE3
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4604   .debug_loc:00000177 .LLST9
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4940   .debug_str:000000da .LASF199
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4617   .debug_loc:00000197 .LLST10
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4922   .debug_str:00000017 .LASF200
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4631   .debug_loc:000001b8 .LLST11
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5354   .debug_str:00001142 .LASF201
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4642   .debug_loc:000001d6 .LLST12
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5404   .debug_str:0000134d .LASF202
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4668   .debug_loc:00000217 .LLST13
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4679   .debug_loc:00000235 .LLST14
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:405    .text.CheckFlash_Manager:00000096 .LBB8
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:416    .text.CheckFlash_Manager:000000a0 .LBE8
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:410    .text.CheckFlash_Manager:0000009c .LVL51
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:336    .text.CheckFlash_Manager:00000033 .LVL40
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:342    .text.CheckFlash_Manager:00000038 .LVL42
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:360    .text.CheckFlash_Manager:00000058 .LVL44
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:387    .text.CheckFlash_Manager:00000085 .LVL46
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:399    .text.CheckFlash_Manager:00000092 .LVL49
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5346   .debug_str:000010f6 .LASF204
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:442    .text.LIB_ClassB_Keywords_BIST:0000000c .LFE4
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:434    .text.LIB_ClassB_Keywords_BIST:00000004 .LVL54
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:439    .text.LIB_ClassB_Keywords_BIST:0000000b .LVL55
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5140   .debug_str:000008ce .LASF205
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:463    .text.LIB_ClassB_RAM_BIST:00000013 .LFE5
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:453    .text.LIB_ClassB_RAM_BIST:00000006 .LVL56
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:460    .text.LIB_ClassB_RAM_BIST:00000012 .LVL57
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:474    .text.CheckClock_Init:00000004 .LFE6
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:473    .text.CheckClock_Init:00000004 .LVL58
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4946   .debug_str:0000010d .LASF206
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:491    .text.LIB_ClassB_WDTCheckInit:00000011 .LFE7
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:487    .text.LIB_ClassB_WDTCheckInit:0000000d .LVL59
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:490    .text.LIB_ClassB_WDTCheckInit:00000011 .LVL60
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5168   .debug_str:000009ec .LASF261
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5106   .debug_str:00000760 .LASF208
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4952   .debug_str:00000149 .LASF209
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4958   .debug_str:00000167 .LASF210
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:622    .text.InitCheck:0000009d .LFE9
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4702   .debug_loc:0000026d .LLST15
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:502    .text.InitCheck:00000002 .LBB14
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4715   .debug_loc:0000028d .LLST16
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4738   .debug_loc:000002c5 .LLST17
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:506    .text.InitCheck:00000006 .LVL62
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:513    .text.InitCheck:0000000f .LVL63
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:518    .text.InitCheck:00000014 .LVL64
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:523    .text.InitCheck:0000001d .LVL65
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:541    .text.InitCheck:0000003a .LVL66
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:553    .text.InitCheck:00000051 .LVL67
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:558    .text.InitCheck:00000059 .LVL68
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:565    .text.InitCheck:00000060 .LVL69
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:570    .text.InitCheck:00000068 .LVL70
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:577    .text.InitCheck:0000006e .LVL71
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:582    .text.InitCheck:00000076 .LVL72
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:587    .text.InitCheck:00000082 .LVL73
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:614    .text.InitCheck:00000094 .LVL77
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:618    .text.InitCheck:0000009b .LVL78
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:602    .text.InitCheck:0000008c .LBB17
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:609    .text.InitCheck:00000090 .LBE17
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:606    .text.InitCheck:00000090 .LVL76
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4948   .debug_str:00000125 .LASF262
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5266   .debug_str:00000d7f .LASF211
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:739    .text.InitMemoryCheck:0000007d .LFE10
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4745   .debug_loc:000002d8 .LLST18
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4972   .debug_str:000001f2 .LASF212
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4758   .debug_loc:000002f8 .LLST19
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4950   .debug_str:00000133 .LASF213
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4782   .debug_loc:00000338 .LLST20
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:633    .text.InitMemoryCheck:00000002 .LBB24
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:652    .text.InitMemoryCheck:0000001e .LBE24
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:640    .text.InitMemoryCheck:00000010 .LVL80
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:690    .text.InitMemoryCheck:00000048 .LBB26
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:699    .text.InitMemoryCheck:0000004e .LBE26
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:695    .text.InitMemoryCheck:0000004e .LVL90
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:656    .text.InitMemoryCheck:00000024 .LVL82
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:667    .text.InitMemoryCheck:00000032 .LVL85
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:679    .text.InitMemoryCheck:00000040 .LVL87
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:704    .text.InitMemoryCheck:00000057 .LVL91
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:718    .text.InitMemoryCheck:00000068 .LVL95
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:727    .text.InitMemoryCheck:00000072 .LVL96
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4930   .debug_str:00000081 .LASF214
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:765    .text.ADC_CheckInit:0000001c .LFE11
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:749    .text.ADC_CheckInit:00000004 .LVL98
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:755    .text.ADC_CheckInit:0000000e .LVL99
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:760    .text.ADC_CheckInit:00000012 .LVL100
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5282   .debug_str:00000e12 .LASF215
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:804    .text.ADC_Check:0000002f .LFE12
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5360   .debug_str:00001168 .LASF216
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4812   .debug_loc:00000385 .LLST21
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:775    .text.ADC_Check:00000004 .LVL101
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:793    .text.ADC_Check:00000025 .LVL103
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5302   .debug_str:00000ee0 .LASF217
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5030   .debug_str:0000046a .LASF218
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5180   .debug_str:00000a5e .LASF219
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5040   .debug_str:00000496 .LASF220
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5090   .debug_str:000006ad .LASF221
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4986   .debug_str:00000280 .LASF222
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5164   .debug_str:000009c6 .LASF223
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5434   .debug_str:0000146c .LASF224
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5366   .debug_str:00001186 .LASF225
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4942   .debug_str:000000e8 .LASF227
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5284   .debug_str:00000e1c .LASF236
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5392   .debug_str:000012b9 .LASF228
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5428   .debug_str:0000142e .LASF230
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5340   .debug_str:00001099 .LASF229
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5102   .debug_str:0000072b .LASF231
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5006   .debug_str:0000035d .LASF232
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5378   .debug_str:000011ea .LASF233
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4962   .debug_str:0000018a .LASF235
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4978   .debug_str:00000220 .LASF237
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4976   .debug_str:00000207 .LASF238
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5142   .debug_str:000008e2 .LASF239
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5096   .debug_str:000006d8 .LASF240
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:4992   .debug_str:000002c8 .LASF241
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5116   .debug_str:000007a7 .LASF242
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5212   .debug_str:00000b5e .LASF243
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5294   .debug_str:00000e96 .LASF244
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5004   .debug_str:00000348 .LASF245
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5050   .debug_str:000004e4 .LASF246
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5132   .debug_str:00000842 .LASF247
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5108   .debug_str:0000076c .LASF248
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5330   .debug_str:00001046 .LASF249
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5118   .debug_str:000007c0 .LASF250
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5044   .debug_str:000004c6 .LASF251
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5440   .debug_str:0000148e .LASF252
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5070   .debug_str:000005bd .LASF253
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5000   .debug_str:00000323 .LASF254
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:5128   .debug_str:00000821 .LASF255
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:12     .text.CheckRAM_Manager:00000002 .LCFI0
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:10     .text.CheckRAM_Manager:00000000 .LVL0
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:166    .text.CheckRAM_Manager:00000105 .LVL14
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:67     .text.CheckRAM_Manager:00000072 .LVL5
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:69     .text.CheckRAM_Manager:00000073 .LVL6
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:75     .text.CheckRAM_Manager:00000076 .LVL7
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:111    .text.CheckRAM_Manager:000000b0 .LVL10
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:179    .text.CheckRAM_Manager:00000118 .LVL16
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:184    .text.CheckRAM_Manager:00000122 .LVL17
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:36     .text.CheckRAM_Manager:00000031 .LVL3
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:59     .text.CheckRAM_Manager:00000069 .LVL4
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:147    .text.CheckRAM_Manager:000000f2 .LVL11
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:153    .text.CheckRAM_Manager:000000f5 .LVL12
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:157    .text.CheckRAM_Manager:000000f7 .LVL13
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:194    .text.CheckRAM_Manager:00000130 .LVL18
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:86     .text.CheckRAM_Manager:00000091 .LVL8
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:207    .text.CheckFlash_SetBlock:00000002 .LCFI1
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:209    .text.CheckFlash_SetBlock:00000004 .LCFI2
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:205    .text.CheckFlash_SetBlock:00000000 .LVL19
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:217    .text.CheckFlash_SetBlock:0000000f .LVL20
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:231    .text.CheckFlash_SetBlock:0000002f .LVL25
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:248    .text.CheckFlash_SetBlock:00000044 .LVL26
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:260    .text.CheckFlash_SetBlock:00000056 .LVL28
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:224    .text.CheckFlash_SetBlock:00000025 .LVL22
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:226    .text.CheckFlash_SetBlock:00000027 .LVL23
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:287    .text.CheckFlash_Init:00000000 .LVL30
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:290    .text.CheckFlash_Init:00000002 .LVL31
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:303    .text.CheckFlash_Manager:00000002 .LCFI3
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:301    .text.CheckFlash_Manager:00000000 .LVL33
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:325    .text.CheckFlash_Manager:0000001f .LVL39
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:309    .text.CheckFlash_Manager:0000000c .LVL35
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:311    .text.CheckFlash_Manager:0000000e .LVL36
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:315    .text.CheckFlash_Manager:00000014 .LVL37
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:354    .text.CheckFlash_Manager:0000004c .LVL43
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:364    .text.CheckFlash_Manager:0000005e .LVL45
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:338    .text.CheckFlash_Manager:00000034 .LVL41
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:305    .text.CheckFlash_Manager:00000004 .LVL34
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:389    .text.CheckFlash_Manager:00000087 .LVL47
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:394    .text.CheckFlash_Manager:0000008b .LVL48
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:403    .text.CheckFlash_Manager:00000096 .LVL50
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:413    .text.CheckFlash_Manager:000000a0 .LVL52
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:420    .text.CheckFlash_Manager:000000a4 .LVL53
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:500    .text.InitCheck:00000002 .LCFI4
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:501    .text.InitCheck:00000002 .LVL61
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:591    .text.InitCheck:00000086 .LVL74
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:596    .text.InitCheck:0000008a .LVL75
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:631    .text.InitMemoryCheck:00000002 .LCFI5
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:632    .text.InitMemoryCheck:00000002 .LVL79
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:648    .text.InitMemoryCheck:0000001e .LVL81
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:658    .text.InitMemoryCheck:00000026 .LVL83
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:665    .text.InitMemoryCheck:0000002e .LVL84
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:706    .text.InitMemoryCheck:00000059 .LVL92
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:716    .text.InitMemoryCheck:00000064 .LVL94
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:682    .text.InitMemoryCheck:00000042 .LVL88
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:730    .text.InitMemoryCheck:00000074 .LVL97
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:791    .text.ADC_Check:00000021 .LVL102
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:1023   .debug_info:00000000 .Ldebug_info0
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:599    .text.InitCheck:0000008a .LBE14
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:610    .text.InitCheck:00000090 .LBB19
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:621    .text.InitCheck:0000009d .LBE19
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:503    .text.InitCheck:00000002 .LBB15
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:598    .text.InitCheck:0000008a .LBE15
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:611    .text.InitCheck:00000090 .LBB16
C:\Users\Andrea\AppData\Local\Temp\ccm3oUKs.s:620    .text.InitCheck:0000009d .LBE16

UNDEFINED SYMBOLS
_OS_DisableInterrupt
_OS_Global
_IEC60335_RamMarchC_SafeRam
_RamAreaTestTable
_OS_EnableInterrupt
_LIB_SettingBIST_StartSync
_AreaFlashCheckTable
_IEC60335_CPUregTest_BIST
_LIB_SettingBIST_StepSync
_OCCRC_Calculate
_LIB_SettingBIST_EndSync
_FlashCheckCode
_LIB_Error_Fatal_Handler
_LIB_CheckKeywordsRam
_LIB_Reset_ForceColdReset
_IEC60335_initClockTestHW
_WDT_ClearTimeoutExpired
_WDT_ClearUntimelyResetOccurred
_OCRST_GetResetSourceSync
_WDT_IsRunning
_OCWDT_StartSync
_OCRST_SaveResetValue
_WDT_TimeoutExpired
_WDT_IsJustBeforePermittedWindow
_WDT_Refresh
_WDT_UntimelyResetOccurred
_OCRST_RestoreResetValue
_IEC60335_RamMarchC
_OCWDT_RefreshSync
_IEC60335_ADCtest_POST
_IEC60335_ADCtest_BITS_start
_IEC60335_ADCtest_BITS_check

   1                             		.file	"DW_Fault.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.FLT_checkForMotorFault,"ax",@progbits
   6                             	_FLT_checkForMotorFault:
   7                             	.LFB19:
   8                             		.file 1 "C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control/DW_Fault.c"
   1:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /*
   2:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Copyright (c) 2004-2005, Indesit Company, I.D.D..
   3:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Tutti i diritti sono riservati. All rights reserved.
   4:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
   5:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
   6:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \defgroup	DW_Fault.c
   7:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \ingroup	ApplControl
   8:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
   9:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Il modulo contiene le funzioni di gestione Dei FAULT
  10:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
  11:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
  12:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
  13:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
  14:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \file	  	DW_Fault.c
  15:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \ingroup	DW_Fault
  16:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date		  14/04/2008
  17:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version	01.00.00 
  18:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author		Roberto Fioravanti - Valeria Catani
  19:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
  20:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \Par		History (titolo)
  21:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
  22:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
  23:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
  24:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
  25:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* ******** */
  26:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* Includes */
  27:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* ******** */
  28:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
  29:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** #include "CstmHeaders.h"
  30:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
  31:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
  32:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** #include "BusCommPltf_cfg.h"
  33:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** #include "OCI2C_drv.h"
  34:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** #include "OCUART_drv.h"
  35:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** #include "PM_PulseCounterExp.h"
  36:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* ****************** */
  37:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* Defines and Macros */
  38:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* ****************** */
  39:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
  40:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  
  41:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* *************************** */
  42:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* Typedef, Structs and Unions */
  43:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* *************************** */
  44:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
  45:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
  46:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* **************************** */
  47:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* Prototype of local functions */
  48:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* **************************** */
  49:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
  50:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_PulseCounterStill_Reset(void);
  51:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static uint8_t FLT_Res_Get_Subcode ( uint8_t error);
  52:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void  FLT_Reset_Circuit_Resistor_Fault(void);
  53:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static uint8_t FLT_IsCircuit_Resistor_Fault(void);
  54:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_drainFaultMgmt(void);				/*F03*/
  55:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_overflowFaultMgmt(void);			/*F01*/
  56:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_probeFaultMgmt(void);				/*F04*/
  57:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_resistorFaultMgmt(void);			/*F10 - F13*/
  58:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_doorCircuitFaultMgmt(void);			/*F13 sub 0x10*/
  59:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_heatToutFaultMgmt(void);			/*F08*/
  60:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
  61:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** #ifdef CONFIG_LIB_EXTERNAL_BOARD_SUPPORT
  62:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** void FLT_bldcFaultMgmt(void);
  63:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static bool_t FLT_checkForMotorFault(void);
  64:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static uint8_t GetAttempsTimeFault(uint8_t faultCode);
  65:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static uint8_t CheckExternalError(void);
  66:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** void FLT_BLDCUnblock_Mgmt (uint8_t faultcode);
  67:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** void FLT_bldcFaultReset(void);
  68:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static uint8_t Remap_Fault_step_2 (uint8_t subcode);
  69:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_BLDCSpeedCheck(void);
  70:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static uint8_t FLT_Get_Motor_Timeout (uint8_t pump_type, uint8_t  displacement);
  71:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** void FLT_bldcFaultLoadMgmt(void);
  72:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** #endif
  73:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
  74:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** #if (ITP_ZC_ENABLE == 1)
  75:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_checkZC(void);
  76:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** #endif /* ITP_ZC_ENABLE */
  77:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
  78:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_Update_warning_proc( uint8_t  flag_pending, uint8_t code, uint8_t subcode);
  79:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_VSFaultMgmt(void);			/* F01 subcode 02 + F15 */
  80:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static uint8_t  FLT_GetVS_timer(uint8_t displacement);
  81:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_pressSwitchFaultMgmt(void);		/*F05*/
  82:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_loadToutFaultMgmt(void);			/*F06*/
  83:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_pulseCounterKOFaultMgmt(void);		/*F07*/
  84:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_loadEVKOFaultMgmt(void);			/*F02*/
  85:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static uint8_t FLT_checkLoadEV(uint8_t mode);
  86:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
  87:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
  88:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* ****************** */
  89:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* Exported variables */
  90:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* ****************** */
  91:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
  92:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* **************** */
  93:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* Global variables */
  94:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* **************** */
  95:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
  96:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* ***************** */
  97:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* Exported function */
  98:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* ***************** */
  99:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 100:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
 101:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Gestisce la rilevazione dei fault.
 102:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  
 103:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [in] 	
 104:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [out] 	
 105:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  
 106:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return 		
 107:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \warning		
 108:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 109:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \notes:
 110:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 111:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
 112:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date 			09/07/2008
 113:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author			Valeria Catani
 114:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
 115:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** void FLT_faultManagement(void)
 116:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 117:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	/* Fault su Overflow (F01) */
 118:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	FLT_overflowFaultMgmt();
 119:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	/* Fault su resistenza e circuito resistenza (F10 - F13)  */
 120:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	FLT_resistorFaultMgmt();
 121:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 122:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	/* Fault su Timeout scarico (F03) */
 123:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	FLT_drainFaultMgmt();
 124:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 125:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	/* Fault su Sonda (F04) */
 126:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	FLT_probeFaultMgmt();
 127:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 128:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	/* Fault su circuito porta (F13 - sub 0x10)  */
 129:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	FLT_doorCircuitFaultMgmt();
 130:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 131:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** #if (ITP_ZC_ENABLE == 1)
 132:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	/* Fault su mancanza segnale Zero Crossing (F13.0x50) */
 133:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	FLT_checkZC();
 134:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** #endif /* ITP_ZC_ENABLE */
 135:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 136:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** #ifdef CONFIG_LIB_EXTERNAL_BOARD_SUPPORT
 137:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 138:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  	if( (( HWC_Flags.bit.bldc1 ) || ( HWC_Flags.bit.bldc_drain ))
 139:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		&&
 140:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	 	( RegDev_Pos[LD_KILL_DSP_REG_IND] != NO_LD_POS ) )
 141:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 142:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  	{
 143:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  		/*
 144:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  		La gestione dei fault del DSP viene eseguita solo se sono presenti
 145:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  		carichi BLDC/BLAC e se è presente il DSP
 146:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  		*/
 147:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 148:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		/* Fault su BLDC (F11)  */
 149:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_bldcFaultMgmt();
 150:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		/*
 151:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		Gestione resistenza lavaggio durante anomalie su BLDC
 152:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		Deve stare dopo tutte le altre routine di fault (e dopo le sicurezze)
 153:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		per conoscere lo stato richiesto alla resistenza prima della
 154:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		verifica di FltBLDCUnblock.res_off.
 155:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		*/
 156:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_bldcFaultLoadMgmt();
 157:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  	}
 158:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 159:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** #endif /* CONFIG_LIB_EXTERNAL_BOARD_SUPPORT */
 160:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 161:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  	/* Fault su Timeout riscaldamento (F08)  (F05 se pressostato in vuoto)*/
 162:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( Interpreter_Data[0].completeLabel.s.label != LBL_PAUSE )
 163:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
 164:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_heatToutFaultMgmt();
 165:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
 166:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	/* Fault sensori virtuali */
 167:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if(( HWC_Flags.bit.vs_wash_presence != 0)&&( HWC_Flags.bit.vs_drain_presence != 0))
 168:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{	/* BLDC/BLAC presente */
 169:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_VSFaultMgmt();
 170:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
 171:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 172:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	/* Fault su Anomalia Pressostato (F05) */
 173:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	FLT_pressSwitchFaultMgmt();
 174:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 175:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	/* Fault /Warning su Timeout Caricamento -rubinetto chiuso (F06) */
 176:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( Interpreter_Data[0].completeLabel.s.label != LBL_PAUSE )
 177:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
 178:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_loadToutFaultMgmt();
 179:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
 180:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	/* Fault su turbina bloccata (F07) */
 181:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	FLT_pulseCounterKOFaultMgmt();
 182:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 183:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	/* Fault su EV sfondata (F02) */
 184:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	FLT_loadEVKOFaultMgmt();
 185:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 186:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 187:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**/
 188:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 189:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 190:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 191:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
 192:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Verifica se è attivo il fault del file di setting.
 193:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 194:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [in]		CurrentFault (global)
 195:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 196:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  
 197:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return 		TRUE se il fault � attivo, FALSE altrimenti.
 198:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 199:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
 200:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date			03/07/2006
 201:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author			Marco Quintini
 202:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
 203:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** bool_t FLT_checkForSettingFault(void)
 204:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 205:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( ( CurrentFault[0].code == FLT_CODE_SETTING_FILE )
 206:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		&& ( CurrentFault[0].subCode == FLT_SUBCODE_MAIN_BOARD_SETTING_FILE ) )
 207:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
 208:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		return TRUE;
 209:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}	
 210:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 211:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****   return FALSE;
 212:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****     
 213:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 214:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**/
 215:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 216:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 217:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
 218:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Routine di reset delle bitmap che gestiscono le azioni di sicurezza
 219:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 220:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return
 221:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
 222:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date			11/10/2006
 223:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author			Valeria Catani
 224:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 225:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \in sospeso:
 226:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 227:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
 228:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** void FLT_safetyBitmapReset(void)
 229:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 230:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	/* in dw non ci sono safety di sicurezza */
 231:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 232:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**/
 233:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 234:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
 235:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** QI 27.10.09 gestione finestra di buio su check turbina
 236:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 237:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Gestione Timer per Delay sul controllo dei warning su turbina e
 238:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** su turbina bloccata
 239:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 240:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return
 241:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 242:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
 243:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date 			28/10/2009
 244:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author  		Valeria Catani
 245:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
 246:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 247:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** void FLT_PulseCounterCheckDelay_Mgmt(void)
 248:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 249:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 250:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (SWTC_GetRemainingTime((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER) > 0 )
 251:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 252:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{	/* conteggio finestra di buio in corso : mantengo warning resettati e Init su controllo turbina 
 253:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 254:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		(void)SWTC_Run((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER);
 255:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 256:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		PM_PulseCounter_Reset_Warning(PULSECOUNTER_RESET_BOTH_WARNING); /* Reset di eventuali warning pre
 257:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 258:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		(void)FLT_CheckPulseCounterStill(PULSE_COUNTER_STILL_INIT); /* init funzione controllo turbina bl
 259:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 260:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		CLRBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS);
 261:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
 262:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	else
 263:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{	/* conteggio finestra di buio concluso : parte la gestione di warning turbina e turbina bloccata
 264:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 265:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		(void)SWTC_Stop((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER);
 266:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
 267:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 268:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 269:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 270:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
 271:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Se il contatore dei decilitri caricati rimane costante per il tempo espresso nel dato
 272:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** viene dichiarato un flag di Turbina bloccata che potrà essere utilizzato dalla routine
 273:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** di fault e nel JumpIF.
 274:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 275:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return
 276:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 277:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
 278:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date 			20/03/2008
 279:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author  		Valeria Catani
 280:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
 281:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 282:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** uint8_t FLT_CheckPulseCounterStill(uint8_t mode)
 283:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 284:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static uint16_t pulseLoaded_Old=0;
 285:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 286:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (mode == PULSE_COUNTER_STILL_INIT)
 287:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{	/* INIT */
 288:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 289:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if( SPV_isAutotestOrTestRunning() )
 290:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
 291:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			SWTC_SetMValue((SWTC_CountersType)PULSE_STILL_M_COUNTER, (SWTC_MCounterValue)TOUT_PULSE_COUNTER_
 292:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}else
 293:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
 294:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			SWTC_SetMValue((SWTC_CountersType)PULSE_STILL_M_COUNTER, (SWTC_MCounterValue)TOUT_PULSE_COUNTER_
 295:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
 296:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 297:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 298:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
 299:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 300:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
 301:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 302:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	/* Init & EXE */
 303:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 304:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( pulseLoaded_Old != PulseLoaded )
 305:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{	/* impulsi in ingresso != 0 */
 306:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 307:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		pulseLoaded_Old = PulseLoaded;  /* aggiornamento impulsi in ingresso */
 308:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 309:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_PulseCounterStill_Reset(); /* QI - 02.12.09 reset Prefault, Flag e restart procedura */
 310:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
 311:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	else if ( TESTBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS) && (PM_PulseCounter_GetWarning() == b1) 
 312:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{	/* procedura di conferma : impulsi in ingresso in range non presenti, ma ci sono warning di impu
 313:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 314:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_PulseCounterStill_Reset(); /* QI - 02.12.09 reset Prefault, Flag e restart procedura */
 315:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
 316:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	else
 317:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{	/* quantità d'acqua in ingresso nulla (no impulsi in range, no impulsi under range) */
 318:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 319:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( mode == PULSE_COUNTER_STILL_EXE )
 320:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{	/* QI - 02.12.09 return TRUE e conteggio possibile solo in EXE */
 321:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 322:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			(void)SWTC_Run((SWTC_CountersType)PULSE_STILL_M_COUNTER);
 323:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 324:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if ( SWTC_IsExpired((SWTC_CountersType)PULSE_STILL_M_COUNTER) )
 325:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{/* end conteggio stazionarietà acqua caricata */
 326:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 327:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
 328:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 329:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				return TRUE;
 330:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
 331:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
 332:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
 333:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 334:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	return FALSE;
 335:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 336:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 337:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 338:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 339:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
 340:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** QI - 02.12.09
 341:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Reset Prefault turbina bloccata, reset Flag turbina KO e Restart contatore
 342:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 343:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return
 344:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 345:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
 346:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date 			02/12/2009
 347:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author  		Valeria Catani
 348:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
 349:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 350:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** void FLT_PulseCounterStill_Reset(void)
 351:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 352:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	/* vedo impulsi in ingresso -> reset flag turbina KO */
 353:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	CLRBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS);
 354:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 355:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (HWC_Flags.bit.vs_wash_presence)
 356:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
 357:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FltWarning.load=FALSE;
 358:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
 359:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	CLRBIT(FltFlagsKO,FLAG_PULSE_KO_LOAD); /* QI - 02.12.09 restart procedura anzichè solo restart co
 360:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	/* reset prefault se presente
 361:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	 * il prefault turbina bloccata non viene segnalato . al suo posto c'è la segnalazione de flag 1 
 362:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	 *alla fine viene dichiarato il warning
 363:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	 */
 364:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****     if( SPV_isAutotestOrTestRunning() )
 365:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
 366:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		SWTC_SetMValue((SWTC_CountersType)PULSE_STILL_M_COUNTER, (SWTC_MCounterValue)TOUT_PULSE_COUNTER_S
 367:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}else
 368:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
 369:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		SWTC_SetMValue((SWTC_CountersType)PULSE_STILL_M_COUNTER, (SWTC_MCounterValue)TOUT_PULSE_COUNTER_S
 370:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
 371:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 372:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 373:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 374:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* questa funzione è custom per le applicazioni, quindi va definita qui
 375:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Prende da file di setting il tempo di rilevazione del prefault e fault per ogni codic e sottocodice
 376:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** uint8_t FLT_getTimeout(uint8_t code, uint8_t subcode, Timeout_struct *timeoutdata)
 377:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 378:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 379:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** uint8_t retval = TRUE;
 380:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	timeoutdata->config = 0;
 381:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 382:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		switch (code)
 383:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
 384:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			case FLT_CODE_MAIN_BOARD:
 385:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 386:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				switch (subcode)
 387:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{
 388:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					case FLT_SUBCODE_FEEDBACK_KO:
 389:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					case FLT_SUBCODE_GENERIC_ERROR:
 390:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					case FLT_SUBCODE_RELE_RES_CC:
 391:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					case FLT_SUBCODE_RELE_RES_CA:
 392:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 393:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if( SPV_isAutotestOrTestRunning() )
 394:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{
 395:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							/* In Autotest e collaudo 3 tentativi */
 396:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->prefaultTime = TOUT_RES_CIRCUIT_PREFAULT(Tab_MainBoardFault_Special.Data);
 397:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->faultTime = TOUT_RES_CIRCUIT_FAULT(Tab_MainBoardFault_Special.Data);
 398:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->config |= COUNTERS2_TBASE_1SEC;
 399:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}
 400:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						else
 401:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{
 402:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->prefaultTime = TOUT_RES_CIRCUIT_PREFAULT(Tab_MainBoardFault.Data);
 403:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->faultTime = TOUT_RES_CIRCUIT_FAULT(Tab_MainBoardFault.Data);
 404:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->config |= COUNTERS2_TBASE_10SEC;
 405:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}
 406:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 407:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					break;
 408:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** #if ( ITP_ZC_ENABLE== 1)
 409:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					case FLT_SUBCODE_ZC_NOT_GOOD:
 410:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 411:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if( SPV_isAutotestOrTestRunning() )
 412:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{
 413:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->faultTime = TOUT_ZC_CIRCUIT_AUTOTEST_FAULT;
 414:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->config |= COUNTERS2_TBASE_1SEC;
 415:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}else
 416:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{
 417:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->faultTime = TOUT_ZC_CIRCUIT_FAULT;
 418:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->config |= COUNTERS2_TBASE_10SEC;
 419:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}
 420:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->prefaultTime = TOUT_ZC_CIRCUIT_PREFAULT;
 421:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 422:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 423:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					break;
 424:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** #endif
 425:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					case FLT_SUBCODE_DOOR_OUT_OF_RANGE:
 426:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if( SPV_isAutotestOrTestRunning() )
 427:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{
 428:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->faultTime = TOUT_DOOR_CIRCUIT_FAULT_AUTOTEST;
 429:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->prefaultTime = TOUT_DOOR_CIRCUIT_PREFAULT_AUTOTEST;
 430:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->config |= COUNTERS2_TBASE_1SEC;
 431:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}else
 432:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{
 433:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->faultTime = TOUT_DOOR_CIRCUIT_FAULT;
 434:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->prefaultTime = TOUT_DOOR_CIRCUIT_PREFAULT;
 435:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->config |= COUNTERS2_TBASE_10SEC;
 436:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}
 437:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 438:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 439:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					break;
 440:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					case FLT_SUBCODE_OVERFLOW_OUT_OF_RANGE:
 441:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if( SPV_isAutotestOrTestRunning() )
 442:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{
 443:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->faultTime = TOUT_OVERFLOW_CIRCUIT_FAULT_AUTOTEST;
 444:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->prefaultTime = TOUT_OVERFLOW_CIRCUIT_PREFAULT_AUTOTEST;
 445:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->config |= COUNTERS2_TBASE_1SEC;
 446:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}else
 447:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{
 448:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->faultTime = TOUT_OVERFLOW_CIRCUIT_FAULT;
 449:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->prefaultTime = TOUT_OVERFLOW_CIRCUIT_PREFAULT;
 450:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->config |= COUNTERS2_TBASE_10SEC;
 451:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}
 452:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						break;
 453:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					case FLT_SUBCODE_BLDC_UNDER_VOLTAGE:
 454:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					case FLT_SUBCODE_BLDC_OVERHEATING:
 455:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					case FLT_SUBCODE_BLDC_COMM:
 456:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						/* questa funzione viene chiamata solo in autotest perchè altrimenti vien egenerato un warni
 457:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						 * azzerato perchè la macchina a stati viene forzata.
 458:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						 */
 459:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->prefaultTime=0;
 460:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->faultTime=0;
 461:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							/* se il fault viene gestito a tentativi, dal prefault serve solo una iterazione per andare 
 462:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							 * mentre con il timeolut 2 almeno 2.
 463:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							 */
 464:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->config |= THEREATTEMPTFLT_MASK;
 465:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						break;
 466:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 467:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					default :
 468:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if (subcode & 0x80)
 469:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{
 470:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->faultTime = FLT_Get_Motor_Timeout( LONIBBLE(FltBLDCUnblock.pumpandspeed ),2);
 471:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->prefaultTime = 0;
 472:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->config |= THEREATTEMPTFLT_MASK;
 473:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}else
 474:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{
 475:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							retval= FALSE;
 476:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}
 477:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						break;
 478:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 479:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
 480:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				break;
 481:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				case FLT_CODE_RES_OPEN:
 482:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 483:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if( SPV_isAutotestOrTestRunning() )
 484:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
 485:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						/* In Autotest e collaudo 3 tentativi */
 486:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->prefaultTime = TOUT_RES_OPEN_PREFAULT(Tab_HeatFault_Special.Data);
 487:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime = TOUT_RES_OPEN_FAULT(Tab_HeatFault_Special.Data);
 488:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->config |= COUNTERS2_TBASE_1SEC;
 489:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
 490:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					else
 491:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
 492:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->prefaultTime = TOUT_RES_OPEN_PREFAULT(Tab_HeatFault.Data);
 493:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime = TOUT_RES_OPEN_FAULT(Tab_HeatFault.Data);
 494:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->config |= COUNTERS2_TBASE_10SEC;
 495:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
 496:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					break;
 497:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 498:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				case FLT_CODE_DRAIN:
 499:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					/* i timeout sono gestiti nel uP drain. lo stato di prefault e fault in pratica viene forzato.
 500:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if(subcode & 0x80 )
 501:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
 502:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime = FLT_Get_Motor_Timeout(LONIBBLE(FltBLDCUnblock.pumpandspeed ),2);
 503:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
 504:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					else
 505:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
 506:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						
 507:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime=0;						
 508:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
 509:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					timeoutdata->prefaultTime=0;
 510:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					timeoutdata->config |= THEREATTEMPTFLT_MASK;
 511:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					break;
 512:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				case FLT_CODE_PROBE:
 513:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 514:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 515:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if( SPV_isAutotestOrTestRunning() )
 516:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
 517:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime=TOUT_PROBE_FAULT(Tab_HeatFault_Special.Data);
 518:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->prefaultTime=TOUT_PROBE_PREFAULT(Tab_HeatFault_Special.Data);
 519:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->config |= COUNTERS2_TBASE_1SEC;
 520:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 521:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}else
 522:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
 523:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime=TOUT_PROBE_FAULT(Tab_HeatFault.Data);
 524:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->prefaultTime=TOUT_PROBE_PREFAULT(Tab_HeatFault.Data);
 525:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->config |= COUNTERS2_TBASE_10SEC;
 526:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
 527:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					break;
 528:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				case FLT_CODE_HEAT_TOUT:
 529:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				/* questa funzione viene chiamata solo in autotest perchè altrimenti vien egenerato un warning
 530:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				 * azzerato perchè la macchina a stati viene forzata.
 531:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				 */
 532:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					timeoutdata->prefaultTime=0;
 533:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					timeoutdata->faultTime=0;
 534:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					/* se il fault viene gestito a tentativi, dal prefault serve solo una iterazione per andare in
 535:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					 * mentre con il timeout 2 almeno 2.
 536:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					 */
 537:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					timeoutdata->config |= THEREATTEMPTFLT_MASK;
 538:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					break;
 539:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 540:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				case FLT_CODE_BLDC:
 541:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					timeoutdata->faultTime = FLT_Get_Motor_Timeout(LONIBBLE(FltBLDCUnblock.pumpandspeed ),2);
 542:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					timeoutdata->prefaultTime = 0;
 543:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					timeoutdata->config |= THEREATTEMPTFLT_MASK;
 544:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				break;
 545:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				case FLT_CODE_OVERFLOW:
 546:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					switch(subcode)
 547:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
 548:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						case FLT_SUBCODE_OVERFLOW:
 549:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							if( SPV_isAutotestOrTestRunning() )
 550:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							{
 551:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								timeoutdata->prefaultTime = TOUT_OVERFLOW_PREFAULT_AUTOTEST;
 552:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								timeoutdata->faultTime = TOUT_OVERFLOW_FAULT_AUTOTEST;
 553:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 554:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							}else
 555:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							{
 556:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								timeoutdata->prefaultTime = TOUT_OVERFLOW_PREFAULT;
 557:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								timeoutdata->faultTime = TOUT_OVERFLOW_FAULT;
 558:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							}
 559:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->config |= COUNTERS2_TBASE_100MS;
 560:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						break;
 561:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						default:
 562:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							retval=FALSE;
 563:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						break;
 564:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
 565:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					break;
 566:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				case FLT_CODE_VS:
 567:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( FLT_GetVS_timer(FLTN_INCONSISTENCY)>1)
 568:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{	/* una iterazione serve per segnalare il prefault*/
 569:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime = FLT_GetVS_timer(FLTN_INCONSISTENCY)-1;
 570:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}else
 571:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
 572:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime = 0;
 573:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
 574:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					timeoutdata->prefaultTime = 0;
 575:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					timeoutdata->config |= THEREATTEMPTFLT_MASK;
 576:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					break;
 577:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				case FLT_CODE_LOAD_EV_KO:
 578:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 579:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( subcode == FLT_SUBCODE_EV_VIA_VS)
 580:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
 581:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if ( FLT_GetVS_timer(FLTN_LOST_WATER)>1)
 582:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{	/* una iterazione serve per segnalare il prefault*/
 583:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->faultTime = FLT_GetVS_timer(FLTN_LOST_WATER)-1;
 584:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}else
 585:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{
 586:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->faultTime = 0;
 587:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}
 588:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}else
 589:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
 590:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime = 0;
 591:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
 592:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 593:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					timeoutdata->prefaultTime = 0;
 594:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					timeoutdata->config |= THEREATTEMPTFLT_MASK;
 595:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 596:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					break;
 597:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				case FLT_CODE_PRESS_SWITCH:
 598:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( subcode !=FLT_SUBCODE_PRESS_SWITCH_LOAD_TOUT)
 599:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
 600:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->prefaultTime=0;
 601:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime=0;
 602:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->config |= THEREATTEMPTFLT_MASK;
 603:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						break;
 604:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}else
 605:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
 606:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						/* passa a prendere i tempi sotto del fault FLT_CODE_LOAD_TIMEOUT*/
 607:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
 608:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				case FLT_CODE_LOAD_TIMEOUT :
 609:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if( SPV_isAutotestOrTestRunning() )
 610:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
 611:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime =TOUT_LOAD_FAULT(Tab_LoadFault_Special.Data);
 612:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->prefaultTime = TOUT_WARNING_LOAD(Tab_LoadFault_Special.Data);
 613:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}else
 614:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
 615:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime = TOUT_LOAD_FAULT(Tab_LoadFault.Data);
 616:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->prefaultTime = TOUT_WARNING_LOAD(Tab_LoadFault.Data);
 617:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
 618:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					timeoutdata->config |= COUNTERS2_TBASE_1SEC;
 619:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					break;
 620:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				default:
 621:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					retval=FALSE;
 622:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					break;
 623:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 624:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 625:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
 626:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		return retval;
 627:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 628:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 629:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
 630:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Gestione fault resistenza (F10) e circuito resistenza (F13 - sub 1/2)
 631:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** in base ai consistency
 632:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 633:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [out]
 634:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 635:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 636:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return 		none.
 637:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 638:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
 639:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date			21/07/08
 640:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author		Emanuela Antognoli
 641:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 642:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
 643:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 644:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_resistorFaultMgmt(void)
 645:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 646:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** uint8_t subcode;
 647:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 648:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 649:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	switch (Consistency_Current[Res_Pos[LD_WASH_RES_IND]])
 650:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
 651:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		case CONSISTENCY_OFF_OK:
 652:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 653:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			/* fb ok -> reset condizioni per dichiarazione Fault F10 - F13 */
 654:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_Reset_Circuit_Resistor_Fault();
 655:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 656:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc( FLT_CODE_RES_OPEN, FLT_SUBCODE_RES_OPEN,(uint16_t)TOUT_RESET_PREFAULT 
 657:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 658:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		break;
 659:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 660:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		case CONSISTENCY_OFF_ERROR_RELE_CC:
 661:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		case CONSISTENCY_ON_ERROR_RELE_CA:
 662:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		case CONSISTENCY_ON_FEEDBACK_KO_ERROR:
 663:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		case CONSISTENCY_OFF_FEEDBACK_KO_ERROR:
 664:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		case CONSISTENCY_ON_GENERIC_ERROR:
 665:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		case CONSISTENCY_OFF_GENERIC_ERROR:
 666:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 667:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc( FLT_CODE_RES_OPEN, FLT_SUBCODE_RES_OPEN,(uint16_t)TOUT_RESET_PREFAULT 
 668:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			/* prendo solo la parte indicante il problema, cc, ca,..*/
 669:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			subcode = FLT_Res_Get_Subcode((Consistency_Current[Res_Pos[LD_WASH_RES_IND]] & 0x07));
 670:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if (( FLT_checkForCurrentFault( FLT_CODE_MAIN_BOARD, subcode)==FALSE)&& (FLT_IsCircuit_Resistor_
 671:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{/* se sto già monitorando il fault resistenza ma non era CC, rifaccio partire la macchina a st
 672:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				FaultMgmt_Data[0].faultCodes.code = FLT_CODE_MAIN_BOARD;
 673:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				FaultMgmt_Data[0].faultCodes.subCode = subcode;
 674:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				FaultMgmt_Data[0].step = ALARM_FLAG_STEP;
 675:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 676:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
 677:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_manageFault(FLT_CODE_MAIN_BOARD,subcode);
 678:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		break;
 679:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		case CONSISTENCY_OFF_ERROR_RES_OPEN:
 680:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 681:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_Reset_Circuit_Resistor_Fault();
 682:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			/* dichiarazione Fault F10 */
 683:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_manageFault(FLT_CODE_RES_OPEN,FLT_SUBCODE_RES_OPEN);
 684:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 685:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		break;
 686:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		case CONSISTENCY_ON_OK:
 687:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			/* fb ok -> reset condizioni per dichiarazione Fault F10 - F13 */
 688:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_Reset_Circuit_Resistor_Fault();
 689:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 690:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			/* disable counter per Fault F10  - sono in ON */
 691:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if (FLT_checkForCurrentFault( FLT_CODE_RES_OPEN, FLT_SUBCODE_RES_OPEN)	)
 692:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{	/* disable counter per Fault F10  - sono in ON: lo stato di rilevazione viene eventualmente so
 693:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Stop((SWTC_CountersType)MAIN_FAULT_MGMT_COUNTER_M);
 694:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
 695:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 696:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		break;
 697:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 698:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		default:
 699:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		break;
 700:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 701:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
 702:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 703:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 704:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* reset fault dovuto al circuito della resistenza */
 705:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void  FLT_Reset_Circuit_Resistor_Fault(void)
 706:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 707:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	FLT_ResetFaultDetectProc( FLT_CODE_MAIN_BOARD, FLT_SUBCODE_FEEDBACK_KO,(uint16_t)TOUT_RESET_PREFAU
 708:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	FLT_ResetFaultDetectProc( FLT_CODE_MAIN_BOARD, FLT_SUBCODE_GENERIC_ERROR,(uint16_t)TOUT_RESET_PREF
 709:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	FLT_ResetFaultDetectProc( FLT_CODE_MAIN_BOARD, FLT_SUBCODE_RELE_RES_CC,(uint16_t)TOUT_RESET_PREFAU
 710:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	FLT_ResetFaultDetectProc( FLT_CODE_MAIN_BOARD, FLT_SUBCODE_RELE_RES_CA,(uint16_t)TOUT_RESET_PREFAU
 711:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 712:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 713:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static uint8_t FLT_Res_Get_Subcode ( uint8_t error)
 714:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 715:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	switch (error)
 716:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
 717:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		case CONSISTENCY_ERROR_RELE_CC:
 718:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			return FLT_SUBCODE_RELE_RES_CC;
 719:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		break;
 720:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		case CONSISTENCY_ERROR_RELE_CA:
 721:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			return FLT_SUBCODE_RELE_RES_CA;
 722:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 723:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		break;
 724:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		case CONSISTENCY_FEEDBACK_KO_ERROR:
 725:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			return FLT_SUBCODE_FEEDBACK_KO;
 726:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		break;
 727:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		default :
 728:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		/*CONSISTENCY_GENERIC_ERROR*/
 729:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			return FLT_SUBCODE_GENERIC_ERROR;
 730:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		break;
 731:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 732:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
 733:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 734:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	return(FLT_SUBCODE_GENERIC_ERROR);
 735:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 736:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* indica se si sta monitorando un fault della resistenza dovuto al circuito o al Fb */
 737:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static uint8_t FLT_IsCircuit_Resistor_Fault(void)
 738:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 739:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ((FaultMgmt_Data[0].faultCodes.code = FLT_CODE_MAIN_BOARD) &&
 740:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			(FaultMgmt_Data[0].faultCodes.subCode  <= FLT_SUBCODE_GENERIC_ERROR))
 741:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
 742:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		return TRUE;
 743:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
 744:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	return FALSE;
 745:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 746:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 747:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
 748:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \name FLT_overflowFaultMgmt
 749:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \description: Manage of fault (F01) on overflow e circuito overflow
 750:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return: None
 751:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version:
 752:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date: 19/11/2013
 753:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author: Andrea Emili, SPES scpa
 754:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
 755:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_overflowFaultMgmt(void)
 756:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 757:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (TESTBIT (GIValid, (GI_FIRST_CRITERION_BIT + GI_CR_OVFL_IND) ) != 0)
 758:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{/* criterio overflow valido */
 759:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 760:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( TESTBIT (GICriteria,GI_CR_OVFL_IND) != 0 )
 761:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{/* overflow ON */
 762:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_manageFault(FLT_CODE_OVERFLOW, FLT_SUBCODE_OVERFLOW);
 763:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}/* end if overflow ON */
 764:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		else
 765:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
 766:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc( FLT_CODE_OVERFLOW, FLT_SUBCODE_OVERFLOW,(uint16_t)TOUT_RESET_PREFAULT 
 767:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
 768:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}/* end criterio overflow valido */
 769:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	else
 770:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{/*criterio overflow non valido*/
 771:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if( FLT_checkForCurrentFault( FLT_CODE_OVERFLOW, FLT_SUBCODE_OVERFLOW) )
 772:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
 773:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			SWTC_Stop((SWTC_CountersType)MAIN_FAULT_MGMT_COUNTER_M);
 774:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
 775:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
 776:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	/* Fault su circuito pressostato (F13 - sub 0x30)  */
 777:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 778:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ( TESTBIT(FltGICriteria,GI_CR_OVFL_IND) )
 779:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{/* lettura analogica out of range */
 780:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 781:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_manageFault(FLT_CODE_MAIN_BOARD,FLT_SUBCODE_OVERFLOW_OUT_OF_RANGE);
 782:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
 783:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	else
 784:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
 785:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			/* Segnale filtrato di Zero Crossing presente */
 786:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_ResetFaultDetectProc( FLT_CODE_MAIN_BOARD, FLT_SUBCODE_OVERFLOW_OUT_OF_RANGE,(uint16_t)TOUT_R
 787:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
 788:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 789:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 790:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
 791:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Gestione fault per timeout di scarico (F03)
 792:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Il timeout di scarico è troppo strettamente connesso con il uP drain, quindi il timer viene usato 
 793:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** mentre viene in qualche modo forzato lo stato di prefault e fault del
 794:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 795:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [out]
 796:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 797:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 798:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return 		none.
 799:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 800:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
 801:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date			20/11/13
 802:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author		Emanuela Antognoli
 803:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 804:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
 805:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_drainFaultMgmt(void)
 806:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 807:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ((TESTBIT(FltFlagsKO,WARNING_DRAIN_PREKO) == TRUE) ||(TESTBIT(FltFlagsKO,WARNING_DRAIN_KO) == T
 808:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{/* il prefiltraggio del fault viene fatto dal uP drain perchè è già insito nel uP fare i tenta
 809:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	prefault è nullo.*/
 810:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_manageFault(FLT_CODE_DRAIN,FLT_SUBCODE_DRAIN);
 811:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 812:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
 813:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 814:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (FLT_checkForCurrentFault( FLT_CODE_DRAIN, FLT_SUBCODE_DRAIN)==TRUE)
 815:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
 816:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( FaultMgmt_Data[0].step == PREFAULT_STEP)
 817:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
 818:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			CLRBIT(FltFlagsKO,WARNING_DRAIN_PREKO);
 819:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 820:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
 821:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( FaultMgmt_Data[0].step == FAULT_STEP)
 822:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
 823:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			CLRBIT(FltFlagsKO,WARNING_DRAIN_KO);
 824:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
 825:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 826:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
 827:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 828:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 829:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 830:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 831:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
 832:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Gestione fault su probe (F04)
 833:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 834:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [out]
 835:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 836:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 837:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return 		none.
 838:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 839:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
 840:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date			27/11/13
 841:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author		Emanuela Antognoli
 842:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 843:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
 844:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_probeFaultMgmt(void)
 845:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 846:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ( FltGITemp != 0 )
 847:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{ /* rilevato valore out of range su sonda */
 848:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( (Interpreter_Data[0].completeLabel.s.label == LBL_RUN) || (Interpreter_Data[0].completeLabel
 849:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{/* QI 28.10.09 gestione fault su sonda solo in RUN e PAUSE (sia a porta aperta che chiusa) */
 850:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_manageFault(FLT_CODE_PROBE,FltGITemp);
 851:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}else
 852:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
 853:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc( FLT_CODE_PROBE, FltGITemp,(uint16_t)TOUT_RESET_PREFAULT );
 854:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
 855:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}else
 856:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
 857:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_ResetFaultDetectProc( FLT_CODE_PROBE, FLT_SUBCODE_PROBE_CC,(uint16_t)TOUT_RESET_PREFAULT );
 858:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_ResetFaultDetectProc( FLT_CODE_PROBE,  FLT_SUBCODE_PROBE_CA,(uint16_t)TOUT_RESET_PREFAULT );
 859:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
 860:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 861:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 862:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 863:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* Fault su mancanza segnale Zero Crossing (F13.0x50)
 864:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  *
 865:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [out]
 866:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 867:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 868:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return 		none.
 869:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 870:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
 871:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date			28/11/13
 872:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author		Emanuela Antognoli */
 873:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** #if ( ITP_ZC_ENABLE== 1)
 874:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_checkZC(void)
 875:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 876:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( Interpreter_Data[0].ZC_not_good  )
 877:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
 878:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_manageFault(FLT_CODE_MAIN_BOARD,FLT_SUBCODE_ZC_NOT_GOOD);
 879:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
 880:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	else
 881:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
 882:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		/* Segnale filtrato di Zero Crossing presente */
 883:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_ResetFaultDetectProc( FLT_CODE_MAIN_BOARD, FLT_SUBCODE_ZC_NOT_GOOD,(uint16_t)TOUT_RESET_PREFA
 884:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
 885:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 886:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** #endif
 887:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 888:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** #ifdef CONFIG_LIB_EXTERNAL_BOARD_SUPPORT
 889:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
 890:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Gestione fault comunicazione con BLDC
 891:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 892:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [out]
 893:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 894:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 895:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return 		none.
 896:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 897:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
 898:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date			19/08/08
 899:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \rev 			28/11/13
 900:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author			Emanuela Antognoli
 901:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 902:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
 903:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** void FLT_bldcFaultMgmt(void)
 904:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 905:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** uint8_t bldc_fault_warn;
 906:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** uint8_t attemptsTime;
 907:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** uint8_t BLDCSpeedNumMax_local;
 908:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 909:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** #if ( ITP_ZC_ENABLE== 1)
 910:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if(
 911:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		( ( LoadsReq_Old[RegDev_Pos[LD_KILL_DSP_REG_IND]].b == LOAD_OFF ) && ( TESTBIT(FltBLDCUnblock.fla
 912:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		||
 913:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		( Interpreter_Data[0].ZC_not_good )
 914:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	  )
 915:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** #else
 916:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( ( LoadsReq_Old[RegDev_Pos[LD_KILL_DSP_REG_IND]].b == LOAD_OFF ) && ( TESTBIT(FltBLDCUnblock.fl
 917:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** #endif /* _VERIFY_ZC_GOOD_ */
 918:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
 919:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		/*
 920:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		Il DSP è spento per "cause naturali" o sto disabilitando la UART per problemi
 921:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		sullo Zero Crossing
 922:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		*/
 923:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_bldcFaultReset();
 924:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_ResetFaultDetectProc( FLT_CODE_MAIN_BOARD, FLT_SUBCODE_BLDC_COMM,(uint16_t)TOUT_RESET_PREFAUL
 925:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_ResetFaultDetectProc( FLT_CODE_MAIN_BOARD, FLT_SUBCODE_BLDC_UNDER_VOLTAGE,(uint16_t)TOUT_RESE
 926:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
 927:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	else
 928:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
 929:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 930:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if( ( CP_GetExternalBoardCommStatus()==TRUE )
 931:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			&&
 932:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			( TESTBIT(FltBLDCUnblock.flags,PUMPOFF)== 0)
 933:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			)
 934:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			/*
 935:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			Se ho comandato lo spegnimento del DSP, non considero comunque anche
 936:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			eventuali pacchetti che dovessero arrivare.
 937:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			*/
 938:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 939:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{/* ricevuto pacchetto da BLDC -> comunicazione OK - gestione eventuale Fault/Warning BLDC  */
 940:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 941:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****             uint8_t bldcIndex=BLDC_NOTHING;
 942:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 943:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			/* Analisi Fault BLDC */
 944:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 945:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****             bldcIndex=CheckExternalError();
 946:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 947:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			BLDCSpeedNumMax_local = FLT_Get_Motor_Timeout(bldcIndex,5) & 0xF0;
 948:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 949:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			bldc_fault_warn=BLDC_Pump_InfoBuffer[bldcIndex][BLDC_FAULT_MSB];
 950:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 951:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if (  bldc_fault_warn != FLT_BLDC_CODE_NO_FAULT )
 952:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{/* Presente Fault */
 953:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				/*test_debug[0]++;*/
 954:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				FltBLDCUnblock.pumpandspeed=SET_LONIBBLE(FltBLDCUnblock.pumpandspeed, bldcIndex);
 955:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 956:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if(bldcIndex == WASH_BLDC_PUMP)
 957:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{ /* spegniamo la resistenza lavaggio solo per il motore lavaggio */
 958:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				   /* QI - 11.11.09 - spegnimento precauzionale della resistenza */
 959:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					SETBIT(FltBLDCUnblock.flags,PUMP_TRES_OFF);
 960:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
 961:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 962:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				/*
 963:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				In DEA700 tutti i fault del DSP portano a tentativi di sblocco.
 964:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				Da verificare con Danilo e Alessio. MQ
 965:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				*/
 966:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				SETBIT(FltBLDCUnblock.flags,PUMP_STALLO);
 967:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 968:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if( bldc_fault_warn == FLT_BLDC_CODE_F01 )
 969:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{
 970:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					/* F01 DSP rimappato in F13 Main */
 971:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					bldc_fault_warn = FLT_CODE_MAIN_BOARD;
 972:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
 973:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				else if ( bldc_fault_warn != FLT_CODE_SETTING_FILE )
 974:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{
 975:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					/*
 976:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					F09 DSP resta F09.
 977:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					Ogni altro codice (in teoria solo F02) è rimappato in F11
 978:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					MQ */
 979:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					/*
 980:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					LR 24/6/2011: l'equivalente di f11 per il motore lavaggio, diventa f14 per il motore drain
 981:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					EA: 1/3/12  l'equivalente di f11 per il motore lavaggio, diventa F03 su dea 700 secondo step
 982:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					*/
 983:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					bldc_fault_warn = (bldcIndex == WASH_BLDC_PUMP) ? FLT_CODE_BLDC : FLT_CODE_DRAIN;
 984:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 985:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( Remap_Fault_step_2(BLDC_Pump_InfoBuffer[bldcIndex][BLDC_FAULT_LSB]))
 986:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{/* alcuni sottocodice del f02 diventano scheda*/
 987:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						bldc_fault_warn=FLT_CODE_MAIN_BOARD;
 988:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
 989:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
 990:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				else
 991:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{
 992:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					/* Do nothing */
 993:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
 994:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 995:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ((TESTBIT(FltBLDCUnblock.flags,PUMP_CHANGE_PILOT) )&&FLT_checkForMotorFault())
 996:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{/* ho cambiato pilotaggio della pompa o è cambiato il sottocodice rilevato dal dsp:devo aggio
 997:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
 998:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if (FLT_checkForCurrentFault( bldc_fault_warn, BLDC_Pump_InfoBuffer[bldcIndex][BLDC_FAULT_LSB]
 999:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
1000:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						CLRBIT(FltBLDCUnblock.flags,PUMP_CHANGE_PILOT);
1001:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}else
1002:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
1003:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FaultMgmt_Data[0].faultCodes.code=bldc_fault_warn;
1004:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FaultMgmt_Data[0].faultCodes.subCode =	BLDC_Pump_InfoBuffer[bldcIndex][BLDC_FAULT_LSB];
1005:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						/*FaultMgmt_Data[0].step =ALARM_FLAG_STEP*/
1006:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						/*FLT_ResetFaultDetectProc( FaultMgmt_Data[0].faultCodes.code, FaultMgmt_Data[0].faultCodes.s
1007:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
1008:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}else
1009:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{
1010:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					CLRBIT(FltBLDCUnblock.flags,PUMP_CHANGE_PILOT);
1011:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
1012:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1013:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if (TESTBIT (FltBLDCUnblock.flags,UPDATE_FAULT)==0)
1014:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{
1015:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FLT_manageFault(bldc_fault_warn,BLDC_Pump_InfoBuffer[bldcIndex][BLDC_FAULT_LSB]);
1016:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1017:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FltBLDCUnblock.pumpandspeed=(BLDCSpeedNumMax_local)|(LONIBBLE(FltBLDCUnblock.pumpandspeed) );
1018:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FltBLDCMotor_Tout = 0;
1019:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
1020:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1021:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				/*gestisce i tempi di spegnimento e pausa del dsp durante i tentativi*/
1022:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				FLT_BLDCUnblock_Mgmt(bldc_fault_warn);
1023:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1024:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ((FAULT_STEP == FaultMgmt_Data[0].step)&& FLT_checkForMotorFault())
1025:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{/* se sono in fault non segnalo più al dsp di fare tentativi */
1026:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					CLRBIT(FltBLDCUnblock.flags,PUMP_STALLO);
1027:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
1028:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
1029:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			else
1030:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{/* No Fault BLDC - OK o Warning */
1031:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				/*test_debug[1]++;*/
1032:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1033:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				switch(BLDC_Pump_InfoBuffer[bldcIndex][BLDC_FAULT_LSB])
1034:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{
1035:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					case FLT_BLDC_CODE_LOW_VOLTAGE_WARN:
1036:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						/* warning under voltage */
1037:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FltBLDCUnblock.pumpandspeed=(BLDCSpeedNumMax_local)|(LONIBBLE(FltBLDCUnblock.pumpandspeed) );
1038:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FltWarning.bldc_low_voltage = 1;	/* warning bldc_low_voltage */
1039:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FltBLDCUnblock.wait_cnt=0;
1040:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					break;
1041:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1042:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					case FLT_BLDC_CODE_OH_WARN:
1043:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						/* warning overheating */
1044:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FltBLDCUnblock.pumpandspeed=(BLDCSpeedNumMax_local)|(LONIBBLE(FltBLDCUnblock.pumpandspeed) );
1045:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FltWarning.bldc_OH = 1;	/* warning bldc_low_voltage */
1046:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FltBLDCUnblock.wait_cnt=0;
1047:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					break;
1048:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1049:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					default:
1050:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						/* No Fault - No Warning */
1051:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1052:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						/* controllo velocità!=0 e spegnimento della resistenza per isteresi
1053:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						(se provengo da una situazione di perdita comunicazione ovvero di spegnimento preventivo)*/
1054:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FltWarning.bldc_OH = 0;	/* warning bldc_low_voltage */
1055:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FltWarning.bldc_low_voltage = 0;	/* warning bldc_low_voltage */
1056:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_BLDCSpeedCheck();
1057:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1058:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					break;
1059:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
1060:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1061:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
1062:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1063:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			/* reset prefault comunicazione, se presente */
1064:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc( FLT_CODE_MAIN_BOARD, FLT_SUBCODE_BLDC_COMM,(uint16_t)TOUT_RESET_PREFAU
1065:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1066:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			CP_ResetExternalBoardCommStatus();
1067:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FltBLDCComm_Tout = 0;	/* abilitata init timeout comunicazione */
1068:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1069:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		else
1070:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{/* non ricevuto pacchetto da BLDC -> gestione Fault Comunicazione BLDC */
1071:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if (FLT_checkForMotorFault())
1072:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{/* sto monitorando il fault, potrei essere nello spegnimento forzato del dsp*/
1073:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				FLT_BLDCUnblock_Mgmt(FaultMgmt_Data[0].faultCodes.code);
1074:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1075:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
1076:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if (TESTBIT (FltBLDCUnblock.flags,UPDATE_FAULT))
1077:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{
1078:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				/* sto tenendo spento il dsp per tentativo di sblocco*/
1079:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				FltBLDCComm_Tout=0;
1080:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
1081:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			else
1082:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{
1083:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				/*analizzo il fault comunicazione o rimango in attesa del pacchetto */
1084:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if( FLT_checkForCurrentFault(FLT_CODE_MAIN_BOARD,FLT_SUBCODE_BLDC_COMM))
1085:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{
1086:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if (PREFAULT_STEP == FaultMgmt_Data[0].step )
1087:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
1088:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						attemptsTime=(FLT_Get_Motor_Timeout(WASH_BLDC_PUMP,0) & 0x7F);
1089:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1090:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}else
1091:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
1092:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						attemptsTime=(FLT_Get_Motor_Timeout(WASH_BLDC_PUMP,1)& 0x7F);
1093:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
1094:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}else
1095:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{
1096:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					attemptsTime=10;
1097:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
1098:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1099:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ((FltBLDCComm_Tout >= attemptsTime) && (FLT_checkForMotorFault()==FALSE))
1100:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{
1101:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				/* questo è un pre-filtraggio , perchè la comunicazione tra dsp e main avviene in un tempo su
1102:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				sicuramente tra un pacchetto e l'altro si cade qui. Se però non si vedono pacchetti per TOUT_B
1103:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				nella macchina a stati e si gestisce il fault.( siccome il tempo di filtraggio è stato fatto p
1104:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FLT_bldcFaultReset();
1105:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FLT_manageFault(FLT_CODE_MAIN_BOARD,FLT_SUBCODE_BLDC_COMM);
1106:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ((PREFAULT_STEP == FaultMgmt_Data[0].step)&& FLT_checkForCurrentFault(FLT_CODE_MAIN_BOARD,F
1107:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
1108:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						CP_UART_EnableComm();
1109:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
1110:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1111:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FltBLDCComm_Tout = 0;
1112:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
1113:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				else
1114:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{/* esecuzione procedura */
1115:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FltBLDCComm_Tout++;
1116:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
1117:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1118:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1119:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
1120:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1121:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if (FltBLDCUnblock.wait_cnt >0 )
1122:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
1123:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FltBLDCUnblock.wait_cnt--;
1124:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1125:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1126:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1127:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1128:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
1129:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1130:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /*
1131:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Ritorna il valore dell'indice della pompa bldc da controllare per la presenza di fault
1132:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1133:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [out]
1134:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1135:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1136:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return 		none.
1137:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1138:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version	1.0.0
1139:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date		29/11/2013
1140:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author		Emanuela Antognoli
1141:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1142:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
1143:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1144:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static uint8_t CheckExternalError(void)
1145:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
1146:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****     uint8_t * pInfoWash;
1147:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	uint8_t * pInfoDrain;
1148:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	pInfoWash= (uint8_t *)&BLDC_Pump_InfoBuffer[WASH_BLDC_PUMP][0];
1149:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	pInfoDrain=(uint8_t *)&BLDC_Pump_InfoBuffer[DRAIN_BLDC_PUMP][0];
1150:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	 /* Ea 30/3/12 Il dsp riporta lo stesso fault rilevato su un motore nell'info buffer dell'altro  s
1151:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	 note: ce ne è sempre una attiva.
1152:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	 quindi basta considerare sempre il fault della pompa attiva .
1153:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	 Se nessuna delle due è attiva, rimane l'indicazione del fault sull'ultima attivata! */
1154:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	CLRBIT(FltBLDCUnblock.flags,PUMP_CHANGE_PILOT);
1155:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1156:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if(GET_BLDC_SPEED(BLDC_PumpReq_New[DRAIN_BLDC_PUMP])>0)
1157:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{/* bldc drain è pilotata */
1158:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	   if ( LONIBBLE(FltBLDCUnblock.pumpandspeed )!=DRAIN_BLDC_PUMP)
1159:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	   {/* se fosse nothing sarebbe da aggiornare comunque.*/
1160:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		   SETBIT(FltBLDCUnblock.flags,PUMP_CHANGE_PILOT);
1161:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		   CLRBIT(FltBLDCUnblock.flags,PUMP_STALLO);
1162:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1163:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1164:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1165:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	   return DRAIN_BLDC_PUMP;
1166:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1167:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1168:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1169:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if(GET_BLDC_SPEED(BLDC_PumpReq_New[WASH_BLDC_PUMP])>0)
1170:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{ /* bldc wash è pilotata */
1171:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	
1172:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( LONIBBLE(FltBLDCUnblock.pumpandspeed )!=WASH_BLDC_PUMP)
1173:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	    {/* se fosse nothing sarebbe da aggiornare comunque.*/
1174:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			SETBIT(FltBLDCUnblock.flags,PUMP_CHANGE_PILOT);
1175:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			CLRBIT(FltBLDCUnblock.flags,PUMP_STALLO);
1176:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1177:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1178:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	    return WASH_BLDC_PUMP;
1179:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1180:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1181:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	/* entrambe spente*/
1182:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( ((LONIBBLE(FltBLDCUnblock.pumpandspeed ) != BLDC_NOTHING) && (LONIBBLE(FltBLDCUnblock.pumpands
1183:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{ /* continuiamo la gestione del fault che è in corso */
1184:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1185:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		return (LONIBBLE(FltBLDCUnblock.pumpandspeed ));
1186:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1187:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	/* non c'è nessun fault in corso */
1188:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1189:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if(pInfoDrain[BLDC_FAULT_MSB] != CODE_NO_FAULT)
1190:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{ /* bldc drain fault */
1191:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	   return DRAIN_BLDC_PUMP;
1192:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1193:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1194:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if(pInfoWash[BLDC_FAULT_MSB] != CODE_NO_FAULT)
1195:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{ /* bldc wash fault */
1196:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	   return WASH_BLDC_PUMP;
1197:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1198:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if(pInfoDrain[BLDC_FAULT_LSB] == FLT_BLDC_CODE_LOW_VOLTAGE_WARN)
1199:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{ /* bldc drain fault */
1200:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	   return DRAIN_BLDC_PUMP;
1201:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1202:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1203:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if(pInfoWash[BLDC_FAULT_LSB] == FLT_BLDC_CODE_LOW_VOLTAGE_WARN)
1204:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{ /* bldc drain fault */
1205:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	   return WASH_BLDC_PUMP;
1206:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1207:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	/* se non piloto niente, non ci sono fault non ci sono warning ,monitori la pompa di default*/
1208:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	return  DRAIN_BLDC_PUMP;
1209:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1210:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
1211:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
1212:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Gestione tentativi di sblocco BLDC, tempo di spegnimento e pausa
1213:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [out]
1214:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1215:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1216:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return 		none.
1217:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1218:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
1219:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date			29/13/13
1220:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author		Emanuela Antognoli
1221:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1222:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
1223:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** void FLT_BLDCUnblock_Mgmt (uint8_t faultCode)
1224:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
1225:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1226:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1227:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	uint8_t attemptsTime;
1228:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1229:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	attemptsTime = GetAttempsTimeFault (faultCode);
1230:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1231:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (FLT_checkForMotorFault())
1232:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
1233:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1234:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if (FltBLDCMotor_Tout >=attemptsTime)
1235:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
1236:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			CLRBIT (FltBLDCUnblock.flags,UPDATE_FAULT);
1237:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			CLRBIT(FltBLDCUnblock.flags,PUMPOFF);
1238:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1239:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1240:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		else
1241:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
1242:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			/* Procedura di spegnimento carichi */
1243:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1244:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FltBLDCMotor_Tout++;
1245:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FltBLDCUnblock.wait_cnt=FLT_Get_Motor_Timeout(LONIBBLE(FltBLDCUnblock.pumpandspeed ),4) * 10;
1246:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			SETBIT (FltBLDCUnblock.flags,UPDATE_FAULT);/* DSP spento */
1247:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			SETBIT(FltBLDCUnblock.flags,PUMPOFF);
1248:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1249:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1250:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	else
1251:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
1252:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1253:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if (FltBLDCComm_Tout >=attemptsTime)
1254:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
1255:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1256:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			CLRBIT (FltBLDCUnblock.flags,UPDATE_FAULT);
1257:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			CLRBIT(FltBLDCUnblock.flags,PUMPOFF);
1258:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1259:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1260:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1261:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		else
1262:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
1263:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			/* Procedura di spegnimento carichi */
1264:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FltBLDCComm_Tout++;
1265:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FltBLDCUnblock.wait_cnt=FLT_Get_Motor_Timeout(LONIBBLE(FltBLDCUnblock.pumpandspeed ),4) * 10;
1266:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			SETBIT (FltBLDCUnblock.flags,UPDATE_FAULT);/* DSP spento */
1267:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			SETBIT(FltBLDCUnblock.flags,PUMPOFF);
1268:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1269:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1270:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1271:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1272:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
1273:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1274:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
1275:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Questa funzione frestituisce il tempo di attesa tra un tentativo e l'altro dei fault del motore.
1276:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
1277:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date
1278:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author			Emanuela Antognoli
1279:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
1280:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static uint8_t GetAttempsTimeFault(uint8_t faultCode)
1281:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
1282:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** uint16_t ret=0;
1283:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1284:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (FaultMgmt_Data[0].faultCodes.code == faultCode)
1285:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
1286:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if (PREFAULT_STEP == FaultMgmt_Data[0].step)
1287:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
1288:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			ret=FLT_Get_Motor_Timeout(LONIBBLE(FltBLDCUnblock.pumpandspeed ),3);
1289:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1290:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}else
1291:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{/* per i fault del motore il tempo di rilevazione del prefault è immediato ( appena segnalato d
1292:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			ret= 0;
1293:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1294:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1295:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}else
1296:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{ /* se non sto considerando il fault che cerco le varibili interessate vengono resettate */
1297:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FltBLDCComm_Tout=0;
1298:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FltBLDCMotor_Tout = 0;
1299:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		CLRBIT (FltBLDCUnblock.flags,UPDATE_FAULT);
1300:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1301:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	return ret;
1302:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
1303:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1304:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1305:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1306:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static bool_t FLT_checkForMotorFault(void)
1307:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
   9                             		.loc 1 1307 0
  10                             	.LVL0:
1308:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** bool_t retval = FALSE;
1309:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1310:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if(
1311:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		( FaultMgmt_Data[0].faultCodes.code == FLT_CODE_BLDC )
  11                             		.loc 1 1311 0
  12 0000 FB 42 00 00 00 00       		mov.L	#_FaultMgmt_Data, r4
1310:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if(
  13                             		.loc 1 1310 0
  14 0006 58 4E                   		movu.B	[r4], r14
  15 0008 61 BE                   		cmp	#11, r14
  16 000a 20 17                   		beq	.L7
1312:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1313:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		||
  17                             		.loc 1 1313 0
  18 000c 61 DE                   		cmp	#13, r14
  19 000e 21 0D                   		bne	.L3
  20                             		.balign 2,3,5
  21                             	.L4:
1314:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1315:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		((FaultMgmt_Data[0].faultCodes.code==FLT_CODE_MAIN_BOARD)&& (FaultMgmt_Data[0].faultCodes.subCode
  22                             		.loc 1 1315 0
  23 0010 CD 4E 01                		mov.B	1[r4], r14
  24 0013 61 0E                   		cmp	#0, r14
  25 0015 29 0C                   		blt	.L7
  26 0017 03                      		.balign 2,3,1
  27                             	.L5:
1308:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** bool_t retval = FALSE;
  28                             		.loc 1 1308 0
  29 0018 66 01                   		mov.L	#0, r1
  30 001a 02                      		rts
  31                             	.L3:
1316:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		||
  32                             		.loc 1 1316 0
  33 001b 61 3E                   		cmp	#3, r14
  34 001d 21 FB                   		bne	.L5
  35 001f 2E F1                   		bra	.L4
  36                             	.L7:
1317:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		((FaultMgmt_Data[0].faultCodes.code==FLT_CODE_DRAIN)&& (FaultMgmt_Data[0].faultCodes.subCode & 0x
1318:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	  )
1319:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
1320:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		retval = TRUE;
  37                             		.loc 1 1320 0
  38 0021 66 11                   		mov.L	#1, r1
  39                             	.LVL1:
1321:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1322:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1323:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1324:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	return retval;
1325:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
  40                             		.loc 1 1325 0
  41 0023 02                      		rts
  42                             	.LFE19:
  44                             		.section	.text.FLT_GetVS_timer,"ax",@progbits
  46                             	_FLT_GetVS_timer:
  47                             	.LFB29:
1326:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1327:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1328:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1329:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
1330:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Gestione reset fault comunicazione con BLDC
1331:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1332:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [out]
1333:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1334:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1335:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return 		none.
1336:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1337:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
1338:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date			29/11/13
1339:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author		Emanuela Antognoli
1340:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1341:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
1342:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** void FLT_bldcFaultReset(void)
1343:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
1344:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ((FaultMgmt_Data[0].faultCodes.code==FLT_CODE_BLDC)||
1345:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		((FaultMgmt_Data[0].faultCodes.code==FLT_CODE_MAIN_BOARD)&& (FaultMgmt_Data[0].faultCodes.subCode
1346:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		||/* per il fault della pompa scarico */
1347:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		((FaultMgmt_Data[0].faultCodes.code==FLT_CODE_DRAIN)&& (FaultMgmt_Data[0].faultCodes.subCode & 0x
1348:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
1349:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1350:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc(FaultMgmt_Data[0].faultCodes.code, FaultMgmt_Data[0].faultCodes.subCode
1351:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1352:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1353:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		CLRBIT (FltBLDCUnblock.flags,UPDATE_FAULT);
1354:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FltBLDCComm_Tout=0;
1355:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FltBLDCMotor_Tout = 0;
1356:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1357:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
1358:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1359:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1360:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /*EA 5/3/12
1361:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** remap del fault f02 del dsp come fault della scheda main.*/
1362:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static uint8_t Remap_Fault_step_2 (uint8_t subcode)
1363:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
1364:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1365:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( ( subcode== 0x8A) ||( subcode== 0x8B)||( subcode== 0x8C))
1366:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
1367:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		return TRUE;
1368:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}else
1369:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
1370:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		return FALSE;
1371:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1372:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1373:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1374:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
1375:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1376:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1377:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
1378:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** QI 11.11.09 Controllo velocità BLDC per riaccensione resistenza
1379:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Viene applicato un filtro di 10 pacchetti consecutivi con velocità > 800 rpm
1380:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1381:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [out]
1382:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1383:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1384:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return 		none.
1385:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1386:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
1387:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date			09/11/09
1388:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author		Valeria Catani
1389:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1390:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
1391:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_BLDCSpeedCheck(void)
1392:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
1393:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1394:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** int16_t currentSpeed=0;
1395:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** uint16_t targetSpeed=0;
1396:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** uint8_t bldcIndex;
1397:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** uint8_t BLDCSpeedTh_local, BLDCSpeedNumMax_local;
1398:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1399:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	bldcIndex = LONIBBLE(FltBLDCUnblock.pumpandspeed );
1400:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	/*lint -e574
1401:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	currentSpeed non può essere negativa perchè c'è un controllo in precedenza
1402:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	*/
1403:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****    BLDCSpeedTh_local = ( LONIBBLE(FLT_Get_Motor_Timeout(bldcIndex,5)) * 100 );
1404:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****    BLDCSpeedNumMax_local = FLT_Get_Motor_Timeout(bldcIndex,5)& 0xF0;
1405:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (FltBLDCUnblock.wait_cnt >0 )
1406:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
1407:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FltBLDCUnblock.pumpandspeed=(BLDCSpeedNumMax_local)|(LONIBBLE(FltBLDCUnblock.pumpandspeed) );
1408:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1409:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1410:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ( HINIBBLE(FltBLDCUnblock.pumpandspeed )> 0 )
1411:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{/* conteggio filtro per monitoraggio velocità in corso: indica che provengo da una situazione di
1412:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1413:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		SETBIT (FltBLDCUnblock.flags,PUMP_TRES_OFF);
1414:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		/* richiesta spegnimento res : è già così, ribadisco */
1415:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1416:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1417:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if(bldcIndex < NR_OF_BLDC_PUMPS)
1418:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
1419:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		   currentSpeed = ((int16_t)(BLDC_Pump_InfoBuffer[bldcIndex][BLDC_VCURR_MSB] << 8) + (int16_t)BLD
1420:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1421:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1422:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if( currentSpeed < 0 )
1423:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
1424:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			currentSpeed = -currentSpeed;
1425:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1426:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1427:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if(bldcIndex < NR_OF_BLDC_PUMPS)
1428:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{ /* Wash */
1429:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		  targetSpeed = MAKEWORD(BLDC_PumpReq_New[bldcIndex].data[0], BLDC_PumpReq_New[bldcIndex].data[1]
1430:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1431:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1432:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1433:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( (targetSpeed == 0) || ( currentSpeed > BLDCSpeedTh_local ) )
1434:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /*lint +e574 */
1435:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{/* isteresi RES OFF*/
1436:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1437:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FltBLDCUnblock.pumpandspeed-=0x10;
1438:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1439:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		else
1440:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{/* ricevuto pacchetto con target velocità > 0 e velocità < soglia -> restart contatore */
1441:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1442:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FltBLDCUnblock.pumpandspeed=(BLDCSpeedNumMax_local)|(LONIBBLE(FltBLDCUnblock.pumpandspeed) );
1443:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1444:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1445:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	else
1446:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{/* filtro su velocità esaurito la resistenza può rimanere accesa (se pilotata da microprogramma
1447:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1448:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		/* reset richiesta spegnimento RES */
1449:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		CLRBIT (FltBLDCUnblock.flags,PUMP_TRES_OFF);
1450:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FltWarning.bldc_low_voltage = 0;	/* reset warning low voltage (rimane il memo per eventuale tout 
1451:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1452:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FltWarning.bldc_OH = 0;	/* reset warning overheating */
1453:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		CLRBIT (FltBLDCUnblock.flags,PUMP_STALLO);
1454:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		/*rese presenti */
1455:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_bldcFaultReset();
1456:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1457:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1458:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
1459:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1460:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static uint8_t FLT_Get_Motor_Timeout (uint8_t pump_type, uint8_t  displacement)
1461:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
1462:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	uint8_t ret=0;
1463:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1464:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( pump_type==DRAIN_BLDC_PUMP)
1465:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
1466:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if( SPV_isAutotestOrTestRunning() )
1467:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{/*la macchina a stati gestice i tentativi di sblocco cghe partono allo sacadere del tempo di fau
1468:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1469:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			ret= OFFS_B(Tab_ExtDevFaultDrainSpecial.Data,displacement);
1470:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}else
1471:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
1472:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			ret=OFFS_B(Tab_ExtDevFaultDrain.Data,displacement) ;
1473:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1474:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}else
1475:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
1476:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if( SPV_isAutotestOrTestRunning() )
1477:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{/*la macchina a stati gestice i tentativi di sblocco cghe partono allo sacadere del tempo di fau
1478:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1479:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			ret= OFFS_B(Tab_ExtDevFault_Special.Data,displacement) ;
1480:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}else
1481:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
1482:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			ret=OFFS_B(Tab_ExtDevFault.Data,displacement);
1483:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1484:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1485:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	return ret;
1486:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
1487:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1488:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
1489:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Gestione resistenza durante anomalie su BLDC
1490:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1491:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [out]
1492:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1493:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1494:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return 		none.
1495:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1496:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
1497:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date			11/11/09
1498:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author		Valeria Catani
1499:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1500:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
1501:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** void FLT_bldcFaultLoadMgmt(void)
1502:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
1503:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1504:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( Res_Pos[LD_WASH_RES_IND] != NO_LD_POS )
1505:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
1506:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		/* Resistenza lavaggio presente */
1507:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1508:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ((  FltWarning.bldc_low_voltage	== 1)|| (FltWarning.bldc_OH	== 1)||(TESTBIT(FltBLDCUnblock.fla
1509:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
1510:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			/* Richiesta spegnimento resistenza a causa di anomalia su BLAC */
1511:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1512:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if ( LoadsReq_New[Res_Pos[LD_WASH_RES_IND]].b == RES_ON )
1513:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1514:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{
1515:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				/*
1516:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				E' in corso la valutazione del timeout di riscaldamento e la
1517:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				resistenza lavaggio viene spenta SOLO a causa delle anomalie
1518:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				segnalate dal BLAC, altrimenti sarebbe accesa.
1519:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				Solo in questo caso abilito il contatore, così evito di conteggiare
1520:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				i "falsi" Under Voltage dovuti ad esempio all'apertura della porta
1521:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				o al ciclo messo in PAUSA.
1522:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				*/
1523:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				LoadsReq_New[Res_Pos[LD_WASH_RES_IND]].b = RES_OFF;
1524:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1525:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if (FltHeatToutData.uP_exe ==TRUE )
1526:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{/* sto eseguendo il uP HEAT*/
1527:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( FltWarning.bldc_low_voltage	== 1)
1528:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
1529:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						(void)SWTC_Run((SWTC_CountersType)FLT_UNDER_VOLTAGE_RES_OFF_M_COUNTER);
1530:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
1531:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					else
1532:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
1533:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						(void)SWTC_Stop((SWTC_CountersType)FLT_UNDER_VOLTAGE_RES_OFF_M_COUNTER);
1534:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
1535:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( FltWarning.bldc_OH	== 1)
1536:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{	/* Richiesta spegnimento resistenza a causa di anomalia su BLAC */
1537:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						(void)SWTC_Run((SWTC_CountersType)FLT_OVERHEATING_RES_OFF_M_COUNTER);
1538:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
1539:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					else
1540:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
1541:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						(void)SWTC_Stop((SWTC_CountersType)FLT_OVERHEATING_RES_OFF_M_COUNTER);
1542:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
1543:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
1544:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1545:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}/* resistenza spenta */
1546:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			else
1547:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{
1548:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Stop((SWTC_CountersType)FLT_UNDER_VOLTAGE_RES_OFF_M_COUNTER);
1549:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Stop((SWTC_CountersType)FLT_OVERHEATING_RES_OFF_M_COUNTER);
1550:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
1551:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1552:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}/* non ci sono problemi su dsp */
1553:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		else
1554:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
1555:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			(void)SWTC_Stop((SWTC_CountersType)FLT_UNDER_VOLTAGE_RES_OFF_M_COUNTER);
1556:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			(void)SWTC_Stop((SWTC_CountersType)FLT_OVERHEATING_RES_OFF_M_COUNTER);
1557:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1558:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1559:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
1560:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1561:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** #endif
1562:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
1563:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Gestione warning  su timeout riscaldamento (F08 - F05)
1564:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1565:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [out]
1566:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1567:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1568:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return 		none.
1569:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1570:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
1571:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date			15/07/08
1572:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author		Valeria Catani
1573:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1574:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \ nota: dato che il timer è a minuti e la routine viene chiamata ogni 100 ms
1575:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \ entro nella routine di dichiarazione del prefault più volte, fino a che il valore del timer è
1576:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \ TOUT_HEAT_FAULT-TOUT_HEAT_PREFAULT. Sovrascriverò più volte la BBOX.
1577:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1578:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
1579:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** void FLT_heatToutFaultMgmt(void)
1580:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
1581:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** uint8_t * ExtDevFaultParams;
1582:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** uint8_t * ExtDevFaultParams_1;
1583:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1584:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( SPV_isAutotestOrTestRunning() )
1585:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
1586:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		ExtDevFaultParams= Tab_HeatFault_Special.Data;
1587:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		ExtDevFaultParams_1 = Tab_ExtDevFault_Special.Data;
1588:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1589:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	else
1590:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
1591:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		ExtDevFaultParams = Tab_HeatFault.Data;
1592:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		ExtDevFaultParams_1 = ExtDevFaultParams=Tab_ExtDevFault.Data;
1593:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1594:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1595:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ( FltHeatToutData.uP_exe  == FALSE )
1596:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{/* nell'iterazione corrente non è stato eseguito uP Heat */
1597:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1598:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		/* reset prefault F05 sub 2 se presente e non sono in F05 */
1599:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1600:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_ResetFaultDetectProc(FLT_CODE_PRESS_SWITCH, FLT_SUBCODE_PRESS_SWITCH_HEAT, (uint16_t) TOUT_RE
1601:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FltHeatToutData.state = FLT_HEAT_TOUT_DISABLE;
1602:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		CLRBIT(FltFlagsKO,FLAG_BLDC_UNDVL);
1603:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		CLRBIT(FltFlagsKO,FLAG_BLDC_OH);
1604:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		CLRBIT(FltFlagsKO,FLAG_BLDC_HEATTOUT);
1605:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		CLRBIT(FltFlagsKO,FLAG_BLDC_PRESS_SWITCH);
1606:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if(SPV_isAutotestRunning())
1607:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
1608:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc(FLT_CODE_HEAT_TOUT,FLT_SUBCODE_HEAT_TOUT,(uint16_t)TOUT_RESET_PREFAULT 
1609:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc(FLT_CODE_MAIN_BOARD,FLT_SUBCODE_BLDC_UNDER_VOLTAGE,(uint16_t)TOUT_RESET
1610:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc(FLT_CODE_MAIN_BOARD,FLT_SUBCODE_BLDC_OVERHEATING,(uint16_t)TOUT_RESET_P
1611:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1612:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1613:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1614:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1615:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1616:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1617:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	switch (FltHeatToutData.state )
1618:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
1619:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1620:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		case FLT_HEAT_TOUT_INIT:
1621:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			(void)SWTC_SetMValue((SWTC_CountersType)FLT_HEATTOUT_M_COUNTER, (SWTC_MCounterValue)(TOUT_HEAT_P
1622:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1623:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1624:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			/*
1625:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			Init contatore tempo Under Voltage al valore massimo (è usato come se
1626:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			fosse un Up Counter, si controlla il tempo trascorso a partire da questa
1627:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			inizializzazione).
1628:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			Lo start/stop è gestito in FLT_bldcFaultLoadMgmt() in base allo stato
1629:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			della resistenza lavaggio.
1630:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			*/
1631:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1632:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			(void)SWTC_SetMValue((SWTC_CountersType)FLT_UNDER_VOLTAGE_RES_OFF_M_COUNTER, (SWTC_MCounterValue
1633:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			/* init contatore overheating */
1634:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			(void)SWTC_SetMValue((SWTC_CountersType)FLT_OVERHEATING_RES_OFF_M_COUNTER, (SWTC_MCounterValue)0
1635:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1636:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1637:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FltHeatToutData.state ++;
1638:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1639:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			break;
1640:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1641:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		case FLT_HEAT_TOUT_EXE_P:
1642:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		case FLT_HEAT_TOUT_EXE_F:
1643:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if ( uPDoorStatus == UP_DOOR_WAIT )
1644:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{/* porta aperta o in attesa di timeout dopo la chiusura -> il uP va sospeso (res OFF)
1645:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				non posso far avanzare la procedura */
1646:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1647:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				/* disabilito timeout riscaldamento */
1648:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Stop((SWTC_CountersType)FLT_HEATTOUT_M_COUNTER);
1649:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				/* non serve fermare gli atri due timer, perchè a porta aperta la resistenza è spenta e quind
1650:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1651:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
1652:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			else
1653:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{/* porta chiusa */
1654:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1655:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Run((SWTC_CountersType)FLT_HEATTOUT_M_COUNTER);
1656:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1657:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1658:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if( SWTC_IsExpired((SWTC_CountersType)FLT_HEATTOUT_M_COUNTER) )
1659:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{/* timeout prefault esaurito -> controllo pressostato per differenziare codici */
1660:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					(void)SWTC_SetMValue((SWTC_CountersType)FLT_HEATTOUT_M_COUNTER, (SWTC_MCounterValue)(TOUT_HEAT
1661:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					/* Soglia di prefault/fault da Under Voltage (in secondi) */
1662:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if( SWTC_IsExpired((SWTC_CountersType)FLT_UNDER_VOLTAGE_RES_OFF_M_COUNTER) )
1663:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
1664:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						(void)SWTC_SetMValue((SWTC_CountersType)FLT_UNDER_VOLTAGE_RES_OFF_M_COUNTER, (SWTC_MCounterVa
1665:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if (FltHeatToutData.state == FLT_HEAT_TOUT_EXE_F)
1666:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{
1667:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1668:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							SETBIT(Flags_3,JIF_FLAG3_WASH_UNDERVOLTAGE_WARN);
1669:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							FLT_warningSave(FLT_CODE_MAIN_BOARD, FLT_SUBCODE_BLDC_UNDER_VOLTAGE,WRN_FAULT);
1670:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}else
1671:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{
1672:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							FLT_warningSave(FLT_CODE_MAIN_BOARD, FLT_SUBCODE_BLDC_UNDER_VOLTAGE,WRN_PREFAULT);
1673:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}
1674:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						SETBIT(FltFlagsKO,FLAG_BLDC_UNDVL);
1675:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_Update_warning_proc(FLAG_BLDC_UNDVL,FLT_CODE_MAIN_BOARD,FLT_SUBCODE_BLDC_UNDER_VOLTAGE);
1676:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1677:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****                         /*Setta il prefault?*/
1678:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1679:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}else
1680:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
1681:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if( (SWTC_TimeType)SWTC_GetElapsedTime((SWTC_CountersType)FLT_OVERHEATING_RES_OFF_M_COUNTER) 
1682:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{	/* nel ciclo c'è stato un warning bldc overheating (mancata accensione resistenza a causa 
1683:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							if (FltHeatToutData.state  == FLT_HEAT_TOUT_EXE_F)
1684:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							{
1685:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								FLT_warningSave(FLT_CODE_MAIN_BOARD, FLT_SUBCODE_BLDC_OVERHEATING,WRN_FAULT);
1686:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								SETBIT(Flags_3,JIF_FLAG3_WASH_OVERHEATING_WARN);
1687:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1688:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							}else
1689:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							{
1690:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								FLT_warningSave(FLT_CODE_MAIN_BOARD, FLT_SUBCODE_BLDC_OVERHEATING,WRN_PREFAULT);
1691:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							}
1692:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							SETBIT(FltFlagsKO,FLAG_BLDC_OH);
1693:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							FLT_Update_warning_proc(FLAG_BLDC_OH,FLT_CODE_MAIN_BOARD,FLT_SUBCODE_BLDC_OVERHEATING);
1694:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1695:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1696:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}
1697:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						else
1698:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{		/* No warning BLDC */
1699:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							if ((TESTBIT (GIValid, (GI_FIRST_CRITERION_BIT + GI_PRESS_SENS_CR_FULL_IND) ) != 0) || (HWC_
1700:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							{/* criterio pressostato valido o presenza di sensori virtuali per la pompa lavaggio  */
1701:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1702:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								if ( (TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) != 0 ) ||(HWC_Flags.bit.vs_wash_presen
1703:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								{ /* Tout riscaldamento + pieno pressostato: RES pilotata -> problema imputato alla RES */
1704:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								  /*Tout riscaldamento + sensori virtuali ->problema imputato alla RES */
1705:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									/* prefault set  T_preFaultSet(FLT_CODE_HEAT_TOUT,FLT_SUBCODE_HEAT_TOUT); */
1706:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1707:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									if (FltHeatToutData.state == FLT_HEAT_TOUT_EXE_F)
1708:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									{
1709:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 										FLT_warningSave(FLT_CODE_HEAT_TOUT, FLT_SUBCODE_HEAT_TOUT,WRN_FAULT);
1710:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 										SETBIT(Flags_3,JIF_FLAG3_HEAT_TOUT_WARN);
1711:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									}else
1712:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									{
1713:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 										FLT_warningSave(FLT_CODE_HEAT_TOUT, FLT_SUBCODE_HEAT_TOUT,WRN_PREFAULT);
1714:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									}
1715:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1716:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									SETBIT(FltFlagsKO,FLAG_BLDC_HEATTOUT);
1717:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									FLT_Update_warning_proc(FLAG_BLDC_HEATTOUT,FLT_CODE_HEAT_TOUT,FLT_SUBCODE_HEAT_TOUT);
1718:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1719:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								}else
1720:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								{
1721:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									SETBIT(FltFlagsKO,FLAG_BLDC_PRESS_SWITCH);
1722:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									FLT_manageFault(FLT_CODE_PRESS_SWITCH,FLT_SUBCODE_PRESS_SWITCH_HEAT);
1723:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1724:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								}
1725:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							}
1726:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1727:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}
1728:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1729:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
1730:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					(void)SWTC_Stop((SWTC_CountersType)FLT_HEATTOUT_M_COUNTER);
1731:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FltHeatToutData.state++;
1732:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1733:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}/* timeout scaduto */
1734:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				else
1735:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{
1736:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FLT_Update_warning_proc(FLAG_BLDC_HEATTOUT,FLT_CODE_HEAT_TOUT,FLT_SUBCODE_HEAT_TOUT);
1737:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FLT_Update_warning_proc(FLAG_BLDC_UNDVL,FLT_CODE_MAIN_BOARD,FLT_SUBCODE_BLDC_UNDER_VOLTAGE);
1738:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FLT_Update_warning_proc(FLAG_BLDC_OH,FLT_CODE_MAIN_BOARD,FLT_SUBCODE_BLDC_OVERHEATING);
1739:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( TESTBIT(FltFlagsKO,FLAG_BLDC_PRESS_SWITCH))
1740:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{/* questo serve per forzare la macchina a stati dei fault . i tempi di fault e prefault per q
1741:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1742:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if (( FLT_checkForCurrentFault( FLT_CODE_PRESS_SWITCH, FLT_SUBCODE_PRESS_SWITCH_HEAT) )&& (Fa
1743:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{
1744:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							CLRBIT(FltFlagsKO,FLAG_BLDC_PRESS_SWITCH);
1745:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}
1746:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_manageFault(FLT_CODE_PRESS_SWITCH,FLT_SUBCODE_PRESS_SWITCH_HEAT);
1747:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
1748:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
1749:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1750:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			} /* else porta chiusa */
1751:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1752:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			break;
1753:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1754:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		case FLT_HEAT_TOUT_END:
1755:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1756:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			break;
1757:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1758:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		case FLT_HEAT_TOUT_DISABLE:
1759:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1760:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			(void)SWTC_Stop((SWTC_CountersType)FLT_HEATTOUT_M_COUNTER);
1761:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1762:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			break;
1763:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1764:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		default:
1765:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			break;
1766:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1767:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1768:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1769:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	FltHeatToutData.uP_exe = FALSE; /* reset controllo su uP per iterazione in corso
1770:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									la var verrà messa a TRUE dal passaggio per uP Heat */
1771:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1772:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
1773:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1774:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
1775:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  * questa funzione serve per gestire i fault o gli warning
1776:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  * in autotest si deve andare in fault.
1777:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  *
1778:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  *
1779:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1780:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1781:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [in] 	FltWarning (global)
1782:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1783:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return 		none
1784:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \warning
1785:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1786:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \notes:
1787:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1788:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.1.0
1789:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date 			3/12/2013
1790:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author			Emanuela Antognoli
1791:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
1792:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_Update_warning_proc( uint8_t  flag_pending, uint8_t code, uint8_t subcode)
1793:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
1794:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if(SPV_isAutotestRunning())
1795:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
1796:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( TESTBIT(FltFlagsKO,flag_pending))
1797:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{/* questo serve per forzare la macchina a stati dei fault . i tempi di fault e prefault per ques
1798:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1799:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if (( FLT_checkForCurrentFault( code, subcode)) && (FaultMgmt_Data[0].step == PREFAULT_STEP))
1800:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{
1801:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				CLRBIT(FltFlagsKO,flag_pending);
1802:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
1803:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_manageFault(code,subcode);
1804:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1805:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1806:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
1807:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /*
1808:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  * Fault su circuito porta  . se da setting non sono definiti i valori di out of range non viene ma
1809:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  *
1810:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [out]
1811:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1812:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1813:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return 		none.
1814:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1815:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
1816:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date			28/11/13
1817:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author		Emanuela Antognoli
1818:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
1819:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_doorCircuitFaultMgmt(void)
1820:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
1821:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1822:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ( TESTBIT(FltGICriteria,GI_CR_DOOR_IND) )
1823:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{/* lettura analogica out of range */
1824:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1825:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_manageFault(FLT_CODE_MAIN_BOARD,FLT_SUBCODE_DOOR_OUT_OF_RANGE);
1826:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1827:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	else
1828:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
1829:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			/* Segnale filtrato di Zero Crossing presente */
1830:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_ResetFaultDetectProc( FLT_CODE_MAIN_BOARD, FLT_SUBCODE_DOOR_OUT_OF_RANGE,(uint16_t)TOUT_RESET
1831:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1832:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1833:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
1834:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
1835:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  * Gestione Fault sensori virtuali ( incongruenza e legami tra sensore pompa lavaggio e scarico
1836:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****   *
1837:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1838:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1839:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [in]
1840:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1841:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return 		none
1842:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \warning
1843:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1844:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \notes:
1845:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1846:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.1.0
1847:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date 			9/12/2013
1848:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author			Emanuela Antognoli
1849:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
1850:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1851:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_VSFaultMgmt(void)
1852:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
1853:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1854:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (	TESTBIT(Flags_2, FLAG2_VIRTUALSENSOR_TEST_STARTED_FLAG))/* permette di fare il controllo una 
1855:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
1856:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1857:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if((Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==0)&&(TESTBIT(Flags_1,JIF_FLAG1_UP_TERMINATED_KO
1858:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	    { /* la pompa lavaggio aveva visto il vuoto: errore VSFvs_ */
1859:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if (TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_DRAIN))  )
1860:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{
1861:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			 /* pompa scarico ha visto il vuoto */
1862:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				CLRBIT(Flags_2, FLAG2_VIRTUALSENSOR_TEST_STARTED_FLAG);
1863:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				CLRBIT(Flags_1,JIF_FLAG1_UP_TERMINATED_KO_POS) ;
1864:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_DRAIN]==0)
1865:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{
1866:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1867:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					SETBIT(Flags_3, JIF_FLAG3_VIRTUALSENSOR_END_CYCLE);
1868:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1869:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}else
1870:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{
1871:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1872:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				  	FltFlagsVS.VScheckinconsistency++;
1873:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					SETBIT(Flags_2, FLAG2_CLOGGED_FILTER);
1874:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FLT_manageFault(FLT_CODE_VS,FLT_SUBCODE_EMPTY_WASH_FULL_DRAIN);
1875:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if (( FLT_checkForCurrentFault( FLT_CODE_VS, FLT_SUBCODE_EMPTY_WASH_FULL_DRAIN)) && (FaultMgmt
1876:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{/* questa chiamata forza la macchina a stati ad andare direttamente in prefault . Se siamo gi
1877:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					chiamata una volta sola e se non è intervenuto un altro fault , dopo X Volte va in fault*/
1878:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_manageFault(FLT_CODE_VS,FLT_SUBCODE_EMPTY_WASH_FULL_DRAIN);
1879:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
1880:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1881:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			    }
1882:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
1883:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}else
1884:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
1885:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1886:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			 if((Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]!=0)&&(Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_W
1887:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			 {
1888:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				 /* siamo in caricamento statico e ho visto il pieno*/
1889:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if (TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_DRAIN) ) )
1890:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{
1891:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					CLRBIT(Flags_2, FLAG2_VIRTUALSENSOR_TEST_STARTED_FLAG);
1892:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					CLRBIT(Flags_1,JIF_FLAG1_UP_TERMINATED_KO_POS) ;
1893:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_DRAIN]==0)
1894:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
1895:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FltFlagsVS.VScheckinconsistency++;
1896:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						SETBIT(Flags_2, FLAG2_CLOGGED_FILTER);
1897:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_manageFault(FLT_CODE_VS,FLT_SUBCODE_EMPTY_DRAIN_FULL_WASH);
1898:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if (( FLT_checkForCurrentFault( FLT_CODE_VS, FLT_SUBCODE_EMPTY_DRAIN_FULL_WASH)) && (FaultMgm
1899:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{/* questa chiamata forza la macchina a stati ad andare direttamente in prefault . Se siamo g
1900:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						chiamata una volta sola e se non è intervenuto un altro fault , dopo X Volte va in fault*/
1901:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							FLT_manageFault(FLT_CODE_VS,FLT_SUBCODE_EMPTY_DRAIN_FULL_WASH);
1902:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}
1903:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1904:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}	 else
1905:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
1906:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1907:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FltFlagsVS.warninglostwater++;
1908:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_manageFault(FLT_CODE_LOAD_EV_KO,FLT_SUBCODE_EV_VIA_VS);
1909:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if (( FLT_checkForCurrentFault( FLT_CODE_LOAD_EV_KO, FLT_SUBCODE_EV_VIA_VS)) && (FaultMgmt_Da
1910:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{/* questa chiamata forza la macchina a stati ad andare direttamente in prefault . Se siamo g
1911:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						chiamata una volta sola e se non è intervenuto un altro fault , dopo X Volte va in fault*/
1912:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							FLT_manageFault(FLT_CODE_LOAD_EV_KO,FLT_SUBCODE_EV_VIA_VS);
1913:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}
1914:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				    }
1915:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1916:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				 }
1917:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1918:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			 }
1919:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			 else
1920:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			 if (TESTBIT(Flags_1,JIF_FLAG1_ALGO_DIRTY_F_KO_POS) && (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_W
1921:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			 {/* durante l'attivazione dell'algoritmo si è visto zero nel VS del lavaggio*/
1922:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if (TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_DRAIN))  )
1923:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{
1924:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					CLRBIT(Flags_2, FLAG2_VIRTUALSENSOR_TEST_STARTED_FLAG);
1925:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					CLRBIT(Flags_1,JIF_FLAG1_ALGO_DIRTY_F_KO_POS) ;
1926:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_DRAIN]==0)
1927:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
1928:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						SETBIT(Flags_3, JIF_FLAG3_VIRTUALSENSOR_END_CYCLE);
1929:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}else
1930:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
1931:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FltFlagsVS.VScheckinconsistency++;
1932:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_manageFault(FLT_CODE_VS,FLT_SUBCODE_EMPTY_WASH_FULL_DRAIN);
1933:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if (( FLT_checkForCurrentFault( FLT_CODE_VS, FLT_SUBCODE_EMPTY_WASH_FULL_DRAIN)) && (FaultMgm
1934:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{/* questa chiamata forza la macchina a stati ad andare direttamente in prefault . Se siamo g
1935:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						chiamata una volta sola e se non è intervenuto un altro fault , dopo X Volte va in fault*/
1936:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							FLT_manageFault(FLT_CODE_VS,FLT_SUBCODE_EMPTY_WASH_FULL_DRAIN);
1937:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}
1938:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1939:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					 }
1940:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
1941:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}else
1942:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{
1943:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				CLRBIT(Flags_1,JIF_FLAG1_ALGO_DIRTY_F_KO_POS) ;
1944:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
1945:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1946:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1947:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1948:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1949:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1950:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1951:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (FltFlagsVS.VScheckinconsistency>= FLT_GetVS_timer(FLTN_INCONSISTENCY))
1952:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{/* questa è una sicurezza per cui , anche se la macchina a stati viene presa da un fault priorit
1953:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	fino a quando non viene resettato il valore.*/
1954:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1955:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==0)
1956:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
1957:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_manageFault(FLT_CODE_VS,FLT_SUBCODE_EMPTY_WASH_FULL_DRAIN);
1958:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1959:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		else
1960:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
1961:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1962:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_manageFault(FLT_CODE_VS,FLT_SUBCODE_EMPTY_DRAIN_FULL_WASH);
1963:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1964:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}else
1965:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
1966:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if (FltFlagsVS.VScheckinconsistency==0 )
1967:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
1968:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc( FLT_CODE_VS, FLT_SUBCODE_EMPTY_WASH_FULL_DRAIN,(uint16_t)TOUT_RESET_PR
1969:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc( FLT_CODE_VS, FLT_SUBCODE_EMPTY_DRAIN_FULL_WASH,(uint16_t)TOUT_RESET_PR
1970:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1971:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1972:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (FltFlagsVS.warninglostwater>= FLT_GetVS_timer(FLTN_LOST_WATER))
1973:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
1974:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_manageFault(FLT_CODE_LOAD_EV_KO,FLT_SUBCODE_EV_VIA_VS);
1975:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1976:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}else
1977:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
1978:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if (FltFlagsVS.warninglostwater==0 )
1979:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
1980:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc( FLT_CODE_LOAD_EV_KO, FLT_SUBCODE_EV_VIA_VS,(uint16_t)TOUT_RESET_PREFAU
1981:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
1982:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1983:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1984:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1985:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
1986:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* ritorna il numero di tentativi di controllo del fault sui sensoi virtuali, in caso di autotest e
1987:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static uint8_t  FLT_GetVS_timer(uint8_t displacement)
1988:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
  48                             		.loc 1 1988 0
  49                             	.LVL2:
  50 0000 7E A7                   		push.l	r7
  51                             	.LCFI0:
  52 0002 CF 17                   		mov.B	r1, r7
  53                             	.LVL3:
1989:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	uint8_t ret=0;
1990:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	uint8_t* VSFaultData;
1991:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
1992:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if(SPV_isAutotestRunning())
  54                             		.loc 1 1992 0
  55 0004 05 00 00 00             		bsr	_SPV_isAutotestRunning
  56                             	.LVL4:
  57 0008 61 01                   		cmp	#0, r1
  58 000a 10                      		beq	.L12
1993:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
1994:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		VSFaultData= Tab_VSFaultSpecial.Data;
  59                             		.loc 1 1994 0
  60 000b FB E2 00 00 00 00       		mov.L	#_Tab_VSFaultSpecial, r14
  61 0011 0F                      		bra	.L17
  62                             	.L12:
1995:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
1996:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	else
1997:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
1998:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		VSFaultData= Tab_VSFault.Data;
  63                             		.loc 1 1998 0
  64 0012 FB E2 00 00 00 00       		mov.L	#_Tab_VSFault, r14
  65                             		.balign 2,3,1
  66                             	.L17:
  67 0018 EC EE                   		mov.L	[r14], r14
  68                             	.LVL5:
1999:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
2000:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ( displacement)
  69                             		.loc 1 2000 0
  70 001a 76 27 FF 00             		and #0xff, r7
  71                             	.LVL6:
  72 001e 16                      		beq	.L14
2001:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
2002:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		ret=  HINIBBLE(OFFS_B(VSFaultData,0));
  73                             		.loc 1 2002 0
  74 001f 58 E1                   		movu.B	[r14], r1
  75 0021 68 41                   		shlr	#4, r1
  76                             	.LVL7:
  77 0023 0D                      		bra	.L15
  78                             	.LVL8:
  79                             	.L14:
2003:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
2004:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	else
2005:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
2006:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		ret= LONIBBLE(OFFS_B(VSFaultData,0));
  80                             		.loc 1 2006 0
  81 0024 CC E1                   		mov.B	[r14], r1
  82 0026 64 F1                   		and #15, r1
  83                             	.LVL9:
  84                             		.balign 2,3,1
  85                             	.L15:
2007:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
2008:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	return ret;
2009:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2010:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
  86                             		.loc 1 2010 0
  87 0028 64 F1                   		and #15, r1
  88                             	.LVL10:
  89 002a 3F 77 01                		rtsd	#4, r7-r7
  90                             	.LFE29:
  92 002d 03                      		.section	.text.FLT_Reset_Circuit_Resistor_Fault,"ax",@progbits
  94                             	_FLT_Reset_Circuit_Resistor_Fault:
  95                             	.LFB8:
 706:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
  96                             		.loc 1 706 0
 707:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	FLT_ResetFaultDetectProc( FLT_CODE_MAIN_BOARD, FLT_SUBCODE_FEEDBACK_KO,(uint16_t)TOUT_RESET_PREFAU
  97                             		.loc 1 707 0
  98 0000 66 D1                   		mov	#13, r1
  99 0002 66 32                   		mov	#3, r2
 100 0004 66 03                   		mov	#0, r3
 101 0006 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
 102                             	.LVL11:
 708:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	FLT_ResetFaultDetectProc( FLT_CODE_MAIN_BOARD, FLT_SUBCODE_GENERIC_ERROR,(uint16_t)TOUT_RESET_PREF
 103                             		.loc 1 708 0
 104 000a 66 D1                   		mov	#13, r1
 105 000c 66 42                   		mov	#4, r2
 106 000e 66 03                   		mov	#0, r3
 107 0010 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
 108                             	.LVL12:
 709:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	FLT_ResetFaultDetectProc( FLT_CODE_MAIN_BOARD, FLT_SUBCODE_RELE_RES_CC,(uint16_t)TOUT_RESET_PREFAU
 109                             		.loc 1 709 0
 110 0014 66 D1                   		mov	#13, r1
 111 0016 66 12                   		mov	#1, r2
 112 0018 66 03                   		mov	#0, r3
 113 001a 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
 114                             	.LVL13:
 710:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	FLT_ResetFaultDetectProc( FLT_CODE_MAIN_BOARD, FLT_SUBCODE_RELE_RES_CA,(uint16_t)TOUT_RESET_PREFAU
 115                             		.loc 1 710 0
 116 001e 66 D1                   		mov	#13, r1
 117 0020 66 22                   		mov	#2, r2
 118 0022 66 03                   		mov	#0, r3
 119 0024 04 00 00 00             		bra	_FLT_ResetFaultDetectProc
 120                             	.LVL14:
 121                             	.LFE8:
 123                             		.section	.text.FLT_Get_Motor_Timeout,"ax",@progbits
 125                             	_FLT_Get_Motor_Timeout:
 126                             	.LFB23:
1461:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 127                             		.loc 1 1461 0
 128                             	.LVL15:
 129 0000 7E A7                   		push.l	r7
 130                             	.LCFI1:
 131 0002 CF 27                   		mov.B	r2, r7
 132                             	.LVL16:
1464:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( pump_type==DRAIN_BLDC_PUMP)
 133                             		.loc 1 1464 0
 134 0004 5B 11                   		movu.B	r1, r1
 135 0006 61 11                   		cmp	#1, r1
 136 0008 21 1B                   		bne	.L20
 137                             	.LVL17:
 138                             	.LBB7:
 139                             	.LBB8:
1466:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if( SPV_isAutotestOrTestRunning() )
 140                             		.loc 1 1466 0
 141 000a 05 00 00 00             		bsr	_SPV_isAutotestOrTestRunning
 142                             	.LVL18:
 143 000e 5B 77                   		movu.B	r7, r7
 144                             	.LVL19:
 145 0010 61 01                   		cmp	#0, r1
 146 0012 11                      		beq	.L21
1469:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			ret= OFFS_B(Tab_ExtDevFaultDrainSpecial.Data,displacement);
 147                             		.loc 1 1469 0
 148 0013 FB E2 00 00 00 00       		mov.L	#_Tab_ExtDevFaultDrainSpecial, r14
 149 0019 2E 21                   		bra	.L26
 150                             	.L21:
1472:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			ret=OFFS_B(Tab_ExtDevFaultDrain.Data,displacement) ;
 151                             		.loc 1 1472 0
 152 001b FB E2 00 00 00 00       		mov.L	#_Tab_ExtDevFaultDrain, r14
 153 0021 2E 19                   		bra	.L26
 154                             	.LVL20:
 155                             	.L20:
 156                             	.LBE8:
 157                             	.LBE7:
1476:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if( SPV_isAutotestOrTestRunning() )
 158                             		.loc 1 1476 0
 159 0023 05 00 00 00             		bsr	_SPV_isAutotestOrTestRunning
 160                             	.LVL21:
 161 0027 5B 77                   		movu.B	r7, r7
 162                             	.LVL22:
 163 0029 61 01                   		cmp	#0, r1
 164 002b 10                      		beq	.L24
1479:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			ret= OFFS_B(Tab_ExtDevFault_Special.Data,displacement) ;
 165                             		.loc 1 1479 0
 166 002c FB E2 00 00 00 00       		mov.L	#_Tab_ExtDevFault_Special, r14
 167 0032 08                      		bra	.L26
 168                             	.L24:
1482:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			ret=OFFS_B(Tab_ExtDevFault.Data,displacement);
 169                             		.loc 1 1482 0
 170 0033 FB E2 00 00 00 00       		mov.L	#_Tab_ExtDevFault, r14
 171                             	.LVL23:
 172 0039 03                      		.balign 2,3,1
 173                             	.L26:
 174 003a EC EE                   		mov.L	[r14], r14
1486:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 175                             		.loc 1 1486 0
 176 003c FE C7 E1                		movu.B	[r7,r14], r1
 177 003f 3F 77 01                		rtsd	#4, r7-r7
 178                             	.LFE23:
 180                             		.section	.text.FLT_PulseCounterStill_Reset,"ax",@progbits
 182                             	_FLT_PulseCounterStill_Reset:
 183                             	.LFB5:
 351:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 184                             		.loc 1 351 0
 353:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	CLRBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS);
 185                             		.loc 1 353 0
 186 0000 FB E2 00 00 00 00       		mov.L	#_Flags_1, r14
 187 0006 F0 EA                   		bclr #2, [r14].B
 355:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (HWC_Flags.bit.vs_wash_presence)
 188                             		.loc 1 355 0
 189 0008 FB E2 00 00 00 00       		mov.L	#_HWC_Flags, r14
 190 000e DC EE                   		mov.W	[r14], r14
 191 0010 75 2E 10                		and #16, r14
 192 0013 5F EE                   		movu.W	r14, r14
 193 0015 61 0E                   		cmp	#0, r14
 194 0017 20 0F                   		beq	.L28
 357:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FltWarning.load=FALSE;
 195                             		.loc 1 357 0
 196 0019 FB E2 00 00 00 00       		mov.L	#_FltWarning, r14
 197 001f DC E4                   		mov.W	[r14], r4
 198 0021 7A 04                   		bclr	#0, r4
 199 0023 D3 E4                   		mov.W	r4, [r14]
 200 0025 03                      		.balign 2,3,5
 201                             	.L28:
 359:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	CLRBIT(FltFlagsKO,FLAG_PULSE_KO_LOAD); /* QI - 02.12.09 restart procedura anzichè solo restart co
 202                             		.loc 1 359 0
 203 0026 FB E2 00 00 00 00       		mov.L	#_FltFlagsKO, r14
 204 002c DC E4                   		mov.W	[r14], r4
 205 002e 7A 74                   		bclr #7, r4
 206 0030 D3 E4                   		mov.W	r4, [r14]
 364:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****     if( SPV_isAutotestOrTestRunning() )
 207                             		.loc 1 364 0
 208 0032 05 00 00 00             		bsr	_SPV_isAutotestOrTestRunning
 209                             	.LVL24:
 210 0036 61 01                   		cmp	#0, r1
 211 0038 10                      		beq	.L29
 212                             	.LBB11:
 213                             	.LBB12:
 366:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		SWTC_SetMValue((SWTC_CountersType)PULSE_STILL_M_COUNTER, (SWTC_MCounterValue)TOUT_PULSE_COUNTER_S
 214                             		.loc 1 366 0
 215 0039 FB E2 00 00 00 00       		mov.L	#_Tab_LoadFault_Special, r14
 216 003f 0F                      		bra	.L33
 217                             	.L29:
 218                             	.LBE12:
 219                             	.LBE11:
 369:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		SWTC_SetMValue((SWTC_CountersType)PULSE_STILL_M_COUNTER, (SWTC_MCounterValue)TOUT_PULSE_COUNTER_S
 220                             		.loc 1 369 0
 221 0040 FB E2 00 00 00 00       		mov.L	#_Tab_LoadFault, r14
 222                             		.balign 2,3,1
 223                             	.L33:
 224 0046 EC EE                   		mov.L	[r14], r14
 225 0048 59 E2 04                		movu.B	4[r14], r2
 226 004b 75 41 23                		mov	#35, r1
 227 004e 04 00 00 00             		bra	_SWTC_SetMValue
 228                             	.LVL25:
 229                             	.LFE5:
 231                             		.section	.text.FLT_checkLoadEV,"ax",@progbits
 233                             	_FLT_checkLoadEV:
 234                             	.LFB35:
2011:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2012:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
2013:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Gestione fault su anomalia pressostato (F05)
2014:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2015:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [out]
2016:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2017:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2018:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return 		none.
2019:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2020:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
2021:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date			10/07/08
2022:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author		Valeria Catani
2023:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2024:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
2025:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_pressSwitchFaultMgmt(void)
2026:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
2027:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2028:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (TESTBIT (GIValid, (GI_FIRST_CRITERION_BIT + GI_PRESS_SENS_CR_FULL_IND) ) != 0)
2029:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{/* criterio pressostato valido */
2030:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2031:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )
2032:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{/* vuoto pressostato */
2033:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2034:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if ( TESTBIT(FltFlagsKO,WARNING_LOADPP_KO) )
2035:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{/* flag anomalia pressostato in uPLoad*/
2036:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2037:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			 /* il flag viene alzato nel uP load:
2038:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			  *  con caricamento a turbina, se è richiesto il controllo sul pieno pressostato  e vedo vuoto
2039:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2040:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				/* dichiarazione Fault F05 */
2041:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				FLT_manageFault(FLT_CODE_PRESS_SWITCH,FLT_SUBCODE_PRESS_SWITCH_LOAD);
2042:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}else
2043:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{
2044:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				FLT_ResetFaultDetectProc( FLT_CODE_PRESS_SWITCH, FLT_SUBCODE_PRESS_SWITCH_LOAD,(uint16_t)TOUT_R
2045:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
2046:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}else
2047:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
2048:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc( FLT_CODE_PRESS_SWITCH, FLT_SUBCODE_PRESS_SWITCH_LOAD,(uint16_t)TOUT_RE
2049:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
2050:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
2051:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
2052:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2053:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2054:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
2055:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Gestione fault su timeout carico (F06) e warning H20
2056:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2057:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [out]
2058:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2059:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2060:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return 		none.
2061:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2062:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
2063:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date			10/07/08
2064:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author		Valeria Catani
2065:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2066:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
2067:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_loadToutFaultMgmt(void)
2068:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
2069:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2070:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ( FltLoadToutData.uP_exe == FALSE )
2071:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{	/* nell'iterazione corrente non è stato eseguito uP Load */
2072:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2073:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2074:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if (HWC_Flags.bit.vs_wash_presence!=0)
2075:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
2076:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FltWarning.load = FALSE;
2077:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
2078:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FltLoadToutData.state = FLT_LOAD_TOUT_DISABLE;
2079:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_ResetFaultDetectProc( FLT_CODE_LOAD_TIMEOUT, FLT_SUBCODE_LOAD_TIMEOUT,(uint16_t)TOUT_RESET_PR
2080:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_ResetFaultDetectProc( FLT_CODE_PRESS_SWITCH, FLT_SUBCODE_PRESS_SWITCH_LOAD_TOUT,(uint16_t)TOU
2081:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
2082:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2083:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	switch (FltLoadToutData.state)
2084:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
2085:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		case FLT_LOAD_TOUT_INIT:
2086:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2087:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			/* Il timeout viene gestito dalla macchina a stati, quindi la priorità di questo oggetto deve e
2088:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		    if (HWC_Flags.bit.vs_wash_presence ==0)
2089:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{
2090:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				FltWarning.load = FALSE;
2091:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
2092:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FltLoadToutData.state = FLT_LOAD_TOUT_EXE;
2093:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2094:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			break;
2095:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2096:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		case FLT_LOAD_TOUT_EXE:
2097:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2098:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if (uPDoorStatus == UP_DOOR_WAIT)
2099:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{	/* porta aperta->
2100:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				il uP Load risulta sospeso, non posso far avanzare la procedura  */
2101:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if (( FLT_checkForCurrentFault( FLT_CODE_LOAD_TIMEOUT, FLT_SUBCODE_LOAD_TIMEOUT)|| FLT_checkFor
2102:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						&&  (FaultMgmt_Data[0].step == PREFAULT_STEP))
2103:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{/* fermo il timer per la rilevazione del fault.*/
2104:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					(void)SWTC_Stop((SWTC_CountersType)MAIN_FAULT_MGMT_COUNTER_M);
2105:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
2106:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
2107:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			else
2108:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{	/* porta chiusa  */
2109:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2110:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				/*EA Va da se che se il pressostato non c'è questo controllo viene disabilitato
2111:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				ma questa parte è importante per poter segnalare il warning H2o all'interfaccia ( tra le altre
2112:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ((TESTBIT (GIValid, (GI_FIRST_CRITERION_BIT + GI_PRESS_SENS_CR_FULL_IND) ) != 0)||
2113:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				 (  HWC_Flags.bit.vs_wash_presence  ))
2114:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{
2115:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2116:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					/* criterio pressostato valido  o presenza di sensori virtuali*/
2117:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2118:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if (( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) != 0 )||
2119:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					((FltWarning.load == 0)&& HWC_Flags.bit.vs_wash_presence) )
2120:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{	/* pieno pressostato */
2121:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						/* solo se vedo 0 devo dare allarme mancanza acqua.*/
2122:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if (HWC_Flags.bit.vs_wash_presence)
2123:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{
2124:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							FltLoadToutData.state =FLT_LOAD_TOUT_INIT;
2125:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}else
2126:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{
2127:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							FltWarning.load = FALSE;
2128:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}
2129:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_ResetFaultDetectProc( FLT_CODE_LOAD_TIMEOUT, FLT_SUBCODE_LOAD_TIMEOUT,(uint16_t)TOUT_RESE
2130:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_ResetFaultDetectProc( FLT_CODE_PRESS_SWITCH, FLT_SUBCODE_PRESS_SWITCH_LOAD_TOUT,(uint16_t
2131:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2132:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
2133:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					else
2134:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{	/* vuoto pressostato  o presenza di sensori virtuali non validi ( nel  caso statico ??????)*
2135:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2136:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if ( (LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b == EV_ON) && (( !HWC_Flags.bit.vs_wash_presence 
2137:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						((FltWarning.load )&& HWC_Flags.bit.vs_wash_presence))	)
2138:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{	/* caricamento in corso */
2139:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						/* EA qui  deve comunciare ad andarci perchè sto facendo un caricamento dinamico a pieno sen
2140:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						e se scade il timeout vuol dire che non sono mai andata in pieno, quindi non c'è acqua!*/
2141:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							if (HWC_Flags.bit.vs_wash_presence  )
2142:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							{
2143:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								FLT_manageFault(FLT_CODE_LOAD_TIMEOUT,FLT_SUBCODE_LOAD_TIMEOUT);
2144:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							}else
2145:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							{
2146:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								if (uP_Load_Data.status == LOAD_EXE_TIME)
2147:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								{	/* in corso caricamento statico a portata (tempo) */
2148:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									FltWarning.load = TRUE;
2149:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									/* dichiarazione Fault F06 */
2150:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									FLT_manageFault(FLT_CODE_LOAD_TIMEOUT,FLT_SUBCODE_LOAD_TIMEOUT);
2151:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								}
2152:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								else if (uP_Load_Data.status == LOAD_EXE)
2153:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								{/* in corso caricamento a turbina */
2154:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									/* dichiarazione Fault F05 - sub 3 */
2155:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									FLT_manageFault(FLT_CODE_PRESS_SWITCH,FLT_SUBCODE_PRESS_SWITCH_LOAD_TOUT);
2156:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2157:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								}else
2158:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								{
2159:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									/* Do nothing */
2160:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								}
2161:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2162:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2163:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							}
2164:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							if (( FLT_checkForCurrentFault( FLT_CODE_LOAD_TIMEOUT, FLT_SUBCODE_LOAD_TIMEOUT)|| FLT_check
2165:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									&&  (FaultMgmt_Data[0].step == FAULT_STEP))
2166:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							{/* fermo il timer per la rilevazione del fault.*/
2167:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								FltLoadToutData.state = FLT_LOAD_TOUT_END;
2168:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								FltWarning.load = FALSE;
2169:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2170:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							}
2171:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}
2172:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						else
2173:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{	/* EV OFF */
2174:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2175:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							if (( FLT_checkForCurrentFault( FLT_CODE_LOAD_TIMEOUT, FLT_SUBCODE_LOAD_TIMEOUT)|| FLT_check
2176:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									&&  (FaultMgmt_Data[0].step == PREFAULT_STEP))
2177:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							{/* fermo il timer per la rilevazione del fault.*/
2178:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								(void)SWTC_Stop((SWTC_CountersType)MAIN_FAULT_MGMT_COUNTER_M);
2179:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							}
2180:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}
2181:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
2182:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
2183:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				else
2184:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{	/* criterio pressostato non valido */
2185:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if (( FLT_checkForCurrentFault( FLT_CODE_LOAD_TIMEOUT, FLT_SUBCODE_LOAD_TIMEOUT)|| FLT_checkFo
2186:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							&&  (FaultMgmt_Data[0].step == PREFAULT_STEP))
2187:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{/* fermo il timer per la rilevazione del fault.*/
2188:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						(void)SWTC_Stop((SWTC_CountersType)MAIN_FAULT_MGMT_COUNTER_M);
2189:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
2190:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
2191:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2192:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
2193:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2194:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			break;
2195:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2196:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		case FLT_LOAD_TOUT_DISABLE:
2197:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2198:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if (( FLT_checkForCurrentFault( FLT_CODE_LOAD_TIMEOUT, FLT_SUBCODE_LOAD_TIMEOUT)|| FLT_checkForC
2199:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					&&  (FaultMgmt_Data[0].step == PREFAULT_STEP))
2200:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{/* fermo il timer per la rilevazione del fault.*/
2201:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Stop((SWTC_CountersType)MAIN_FAULT_MGMT_COUNTER_M);
2202:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
2203:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2204:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			break;
2205:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2206:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		case FLT_LOAD_TOUT_END:
2207:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			break;
2208:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2209:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		default:
2210:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			break;
2211:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2212:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
2213:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2214:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	FltLoadToutData.uP_exe = FALSE;   /* reset controllo su uP per iterazione in corso
2215:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									    la var verrà messa a TRUE dal passaggio per uP Load */
2216:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
2217:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2218:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2219:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
2220:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Gestione fault su turbina bloccata (F07)
2221:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2222:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** QI - 23.10.09 : Fault F07 declassato a Warning
2223:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2224:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** QI - 01.12.09 : Controllo su P.P. solo per procedura di conferma Fault (post Prefault e flag turbin
2225:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Set Prefault e Reset Prefault indip dal pressostato
2226:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2227:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [out]
2228:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2229:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2230:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return 		none.
2231:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2232:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
2233:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date			17/07/08
2234:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author		Valeria Catani
2235:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2236:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
2237:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** void FLT_pulseCounterKOFaultMgmt(void)
2238:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
2239:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* Facendo la verifica (ulteriore timeout) corro il rischio di terminare il caricamento prima di
2240:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** aver dichiarato l'allarme (EV ON è condizione necessaria per F07) . Questo ovviamente per
2241:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** caricamenti in cui il tempo confrontabile è con timeout turbina bloccata. */
2242:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2243:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /*Gestione porta aperta nel uP Load che utilizza le stesse routine */
2244:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /* Inoltre con porta aperta EV OFF -> non posso dichiarare fault */
2245:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2246:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2247:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( ( LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b == EV_ON ) &&
2248:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		( TESTBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS) != 0 ) )
2249:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2250:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{	/* EV ON e Flag turbina KO settato da uP Load o LoadRestore -> Procedura di conferma Fault (post
2251:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2252:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( TESTBIT(FltFlagsKO,FLAG_PULSE_KO_LOAD)  == FALSE )
2253:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{	/* init procedura di conferma Fault */
2254:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2255:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			/* QI - 19.10.09 */
2256:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			PM_PulseCounter_Reset_Warning(PULSECOUNTER_RESET_BOTH_WARNING);  /* Reset di eventuali warning p
2257:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2258:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			(void)FLT_CheckPulseCounterStill(PULSE_COUNTER_STILL_INIT);
2259:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2260:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			/* flag che identifica una condizione di errore sul caricamento ->prefault FLT_CODE_PULSE_COUNTE
2261:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			 * NB: il prefault viene salvato nella pila dei last prefault, ma non entra nella macchina a sta
2262:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			SETBIT(FltFlagsKO,FLAG_PULSE_KO_LOAD);
2263:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
2264:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		else
2265:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{	/* exe procedura di conferma Fault */
2266:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2267:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if ( FLT_CheckPulseCounterStill(PULSE_COUNTER_STILL_EXE) == TRUE )
2268:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{	/*end procedura di conferma fault */
2269:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2270:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				/* QI - 23.10.09 */
2271:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				/* Viene dichiarato un warning anzichè un fault e come tale viene salvato immediatamente nei L
2272:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2273:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ( FltWarning.pulseCounterKO == FALSE )
2274:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{	/* first time : per non salvare il Last Fault più volte perchè rientra nella routine ad ogn
2275:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2276:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FLT_warningSave(FLT_CODE_PULSE_COUNTER, FLT_SUBCODE_PULSE_COUNTER,WRN_FAULT);
2277:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2278:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FltWarning.pulseCounterKO =  TRUE;
2279:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
2280:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2281:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				/* dichiarazione Fault F07 */
2282:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2283:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
2284:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
2285:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2286:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		/* QI - 01.12.09 Durante la procedura di conferma Fault F07 in caso di vuoto pressostato, il cont
2287:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		/* Questo garantisce che il Fault verrà dichiarato solo in caso di P.P., mentre il Set Prefault 
2288:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if( TESTBIT (GIValid, (GI_FIRST_CRITERION_BIT + GI_PRESS_SENS_CR_FULL_IND) ) != 0 )
2289:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{/* criterio pressostato valido */
2290:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2291:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if ( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )
2292:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{	/* vuoto pressostato */
2293:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2294:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				CLRBIT(FltFlagsKO,FLAG_PULSE_KO_LOAD);   /* restart procedura */
2295:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
2296:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
2297:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		else
2298:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{	/* criterio pressostato non valido - situazione transitoria? */
2299:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			(void)SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
2300:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
2301:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
2302:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	else
2303:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
2304:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		CLRBIT(FltFlagsKO,FLAG_PULSE_KO_LOAD);
2305:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
2306:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
2307:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2308:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2309:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2310:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
2311:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Gestione fault su EV sfondata (F02) con tentativi di sblocco della stessa
2312:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2313:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [out]
2314:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2315:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2316:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return 		none.
2317:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2318:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
2319:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date			01/09/08
2320:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author		Valeria Catani
2321:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2322:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
2323:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static void FLT_loadEVKOFaultMgmt(void)
2324:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
2325:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** uint8_t fltCheckEV;
2326:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2327:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ( (PM_PulseCounter_GetWarning() == NO_PULSE_COUNTER_WARNING) && (SftPulseWarn.status == SFT_PUL
2328:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{/* Nessun warning dalla turbina - lettura in range E NON STO ESEGUENDO CONTROLLO PER SICUREZZA */
2329:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2330:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if (TESTBIT(FltFlagsKO,FLAG_LOADEV_KO) == FALSE)
2331:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{/* init procedura */
2332:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2333:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			/* config + init timer + contatore per EV KO */
2334:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			/* Come per DEA 601:
2335:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			Non essendoci warning turbina la frequenza è sicuramente in range,
2336:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			essendo tale frequenza a priori non impostabile al di sotto di 1 Hz
2337:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			viene fissato un tempo di campionamento per il contatore degli
2338:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			impulsi compreso fra 0,9 sec e 1 sec.
2339:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			*/
2340:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2341:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			(void)Set_SmallCounter((SWTC_CountersType)SFT_EVCHECK_S_COUNTER, (SWTC_PrescalerType)COUNTERS2_T
2342:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if(SPV_isAutotestRunning())
2343:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{
2344:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				LoadEVCheck.cnt = TOUT_LOAD_EV_FAULT(Tab_LoadFault_Special.Data);  /* il tempo da setting è il
2345:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}else
2346:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{
2347:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				LoadEVCheck.cnt = TOUT_LOAD_EV_FAULT(Tab_LoadFault.Data);
2348:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
2349:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			LoadEVCheck.status = LOAD_EV_PILOT_OK;
2350:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2351:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FltLoadEVKOStatus = FLT_LOAD_EV_KO_INIT;
2352:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2353:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			SETBIT(FltFlagsKO,FLAG_LOADEV_KO);
2354:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			CLRBIT(Flags_2, FLAG2_SAFETY_TURB_TEST_BIT);
2355:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
2356:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		else
2357:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{/* esecuzione procedura */
2358:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2359:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if ( LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b == EV_OFF )
2360:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{/* EV lavaggio non pilotata da uP */
2361:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2362:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ( FltLoadEVKOStatus == FLT_LOAD_EV_KO_INIT )
2363:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{
2364:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					fltCheckEV = FLT_checkLoadEV(CHECK_EV_PULSE_CTRL);
2365:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					CLRBIT(Flags_2, FLAG2_SAFETY_TURB_TEST_BIT);
2366:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2367:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( fltCheckEV == LOAD_EV_PAUSE_END )
2368:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{ /* end pausa controllo acqua in ingresso con EV ON ->
2369:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						chiamata macchina a stati per gestione tentativi di sblocco */
2370:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2371:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						LoadEVCheck.status = LOAD_EV_PILOT_INIT;  /* init tentativi di pilotaggio
2372:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						gestiti da macchina a stati */
2373:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						SETBIT(Flags_2, FLAG2_SAFETY_TURB_TEST_BIT);
2374:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2375:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_manageFault(FLT_CODE_LOAD_EV_KO,FLT_SUBCODE_LOAD_EV_KO);
2376:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2377:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FltLoadEVKOStatus = FLT_LOAD_EV_KO_EXE;
2378:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
2379:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					else if ( fltCheckEV == LOAD_EV_OK )
2380:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{/* non ho impulsi in ingresso */
2381:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2382:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						CLRBIT(FltFlagsKO,FLAG_LOADEV_KO);
2383:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						/* reset Prefault se presente */
2384:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_ResetFaultDetectProc( FLT_CODE_LOAD_EV_KO, FLT_SUBCODE_LOAD_EV_KO,(uint16_t)TOUT_RESET_PR
2385:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
2386:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					else
2387:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
2388:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						/* Do nothing */
2389:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
2390:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
2391:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2392:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ( FltLoadEVKOStatus == FLT_LOAD_EV_KO_EXE )
2393:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{/* esecuzione tentativi pilotaggio */
2394:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FLT_pilotLoadEV_Mgmt(CHECK_EV_PULSE_CTRL); /* chiamata qui, solo se ho EV OFF */
2395:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2396:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					SETBIT(Flags_2, FLAG2_SAFETY_TURB_TEST_BIT);
2397:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2398:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( LoadEVCheck.status == LOAD_EV_PILOT_END )
2399:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{/* esauriti tentativi di sblocco EV */
2400:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2401:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						/* dichiarazione Fault F02 */
2402:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2403:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_manageFault(FLT_CODE_LOAD_EV_KO,FLT_SUBCODE_LOAD_EV_KO);
2404:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if ( FLT_checkForCurrentFault( FLT_CODE_LOAD_EV_KO, FLT_SUBCODE_LOAD_EV_KO)&& (FaultMgmt_Data
2405:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{
2406:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							FltLoadEVKOStatus = FLT_LOAD_EV_KO_END;
2407:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}
2408:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2409:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
2410:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					else if ( LoadEVCheck.status == LOAD_EV_PILOT_OK )
2411:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{/* tentativo di pilotaggio OK - reset fault */
2412:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						CLRBIT(FltFlagsKO,FLAG_LOADEV_KO);
2413:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						CLRBIT(Flags_2, FLAG2_SAFETY_TURB_TEST_BIT);
2414:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						/* reset Prefault se presente */
2415:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_ResetFaultDetectProc( FLT_CODE_LOAD_EV_KO, FLT_SUBCODE_LOAD_EV_KO,(uint16_t)TOUT_RESET_PR
2416:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
2417:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					else
2418:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
2419:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						/* Do nothing */
2420:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
2421:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
2422:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
2423:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			else
2424:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{
2425:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				/* EV lavaggio pilotata ->restart */
2426:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Stop((SWTC_CountersType)SFT_EVCHECK_S_COUNTER);
2427:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2428:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				CLRBIT(FltFlagsKO,FLAG_LOADEV_KO);
2429:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				CLRBIT(Flags_2, FLAG2_SAFETY_TURB_TEST_BIT);
2430:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
2431:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
2432:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2433:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
2434:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	else
2435:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{/* warning su turbina - entra la procedura di sicurezza - SONO MUTUAMENTE ESCLUSIVE */
2436:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2437:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		CLRBIT(FltFlagsKO,FLAG_LOADEV_KO);
2438:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
2439:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2440:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
2441:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**/
2442:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2443:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2444:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
2445:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Gestione macchina a stati per tentativi pilotaggio EV
2446:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [out]
2447:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2448:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2449:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return 		none.
2450:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2451:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
2452:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date			01/09/08
2453:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author		Valeria Catani
2454:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2455:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
2456:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** void FLT_pilotLoadEV_Mgmt(uint8_t mode)
2457:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
2458:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	uint8_t checkEV;
2459:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	uint8_t EV_timer, EV_load;
2460:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if(SPV_isAutotestRunning())
2461:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
2462:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		EV_timer = TOUT_LOAD_EV_FAULT(Tab_LoadFault_Special.Data);  /* il tempo da setting è il tempo de
2463:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		EV_load=TOUT_LOAD_EV_PILOT(Tab_LoadFault_Special.Data);
2464:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}else
2465:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
2466:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		EV_timer = TOUT_LOAD_EV_FAULT(Tab_LoadFault.Data);
2467:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		EV_load=TOUT_LOAD_EV_PILOT(Tab_LoadFault.Data);
2468:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
2469:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2470:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2471:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	switch ( LoadEVCheck.status)
2472:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
2473:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			case LOAD_EV_PILOT_INIT:
2474:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			/*init + config counter per tentativo pilotaggio EV*/
2475:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)Set_SmallCounter((SWTC_CountersType)SFT_EVCHECK_S_COUNTER, (SWTC_PrescalerType)COUNTERS2_
2476:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ( mode == CHECK_EV_VS_FAULT_CTRL )
2477:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{/* vado avanti nello step solo se c'è acqua , altrimenti no. Negli altri casi avanzo ogni vol
2478:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if (SftPulseWarn.vs_presence_h2o)
2479:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
2480:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						LoadEVCheck.status = LOAD_EV_PILOT_1;
2481:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
2482:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2483:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}else
2484:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{
2485:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					LoadEVCheck.status = LOAD_EV_PILOT_1;
2486:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
2487:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2488:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			break;
2489:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			/* stati di tentativo di pilotaggio EV per sblocco */
2490:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			case LOAD_EV_PILOT_1 :
2491:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			case LOAD_EV_PILOT_2 :
2492:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2493:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Run((SWTC_CountersType)SFT_EVCHECK_S_COUNTER);
2494:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2495:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ( SWTC_IsExpired((SWTC_CountersType)SFT_EVCHECK_S_COUNTER))
2496:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{/* end counting EV pilot */
2497:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					/* init + config timer per pausa e check EV */
2498:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					(void)Set_SmallCounter((SWTC_CountersType)SFT_EVCHECK_S_COUNTER, (SWTC_PrescalerType)COUNTERS2
2499:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2500:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( mode == CHECK_EV_WARN_CTRL )
2501:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
2502:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						PM_PulseCounter_Reset_Warning(PULSECOUNTER_RESET_BOTH_WARNING); /* Reset di tutti i warning p
2503:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2504:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						LoadEVCheck.cnt = TOUT_PULSE_WARN_FOR_EV_PILOT;
2505:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
2506:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					else
2507:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
2508:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if ( mode != CHECK_EV_VS_FAULT_CTRL)
2509:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{
2510:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							LoadEVCheck.cnt = EV_timer;		/* il tempo da setting è il tempo delle pause per la rilevazio
2511:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}else
2512:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{
2513:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							LoadEVCheck.cnt = 0;
2514:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}
2515:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2516:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
2517:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					LoadEVCheck.status++;
2518:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
2519:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2520:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				LoadEVFltReq_New.b= EV_ON;
2521:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2522:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			break;
2523:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			case LOAD_EV_PILOT_PAUSE_1:
2524:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			case LOAD_EV_PILOT_PAUSE_2:
2525:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2526:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					checkEV = FLT_checkLoadEV(mode);
2527:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2528:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( checkEV == LOAD_EV_PAUSE_END )
2529:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{/* end controllo con EV OFF - */
2530:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2531:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if (LoadEVCheck.status == LOAD_EV_PILOT_PAUSE_1)
2532:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						{
2533:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							/*init + config counter per tentativo pilotaggio EV*/
2534:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							(void)Set_SmallCounter((SWTC_CountersType)SFT_EVCHECK_S_COUNTER, (SWTC_PrescalerType)COUNTER
2535:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						}
2536:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2537:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						LoadEVCheck.status++;
2538:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
2539:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					else if ( checkEV == LOAD_EV_OK )
2540:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
2541:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						LoadEVCheck.status = LOAD_EV_PILOT_OK;
2542:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
2543:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					else
2544:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
2545:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					/* Do nothing */
2546:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
2547:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2548:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2549:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			break;
2550:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2551:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			case LOAD_EV_PILOT_END:
2552:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Stop((SWTC_CountersType)SFT_EVCHECK_S_COUNTER);
2553:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			break;
2554:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2555:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			case LOAD_EV_PILOT_OK:
2556:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			default:
2557:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Stop((SWTC_CountersType)SFT_EVCHECK_S_COUNTER);
2558:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ( mode == CHECK_EV_VS_FAULT_CTRL)
2559:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{
2560:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					ReadVS_Data.ctrl_active = FALSE;
2561:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
2562:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			break;
2563:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2564:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
2565:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2566:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
2567:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
2568:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** Gestione controllo su acqua in ingresso con EV OFF e turbina funzionante
2569:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [out]
2570:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2571:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2572:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return 		none.
2573:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2574:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
2575:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date			01/09/08
2576:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author		Valeria Catani
2577:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2578:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	*/
2579:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** uint8_t FLT_checkLoadEV(uint8_t mode)
2580:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 235                             		.loc 1 2580 0
 236                             	.LVL26:
 237 0000 6E 7C                   		pushm	r7-r12
 238                             	.LCFI2:
 239 0002 CF 17                   		mov.B	r1, r7
2581:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** static uint16_t pulseLoaded_Old=0;
2582:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2583:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	/* EV lavaggio non pilotata */
2584:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2585:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	(void)SWTC_Run((SWTC_CountersType)SFT_EVCHECK_S_COUNTER);
 240                             		.loc 1 2585 0
 241 0004 75 41 24                		mov	#36, r1
 242                             	.LVL27:
 243 0007 05 00 00 00             		bsr	_SWTC_Run
 244                             	.LVL28:
2586:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2587:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ( SWTC_IsExpired((SWTC_CountersType)SFT_EVCHECK_S_COUNTER) )
 245                             		.loc 1 2587 0
 246 000b 75 41 24                		mov	#36, r1
 247 000e 05 00 00 00             		bsr	_SWTC_IsExpired
 248                             	.LVL29:
 249 0012 61 01                   		cmp	#0, r1
 250 0014 3A 8C 00                		beq	.L44
2588:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{/* end conteggio base  */
2589:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2590:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( mode == CHECK_EV_PULSE_CTRL )
 251                             		.loc 1 2590 0
 252 0017 5B 77                   		movu.B	r7, r7
 253                             	.LVL30:
 254 0019 61 07                   		cmp	#0, r7
 255 001b 21 49                   		bne	.L36
2591:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{/* controllo con turbina no warning */
2592:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2593:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if ( LoadEVCheck.cnt > 0 )
 256                             		.loc 1 2593 0
 257 001d FB A2 00 00 00 00       		mov.L	#_LoadEVCheck, r10
 258 0023 59 AB 01                		movu.B	1[r10], r11
 259 0026 61 0B                   		cmp	#0, r11
 260 0028 20 31                   		beq	.L37
2594:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{/* conteggio timeout non esaurito -> campionamento impulsi */
2595:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2596:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if (pulseLoaded_Old != PulseLoaded)
 261                             		.loc 1 2596 0
 262 002a FB B2 00 00 00 00       		mov.L	#_pulseLoaded_Old.11889, r11
 263 0030 FB C2 00 00 00 00       		mov.L	#_PulseLoaded, r12
 264 0036 5C B4                   		movu.W	[r11], r4
 265 0038 5C CE                   		movu.W	[r12], r14
2597:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{/* impulsi in ingresso != 0 */
2598:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2599:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					/* restart tout base */
2600:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					(void)SWTC_SetSValue ((SWTC_CountersType)SFT_EVCHECK_S_COUNTER,(SWTC_SCounterValue)TOUT_BASE_L
 266                             		.loc 1 2600 0
 267 003a 75 41 24                		mov	#36, r1
2596:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if (pulseLoaded_Old != PulseLoaded)
 268                             		.loc 1 2596 0
 269 003d 47 E4                   		cmp	r14, r4
 270 003f 20 14                   		beq	.L38
 271                             		.loc 1 2600 0
 272 0041 66 B2                   		mov	#11, r2
 273 0043 05 00 00 00             		bsr	_SWTC_SetSValue
 274                             	.LVL31:
2601:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2602:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					LoadEVCheck.cnt--;  /* decremento contatore tout */
 275                             		.loc 1 2602 0
 276 0047 CD A7 01                		mov.B	1[r10], r7
 277                             	.LVL32:
 278 004a 60 17                   		sub	#1, r7
 279 004c C7 A7 01                		mov.B	r7, 1[r10]
2603:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2604:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					pulseLoaded_Old = PulseLoaded;  /* aggiornamento impulsi */
 280                             		.loc 1 2604 0
 281 004f D0 CB                   		mov.W	[r12], [r11]
 282 0051 2E 4F                   		bra	.L44
 283                             	.L38:
2605:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
2606:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				else
2607:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{/* no impulsi in ingresso -> no EV sfondata -> restart procedura */
2608:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2609:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					(void)SWTC_Stop((SWTC_CountersType)SFT_EVCHECK_S_COUNTER);
 284                             		.loc 1 2609 0
 285 0053 05 00 00 00             		bsr	_SWTC_Stop
 286                             	.LVL33:
 287 0057 2E 2F                   		bra	.L46
 288                             	.L37:
2610:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2611:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					return LOAD_EV_OK;
2612:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
2613:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
2614:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			else
2615:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{/* conteggio EV KO timeout esaurito */
2616:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2617:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Stop((SWTC_CountersType)SFT_EVCHECK_S_COUNTER);
 289                             		.loc 1 2617 0
 290 0059 75 41 24                		mov	#36, r1
 291 005c 05 00 00 00             		bsr	_SWTC_Stop
 292                             	.LVL34:
2618:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2619:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				return LOAD_EV_PAUSE_END;
 293                             		.loc 1 2619 0
 294 0060 66 21                   		mov	#2, r1
 295 0062 2E 40                   		bra	.L35
 296                             	.L36:
2620:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
2621:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
2622:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		else if ( mode == CHECK_EV_WARN_CTRL )
 297                             		.loc 1 2622 0
 298 0064 61 17                   		cmp	#1, r7
 299 0066 21 35                   		bne	.L39
 300                             	.LBB15:
 301                             	.LBB16:
2623:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{/* controllo in base a warning turbina */
2624:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2625:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if ( LoadEVCheck.cnt > 0 )
 302                             		.loc 1 2625 0
 303 0068 FB A2 00 00 00 00       		mov.L	#_LoadEVCheck, r10
 304 006e 59 AB 01                		movu.B	1[r10], r11
2626:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{/* conteggio in corso */
2627:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				/* restart tout base */
2628:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_SetSValue ((SWTC_CountersType)SFT_EVCHECK_S_COUNTER,(SWTC_SCounterValue)TOUT_BASE_LO
 305                             		.loc 1 2628 0
 306 0071 75 41 24                		mov	#36, r1
2625:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if ( LoadEVCheck.cnt > 0 )
 307                             		.loc 1 2625 0
 308 0074 61 0B                   		cmp	#0, r11
 309 0076 20 14                   		beq	.L40
 310                             		.loc 1 2628 0
 311 0078 66 B2                   		mov	#11, r2
 312 007a 05 00 00 00             		bsr	_SWTC_SetSValue
 313                             	.LVL35:
2629:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2630:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				LoadEVCheck.cnt--;  /* decremento contatore tout */
 314                             		.loc 1 2630 0
 315 007e CD AB 01                		mov.B	1[r10], r11
 316 0081 60 1B                   		sub	#1, r11
 317 0083 C7 AB 01                		mov.B	r11, 1[r10]
 318                             		.balign 2,3,1
 319                             	.L46:
2631:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
2632:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			else
2633:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{/* end counting : controllo warning solo alla fine */
2634:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2635:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Stop((SWTC_CountersType)SFT_EVCHECK_S_COUNTER);
2636:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2637:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ( PM_PulseCounter_GetWarning() == b1 )
2638:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{/* low freq warning */
2639:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2640:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					return LOAD_EV_PAUSE_END;
2641:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
2642:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				else
2643:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{
2644:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					return LOAD_EV_OK;
2645:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
2646:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
2647:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
2648:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		else
2649:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
2650:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if ( mode == CHECK_EV_VS_FAULT_CTRL)
2651:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{
2652:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				return LOAD_EV_PAUSE_END;
2653:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}else
2654:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{
2655:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				/* Do nothing */
2656:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
2657:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
2658:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
2659:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2660:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	return LOAD_EV_PAUSE_ON;
 320                             		.loc 1 2660 0
 321 0086 CF 71                   		mov.B	r7, r1
 322 0088 2E 1A                   		bra	.L35
 323                             	.L40:
2635:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Stop((SWTC_CountersType)SFT_EVCHECK_S_COUNTER);
 324                             		.loc 1 2635 0
 325 008a 05 00 00 00             		bsr	_SWTC_Stop
 326                             	.LVL36:
2637:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ( PM_PulseCounter_GetWarning() == b1 )
 327                             		.loc 1 2637 0
 328 008e 05 00 00 00             		bsr	_PM_PulseCounter_GetWarning
 329                             	.LVL37:
 330 0092 5B 11                   		movu.B	r1, r1
 331 0094 61 21                   		cmp	#2, r1
 332 0096 20 0C                   		beq	.L35
2644:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					return LOAD_EV_OK;
 333                             		.loc 1 2644 0
 334 0098 CF B1                   		mov.B	r11, r1
 335 009a 08                      		bra	.L35
 336                             	.L39:
 337                             	.LBE16:
 338                             	.LBE15:
2650:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if ( mode == CHECK_EV_VS_FAULT_CTRL)
 339                             		.loc 1 2650 0
 340 009b 61 27                   		cmp	#2, r7
 341 009d 1B                      		bne	.L44
 342 009e 2E E8                   		bra	.L46
 343                             	.L44:
 344                             		.loc 1 2660 0
 345 00a0 66 11                   		mov	#1, r1
 346                             		.balign 2,3,1
 347                             	.L35:
2661:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 348                             		.loc 1 2661 0
 349 00a2 5B 11                   		movu.B	r1, r1
 350 00a4 3F 7C 06                		rtsd	#24, r7-r12
 351                             	.LFE35:
 353 00a7 03                      		.section	.text.FLT_Update_warning_proc,"ax",@progbits
 355                             	_FLT_Update_warning_proc:
 356                             	.LFB26:
1793:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 357                             		.loc 1 1793 0
 358 0000 6E 7C                   		pushm	r7-r12
 359                             	.LCFI3:
 360 0002 CF 1C                   		mov.B	r1, r12
 361 0004 CF 2A                   		mov.B	r2, r10
 362 0006 CF 3B                   		mov.B	r3, r11
1794:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if(SPV_isAutotestRunning())
 363                             		.loc 1 1794 0
 364 0008 05 00 00 00             		bsr	_SPV_isAutotestRunning
 365 000c 61 01                   		cmp	#0, r1
 366 000e 20 3E                   		beq	.L47
 367                             	.LBB19:
 368                             	.LBB20:
1796:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( TESTBIT(FltFlagsKO,flag_pending))
 369                             		.loc 1 1796 0
 370 0010 5B CC                   		movu.B	r12, r12
 371 0012 FB 72 00 00 00 00       		mov.L	#_FltFlagsKO, r7
 372 0018 5C 7E                   		movu.W	[r7], r14
 373 001a FC 6B EC                		btst	r12, r14
 374 001d 20 2F                   		beq	.L47
1799:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if (( FLT_checkForCurrentFault( code, subcode)) && (FaultMgmt_Data[0].step == PREFAULT_STEP))
 375                             		.loc 1 1799 0
 376 001f CF A1                   		mov.B	r10, r1
 377 0021 CF B2                   		mov.B	r11, r2
 378 0023 05 00 00 00             		bsr	_FLT_checkForCurrentFault
 379 0027 61 01                   		cmp	#0, r1
 380 0029 20 19                   		beq	.L49
 381 002b FB E2 00 00 00 00       		mov.L	#_FaultMgmt_Data, r14
 382 0031 CD EE 02                		mov.B	2[r14], r14
 383 0034 75 2E 7F                		and #0x7f, r14
 384 0037 61 3E                   		cmp	#3, r14
 385 0039 19                      		bne	.L49
1801:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				CLRBIT(FltFlagsKO,flag_pending);
 386                             		.loc 1 1801 0
 387 003a DC 7E                   		mov.W	[r7], r14
 388 003c FC 67 EC                		bclr	r12, r14
 389 003f D3 7E                   		mov.W	r14, [r7]
 390 0041 03                      		.balign 2,3,1
 391                             	.L49:
1803:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_manageFault(code,subcode);
 392                             		.loc 1 1803 0
 393 0042 CF A1                   		mov.B	r10, r1
 394 0044 CF B2                   		mov.B	r11, r2
 395                             	.LBE20:
 396                             	.LBE19:
1806:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 397                             		.loc 1 1806 0
 398 0046 6F 7C                   		popm	r7-r12
 399                             	.LBB22:
 400                             	.LBB21:
1803:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_manageFault(code,subcode);
 401                             		.loc 1 1803 0
 402 0048 04 00 00 00             		bra	_FLT_manageFault
 403                             	.L47:
 404                             	.LBE21:
 405                             	.LBE22:
1806:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 406                             		.loc 1 1806 0
 407 004c 3F 7C 06                		rtsd	#24, r7-r12
 408                             	.LFE26:
 410 004f 03                      		.section	.text.FLT_checkForSettingFault,"ax",@progbits
 411                             		.global	_FLT_checkForSettingFault
 413                             	_FLT_checkForSettingFault:
 414                             	.LFB1:
 204:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 415                             		.loc 1 204 0
 205:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( ( CurrentFault[0].code == FLT_CODE_SETTING_FILE )
 416                             		.loc 1 205 0
 417 0000 FB E2 00 00 00 00       		mov.L	#_CurrentFault, r14
 418 0006 58 E4                   		movu.B	[r14], r4
 419 0008 61 94                   		cmp	#9, r4
 420 000a 1A                      		bne	.L62
 206:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		&& ( CurrentFault[0].subCode == FLT_SUBCODE_MAIN_BOARD_SETTING_FILE ) )
 421                             		.loc 1 206 0
 422 000b 59 E1 01                		movu.B	1[r14], r1
 208:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		return TRUE;
 423                             		.loc 1 208 0
 424 000e 61 11                   		cmp	#1, r1
 425 0010 FC DB 10                		sceq.L	r1
 426 0013 02                      		rts
 427                             	.L62:
 211:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****   return FALSE;
 428                             		.loc 1 211 0
 429 0014 66 01                   		mov.L	#0, r1
 213:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 430                             		.loc 1 213 0
 431 0016 02                      		rts
 432                             	.LFE1:
 434                             		.section	.text.FLT_safetyBitmapReset,"ax",@progbits
 435                             		.global	_FLT_safetyBitmapReset
 437                             	_FLT_safetyBitmapReset:
 438                             	.LFB2:
 229:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 439                             		.loc 1 229 0
 440 0000 02                      		rts
 441                             	.LFE2:
 443                             		.section	.text.FLT_CheckPulseCounterStill,"ax",@progbits
 444                             		.global	_FLT_CheckPulseCounterStill
 446                             	_FLT_CheckPulseCounterStill:
 447                             	.LFB4:
 283:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 448                             		.loc 1 283 0
 449                             	.LVL38:
 283:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 450                             		.loc 1 283 0
 451 0000 7E A7                   		push.l	r7
 452                             	.LCFI4:
 453 0002 CF 17                   		mov.B	r1, r7
 286:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (mode == PULSE_COUNTER_STILL_INIT)
 454                             		.loc 1 286 0
 455 0004 5B 1E                   		movu.B	r1, r14
 456 0006 61 0E                   		cmp	#0, r14
 457 0008 21 2A                   		bne	.L65
 289:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if( SPV_isAutotestOrTestRunning() )
 458                             		.loc 1 289 0
 459 000a 05 00 00 00             		bsr	_SPV_isAutotestOrTestRunning
 460                             	.LVL39:
 461 000e 61 01                   		cmp	#0, r1
 462 0010 10                      		beq	.L66
 291:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			SWTC_SetMValue((SWTC_CountersType)PULSE_STILL_M_COUNTER, (SWTC_MCounterValue)TOUT_PULSE_COUNTER_
 463                             		.loc 1 291 0
 464 0011 FB E2 00 00 00 00       		mov.L	#_Tab_LoadFault_Special, r14
 465 0017 0F                      		bra	.L78
 466                             	.L66:
 294:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			SWTC_SetMValue((SWTC_CountersType)PULSE_STILL_M_COUNTER, (SWTC_MCounterValue)TOUT_PULSE_COUNTER_
 467                             		.loc 1 294 0
 468 0018 FB E2 00 00 00 00       		mov.L	#_Tab_LoadFault, r14
 469                             		.balign 2,3,1
 470                             	.L78:
 471 001e EC EE                   		mov.L	[r14], r14
 472 0020 59 E2 04                		movu.B	4[r14], r2
 473 0023 75 41 23                		mov	#35, r1
 474 0026 05 00 00 00             		bsr	_SWTC_SetMValue
 475                             	.LVL40:
 298:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
 476                             		.loc 1 298 0
 477 002a 75 41 23                		mov	#35, r1
 478 002d 05 00 00 00             		bsr	_SWTC_Stop
 479                             	.LVL41:
 480 0031 03                      		.balign 2,3,5
 481                             	.L65:
 304:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( pulseLoaded_Old != PulseLoaded )
 482                             		.loc 1 304 0
 483 0032 FB E2 00 00 00 00       		mov.L	#_PulseLoaded, r14
 484 0038 DC E4                   		mov.W	[r14], r4
 485 003a FB E2 00 00 00 00       		mov.L	#_pulseLoaded_Old.11696, r14
 486 0040 5C E2                   		movu.W	[r14], r2
 487 0042 5F 43                   		movu.W	r4, r3
 488 0044 47 32                   		cmp	r3, r2
 489 0046 15                      		beq	.L68
 307:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		pulseLoaded_Old = PulseLoaded;  /* aggiornamento impulsi in ingresso */
 490                             		.loc 1 307 0
 491 0047 D3 E4                   		mov.W	r4, [r14]
 492 0049 2E 17                   		bra	.L79
 493                             	.L68:
 311:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	else if ( TESTBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS) && (PM_PulseCounter_GetWarning() == b1) 
 494                             		.loc 1 311 0
 495 004b FB E2 00 00 00 00       		mov.L	#_Flags_1, r14
 496 0051 CC EE                   		mov.B [r14], r14
 497 0053 64 4E                   		and #4, r14
 498 0055 20 11                   		beq	.L70
 311:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	else if ( TESTBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS) && (PM_PulseCounter_GetWarning() == b1) 
 499                             		.loc 1 311 0 is_stmt 0 discriminator 1
 500 0057 05 00 00 00             		bsr	_PM_PulseCounter_GetWarning
 501                             	.LVL42:
 502 005b 5B 11                   		movu.B	r1, r1
 503 005d 61 21                   		cmp	#2, r1
 504 005f 1F                      		bne	.L70
 505                             		.balign 2,3,3
 506                             	.L79:
 314:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_PulseCounterStill_Reset(); /* QI - 02.12.09 reset Prefault, Flag e restart procedura */
 507                             		.loc 1 314 0 is_stmt 1
 508 0060 05 00 00 00             		bsr	_FLT_PulseCounterStill_Reset
 509                             	.LVL43:
 510 0064 2E 24                   		bra	.L72
 511                             	.L70:
 319:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( mode == PULSE_COUNTER_STILL_EXE )
 512                             		.loc 1 319 0
 513 0066 5B 7E                   		movu.B	r7, r14
 514 0068 61 1E                   		cmp	#1, r14
 515 006a 21 1E                   		bne	.L72
 516                             	.LBB25:
 517                             	.LBB26:
 322:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			(void)SWTC_Run((SWTC_CountersType)PULSE_STILL_M_COUNTER);
 518                             		.loc 1 322 0
 519 006c 75 41 23                		mov	#35, r1
 520 006f 05 00 00 00             		bsr	_SWTC_Run
 521                             	.LVL44:
 324:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if ( SWTC_IsExpired((SWTC_CountersType)PULSE_STILL_M_COUNTER) )
 522                             		.loc 1 324 0
 523 0073 75 41 23                		mov	#35, r1
 524 0076 05 00 00 00             		bsr	_SWTC_IsExpired
 525                             	.LVL45:
 526 007a 61 01                   		cmp	#0, r1
 527 007c 20 0E                   		beq	.L69
 327:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
 528                             		.loc 1 327 0
 529 007e 75 41 23                		mov	#35, r1
 530 0081 05 00 00 00             		bsr	_SWTC_Stop
 531                             	.LVL46:
 329:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				return TRUE;
 532                             		.loc 1 329 0
 533 0085 CF 71                   		mov.B	r7, r1
 534 0087 0B                      		bra	.L69
 535                             	.L72:
 536                             	.LBE26:
 537                             	.LBE25:
 334:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	return FALSE;
 538                             		.loc 1 334 0
 539 0088 66 01                   		mov	#0, r1
 540                             		.balign 2,3,1
 541                             	.L69:
 335:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 542                             		.loc 1 335 0
 543 008a 5B 11                   		movu.B	r1, r1
 544 008c 3F 77 01                		rtsd	#4, r7-r7
 545                             	.LFE4:
 547 008f 03                      		.section	.text.FLT_PulseCounterCheckDelay_Mgmt,"ax",@progbits
 548                             		.global	_FLT_PulseCounterCheckDelay_Mgmt
 550                             	_FLT_PulseCounterCheckDelay_Mgmt:
 551                             	.LFB3:
 248:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 552                             		.loc 1 248 0
 250:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (SWTC_GetRemainingTime((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER) > 0 )
 553                             		.loc 1 250 0
 554 0000 75 41 22                		mov	#34, r1
 555 0003 05 00 00 00             		bsr	_SWTC_GetRemainingTime
 556                             	.LVL47:
 557 0007 61 01                   		cmp	#0, r1
 254:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		(void)SWTC_Run((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER);
 558                             		.loc 1 254 0
 559 0009 75 41 22                		mov	#34, r1
 250:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (SWTC_GetRemainingTime((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER) > 0 )
 560                             		.loc 1 250 0
 561 000c 2B 1B                   		ble	.L81
 254:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		(void)SWTC_Run((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER);
 562                             		.loc 1 254 0
 563 000e 05 00 00 00             		bsr	_SWTC_Run
 564                             	.LVL48:
 256:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		PM_PulseCounter_Reset_Warning(PULSECOUNTER_RESET_BOTH_WARNING); /* Reset di eventuali warning pre
 565                             		.loc 1 256 0
 566 0012 66 21                   		mov	#2, r1
 567 0014 05 00 00 00             		bsr	_PM_PulseCounter_Reset_Warning
 568                             	.LVL49:
 258:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		(void)FLT_CheckPulseCounterStill(PULSE_COUNTER_STILL_INIT); /* init funzione controllo turbina bl
 569                             		.loc 1 258 0
 570 0018 66 01                   		mov	#0, r1
 571 001a 05 00 00 00             		bsr	_FLT_CheckPulseCounterStill
 572                             	.LVL50:
 260:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		CLRBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS);
 573                             		.loc 1 260 0
 574 001e FB E2 00 00 00 00       		mov.L	#_Flags_1, r14
 575 0024 F0 EA                   		bclr #2, [r14].B
 576 0026 02                      		rts
 577                             	.L81:
 265:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		(void)SWTC_Stop((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER);
 578                             		.loc 1 265 0
 579 0027 04 00 00 00             		bra	_SWTC_Stop
 580                             	.LVL51:
 581                             	.LFE3:
 583                             		.section	.text.FLT_getTimeout,"ax",@progbits
 584                             		.global	_FLT_getTimeout
 586                             	_FLT_getTimeout:
 587                             	.LFB6:
 377:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 588                             		.loc 1 377 0
 589                             	.LVL52:
 590 0000 7E A7                   		push.l	r7
 591                             	.LCFI5:
 592 0002 EF 37                   		mov.L	r3, r7
 593                             	.LVL53:
 380:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	timeoutdata->config = 0;
 594                             		.loc 1 380 0
 595 0004 3C 33 00                		mov.B	#0, 3[r3]
 382:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		switch (code)
 596                             		.loc 1 382 0
 597 0007 60 11                   		sub	#1, r1
 598                             	.LVL54:
 599 0009 5B 11                   		movu.B	r1, r1
 600 000b 61 E1                   		cmp	#14, r1
 601 000d 25 05 38 7F 02          		bgtu	.L147
 602 0012 FB E2 00 00 00 00       		mov.L	#.L97, r14
 603 0018 FE 61 EE                		mov.L	[r1,r14], r14
 604                             		
 605 001b 7F 0E                   	1:jmp	r14
 606                             		.section	.rodata.FLT_getTimeout,"a",@progbits
 607                             		.balign 4
 608                             		.balign 4
 609                             	.L97:
 610 0000 00 00 01 B6             		.long .L86
 611 0004 00 00 01 FC             		.long .L87
 612 0008 00 00 01 5B             		.long .L88
 613 000c 00 00 01 66             		.long .L89
 614 0010 00 00 02 1D             		.long .L90
 615 0014 00 00 02 30             		.long .L91
 616 0018 00 00 02 8E             		.long .L147
 617 001c 00 00 02 24             		.long .L160
 618 0020 00 00 02 8E             		.long .L147
 619 0024 00 00 01 23             		.long .L93
 620 0028 00 00 01 98             		.long .L94
 621 002c 00 00 02 8E             		.long .L147
 622 0030 00 00 00 1D             		.long .L95
 623 0034 00 00 02 8E             		.long .L147
 624 0038 00 00 01 EC             		.long .L96
 625                             		.section	.text.FLT_getTimeout
 626                             	.L95:
 386:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				switch (subcode)
 627                             		.loc 1 386 0
 628 001d 5B 2E                   		movu.B	r2, r14
 629 001f 75 5E 18                		cmp	#24, r14
 630 0022 3A 02 02                		beq	.L160
 631 0025 24 13                   		bgtu	.L104
 632 0027 61 0E                   		cmp	#0, r14
 633 0029 3A EF 00                		beq	.L98
 634 002c 61 4E                   		cmp	#4, r14
 635 002e 25 29                   		bleu	.L99
 636 0030 75 5E 10                		cmp	#16, r14
 637 0033 3B E5 00                		bne	.L98
 638 0036 2E 6F                   		bra	.L100
 639                             	.L104:
 640 0038 75 5E 40                		cmp	#64, r14
 641 003b 3A E9 01                		beq	.L160
 642 003e 24 0B                   		bgtu	.L105
 643 0040 75 5E 30                		cmp	#48, r14
 644 0043 3B D5 00                		bne	.L98
 645 0046 38 91 00                		bra	.L102
 646                             	.L105:
 647 0049 75 5E 50                		cmp	#0x50, r14
 648 004c 20 3A                   		beq	.L103
 649 004e 75 5E 88                		cmp	#0x88, r14
 650 0051 3B C7 00                		bne	.L98
 651 0054 38 D0 01                		bra	.L160
 652                             	.L99:
 393:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if( SPV_isAutotestOrTestRunning() )
 653                             		.loc 1 393 0
 654 0057 05 00 00 00             		bsr	_SPV_isAutotestOrTestRunning
 655                             	.LVL55:
 656 005b CD 7E 03                		mov.B	3[r7], r14
 657 005e 61 01                   		cmp	#0, r1
 658 0060 20 14                   		beq	.L106
 396:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->prefaultTime = TOUT_RES_CIRCUIT_PREFAULT(Tab_MainBoardFault_Special.Data);
 659                             		.loc 1 396 0
 660 0062 FB 42 00 00 00 00       		mov.L	#_Tab_MainBoardFault_Special, r4
 661 0068 EC 44                   		mov.L	[r4], r4
 662 006a B0 CB                   		movu.B	3[r4], r3
 663 006c D3 73                   		mov.W	r3, [r7]
 397:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->faultTime = TOUT_RES_CIRCUIT_FAULT(Tab_MainBoardFault_Special.Data);
 664                             		.loc 1 397 0
 665 006e C4 47 02                		mov.B	[r4], 2[r7]
 666 0071 38 CD 00                		bra	.L153
 667                             	.L106:
 402:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->prefaultTime = TOUT_RES_CIRCUIT_PREFAULT(Tab_MainBoardFault.Data);
 668                             		.loc 1 402 0
 669 0074 FB 42 00 00 00 00       		mov.L	#_Tab_MainBoardFault, r4
 670 007a EC 44                   		mov.L	[r4], r4
 671 007c B0 CB                   		movu.B	3[r4], r3
 672 007e D3 73                   		mov.W	r3, [r7]
 403:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->faultTime = TOUT_RES_CIRCUIT_FAULT(Tab_MainBoardFault.Data);
 673                             		.loc 1 403 0
 674 0080 C4 47 02                		mov.B	[r4], 2[r7]
 675 0083 38 91 00                		bra	.L157
 676                             	.LVL56:
 677                             	.L103:
 411:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if( SPV_isAutotestOrTestRunning() )
 678                             		.loc 1 411 0
 679 0086 05 00 00 00             		bsr	_SPV_isAutotestOrTestRunning
 680                             	.LVL57:
 681 008a CD 7E 03                		mov.B	3[r7], r14
 682 008d 61 01                   		cmp	#0, r1
 683 008f 17                      		beq	.L107
 413:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->faultTime = TOUT_ZC_CIRCUIT_AUTOTEST_FAULT;
 684                             		.loc 1 413 0
 685 0090 3C 72 3C                		mov.B	#60, 2[r7]
 414:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->config |= COUNTERS2_TBASE_1SEC;
 686                             		.loc 1 414 0
 687 0093 65 3E                   		or	#3, r14
 688 0095 0F                      		bra	.L149
 689                             	.L107:
 417:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->faultTime = TOUT_ZC_CIRCUIT_FAULT;
 690                             		.loc 1 417 0
 691 0096 3C 72 1E                		mov.B	#30, 2[r7]
 418:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->config |= COUNTERS2_TBASE_10SEC;
 692                             		.loc 1 418 0
 693 0099 65 5E                   		or	#5, r14
 694 009b 03                      		.balign 2,3,5
 695                             	.L149:
 696 009c C7 7E 03                		mov.B	r14, 3[r7]
 420:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->prefaultTime = TOUT_ZC_CIRCUIT_PREFAULT;
 697                             		.loc 1 420 0
 698 009f 3D 70 32                		mov.W	#50, [r7]
 699 00a2 38 A2 00                		bra	.L154
 700                             	.LVL58:
 701                             	.L100:
 426:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if( SPV_isAutotestOrTestRunning() )
 702                             		.loc 1 426 0
 703 00a5 05 00 00 00             		bsr	_SPV_isAutotestOrTestRunning
 704                             	.LVL59:
 705 00a9 61 01                   		cmp	#0, r1
 706 00ab 20 17                   		beq	.L109
 428:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->faultTime = TOUT_DOOR_CIRCUIT_FAULT_AUTOTEST;
 707                             		.loc 1 428 0
 708 00ad FB E2 00 00 00 00       		mov.L	#_Tab_MainBoardFault_Special, r14
 709 00b3 EC EE                   		mov.L	[r14], r14
 710 00b5 CD E4 02                		mov.B	2[r14], r4
 711 00b8 75 24 7F                		and #0x7f, r4
 712 00bb 80 F4                   		mov.B	r4, 2[r7]
 429:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->prefaultTime = TOUT_DOOR_CIRCUIT_PREFAULT_AUTOTEST;
 713                             		.loc 1 429 0
 714 00bd CD EE 05                		mov.B	5[r14], r14
 715 00c0 2E 32                   		bra	.L155
 716                             	.L109:
 433:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->faultTime = TOUT_DOOR_CIRCUIT_FAULT;
 717                             		.loc 1 433 0
 718 00c2 FB E2 00 00 00 00       		mov.L	#_Tab_MainBoardFault, r14
 719 00c8 EC EE                   		mov.L	[r14], r14
 720 00ca CD E4 02                		mov.B	2[r14], r4
 721 00cd 75 24 7F                		and #0x7f, r4
 722 00d0 80 F4                   		mov.B	r4, 2[r7]
 434:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->prefaultTime = TOUT_DOOR_CIRCUIT_PREFAULT;
 723                             		.loc 1 434 0
 724 00d2 CD EE 05                		mov.B	5[r14], r14
 725 00d5 2E 37                   		bra	.L158
 726                             	.LVL60:
 727                             	.L102:
 441:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if( SPV_isAutotestOrTestRunning() )
 728                             		.loc 1 441 0
 729 00d7 05 00 00 00             		bsr	_SPV_isAutotestOrTestRunning
 730                             	.LVL61:
 731 00db 61 01                   		cmp	#0, r1
 732 00dd 20 1B                   		beq	.L110
 443:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->faultTime = TOUT_OVERFLOW_CIRCUIT_FAULT_AUTOTEST;
 733                             		.loc 1 443 0
 734 00df FB E2 00 00 00 00       		mov.L	#_Tab_MainBoardFault_Special, r14
 735 00e5 EC EE                   		mov.L	[r14], r14
 736 00e7 CD E4 06                		mov.B	6[r14], r4
 737 00ea 75 24 7F                		and #0x7f, r4
 738 00ed 80 F4                   		mov.B	r4, 2[r7]
 444:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->prefaultTime = TOUT_OVERFLOW_CIRCUIT_PREFAULT_AUTOTEST;
 739                             		.loc 1 444 0
 740 00ef CD EE 07                		mov.B	7[r14], r14
 741                             		.balign 2,3,2
 742                             	.L155:
 743 00f2 75 2E 7F                		and #0x7f, r14
 744 00f5 38 91 01                		bra	.L156
 745                             	.L110:
 448:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->faultTime = TOUT_OVERFLOW_CIRCUIT_FAULT;
 746                             		.loc 1 448 0
 747 00f8 FB E2 00 00 00 00       		mov.L	#_Tab_MainBoardFault, r14
 748 00fe EC EE                   		mov.L	[r14], r14
 749 0100 CD E4 06                		mov.B	6[r14], r4
 750 0103 75 24 7F                		and #0x7f, r4
 751 0106 80 F4                   		mov.B	r4, 2[r7]
 449:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->prefaultTime = TOUT_OVERFLOW_CIRCUIT_PREFAULT;
 752                             		.loc 1 449 0
 753 0108 CD EE 07                		mov.B	7[r14], r14
 754 010b 03                      		.balign 2,3,2
 755                             	.L158:
 756 010c 75 2E 7F                		and #0x7f, r14
 757 010f D3 7E                   		mov.W	r14, [r7]
 450:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->config |= COUNTERS2_TBASE_10SEC;
 758                             		.loc 1 450 0
 759 0111 CD 7E 03                		mov.B	3[r7], r14
 760                             		.balign 2,3,1
 761                             	.L157:
 762 0114 65 5E                   		or	#5, r14
 763 0116 2E 2A                   		bra	.L152
 764                             	.LVL62:
 765                             	.L98:
 468:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if (subcode & 0x80)
 766                             		.loc 1 468 0
 767 0118 CF 22                   		mov.B	r2, r2
 768                             	.LVL63:
 769 011a 61 02                   		cmp	#0, r2
 770 011c 29 05 38 70 01          		bge	.L147
 771 0121 2E 77                   		bra	.L94
 772                             	.LVL64:
 773                             	.L93:
 483:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if( SPV_isAutotestOrTestRunning() )
 774                             		.loc 1 483 0
 775 0123 05 00 00 00             		bsr	_SPV_isAutotestOrTestRunning
 776                             	.LVL65:
 777 0127 CD 7E 03                		mov.B	3[r7], r14
 778 012a 61 01                   		cmp	#0, r1
 779 012c 20 1D                   		beq	.L111
 486:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->prefaultTime = TOUT_RES_OPEN_PREFAULT(Tab_HeatFault_Special.Data);
 780                             		.loc 1 486 0
 781 012e FB 42 00 00 00 00       		mov.L	#_Tab_HeatFault_Special, r4
 782 0134 EC 44                   		mov.L	[r4], r4
 783 0136 B1 4B                   		movu.B	5[r4], r3
 784 0138 D3 73                   		mov.W	r3, [r7]
 487:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime = TOUT_RES_OPEN_FAULT(Tab_HeatFault_Special.Data);
 785                             		.loc 1 487 0
 786 013a C5 47 02 02             		mov.B	2[r4], 2[r7]
 787                             		.balign 2,3,1
 788                             	.L153:
 488:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->config |= COUNTERS2_TBASE_1SEC;
 789                             		.loc 1 488 0
 790 013e 65 3E                   		or	#3, r14
 791                             		.balign 2,3,5
 792                             	.L152:
 793 0140 C7 7E 03                		mov.B	r14, 3[r7]
 794 0143 03                      		.balign 2,3,1
 795                             	.L154:
 379:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** uint8_t retval = TRUE;
 796                             		.loc 1 379 0
 797 0144 66 11                   		mov	#1, r1
 798 0146 38 4A 01                		bra	.L85
 799                             	.L111:
 492:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->prefaultTime = TOUT_RES_OPEN_PREFAULT(Tab_HeatFault.Data);
 800                             		.loc 1 492 0
 801 0149 FB 42 00 00 00 00       		mov.L	#_Tab_HeatFault, r4
 802 014f EC 44                   		mov.L	[r4], r4
 803 0151 B1 4B                   		movu.B	5[r4], r3
 804 0153 D3 73                   		mov.W	r3, [r7]
 493:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime = TOUT_RES_OPEN_FAULT(Tab_HeatFault.Data);
 805                             		.loc 1 493 0
 806 0155 C5 47 02 02             		mov.B	2[r4], 2[r7]
 807 0159 2E BB                   		bra	.L157
 808                             	.LVL66:
 809                             	.L88:
 500:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if(subcode & 0x80 )
 810                             		.loc 1 500 0
 811 015b CF 22                   		mov.B	r2, r2
 812 015d 61 02                   		cmp	#0, r2
 813 015f 29 05 38 B7 00          		bge	.L120
 814 0164 2E 34                   		bra	.L94
 815                             	.L89:
 515:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if( SPV_isAutotestOrTestRunning() )
 816                             		.loc 1 515 0
 817 0166 05 00 00 00             		bsr	_SPV_isAutotestOrTestRunning
 818                             	.LVL67:
 819 016a 61 01                   		cmp	#0, r1
 820 016c 20 17                   		beq	.L114
 517:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime=TOUT_PROBE_FAULT(Tab_HeatFault_Special.Data);
 821                             		.loc 1 517 0
 822 016e FB E2 00 00 00 00       		mov.L	#_Tab_HeatFault_Special, r14
 823 0174 EC EE                   		mov.L	[r14], r14
 824 0176 CC E4                   		mov.B	[r14], r4
 825 0178 75 24 7F                		and #0x7f, r4
 826 017b 80 F4                   		mov.B	r4, 2[r7]
 518:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->prefaultTime=TOUT_PROBE_PREFAULT(Tab_HeatFault_Special.Data);
 827                             		.loc 1 518 0
 828 017d CD EE 03                		mov.B	3[r14], r14
 829 0180 38 72 FF                		bra	.L155
 830                             	.L114:
 523:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime=TOUT_PROBE_FAULT(Tab_HeatFault.Data);
 831                             		.loc 1 523 0
 832 0183 FB E2 00 00 00 00       		mov.L	#_Tab_HeatFault, r14
 833 0189 EC EE                   		mov.L	[r14], r14
 834 018b CC E4                   		mov.B	[r14], r4
 835 018d 75 24 7F                		and #0x7f, r4
 836 0190 80 F4                   		mov.B	r4, 2[r7]
 524:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->prefaultTime=TOUT_PROBE_PREFAULT(Tab_HeatFault.Data);
 837                             		.loc 1 524 0
 838 0192 CD EE 03                		mov.B	3[r14], r14
 839 0195 38 77 FF                		bra	.L158
 840                             	.LVL68:
 841                             	.L94:
 541:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					timeoutdata->faultTime = FLT_Get_Motor_Timeout(LONIBBLE(FltBLDCUnblock.pumpandspeed ),2);
 842                             		.loc 1 541 0
 843 0198 FB E2 00 00 00 00       		mov.L	#_FltBLDCUnblock, r14
 844 019e CD E1 01                		mov.B	1[r14], r1
 845 01a1 64 F1                   		and #15, r1
 846 01a3 66 22                   		mov	#2, r2
 847 01a5 05 00 00 00             		bsr	_FLT_Get_Motor_Timeout
 848                             	.LVL69:
 849 01a9 03                      		.balign 2,3,5
 850                             	.L161:
 851 01aa 80 F1                   		mov.B	r1, 2[r7]
 852                             		.balign 2,3,4
 853                             	.L159:
 542:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					timeoutdata->prefaultTime = 0;
 854                             		.loc 1 542 0
 855 01ac 3D 70 00                		mov.W	#0, [r7]
 543:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					timeoutdata->config |= THEREATTEMPTFLT_MASK;
 856                             		.loc 1 543 0
 857 01af CD 7E 03                		mov.B	3[r7], r14
 858 01b2 78 6E                   		bset #6, r14
 859 01b4 2E 8C                   		bra	.L152
 860                             	.LVL70:
 861                             	.L86:
 546:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					switch(subcode)
 862                             		.loc 1 546 0
 863 01b6 5B 22                   		movu.B	r2, r2
 864 01b8 61 12                   		cmp	#1, r2
 865 01ba 3B D4 00                		bne	.L147
 549:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							if( SPV_isAutotestOrTestRunning() )
 866                             		.loc 1 549 0
 867 01bd 05 00 00 00             		bsr	_SPV_isAutotestOrTestRunning
 868                             	.LVL71:
 869 01c1 61 01                   		cmp	#0, r1
 870 01c3 10                      		beq	.L116
 551:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								timeoutdata->prefaultTime = TOUT_OVERFLOW_PREFAULT_AUTOTEST;
 871                             		.loc 1 551 0
 872 01c4 FB E2 00 00 00 00       		mov.L	#_Tab_LoadFault_Special, r14
 873 01ca 08                      		bra	.L150
 874                             	.L116:
 556:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								timeoutdata->prefaultTime = TOUT_OVERFLOW_PREFAULT;
 875                             		.loc 1 556 0
 876 01cb FB E2 00 00 00 00       		mov.L	#_Tab_LoadFault, r14
 877 01d1 03                      		.balign 2,3,1
 878                             	.L150:
 879 01d2 EC EE                   		mov.L	[r14], r14
 880 01d4 CD E4 05                		mov.B	5[r14], r4
 881 01d7 75 24 7F                		and #0x7f, r4
 882 01da D3 74                   		mov.W	r4, [r7]
 557:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								timeoutdata->faultTime = TOUT_OVERFLOW_FAULT;
 883                             		.loc 1 557 0
 884 01dc CC EE                   		mov.B	[r14], r14
 885 01de 75 2E 7F                		and #0x7f, r14
 886 01e1 C7 7E 02                		mov.B	r14, 2[r7]
 559:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->config |= COUNTERS2_TBASE_100MS;
 887                             		.loc 1 559 0
 888 01e4 CD 7E 03                		mov.B	3[r7], r14
 889 01e7 78 0E                   		bset #0, r14
 890 01e9 38 57 FF                		bra	.L152
 891                             	.LVL72:
 892                             	.L96:
 567:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( FLT_GetVS_timer(FLTN_INCONSISTENCY)>1)
 893                             		.loc 1 567 0
 894 01ec 66 11                   		mov	#1, r1
 895 01ee 05 00 00 00             		bsr	_FLT_GetVS_timer
 896                             	.LVL73:
 897 01f2 5B 11                   		movu.B	r1, r1
 898 01f4 61 11                   		cmp	#1, r1
 899 01f6 25 22                   		bleu	.L120
 569:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime = FLT_GetVS_timer(FLTN_INCONSISTENCY)-1;
 900                             		.loc 1 569 0
 901 01f8 66 11                   		mov	#1, r1
 902 01fa 2E 16                   		bra	.L162
 903                             	.LVL74:
 904                             	.L87:
 579:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( subcode == FLT_SUBCODE_EV_VIA_VS)
 905                             		.loc 1 579 0
 906 01fc 5B 22                   		movu.B	r2, r2
 907 01fe 61 32                   		cmp	#3, r2
 908 0200 21 18                   		bne	.L120
 581:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if ( FLT_GetVS_timer(FLTN_LOST_WATER)>1)
 909                             		.loc 1 581 0
 910 0202 66 01                   		mov	#0, r1
 911 0204 05 00 00 00             		bsr	_FLT_GetVS_timer
 912                             	.LVL75:
 913 0208 5B 11                   		movu.B	r1, r1
 914 020a 61 11                   		cmp	#1, r1
 915 020c 25 0C                   		bleu	.L120
 583:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							timeoutdata->faultTime = FLT_GetVS_timer(FLTN_LOST_WATER)-1;
 916                             		.loc 1 583 0
 917 020e 66 01                   		mov	#0, r1
 918                             		.balign 2,3,3
 919                             	.L162:
 920 0210 05 00 00 00             		bsr	_FLT_GetVS_timer
 921                             	.LVL76:
 922 0214 60 11                   		sub	#1, r1
 923 0216 2E 94                   		bra	.L161
 924                             	.L120:
 590:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime = 0;
 925                             		.loc 1 590 0
 926 0218 3C 72 00                		mov.B	#0, 2[r7]
 927 021b 2E 91                   		bra	.L159
 928                             	.LVL77:
 929                             	.L90:
 598:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( subcode !=FLT_SUBCODE_PRESS_SWITCH_LOAD_TOUT)
 930                             		.loc 1 598 0
 931 021d 5B 22                   		movu.B	r2, r2
 932 021f 61 32                   		cmp	#3, r2
 933 0221 20 0F                   		beq	.L91
 934                             	.LVL78:
 935 0223 03                      		.balign 2,3,4
 936                             	.L160:
 600:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->prefaultTime=0;
 937                             		.loc 1 600 0
 938 0224 3D 70 00                		mov.W	#0, [r7]
 601:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime=0;
 939                             		.loc 1 601 0
 940 0227 3C 72 00                		mov.B	#0, 2[r7]
 602:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->config |= THEREATTEMPTFLT_MASK;
 941                             		.loc 1 602 0
 942 022a 3C 73 40                		mov.B	#64, 3[r7]
 943 022d 38 17 FF                		bra	.L154
 944                             	.L91:
 609:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if( SPV_isAutotestOrTestRunning() )
 945                             		.loc 1 609 0
 946 0230 05 00 00 00             		bsr	_SPV_isAutotestOrTestRunning
 947                             	.LVL79:
 948 0234 FB E2 00 00 00 00       		mov.L	#_HWC_Flags, r14
 611:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime =TOUT_LOAD_FAULT(Tab_LoadFault_Special.Data);
 949                             		.loc 1 611 0
 950 023a DC E4                   		mov.W	[r14], r4
 951 023c 75 24 10                		and #16, r4
 952 023f 5F 44                   		movu.W	r4, r4
 609:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if( SPV_isAutotestOrTestRunning() )
 953                             		.loc 1 609 0
 954 0241 61 01                   		cmp	#0, r1
 955 0243 20 20                   		beq	.L123
 956 0245 FB E2 00 00 00 00       		mov.L	#_Tab_LoadFault_Special, r14
 611:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime =TOUT_LOAD_FAULT(Tab_LoadFault_Special.Data);
 957                             		.loc 1 611 0
 958 024b EC EE                   		mov.L	[r14], r14
 959 024d 61 04                   		cmp	#0, r4
 960 024f 15                      		beq	.L124
 611:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime =TOUT_LOAD_FAULT(Tab_LoadFault_Special.Data);
 961                             		.loc 1 611 0 is_stmt 0 discriminator 1
 962 0250 DD EE 05                		mov.W	10[r14], r14
 963 0253 0D                      		bra	.L125
 964                             	.L124:
 611:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime =TOUT_LOAD_FAULT(Tab_LoadFault_Special.Data);
 965                             		.loc 1 611 0 discriminator 2
 966 0254 CD EE 02                		mov.B	2[r14], r14
 967 0257 03                      		.balign 2,3,5
 968                             	.L125:
 611:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime =TOUT_LOAD_FAULT(Tab_LoadFault_Special.Data);
 969                             		.loc 1 611 0 discriminator 3
 970 0258 C7 7E 02                		mov.B	r14, 2[r7]
 612:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->prefaultTime = TOUT_WARNING_LOAD(Tab_LoadFault_Special.Data);
 971                             		.loc 1 612 0 is_stmt 1 discriminator 3
 972 025b FB E2 00 00 00 00       		mov.L	#_Tab_LoadFault_Special, r14
 973 0261 2E 1F                   		bra	.L151
 974                             	.L123:
 975 0263 FB E2 00 00 00 00       		mov.L	#_Tab_LoadFault, r14
 615:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime = TOUT_LOAD_FAULT(Tab_LoadFault.Data);
 976                             		.loc 1 615 0
 977 0269 EC EE                   		mov.L	[r14], r14
 978 026b 61 04                   		cmp	#0, r4
 979 026d 15                      		beq	.L127
 615:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime = TOUT_LOAD_FAULT(Tab_LoadFault.Data);
 980                             		.loc 1 615 0 is_stmt 0 discriminator 1
 981 026e DD EE 05                		mov.W	10[r14], r14
 982 0271 0D                      		bra	.L128
 983                             	.L127:
 615:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime = TOUT_LOAD_FAULT(Tab_LoadFault.Data);
 984                             		.loc 1 615 0 discriminator 2
 985 0272 CD EE 02                		mov.B	2[r14], r14
 986 0275 03                      		.balign 2,3,5
 987                             	.L128:
 615:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->faultTime = TOUT_LOAD_FAULT(Tab_LoadFault.Data);
 988                             		.loc 1 615 0 discriminator 3
 989 0276 C7 7E 02                		mov.B	r14, 2[r7]
 616:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						timeoutdata->prefaultTime = TOUT_WARNING_LOAD(Tab_LoadFault.Data);
 990                             		.loc 1 616 0 is_stmt 1 discriminator 3
 991 0279 FB E2 00 00 00 00       		mov.L	#_Tab_LoadFault, r14
 992 027f 03                      		.balign 2,3,1
 993                             	.L151:
 994 0280 EC EE                   		mov.L	[r14], r14
 995 0282 59 EE 03                		movu.B	3[r14], r14
 996 0285 03                      		.balign 2,3,1
 997                             	.L156:
 998 0286 D3 7E                   		mov.W	r14, [r7]
 618:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					timeoutdata->config |= COUNTERS2_TBASE_1SEC;
 999                             		.loc 1 618 0 discriminator 3
 1000 0288 CD 7E 03                		mov.B	3[r7], r14
 1001 028b 38 B3 FE                		bra	.L153
 1002                             	.LVL80:
 1003                             	.L147:
 562:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							retval=FALSE;
 1004                             		.loc 1 562 0
 1005 028e 66 01                   		mov	#0, r1
 1006                             	.LVL81:
 1007                             		.balign 2,3,1
 1008                             	.L85:
 627:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 1009                             		.loc 1 627 0
 1010 0290 64 11                   		and #1, r1
 1011                             	.LVL82:
 1012 0292 3F 77 01                		rtsd	#4, r7-r7
 1013                             	.LFE6:
 1015 0295 03                      		.section	.text.FLT_BLDCUnblock_Mgmt,"ax",@progbits
 1016                             		.global	_FLT_BLDCUnblock_Mgmt
 1018                             	_FLT_BLDCUnblock_Mgmt:
 1019                             	.LFB17:
1224:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 1020                             		.loc 1 1224 0
 1021                             	.LVL83:
 1022 0000 7E A7                   		push.l	r7
 1023                             	.LCFI6:
 1024                             	.LVL84:
 1025                             	.LBB29:
 1026                             	.LBB30:
1284:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (FaultMgmt_Data[0].faultCodes.code == faultCode)
 1027                             		.loc 1 1284 0
 1028 0002 FB 72 00 00 00 00       		mov.L	#_FaultMgmt_Data, r7
 1029 0008 58 7E                   		movu.B	[r7], r14
 1030 000a 5B 11                   		movu.B	r1, r1
 1031 000c 47 1E                   		cmp	r1, r14
 1032 000e 21 1D                   		bne	.L164
1286:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if (PREFAULT_STEP == FaultMgmt_Data[0].step)
 1033                             		.loc 1 1286 0
 1034 0010 88 F2                   		mov.B	2[r7], r2
 1035 0012 75 22 7F                		and #0x7f, r2
 1036 0015 61 32                   		cmp	#3, r2
 1037 0017 21 2F                   		bne	.L170
1288:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			ret=FLT_Get_Motor_Timeout(LONIBBLE(FltBLDCUnblock.pumpandspeed ),3);
 1038                             		.loc 1 1288 0
 1039 0019 FB 72 00 00 00 00       		mov.L	#_FltBLDCUnblock, r7
 1040 001f 88 79                   		mov.B	1[r7], r1
 1041                             	.LVL85:
 1042 0021 64 F1                   		and #15, r1
 1043 0023 05 00 00 00             		bsr	_FLT_Get_Motor_Timeout
 1044                             	.LVL86:
 1045 0027 5B 11                   		movu.B	r1, r1
 1046                             	.LVL87:
 1047 0029 2E 1F                   		bra	.L165
 1048                             	.LVL88:
 1049                             	.L164:
1297:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FltBLDCComm_Tout=0;
 1050                             		.loc 1 1297 0
 1051 002b FB 72 00 00 00 00       		mov.L	#_FltBLDCComm_Tout, r7
 1052 0031 3C 70 00                		mov.B	#0, [r7]
1298:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FltBLDCMotor_Tout = 0;
 1053                             		.loc 1 1298 0
 1054 0034 FB 72 00 00 00 00       		mov.L	#_FltBLDCMotor_Tout, r7
 1055 003a 3C 70 00                		mov.B	#0, [r7]
1299:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		CLRBIT (FltBLDCUnblock.flags,UPDATE_FAULT);
 1056                             		.loc 1 1299 0
 1057 003d FB 72 00 00 00 00       		mov.L	#_FltBLDCUnblock, r7
 1058 0043 F0 7C                   		bclr #4, [r7].B
 1059 0045 03                      		.balign 2,3,1
 1060                             	.L170:
1292:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			ret= 0;
 1061                             		.loc 1 1292 0
 1062 0046 66 01                   		mov	#0, r1
 1063                             	.LVL89:
 1064                             		.balign 2,3,1
 1065                             	.L165:
1301:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	return ret;
 1066                             		.loc 1 1301 0
 1067 0048 CF 17                   		mov.B	r1, r7
 1068                             	.LBE30:
 1069                             	.LBE29:
1231:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (FLT_checkForMotorFault())
 1070                             		.loc 1 1231 0
 1071 004a 05 00 00 00             		bsr	_FLT_checkForMotorFault
 1072                             	.LVL90:
 1073 004e 5B 7E                   		movu.B	r7, r14
 1074 0050 61 01                   		cmp	#0, r1
 1075 0052 10                      		beq	.L166
1234:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if (FltBLDCMotor_Tout >=attemptsTime)
 1076                             		.loc 1 1234 0
 1077 0053 FB 42 00 00 00 00       		mov.L	#_FltBLDCMotor_Tout, r4
 1078 0059 0F                      		bra	.L175
 1079                             	.L166:
1253:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if (FltBLDCComm_Tout >=attemptsTime)
 1080                             		.loc 1 1253 0
 1081 005a FB 42 00 00 00 00       		mov.L	#_FltBLDCComm_Tout, r4
 1082                             		.balign 2,3,5
 1083                             	.L175:
 1084 0060 CC 43                   		mov.B	[r4], r3
 1085 0062 5B 32                   		movu.B	r3, r2
 1086 0064 FB 72 00 00 00 00       		mov.L	#_FltBLDCUnblock, r7
 1087 006a 47 E2                   		cmp	r14, r2
 1088 006c 23 09                   		bltu	.L169
1257:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			CLRBIT(FltBLDCUnblock.flags,PUMPOFF);
 1089                             		.loc 1 1257 0
 1090 006e CC 7E                   		mov.B	[r7], r14
 1091 0070 75 2E EE                		and #-18, r14
 1092 0073 2E 1B                   		bra	.L172
 1093                             	.L169:
1264:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FltBLDCComm_Tout++;
 1094                             		.loc 1 1264 0
 1095 0075 62 13                   		add	#1, r3
 1096 0077 C3 43                   		mov.B	r3, [r4]
1265:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FltBLDCUnblock.wait_cnt=FLT_Get_Motor_Timeout(LONIBBLE(FltBLDCUnblock.pumpandspeed ),4) * 10;
 1097                             		.loc 1 1265 0
 1098 0079 88 79                   		mov.B	1[r7], r1
 1099 007b 64 F1                   		and #15, r1
 1100 007d 66 42                   		mov	#4, r2
 1101 007f 05 00 00 00             		bsr	_FLT_Get_Motor_Timeout
 1102                             	.LVL91:
 1103 0083 5B 11                   		movu.B	r1, r1
 1104 0085 63 A1                   		mul	#10, r1
 1105 0087 90 79                   		mov.W	r1, 2[r7]
1267:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			SETBIT(FltBLDCUnblock.flags,PUMPOFF);
 1106                             		.loc 1 1267 0
 1107 0089 CC 7E                   		mov.B	[r7], r14
 1108 008b 75 3E 11                		or	#17, r14
 1109                             		.balign 2,3,1
 1110                             	.L172:
 1111 008e C3 7E                   		mov.B	r14, [r7]
1272:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 1112                             		.loc 1 1272 0
 1113 0090 3F 77 01                		rtsd	#4, r7-r7
 1114                             	.LFE17:
 1116 0093 03                      		.section	.text.FLT_bldcFaultReset,"ax",@progbits
 1117                             		.global	_FLT_bldcFaultReset
 1119                             	_FLT_bldcFaultReset:
 1120                             	.LFB20:
1343:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 1121                             		.loc 1 1343 0
1344:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ((FaultMgmt_Data[0].faultCodes.code==FLT_CODE_BLDC)||
 1122                             		.loc 1 1344 0
 1123 0000 FB 42 00 00 00 00       		mov.L	#_FaultMgmt_Data, r4
 1124 0006 CC 41                   		mov.B	[r4], r1
 1125 0008 5B 1E                   		movu.B	r1, r14
 1126 000a 61 BE                   		cmp	#11, r14
 1127 000c 20 14                   		beq	.L177
1344:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ((FaultMgmt_Data[0].faultCodes.code==FLT_CODE_BLDC)||
 1128                             		.loc 1 1344 0 is_stmt 0 discriminator 1
 1129 000e 61 DE                   		cmp	#13, r14
 1130 0010 1A                      		bne	.L178
 1131 0011 03                      		.balign 2,3,5
 1132                             	.L180:
1345:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		((FaultMgmt_Data[0].faultCodes.code==FLT_CODE_MAIN_BOARD)&& (FaultMgmt_Data[0].faultCodes.subCode
 1133                             		.loc 1 1345 0 is_stmt 1
 1134 0012 CD 4E 01                		mov.B	1[r4], r14
 1135 0015 61 0E                   		cmp	#0, r14
 1136 0017 28 19                   		bge	.L179
 1137 0019 0F                      		bra	.L177
 1138                             	.L178:
1346:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		||/* per il fault della pompa scarico */
 1139                             		.loc 1 1346 0
 1140 001a 61 3E                   		cmp	#3, r14
 1141 001c 21 14                   		bne	.L179
 1142 001e 2E F4                   		bra	.L180
 1143                             	.L177:
1350:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc(FaultMgmt_Data[0].faultCodes.code, FaultMgmt_Data[0].faultCodes.subCode
 1144                             		.loc 1 1350 0
 1145 0020 FB E2 00 00 00 00       		mov.L	#_FaultMgmt_Data, r14
 1146 0026 CD E2 01                		mov.B	1[r14], r2
 1147 0029 66 03                   		mov	#0, r3
 1148 002b 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
 1149                             	.LVL92:
 1150 002f 03                      		.balign 2,3,5
 1151                             	.L179:
1353:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		CLRBIT (FltBLDCUnblock.flags,UPDATE_FAULT);
 1152                             		.loc 1 1353 0
 1153 0030 FB E2 00 00 00 00       		mov.L	#_FltBLDCUnblock, r14
 1154 0036 F0 EC                   		bclr #4, [r14].B
1354:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FltBLDCComm_Tout=0;
 1155                             		.loc 1 1354 0
 1156 0038 FB E2 00 00 00 00       		mov.L	#_FltBLDCComm_Tout, r14
 1157 003e F8 E4 00                		mov.B	#0, [r14]
1355:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FltBLDCMotor_Tout = 0;
 1158                             		.loc 1 1355 0
 1159 0041 FB E2 00 00 00 00       		mov.L	#_FltBLDCMotor_Tout, r14
 1160 0047 F8 E4 00                		mov.B	#0, [r14]
 1161 004a 02                      		rts
 1162                             	.LFE20:
 1164 004b 03                      		.section	.text.FLT_bldcFaultMgmt,"ax",@progbits
 1165                             		.global	_FLT_bldcFaultMgmt
 1167                             	_FLT_bldcFaultMgmt:
 1168                             	.LFB15:
 904:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 1169                             		.loc 1 904 0
 1170 0000 6E 7D                   		pushm	r7-r13
 1171                             	.LCFI7:
 911:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		( ( LoadsReq_Old[RegDev_Pos[LD_KILL_DSP_REG_IND]].b == LOAD_OFF ) && ( TESTBIT(FltBLDCUnblock.fla
 1172                             		.loc 1 911 0
 1173 0002 FB 72 00 00 00 00       		mov.L	#_RegDev_Pos, r7
 1174 0008 B1 F7                   		movu.B	6[r7], r7
 910:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if(
 1175                             		.loc 1 910 0
 1176 000a FB A2 00 00 00 00       		mov.L	#_LoadsReq_Old, r10
 1177 0010 FE C7 A7                		movu.B	[r7,r10], r7
 1178 0013 61 07                   		cmp	#0, r7
 1179 0015 21 11                   		bne	.L188
 911:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		( ( LoadsReq_Old[RegDev_Pos[LD_KILL_DSP_REG_IND]].b == LOAD_OFF ) && ( TESTBIT(FltBLDCUnblock.fla
 1180                             		.loc 1 911 0
 1181 0017 FB 72 00 00 00 00       		mov.L	#_FltBLDCUnblock, r7
 1182 001d CC 77                   		mov.B	[r7], r7
 1183 001f FD 74 C7 01             		tst	#1, r7
 1184 0023 20 11                   		beq	.L189
 1185 0025 03                      		.balign 2,3,5
 1186                             	.L188:
 912:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		||
 1187                             		.loc 1 912 0
 1188 0026 FB 72 00 00 00 00       		mov.L	#_Interpreter_Data, r7
 1189 002c 89 77                   		mov.B 4[r7], r7
 1190 002e 75 27 10                		and #16, r7
 1191 0031 20 1F                   		beq	.L190
 1192 0033 03                      		.balign 2,3,3
 1193                             	.L189:
 923:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_bldcFaultReset();
 1194                             		.loc 1 923 0
 1195 0034 05 00 00 00             		bsr	_FLT_bldcFaultReset
 924:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_ResetFaultDetectProc( FLT_CODE_MAIN_BOARD, FLT_SUBCODE_BLDC_COMM,(uint16_t)TOUT_RESET_PREFAUL
 1196                             		.loc 1 924 0
 1197 0038 66 D1                   		mov	#13, r1
 1198 003a 75 42 18                		mov	#24, r2
 1199 003d 66 03                   		mov	#0, r3
 1200 003f 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
 925:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_ResetFaultDetectProc( FLT_CODE_MAIN_BOARD, FLT_SUBCODE_BLDC_UNDER_VOLTAGE,(uint16_t)TOUT_RESE
 1201                             		.loc 1 925 0
 1202 0043 66 D1                   		mov	#13, r1
 1203 0045 75 42 40                		mov	#64, r2
 1204 0048 66 03                   		mov	#0, r3
1128:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 1205                             		.loc 1 1128 0
 1206 004a 6F 7D                   		popm	r7-r13
 925:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_ResetFaultDetectProc( FLT_CODE_MAIN_BOARD, FLT_SUBCODE_BLDC_UNDER_VOLTAGE,(uint16_t)TOUT_RESE
 1207                             		.loc 1 925 0
 1208 004c 04 00 00 00             		bra	_FLT_ResetFaultDetectProc
 1209                             	.L190:
 930:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if( ( CP_GetExternalBoardCommStatus()==TRUE )
 1210                             		.loc 1 930 0
 1211 0050 05 00 00 00             		bsr	_CP_GetExternalBoardCommStatus
 1212 0054 5B 11                   		movu.B	r1, r1
 1213 0056 61 11                   		cmp	#1, r1
 1214 0058 3B C6 02                		bne	.L191
 932:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			( TESTBIT(FltBLDCUnblock.flags,PUMPOFF)== 0)
 1215                             		.loc 1 932 0
 1216 005b FB 72 00 00 00 00       		mov.L	#_FltBLDCUnblock, r7
 1217 0061 CC 7B                   		mov.B	[r7], r11
 931:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			&&
 1218                             		.loc 1 931 0
 1219 0063 FD 74 CB 01             		tst	#1, r11
 1220 0067 3B B7 02                		bne	.L191
 1221                             	.LBB38:
 1222                             	.LBB39:
 1223                             	.LBB40:
1154:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	CLRBIT(FltBLDCUnblock.flags,PUMP_CHANGE_PILOT);
 1224                             		.loc 1 1154 0
 1225 006a EF BA                   		mov.L	r11, r10
 1226 006c 7A 2A                   		bclr #2, r10
 1227 006e C3 7A                   		mov.B	r10, [r7]
1156:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if(GET_BLDC_SPEED(BLDC_PumpReq_New[DRAIN_BLDC_PUMP])>0)
 1228                             		.loc 1 1156 0
 1229 0070 FB C2 00 00 00 00       		mov.L	#_BLDC_PumpReq_New, r12
 1230 0076 59 CD 0E                		movu.B	14[r12], r13
 1231 0079 6C 8D                   		shll	#8, r13
 1232 007b 55 CD 0F                		or	15[r12].UB, r13
 1233 007e DF DD                   		mov.W	r13, r13
 1234 0080 61 0D                   		cmp	#0, r13
 1235 0082 20 16                   		beq	.L192
 1236                             	.LBE40:
1158:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	   if ( LONIBBLE(FltBLDCUnblock.pumpandspeed )!=DRAIN_BLDC_PUMP)
 1237                             		.loc 1 1158 0
 1238 0084 CD 7A 01                		mov.B	1[r7], r10
 1239                             	.LBB41:
 1240 0087 64 FA                   		and #15, r10
 1241 0089 61 1A                   		cmp	#1, r10
 1242 008b 20 6D                   		beq	.L193
1161:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		   CLRBIT(FltBLDCUnblock.flags,PUMP_STALLO);
 1243                             		.loc 1 1161 0
 1244 008d 75 2B F3                		and #-13, r11
 1245 0090 78 2B                   		bset #2, r11
 1246 0092 C3 7B                   		mov.B	r11, [r7]
1165:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	   return DRAIN_BLDC_PUMP;
 1247                             		.loc 1 1165 0
 1248 0094 CF 1A                   		mov.B	r1, r10
 1249 0096 2E 62                   		bra	.L193
 1250                             	.L192:
1169:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if(GET_BLDC_SPEED(BLDC_PumpReq_New[WASH_BLDC_PUMP])>0)
 1251                             		.loc 1 1169 0
 1252 0098 59 CA 02                		movu.B	2[r12], r10
 1253 009b 6C 8A                   		shll	#8, r10
 1254 009d 59 CC 03                		movu.B	3[r12], r12
 1255 00a0 57 CA                   		or	r12, r10
 1256 00a2 20 14                   		beq	.L194
 1257                             	.LBE41:
1172:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( LONIBBLE(FltBLDCUnblock.pumpandspeed )!=WASH_BLDC_PUMP)
 1258                             		.loc 1 1172 0
 1259 00a4 CD 7C 01                		mov.B	1[r7], r12
 1260                             	.LBB42:
 1261 00a7 64 FC                   		and	#15, r12
 1262 00a9 20 4A                   		beq	.L227
1175:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			CLRBIT(FltBLDCUnblock.flags,PUMP_STALLO);
 1263                             		.loc 1 1175 0
 1264 00ab 75 2B F3                		and #-13, r11
 1265 00ae 78 2B                   		bset #2, r11
 1266 00b0 C3 7B                   		mov.B	r11, [r7]
1178:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	    return WASH_BLDC_PUMP;
 1267                             		.loc 1 1178 0
 1268 00b2 CF DA                   		mov.B	r13, r10
 1269 00b4 2E 44                   		bra	.L193
 1270                             	.L194:
1182:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( ((LONIBBLE(FltBLDCUnblock.pumpandspeed ) != BLDC_NOTHING) && (LONIBBLE(FltBLDCUnblock.pumpands
 1271                             		.loc 1 1182 0
 1272 00b6 88 7F                   		mov.B	1[r7], r7
 1273                             	.LBE42:
 1274 00b8 EF 7A                   		mov.L	r7, r10
 1275 00ba 64 FA                   		and #15, r10
 1276                             	.LBB43:
 1277 00bc 61 1A                   		cmp	#1, r10
 1278 00be 2A 12                   		bgt	.L195
 1279 00c0 05 00 00 00             		bsr	_FLT_checkForMotorFault
 1280 00c4 61 01                   		cmp	#0, r1
 1281 00c6 21 32                   		bne	.L193
 1282 00c8 FD 78 C7 F0 00          		tst	#0xf0, r7
 1283 00cd 21 2B                   		bne	.L193
 1284 00cf 03                      		.balign 2,3,5
 1285                             	.L195:
1189:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if(pInfoDrain[BLDC_FAULT_MSB] != CODE_NO_FAULT)
 1286                             		.loc 1 1189 0
 1287 00d0 FB 72 00 00 00 00       		mov.L	#_BLDC_Pump_InfoBuffer, r7
 1288 00d6 59 7A 0C                		movu.B	12[r7], r10
 1289 00d9 61 0A                   		cmp	#0, r10
 1290 00db 21 1B                   		bne	.L228
1194:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if(pInfoWash[BLDC_FAULT_MSB] != CODE_NO_FAULT)
 1291                             		.loc 1 1194 0
 1292 00dd 58 7B                   		movu.B	[r7], r11
 1293 00df 61 0B                   		cmp	#0, r11
 1294 00e1 21 17                   		bne	.L193
1198:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if(pInfoDrain[BLDC_FAULT_LSB] == FLT_BLDC_CODE_LOW_VOLTAGE_WARN)
 1295                             		.loc 1 1198 0
 1296 00e3 59 7A 0D                		movu.B	13[r7], r10
 1297 00e6 61 1A                   		cmp	#1, r10
 1298 00e8 20 10                   		beq	.L193
1203:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if(pInfoWash[BLDC_FAULT_LSB] == FLT_BLDC_CODE_LOW_VOLTAGE_WARN)
 1299                             		.loc 1 1203 0
 1300 00ea 59 7A 01                		movu.B	1[r7], r10
 1301 00ed 61 1A                   		cmp	#1, r10
 1302 00ef FC DB A1                		scne.L	r10
 1303 00f2 0E                      		bra	.L193
 1304                             	.L227:
1178:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	    return WASH_BLDC_PUMP;
 1305                             		.loc 1 1178 0
 1306 00f3 CF CA                   		mov.B	r12, r10
 1307 00f5 0B                      		bra	.L193
 1308                             	.L228:
1165:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	   return DRAIN_BLDC_PUMP;
 1309                             		.loc 1 1165 0
 1310 00f6 66 1A                   		mov	#1, r10
 1311                             		.balign 2,3,1
 1312                             	.L193:
 1313                             	.LBE43:
 1314                             	.LBE39:
 947:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			BLDCSpeedNumMax_local = FLT_Get_Motor_Timeout(bldcIndex,5) & 0xF0;
 1315                             		.loc 1 947 0
 1316 00f8 CF A1                   		mov.B	r10, r1
 1317 00fa 66 52                   		mov	#5, r2
 1318 00fc 05 00 00 00             		bsr	_FLT_Get_Motor_Timeout
 1319 0100 EF 1D                   		mov.L	r1, r13
 1320 0102 75 2D F0                		and #-16, r13
 949:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			bldc_fault_warn=BLDC_Pump_InfoBuffer[bldcIndex][BLDC_FAULT_MSB];
 1321                             		.loc 1 949 0
 1322 0105 5B AC                   		movu.B	r10, r12
 1323 0107 EF C4                   		mov.L	r12, r4
 1324 0109 63 C4                   		mul	#12, r4
 1325 010b 70 44 00 00 00 00       		add	#_BLDC_Pump_InfoBuffer, r4
 1326 0111 CC 4B                   		mov.B	[r4], r11
 951:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if (  bldc_fault_warn != FLT_BLDC_CODE_NO_FAULT )
 1327                             		.loc 1 951 0
 1328 0113 5B BE                   		movu.B	r11, r14
 1329 0115 FB 72 00 00 00 00       		mov.L	#_FltBLDCUnblock, r7
 1330 011b 61 0E                   		cmp	#0, r14
 1331 011d 3A F1 00                		beq	.L196
 954:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				FltBLDCUnblock.pumpandspeed=SET_LONIBBLE(FltBLDCUnblock.pumpandspeed, bldcIndex);
 1332                             		.loc 1 954 0
 1333 0120 CD 7E 01                		mov.B	1[r7], r14
 1334 0123 75 2E F0                		and #-16, r14
 1335 0126 57 AE                   		or	r10, r14
 1336 0128 C7 7E 01                		mov.B	r14, 1[r7]
 956:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if(bldcIndex == WASH_BLDC_PUMP)
 1337                             		.loc 1 956 0
 1338 012b 61 0C                   		cmp	#0, r12
 1339 012d 1B                      		bne	.L197
 959:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					SETBIT(FltBLDCUnblock.flags,PUMP_TRES_OFF);
 1340                             		.loc 1 959 0
 1341 012e F0 71                   		bset #1, [r7].B
 1342                             		.balign 2,3,5
 1343                             	.L197:
 966:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				SETBIT(FltBLDCUnblock.flags,PUMP_STALLO);
 1344                             		.loc 1 966 0
 1345 0130 FB E2 00 00 00 00       		mov.L	#_FltBLDCUnblock, r14
 1346 0136 CC E7                   		mov.B	[r14], r7
 1347 0138 EF 74                   		mov.L	r7, r4
 1348 013a 78 34                   		bset #3, r4
 1349 013c C3 E4                   		mov.B	r4, [r14]
 968:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if( bldc_fault_warn == FLT_BLDC_CODE_F01 )
 1350                             		.loc 1 968 0
 1351 013e 5B BE                   		movu.B	r11, r14
 1352 0140 61 1E                   		cmp	#1, r14
 1353 0142 1E                      		bne	.L198
 1354 0143 03                      		.balign 2,3,1
 1355                             	.L201:
 971:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					bldc_fault_warn = FLT_CODE_MAIN_BOARD;
 1356                             		.loc 1 971 0
 1357 0144 66 DB                   		mov	#13, r11
 1358 0146 2E 26                   		bra	.L199
 1359                             	.L198:
 973:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				else if ( bldc_fault_warn != FLT_CODE_SETTING_FILE )
 1360                             		.loc 1 973 0
 1361 0148 61 9E                   		cmp	#9, r14
 1362 014a 20 22                   		beq	.L199
 983:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					bldc_fault_warn = (bldcIndex == WASH_BLDC_PUMP) ? FLT_CODE_BLDC : FLT_CODE_DRAIN;
 1363                             		.loc 1 983 0
 1364 014c 76 2A FF 00             		and #0xff, r10
 1365 0150 1C                      		bne	.L231
 1366 0151 66 BB                   		mov	#11, r11
 1367 0153 0B                      		bra	.L200
 1368                             	.L231:
 1369 0154 66 3B                   		mov	#3, r11
 1370                             		.balign 2,3,1
 1371                             	.L200:
 985:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( Remap_Fault_step_2(BLDC_Pump_InfoBuffer[bldcIndex][BLDC_FAULT_LSB]))
 1372                             		.loc 1 985 0 discriminator 3
 1373 0156 EF CA                   		mov.L	r12, r10
 1374 0158 63 CA                   		mul	#12, r10
 1375 015a 70 AA 00 00 00 00       		add	#_BLDC_Pump_InfoBuffer, r10
 1376                             	.LBB44:
 1377                             	.LBB45:
1365:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( ( subcode== 0x8A) ||( subcode== 0x8B)||( subcode== 0x8C))
 1378                             		.loc 1 1365 0 discriminator 3
 1379 0160 CD AA 01                		mov.B	1[r10], r10
 1380 0163 71 AA 76                		add	#0x76, r10
 1381 0166 5B AA                   		movu.B	r10, r10
 1382 0168 61 2A                   		cmp	#2, r10
 1383 016a 25 DA                   		bleu	.L201
 1384                             		.balign 2,3,1
 1385                             	.L199:
 1386                             	.LBE45:
 1387                             	.LBE44:
 995:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ((TESTBIT(FltBLDCUnblock.flags,PUMP_CHANGE_PILOT) )&&FLT_checkForMotorFault())
 1388                             		.loc 1 995 0
 1389 016c EF 7A                   		mov.L	r7, r10
 1390 016e 64 4A                   		and #4, r10
 1391 0170 20 38                   		beq	.L202
 995:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ((TESTBIT(FltBLDCUnblock.flags,PUMP_CHANGE_PILOT) )&&FLT_checkForMotorFault())
 1392                             		.loc 1 995 0 is_stmt 0 discriminator 1
 1393 0172 05 00 00 00             		bsr	_FLT_checkForMotorFault
 1394 0176 61 01                   		cmp	#0, r1
 1395 0178 20 30                   		beq	.L202
 998:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if (FLT_checkForCurrentFault( bldc_fault_warn, BLDC_Pump_InfoBuffer[bldcIndex][BLDC_FAULT_LSB]
 1396                             		.loc 1 998 0 is_stmt 1
 1397 017a EF C7                   		mov.L	r12, r7
 1398 017c 63 C7                   		mul	#12, r7
 1399 017e 70 77 00 00 00 00       		add	#_BLDC_Pump_InfoBuffer, r7
 1400 0184 CF B1                   		mov.B	r11, r1
 1401 0186 88 7A                   		mov.B	1[r7], r2
 1402 0188 05 00 00 00             		bsr	_FLT_checkForCurrentFault
 1403 018c 61 01                   		cmp	#0, r1
 1404 018e 20 0C                   		beq	.L203
1000:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						CLRBIT(FltBLDCUnblock.flags,PUMP_CHANGE_PILOT);
 1405                             		.loc 1 1000 0
 1406 0190 FB 72 00 00 00 00       		mov.L	#_FltBLDCUnblock, r7
 1407 0196 F0 7A                   		bclr #2, [r7].B
 1408 0198 2E 1C                   		bra	.L204
 1409                             	.L203:
1003:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FaultMgmt_Data[0].faultCodes.code=bldc_fault_warn;
 1410                             		.loc 1 1003 0
 1411 019a FB A2 00 00 00 00       		mov.L	#_FaultMgmt_Data, r10
 1412 01a0 C3 AB                   		mov.B	r11, [r10]
1004:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FaultMgmt_Data[0].faultCodes.subCode =	BLDC_Pump_InfoBuffer[bldcIndex][BLDC_FAULT_LSB];
 1413                             		.loc 1 1004 0
 1414 01a2 C5 7A 01 01             		mov.B	1[r7], 1[r10]
 1415 01a6 2E 0E                   		bra	.L204
 1416                             	.L202:
1010:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					CLRBIT(FltBLDCUnblock.flags,PUMP_CHANGE_PILOT);
 1417                             		.loc 1 1010 0
 1418 01a8 7A 27                   		bclr #2, r7
 1419 01aa 78 37                   		bset #3, r7
 1420 01ac FB A2 00 00 00 00       		mov.L	#_FltBLDCUnblock, r10
 1421 01b2 C3 A7                   		mov.B	r7, [r10]
 1422                             		.balign 2,3,5
 1423                             	.L204:
1013:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if (TESTBIT (FltBLDCUnblock.flags,UPDATE_FAULT)==0)
 1424                             		.loc 1 1013 0
 1425 01b4 FB 72 00 00 00 00       		mov.L	#_FltBLDCUnblock, r7
 1426 01ba CC 7A                   		mov.B	[r7], r10
 1427 01bc 75 2A 10                		and	#16, r10
 1428 01bf 21 25                   		bne	.L205
1015:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FLT_manageFault(bldc_fault_warn,BLDC_Pump_InfoBuffer[bldcIndex][BLDC_FAULT_LSB]);
 1429                             		.loc 1 1015 0
 1430 01c1 63 CC                   		mul	#12, r12
 1431 01c3 70 CC 00 00 00 00       		add	#_BLDC_Pump_InfoBuffer, r12
 1432 01c9 CF B1                   		mov.B	r11, r1
 1433 01cb CD C2 01                		mov.B	1[r12], r2
 1434 01ce 05 00 00 00             		bsr	_FLT_manageFault
1017:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FltBLDCUnblock.pumpandspeed=(BLDCSpeedNumMax_local)|(LONIBBLE(FltBLDCUnblock.pumpandspeed) );
 1435                             		.loc 1 1017 0
 1436 01d2 CD 7C 01                		mov.B	1[r7], r12
 1437 01d5 64 FC                   		and #15, r12
 1438 01d7 57 CD                   		or	r12, r13
 1439 01d9 C7 7D 01                		mov.B	r13, 1[r7]
1018:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FltBLDCMotor_Tout = 0;
 1440                             		.loc 1 1018 0
 1441 01dc FB 72 00 00 00 00       		mov.L	#_FltBLDCMotor_Tout, r7
 1442 01e2 C3 7A                   		mov.B	r10, [r7]
 1443                             		.balign 2,3,1
 1444                             	.L205:
1022:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				FLT_BLDCUnblock_Mgmt(bldc_fault_warn);
 1445                             		.loc 1 1022 0
 1446 01e4 CF B1                   		mov.B	r11, r1
 1447 01e6 05 00 00 00             		bsr	_FLT_BLDCUnblock_Mgmt
1024:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ((FAULT_STEP == FaultMgmt_Data[0].step)&& FLT_checkForMotorFault())
 1448                             		.loc 1 1024 0
 1449 01ea FB 72 00 00 00 00       		mov.L	#_FaultMgmt_Data, r7
 1450 01f0 88 F7                   		mov.B	2[r7], r7
 1451 01f2 75 27 7F                		and #0x7f, r7
 1452 01f5 61 47                   		cmp	#4, r7
 1453 01f7 3B 15 01                		bne	.L206
1024:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ((FAULT_STEP == FaultMgmt_Data[0].step)&& FLT_checkForMotorFault())
 1454                             		.loc 1 1024 0 is_stmt 0 discriminator 1
 1455 01fa 05 00 00 00             		bsr	_FLT_checkForMotorFault
 1456 01fe 61 01                   		cmp	#0, r1
 1457 0200 3A 0C 01                		beq	.L206
1026:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					CLRBIT(FltBLDCUnblock.flags,PUMP_STALLO);
 1458                             		.loc 1 1026 0 is_stmt 1
 1459 0203 FB 72 00 00 00 00       		mov.L	#_FltBLDCUnblock, r7
 1460 0209 F0 7B                   		bclr #3, [r7].B
 1461 020b 38 01 01                		bra	.L206
 1462                             	.L196:
1033:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				switch(BLDC_Pump_InfoBuffer[bldcIndex][BLDC_FAULT_LSB])
 1463                             		.loc 1 1033 0
 1464 020e 59 4A 01                		movu.B	1[r4], r10
 1465 0211 61 1A                   		cmp	#1, r10
 1466 0213 10                      		beq	.L208
 1467 0214 75 5A 88                		cmp	#0x88, r10
 1468 0217 21 37                   		bne	.L263
 1469 0219 2E 18                   		bra	.L209
 1470                             	.L208:
1037:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FltBLDCUnblock.pumpandspeed=(BLDCSpeedNumMax_local)|(LONIBBLE(FltBLDCUnblock.pumpandspeed) );
 1471                             		.loc 1 1037 0
 1472 021b CD 7A 01                		mov.B	1[r7], r10
 1473 021e 64 FA                   		and #15, r10
 1474 0220 57 AD                   		or	r10, r13
 1475 0222 C7 7D 01                		mov.B	r13, 1[r7]
1038:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FltWarning.bldc_low_voltage = 1;	/* warning bldc_low_voltage */
 1476                             		.loc 1 1038 0
 1477 0225 FB A2 00 00 00 00       		mov.L	#_FltWarning, r10
 1478 022b DC AB                   		mov.W	[r10], r11
 1479 022d 78 3B                   		bset	#3, r11
 1480 022f 2E 17                   		bra	.L266
 1481                             	.L209:
1044:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FltBLDCUnblock.pumpandspeed=(BLDCSpeedNumMax_local)|(LONIBBLE(FltBLDCUnblock.pumpandspeed) );
 1482                             		.loc 1 1044 0
 1483 0231 CD 7A 01                		mov.B	1[r7], r10
 1484 0234 64 FA                   		and #15, r10
 1485 0236 57 AD                   		or	r10, r13
 1486 0238 C7 7D 01                		mov.B	r13, 1[r7]
1045:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FltWarning.bldc_OH = 1;	/* warning bldc_low_voltage */
 1487                             		.loc 1 1045 0
 1488 023b FB A2 00 00 00 00       		mov.L	#_FltWarning, r10
 1489 0241 DC AB                   		mov.W	[r10], r11
 1490 0243 78 5B                   		bset	#5, r11
 1491 0245 03                      		.balign 2,3,1
 1492                             	.L266:
 1493 0246 D3 AB                   		mov.W	r11, [r10]
1046:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FltBLDCUnblock.wait_cnt=0;
 1494                             		.loc 1 1046 0
 1495 0248 D7 7E 01                		mov.W	r14, 2[r7]
1047:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					break;
 1496                             		.loc 1 1047 0
 1497 024b 38 C1 00                		bra	.L206
 1498                             	.L263:
1054:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FltWarning.bldc_OH = 0;	/* warning bldc_low_voltage */
 1499                             		.loc 1 1054 0
 1500 024e FB A2 00 00 00 00       		mov.L	#_FltWarning, r10
 1501 0254 DC AB                   		mov.W	[r10], r11
 1502 0256 7A 5B                   		bclr	#5, r11
1055:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FltWarning.bldc_low_voltage = 0;	/* warning bldc_low_voltage */
 1503                             		.loc 1 1055 0
 1504 0258 7A 3B                   		bclr	#3, r11
 1505 025a D3 AB                   		mov.W	r11, [r10]
 1506                             	.LBB46:
 1507                             	.LBB47:
1399:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	bldcIndex = LONIBBLE(FltBLDCUnblock.pumpandspeed );
 1508                             		.loc 1 1399 0
 1509 025c CD 7A 01                		mov.B	1[r7], r10
 1510 025f 64 FA                   		and #15, r10
 1511 0261 CF AC                   		mov.B	r10, r12
1403:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****    BLDCSpeedTh_local = ( LONIBBLE(FLT_Get_Motor_Timeout(bldcIndex,5)) * 100 );
 1512                             		.loc 1 1403 0
 1513 0263 CF A1                   		mov.B	r10, r1
 1514 0265 66 52                   		mov	#5, r2
 1515 0267 05 00 00 00             		bsr	_FLT_Get_Motor_Timeout
 1516 026b EF 1B                   		mov.L	r1, r11
1404:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****    BLDCSpeedNumMax_local = FLT_Get_Motor_Timeout(bldcIndex,5)& 0xF0;
 1517                             		.loc 1 1404 0
 1518 026d CF A1                   		mov.B	r10, r1
 1519 026f 66 52                   		mov	#5, r2
 1520 0271 05 00 00 00             		bsr	_FLT_Get_Motor_Timeout
 1521 0275 75 21 F0                		and #-16, r1
1405:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (FltBLDCUnblock.wait_cnt >0 )
 1522                             		.loc 1 1405 0
 1523 0278 5D 7A 01                		movu.W	2[r7], r10
 1524 027b 61 0A                   		cmp	#0, r10
 1525 027d 20 0D                   		beq	.L210
 1526                             	.LBE47:
1407:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FltBLDCUnblock.pumpandspeed=(BLDCSpeedNumMax_local)|(LONIBBLE(FltBLDCUnblock.pumpandspeed) );
 1527                             		.loc 1 1407 0
 1528 027f CD 7A 01                		mov.B	1[r7], r10
 1529 0282 64 FA                   		and #15, r10
 1530 0284 57 1A                   		or	r1, r10
 1531                             	.LBB48:
 1532 0286 C7 7A 01                		mov.B	r10, 1[r7]
 1533 0289 03                      		.balign 2,3,5
 1534                             	.L210:
1410:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ( HINIBBLE(FltBLDCUnblock.pumpandspeed )> 0 )
 1535                             		.loc 1 1410 0
 1536 028a FB 72 00 00 00 00       		mov.L	#_FltBLDCUnblock, r7
 1537 0290 CD 7A 01                		mov.B	1[r7], r10
 1538 0293 FD 78 CA F0 00          		tst	#0xf0, r10
 1539 0298 20 58                   		beq	.L211
1413:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		SETBIT (FltBLDCUnblock.flags,PUMP_TRES_OFF);
 1540                             		.loc 1 1413 0
 1541 029a F0 71                   		bset #1, [r7].B
1417:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if(bldcIndex < NR_OF_BLDC_PUMPS)
 1542                             		.loc 1 1417 0
 1543 029c 5B CC                   		movu.B	r12, r12
 1544 029e 61 1C                   		cmp	#1, r12
 1545 02a0 24 32                   		bgtu	.L212
1419:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		   currentSpeed = ((int16_t)(BLDC_Pump_InfoBuffer[bldcIndex][BLDC_VCURR_MSB] << 8) + (int16_t)BLD
 1546                             		.loc 1 1419 0
 1547 02a2 63 CC                   		mul	#12, r12
 1548 02a4 70 C7 00 00 00 00       		add	#_BLDC_Pump_InfoBuffer, r12, r7
 1549 02aa 59 7E 02                		movu.B	2[r7], r14
 1550 02ad 6C 8E                   		shll	#8, r14
 1551 02af 49 7E 03                		add	3[r7].UB, r14
 1552 02b2 DF E7                   		mov.W	r14, r7
1422:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if( currentSpeed < 0 )
 1553                             		.loc 1 1422 0
 1554 02b4 DF E4                   		mov.W	r14, r4
 1555 02b6 61 04                   		cmp	#0, r4
 1556 02b8 29 05 38 1C 01          		bge	.L213
1424:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			currentSpeed = -currentSpeed;
 1557                             		.loc 1 1424 0
 1558 02bd 7E 1E                   		neg	r14
 1559 02bf EF E7                   		mov.L	r14, r7
 1560 02c1 38 15 01                		bra	.L213
 1561                             	.L264:
1433:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( (targetSpeed == 0) || ( currentSpeed > BLDCSpeedTh_local ) )
 1562                             		.loc 1 1433 0
 1563 02c4 DF 77                   		mov.W	r7, r7
1403:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****    BLDCSpeedTh_local = ( LONIBBLE(FLT_Get_Motor_Timeout(bldcIndex,5)) * 100 );
 1564                             		.loc 1 1403 0
 1565 02c6 64 FB                   		and #15, r11
 1566 02c8 75 1B 64                		mul	#0x64, r11
1433:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( (targetSpeed == 0) || ( currentSpeed > BLDCSpeedTh_local ) )
 1567                             		.loc 1 1433 0
 1568 02cb 5B BB                   		movu.B	r11, r11
 1569 02cd 47 B7                   		cmp	r11, r7
 1570 02cf 2B 11                   		ble	.L214
 1571 02d1 03                      		.balign 2,3,2
 1572                             	.L212:
1437:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FltBLDCUnblock.pumpandspeed-=0x10;
 1573                             		.loc 1 1437 0
 1574 02d2 71 AA F0                		add	#-16, r10
 1575 02d5 FB 72 00 00 00 00       		mov.L	#_FltBLDCUnblock, r7
 1576 02db C7 7A 01                		mov.B	r10, 1[r7]
 1577 02de 2E 2E                   		bra	.L206
 1578                             	.L214:
 1579                             	.LBE48:
1442:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FltBLDCUnblock.pumpandspeed=(BLDCSpeedNumMax_local)|(LONIBBLE(FltBLDCUnblock.pumpandspeed) );
 1580                             		.loc 1 1442 0
 1581 02e0 64 FA                   		and #15, r10
 1582 02e2 FF 5D A1                		or	r10, r1, r13
 1583                             	.LBB49:
 1584 02e5 FB 72 00 00 00 00       		mov.L	#_FltBLDCUnblock, r7
 1585 02eb C7 7D 01                		mov.B	r13, 1[r7]
 1586 02ee 2E 1E                   		bra	.L206
 1587                             	.L211:
1449:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		CLRBIT (FltBLDCUnblock.flags,PUMP_TRES_OFF);
 1588                             		.loc 1 1449 0
 1589 02f0 CC 7C                   		mov.B	[r7], r12
1450:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FltWarning.bldc_low_voltage = 0;	/* reset warning low voltage (rimane il memo per eventuale tout 
 1590                             		.loc 1 1450 0
 1591 02f2 FB A2 00 00 00 00       		mov.L	#_FltWarning, r10
 1592 02f8 DC AB                   		mov.W	[r10], r11
 1593 02fa 7A 3B                   		bclr	#3, r11
1452:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FltWarning.bldc_OH = 0;	/* reset warning overheating */
 1594                             		.loc 1 1452 0
 1595 02fc 7A 5B                   		bclr	#5, r11
 1596 02fe D3 AB                   		mov.W	r11, [r10]
1453:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		CLRBIT (FltBLDCUnblock.flags,PUMP_STALLO);
 1597                             		.loc 1 1453 0
 1598 0300 EF CA                   		mov.L	r12, r10
 1599 0302 75 2A F5                		and #-11, r10
 1600 0305 C3 7A                   		mov.B	r10, [r7]
1455:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_bldcFaultReset();
 1601                             		.loc 1 1455 0
 1602 0307 05 00 00 00             		bsr	_FLT_bldcFaultReset
 1603 030b 03                      		.balign 2,3,1
 1604                             	.L206:
 1605                             	.LBE49:
 1606                             	.LBE46:
1064:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc( FLT_CODE_MAIN_BOARD, FLT_SUBCODE_BLDC_COMM,(uint16_t)TOUT_RESET_PREFAU
 1607                             		.loc 1 1064 0
 1608 030c 66 D1                   		mov	#13, r1
 1609 030e 75 42 18                		mov	#24, r2
 1610 0311 66 03                   		mov	#0, r3
 1611 0313 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
1066:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			CP_ResetExternalBoardCommStatus();
 1612                             		.loc 1 1066 0
 1613 0317 05 00 00 00             		bsr	_CP_ResetExternalBoardCommStatus
 1614 031b 38 97 00                		bra	.L222
 1615                             	.L191:
 1616                             	.LBE38:
1071:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if (FLT_checkForMotorFault())
 1617                             		.loc 1 1071 0
 1618 031e 05 00 00 00             		bsr	_FLT_checkForMotorFault
 1619 0322 61 01                   		cmp	#0, r1
 1620 0324 20 0E                   		beq	.L216
1073:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				FLT_BLDCUnblock_Mgmt(FaultMgmt_Data[0].faultCodes.code);
 1621                             		.loc 1 1073 0
 1622 0326 FB 72 00 00 00 00       		mov.L	#_FaultMgmt_Data, r7
 1623 032c CC 71                   		mov.B	[r7], r1
 1624 032e 05 00 00 00             		bsr	_FLT_BLDCUnblock_Mgmt
 1625                             		.balign 2,3,5
 1626                             	.L216:
1076:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if (TESTBIT (FltBLDCUnblock.flags,UPDATE_FAULT))
 1627                             		.loc 1 1076 0
 1628 0332 FB 72 00 00 00 00       		mov.L	#_FltBLDCUnblock, r7
 1629 0338 CC 7A                   		mov.B	[r7], r10
 1630 033a 75 2A 10                		and	#16, r10
 1631 033d 13                      		beq	.L217
 1632 033e 2E 74                   		bra	.L222
 1633                             	.L217:
1084:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if( FLT_checkForCurrentFault(FLT_CODE_MAIN_BOARD,FLT_SUBCODE_BLDC_COMM))
 1634                             		.loc 1 1084 0
 1635 0340 66 D1                   		mov	#13, r1
 1636 0342 75 42 18                		mov	#24, r2
 1637 0345 05 00 00 00             		bsr	_FLT_checkForCurrentFault
 1638 0349 61 01                   		cmp	#0, r1
 1639 034b 20 21                   		beq	.L232
1086:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if (PREFAULT_STEP == FaultMgmt_Data[0].step )
 1640                             		.loc 1 1086 0
 1641 034d FB B2 00 00 00 00       		mov.L	#_FaultMgmt_Data, r11
 1642 0353 CD BB 02                		mov.B	2[r11], r11
 1643 0356 75 2B 7F                		and #0x7f, r11
1088:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						attemptsTime=(FLT_Get_Motor_Timeout(WASH_BLDC_PUMP,0) & 0x7F);
 1644                             		.loc 1 1088 0
 1645 0359 CF A1                   		mov.B	r10, r1
1086:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if (PREFAULT_STEP == FaultMgmt_Data[0].step )
 1646                             		.loc 1 1086 0
 1647 035b 61 3B                   		cmp	#3, r11
 1648 035d 1C                      		bne	.L219
1088:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						attemptsTime=(FLT_Get_Motor_Timeout(WASH_BLDC_PUMP,0) & 0x7F);
 1649                             		.loc 1 1088 0
 1650 035e CF A2                   		mov.B	r10, r2
 1651 0360 0C                      		bra	.L267
 1652                             	.L219:
1092:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						attemptsTime=(FLT_Get_Motor_Timeout(WASH_BLDC_PUMP,1)& 0x7F);
 1653                             		.loc 1 1092 0
 1654 0361 66 12                   		mov	#1, r2
 1655 0363 03                      		.balign 2,3,3
 1656                             	.L267:
 1657 0364 05 00 00 00             		bsr	_FLT_Get_Motor_Timeout
 1658 0368 75 21 7F                		and #0x7f, r1
 1659 036b 0B                      		bra	.L218
 1660                             	.L232:
1096:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					attemptsTime=10;
 1661                             		.loc 1 1096 0
 1662 036c 66 A1                   		mov	#10, r1
 1663                             		.balign 2,3,5
 1664                             	.L218:
1099:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ((FltBLDCComm_Tout >= attemptsTime) && (FLT_checkForMotorFault()==FALSE))
 1665                             		.loc 1 1099 0
 1666 036e FB A2 00 00 00 00       		mov.L	#_FltBLDCComm_Tout, r10
 1667 0374 CC A7                   		mov.B	[r10], r7
 1668 0376 5B 7B                   		movu.B	r7, r11
 1669 0378 5B 11                   		movu.B	r1, r1
 1670 037a 47 1B                   		cmp	r1, r11
 1671 037c 23 40                   		bltu	.L220
1099:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ((FltBLDCComm_Tout >= attemptsTime) && (FLT_checkForMotorFault()==FALSE))
 1672                             		.loc 1 1099 0 is_stmt 0 discriminator 1
 1673 037e 05 00 00 00             		bsr	_FLT_checkForMotorFault
 1674 0382 61 01                   		cmp	#0, r1
 1675 0384 21 38                   		bne	.L220
1104:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FLT_bldcFaultReset();
 1676                             		.loc 1 1104 0 is_stmt 1
 1677 0386 05 00 00 00             		bsr	_FLT_bldcFaultReset
1105:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FLT_manageFault(FLT_CODE_MAIN_BOARD,FLT_SUBCODE_BLDC_COMM);
 1678                             		.loc 1 1105 0
 1679 038a 66 D1                   		mov	#13, r1
 1680 038c 75 42 18                		mov	#24, r2
 1681 038f 05 00 00 00             		bsr	_FLT_manageFault
1106:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ((PREFAULT_STEP == FaultMgmt_Data[0].step)&& FLT_checkForCurrentFault(FLT_CODE_MAIN_BOARD,F
 1682                             		.loc 1 1106 0
 1683 0393 FB 72 00 00 00 00       		mov.L	#_FaultMgmt_Data, r7
 1684 0399 88 F7                   		mov.B	2[r7], r7
 1685 039b 75 27 7F                		and #0x7f, r7
 1686 039e 61 37                   		cmp	#3, r7
 1687 03a0 21 12                   		bne	.L222
1106:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ((PREFAULT_STEP == FaultMgmt_Data[0].step)&& FLT_checkForCurrentFault(FLT_CODE_MAIN_BOARD,F
 1688                             		.loc 1 1106 0 is_stmt 0 discriminator 1
 1689 03a2 66 D1                   		mov	#13, r1
 1690 03a4 75 42 18                		mov	#24, r2
 1691 03a7 05 00 00 00             		bsr	_FLT_checkForCurrentFault
 1692 03ab 61 01                   		cmp	#0, r1
 1693 03ad 15                      		beq	.L222
1108:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						CP_UART_EnableComm();
 1694                             		.loc 1 1108 0 is_stmt 1
 1695 03ae 05 00 00 00             		bsr	_CP_UART_EnableComm
 1696                             		.balign 2,3,5
 1697                             	.L222:
1111:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FltBLDCComm_Tout = 0;
 1698                             		.loc 1 1111 0
 1699 03b2 FB 72 00 00 00 00       		mov.L	#_FltBLDCComm_Tout, r7
 1700 03b8 3C 70 00                		mov.B	#0, [r7]
 1701 03bb 0D                      		bra	.L215
 1702                             	.L220:
1115:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FltBLDCComm_Tout++;
 1703                             		.loc 1 1115 0
 1704 03bc 62 17                   		add	#1, r7
 1705 03be C3 A7                   		mov.B	r7, [r10]
 1706                             		.balign 2,3,5
 1707                             	.L215:
1121:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if (FltBLDCUnblock.wait_cnt >0 )
 1708                             		.loc 1 1121 0
 1709 03c0 FB 72 00 00 00 00       		mov.L	#_FltBLDCUnblock, r7
 1710 03c6 DD 7A 01                		mov.W	2[r7], r10
 1711 03c9 5F AB                   		movu.W	r10, r11
 1712 03cb 61 0B                   		cmp	#0, r11
 1713 03cd 20 20                   		beq	.L187
1123:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FltBLDCUnblock.wait_cnt--;
 1714                             		.loc 1 1123 0
 1715 03cf 60 1A                   		sub	#1, r10
 1716 03d1 D7 7A 01                		mov.W	r10, 2[r7]
 1717 03d4 2E 19                   		bra	.L187
 1718                             	.L213:
 1719                             	.LBB52:
 1720                             	.LBB51:
 1721                             	.LBB50:
1429:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		  targetSpeed = MAKEWORD(BLDC_PumpReq_New[bldcIndex].data[0], BLDC_PumpReq_New[bldcIndex].data[1]
 1722                             		.loc 1 1429 0
 1723 03d6 70 CC 00 00 00 00       		add	#_BLDC_PumpReq_New, r12
 1724 03dc 59 C4 02                		movu.B	2[r12], r4
 1725 03df 6C 84                   		shll	#8, r4
 1726 03e1 59 CE 03                		movu.B	3[r12], r14
1433:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( (targetSpeed == 0) || ( currentSpeed > BLDCSpeedTh_local ) )
 1727                             		.loc 1 1433 0
 1728 03e4 FF 5C E4                		or	r14, r4, r12
 1729 03e7 3B DD FE                		bne	.L264
 1730 03ea 38 E8 FE                		bra	.L212
 1731                             	.L187:
 1732                             	.LBE50:
 1733                             	.LBE51:
 1734                             	.LBE52:
1128:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 1735                             		.loc 1 1128 0
 1736 03ed 3F 7D 07                		rtsd	#28, r7-r13
 1737                             	.LFE15:
 1739                             		.section	.text.FLT_bldcFaultLoadMgmt,"ax",@progbits
 1740                             		.global	_FLT_bldcFaultLoadMgmt
 1742                             	_FLT_bldcFaultLoadMgmt:
 1743                             	.LFB24:
1502:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 1744                             		.loc 1 1502 0
1504:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( Res_Pos[LD_WASH_RES_IND] != NO_LD_POS )
 1745                             		.loc 1 1504 0
 1746 0000 FB E2 00 00 00 00       		mov.L	#_Res_Pos, r14
 1747 0006 CC E4                   		mov.B	[r14], r4
 1748 0008 5B 4E                   		movu.B	r4, r14
 1749 000a 75 5E FF                		cmp	#0xff, r14
 1750 000d 3A 82 00                		beq	.L285
1502:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 1751                             		.loc 1 1502 0
 1752 0010 7E A7                   		push.l	r7
 1753                             	.LCFI8:
1508:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ((  FltWarning.bldc_low_voltage	== 1)|| (FltWarning.bldc_OH	== 1)||(TESTBIT(FltBLDCUnblock.fla
 1754                             		.loc 1 1508 0
 1755 0012 FB E2 00 00 00 00       		mov.L	#_FltWarning, r14
 1756 0018 CD EE 01                		mov.B	1[r14], r14
 1757 001b EF E3                   		mov.L	r14, r3
 1758 001d 75 23 28                		and	#40, r3
 1759 0020 21 0E                   		bne	.L272
1508:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ((  FltWarning.bldc_low_voltage	== 1)|| (FltWarning.bldc_OH	== 1)||(TESTBIT(FltBLDCUnblock.fla
 1760                             		.loc 1 1508 0 is_stmt 0 discriminator 1
 1761 0022 FB 32 00 00 00 00       		mov.L	#_FltBLDCUnblock, r3
 1762 0028 CC 33                   		mov.B [r3], r3
 1763 002a 64 23                   		and #2, r3
 1764 002c 20 4F                   		beq	.L273
 1765                             		.balign 2,3,1
 1766                             	.L272:
1512:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if ( LoadsReq_New[Res_Pos[LD_WASH_RES_IND]].b == RES_ON )
 1767                             		.loc 1 1512 0 is_stmt 1
 1768 002e 5B 44                   		movu.B	r4, r4
 1769 0030 FB 32 00 00 00 00       		mov.L	#_LoadsReq_New, r3
 1770 0036 FE C4 32                		movu.B	[r4,r3], r2
 1771 0039 61 12                   		cmp	#1, r2
 1772 003b 21 40                   		bne	.L273
1523:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				LoadsReq_New[Res_Pos[LD_WASH_RES_IND]].b = RES_OFF;
 1773                             		.loc 1 1523 0
 1774 003d 66 07                   		mov	#0, r7
 1775 003f FE 04 37                		mov.B	r7, [r4,r3]
1525:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if (FltHeatToutData.uP_exe ==TRUE )
 1776                             		.loc 1 1525 0
 1777 0042 FB 42 00 00 00 00       		mov.L	#_FltHeatToutData, r4
 1778 0048 CC 44                   		mov.B [r4], r4
 1779 004a 76 24 80 00             		and #0x80, r4
 1780 004e 20 3E                   		beq	.L269
1527:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( FltWarning.bldc_low_voltage	== 1)
 1781                             		.loc 1 1527 0
 1782 0050 64 8E                   		and #8, r14
1529:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						(void)SWTC_Run((SWTC_CountersType)FLT_UNDER_VOLTAGE_RES_OFF_M_COUNTER);
 1783                             		.loc 1 1529 0
 1784 0052 75 41 27                		mov	#39, r1
1527:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( FltWarning.bldc_low_voltage	== 1)
 1785                             		.loc 1 1527 0
 1786 0055 61 0E                   		cmp	#0, r14
 1787 0057 16                      		beq	.L275
1529:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						(void)SWTC_Run((SWTC_CountersType)FLT_UNDER_VOLTAGE_RES_OFF_M_COUNTER);
 1788                             		.loc 1 1529 0
 1789 0058 05 00 00 00             		bsr	_SWTC_Run
 1790 005c 0E                      		bra	.L276
 1791                             	.L275:
1533:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						(void)SWTC_Stop((SWTC_CountersType)FLT_UNDER_VOLTAGE_RES_OFF_M_COUNTER);
 1792                             		.loc 1 1533 0
 1793 005d 05 00 00 00             		bsr	_SWTC_Stop
 1794 0061 03                      		.balign 2,3,5
 1795                             	.L276:
1535:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( FltWarning.bldc_OH	== 1)
 1796                             		.loc 1 1535 0
 1797 0062 FB E2 00 00 00 00       		mov.L	#_FltWarning, r14
 1798 0068 CD EE 01                		mov.B 1[r14], r14
 1799 006b 75 2E 20                		and #32, r14
1537:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						(void)SWTC_Run((SWTC_CountersType)FLT_OVERHEATING_RES_OFF_M_COUNTER);
 1800                             		.loc 1 1537 0
 1801 006e 75 41 28                		mov	#40, r1
1535:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( FltWarning.bldc_OH	== 1)
 1802                             		.loc 1 1535 0
 1803 0071 61 0E                   		cmp	#0, r14
 1804 0073 20 13                   		beq	.L286
1559:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 1805                             		.loc 1 1559 0
 1806 0075 7E B7                   		pop	r7
1537:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						(void)SWTC_Run((SWTC_CountersType)FLT_OVERHEATING_RES_OFF_M_COUNTER);
 1807                             		.loc 1 1537 0
 1808 0077 04 00 00 00             		bra	_SWTC_Run
 1809                             	.L273:
1548:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Stop((SWTC_CountersType)FLT_UNDER_VOLTAGE_RES_OFF_M_COUNTER);
 1810                             		.loc 1 1548 0
 1811 007b 75 41 27                		mov	#39, r1
 1812 007e 05 00 00 00             		bsr	_SWTC_Stop
1549:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Stop((SWTC_CountersType)FLT_OVERHEATING_RES_OFF_M_COUNTER);
 1813                             		.loc 1 1549 0
 1814 0082 75 41 28                		mov	#40, r1
 1815 0085 03                      		.balign 2,3,1
 1816                             	.L286:
1559:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 1817                             		.loc 1 1559 0
 1818 0086 7E B7                   		pop	r7
1549:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Stop((SWTC_CountersType)FLT_OVERHEATING_RES_OFF_M_COUNTER);
 1819                             		.loc 1 1549 0
 1820 0088 04 00 00 00             		bra	_SWTC_Stop
 1821                             	.L269:
1559:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 1822                             		.loc 1 1559 0
 1823 008c 3F 77 01                		rtsd	#4, r7-r7
 1824                             	.L285:
 1825                             	.LCFI9:
 1826 008f 02                      		rts
 1827                             	.LFE24:
 1829                             		.section	.text.FLT_pilotLoadEV_Mgmt,"ax",@progbits
 1830                             		.global	_FLT_pilotLoadEV_Mgmt
 1832                             	_FLT_pilotLoadEV_Mgmt:
 1833                             	.LFB34:
2457:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 1834                             		.loc 1 2457 0
 1835 0000 6E 7B                   		pushm	r7-r11
 1836                             	.LCFI10:
 1837 0002 60 40                   		sub	#4, r0
 1838                             	.LCFI11:
 1839 0004 CF 17                   		mov.B	r1, r7
2460:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if(SPV_isAutotestRunning())
 1840                             		.loc 1 2460 0
 1841 0006 05 00 00 00             		bsr	_SPV_isAutotestRunning
 1842 000a 61 01                   		cmp	#0, r1
 1843 000c 10                      		beq	.L288
2462:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		EV_timer = TOUT_LOAD_EV_FAULT(Tab_LoadFault_Special.Data);  /* il tempo da setting è il tempo de
 1844                             		.loc 1 2462 0
 1845 000d FB A2 00 00 00 00       		mov.L	#_Tab_LoadFault_Special, r10
 1846 0013 0F                      		bra	.L310
 1847                             	.L288:
2466:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		EV_timer = TOUT_LOAD_EV_FAULT(Tab_LoadFault.Data);
 1848                             		.loc 1 2466 0
 1849 0014 FB A2 00 00 00 00       		mov.L	#_Tab_LoadFault, r10
 1850                             		.balign 2,3,1
 1851                             	.L310:
 1852 001a EC AA                   		mov.L	[r10], r10
 1853 001c CD AB 01                		mov.B	1[r10], r11
2467:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		EV_load=TOUT_LOAD_EV_PILOT(Tab_LoadFault.Data);
 1854                             		.loc 1 2467 0
 1855 001f CD A3 06                		mov.B	6[r10], r3
 1856 0022 75 23 7F                		and #0x7f, r3
2471:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	switch ( LoadEVCheck.status)
 1857                             		.loc 1 2471 0
 1858 0025 FB A2 00 00 00 00       		mov.L	#_LoadEVCheck, r10
 1859 002b 58 AA                   		movu.B	[r10], r10
 1860 002d 61 5A                   		cmp	#5, r10
 1861 002f 25 05 38 E1 00          		bgtu	.L290
 1862 0034 FB E2 00 00 00 00       		mov.L	#.L295, r14
 1863 003a FE 6A EA                		mov.L	[r10,r14], r10
 1864                             		
 1865 003d 7F 0A                   	1:jmp	r10
 1866                             		.section	.rodata.FLT_pilotLoadEV_Mgmt,"a",@progbits
 1867                             		.balign 4
 1868                             		.balign 4
 1869                             	.L295:
 1870 0000 00 00 00 3F             		.long .L291
 1871 0004 00 00 00 64             		.long .L292
 1872 0008 00 00 00 C7             		.long .L293
 1873 000c 00 00 00 64             		.long .L292
 1874 0010 00 00 00 C7             		.long .L293
 1875 0014 00 00 01 07             		.long .L294
 1876                             		.section	.text.FLT_pilotLoadEV_Mgmt
 1877                             	.L291:
2475:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)Set_SmallCounter((SWTC_CountersType)SFT_EVCHECK_S_COUNTER, (SWTC_PrescalerType)COUNTERS2_
 1878                             		.loc 1 2475 0
 1879 003f 75 41 24                		mov	#36, r1
 1880 0042 66 12                   		mov	#1, r2
 1881 0044 05 00 00 00             		bsr	_Set_SmallCounter
2476:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ( mode == CHECK_EV_VS_FAULT_CTRL )
 1882                             		.loc 1 2476 0
 1883 0048 5B 77                   		movu.B	r7, r7
 1884 004a 61 27                   		cmp	#2, r7
 1885 004c 21 10                   		bne	.L296
2478:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if (SftPulseWarn.vs_presence_h2o)
 1886                             		.loc 1 2478 0
 1887 004e FB 72 00 00 00 00       		mov.L	#_SftPulseWarn, r7
 1888 0054 CC 77                   		mov.B [r7], r7
 1889 0056 75 27 10                		and #16, r7
 1890 0059 3A D3 00                		beq	.L287
 1891                             		.balign 2,3,5
 1892                             	.L296:
2485:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					LoadEVCheck.status = LOAD_EV_PILOT_1;
 1893                             		.loc 1 2485 0
 1894 005c FB 72 00 00 00 00       		mov.L	#_LoadEVCheck, r7
 1895 0062 2E 60                   		bra	.L312
 1896                             	.L292:
2493:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Run((SWTC_CountersType)SFT_EVCHECK_S_COUNTER);
 1897                             		.loc 1 2493 0
 1898 0064 75 41 24                		mov	#36, r1
 1899 0067 05 00 00 00             		bsr	_SWTC_Run
2495:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ( SWTC_IsExpired((SWTC_CountersType)SFT_EVCHECK_S_COUNTER))
 1900                             		.loc 1 2495 0
 1901 006b 75 41 24                		mov	#36, r1
 1902 006e 05 00 00 00             		bsr	_SWTC_IsExpired
 1903 0072 61 01                   		cmp	#0, r1
 1904 0074 20 48                   		beq	.L299
2498:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					(void)Set_SmallCounter((SWTC_CountersType)SFT_EVCHECK_S_COUNTER, (SWTC_PrescalerType)COUNTERS2
 1905                             		.loc 1 2498 0
 1906 0076 75 41 24                		mov	#36, r1
 1907 0079 66 12                   		mov	#1, r2
 1908 007b 66 B3                   		mov	#11, r3
 1909 007d 05 00 00 00             		bsr	_Set_SmallCounter
2500:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( mode == CHECK_EV_WARN_CTRL )
 1910                             		.loc 1 2500 0
 1911 0081 5B 77                   		movu.B	r7, r7
 1912 0083 FB A2 00 00 00 00       		mov.L	#_LoadEVCheck, r10
 1913 0089 61 17                   		cmp	#1, r7
 1914 008b 21 1A                   		bne	.L300
2502:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						PM_PulseCounter_Reset_Warning(PULSECOUNTER_RESET_BOTH_WARNING); /* Reset di tutti i warning p
 1915                             		.loc 1 2502 0
 1916 008d 66 21                   		mov	#2, r1
 1917 008f 05 00 00 00             		bsr	_PM_PulseCounter_Reset_Warning
2504:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						LoadEVCheck.cnt = TOUT_PULSE_WARN_FOR_EV_PILOT;
 1918                             		.loc 1 2504 0
 1919 0093 FB 72 00 00 00 00       		mov.L	#_Tab_SFT_EV, r7
 1920 0099 EC 77                   		mov.L	[r7], r7
 1921 009b CC 77                   		mov.B	[r7], r7
 1922 009d 75 27 7F                		and #0x7f, r7
 1923 00a0 C7 A7 01                		mov.B	r7, 1[r10]
 1924 00a3 2E 0D                   		bra	.L301
 1925                             	.L300:
2508:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if ( mode != CHECK_EV_VS_FAULT_CTRL)
 1926                             		.loc 1 2508 0
 1927 00a5 61 27                   		cmp	#2, r7
 1928 00a7 15                      		beq	.L302
2510:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							LoadEVCheck.cnt = EV_timer;		/* il tempo da setting è il tempo delle pause per la rilevazio
 1929                             		.loc 1 2510 0
 1930 00a8 C7 AB 01                		mov.B	r11, 1[r10]
 1931 00ab 0D                      		bra	.L301
 1932                             	.L302:
2513:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							LoadEVCheck.cnt = 0;
 1933                             		.loc 1 2513 0
 1934 00ac F9 A4 01 00             		mov.B	#0, 1[r10]
 1935                             		.balign 2,3,5
 1936                             	.L301:
2517:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					LoadEVCheck.status++;
 1937                             		.loc 1 2517 0
 1938 00b0 FB 72 00 00 00 00       		mov.L	#_LoadEVCheck, r7
 1939 00b6 CC 7A                   		mov.B	[r7], r10
 1940 00b8 62 1A                   		add	#1, r10
 1941 00ba C3 7A                   		mov.B	r10, [r7]
 1942                             		.balign 2,3,5
 1943                             	.L299:
2520:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				LoadEVFltReq_New.b= EV_ON;
 1944                             		.loc 1 2520 0
 1945 00bc FB 72 00 00 00 00       		mov.L	#_LoadEVFltReq_New, r7
 1946                             		.balign 2,3,4
 1947                             	.L312:
 1948 00c2 3C 70 01                		mov.B	#1, [r7]
2522:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			break;
 1949                             		.loc 1 2522 0
 1950 00c5 2E 67                   		bra	.L287
 1951                             	.L293:
2526:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					checkEV = FLT_checkLoadEV(mode);
 1952                             		.loc 1 2526 0
 1953 00c7 CF 71                   		mov.B	r7, r1
 1954 00c9 E3 03                   		mov.L	r3, [r0]
 1955 00cb 05 00 00 00             		bsr	_FLT_checkLoadEV
2528:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( checkEV == LOAD_EV_PAUSE_END )
 1956                             		.loc 1 2528 0
 1957 00cf 5B 11                   		movu.B	r1, r1
 1958 00d1 EC 03                   		mov.L	[r0], r3
 1959 00d3 61 21                   		cmp	#2, r1
 1960 00d5 21 23                   		bne	.L303
2531:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if (LoadEVCheck.status == LOAD_EV_PILOT_PAUSE_1)
 1961                             		.loc 1 2531 0
 1962 00d7 FB 72 00 00 00 00       		mov.L	#_LoadEVCheck, r7
 1963 00dd 58 77                   		movu.B	[r7], r7
 1964 00df 61 27                   		cmp	#2, r7
 1965 00e1 21 0B                   		bne	.L304
2534:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							(void)Set_SmallCounter((SWTC_CountersType)SFT_EVCHECK_S_COUNTER, (SWTC_PrescalerType)COUNTER
 1966                             		.loc 1 2534 0
 1967 00e3 75 41 24                		mov	#36, r1
 1968 00e6 66 12                   		mov	#1, r2
 1969 00e8 05 00 00 00             		bsr	_Set_SmallCounter
 1970                             		.balign 2,3,5
 1971                             	.L304:
2537:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						LoadEVCheck.status++;
 1972                             		.loc 1 2537 0
 1973 00ec FB 72 00 00 00 00       		mov.L	#_LoadEVCheck, r7
 1974 00f2 CC 7A                   		mov.B	[r7], r10
 1975 00f4 62 1A                   		add	#1, r10
 1976 00f6 2E 34                   		bra	.L311
 1977                             	.L303:
2539:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					else if ( checkEV == LOAD_EV_OK )
 1978                             		.loc 1 2539 0
 1979 00f8 61 01                   		cmp	#0, r1
 1980 00fa 21 32                   		bne	.L287
2541:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						LoadEVCheck.status = LOAD_EV_PILOT_OK;
 1981                             		.loc 1 2541 0
 1982 00fc FB 72 00 00 00 00       		mov.L	#_LoadEVCheck, r7
 1983 0102 3C 70 06                		mov.B	#6, [r7]
 1984 0105 2E 27                   		bra	.L287
 1985                             	.L294:
2552:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Stop((SWTC_CountersType)SFT_EVCHECK_S_COUNTER);
 1986                             		.loc 1 2552 0
 1987 0107 75 41 24                		mov	#36, r1
2566:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 1988                             		.loc 1 2566 0
 1989 010a 62 40                   		add	#4, r0
 1990 010c 6F 7B                   		popm	r7-r11
2552:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Stop((SWTC_CountersType)SFT_EVCHECK_S_COUNTER);
 1991                             		.loc 1 2552 0
 1992 010e 04 00 00 00             		bra	_SWTC_Stop
 1993                             	.L290:
2557:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Stop((SWTC_CountersType)SFT_EVCHECK_S_COUNTER);
 1994                             		.loc 1 2557 0
 1995 0112 75 41 24                		mov	#36, r1
 1996 0115 05 00 00 00             		bsr	_SWTC_Stop
2558:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ( mode == CHECK_EV_VS_FAULT_CTRL)
 1997                             		.loc 1 2558 0
 1998 0119 5B 77                   		movu.B	r7, r7
 1999 011b 61 27                   		cmp	#2, r7
 2000 011d 21 0F                   		bne	.L287
2560:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					ReadVS_Data.ctrl_active = FALSE;
 2001                             		.loc 1 2560 0
 2002 011f FB 72 00 00 00 00       		mov.L	#_ReadVS_Data, r7
 2003 0125 CC 7A                   		mov.B	[r7], r10
 2004 0127 7A 1A                   		bclr	#1, r10
 2005 0129 03                      		.balign 2,3,1
 2006                             	.L311:
 2007 012a C3 7A                   		mov.B	r10, [r7]
 2008                             		.balign 2,3,2
 2009                             	.L287:
2566:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 2010                             		.loc 1 2566 0
 2011 012c 3F 7B 06                		rtsd	#24, r7-r11
 2012                             	.LFE34:
 2014 012f 03                      		.section	.text.SFT_Timeout_4Loadrestore_Mgmt,"ax",@progbits
 2015                             		.global	_SFT_Timeout_4Loadrestore_Mgmt
 2017                             	_SFT_Timeout_4Loadrestore_Mgmt:
 2018                             	.LFB36:
2662:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2663:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
2664:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  * EX FLT_Pump_Load_Mgmt
2665:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  Gestione timeout di caricamento in dinamico : timeout tra il P.P. statico
2666:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** e il P.P. dinamico, gestione timeout dinamico anche con i sensori virtuali
2667:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** _ gestisce il Ko ripristini JIF_FLAG1_LOAD_RESTORE_KO_POS
2668:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2669:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [out]
2670:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2671:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2672:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return 		JIF_FLAG1_LOAD_RESTORE_KO_POS.
2673:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2674:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.0.0
2675:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date		28/01/14
2676:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author		Emanuela Antognoli
2677:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \note : non segnala nessun fault, setta solo il JIF_FLAG1_LOAD_RESTORE_KO_POS in base al quale i ca
2678:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
2679:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** void SFT_Timeout_4Loadrestore_Mgmt (uint8_t mode)
2680:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 2019                             		.loc 1 2680 0
 2020                             	.LVL93:
2681:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** uint16_t ToutPumpLoad;
2682:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2683:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (mode == FLT_PUMP_LOAD_INIT)
 2021                             		.loc 1 2683 0
 2022 0000 5B 11                   		movu.B	r1, r1
 2023 0002 61 01                   		cmp	#0, r1
 2024 0004 3B A5 00                		bne	.L314
2684:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{	/* gestione in statico con PRESSOSTATO: in statico viene chiamata la funzione sempre con mode= I
2685:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		 in statico , finchè non vede pieno non fa nulla. una volta che vede pieno parte il timer MP_LOA
2686:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		 nell'attiva algoritmi , così come in load restore è sempre EXE*/
2687:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2688:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		/* OCN SENSORI VIRTUALI:
2689:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		 * NELLA GESTIONE DELLA RIGENERE è SEMPRE RICHIAMATO COME init.
2690:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		 * NELLO STATICO e nel DINAMICO  viene richiamato sempre come EXE ( il timeout diventa comune sia
2691:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		 * viene però inizializzato durante la fase di "check della pompa " per  vedere se c'è acqua o 
2692:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		 */
2693:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if (( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) != 0 )||( HWC_Flags.bit.vs_wash_presence ))
 2025                             		.loc 1 2693 0
 2026 0007 FB E2 00 00 00 00       		mov.L	#_GICriteria, r14
 2027 000d CC EE                   		mov.B [r14], r14
 2028 000f 64 1E                   		and #1, r14
 2029 0011 5B E4                   		movu.B	r14, r4
 2030 0013 61 04                   		cmp	#0, r4
 2031 0015 21 15                   		bne	.L315
 2032                             		.loc 1 2693 0 is_stmt 0 discriminator 1
 2033 0017 FB 42 00 00 00 00       		mov.L	#_HWC_Flags, r4
 2034 001d DC 44                   		mov.W	[r4], r4
 2035 001f 75 24 10                		and #16, r4
 2036 0022 5F 44                   		movu.W	r4, r4
 2037 0024 61 04                   		cmp	#0, r4
 2038 0026 3A F8 00                		beq	.L313
 2039 0029 03                      		.balign 2,3,5
 2040                             	.L315:
2694:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{/* pieno pressostato -> init counter  */
2695:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2696:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if ( Pump_Load_Data.init == FALSE )
 2041                             		.loc 1 2696 0 is_stmt 1
 2042 002a FB 42 00 00 00 00       		mov.L	#_Pump_Load_Data, r4
 2043 0030 CC 44                   		mov.B	[r4], r4
 2044 0032 FD 74 C4 01             		tst	#1, r4
 2045 0036 21 65                   		bne	.L317
2697:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{	/* init counter : questa variabile viene inizializzata ad ogni inizio ciclo e ad ogni scarico 
2698:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2699:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if (  HWC_Flags.bit.vs_wash_presence )
 2046                             		.loc 1 2699 0
 2047 0038 FB E2 00 00 00 00       		mov.L	#_HWC_Flags, r14
 2048 003e DC EE                   		mov.W	[r14], r14
 2049 0040 75 2E 10                		and #16, r14
 2050 0043 5F EE                   		movu.W	r14, r14
 2051 0045 61 0E                   		cmp	#0, r14
 2052 0047 20 1A                   		beq	.L318
2700:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{
2701:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					ToutPumpLoad=((Tab_HWCVS_data.DataLenght >3)?(OFFS_W(Tab_HWCVS_data.Data,3)& 0x7FFF):240);
 2053                             		.loc 1 2701 0
 2054 0049 FB E2 00 00 00 00       		mov.L	#_Tab_HWCVS_data, r14
 2055 004f 5D E4 02                		movu.W	4[r14], r4
 2056 0052 61 34                   		cmp	#3, r4
 2057 0054 25 28                   		bleu	.L325
 2058                             		.loc 1 2701 0 is_stmt 0 discriminator 1
 2059 0056 EC EE                   		mov.L	[r14], r14
 2060 0058 DD E2 03                		mov.W	6[r14], r2
 2061 005b 76 22 FF 7F             		and #0x7fff, r2
 2062 005f 2E 21                   		bra	.L319
 2063                             	.L318:
2702:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}else
2703:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{
2704:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( SPV_isAutotestOrTestRunning() == TRUE )
 2064                             		.loc 1 2704 0 is_stmt 1
 2065 0061 05 00 00 00             		bsr	_SPV_isAutotestOrTestRunning
 2066                             	.LVL94:
 2067 0065 61 11                   		cmp	#1, r1
 2068 0067 18                      		bne	.L320
2705:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
2706:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						ToutPumpLoad = OFFS_B(Tab_LoadFault_Special.Data,8);
 2069                             		.loc 1 2706 0
 2070 0068 FB E2 00 00 00 00       		mov.L	#_Tab_LoadFault_Special, r14
 2071 006e 08                      		bra	.L347
 2072                             	.L320:
2707:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}else
2708:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					{
2709:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						ToutPumpLoad = OFFS_B(Tab_LoadFault.Data,8);
 2073                             		.loc 1 2709 0
 2074 006f FB E2 00 00 00 00       		mov.L	#_Tab_LoadFault, r14
 2075 0075 03                      		.balign 2,3,1
 2076                             	.L347:
 2077 0076 EC EE                   		mov.L	[r14], r14
 2078 0078 59 E2 08                		movu.B	8[r14], r2
 2079                             	.LVL95:
 2080 007b 0D                      		bra	.L319
 2081                             	.LVL96:
 2082                             	.L325:
2701:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					ToutPumpLoad=((Tab_HWCVS_data.DataLenght >3)?(OFFS_W(Tab_HWCVS_data.Data,3)& 0x7FFF):240);
 2083                             		.loc 1 2701 0
 2084 007c 75 42 F0                		mov	#0xf0, r2
 2085 007f 03                      		.balign 2,3,2
 2086                             	.L319:
 2087                             	.LVL97:
2710:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					}
2711:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
2712:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_SetMValue((SWTC_CountersType)MP_LOADTIMEOUT_REST_M_COUNTER, (SWTC_MCounterValue)Tout
 2088                             		.loc 1 2712 0
 2089 0080 75 41 2A                		mov	#42, r1
 2090 0083 05 00 00 00             		bsr	_SWTC_SetMValue
 2091                             	.LVL98:
2713:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Stop((SWTC_CountersType)MP_LOADTIMEOUT_REST_M_COUNTER);
 2092                             		.loc 1 2713 0
 2093 0087 75 41 2A                		mov	#42, r1
 2094 008a 05 00 00 00             		bsr	_SWTC_Stop
 2095                             	.LVL99:
2714:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				Pump_Load_Data.init = TRUE;
 2096                             		.loc 1 2714 0
 2097 008e FB E2 00 00 00 00       		mov.L	#_Pump_Load_Data, r14
 2098 0094 CC E4                   		mov.B	[r14], r4
 2099 0096 78 04                   		bset	#0, r4
 2100 0098 38 84 00                		bra	.L348
 2101                             	.L317:
2715:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
2716:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			else
2717:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{	/* counting on */
2718:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) != 0 )
 2102                             		.loc 1 2718 0
 2103 009b 76 2E FF 00             		and #0xff, r14
 2104 009f 20 7F                   		beq	.L313
 2105 00a1 03                      		.balign 2,3,2
 2106                             	.L324:
2719:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{/* con i sensori virtuali il contatore parte solo con elettrovalvola aperta*/
2720:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					(void)SWTC_Run((SWTC_CountersType)MP_LOADTIMEOUT_REST_M_COUNTER);
 2107                             		.loc 1 2720 0
 2108 00a2 75 41 2A                		mov	#42, r1
 2109 00a5 04 00 00 00             		bra	_SWTC_Run
 2110                             	.LVL100:
 2111                             	.L314:
2721:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
2722:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				/* considerare scadere timeout e KO Restore anche in statico ???*/
2723:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
2724:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
2725:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
2726:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	else if (mode == FLT_PUMP_LOAD_EXE)
 2112                             		.loc 1 2726 0
 2113 00a9 61 11                   		cmp	#1, r1
 2114 00ab 21 73                   		bne	.L313
2727:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{	/* gestione in dinamico (Load o Load Restore)*/
2728:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2729:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( Pump_Load_Data.init == TRUE )
 2115                             		.loc 1 2729 0
 2116 00ad FB E2 00 00 00 00       		mov.L	#_Pump_Load_Data, r14
 2117 00b3 CC EE                   		mov.B	[r14], r14
 2118 00b5 FD 74 CE 01             		tst	#1, r14
 2119 00b9 20 65                   		beq	.L313
2730:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{	/* counting ON. Il flag init = FALSE mi garantisce di non entrare accidentalmente
2731:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				nella gestione in dinamico, senza averla inizializzata in statico */
2732:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2733:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if ( ((TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) != 0 )&& (HWC_Flags.bit.vs_wash_presence =
 2120                             		.loc 1 2733 0
 2121 00bb FB E2 00 00 00 00       		mov.L	#_GICriteria, r14
 2122 00c1 CC EE                   		mov.B	[r14], r14
 2123 00c3 FD 74 CE 01             		tst	#1, r14
 2124 00c7 20 13                   		beq	.L321
 2125                             		.loc 1 2733 0 is_stmt 0 discriminator 1
 2126 00c9 FB E2 00 00 00 00       		mov.L	#_HWC_Flags, r14
 2127 00cf DC EE                   		mov.W	[r14], r14
 2128 00d1 75 2E 10                		and #16, r14
 2129 00d4 5F EE                   		movu.W	r14, r14
 2130 00d6 61 0E                   		cmp	#0, r14
 2131 00d8 20 28                   		beq	.L322
 2132                             		.balign 2,3,5
 2133                             	.L321:
2734:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			  ( ( LoadsReq_Old[EV_Pos[LD_WASH_EV_IND]].b == EV_OFF )  &&(HWC_Flags.bit.vs_wash_presence) ) )
 2134                             		.loc 1 2734 0 is_stmt 1 discriminator 2
 2135 00da FB E2 00 00 00 00       		mov.L	#_EV_Pos, r14
 2136 00e0 58 EE                   		movu.B	[r14], r14
2733:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if ( ((TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) != 0 )&& (HWC_Flags.bit.vs_wash_presence =
 2137                             		.loc 1 2733 0 discriminator 2
 2138 00e2 FB 42 00 00 00 00       		mov.L	#_LoadsReq_Old, r4
 2139 00e8 FE CE 4E                		movu.B	[r14,r4], r14
 2140 00eb 61 0E                   		cmp	#0, r14
 2141 00ed 21 1A                   		bne	.L323
 2142                             		.loc 1 2734 0
 2143 00ef FB E2 00 00 00 00       		mov.L	#_HWC_Flags, r14
 2144 00f5 DC EE                   		mov.W	[r14], r14
 2145 00f7 75 2E 10                		and #16, r14
 2146 00fa 5F EE                   		movu.W	r14, r14
 2147 00fc 61 0E                   		cmp	#0, r14
 2148 00fe 11                      		beq	.L323
 2149 00ff 03                      		.balign 2,3,2
 2150                             	.L322:
2735:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{	/* pieno pressostato in dinamico : disabilitazione timer , oppure elettrivalvola chiusa*/
2736:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Stop((SWTC_CountersType)MP_LOADTIMEOUT_REST_M_COUNTER);
 2151                             		.loc 1 2736 0
 2152 0100 75 41 2A                		mov	#42, r1
 2153 0103 04 00 00 00             		bra	_SWTC_Stop
 2154                             	.LVL101:
 2155                             	.L323:
2737:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
2738:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			else
2739:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			{	/* vuoto in dinamico - counting on */
2740:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2741:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ( SWTC_IsExpired((SWTC_CountersType)MP_LOADTIMEOUT_REST_M_COUNTER) )
 2156                             		.loc 1 2741 0
 2157 0107 75 41 2A                		mov	#42, r1
 2158 010a 05 00 00 00             		bsr	_SWTC_IsExpired
 2159                             	.LVL102:
 2160 010e 61 01                   		cmp	#0, r1
 2161 0110 20 92                   		beq	.L324
2742:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{	/* end counting -> flag KO RESTORE */
2743:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2744:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					SETBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS); /* set flag overflow ripristini */
 2162                             		.loc 1 2744 0
 2163 0112 FB E2 00 00 00 00       		mov.L	#_Flags_1, r14
 2164 0118 CC E4                   		mov.B	[r14], r4
 2165 011a 78 04                   		bset #0, r4
 2166                             		.balign 2,3,1
 2167                             	.L348:
 2168 011c C3 E4                   		mov.B	r4, [r14]
 2169                             	.L313:
 2170 011e 02                      		rts
 2171                             	.LFE36:
 2173 011f 03                      		.section	.text.FLT_warningSave,"ax",@progbits
 2174                             		.global	_FLT_warningSave
 2176                             	_FLT_warningSave:
 2177                             	.LFB37:
2745:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
2746:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				else
2747:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				{
2748:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					(void)SWTC_Run((SWTC_CountersType)MP_LOADTIMEOUT_REST_M_COUNTER);
2749:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				}
2750:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			}
2751:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
2752:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
2753:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	 else
2754:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	 {
2755:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	     /* Do nothing */
2756:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	 }
2757:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
2758:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**/
2759:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2760:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2761:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2762:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** /**
2763:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  * questa funzione serve per salvare nella struttura degli warning quello corrispomndente.
2764:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  * Come dea700 , gli warning vegono salvati dopo il tempo di FAULT, mentre al tempo di prefault ven
2765:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  * il last fault dovrebbe essere salvato quando si fa in fault.
2766:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  *
2767:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2768:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2769:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \param [in] 	FltWarning (global)
2770:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2771:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \return 		none
2772:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \warning
2773:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2774:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \notes:
2775:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2776:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \version		1.1.0
2777:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \date 			27/06/2007
2778:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** \author			Marco Quintini
2779:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** */
2780:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** void FLT_warningSave(uint8_t code_To_Add, uint8_t subcode_To_Add, uint8_t where_to_save)
2781:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 2178                             		.loc 1 2781 0
 2179                             	.LVL103:
 2180 0000 6E 7B                   		pushm	r7-r11
 2181                             	.LCFI12:
 2182 0002 60 40                   		sub	#4, r0
 2183                             	.LCFI13:
 2184 0004 CF 17                   		mov.B	r1, r7
 2185 0006 CF 2A                   		mov.B	r2, r10
 2186 0008 CF 3B                   		mov.B	r3, r11
2782:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** sft_fault_codes_t warningCode;
2783:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2784:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	/* Il warning viene salvato nei Last Fault se non Ã¨ attivo l'Autotest */
2785:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if(SPV_isAutotestRunning() == FALSE)
 2187                             		.loc 1 2785 0
 2188 000a 05 00 00 00             		bsr	_SPV_isAutotestRunning
 2189                             	.LVL104:
 2190 000e 61 01                   		cmp	#0, r1
 2191 0010 21 22                   		bne	.L349
 2192                             	.LVL105:
 2193                             	.LBB55:
 2194                             	.LBB56:
2786:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	{
2787:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		warningCode.code = code_To_Add;
 2195                             		.loc 1 2787 0
 2196 0012 5B 72                   		movu.B	r7, r2
2788:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		warningCode.subCode = subcode_To_Add;
 2197                             		.loc 1 2788 0
 2198 0014 5B AA                   		movu.B	r10, r10
 2199 0016 6C 82                   		shll	#8, r2
 2200 0018 57 A2                   		or	r10, r2
2789:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if(where_to_save)
 2201                             		.loc 1 2789 0
 2202 001a 5B BB                   		movu.B	r11, r11
2790:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
2791:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_lastFaultUpdate(warningCode, &MachineStatistics.lastFault[0]);
 2203                             		.loc 1 2791 0
 2204 001c D3 02                   		mov.W	r2, [r0]
2789:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if(where_to_save)
 2205                             		.loc 1 2789 0
 2206 001e 61 0B                   		cmp	#0, r11
 2207 0020 10                      		beq	.L351
 2208                             		.loc 1 2791 0
 2209 0021 FB 22 00 00 00 00       		mov.L	#_MachineStatistics+352, r2
 2210 0027 0F                      		bra	.L354
 2211                             	.L351:
2792:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}else
2793:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		{
2794:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_lastFaultUpdate(warningCode, &MachineStatistics.lastPreFault[0]);
 2212                             		.loc 1 2794 0
 2213 0028 FB 22 00 00 00 00       		mov.L	#_MachineStatistics+367, r2
 2214                             		.balign 2,3,3
 2215                             	.L354:
 2216 002e 05 00 00 00             		bsr	_FLT_lastFaultUpdate
 2217                             	.LVL106:
 2218                             		.balign 2,3,2
 2219                             	.L349:
 2220                             	.LBE56:
 2221                             	.LBE55:
2795:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		}
2796:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	}
2797:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 2222                             		.loc 1 2797 0
 2223 0032 3F 7B 06                		rtsd	#24, r7-r11
 2224                             	.LFE37:
 2226 0035 03                      		.section	.text.FLT_faultManagement,"ax",@progbits
 2227                             		.global	_FLT_faultManagement
 2229                             	_FLT_faultManagement:
 2230                             	.LFB0:
 116:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 2231                             		.loc 1 116 0
 2232 0000 6E 7C                   		pushm	r7-r12
 2233                             	.LCFI14:
 2234                             	.LBB85:
 757:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (TESTBIT (GIValid, (GI_FIRST_CRITERION_BIT + GI_CR_OVFL_IND) ) != 0)
 2235                             		.loc 1 757 0
 2236 0002 FB 72 00 00 00 00       		mov.L	#_GIValid, r7
 2237 0008 DC 77                   		mov.W	[r7], r7
 2238                             	.LBB86:
 2239 000a 64 27                   		and #2, r7
 2240 000c 5F 77                   		movu.W	r7, r7
 2241 000e 61 07                   		cmp	#0, r7
 2242 0010 20 1F                   		beq	.L356
 2243                             	.LBE86:
 760:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( TESTBIT (GICriteria,GI_CR_OVFL_IND) != 0 )
 2244                             		.loc 1 760 0
 2245 0012 FB 72 00 00 00 00       		mov.L	#_GICriteria, r7
 2246                             	.LBB87:
 2247 0018 CC 73                   		mov.B [r7], r3
 2248 001a 64 23                   		and #2, r3
 762:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_manageFault(FLT_CODE_OVERFLOW, FLT_SUBCODE_OVERFLOW);
 2249                             		.loc 1 762 0
 2250 001c 66 11                   		mov	#1, r1
 2251 001e CF 12                   		mov.B	r1, r2
 760:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( TESTBIT (GICriteria,GI_CR_OVFL_IND) != 0 )
 2252                             		.loc 1 760 0
 2253 0020 61 03                   		cmp	#0, r3
 2254 0022 17                      		beq	.L357
 762:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_manageFault(FLT_CODE_OVERFLOW, FLT_SUBCODE_OVERFLOW);
 2255                             		.loc 1 762 0
 2256 0023 05 00 00 00             		bsr	_FLT_manageFault
 2257 0027 2E 19                   		bra	.L358
 2258                             	.L357:
 766:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc( FLT_CODE_OVERFLOW, FLT_SUBCODE_OVERFLOW,(uint16_t)TOUT_RESET_PREFAULT 
 2259                             		.loc 1 766 0
 2260 0029 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
 2261 002d 2E 13                   		bra	.L358
 2262                             	.L356:
 771:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if( FLT_checkForCurrentFault( FLT_CODE_OVERFLOW, FLT_SUBCODE_OVERFLOW) )
 2263                             		.loc 1 771 0
 2264 002f 66 11                   		mov	#1, r1
 2265 0031 CF 12                   		mov.B	r1, r2
 2266 0033 05 00 00 00             		bsr	_FLT_checkForCurrentFault
 2267 0037 61 01                   		cmp	#0, r1
 2268 0039 17                      		beq	.L358
 773:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			SWTC_Stop((SWTC_CountersType)MAIN_FAULT_MGMT_COUNTER_M);
 2269                             		.loc 1 773 0
 2270 003a 66 31                   		mov	#3, r1
 2271 003c 05 00 00 00             		bsr	_SWTC_Stop
 2272                             		.balign 2,3,5
 2273                             	.L358:
 2274                             	.LBE87:
 778:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ( TESTBIT(FltGICriteria,GI_CR_OVFL_IND) )
 2275                             		.loc 1 778 0
 2276 0040 FB 72 00 00 00 00       		mov.L	#_FltGICriteria, r7
 2277                             	.LBB88:
 2278 0046 CC 73                   		mov.B [r7], r3
 2279 0048 64 23                   		and #2, r3
 781:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_manageFault(FLT_CODE_MAIN_BOARD,FLT_SUBCODE_OVERFLOW_OUT_OF_RANGE);
 2280                             		.loc 1 781 0
 2281 004a 66 D1                   		mov	#13, r1
 2282 004c 75 42 30                		mov	#48, r2
 778:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ( TESTBIT(FltGICriteria,GI_CR_OVFL_IND) )
 2283                             		.loc 1 778 0
 2284 004f 61 03                   		cmp	#0, r3
 2285 0051 16                      		beq	.L359
 781:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_manageFault(FLT_CODE_MAIN_BOARD,FLT_SUBCODE_OVERFLOW_OUT_OF_RANGE);
 2286                             		.loc 1 781 0
 2287 0052 05 00 00 00             		bsr	_FLT_manageFault
 2288 0056 0E                      		bra	.L360
 2289                             	.L359:
 786:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_ResetFaultDetectProc( FLT_CODE_MAIN_BOARD, FLT_SUBCODE_OVERFLOW_OUT_OF_RANGE,(uint16_t)TOUT_R
 2290                             		.loc 1 786 0
 2291 0057 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
 2292 005b 03                      		.balign 2,3,5
 2293                             	.L360:
 2294                             	.LBE88:
 2295                             	.LBE85:
 2296                             	.LBB89:
 2297                             	.LBB90:
 649:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	switch (Consistency_Current[Res_Pos[LD_WASH_RES_IND]])
 2298                             		.loc 1 649 0
 2299 005c FB 72 00 00 00 00       		mov.L	#_Res_Pos, r7
 2300 0062 58 77                   		movu.B	[r7], r7
 2301 0064 FB A2 00 00 00 00       		mov.L	#_Consistency_Current, r10
 2302 006a FE C7 A7                		movu.B	[r7,r10], r7
 2303 006d 61 C7                   		cmp	#12, r7
 2304 006f 25 05 38 9B 00          		bgtu	.L361
 2305 0074 FB A2 00 00 00 00       		mov.L	#.L366, r10
 2306 007a FE 67 A7                		mov.L	[r7,r10], r7
 2307                             		
 2308 007d 7F 07                   	1:jmp	r7
 2309                             		.section	.rodata.FLT_faultManagement,"a",@progbits
 2310                             		.balign 4
 2311                             		.balign 4
 2312                             	.L366:
 2313 0000 00 00 00 7F             		.long .L362
 2314 0004 00 00 00 8F             		.long .L363
 2315 0008 00 00 00 8F             		.long .L363
 2316 000c 00 00 00 8F             		.long .L363
 2317 0010 00 00 01 0C             		.long .L361
 2318 0014 00 00 00 E7             		.long .L364
 2319 0018 00 00 01 0C             		.long .L361
 2320 001c 00 00 01 0C             		.long .L361
 2321 0020 00 00 00 F6             		.long .L365
 2322 0024 00 00 00 8F             		.long .L363
 2323 0028 00 00 00 8F             		.long .L363
 2324 002c 00 00 01 0C             		.long .L361
 2325 0030 00 00 00 8F             		.long .L363
 2326                             		.section	.text.FLT_faultManagement
 2327                             	.L362:
 654:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_Reset_Circuit_Resistor_Fault();
 2328                             		.loc 1 654 0
 2329 007f 05 00 00 00             		bsr	_FLT_Reset_Circuit_Resistor_Fault
 656:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc( FLT_CODE_RES_OPEN, FLT_SUBCODE_RES_OPEN,(uint16_t)TOUT_RESET_PREFAULT 
 2330                             		.loc 1 656 0
 2331 0083 66 A1                   		mov	#10, r1
 2332 0085 66 12                   		mov	#1, r2
 2333 0087 66 03                   		mov	#0, r3
 2334 0089 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
 2335 008d 2E 7F                   		bra	.L361
 2336                             	.L363:
 667:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc( FLT_CODE_RES_OPEN, FLT_SUBCODE_RES_OPEN,(uint16_t)TOUT_RESET_PREFAULT 
 2337                             		.loc 1 667 0
 2338 008f 66 A1                   		mov	#10, r1
 2339 0091 66 12                   		mov	#1, r2
 2340 0093 66 03                   		mov	#0, r3
 2341 0095 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
 669:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			subcode = FLT_Res_Get_Subcode((Consistency_Current[Res_Pos[LD_WASH_RES_IND]] & 0x07));
 2342                             		.loc 1 669 0
 2343 0099 FB 72 00 00 00 00       		mov.L	#_Res_Pos, r7
 2344 009f 58 77                   		movu.B	[r7], r7
 2345 00a1 FB A2 00 00 00 00       		mov.L	#_Consistency_Current, r10
 2346 00a7 FE 47 A7                		mov.B	[r7,r10], r7
 2347 00aa 64 77                   		and #7, r7
 2348 00ac 71 7A FE                		add	#-2, r7, r10
 2349 00af 5B A7                   		movu.B	r10, r7
 2350 00b1 61 27                   		cmp	#2, r7
 2351 00b3 24 0C                   		bgtu	.L479
 2352 00b5 FB A2 00 00 00 00       		mov.L	#_CSWTCH.87, r10
 2353 00bb FE 47 AA                		mov.B	[r7,r10], r10
 2354 00be 0C                      		bra	.L367
 2355                             	.L479:
 2356 00bf 66 4A                   		mov	#4, r10
 2357 00c1 03                      		.balign 2,3,1
 2358                             	.L367:
 670:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if (( FLT_checkForCurrentFault( FLT_CODE_MAIN_BOARD, subcode)==FALSE)&& (FLT_IsCircuit_Resistor_
 2359                             		.loc 1 670 0
 2360 00c2 66 D1                   		mov	#13, r1
 2361 00c4 CF A2                   		mov.B	r10, r2
 2362 00c6 05 00 00 00             		bsr	_FLT_checkForCurrentFault
 2363 00ca 61 01                   		cmp	#0, r1
 2364 00cc 21 16                   		bne	.L369
 2365                             	.LBB91:
 2366                             	.LBB92:
 739:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ((FaultMgmt_Data[0].faultCodes.code = FLT_CODE_MAIN_BOARD) &&
 2367                             		.loc 1 739 0
 2368 00ce FB 72 00 00 00 00       		mov.L	#_FaultMgmt_Data, r7
 2369 00d4 3C 70 0D                		mov.B	#13, [r7]
 2370 00d7 59 7B 01                		movu.B	1[r7], r11
 2371 00da 61 4B                   		cmp	#4, r11
 2372 00dc 24 05 38 72 0A          		bleu	.L370
 2373 00e1 03                      		.balign 2,3,1
 2374                             	.L369:
 2375                             	.LBE92:
 2376                             	.LBE91:
 677:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_manageFault(FLT_CODE_MAIN_BOARD,subcode);
 2377                             		.loc 1 677 0
 2378 00e2 66 D1                   		mov	#13, r1
 2379 00e4 CF A2                   		mov.B	r10, r2
 2380 00e6 0A                      		bra	.L593
 2381                             	.L364:
 681:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_Reset_Circuit_Resistor_Fault();
 2382                             		.loc 1 681 0
 2383 00e7 05 00 00 00             		bsr	_FLT_Reset_Circuit_Resistor_Fault
 683:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_manageFault(FLT_CODE_RES_OPEN,FLT_SUBCODE_RES_OPEN);
 2384                             		.loc 1 683 0
 2385 00eb 66 A1                   		mov	#10, r1
 2386 00ed 66 12                   		mov	#1, r2
 2387 00ef 03                      		.balign 2,3,3
 2388                             	.L593:
 2389 00f0 05 00 00 00             		bsr	_FLT_manageFault
 2390 00f4 2E 18                   		bra	.L361
 2391                             	.L365:
 688:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_Reset_Circuit_Resistor_Fault();
 2392                             		.loc 1 688 0
 2393 00f6 05 00 00 00             		bsr	_FLT_Reset_Circuit_Resistor_Fault
 691:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if (FLT_checkForCurrentFault( FLT_CODE_RES_OPEN, FLT_SUBCODE_RES_OPEN)	)
 2394                             		.loc 1 691 0
 2395 00fa 66 A1                   		mov	#10, r1
 2396 00fc 66 12                   		mov	#1, r2
 2397 00fe 05 00 00 00             		bsr	_FLT_checkForCurrentFault
 2398 0102 61 01                   		cmp	#0, r1
 2399 0104 10                      		beq	.L361
 693:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Stop((SWTC_CountersType)MAIN_FAULT_MGMT_COUNTER_M);
 2400                             		.loc 1 693 0
 2401 0105 66 31                   		mov	#3, r1
 2402 0107 05 00 00 00             		bsr	_SWTC_Stop
 2403 010b 03                      		.balign 2,3,5
 2404                             	.L361:
 2405                             	.LBE90:
 2406                             	.LBE89:
 2407                             	.LBB94:
 807:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ((TESTBIT(FltFlagsKO,WARNING_DRAIN_PREKO) == TRUE) ||(TESTBIT(FltFlagsKO,WARNING_DRAIN_KO) == T
 2408                             		.loc 1 807 0
 2409 010c FB 72 00 00 00 00       		mov.L	#_FltFlagsKO, r7
 2410 0112 DC 77                   		mov.W	[r7], r7
 2411                             	.LBB95:
 2412 0114 FD 74 C7 01             		tst	#1, r7
 2413 0118 12                      		beq	.L372
 810:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_manageFault(FLT_CODE_DRAIN,FLT_SUBCODE_DRAIN);
 2414                             		.loc 1 810 0
 2415 0119 66 31                   		mov	#3, r1
 2416 011b 66 12                   		mov	#1, r2
 2417 011d 05 00 00 00             		bsr	_FLT_manageFault
 2418 0121 03                      		.balign 2,3,1
 2419                             	.L372:
 814:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (FLT_checkForCurrentFault( FLT_CODE_DRAIN, FLT_SUBCODE_DRAIN)==TRUE)
 2420                             		.loc 1 814 0
 2421 0122 66 31                   		mov	#3, r1
 2422 0124 66 12                   		mov	#1, r2
 2423 0126 05 00 00 00             		bsr	_FLT_checkForCurrentFault
 2424 012a 61 11                   		cmp	#1, r1
 2425 012c 21 26                   		bne	.L373
 816:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( FaultMgmt_Data[0].step == PREFAULT_STEP)
 2426                             		.loc 1 816 0
 2427 012e FB 72 00 00 00 00       		mov.L	#_FaultMgmt_Data, r7
 2428 0134 CD 7A 02                		mov.B	2[r7], r10
 2429 0137 75 2A 7F                		and #0x7f, r10
 2430 013a FB 72 00 00 00 00       		mov.L	#_FltFlagsKO, r7
 2431 0140 61 3A                   		cmp	#3, r10
 2432 0142 1E                      		bne	.L374
 818:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			CLRBIT(FltFlagsKO,WARNING_DRAIN_PREKO);
 2433                             		.loc 1 818 0
 2434 0143 DC 7A                   		mov.W	[r7], r10
 2435 0145 7A 1A                   		bclr #1, r10
 2436 0147 09                      		bra	.L594
 2437                             	.L374:
 821:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( FaultMgmt_Data[0].step == FAULT_STEP)
 2438                             		.loc 1 821 0
 2439 0148 61 4A                   		cmp	#4, r10
 2440 014a 18                      		bne	.L373
 823:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			CLRBIT(FltFlagsKO,WARNING_DRAIN_KO);
 2441                             		.loc 1 823 0
 2442 014b DC 7A                   		mov.W	[r7], r10
 2443 014d 7A 0A                   		bclr #0, r10
 2444 014f 03                      		.balign 2,3,1
 2445                             	.L594:
 2446 0150 D3 7A                   		mov.W	r10, [r7]
 2447                             		.balign 2,3,5
 2448                             	.L373:
 2449                             	.LBE95:
 2450                             	.LBE94:
 2451                             	.LBB96:
 2452                             	.LBB97:
 846:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ( FltGITemp != 0 )
 2453                             		.loc 1 846 0
 2454 0152 FB 72 00 00 00 00       		mov.L	#_FltGITemp, r7
 2455 0158 CC 72                   		mov.B	[r7], r2
 2456 015a 5B 27                   		movu.B	r2, r7
 2457 015c 61 07                   		cmp	#0, r7
 2458 015e 20 1E                   		beq	.L375
 848:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( (Interpreter_Data[0].completeLabel.s.label == LBL_RUN) || (Interpreter_Data[0].completeLabel
 2459                             		.loc 1 848 0
 2460 0160 FB 72 00 00 00 00       		mov.L	#_Interpreter_Data, r7
 2461 0166 CC 77                   		mov.B	[r7], r7
 2462 0168 64 F7                   		and #15, r7
 850:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_manageFault(FLT_CODE_PROBE,FltGITemp);
 2463                             		.loc 1 850 0
 2464 016a 66 41                   		mov	#4, r1
 848:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( (Interpreter_Data[0].completeLabel.s.label == LBL_RUN) || (Interpreter_Data[0].completeLabel
 2465                             		.loc 1 848 0
 2466 016c 61 17                   		cmp	#1, r7
 2467 016e 14                      		beq	.L376
 2468 016f 61 47                   		cmp	#4, r7
 2469 0171 1F                      		bne	.L377
 2470                             		.balign 2,3,3
 2471                             	.L376:
 850:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_manageFault(FLT_CODE_PROBE,FltGITemp);
 2472                             		.loc 1 850 0
 2473 0172 05 00 00 00             		bsr	_FLT_manageFault
 2474 0176 2E 1A                   		bra	.L378
 2475                             	.L377:
 853:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc( FLT_CODE_PROBE, FltGITemp,(uint16_t)TOUT_RESET_PREFAULT );
 2476                             		.loc 1 853 0
 2477 0178 66 03                   		mov	#0, r3
 2478 017a 2E 12                   		bra	.L595
 2479                             	.L375:
 857:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_ResetFaultDetectProc( FLT_CODE_PROBE, FLT_SUBCODE_PROBE_CC,(uint16_t)TOUT_RESET_PREFAULT );
 2480                             		.loc 1 857 0
 2481 017c 66 41                   		mov	#4, r1
 2482 017e 66 12                   		mov	#1, r2
 2483 0180 DF 73                   		mov.W	r7, r3
 2484 0182 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
 858:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_ResetFaultDetectProc( FLT_CODE_PROBE,  FLT_SUBCODE_PROBE_CA,(uint16_t)TOUT_RESET_PREFAULT );
 2485                             		.loc 1 858 0
 2486 0186 66 41                   		mov	#4, r1
 2487 0188 66 22                   		mov	#2, r2
 2488 018a DF 73                   		mov.W	r7, r3
 2489                             		.balign 2,3,3
 2490                             	.L595:
 2491 018c 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
 2492                             		.balign 2,3,5
 2493                             	.L378:
 2494                             	.LBE97:
 2495                             	.LBE96:
 2496                             	.LBB98:
1822:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ( TESTBIT(FltGICriteria,GI_CR_DOOR_IND) )
 2497                             		.loc 1 1822 0
 2498 0190 FB 72 00 00 00 00       		mov.L	#_FltGICriteria, r7
 2499                             	.LBB99:
 2500 0196 CC 73                   		mov.B [r7], r3
 2501 0198 64 43                   		and #4, r3
1825:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_manageFault(FLT_CODE_MAIN_BOARD,FLT_SUBCODE_DOOR_OUT_OF_RANGE);
 2502                             		.loc 1 1825 0
 2503 019a 66 D1                   		mov	#13, r1
 2504 019c 75 42 10                		mov	#16, r2
1822:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ( TESTBIT(FltGICriteria,GI_CR_DOOR_IND) )
 2505                             		.loc 1 1822 0
 2506 019f 61 03                   		cmp	#0, r3
 2507 01a1 16                      		beq	.L379
1825:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_manageFault(FLT_CODE_MAIN_BOARD,FLT_SUBCODE_DOOR_OUT_OF_RANGE);
 2508                             		.loc 1 1825 0
 2509 01a2 05 00 00 00             		bsr	_FLT_manageFault
 2510 01a6 0E                      		bra	.L380
 2511                             	.L379:
1830:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_ResetFaultDetectProc( FLT_CODE_MAIN_BOARD, FLT_SUBCODE_DOOR_OUT_OF_RANGE,(uint16_t)TOUT_RESET
 2512                             		.loc 1 1830 0
 2513 01a7 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
 2514 01ab 03                      		.balign 2,3,5
 2515                             	.L380:
 2516                             	.LBE99:
 2517                             	.LBE98:
 2518                             	.LBB100:
 2519                             	.LBB101:
 876:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( Interpreter_Data[0].ZC_not_good  )
 2520                             		.loc 1 876 0
 2521 01ac FB 72 00 00 00 00       		mov.L	#_Interpreter_Data, r7
 2522 01b2 89 73                   		mov.B 4[r7], r3
 2523 01b4 75 23 10                		and #16, r3
 878:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_manageFault(FLT_CODE_MAIN_BOARD,FLT_SUBCODE_ZC_NOT_GOOD);
 2524                             		.loc 1 878 0
 2525 01b7 66 D1                   		mov	#13, r1
 2526 01b9 75 42 50                		mov	#0x50, r2
 876:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( Interpreter_Data[0].ZC_not_good  )
 2527                             		.loc 1 876 0
 2528 01bc 61 03                   		cmp	#0, r3
 2529 01be 16                      		beq	.L381
 878:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_manageFault(FLT_CODE_MAIN_BOARD,FLT_SUBCODE_ZC_NOT_GOOD);
 2530                             		.loc 1 878 0
 2531 01bf 05 00 00 00             		bsr	_FLT_manageFault
 2532 01c3 0D                      		bra	.L382
 2533                             	.L381:
 883:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_ResetFaultDetectProc( FLT_CODE_MAIN_BOARD, FLT_SUBCODE_ZC_NOT_GOOD,(uint16_t)TOUT_RESET_PREFA
 2534                             		.loc 1 883 0
 2535 01c4 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
 2536                             		.balign 2,3,5
 2537                             	.L382:
 2538                             	.LBE101:
 2539                             	.LBE100:
 138:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c ****  	if( (( HWC_Flags.bit.bldc1 ) || ( HWC_Flags.bit.bldc_drain ))
 2540                             		.loc 1 138 0
 2541 01c8 FB 72 00 00 00 00       		mov.L	#_HWC_Flags, r7
 2542 01ce DC 77                   		mov.W	[r7], r7
 2543 01d0 76 27 00 42             		and	#0x4200, r7
 2544 01d4 20 16                   		beq	.L383
 140:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	 	( RegDev_Pos[LD_KILL_DSP_REG_IND] != NO_LD_POS ) )
 2545                             		.loc 1 140 0
 2546 01d6 FB 72 00 00 00 00       		mov.L	#_RegDev_Pos, r7
 139:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		&&
 2547                             		.loc 1 139 0
 2548 01dc B1 F7                   		movu.B	6[r7], r7
 2549 01de 75 57 FF                		cmp	#0xff, r7
 2550 01e1 11                      		beq	.L383
 149:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_bldcFaultMgmt();
 2551                             		.loc 1 149 0
 2552 01e2 05 00 00 00             		bsr	_FLT_bldcFaultMgmt
 156:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_bldcFaultLoadMgmt();
 2553                             		.loc 1 156 0
 2554 01e6 05 00 00 00             		bsr	_FLT_bldcFaultLoadMgmt
 2555                             		.balign 2,3,5
 2556                             	.L383:
 162:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( Interpreter_Data[0].completeLabel.s.label != LBL_PAUSE )
 2557                             		.loc 1 162 0
 2558 01ea FB 72 00 00 00 00       		mov.L	#_Interpreter_Data, r7
 2559 01f0 CC 77                   		mov.B	[r7], r7
 2560 01f2 64 F7                   		and #15, r7
 2561 01f4 61 47                   		cmp	#4, r7
 2562 01f6 3A A0 02                		beq	.L384
 2563                             	.LBB102:
 2564                             	.LBB103:
1584:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( SPV_isAutotestOrTestRunning() )
 2565                             		.loc 1 1584 0
 2566 01f9 05 00 00 00             		bsr	_SPV_isAutotestOrTestRunning
 2567 01fd 61 01                   		cmp	#0, r1
 2568 01ff 20 14                   		beq	.L385
1586:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		ExtDevFaultParams= Tab_HeatFault_Special.Data;
 2569                             		.loc 1 1586 0
 2570 0201 FB 72 00 00 00 00       		mov.L	#_Tab_HeatFault_Special, r7
 2571 0207 EC 77                   		mov.L	[r7], r7
1587:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		ExtDevFaultParams_1 = Tab_ExtDevFault_Special.Data;
 2572                             		.loc 1 1587 0
 2573 0209 FB A2 00 00 00 00       		mov.L	#_Tab_ExtDevFault_Special, r10
 2574 020f EC AB                   		mov.L	[r10], r11
 2575 0211 2E 0D                   		bra	.L386
 2576                             	.L385:
1592:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		ExtDevFaultParams_1 = ExtDevFaultParams=Tab_ExtDevFault.Data;
 2577                             		.loc 1 1592 0
 2578 0213 FB 72 00 00 00 00       		mov.L	#_Tab_ExtDevFault, r7
 2579 0219 EC 77                   		mov.L	[r7], r7
 2580 021b EF 7B                   		mov.L	r7, r11
 2581 021d 03                      		.balign 2,3,5
 2582                             	.L386:
1595:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ( FltHeatToutData.uP_exe  == FALSE )
 2583                             		.loc 1 1595 0
 2584 021e FB C2 00 00 00 00       		mov.L	#_FltHeatToutData, r12
 2585 0224 CC CA                   		mov.B [r12], r10
 2586 0226 76 2A 80 00             		and #0x80, r10
 2587 022a 21 48                   		bne	.L388
1600:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_ResetFaultDetectProc(FLT_CODE_PRESS_SWITCH, FLT_SUBCODE_PRESS_SWITCH_HEAT, (uint16_t) TOUT_RE
 2588                             		.loc 1 1600 0
 2589 022c 66 51                   		mov	#5, r1
 2590 022e 66 22                   		mov	#2, r2
 2591 0230 DF A3                   		mov.W	r10, r3
 2592 0232 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
1601:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FltHeatToutData.state = FLT_HEAT_TOUT_DISABLE;
 2593                             		.loc 1 1601 0
 2594 0236 CC CE                   		mov.B	[r12], r14
 2595 0238 75 2E 80                		and #0xffffff80, r14
 2596 023b C3 CE                   		mov.B	r14, [r12]
1605:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		CLRBIT(FltFlagsKO,FLAG_BLDC_PRESS_SWITCH);
 2597                             		.loc 1 1605 0
 2598 023d FB C2 00 00 00 00       		mov.L	#_FltFlagsKO, r12
 2599 0243 DC CE                   		mov.W	[r12], r14
 2600 0245 75 2E 87                		and #0xffffff87, r14
 2601 0248 D3 CE                   		mov.W	r14, [r12]
1606:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if(SPV_isAutotestRunning())
 2602                             		.loc 1 1606 0
 2603 024a 05 00 00 00             		bsr	_SPV_isAutotestRunning
 2604 024e 61 01                   		cmp	#0, r1
 2605 0250 20 22                   		beq	.L388
1608:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc(FLT_CODE_HEAT_TOUT,FLT_SUBCODE_HEAT_TOUT,(uint16_t)TOUT_RESET_PREFAULT 
 2606                             		.loc 1 1608 0
 2607 0252 66 81                   		mov	#8, r1
 2608 0254 66 12                   		mov	#1, r2
 2609 0256 DF A3                   		mov.W	r10, r3
 2610 0258 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
1609:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc(FLT_CODE_MAIN_BOARD,FLT_SUBCODE_BLDC_UNDER_VOLTAGE,(uint16_t)TOUT_RESET
 2611                             		.loc 1 1609 0
 2612 025c 66 D1                   		mov	#13, r1
 2613 025e 75 42 40                		mov	#64, r2
 2614 0261 DF A3                   		mov.W	r10, r3
 2615 0263 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
1610:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc(FLT_CODE_MAIN_BOARD,FLT_SUBCODE_BLDC_OVERHEATING,(uint16_t)TOUT_RESET_P
 2616                             		.loc 1 1610 0
 2617 0267 66 D1                   		mov	#13, r1
 2618 0269 FB 26 88                		mov	#0xffffff88, r2
 2619 026c DF A3                   		mov.W	r10, r3
 2620 026e 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
 2621                             		.balign 2,3,5
 2622                             	.L388:
1617:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	switch (FltHeatToutData.state )
 2623                             		.loc 1 1617 0
 2624 0272 FB A2 00 00 00 00       		mov.L	#_FltHeatToutData, r10
 2625 0278 CC AE                   		mov.B	[r10], r14
 2626 027a 75 2E 7F                		and #0x7f, r14
 2627 027d 61 1E                   		cmp	#1, r14
 2628 027f 20 15                   		beq	.L392
 2629 0281 2A 0A                   		bgt	.L394
 2630 0283 61 0E                   		cmp	#0, r14
 2631 0285 3A FE 01                		beq	.L391
 2632 0288 38 02 02                		bra	.L390
 2633                             	.L394:
 2634 028b 61 3E                   		cmp	#3, r14
 2635 028d 2B 05 38 FB 01          		bgt	.L390
 2636 0292 2E 22                   		bra	.L591
 2637                             	.L392:
1621:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			(void)SWTC_SetMValue((SWTC_CountersType)FLT_HEATTOUT_M_COUNTER, (SWTC_MCounterValue)(TOUT_HEAT_P
 2638                             		.loc 1 1621 0
 2639 0294 B1 72                   		movu.B	4[r7], r2
 2640 0296 75 41 26                		mov	#38, r1
 2641 0299 05 00 00 00             		bsr	_SWTC_SetMValue
1632:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			(void)SWTC_SetMValue((SWTC_CountersType)FLT_UNDER_VOLTAGE_RES_OFF_M_COUNTER, (SWTC_MCounterValue
 2642                             		.loc 1 1632 0
 2643 029d 75 41 27                		mov	#39, r1
 2644 02a0 98 FA                   		mov.W	6[r7], r2
 2645 02a2 05 00 00 00             		bsr	_SWTC_SetMValue
1634:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			(void)SWTC_SetMValue((SWTC_CountersType)FLT_OVERHEATING_RES_OFF_M_COUNTER, (SWTC_MCounterValue)0
 2646                             		.loc 1 1634 0
 2647 02a6 75 41 28                		mov	#40, r1
 2648 02a9 FB 2A FF 7F             		mov	#0x7fff, r2
 2649 02ad 05 00 00 00             		bsr	_SWTC_SetMValue
 2650 02b1 38 65 01                		bra	.L598
 2651                             	.L591:
1643:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if ( uPDoorStatus == UP_DOOR_WAIT )
 2652                             		.loc 1 1643 0
 2653 02b4 FB C2 00 00 00 00       		mov.L	#_uPDoorStatus, r12
 2654 02ba 58 CC                   		movu.B	[r12], r12
1648:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Stop((SWTC_CountersType)FLT_HEATTOUT_M_COUNTER);
 2655                             		.loc 1 1648 0
 2656 02bc 75 41 26                		mov	#38, r1
1643:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if ( uPDoorStatus == UP_DOOR_WAIT )
 2657                             		.loc 1 1643 0
 2658 02bf 61 0C                   		cmp	#0, r12
 2659 02c1 1C                      		bne	.L395
 2660 02c2 38 C4 01                		bra	.L599
 2661                             	.L395:
1655:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Run((SWTC_CountersType)FLT_HEATTOUT_M_COUNTER);
 2662                             		.loc 1 1655 0
 2663 02c5 05 00 00 00             		bsr	_SWTC_Run
1658:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if( SWTC_IsExpired((SWTC_CountersType)FLT_HEATTOUT_M_COUNTER) )
 2664                             		.loc 1 1658 0
 2665 02c9 75 41 26                		mov	#38, r1
 2666 02cc 05 00 00 00             		bsr	_SWTC_IsExpired
 2667 02d0 61 01                   		cmp	#0, r1
 2668 02d2 3A 55 01                		beq	.L396
1660:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					(void)SWTC_SetMValue((SWTC_CountersType)FLT_HEATTOUT_M_COUNTER, (SWTC_MCounterValue)(TOUT_HEAT
 2669                             		.loc 1 1660 0
 2670 02d5 B0 7A                   		movu.B	1[r7], r2
 2671 02d7 75 41 26                		mov	#38, r1
 2672 02da 05 00 00 00             		bsr	_SWTC_SetMValue
1662:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if( SWTC_IsExpired((SWTC_CountersType)FLT_UNDER_VOLTAGE_RES_OFF_M_COUNTER) )
 2673                             		.loc 1 1662 0
 2674 02de 75 41 27                		mov	#39, r1
 2675 02e1 05 00 00 00             		bsr	_SWTC_IsExpired
 2676 02e5 71 17 00                		add	#0, r1, r7
 2677 02e8 20 45                   		beq	.L397
1664:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						(void)SWTC_SetMValue((SWTC_CountersType)FLT_UNDER_VOLTAGE_RES_OFF_M_COUNTER, (SWTC_MCounterVa
 2678                             		.loc 1 1664 0
 2679 02ea 75 41 27                		mov	#39, r1
 2680 02ed DD B2 04                		mov.W	8[r11], r2
 2681 02f0 05 00 00 00             		bsr	_SWTC_SetMValue
1665:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if (FltHeatToutData.state == FLT_HEAT_TOUT_EXE_F)
 2682                             		.loc 1 1665 0
 2683 02f4 CC A7                   		mov.B	[r10], r7
 2684 02f6 75 27 7F                		and #0x7f, r7
 2685 02f9 61 37                   		cmp	#3, r7
 2686 02fb 21 12                   		bne	.L398
1668:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							SETBIT(Flags_3,JIF_FLAG3_WASH_UNDERVOLTAGE_WARN);
 2687                             		.loc 1 1668 0
 2688 02fd FB 72 00 00 00 00       		mov.L	#_Flags_3, r7
 2689 0303 F0 70                   		bset #0, [r7].B
1669:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							FLT_warningSave(FLT_CODE_MAIN_BOARD, FLT_SUBCODE_BLDC_UNDER_VOLTAGE,WRN_FAULT);
 2690                             		.loc 1 1669 0
 2691 0305 66 D1                   		mov	#13, r1
 2692 0307 75 42 40                		mov	#64, r2
 2693 030a 66 13                   		mov	#1, r3
 2694 030c 08                      		bra	.L596
 2695                             	.L398:
1672:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							FLT_warningSave(FLT_CODE_MAIN_BOARD, FLT_SUBCODE_BLDC_UNDER_VOLTAGE,WRN_PREFAULT);
 2696                             		.loc 1 1672 0
 2697 030d 66 D1                   		mov	#13, r1
 2698 030f 75 42 40                		mov	#64, r2
 2699 0312 66 03                   		mov	#0, r3
 2700                             		.balign 2,3,3
 2701                             	.L596:
 2702 0314 05 00 00 00             		bsr	_FLT_warningSave
1674:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						SETBIT(FltFlagsKO,FLAG_BLDC_UNDVL);
 2703                             		.loc 1 1674 0
 2704 0318 FB 72 00 00 00 00       		mov.L	#_FltFlagsKO, r7
 2705 031e DC 7A                   		mov.W	[r7], r10
 2706 0320 78 3A                   		bset #3, r10
 2707 0322 D3 7A                   		mov.W	r10, [r7]
1675:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_Update_warning_proc(FLAG_BLDC_UNDVL,FLT_CODE_MAIN_BOARD,FLT_SUBCODE_BLDC_UNDER_VOLTAGE);
 2708                             		.loc 1 1675 0
 2709 0324 66 31                   		mov	#3, r1
 2710 0326 66 D2                   		mov	#13, r2
 2711 0328 75 43 40                		mov	#64, r3
 2712 032b 2E 47                   		bra	.L597
 2713                             	.L397:
1681:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if( (SWTC_TimeType)SWTC_GetElapsedTime((SWTC_CountersType)FLT_OVERHEATING_RES_OFF_M_COUNTER) 
 2714                             		.loc 1 1681 0
 2715 032d 75 41 28                		mov	#40, r1
 2716 0330 05 00 00 00             		bsr	_SWTC_GetElapsedTime
 2717 0334 06 C5 B1 05             		cmp	10[r11].UW, r1
 2718 0338 29 41                   		blt	.L401
1683:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							if (FltHeatToutData.state  == FLT_HEAT_TOUT_EXE_F)
 2719                             		.loc 1 1683 0
 2720 033a CC AA                   		mov.B	[r10], r10
 2721 033c 75 2A 7F                		and #0x7f, r10
1685:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								FLT_warningSave(FLT_CODE_MAIN_BOARD, FLT_SUBCODE_BLDC_OVERHEATING,WRN_FAULT);
 2722                             		.loc 1 1685 0
 2723 033f 66 D1                   		mov	#13, r1
 2724 0341 FB 26 88                		mov	#0xffffff88, r2
1683:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							if (FltHeatToutData.state  == FLT_HEAT_TOUT_EXE_F)
 2725                             		.loc 1 1683 0
 2726 0344 61 3A                   		cmp	#3, r10
 2727 0346 21 11                   		bne	.L402
1685:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								FLT_warningSave(FLT_CODE_MAIN_BOARD, FLT_SUBCODE_BLDC_OVERHEATING,WRN_FAULT);
 2728                             		.loc 1 1685 0
 2729 0348 66 13                   		mov	#1, r3
 2730 034a 05 00 00 00             		bsr	_FLT_warningSave
1686:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								SETBIT(Flags_3,JIF_FLAG3_WASH_OVERHEATING_WARN);
 2731                             		.loc 1 1686 0
 2732 034e FB 72 00 00 00 00       		mov.L	#_Flags_3, r7
 2733 0354 F0 71                   		bset #1, [r7].B
 2734 0356 08                      		bra	.L403
 2735                             	.L402:
1690:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								FLT_warningSave(FLT_CODE_MAIN_BOARD, FLT_SUBCODE_BLDC_OVERHEATING,WRN_PREFAULT);
 2736                             		.loc 1 1690 0
 2737 0357 CF 73                   		mov.B	r7, r3
 2738 0359 05 00 00 00             		bsr	_FLT_warningSave
 2739 035d 03                      		.balign 2,3,5
 2740                             	.L403:
1692:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							SETBIT(FltFlagsKO,FLAG_BLDC_OH);
 2741                             		.loc 1 1692 0
 2742 035e FB 72 00 00 00 00       		mov.L	#_FltFlagsKO, r7
 2743 0364 DC 7A                   		mov.W	[r7], r10
 2744 0366 78 4A                   		bset #4, r10
 2745 0368 D3 7A                   		mov.W	r10, [r7]
1693:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							FLT_Update_warning_proc(FLAG_BLDC_OH,FLT_CODE_MAIN_BOARD,FLT_SUBCODE_BLDC_OVERHEATING);
 2746                             		.loc 1 1693 0
 2747 036a 66 41                   		mov	#4, r1
 2748 036c 66 D2                   		mov	#13, r2
 2749 036e FB 36 88                		mov	#0xffffff88, r3
 2750 0371 03                      		.balign 2,3,3
 2751                             	.L597:
 2752 0372 05 00 00 00             		bsr	_FLT_Update_warning_proc
 2753 0376 38 92 00                		bra	.L400
 2754                             	.L401:
 2755                             	.LBE103:
1699:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							if ((TESTBIT (GIValid, (GI_FIRST_CRITERION_BIT + GI_PRESS_SENS_CR_FULL_IND) ) != 0) || (HWC_
 2756                             		.loc 1 1699 0
 2757 0379 FB 72 00 00 00 00       		mov.L	#_GIValid, r7
 2758 037f DC 77                   		mov.W	[r7], r7
 2759                             	.LBB104:
 2760 0381 FD 74 C7 01             		tst	#1, r7
 2761 0385 21 13                   		bne	.L404
 2762 0387 FB 72 00 00 00 00       		mov.L	#_HWC_Flags, r7
 2763 038d DC 77                   		mov.W	[r7], r7
 2764 038f 75 27 10                		and #16, r7
 2765 0392 5F 77                   		movu.W	r7, r7
 2766 0394 61 07                   		cmp	#0, r7
 2767 0396 20 72                   		beq	.L400
 2768                             		.balign 2,3,5
 2769                             	.L404:
 2770                             	.LBE104:
1702:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								if ( (TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) != 0 ) ||(HWC_Flags.bit.vs_wash_presen
 2771                             		.loc 1 1702 0
 2772 0398 FB 72 00 00 00 00       		mov.L	#_GICriteria, r7
 2773 039e CC 77                   		mov.B	[r7], r7
 2774                             	.LBB105:
 2775 03a0 FD 74 C7 01             		tst	#1, r7
 2776 03a4 21 14                   		bne	.L405
 2777 03a6 FB 72 00 00 00 00       		mov.L	#_HWC_Flags, r7
 2778 03ac DC 77                   		mov.W	[r7], r7
 2779 03ae 75 27 10                		and #16, r7
 2780 03b1 5F 77                   		movu.W	r7, r7
 2781 03b3 61 07                   		cmp	#0, r7
 2782 03b5 20 3F                   		beq	.L406
 2783 03b7 03                      		.balign 2,3,5
 2784                             	.L405:
1707:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									if (FltHeatToutData.state == FLT_HEAT_TOUT_EXE_F)
 2785                             		.loc 1 1707 0
 2786 03b8 FB 72 00 00 00 00       		mov.L	#_FltHeatToutData, r7
 2787 03be CC 77                   		mov.B	[r7], r7
 2788 03c0 75 27 7F                		and #0x7f, r7
1709:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 										FLT_warningSave(FLT_CODE_HEAT_TOUT, FLT_SUBCODE_HEAT_TOUT,WRN_FAULT);
 2789                             		.loc 1 1709 0
 2790 03c3 66 81                   		mov	#8, r1
 2791 03c5 66 12                   		mov	#1, r2
1707:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									if (FltHeatToutData.state == FLT_HEAT_TOUT_EXE_F)
 2792                             		.loc 1 1707 0
 2793 03c7 61 37                   		cmp	#3, r7
 2794 03c9 21 11                   		bne	.L407
1709:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 										FLT_warningSave(FLT_CODE_HEAT_TOUT, FLT_SUBCODE_HEAT_TOUT,WRN_FAULT);
 2795                             		.loc 1 1709 0
 2796 03cb CF 23                   		mov.B	r2, r3
 2797 03cd 05 00 00 00             		bsr	_FLT_warningSave
1710:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 										SETBIT(Flags_3,JIF_FLAG3_HEAT_TOUT_WARN);
 2798                             		.loc 1 1710 0
 2799 03d1 FB 72 00 00 00 00       		mov.L	#_Flags_3, r7
 2800 03d7 F0 72                   		bset #2, [r7].B
 2801 03d9 0F                      		bra	.L408
 2802                             	.L407:
1713:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 										FLT_warningSave(FLT_CODE_HEAT_TOUT, FLT_SUBCODE_HEAT_TOUT,WRN_PREFAULT);
 2803                             		.loc 1 1713 0
 2804 03da 66 03                   		mov	#0, r3
 2805 03dc 05 00 00 00             		bsr	_FLT_warningSave
 2806                             		.balign 2,3,5
 2807                             	.L408:
1716:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									SETBIT(FltFlagsKO,FLAG_BLDC_HEATTOUT);
 2808                             		.loc 1 1716 0
 2809 03e0 FB 72 00 00 00 00       		mov.L	#_FltFlagsKO, r7
 2810 03e6 DC 7A                   		mov.W	[r7], r10
 2811 03e8 78 5A                   		bset #5, r10
 2812 03ea D3 7A                   		mov.W	r10, [r7]
1717:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									FLT_Update_warning_proc(FLAG_BLDC_HEATTOUT,FLT_CODE_HEAT_TOUT,FLT_SUBCODE_HEAT_TOUT);
 2813                             		.loc 1 1717 0
 2814 03ec 66 51                   		mov	#5, r1
 2815 03ee 66 82                   		mov	#8, r2
 2816 03f0 66 13                   		mov	#1, r3
 2817 03f2 2E 80                   		bra	.L597
 2818                             	.L406:
1721:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									SETBIT(FltFlagsKO,FLAG_BLDC_PRESS_SWITCH);
 2819                             		.loc 1 1721 0
 2820 03f4 FB 72 00 00 00 00       		mov.L	#_FltFlagsKO, r7
 2821 03fa DC 7A                   		mov.W	[r7], r10
 2822 03fc 78 6A                   		bset #6, r10
 2823 03fe D3 7A                   		mov.W	r10, [r7]
1722:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									FLT_manageFault(FLT_CODE_PRESS_SWITCH,FLT_SUBCODE_PRESS_SWITCH_HEAT);
 2824                             		.loc 1 1722 0
 2825 0400 66 51                   		mov	#5, r1
 2826 0402 66 22                   		mov	#2, r2
 2827 0404 05 00 00 00             		bsr	_FLT_manageFault
 2828                             		.balign 2,3,2
 2829                             	.L400:
1730:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					(void)SWTC_Stop((SWTC_CountersType)FLT_HEATTOUT_M_COUNTER);
 2830                             		.loc 1 1730 0
 2831 0408 75 41 26                		mov	#38, r1
 2832 040b 05 00 00 00             		bsr	_SWTC_Stop
1731:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FltHeatToutData.state++;
 2833                             		.loc 1 1731 0
 2834 040f FB A2 00 00 00 00       		mov.L	#_FltHeatToutData, r10
 2835 0415 03                      		.balign 2,3,5
 2836                             	.L598:
 2837 0416 CC AB                   		mov.B	[r10], r11
 2838 0418 71 B7 01                		add	#1, r11, r7
 2839 041b 75 27 7F                		and #0x7f, r7
 2840 041e 75 2B 80                		and #0xffffff80, r11
 2841 0421 57 B7                   		or	r11, r7
 2842 0423 C3 A7                   		mov.B	r7, [r10]
 2843 0425 2E 65                   		bra	.L390
 2844                             	.L396:
1736:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FLT_Update_warning_proc(FLAG_BLDC_HEATTOUT,FLT_CODE_HEAT_TOUT,FLT_SUBCODE_HEAT_TOUT);
 2845                             		.loc 1 1736 0
 2846 0427 66 51                   		mov	#5, r1
 2847 0429 66 82                   		mov	#8, r2
 2848 042b 66 13                   		mov	#1, r3
 2849 042d 05 00 00 00             		bsr	_FLT_Update_warning_proc
1737:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FLT_Update_warning_proc(FLAG_BLDC_UNDVL,FLT_CODE_MAIN_BOARD,FLT_SUBCODE_BLDC_UNDER_VOLTAGE);
 2850                             		.loc 1 1737 0
 2851 0431 66 31                   		mov	#3, r1
 2852 0433 66 D2                   		mov	#13, r2
 2853 0435 75 43 40                		mov	#64, r3
 2854 0438 05 00 00 00             		bsr	_FLT_Update_warning_proc
1738:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FLT_Update_warning_proc(FLAG_BLDC_OH,FLT_CODE_MAIN_BOARD,FLT_SUBCODE_BLDC_OVERHEATING);
 2855                             		.loc 1 1738 0
 2856 043c 66 41                   		mov	#4, r1
 2857 043e 66 D2                   		mov	#13, r2
 2858 0440 FB 36 88                		mov	#0xffffff88, r3
 2859 0443 05 00 00 00             		bsr	_FLT_Update_warning_proc
 2860                             	.LBE105:
1739:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( TESTBIT(FltFlagsKO,FLAG_BLDC_PRESS_SWITCH))
 2861                             		.loc 1 1739 0
 2862 0447 FB 72 00 00 00 00       		mov.L	#_FltFlagsKO, r7
 2863 044d DC 7A                   		mov.W	[r7], r10
 2864                             	.LBB106:
 2865 044f 75 2A 40                		and #64, r10
 2866 0452 5F AA                   		movu.W	r10, r10
 2867 0454 61 0A                   		cmp	#0, r10
 2868 0456 20 34                   		beq	.L390
1742:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if (( FLT_checkForCurrentFault( FLT_CODE_PRESS_SWITCH, FLT_SUBCODE_PRESS_SWITCH_HEAT) )&& (Fa
 2869                             		.loc 1 1742 0
 2870 0458 66 51                   		mov	#5, r1
 2871 045a 66 22                   		mov	#2, r2
 2872 045c 05 00 00 00             		bsr	_FLT_checkForCurrentFault
 2873 0460 61 01                   		cmp	#0, r1
 2874 0462 20 18                   		beq	.L409
 2875 0464 FB A2 00 00 00 00       		mov.L	#_FaultMgmt_Data, r10
 2876 046a CD AA 02                		mov.B	2[r10], r10
 2877 046d 75 2A 7F                		and #0x7f, r10
 2878 0470 61 3A                   		cmp	#3, r10
 2879 0472 18                      		bne	.L409
1744:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							CLRBIT(FltFlagsKO,FLAG_BLDC_PRESS_SWITCH);
 2880                             		.loc 1 1744 0
 2881 0473 DC 7A                   		mov.W	[r7], r10
 2882 0475 7A 6A                   		bclr #6, r10
 2883 0477 D3 7A                   		mov.W	r10, [r7]
 2884 0479 03                      		.balign 2,3,1
 2885                             	.L409:
1746:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_manageFault(FLT_CODE_PRESS_SWITCH,FLT_SUBCODE_PRESS_SWITCH_HEAT);
 2886                             		.loc 1 1746 0
 2887 047a 66 51                   		mov	#5, r1
 2888 047c 66 22                   		mov	#2, r2
 2889 047e 05 00 00 00             		bsr	_FLT_manageFault
 2890 0482 08                      		bra	.L390
 2891                             	.L391:
1760:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			(void)SWTC_Stop((SWTC_CountersType)FLT_HEATTOUT_M_COUNTER);
 2892                             		.loc 1 1760 0
 2893 0483 75 41 26                		mov	#38, r1
 2894                             		.balign 2,3,3
 2895                             	.L599:
 2896 0486 05 00 00 00             		bsr	_SWTC_Stop
 2897                             		.balign 2,3,5
 2898                             	.L390:
1769:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	FltHeatToutData.uP_exe = FALSE; /* reset controllo su uP per iterazione in corso
 2899                             		.loc 1 1769 0
 2900 048a FB 72 00 00 00 00       		mov.L	#_FltHeatToutData, r7
 2901 0490 CC 7A                   		mov.B	[r7], r10
 2902 0492 7A 7A                   		bclr	#7, r10
 2903 0494 C3 7A                   		mov.B	r10, [r7]
 2904                             		.balign 2,3,5
 2905                             	.L384:
 2906                             	.LBE106:
 2907                             	.LBE102:
 167:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if(( HWC_Flags.bit.vs_wash_presence != 0)&&( HWC_Flags.bit.vs_drain_presence != 0))
 2908                             		.loc 1 167 0
 2909 0496 FB 72 00 00 00 00       		mov.L	#_HWC_Flags, r7
 2910 049c DC 77                   		mov.W	[r7], r7
 2911 049e 75 27 30                		and #48, r7
 2912 04a1 75 57 30                		cmp	#48, r7
 2913 04a4 3B 28 02                		bne	.L411
 2914                             	.LBB107:
 2915                             	.LBB108:
1854:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (	TESTBIT(Flags_2, FLAG2_VIRTUALSENSOR_TEST_STARTED_FLAG))/* permette di fare il controllo una 
 2916                             		.loc 1 1854 0
 2917 04a7 FB 72 00 00 00 00       		mov.L	#_Flags_2, r7
 2918 04ad CC 7A                   		mov.B	[r7], r10
 2919 04af EF AB                   		mov.L	r10, r11
 2920 04b1 75 2B 10                		and #16, r11
 2921 04b4 3A A0 01                		beq	.L413
1857:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if((Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==0)&&(TESTBIT(Flags_1,JIF_FLAG1_UP_TERMINATED_KO
 2922                             		.loc 1 1857 0
 2923 04b7 FB B2 00 00 00 00       		mov.L	#_Virtual_Sensor_Value, r11
 2924 04bd CC BC                   		mov.B	[r11], r12
 2925 04bf 5B C4                   		movu.B	r12, r4
 2926 04c1 FB E2 00 00 00 00       		mov.L	#_Flags_1, r14
 2927 04c7 61 04                   		cmp	#0, r4
 2928 04c9 21 74                   		bne	.L414
 2929 04cb CC E4                   		mov.B	[r14], r4
 2930 04cd EF 43                   		mov.L	r4, r3
 2931 04cf 75 23 10                		and #16, r3
 2932 04d2 3A 16 01                		beq	.L415
 2933                             	.LBE108:
1859:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if (TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_DRAIN))  )
 2934                             		.loc 1 1859 0
 2935 04d5 FB C2 00 00 00 00       		mov.L	#_GIValid, r12
 2936 04db DC CC                   		mov.W	[r12], r12
 2937                             	.LBB109:
 2938 04dd 76 2C 00 08             		and #0x800, r12
 2939 04e1 5F CC                   		movu.W	r12, r12
 2940 04e3 61 0C                   		cmp	#0, r12
 2941 04e5 3A 6F 01                		beq	.L413
1862:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				CLRBIT(Flags_2, FLAG2_VIRTUALSENSOR_TEST_STARTED_FLAG);
 2942                             		.loc 1 1862 0
 2943 04e8 7A 4A                   		bclr #4, r10
 2944 04ea C3 7A                   		mov.B	r10, [r7]
1863:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				CLRBIT(Flags_1,JIF_FLAG1_UP_TERMINATED_KO_POS) ;
 2945                             		.loc 1 1863 0
 2946 04ec 7A 44                   		bclr #4, r4
 2947 04ee C3 E4                   		mov.B	r4, [r14]
1864:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_DRAIN]==0)
 2948                             		.loc 1 1864 0
 2949 04f0 59 BB 01                		movu.B	1[r11], r11
 2950 04f3 61 0B                   		cmp	#0, r11
 2951 04f5 1C                      		bne	.L417
 2952 04f6 38 38 01                		bra	.L602
 2953                             	.L417:
1872:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				  	FltFlagsVS.VScheckinconsistency++;
 2954                             		.loc 1 1872 0
 2955 04f9 FB C2 00 00 00 00       		mov.L	#_FltFlagsVS, r12
 2956 04ff CC CE                   		mov.B	[r12], r14
 2957 0501 71 EB 01                		add	#1, r14, r11
 2958 0504 64 FB                   		and #15, r11
 2959 0506 75 2E F0                		and #-16, r14
 2960 0509 57 EB                   		or	r14, r11
 2961 050b C3 CB                   		mov.B	r11, [r12]
1873:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					SETBIT(Flags_2, FLAG2_CLOGGED_FILTER);
 2962                             		.loc 1 1873 0
 2963 050d 78 5A                   		bset #5, r10
 2964 050f C3 7A                   		mov.B	r10, [r7]
 2965 0511 03                      		.balign 2,3,1
 2966                             	.L612:
1874:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FLT_manageFault(FLT_CODE_VS,FLT_SUBCODE_EMPTY_WASH_FULL_DRAIN);
 2967                             		.loc 1 1874 0
 2968 0512 66 F1                   		mov	#15, r1
 2969 0514 66 22                   		mov	#2, r2
 2970 0516 05 00 00 00             		bsr	_FLT_manageFault
1875:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if (( FLT_checkForCurrentFault( FLT_CODE_VS, FLT_SUBCODE_EMPTY_WASH_FULL_DRAIN)) && (FaultMgmt
 2971                             		.loc 1 1875 0
 2972 051a 66 F1                   		mov	#15, r1
 2973 051c 66 22                   		mov	#2, r2
 2974 051e 05 00 00 00             		bsr	_FLT_checkForCurrentFault
 2975 0522 61 01                   		cmp	#0, r1
 2976 0524 3A 30 01                		beq	.L413
 2977 0527 FB 72 00 00 00 00       		mov.L	#_FaultMgmt_Data, r7
 2978 052d 88 F7                   		mov.B	2[r7], r7
 2979 052f 75 27 7F                		and #0x7f, r7
 2980 0532 61 37                   		cmp	#3, r7
 2981 0534 3A 20 01                		beq	.L413
1878:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_manageFault(FLT_CODE_VS,FLT_SUBCODE_EMPTY_WASH_FULL_DRAIN);
 2982                             		.loc 1 1878 0
 2983 0537 66 F1                   		mov	#15, r1
 2984 0539 66 22                   		mov	#2, r2
 2985 053b 2E 75                   		bra	.L601
 2986                             	.L414:
1886:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			 if((Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]!=0)&&(Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_W
 2987                             		.loc 1 1886 0
 2988 053d 61 54                   		cmp	#5, r4
 2989 053f 3A A9 00                		beq	.L415
 2990 0542 CC E4                   		mov.B	[r14], r4
 2991 0544 EF 43                   		mov.L	r4, r3
 2992 0546 75 23 10                		and #16, r3
 2993 0549 3A 9F 00                		beq	.L415
 2994                             	.LBE109:
1889:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if (TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_DRAIN) ) )
 2995                             		.loc 1 1889 0
 2996 054c FB C2 00 00 00 00       		mov.L	#_GIValid, r12
 2997 0552 DC CC                   		mov.W	[r12], r12
 2998                             	.LBB110:
 2999 0554 76 2C 00 08             		and #0x800, r12
 3000 0558 5F CC                   		movu.W	r12, r12
 3001 055a 61 0C                   		cmp	#0, r12
 3002 055c 3A F8 00                		beq	.L413
1891:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					CLRBIT(Flags_2, FLAG2_VIRTUALSENSOR_TEST_STARTED_FLAG);
 3003                             		.loc 1 1891 0
 3004 055f 7A 4A                   		bclr #4, r10
 3005 0561 C3 7A                   		mov.B	r10, [r7]
1892:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					CLRBIT(Flags_1,JIF_FLAG1_UP_TERMINATED_KO_POS) ;
 3006                             		.loc 1 1892 0
 3007 0563 7A 44                   		bclr #4, r4
 3008 0565 C3 E4                   		mov.B	r4, [r14]
1893:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_DRAIN]==0)
 3009                             		.loc 1 1893 0
 3010 0567 59 BB 01                		movu.B	1[r11], r11
 3011 056a FB E2 00 00 00 00       		mov.L	#_FltFlagsVS, r14
 3012 0570 61 0B                   		cmp	#0, r11
 3013 0572 21 45                   		bne	.L418
1895:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FltFlagsVS.VScheckinconsistency++;
 3014                             		.loc 1 1895 0
 3015 0574 CC EC                   		mov.B	[r14], r12
 3016 0576 71 CB 01                		add	#1, r12, r11
 3017 0579 64 FB                   		and #15, r11
 3018 057b 75 2C F0                		and #-16, r12
 3019 057e 57 CB                   		or	r12, r11
 3020 0580 C3 EB                   		mov.B	r11, [r14]
1896:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						SETBIT(Flags_2, FLAG2_CLOGGED_FILTER);
 3021                             		.loc 1 1896 0
 3022 0582 78 5A                   		bset #5, r10
 3023 0584 C3 7A                   		mov.B	r10, [r7]
1897:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_manageFault(FLT_CODE_VS,FLT_SUBCODE_EMPTY_DRAIN_FULL_WASH);
 3024                             		.loc 1 1897 0
 3025 0586 66 F1                   		mov	#15, r1
 3026 0588 66 12                   		mov	#1, r2
 3027 058a 05 00 00 00             		bsr	_FLT_manageFault
1898:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if (( FLT_checkForCurrentFault( FLT_CODE_VS, FLT_SUBCODE_EMPTY_DRAIN_FULL_WASH)) && (FaultMgm
 3028                             		.loc 1 1898 0
 3029 058e 66 F1                   		mov	#15, r1
 3030 0590 66 12                   		mov	#1, r2
 3031 0592 05 00 00 00             		bsr	_FLT_checkForCurrentFault
 3032 0596 61 01                   		cmp	#0, r1
 3033 0598 3A BC 00                		beq	.L413
 3034 059b FB 72 00 00 00 00       		mov.L	#_FaultMgmt_Data, r7
 3035 05a1 88 F7                   		mov.B	2[r7], r7
 3036 05a3 75 27 7F                		and #0x7f, r7
 3037 05a6 61 37                   		cmp	#3, r7
 3038 05a8 3A AC 00                		beq	.L413
1901:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							FLT_manageFault(FLT_CODE_VS,FLT_SUBCODE_EMPTY_DRAIN_FULL_WASH);
 3039                             		.loc 1 1901 0
 3040 05ab 66 F1                   		mov	#15, r1
 3041 05ad 66 12                   		mov	#1, r2
 3042 05af 03                      		.balign 2,3,3
 3043                             	.L601:
 3044 05b0 05 00 00 00             		bsr	_FLT_manageFault
 3045 05b4 38 A0 00                		bra	.L413
 3046                             	.L418:
1907:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FltFlagsVS.warninglostwater++;
 3047                             		.loc 1 1907 0
 3048 05b7 CC E7                   		mov.B	[r14], r7
 3049 05b9 71 77 10                		add	#16, r7
 3050 05bc C3 E7                   		mov.B	r7, [r14]
1908:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_manageFault(FLT_CODE_LOAD_EV_KO,FLT_SUBCODE_EV_VIA_VS);
 3051                             		.loc 1 1908 0
 3052 05be 66 21                   		mov	#2, r1
 3053 05c0 66 32                   		mov	#3, r2
 3054 05c2 05 00 00 00             		bsr	_FLT_manageFault
1909:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if (( FLT_checkForCurrentFault( FLT_CODE_LOAD_EV_KO, FLT_SUBCODE_EV_VIA_VS)) && (FaultMgmt_Da
 3055                             		.loc 1 1909 0
 3056 05c6 66 21                   		mov	#2, r1
 3057 05c8 66 32                   		mov	#3, r2
 3058 05ca 05 00 00 00             		bsr	_FLT_checkForCurrentFault
 3059 05ce 61 01                   		cmp	#0, r1
 3060 05d0 3A 84 00                		beq	.L413
 3061 05d3 FB 72 00 00 00 00       		mov.L	#_FaultMgmt_Data, r7
 3062 05d9 88 F7                   		mov.B	2[r7], r7
 3063 05db 75 27 7F                		and #0x7f, r7
 3064 05de 61 37                   		cmp	#3, r7
 3065 05e0 20 74                   		beq	.L413
1912:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							FLT_manageFault(FLT_CODE_LOAD_EV_KO,FLT_SUBCODE_EV_VIA_VS);
 3066                             		.loc 1 1912 0
 3067 05e2 66 21                   		mov	#2, r1
 3068 05e4 66 32                   		mov	#3, r2
 3069 05e6 2E CA                   		bra	.L601
 3070                             	.L415:
1920:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			 if (TESTBIT(Flags_1,JIF_FLAG1_ALGO_DIRTY_F_KO_POS) && (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_W
 3071                             		.loc 1 1920 0
 3072 05e8 FB B2 00 00 00 00       		mov.L	#_Flags_1, r11
 3073 05ee CC B7                   		mov.B	[r11], r7
 3074 05f0 EF 74                   		mov.L	r7, r4
 3075 05f2 75 24 20                		and #32, r4
 3076 05f5 EF BE                   		mov.L	r11, r14
 3077 05f7 61 04                   		cmp	#0, r4
 3078 05f9 20 56                   		beq	.L419
 3079 05fb 76 2C FF 00             		and #0xff, r12
 3080 05ff 21 50                   		bne	.L419
 3081                             	.LBE110:
1922:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if (TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_DRAIN))  )
 3082                             		.loc 1 1922 0
 3083 0601 FB C2 00 00 00 00       		mov.L	#_GIValid, r12
 3084 0607 DC CC                   		mov.W	[r12], r12
 3085                             	.LBB111:
 3086 0609 76 2C 00 08             		and #0x800, r12
 3087 060d 5F CC                   		movu.W	r12, r12
 3088 060f 61 0C                   		cmp	#0, r12
 3089 0611 20 43                   		beq	.L413
1924:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					CLRBIT(Flags_2, FLAG2_VIRTUALSENSOR_TEST_STARTED_FLAG);
 3090                             		.loc 1 1924 0
 3091 0613 7A 4A                   		bclr #4, r10
 3092 0615 FB C2 00 00 00 00       		mov.L	#_Flags_2, r12
 3093 061b C3 CA                   		mov.B	r10, [r12]
1925:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					CLRBIT(Flags_1,JIF_FLAG1_ALGO_DIRTY_F_KO_POS) ;
 3094                             		.loc 1 1925 0
 3095 061d 7A 57                   		bclr #5, r7
 3096 061f C3 B7                   		mov.B	r7, [r11]
1926:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_DRAIN]==0)
 3097                             		.loc 1 1926 0
 3098 0621 FB 72 00 00 00 00       		mov.L	#_Virtual_Sensor_Value, r7
 3099 0627 B0 7F                   		movu.B	1[r7], r7
 3100 0629 61 07                   		cmp	#0, r7
 3101 062b 21 0D                   		bne	.L420
 3102 062d 03                      		.balign 2,3,5
 3103                             	.L602:
1928:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						SETBIT(Flags_3, JIF_FLAG3_VIRTUALSENSOR_END_CYCLE);
 3104                             		.loc 1 1928 0
 3105 062e FB 72 00 00 00 00       		mov.L	#_Flags_3, r7
 3106 0634 F0 75                   		bset #5, [r7].B
 3107 0636 2E 1E                   		bra	.L413
 3108                             	.L420:
1931:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FltFlagsVS.VScheckinconsistency++;
 3109                             		.loc 1 1931 0
 3110 0638 FB A2 00 00 00 00       		mov.L	#_FltFlagsVS, r10
 3111 063e CC AB                   		mov.B	[r10], r11
 3112 0640 71 B7 01                		add	#1, r11, r7
 3113 0643 64 F7                   		and #15, r7
 3114 0645 75 2B F0                		and #-16, r11
 3115 0648 57 B7                   		or	r11, r7
 3116 064a C3 A7                   		mov.B	r7, [r10]
 3117 064c 38 C6 FE                		bra	.L612
 3118                             	.L419:
1943:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				CLRBIT(Flags_1,JIF_FLAG1_ALGO_DIRTY_F_KO_POS) ;
 3119                             		.loc 1 1943 0
 3120 064f 7A 57                   		bclr #5, r7
 3121 0651 C3 E7                   		mov.B	r7, [r14]
 3122 0653 03                      		.balign 2,3,5
 3123                             	.L413:
1951:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (FltFlagsVS.VScheckinconsistency>= FLT_GetVS_timer(FLTN_INCONSISTENCY))
 3124                             		.loc 1 1951 0
 3125 0654 FB 72 00 00 00 00       		mov.L	#_FltFlagsVS, r7
 3126 065a CC 7A                   		mov.B	[r7], r10
 3127 065c 64 FA                   		and #15, r10
 3128 065e 66 11                   		mov	#1, r1
 3129 0660 05 00 00 00             		bsr	_FLT_GetVS_timer
 3130 0664 5B 11                   		movu.B	r1, r1
 3131 0666 47 1A                   		cmp	r1, r10
 3132 0668 29 1A                   		blt	.L422
1955:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==0)
 3133                             		.loc 1 1955 0
 3134 066a FB 72 00 00 00 00       		mov.L	#_Virtual_Sensor_Value, r7
 3135 0670 58 77                   		movu.B	[r7], r7
1957:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_manageFault(FLT_CODE_VS,FLT_SUBCODE_EMPTY_WASH_FULL_DRAIN);
 3136                             		.loc 1 1957 0
 3137 0672 66 F1                   		mov	#15, r1
1955:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==0)
 3138                             		.loc 1 1955 0
 3139 0674 61 07                   		cmp	#0, r7
 3140 0676 1C                      		bne	.L423
1957:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_manageFault(FLT_CODE_VS,FLT_SUBCODE_EMPTY_WASH_FULL_DRAIN);
 3141                             		.loc 1 1957 0
 3142 0677 66 22                   		mov	#2, r2
 3143 0679 0B                      		bra	.L603
 3144                             	.L423:
1962:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_manageFault(FLT_CODE_VS,FLT_SUBCODE_EMPTY_DRAIN_FULL_WASH);
 3145                             		.loc 1 1962 0
 3146 067a 66 12                   		mov	#1, r2
 3147                             		.balign 2,3,3
 3148                             	.L603:
 3149 067c 05 00 00 00             		bsr	_FLT_manageFault
 3150 0680 2E 1C                   		bra	.L424
 3151                             	.L422:
1966:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if (FltFlagsVS.VScheckinconsistency==0 )
 3152                             		.loc 1 1966 0
 3153 0682 CC 77                   		mov.B	[r7], r7
 3154 0684 64 F7                   		and	#15, r7
 3155 0686 21 16                   		bne	.L424
1968:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc( FLT_CODE_VS, FLT_SUBCODE_EMPTY_WASH_FULL_DRAIN,(uint16_t)TOUT_RESET_PR
 3156                             		.loc 1 1968 0
 3157 0688 66 F1                   		mov	#15, r1
 3158 068a 66 22                   		mov	#2, r2
 3159 068c DF 73                   		mov.W	r7, r3
 3160 068e 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
1969:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc( FLT_CODE_VS, FLT_SUBCODE_EMPTY_DRAIN_FULL_WASH,(uint16_t)TOUT_RESET_PR
 3161                             		.loc 1 1969 0
 3162 0692 66 F1                   		mov	#15, r1
 3163 0694 66 12                   		mov	#1, r2
 3164 0696 DF 73                   		mov.W	r7, r3
 3165 0698 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
 3166                             		.balign 2,3,5
 3167                             	.L424:
1972:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (FltFlagsVS.warninglostwater>= FLT_GetVS_timer(FLTN_LOST_WATER))
 3168                             		.loc 1 1972 0
 3169 069c FB 72 00 00 00 00       		mov.L	#_FltFlagsVS, r7
 3170 06a2 58 7A                   		movu.B	[r7], r10
 3171 06a4 68 4A                   		shlr	#4, r10
 3172 06a6 66 01                   		mov	#0, r1
 3173 06a8 05 00 00 00             		bsr	_FLT_GetVS_timer
 3174 06ac 5B 11                   		movu.B	r1, r1
 3175 06ae 47 1A                   		cmp	r1, r10
 3176 06b0 29 0C                   		blt	.L425
1974:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_manageFault(FLT_CODE_LOAD_EV_KO,FLT_SUBCODE_EV_VIA_VS);
 3177                             		.loc 1 1974 0
 3178 06b2 66 21                   		mov	#2, r1
 3179 06b4 66 32                   		mov	#3, r2
 3180 06b6 05 00 00 00             		bsr	_FLT_manageFault
 3181 06ba 2E 12                   		bra	.L411
 3182                             	.L425:
1978:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if (FltFlagsVS.warninglostwater==0 )
 3183                             		.loc 1 1978 0
 3184 06bc CC 73                   		mov.B	[r7], r3
 3185 06be 76 23 F0 00             		and	#0xf0, r3
 3186 06c2 1A                      		bne	.L411
1980:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FLT_ResetFaultDetectProc( FLT_CODE_LOAD_EV_KO, FLT_SUBCODE_EV_VIA_VS,(uint16_t)TOUT_RESET_PREFAU
 3187                             		.loc 1 1980 0
 3188 06c3 66 21                   		mov	#2, r1
 3189 06c5 66 32                   		mov	#3, r2
 3190 06c7 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
 3191 06cb 03                      		.balign 2,3,5
 3192                             	.L411:
 3193                             	.LBE111:
 3194                             	.LBE107:
 3195                             	.LBB112:
2028:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if (TESTBIT (GIValid, (GI_FIRST_CRITERION_BIT + GI_PRESS_SENS_CR_FULL_IND) ) != 0)
 3196                             		.loc 1 2028 0
 3197 06cc FB 72 00 00 00 00       		mov.L	#_GIValid, r7
 3198 06d2 DC 77                   		mov.W	[r7], r7
 3199                             	.LBB113:
 3200 06d4 FD 74 C7 01             		tst	#1, r7
 3201 06d8 20 2E                   		beq	.L427
 3202                             	.LBE113:
2031:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )
 3203                             		.loc 1 2031 0
 3204 06da FB 72 00 00 00 00       		mov.L	#_GICriteria, r7
 3205 06e0 CC 77                   		mov.B	[r7], r7
 3206                             	.LBB114:
2041:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				FLT_manageFault(FLT_CODE_PRESS_SWITCH,FLT_SUBCODE_PRESS_SWITCH_LOAD);
 3207                             		.loc 1 2041 0
 3208 06e2 66 51                   		mov	#5, r1
 3209 06e4 66 12                   		mov	#1, r2
2031:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )
 3210                             		.loc 1 2031 0
 3211 06e6 FD 74 C7 01             		tst	#1, r7
 3212 06ea 21 16                   		bne	.L428
 3213                             	.LBE114:
2034:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if ( TESTBIT(FltFlagsKO,WARNING_LOADPP_KO) )
 3214                             		.loc 1 2034 0
 3215 06ec FB 72 00 00 00 00       		mov.L	#_FltFlagsKO, r7
 3216 06f2 DC 77                   		mov.W	[r7], r7
 3217                             	.LBB115:
 3218 06f4 64 47                   		and #4, r7
 3219 06f6 5F 77                   		movu.W	r7, r7
 3220 06f8 61 07                   		cmp	#0, r7
 3221 06fa 16                      		beq	.L428
2041:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				FLT_manageFault(FLT_CODE_PRESS_SWITCH,FLT_SUBCODE_PRESS_SWITCH_LOAD);
 3222                             		.loc 1 2041 0
 3223 06fb 05 00 00 00             		bsr	_FLT_manageFault
 3224 06ff 0F                      		bra	.L427
 3225                             	.L428:
2044:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				FLT_ResetFaultDetectProc( FLT_CODE_PRESS_SWITCH, FLT_SUBCODE_PRESS_SWITCH_LOAD,(uint16_t)TOUT_R
 3226                             		.loc 1 2044 0
 3227 0700 66 03                   		mov	#0, r3
 3228 0702 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
 3229                             		.balign 2,3,5
 3230                             	.L427:
 3231                             	.LBE115:
 3232                             	.LBE112:
 176:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( Interpreter_Data[0].completeLabel.s.label != LBL_PAUSE )
 3233                             		.loc 1 176 0
 3234 0706 FB 72 00 00 00 00       		mov.L	#_Interpreter_Data, r7
 3235 070c CC 77                   		mov.B	[r7], r7
 3236 070e 64 F7                   		and #15, r7
 3237 0710 61 47                   		cmp	#4, r7
 3238 0712 3A 20 02                		beq	.L429
 3239                             	.LBB116:
 3240                             	.LBB117:
2070:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ( FltLoadToutData.uP_exe == FALSE )
 3241                             		.loc 1 2070 0
 3242 0715 FB 72 00 00 00 00       		mov.L	#_FltLoadToutData, r7
 3243 071b CC 77                   		mov.B [r7], r7
 3244 071d 76 27 80 00             		and #0x80, r7
 3245 0721 21 41                   		bne	.L430
2074:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if (HWC_Flags.bit.vs_wash_presence!=0)
 3246                             		.loc 1 2074 0
 3247 0723 FB 72 00 00 00 00       		mov.L	#_HWC_Flags, r7
 3248 0729 DC 77                   		mov.W	[r7], r7
 3249 072b 75 27 10                		and #16, r7
 3250 072e 5F 77                   		movu.W	r7, r7
 3251 0730 61 07                   		cmp	#0, r7
 3252 0732 20 0E                   		beq	.L431
2076:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FltWarning.load = FALSE;
 3253                             		.loc 1 2076 0
 3254 0734 FB 72 00 00 00 00       		mov.L	#_FltWarning, r7
 3255 073a DC 7A                   		mov.W	[r7], r10
 3256 073c 7A 0A                   		bclr	#0, r10
 3257 073e D3 7A                   		mov.W	r10, [r7]
 3258                             		.balign 2,3,5
 3259                             	.L431:
2078:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FltLoadToutData.state = FLT_LOAD_TOUT_DISABLE;
 3260                             		.loc 1 2078 0
 3261 0740 FB 72 00 00 00 00       		mov.L	#_FltLoadToutData, r7
 3262 0746 CC 7A                   		mov.B	[r7], r10
 3263 0748 75 2A 80                		and #0xffffff80, r10
 3264 074b C3 7A                   		mov.B	r10, [r7]
2079:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_ResetFaultDetectProc( FLT_CODE_LOAD_TIMEOUT, FLT_SUBCODE_LOAD_TIMEOUT,(uint16_t)TOUT_RESET_PR
 3265                             		.loc 1 2079 0
 3266 074d 66 61                   		mov	#6, r1
 3267 074f 66 12                   		mov	#1, r2
 3268 0751 66 03                   		mov	#0, r3
 3269 0753 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
2080:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		FLT_ResetFaultDetectProc( FLT_CODE_PRESS_SWITCH, FLT_SUBCODE_PRESS_SWITCH_LOAD_TOUT,(uint16_t)TOU
 3270                             		.loc 1 2080 0
 3271 0757 66 51                   		mov	#5, r1
 3272 0759 66 32                   		mov	#3, r2
 3273 075b 66 03                   		mov	#0, r3
 3274 075d 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
 3275 0761 03                      		.balign 2,3,5
 3276                             	.L430:
2083:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	switch (FltLoadToutData.state)
 3277                             		.loc 1 2083 0
 3278 0762 FB 72 00 00 00 00       		mov.L	#_FltLoadToutData, r7
 3279 0768 CC 77                   		mov.B	[r7], r7
 3280 076a 75 27 7F                		and #0x7f, r7
 3281 076d 61 17                   		cmp	#1, r7
 3282 076f 20 0E                   		beq	.L434
 3283 0771 61 27                   		cmp	#2, r7
 3284 0773 20 39                   		beq	.L435
 3285 0775 61 07                   		cmp	#0, r7
 3286 0777 3A 85 01                		beq	.L433
 3287 077a 38 AC 01                		bra	.L432
 3288                             	.L434:
2088:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		    if (HWC_Flags.bit.vs_wash_presence ==0)
 3289                             		.loc 1 2088 0
 3290 077d FB 72 00 00 00 00       		mov.L	#_HWC_Flags, r7
 3291 0783 DC 77                   		mov.W	[r7], r7
 3292 0785 75 27 10                		and #16, r7
 3293 0788 5F 77                   		movu.W	r7, r7
 3294 078a 61 07                   		cmp	#0, r7
 3295 078c 21 0E                   		bne	.L436
2090:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				FltWarning.load = FALSE;
 3296                             		.loc 1 2090 0
 3297 078e FB 72 00 00 00 00       		mov.L	#_FltWarning, r7
 3298 0794 DC 7A                   		mov.W	[r7], r10
 3299 0796 7A 0A                   		bclr	#0, r10
 3300 0798 D3 7A                   		mov.W	r10, [r7]
 3301                             		.balign 2,3,5
 3302                             	.L436:
2092:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FltLoadToutData.state = FLT_LOAD_TOUT_EXE;
 3303                             		.loc 1 2092 0
 3304 079a FB A2 00 00 00 00       		mov.L	#_FltLoadToutData, r10
 3305 07a0 CC A7                   		mov.B	[r10], r7
 3306 07a2 75 27 80                		and #0xffffff80, r7
 3307 07a5 78 17                   		bset #1, r7
 3308 07a7 C3 A7                   		mov.B	r7, [r10]
 3309 07a9 38 7D 01                		bra	.L432
 3310                             	.L435:
2098:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if (uPDoorStatus == UP_DOOR_WAIT)
 3311                             		.loc 1 2098 0
 3312 07ac FB 72 00 00 00 00       		mov.L	#_uPDoorStatus, r7
 3313 07b2 58 77                   		movu.B	[r7], r7
 3314 07b4 61 07                   		cmp	#0, r7
 3315 07b6 21 0E                   		bne	.L437
 3316 07b8 38 44 01                		bra	.L433
 3317                             	.L439:
2104:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					(void)SWTC_Stop((SWTC_CountersType)MAIN_FAULT_MGMT_COUNTER_M);
 3318                             		.loc 1 2104 0
 3319 07bb 66 31                   		mov	#3, r1
 3320 07bd 05 00 00 00             		bsr	_SWTC_Stop
 3321 07c1 38 65 01                		bra	.L432
 3322                             	.L437:
 3323                             	.LBE117:
2112:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ((TESTBIT (GIValid, (GI_FIRST_CRITERION_BIT + GI_PRESS_SENS_CR_FULL_IND) ) != 0)||
 3324                             		.loc 1 2112 0
 3325 07c4 FB 72 00 00 00 00       		mov.L	#_GIValid, r7
 3326 07ca DC 77                   		mov.W	[r7], r7
 3327                             	.LBB118:
 3328 07cc FD 74 C7 01             		tst	#1, r7
 3329 07d0 21 14                   		bne	.L442
 3330 07d2 FB 72 00 00 00 00       		mov.L	#_HWC_Flags, r7
 3331 07d8 DC 77                   		mov.W	[r7], r7
 3332 07da 75 27 10                		and #16, r7
 3333 07dd 5F 77                   		movu.W	r7, r7
 3334 07df 61 07                   		cmp	#0, r7
 3335 07e1 3A 1B 01                		beq	.L433
 3336                             		.balign 2,3,5
 3337                             	.L442:
 3338                             	.LBE118:
2118:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if (( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) != 0 )||
 3339                             		.loc 1 2118 0
 3340 07e4 FB 72 00 00 00 00       		mov.L	#_GICriteria, r7
 3341 07ea CC 77                   		mov.B	[r7], r7
 3342                             	.LBB119:
 3343 07ec FD 74 C7 01             		tst	#1, r7
 3344 07f0 21 24                   		bne	.L444
2119:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					((FltWarning.load == 0)&& HWC_Flags.bit.vs_wash_presence) )
 3345                             		.loc 1 2119 0
 3346 07f2 FB 72 00 00 00 00       		mov.L	#_FltWarning, r7
 3347 07f8 88 7F                   		mov.B 1[r7], r7
 3348 07fa 64 17                   		and #1, r7
2118:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if (( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) != 0 )||
 3349                             		.loc 1 2118 0
 3350 07fc 5B 7A                   		movu.B	r7, r10
 3351 07fe 61 0A                   		cmp	#0, r10
 3352 0800 21 59                   		bne	.L445
2119:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					((FltWarning.load == 0)&& HWC_Flags.bit.vs_wash_presence) )
 3353                             		.loc 1 2119 0
 3354 0802 FB A2 00 00 00 00       		mov.L	#_HWC_Flags, r10
 3355 0808 DC AA                   		mov.W	[r10], r10
 3356 080a 75 2A 10                		and #16, r10
 3357 080d 5F AA                   		movu.W	r10, r10
 3358 080f 61 0A                   		cmp	#0, r10
 3359 0811 20 48                   		beq	.L445
 3360 0813 03                      		.balign 2,3,5
 3361                             	.L444:
2122:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if (HWC_Flags.bit.vs_wash_presence)
 3362                             		.loc 1 2122 0
 3363 0814 FB 72 00 00 00 00       		mov.L	#_HWC_Flags, r7
 3364 081a DC 77                   		mov.W	[r7], r7
 3365 081c 75 27 10                		and #16, r7
 3366 081f 5F 77                   		movu.W	r7, r7
 3367 0821 61 07                   		cmp	#0, r7
 3368 0823 20 13                   		beq	.L446
2124:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							FltLoadToutData.state =FLT_LOAD_TOUT_INIT;
 3369                             		.loc 1 2124 0
 3370 0825 FB A2 00 00 00 00       		mov.L	#_FltLoadToutData, r10
 3371 082b CC A7                   		mov.B	[r10], r7
 3372 082d 75 27 80                		and #0xffffff80, r7
 3373 0830 78 07                   		bset #0, r7
 3374 0832 C3 A7                   		mov.B	r7, [r10]
 3375 0834 2E 0E                   		bra	.L447
 3376                             	.L446:
2127:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							FltWarning.load = FALSE;
 3377                             		.loc 1 2127 0
 3378 0836 FB 72 00 00 00 00       		mov.L	#_FltWarning, r7
 3379 083c DC 7A                   		mov.W	[r7], r10
 3380 083e 7A 0A                   		bclr	#0, r10
 3381 0840 D3 7A                   		mov.W	r10, [r7]
 3382                             		.balign 2,3,1
 3383                             	.L447:
2129:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_ResetFaultDetectProc( FLT_CODE_LOAD_TIMEOUT, FLT_SUBCODE_LOAD_TIMEOUT,(uint16_t)TOUT_RESE
 3384                             		.loc 1 2129 0
 3385 0842 66 61                   		mov	#6, r1
 3386 0844 66 12                   		mov	#1, r2
 3387 0846 66 03                   		mov	#0, r3
 3388 0848 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
2130:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_ResetFaultDetectProc( FLT_CODE_PRESS_SWITCH, FLT_SUBCODE_PRESS_SWITCH_LOAD_TOUT,(uint16_t
 3389                             		.loc 1 2130 0
 3390 084c 66 51                   		mov	#5, r1
 3391 084e 66 32                   		mov	#3, r2
 3392 0850 66 03                   		mov	#0, r3
 3393 0852 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
 3394 0856 38 D0 00                		bra	.L432
 3395                             	.L445:
2136:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if ( (LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b == EV_ON) && (( !HWC_Flags.bit.vs_wash_presence 
 3396                             		.loc 1 2136 0
 3397 0859 FB A2 00 00 00 00       		mov.L	#_EV_Pos, r10
 3398 085f 58 AA                   		movu.B	[r10], r10
 3399 0861 FB B2 00 00 00 00       		mov.L	#_LoadsReq_New, r11
 3400 0867 FE CA B2                		movu.B	[r10,r11], r2
 3401 086a 61 12                   		cmp	#1, r2
 3402 086c 3B 90 00                		bne	.L433
 3403 086f FB A2 00 00 00 00       		mov.L	#_HWC_Flags, r10
 3404 0875 DC AA                   		mov.W	[r10], r10
 3405 0877 75 2A 10                		and #16, r10
 3406 087a 5F AA                   		movu.W	r10, r10
 3407 087c 61 0A                   		cmp	#0, r10
 3408 087e 11                      		beq	.L449
 3409 087f 76 27 FF 00             		and #0xff, r7
 3410 0883 20 79                   		beq	.L433
 3411 0885 2E 1F                   		bra	.L613
 3412                             	.L449:
2146:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								if (uP_Load_Data.status == LOAD_EXE_TIME)
 3413                             		.loc 1 2146 0
 3414 0887 FB 72 00 00 00 00       		mov.L	#_uP_Load_Data, r7
 3415 088d 88 FF                   		mov.B	3[r7], r7
 3416 088f 76 27 E0 00             		and #0xe0, r7
 3417 0893 75 57 40                		cmp	#64, r7
 3418 0896 21 11                   		bne	.L451
2148:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									FltWarning.load = TRUE;
 3419                             		.loc 1 2148 0
 3420 0898 FB 72 00 00 00 00       		mov.L	#_FltWarning, r7
 3421 089e DC 7A                   		mov.W	[r7], r10
 3422 08a0 78 0A                   		bset	#0, r10
 3423 08a2 D3 7A                   		mov.W	r10, [r7]
 3424                             		.balign 2,3,1
 3425                             	.L613:
2150:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									FLT_manageFault(FLT_CODE_LOAD_TIMEOUT,FLT_SUBCODE_LOAD_TIMEOUT);
 3426                             		.loc 1 2150 0
 3427 08a4 66 61                   		mov	#6, r1
 3428 08a6 0A                      		bra	.L607
 3429                             	.L451:
2152:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								else if (uP_Load_Data.status == LOAD_EXE)
 3430                             		.loc 1 2152 0
 3431 08a7 75 57 20                		cmp	#32, r7
 3432 08aa 1A                      		bne	.L450
2155:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									FLT_manageFault(FLT_CODE_PRESS_SWITCH,FLT_SUBCODE_PRESS_SWITCH_LOAD_TOUT);
 3433                             		.loc 1 2155 0
 3434 08ab 66 51                   		mov	#5, r1
 3435 08ad 66 32                   		mov	#3, r2
 3436 08af 03                      		.balign 2,3,3
 3437                             	.L607:
 3438 08b0 05 00 00 00             		bsr	_FLT_manageFault
 3439                             		.balign 2,3,1
 3440                             	.L450:
2164:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							if (( FLT_checkForCurrentFault( FLT_CODE_LOAD_TIMEOUT, FLT_SUBCODE_LOAD_TIMEOUT)|| FLT_check
 3441                             		.loc 1 2164 0
 3442 08b4 66 61                   		mov	#6, r1
 3443 08b6 66 12                   		mov	#1, r2
 3444 08b8 05 00 00 00             		bsr	_FLT_checkForCurrentFault
 3445 08bc 61 01                   		cmp	#0, r1
 3446 08be 20 13                   		beq	.L452
 3447                             		.balign 2,3,5
 3448                             	.L454:
2165:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 									&&  (FaultMgmt_Data[0].step == FAULT_STEP))
 3449                             		.loc 1 2165 0
 3450 08c0 FB 72 00 00 00 00       		mov.L	#_FaultMgmt_Data, r7
 3451 08c6 88 F7                   		mov.B	2[r7], r7
 3452 08c8 75 27 7F                		and #0x7f, r7
 3453 08cb 61 47                   		cmp	#4, r7
 3454 08cd 21 59                   		bne	.L432
 3455 08cf 2E 10                   		bra	.L453
 3456                             	.L452:
2164:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							if (( FLT_checkForCurrentFault( FLT_CODE_LOAD_TIMEOUT, FLT_SUBCODE_LOAD_TIMEOUT)|| FLT_check
 3457                             		.loc 1 2164 0
 3458 08d1 66 51                   		mov	#5, r1
 3459 08d3 66 32                   		mov	#3, r2
 3460 08d5 05 00 00 00             		bsr	_FLT_checkForCurrentFault
 3461 08d9 61 01                   		cmp	#0, r1
 3462 08db 21 E5                   		bne	.L454
 3463 08dd 2E 49                   		bra	.L432
 3464                             	.L453:
2167:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								FltLoadToutData.state = FLT_LOAD_TOUT_END;
 3465                             		.loc 1 2167 0
 3466 08df FB A2 00 00 00 00       		mov.L	#_FltLoadToutData, r10
 3467 08e5 CC A7                   		mov.B	[r10], r7
 3468 08e7 75 27 80                		and #0xffffff80, r7
 3469 08ea 65 37                   		or	#3, r7
 3470 08ec C3 A7                   		mov.B	r7, [r10]
2168:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 								FltWarning.load = FALSE;
 3471                             		.loc 1 2168 0
 3472 08ee FB 72 00 00 00 00       		mov.L	#_FltWarning, r7
 3473 08f4 DC 7A                   		mov.W	[r7], r10
 3474 08f6 7A 0A                   		bclr	#0, r10
 3475 08f8 D3 7A                   		mov.W	r10, [r7]
 3476 08fa 2E 2C                   		bra	.L432
 3477                             	.L433:
2198:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if (( FLT_checkForCurrentFault( FLT_CODE_LOAD_TIMEOUT, FLT_SUBCODE_LOAD_TIMEOUT)|| FLT_checkForC
 3478                             		.loc 1 2198 0
 3479 08fc 66 61                   		mov	#6, r1
 3480 08fe 66 12                   		mov	#1, r2
 3481 0900 05 00 00 00             		bsr	_FLT_checkForCurrentFault
 3482 0904 61 01                   		cmp	#0, r1
 3483 0906 20 14                   		beq	.L459
 3484                             		.balign 2,3,5
 3485                             	.L460:
2199:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					&&  (FaultMgmt_Data[0].step == PREFAULT_STEP))
 3486                             		.loc 1 2199 0
 3487 0908 FB 72 00 00 00 00       		mov.L	#_FaultMgmt_Data, r7
 3488 090e 88 F7                   		mov.B	2[r7], r7
 3489 0910 75 27 7F                		and #0x7f, r7
 3490 0913 61 37                   		cmp	#3, r7
 3491 0915 21 11                   		bne	.L432
 3492 0917 38 A4 FE                		bra	.L439
 3493                             	.L459:
2198:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if (( FLT_checkForCurrentFault( FLT_CODE_LOAD_TIMEOUT, FLT_SUBCODE_LOAD_TIMEOUT)|| FLT_checkForC
 3494                             		.loc 1 2198 0
 3495 091a 66 51                   		mov	#5, r1
 3496 091c 66 32                   		mov	#3, r2
 3497 091e 05 00 00 00             		bsr	_FLT_checkForCurrentFault
 3498 0922 61 01                   		cmp	#0, r1
 3499 0924 21 E4                   		bne	.L460
 3500                             		.balign 2,3,5
 3501                             	.L432:
2214:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	FltLoadToutData.uP_exe = FALSE;   /* reset controllo su uP per iterazione in corso
 3502                             		.loc 1 2214 0
 3503 0926 FB 72 00 00 00 00       		mov.L	#_FltLoadToutData, r7
 3504 092c CC 7A                   		mov.B	[r7], r10
 3505 092e 7A 7A                   		bclr	#7, r10
 3506 0930 C3 7A                   		mov.B	r10, [r7]
 3507                             		.balign 2,3,5
 3508                             	.L429:
 3509                             	.LBE119:
 3510                             	.LBE116:
 3511                             	.LBB120:
 3512                             	.LBB121:
2247:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( ( LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b == EV_ON ) &&
 3513                             		.loc 1 2247 0
 3514 0932 FB 72 00 00 00 00       		mov.L	#_EV_Pos, r7
 3515 0938 58 77                   		movu.B	[r7], r7
 3516 093a FB A2 00 00 00 00       		mov.L	#_LoadsReq_New, r10
 3517 0940 FE C7 A1                		movu.B	[r7,r10], r1
 3518 0943 61 11                   		cmp	#1, r1
 3519 0945 21 7D                   		bne	.L461
 3520                             	.LBE121:
2248:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		( TESTBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS) != 0 ) )
 3521                             		.loc 1 2248 0
 3522 0947 FB 72 00 00 00 00       		mov.L	#_Flags_1, r7
 3523                             	.LBB122:
 3524 094d CC 77                   		mov.B [r7], r7
 3525 094f 64 47                   		and #4, r7
2247:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if( ( LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b == EV_ON ) &&
 3526                             		.loc 1 2247 0
 3527 0951 20 71                   		beq	.L461
 3528                             	.LBE122:
2252:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if ( TESTBIT(FltFlagsKO,FLAG_PULSE_KO_LOAD)  == FALSE )
 3529                             		.loc 1 2252 0
 3530 0953 FB 72 00 00 00 00       		mov.L	#_FltFlagsKO, r7
 3531 0959 DC 7A                   		mov.W	[r7], r10
 3532                             	.LBB123:
 3533 095b 76 2A 80 00             		and #0x80, r10
 3534 095f 5F AA                   		movu.W	r10, r10
 3535 0961 61 0A                   		cmp	#0, r10
 3536 0963 21 14                   		bne	.L462
2256:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			PM_PulseCounter_Reset_Warning(PULSECOUNTER_RESET_BOTH_WARNING);  /* Reset di eventuali warning p
 3537                             		.loc 1 2256 0
 3538 0965 66 21                   		mov	#2, r1
 3539 0967 05 00 00 00             		bsr	_PM_PulseCounter_Reset_Warning
2258:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			(void)FLT_CheckPulseCounterStill(PULSE_COUNTER_STILL_INIT);
 3540                             		.loc 1 2258 0
 3541 096b CF A1                   		mov.B	r10, r1
 3542 096d 05 00 00 00             		bsr	_FLT_CheckPulseCounterStill
2262:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			SETBIT(FltFlagsKO,FLAG_PULSE_KO_LOAD);
 3543                             		.loc 1 2262 0
 3544 0971 DC 7A                   		mov.W	[r7], r10
 3545 0973 78 7A                   		bset #7, r10
 3546 0975 2E 25                   		bra	.L608
 3547                             	.L462:
2267:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if ( FLT_CheckPulseCounterStill(PULSE_COUNTER_STILL_EXE) == TRUE )
 3548                             		.loc 1 2267 0
 3549 0977 05 00 00 00             		bsr	_FLT_CheckPulseCounterStill
 3550 097b EF 13                   		mov.L	r1, r3
 3551 097d EF 12                   		mov.L	r1, r2
 3552 097f 61 11                   		cmp	#1, r1
 3553 0981 21 1B                   		bne	.L463
2273:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ( FltWarning.pulseCounterKO == FALSE )
 3554                             		.loc 1 2273 0
 3555 0983 FB 72 00 00 00 00       		mov.L	#_FltWarning, r7
 3556 0989 CD 7A 01                		mov.B 1[r7], r10
 3557 098c 64 4A                   		and #4, r10
 3558 098e 21 0E                   		bne	.L463
2276:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FLT_warningSave(FLT_CODE_PULSE_COUNTER, FLT_SUBCODE_PULSE_COUNTER,WRN_FAULT);
 3559                             		.loc 1 2276 0
 3560 0990 66 71                   		mov	#7, r1
 3561 0992 05 00 00 00             		bsr	_FLT_warningSave
2278:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FltWarning.pulseCounterKO =  TRUE;
 3562                             		.loc 1 2278 0
 3563 0996 DC 7A                   		mov.W	[r7], r10
 3564 0998 78 2A                   		bset	#2, r10
 3565                             		.balign 2,3,1
 3566                             	.L608:
 3567 099a D3 7A                   		mov.W	r10, [r7]
 3568                             		.balign 2,3,5
 3569                             	.L463:
 3570                             	.LBE123:
2288:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if( TESTBIT (GIValid, (GI_FIRST_CRITERION_BIT + GI_PRESS_SENS_CR_FULL_IND) ) != 0 )
 3571                             		.loc 1 2288 0
 3572 099c FB 72 00 00 00 00       		mov.L	#_GIValid, r7
 3573 09a2 DC 77                   		mov.W	[r7], r7
 3574                             	.LBB124:
 3575 09a4 FD 74 C7 01             		tst	#1, r7
 3576 09a8 20 11                   		beq	.L464
 3577                             	.LBE124:
2291:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if ( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )
 3578                             		.loc 1 2291 0
 3579 09aa FB 72 00 00 00 00       		mov.L	#_GICriteria, r7
 3580 09b0 CC 77                   		mov.B	[r7], r7
 3581                             	.LBB125:
 3582 09b2 FD 74 C7 01             		tst	#1, r7
 3583 09b6 21 18                   		bne	.L465
 3584 09b8 0A                      		bra	.L461
 3585                             	.L464:
2299:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			(void)SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
 3586                             		.loc 1 2299 0
 3587 09b9 75 41 23                		mov	#35, r1
 3588 09bc 05 00 00 00             		bsr	_SWTC_Stop
 3589 09c0 2E 0E                   		bra	.L465
 3590                             	.L461:
2304:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		CLRBIT(FltFlagsKO,FLAG_PULSE_KO_LOAD);
 3591                             		.loc 1 2304 0
 3592 09c2 FB 72 00 00 00 00       		mov.L	#_FltFlagsKO, r7
 3593 09c8 DC 7A                   		mov.W	[r7], r10
 3594 09ca 7A 7A                   		bclr #7, r10
 3595 09cc D3 7A                   		mov.W	r10, [r7]
 3596                             		.balign 2,3,3
 3597                             	.L465:
 3598                             	.LBE125:
 3599                             	.LBE120:
 3600                             	.LBB126:
 3601                             	.LBB127:
2327:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 	if ( (PM_PulseCounter_GetWarning() == NO_PULSE_COUNTER_WARNING) && (SftPulseWarn.status == SFT_PUL
 3602                             		.loc 1 2327 0
 3603 09ce 05 00 00 00             		bsr	_PM_PulseCounter_GetWarning
 3604 09d2 76 21 FF 00             		and #0xff, r1
 3605 09d6 3B 6C 01                		bne	.L466
 3606 09d9 FB 72 00 00 00 00       		mov.L	#_SftPulseWarn, r7
 3607 09df CC 77                   		mov.B	[r7], r7
 3608 09e1 FD 74 C7 0F             		tst	#15, r7
 3609 09e5 3B 5D 01                		bne	.L466
 3610 09e8 FB 72 00 00 00 00       		mov.L	#_ReadVS_Data, r7
 3611 09ee CC 77                   		mov.B [r7], r7
 3612 09f0 64 27                   		and #2, r7
 3613 09f2 3B 50 01                		bne	.L466
 3614                             	.LBE127:
2330:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		if (TESTBIT(FltFlagsKO,FLAG_LOADEV_KO) == FALSE)
 3615                             		.loc 1 2330 0
 3616 09f5 FB 72 00 00 00 00       		mov.L	#_FltFlagsKO, r7
 3617 09fb DC 7A                   		mov.W	[r7], r10
 3618                             	.LBB128:
 3619 09fd 76 2A 00 01             		and #0x100, r10
 3620 0a01 5F AA                   		movu.W	r10, r10
 3621 0a03 61 0A                   		cmp	#0, r10
 3622 0a05 21 4C                   		bne	.L467
2341:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			(void)Set_SmallCounter((SWTC_CountersType)SFT_EVCHECK_S_COUNTER, (SWTC_PrescalerType)COUNTERS2_T
 3623                             		.loc 1 2341 0
 3624 0a07 75 41 24                		mov	#36, r1
 3625 0a0a 66 12                   		mov	#1, r2
 3626 0a0c 66 B3                   		mov	#11, r3
 3627 0a0e 05 00 00 00             		bsr	_Set_SmallCounter
2342:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if(SPV_isAutotestRunning())
 3628                             		.loc 1 2342 0
 3629 0a12 05 00 00 00             		bsr	_SPV_isAutotestRunning
 3630 0a16 FB 72 00 00 00 00       		mov.L	#_LoadEVCheck, r7
 3631 0a1c 61 01                   		cmp	#0, r1
 3632 0a1e 10                      		beq	.L468
2344:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				LoadEVCheck.cnt = TOUT_LOAD_EV_FAULT(Tab_LoadFault_Special.Data);  /* il tempo da setting è il
 3633                             		.loc 1 2344 0
 3634 0a1f FB A2 00 00 00 00       		mov.L	#_Tab_LoadFault_Special, r10
 3635 0a25 0F                      		bra	.L609
 3636                             	.L468:
2347:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				LoadEVCheck.cnt = TOUT_LOAD_EV_FAULT(Tab_LoadFault.Data);
 3637                             		.loc 1 2347 0
 3638 0a26 FB A2 00 00 00 00       		mov.L	#_Tab_LoadFault, r10
 3639                             		.balign 2,3,1
 3640                             	.L609:
 3641 0a2c EC AA                   		mov.L	[r10], r10
 3642 0a2e C5 A7 01 01             		mov.B	1[r10], 1[r7]
2349:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			LoadEVCheck.status = LOAD_EV_PILOT_OK;
 3643                             		.loc 1 2349 0
 3644 0a32 FB 72 00 00 00 00       		mov.L	#_LoadEVCheck, r7
 3645 0a38 3C 70 06                		mov.B	#6, [r7]
2351:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			FltLoadEVKOStatus = FLT_LOAD_EV_KO_INIT;
 3646                             		.loc 1 2351 0
 3647 0a3b FB 72 00 00 00 00       		mov.L	#_FltLoadEVKOStatus, r7
 3648 0a41 3C 70 00                		mov.B	#0, [r7]
2353:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			SETBIT(FltFlagsKO,FLAG_LOADEV_KO);
 3649                             		.loc 1 2353 0
 3650 0a44 FB 72 00 00 00 00       		mov.L	#_FltFlagsKO, r7
 3651 0a4a DC 7A                   		mov.W	[r7], r10
 3652 0a4c 78 8A                   		bset #8, r10
 3653 0a4e 38 E8 00                		bra	.L610
 3654                             	.L467:
2359:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 			if ( LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b == EV_OFF )
 3655                             		.loc 1 2359 0
 3656 0a51 FB A2 00 00 00 00       		mov.L	#_EV_Pos, r10
 3657 0a57 58 AA                   		movu.B	[r10], r10
 3658 0a59 FB B2 00 00 00 00       		mov.L	#_LoadsReq_New, r11
 3659 0a5f FE CA BA                		movu.B	[r10,r11], r10
 3660 0a62 61 0A                   		cmp	#0, r10
 3661 0a64 3B C7 00                		bne	.L471
2362:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ( FltLoadEVKOStatus == FLT_LOAD_EV_KO_INIT )
 3662                             		.loc 1 2362 0
 3663 0a67 FB C2 00 00 00 00       		mov.L	#_FltLoadEVKOStatus, r12
 3664 0a6d 58 CB                   		movu.B	[r12], r11
 3665 0a6f 61 0B                   		cmp	#0, r11
 3666 0a71 21 45                   		bne	.L473
2364:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					fltCheckEV = FLT_checkLoadEV(CHECK_EV_PULSE_CTRL);
 3667                             		.loc 1 2364 0
 3668 0a73 CF B1                   		mov.B	r11, r1
 3669 0a75 05 00 00 00             		bsr	_FLT_checkLoadEV
2365:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					CLRBIT(Flags_2, FLAG2_SAFETY_TURB_TEST_BIT);
 3670                             		.loc 1 2365 0
 3671 0a79 FB A2 00 00 00 00       		mov.L	#_Flags_2, r10
 3672 0a7f CC AE                   		mov.B	[r10], r14
 3673 0a81 7A 6E                   		bclr #6, r14
 3674 0a83 C3 AE                   		mov.B	r14, [r10]
2367:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( fltCheckEV == LOAD_EV_PAUSE_END )
 3675                             		.loc 1 2367 0
 3676 0a85 5B 13                   		movu.B	r1, r3
 3677 0a87 61 23                   		cmp	#2, r3
 3678 0a89 21 1B                   		bne	.L474
2371:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						LoadEVCheck.status = LOAD_EV_PILOT_INIT;  /* init tentativi di pilotaggio
 3679                             		.loc 1 2371 0
 3680 0a8b FB 72 00 00 00 00       		mov.L	#_LoadEVCheck, r7
 3681 0a91 C3 7B                   		mov.B	r11, [r7]
2373:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						SETBIT(Flags_2, FLAG2_SAFETY_TURB_TEST_BIT);
 3682                             		.loc 1 2373 0
 3683 0a93 78 6E                   		bset #6, r14
 3684 0a95 C3 AE                   		mov.B	r14, [r10]
2375:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_manageFault(FLT_CODE_LOAD_EV_KO,FLT_SUBCODE_LOAD_EV_KO);
 3685                             		.loc 1 2375 0
 3686 0a97 CF 31                   		mov.B	r3, r1
 3687 0a99 66 12                   		mov	#1, r2
 3688 0a9b 05 00 00 00             		bsr	_FLT_manageFault
2377:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FltLoadEVKOStatus = FLT_LOAD_EV_KO_EXE;
 3689                             		.loc 1 2377 0
 3690 0a9f F8 C4 01                		mov.B	#1, [r12]
 3691 0aa2 2E 14                   		bra	.L473
 3692                             	.L474:
2379:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					else if ( fltCheckEV == LOAD_EV_OK )
 3693                             		.loc 1 2379 0
 3694 0aa4 61 03                   		cmp	#0, r3
 3695 0aa6 21 10                   		bne	.L473
2382:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						CLRBIT(FltFlagsKO,FLAG_LOADEV_KO);
 3696                             		.loc 1 2382 0
 3697 0aa8 DC 7A                   		mov.W	[r7], r10
 3698 0aaa 7A 8A                   		bclr #8, r10
 3699 0aac D3 7A                   		mov.W	r10, [r7]
2384:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_ResetFaultDetectProc( FLT_CODE_LOAD_EV_KO, FLT_SUBCODE_LOAD_EV_KO,(uint16_t)TOUT_RESET_PR
 3700                             		.loc 1 2384 0
 3701 0aae 66 21                   		mov	#2, r1
 3702 0ab0 66 12                   		mov	#1, r2
 3703 0ab2 05 00 00 00             		bsr	_FLT_ResetFaultDetectProc
 3704                             		.balign 2,3,5
 3705                             	.L473:
2392:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				if ( FltLoadEVKOStatus == FLT_LOAD_EV_KO_EXE )
 3706                             		.loc 1 2392 0
 3707 0ab6 FB B2 00 00 00 00       		mov.L	#_FltLoadEVKOStatus, r11
 3708 0abc 58 B7                   		movu.B	[r11], r7
 3709 0abe 61 17                   		cmp	#1, r7
 3710 0ac0 3B A1 00                		bne	.L355
2394:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					FLT_pilotLoadEV_Mgmt(CHECK_EV_PULSE_CTRL); /* chiamata qui, solo se ho EV OFF */
 3711                             		.loc 1 2394 0
 3712 0ac3 66 01                   		mov	#0, r1
 3713 0ac5 05 00 00 00             		bsr	_FLT_pilotLoadEV_Mgmt
2396:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					SETBIT(Flags_2, FLAG2_SAFETY_TURB_TEST_BIT);
 3714                             		.loc 1 2396 0
 3715 0ac9 FB A2 00 00 00 00       		mov.L	#_Flags_2, r10
 3716 0acf CC AC                   		mov.B	[r10], r12
 3717 0ad1 EF CE                   		mov.L	r12, r14
 3718 0ad3 78 6E                   		bset #6, r14
 3719 0ad5 C3 AE                   		mov.B	r14, [r10]
2398:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					if ( LoadEVCheck.status == LOAD_EV_PILOT_END )
 3720                             		.loc 1 2398 0
 3721 0ad7 FB E2 00 00 00 00       		mov.L	#_LoadEVCheck, r14
 3722 0add 58 EE                   		movu.B	[r14], r14
 3723 0adf 61 5E                   		cmp	#5, r14
 3724 0ae1 21 2A                   		bne	.L477
2403:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_manageFault(FLT_CODE_LOAD_EV_KO,FLT_SUBCODE_LOAD_EV_KO);
 3725                             		.loc 1 2403 0
 3726 0ae3 66 21                   		mov	#2, r1
 3727 0ae5 CF 72                   		mov.B	r7, r2
 3728 0ae7 05 00 00 00             		bsr	_FLT_manageFault
2404:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						if ( FLT_checkForCurrentFault( FLT_CODE_LOAD_EV_KO, FLT_SUBCODE_LOAD_EV_KO)&& (FaultMgmt_Data
 3729                             		.loc 1 2404 0
 3730 0aeb 66 21                   		mov	#2, r1
 3731 0aed CF 72                   		mov.B	r7, r2
 3732 0aef 05 00 00 00             		bsr	_FLT_checkForCurrentFault
 3733 0af3 61 01                   		cmp	#0, r1
 3734 0af5 20 6C                   		beq	.L355
 3735 0af7 FB 72 00 00 00 00       		mov.L	#_FaultMgmt_Data, r7
 3736 0afd 88 F7                   		mov.B	2[r7], r7
 3737 0aff 75 27 7F                		and #0x7f, r7
 3738 0b02 61 47                   		cmp	#4, r7
 3739 0b04 21 5D                   		bne	.L355
2406:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 							FltLoadEVKOStatus = FLT_LOAD_EV_KO_END;
 3740                             		.loc 1 2406 0
 3741 0b06 F8 B4 02                		mov.B	#2, [r11]
 3742 0b09 2E 58                   		bra	.L355
 3743                             	.L477:
2410:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 					else if ( LoadEVCheck.status == LOAD_EV_PILOT_OK )
 3744                             		.loc 1 2410 0
 3745 0b0b 61 6E                   		cmp	#6, r14
 3746 0b0d 21 54                   		bne	.L355
2412:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						CLRBIT(FltFlagsKO,FLAG_LOADEV_KO);
 3747                             		.loc 1 2412 0
 3748 0b0f FB B2 00 00 00 00       		mov.L	#_FltFlagsKO, r11
 3749 0b15 DC BE                   		mov.W	[r11], r14
 3750 0b17 7A 8E                   		bclr #8, r14
 3751 0b19 D3 BE                   		mov.W	r14, [r11]
2413:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						CLRBIT(Flags_2, FLAG2_SAFETY_TURB_TEST_BIT);
 3752                             		.loc 1 2413 0
 3753 0b1b 7A 6C                   		bclr #6, r12
 3754 0b1d C3 AC                   		mov.B	r12, [r10]
2415:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_ResetFaultDetectProc( FLT_CODE_LOAD_EV_KO, FLT_SUBCODE_LOAD_EV_KO,(uint16_t)TOUT_RESET_PR
 3755                             		.loc 1 2415 0
 3756 0b1f 66 21                   		mov	#2, r1
 3757 0b21 CF 72                   		mov.B	r7, r2
 3758 0b23 66 03                   		mov	#0, r3
 3759                             	.LBE128:
 3760                             	.LBE126:
 186:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 3761                             		.loc 1 186 0
 3762 0b25 6F 7C                   		popm	r7-r12
 3763                             	.LBB130:
 3764                             	.LBB129:
2415:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 						FLT_ResetFaultDetectProc( FLT_CODE_LOAD_EV_KO, FLT_SUBCODE_LOAD_EV_KO,(uint16_t)TOUT_RESET_PR
 3765                             		.loc 1 2415 0
 3766 0b27 04 00 00 00             		bra	_FLT_ResetFaultDetectProc
 3767                             	.L471:
2426:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				(void)SWTC_Stop((SWTC_CountersType)SFT_EVCHECK_S_COUNTER);
 3768                             		.loc 1 2426 0
 3769 0b2b 75 41 24                		mov	#36, r1
 3770 0b2e 05 00 00 00             		bsr	_SWTC_Stop
2428:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				CLRBIT(FltFlagsKO,FLAG_LOADEV_KO);
 3771                             		.loc 1 2428 0
 3772 0b32 DC 7A                   		mov.W	[r7], r10
 3773 0b34 7A 8A                   		bclr #8, r10
 3774                             		.balign 2,3,1
 3775                             	.L610:
 3776 0b36 D3 7A                   		mov.W	r10, [r7]
2429:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				CLRBIT(Flags_2, FLAG2_SAFETY_TURB_TEST_BIT);
 3777                             		.loc 1 2429 0
 3778 0b38 FB 72 00 00 00 00       		mov.L	#_Flags_2, r7
 3779 0b3e F0 7E                   		bclr #6, [r7].B
 3780 0b40 2E 21                   		bra	.L355
 3781                             	.L466:
2437:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 		CLRBIT(FltFlagsKO,FLAG_LOADEV_KO);
 3782                             		.loc 1 2437 0
 3783 0b42 FB 72 00 00 00 00       		mov.L	#_FltFlagsKO, r7
 3784 0b48 DC 7A                   		mov.W	[r7], r10
 3785 0b4a 7A 8A                   		bclr #8, r10
 3786 0b4c D3 7A                   		mov.W	r10, [r7]
 3787 0b4e 2E 13                   		bra	.L355
 3788                             	.L370:
 3789                             	.LBE129:
 3790                             	.LBE130:
 3791                             	.LBB131:
 3792                             	.LBB93:
 673:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				FaultMgmt_Data[0].faultCodes.subCode = subcode;
 3793                             		.loc 1 673 0
 3794 0b50 C7 7A 01                		mov.B	r10, 1[r7]
 674:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 				FaultMgmt_Data[0].step = ALARM_FLAG_STEP;
 3795                             		.loc 1 674 0
 3796 0b53 CD 7B 02                		mov.B	2[r7], r11
 3797 0b56 75 2B 80                		and #0xffffff80, r11
 3798 0b59 78 0B                   		bset #0, r11
 3799 0b5b C7 7B 02                		mov.B	r11, 2[r7]
 3800 0b5e 38 84 F5                		bra	.L369
 3801                             	.L355:
 3802                             	.LBE93:
 3803                             	.LBE131:
 186:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
 3804                             		.loc 1 186 0
 3805 0b61 3F 7C 06                		rtsd	#24, r7-r12
 3806                             	.LFE0:
 3808                             		.section	.text.FLT_SafetyBitmap_Cstm_Exclusion,"ax",@progbits
 3809                             		.global	_FLT_SafetyBitmap_Cstm_Exclusion
 3811                             	_FLT_SafetyBitmap_Cstm_Exclusion:
 3812                             	.LFB38:
2798:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2799:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** void FLT_SafetyBitmap_Cstm_Exclusion(void)
2800:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 3813                             		.loc 1 2800 0
 3814 0000 02                      		rts
 3815                             	.LFE38:
 3817                             		.section	.text.FLT_safetyBitmapStandard,"ax",@progbits
 3818                             		.global	_FLT_safetyBitmapStandard
 3820                             	_FLT_safetyBitmapStandard:
 3821                             	.LFB39:
2801:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2802:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** }
2803:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** 
2804:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** void FLT_safetyBitmapStandard(void)
2805:C:/Workspace/FW_Inertia/branch_indesit/Inertia/Control\DW_Fault.c **** {
 3822                             		.loc 1 2805 0
 3823 0000 02                      		rts
 3824                             	.LFE39:
 3826                             		.section	.rodata.CSWTCH.87,"a",@progbits
 3829                             	_CSWTCH.87:
 3830 0000 03                      		.byte	3
 3831 0001 01                      		.byte	1
 3832 0002 02                      		.byte	2
 3833                             		.section	.bss.pulseLoaded_Old.11889,"aw",@nobits
 3834                             		.balign 2
 3837                             	_pulseLoaded_Old.11889:
 3838 0000 00 00                   		.zero	2
 3839                             		.section	.bss.pulseLoaded_Old.11696,"aw",@nobits
 3840                             		.balign 2
 3843                             	_pulseLoaded_Old.11696:
 3844 0000 00 00                   		.zero	2
 4182                             	.Letext0:
 4183                             		.file 2 "C:\\Workspace\\FW_Inertia\\branch_indesit\\HAL\\HAL_General/StandardTypes.h"
 4184                             		.file 3 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_SwTimersCounters/SwTimersCo
 4185                             		.file 4 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\General/CstmDefines.h"
 4186                             		.file 5 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Application_Platform/APP_Types.h"
 4187                             		.file 6 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_BusCOMM/BCP_General.h"
 4188                             		.file 7 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\General/CstmTypes.h"
 4189                             		.file 8 "C:\\Workspace\\FW_Inertia\\branch_indesit\\PlatformLibrary\\LIB_IOManager/OutputManagerEx
 4190                             		.file 9 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\General/CstmGlobal.h"
 4191                             		.file 10 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Application_Platform/APP_Fault.h"
 4192                             		.file 11 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\Control/DW_Safety.h"
 4193                             		.file 12 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_BusCOMM/BCP_BusCommMng.h"
 4194                             		.file 13 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Application_Platform/APP_Global.h"
 4195                             		.file 14 "C:\\Workspace\\FW_Inertia\\branch_indesit\\Inertia\\Control/DW_Supervisor.h"
 4196                             		.file 15 "C:\\Workspace\\FW_Inertia\\branch_indesit\\ProductModules\\PM_PulseCounter/PM_PulseCount
DEFINED SYMBOLS
                            *ABS*:00000000 DW_Fault.c
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:6      .text.FLT_checkForMotorFault:00000000 _FLT_checkForMotorFault
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12     .text.FLT_checkForMotorFault:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:46     .text.FLT_GetVS_timer:00000000 _FLT_GetVS_timer
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:50     .text.FLT_GetVS_timer:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:94     .text.FLT_Reset_Circuit_Resistor_Fault:00000000 _FLT_Reset_Circuit_Resistor_Fault
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:98     .text.FLT_Reset_Circuit_Resistor_Fault:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:125    .text.FLT_Get_Motor_Timeout:00000000 _FLT_Get_Motor_Timeout
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:129    .text.FLT_Get_Motor_Timeout:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:182    .text.FLT_PulseCounterStill_Reset:00000000 _FLT_PulseCounterStill_Reset
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:186    .text.FLT_PulseCounterStill_Reset:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:233    .text.FLT_checkLoadEV:00000000 _FLT_checkLoadEV
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:237    .text.FLT_checkLoadEV:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3837   .bss.pulseLoaded_Old.11889:00000000 _pulseLoaded_Old.11889
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:355    .text.FLT_Update_warning_proc:00000000 _FLT_Update_warning_proc
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:358    .text.FLT_Update_warning_proc:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:413    .text.FLT_checkForSettingFault:00000000 _FLT_checkForSettingFault
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:417    .text.FLT_checkForSettingFault:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:437    .text.FLT_safetyBitmapReset:00000000 _FLT_safetyBitmapReset
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:440    .text.FLT_safetyBitmapReset:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:446    .text.FLT_CheckPulseCounterStill:00000000 _FLT_CheckPulseCounterStill
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:451    .text.FLT_CheckPulseCounterStill:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3843   .bss.pulseLoaded_Old.11696:00000000 _pulseLoaded_Old.11696
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:550    .text.FLT_PulseCounterCheckDelay_Mgmt:00000000 _FLT_PulseCounterCheckDelay_Mgmt
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:554    .text.FLT_PulseCounterCheckDelay_Mgmt:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:586    .text.FLT_getTimeout:00000000 _FLT_getTimeout
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:590    .text.FLT_getTimeout:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1018   .text.FLT_BLDCUnblock_Mgmt:00000000 _FLT_BLDCUnblock_Mgmt
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1022   .text.FLT_BLDCUnblock_Mgmt:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1119   .text.FLT_bldcFaultReset:00000000 _FLT_bldcFaultReset
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1123   .text.FLT_bldcFaultReset:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1167   .text.FLT_bldcFaultMgmt:00000000 _FLT_bldcFaultMgmt
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1170   .text.FLT_bldcFaultMgmt:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1742   .text.FLT_bldcFaultLoadMgmt:00000000 _FLT_bldcFaultLoadMgmt
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1746   .text.FLT_bldcFaultLoadMgmt:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1832   .text.FLT_pilotLoadEV_Mgmt:00000000 _FLT_pilotLoadEV_Mgmt
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1835   .text.FLT_pilotLoadEV_Mgmt:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2017   .text.SFT_Timeout_4Loadrestore_Mgmt:00000000 _SFT_Timeout_4Loadrestore_Mgmt
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2022   .text.SFT_Timeout_4Loadrestore_Mgmt:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2176   .text.FLT_warningSave:00000000 _FLT_warningSave
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2180   .text.FLT_warningSave:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2229   .text.FLT_faultManagement:00000000 _FLT_faultManagement
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2232   .text.FLT_faultManagement:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3829   .rodata.CSWTCH.87:00000000 _CSWTCH.87
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3811   .text.FLT_SafetyBitmap_Cstm_Exclusion:00000000 _FLT_SafetyBitmap_Cstm_Exclusion
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3814   .text.FLT_SafetyBitmap_Cstm_Exclusion:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3820   .text.FLT_safetyBitmapStandard:00000000 _FLT_safetyBitmapStandard
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3823   .text.FLT_safetyBitmapStandard:00000000 L0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:609    .rodata.FLT_getTimeout:00000000 .L97
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:861    .text.FLT_getTimeout:000001b6 .L86
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:904    .text.FLT_getTimeout:000001fc .L87
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:809    .text.FLT_getTimeout:0000015b .L88
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:815    .text.FLT_getTimeout:00000166 .L89
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:929    .text.FLT_getTimeout:0000021d .L90
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:944    .text.FLT_getTimeout:00000230 .L91
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1003   .text.FLT_getTimeout:0000028e .L147
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:936    .text.FLT_getTimeout:00000224 .L160
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:773    .text.FLT_getTimeout:00000123 .L93
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:841    .text.FLT_getTimeout:00000198 .L94
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:626    .text.FLT_getTimeout:0000001d .L95
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:892    .text.FLT_getTimeout:000001ec .L96
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1869   .rodata.FLT_pilotLoadEV_Mgmt:00000000 .L295
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1877   .text.FLT_pilotLoadEV_Mgmt:0000003f .L291
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1896   .text.FLT_pilotLoadEV_Mgmt:00000064 .L292
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1951   .text.FLT_pilotLoadEV_Mgmt:000000c7 .L293
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1985   .text.FLT_pilotLoadEV_Mgmt:00000107 .L294
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2312   .rodata.FLT_faultManagement:00000000 .L366
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2327   .text.FLT_faultManagement:0000007f .L362
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2336   .text.FLT_faultManagement:0000008f .L363
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2404   .text.FLT_faultManagement:0000010c .L361
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2381   .text.FLT_faultManagement:000000e7 .L364
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2391   .text.FLT_faultManagement:000000f6 .L365
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3846   .debug_frame:00000000 .Lframe0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:7      .text.FLT_checkForMotorFault:00000000 .LFB19
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:47     .text.FLT_GetVS_timer:00000000 .LFB29
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:95     .text.FLT_Reset_Circuit_Resistor_Fault:00000000 .LFB8
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:126    .text.FLT_Get_Motor_Timeout:00000000 .LFB23
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:183    .text.FLT_PulseCounterStill_Reset:00000000 .LFB5
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:234    .text.FLT_checkLoadEV:00000000 .LFB35
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:356    .text.FLT_Update_warning_proc:00000000 .LFB26
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:414    .text.FLT_checkForSettingFault:00000000 .LFB1
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:438    .text.FLT_safetyBitmapReset:00000000 .LFB2
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:447    .text.FLT_CheckPulseCounterStill:00000000 .LFB4
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:551    .text.FLT_PulseCounterCheckDelay_Mgmt:00000000 .LFB3
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:587    .text.FLT_getTimeout:00000000 .LFB6
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1019   .text.FLT_BLDCUnblock_Mgmt:00000000 .LFB17
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1120   .text.FLT_bldcFaultReset:00000000 .LFB20
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1168   .text.FLT_bldcFaultMgmt:00000000 .LFB15
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1743   .text.FLT_bldcFaultLoadMgmt:00000000 .LFB24
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1833   .text.FLT_pilotLoadEV_Mgmt:00000000 .LFB34
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2018   .text.SFT_Timeout_4Loadrestore_Mgmt:00000000 .LFB36
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2177   .text.FLT_warningSave:00000000 .LFB37
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2230   .text.FLT_faultManagement:00000000 .LFB0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3812   .text.FLT_SafetyBitmap_Cstm_Exclusion:00000000 .LFB38
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3821   .text.FLT_safetyBitmapStandard:00000000 .LFB39
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:9005   .debug_abbrev:00000000 .Ldebug_abbrev0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11490  .debug_str:000006ec .LASF472
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12096  .debug_str:00001b18 .LASF473
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11152  .debug_ranges:00000000 .Ldebug_ranges0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11274  .debug_line:00000000 .Ldebug_line0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11340  .debug_str:00000222 .LASF0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11516  .debug_str:000007e5 .LASF2
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11912  .debug_str:000014c0 .LASF1
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12054  .debug_str:000019ab .LASF3
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12142  .debug_str:00001ca2 .LASF4
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11482  .debug_str:000006bd .LASF5
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12014  .debug_str:0000183e .LASF6
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12026  .debug_str:000018a7 .LASF7
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11924  .debug_str:00001520 .LASF8
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11526  .debug_str:00000828 .LASF9
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11764  .debug_str:00000f96 .LASF10
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11724  .debug_str:00000e4f .LASF11
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12058  .debug_str:000019c4 .LASF12
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11662  .debug_str:00000c78 .LASF13
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12134  .debug_str:00001c5c .LASF14
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11604  .debug_str:00000ab2 .LASF15
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11446  .debug_str:000005bc .LASF20
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11476  .debug_str:0000069f .LASF16
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11776  .debug_str:00001017 .LASF17
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11518  .debug_str:000007ed .LASF18
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12010  .debug_str:0000181f .LASF19
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11878  .debug_str:0000139c .LASF21
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11644  .debug_str:00000bec .LASF22
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11288  .debug_str:0000006e .LASF23
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11946  .debug_str:000015e5 .LASF24
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11678  .debug_str:00000d04 .LASF25
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12138  .debug_str:00001c86 .LASF26
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11962  .debug_str:0000166a .LASF27
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11590  .debug_str:00000a49 .LASF28
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12194  .debug_str:00001e97 .LASF29
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11546  .debug_str:000008d9 .LASF30
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11588  .debug_str:00000a41 .LASF32
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12112  .debug_str:00001bbd .LASF31
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11410  .debug_str:0000048b .LASF33
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11876  .debug_str:0000137e .LASF34
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11738  .debug_str:00000eab .LASF43
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11974  .debug_str:000016e5 .LASF35
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11780  .debug_str:00001032 .LASF36
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11438  .debug_str:00000578 .LASF37
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11648  .debug_str:00000bfc .LASF38
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11734  .debug_str:00000e89 .LASF39
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11770  .debug_str:00000fda .LASF40
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12204  .debug_str:00001eda .LASF41
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12118  .debug_str:00001bf0 .LASF42
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11284  .debug_str:0000004c .LASF44
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11356  .debug_str:000002a2 .LASF45
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12056  .debug_str:000019b4 .LASF46
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11444  .debug_str:000005ab .LASF47
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11694  .debug_str:00000d68 .LASF48
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11460  .debug_str:0000062d .LASF49
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11982  .debug_str:00001727 .LASF50
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11936  .debug_str:0000158a .LASF51
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12086  .debug_str:00001a9f .LASF52
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11466  .debug_str:00000656 .LASF53
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11808  .debug_str:0000113c .LASF54
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12230  .debug_str:00001fd2 .LASF55
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11350  .debug_str:0000026a .LASF56
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11786  .debug_str:0000107d .LASF57
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11550  .debug_str:000008f8 .LASF58
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11900  .debug_str:00001461 .LASF59
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11384  .debug_str:0000039d .LASF60
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11406  .debug_str:00000462 .LASF61
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11600  .debug_str:00000a95 .LASF62
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11530  .debug_str:00000859 .LASF63
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11276  .debug_str:00000000 .LASF64
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11836  .debug_str:00001247 .LASF65
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12016  .debug_str:00001850 .LASF66
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11542  .debug_str:000008be .LASF67
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11610  .debug_str:00000ad3 .LASF68
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11552  .debug_str:00000909 .LASF69
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11286  .debug_str:0000005f .LASF70
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11556  .debug_str:0000093a .LASF71
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11430  .debug_str:0000052f .LASF72
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11998  .debug_str:000017cc .LASF73
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11510  .debug_str:000007b8 .LASF74
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11576  .debug_str:000009cf .LASF75
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11598  .debug_str:00000a82 .LASF76
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12032  .debug_str:000018d3 .LASF77
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11426  .debug_str:00000509 .LASF78
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11362  .debug_str:000002de .LASF79
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11578  .debug_str:000009ea .LASF80
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11942  .debug_str:000015c5 .LASF81
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11988  .debug_str:00001765 .LASF82
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12108  .debug_str:00001bad .LASF83
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12100  .debug_str:00001b6a .LASF84
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11980  .debug_str:00001713 .LASF85
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11714  .debug_str:00000dff .LASF86
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12214  .debug_str:00001f33 .LASF87
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11652  .debug_str:00000c1c .LASF88
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11434  .debug_str:00000556 .LASF89
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11596  .debug_str:00000a76 .LASF90
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11810  .debug_str:0000114b .LASF91
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11458  .debug_str:00000621 .LASF92
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11812  .debug_str:00001161 .LASF93
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11968  .debug_str:000016bb .LASF94
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12218  .debug_str:00001f54 .LASF95
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11314  .debug_str:00000157 .LASF96
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12186  .debug_str:00001e64 .LASF97
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11524  .debug_str:00000815 .LASF98
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11282  .debug_str:00000035 .LASF99
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11958  .debug_str:0000164f .LASF100
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11838  .debug_str:0000125d .LASF101
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11292  .debug_str:0000007c .LASF102
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12224  .debug_str:00001f94 .LASF103
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12196  .debug_str:00001eaa .LASF104
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12140  .debug_str:00001c99 .LASF105
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12002  .debug_str:000017e7 .LASF106
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11478  .debug_str:000006a4 .LASF107
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11442  .debug_str:0000059a .LASF108
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11956  .debug_str:0000163e .LASF109
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11700  .debug_str:00000d9f .LASF110
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11934  .debug_str:0000157d .LASF111
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11372  .debug_str:0000033e .LASF112
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11894  .debug_str:00001444 .LASF113
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11376  .debug_str:00000354 .LASF114
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11720  .debug_str:00000e2e .LASF115
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12150  .debug_str:00001cda .LASF116
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11400  .debug_str:00000436 .LASF117
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11300  .debug_str:000000db .LASF118
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12200  .debug_str:00001ec0 .LASF119
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11726  .debug_str:00000e57 .LASF120
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11630  .debug_str:00000b78 .LASF121
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11492  .debug_str:00000712 .LASF122
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11866  .debug_str:0000132f .LASF123
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11522  .debug_str:0000080c .LASF124
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12006  .debug_str:00001805 .LASF125
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12084  .debug_str:00001a8a .LASF126
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11862  .debug_str:00001305 .LASF127
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11794  .debug_str:000010c4 .LASF128
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11864  .debug_str:0000131e .LASF129
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11436  .debug_str:00000566 .LASF130
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12028  .debug_str:000018af .LASF131
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12192  .debug_str:00001e86 .LASF132
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11938  .debug_str:0000159e .LASF133
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11560  .debug_str:00000961 .LASF134
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11624  .debug_str:00000b56 .LASF135
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11840  .debug_str:00001269 .LASF136
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11574  .debug_str:000009c0 .LASF137
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11922  .debug_str:00001513 .LASF138
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11952  .debug_str:0000161c .LASF139
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11538  .debug_str:000008ac .LASF140
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11324  .debug_str:0000019f .LASF141
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12072  .debug_str:00001a30 .LASF142
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11428  .debug_str:00000524 .LASF143
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11802  .debug_str:00001104 .LASF144
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11474  .debug_str:0000068d .LASF145
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12040  .debug_str:00001924 .LASF146
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11848  .debug_str:000012a3 .LASF147
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11414  .debug_str:000004ab .LASF148
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11454  .debug_str:000005ff .LASF149
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11418  .debug_str:000004d5 .LASF150
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12198  .debug_str:00001eb0 .LASF151
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12080  .debug_str:00001a60 .LASF152
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11620  .debug_str:00000b3f .LASF153
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12172  .debug_str:00001ddb .LASF154
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11842  .debug_str:00001278 .LASF155
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12078  .debug_str:00001a56 .LASF156
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11342  .debug_str:0000022f .LASF157
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11906  .debug_str:0000149b .LASF158
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12088  .debug_str:00001ab9 .LASF159
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12046  .debug_str:00001953 .LASF160
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11626  .debug_str:00000b5e .LASF161
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11708  .debug_str:00000dc7 .LASF162
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12210  .debug_str:00001f14 .LASF163
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11994  .debug_str:000017ba .LASF164
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11718  .debug_str:00000e25 .LASF165
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11424  .debug_str:000004fc .LASF212
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11318  .debug_str:00000176 .LASF166
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12038  .debug_str:00001913 .LASF167
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11920  .debug_str:00001500 .LASF168
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11366  .debug_str:0000030c .LASF169
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12008  .debug_str:0000180a .LASF170
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11308  .debug_str:00000124 .LASF171
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11470  .debug_str:00000670 .LASF172
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12110  .debug_str:00001bb6 .LASF173
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11382  .debug_str:0000038e .LASF174
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11698  .debug_str:00000d8c .LASF175
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11828  .debug_str:000011fb .LASF176
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11572  .debug_str:000009b4 .LASF177
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11928  .debug_str:00001543 .LASF178
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11562  .debug_str:00000966 .LASF179
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11732  .debug_str:00000e7e .LASF180
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12022  .debug_str:00001880 .LASF181
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11746  .debug_str:00000ef2 .LASF182
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11686  .debug_str:00000d2b .LASF183
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11638  .debug_str:00000bb3 .LASF184
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12166  .debug_str:00001d9f .LASF185
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11850  .debug_str:000012b4 .LASF186
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11852  .debug_str:000012cb .LASF187
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11540  .debug_str:000008b5 .LASF188
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11728  .debug_str:00000e5e .LASF189
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11368  .debug_str:0000031d .LASF190
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11744  .debug_str:00000edf .LASF191
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12182  .debug_str:00001e39 .LASF192
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11396  .debug_str:00000407 .LASF193
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11632  .debug_str:00000b7d .LASF194
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12184  .debug_str:00001e52 .LASF195
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11592  .debug_str:00000a57 .LASF196
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11312  .debug_str:00000140 .LASF197
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11902  .debug_str:00001476 .LASF198
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11404  .debug_str:00000452 .LASF199
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12106  .debug_str:00001b9c .LASF200
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12216  .debug_str:00001f39 .LASF201
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11278  .debug_str:00000018 .LASF202
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11352  .debug_str:0000027f .LASF203
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12018  .debug_str:00001860 .LASF204
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12188  .debug_str:00001e6d .LASF205
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12094  .debug_str:00001b06 .LASF206
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11452  .debug_str:000005e7 .LASF207
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11514  .debug_str:000007cd .LASF208
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11582  .debug_str:00000a10 .LASF209
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11348  .debug_str:00000261 .LASF210
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12062  .debug_str:000019e4 .LASF211
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11992  .debug_str:0000178f .LASF213
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11964  .debug_str:0000167c .LASF214
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12158  .debug_str:00001d2a .LASF215
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11420  .debug_str:000004da .LASF216
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11484  .debug_str:000006c6 .LASF217
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11742  .debug_str:00000ec7 .LASF218
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11332  .debug_str:000001de .LASF219
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11768  .debug_str:00000fc3 .LASF220
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11580  .debug_str:00000a06 .LASF221
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11860  .debug_str:000012fd .LASF222
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11756  .debug_str:00000f44 .LASF223
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11940  .debug_str:000015b3 .LASF224
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11904  .debug_str:00001481 .LASF225
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12164  .debug_str:00001d87 .LASF226
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11358  .debug_str:000002b1 .LASF227
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11760  .debug_str:00000f66 .LASF228
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11566  .debug_str:00000989 .LASF229
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11512  .debug_str:000007c4 .LASF230
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11826  .debug_str:000011ed .LASF231
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11472  .debug_str:00000680 .LASF232
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11914  .debug_str:000014ca .LASF233
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12162  .debug_str:00001d70 .LASF234
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11824  .debug_str:000011e0 .LASF235
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12000  .debug_str:000017dd .LASF236
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11722  .debug_str:00000e3f .LASF237
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11788  .debug_str:00001098 .LASF238
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11908  .debug_str:000014a9 .LASF239
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12030  .debug_str:000018c5 .LASF240
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11970  .debug_str:000016d3 .LASF241
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11874  .debug_str:00001376 .LASF242
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11758  .debug_str:00000f5e .LASF243
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12048  .debug_str:00001965 .LASF244
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12104  .debug_str:00001b8e .LASF245
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11498  .debug_str:0000074c .LASF246
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11740  .debug_str:00000ebd .LASF247
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11486  .debug_str:000006d0 .LASF248
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11930  .debug_str:00001550 .LASF249
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11326  .debug_str:000001ac .LASF250
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11868  .debug_str:00001338 .LASF251
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11290  .debug_str:00000076 .LASF252
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12060  .debug_str:000019d2 .LASF253
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11752  .debug_str:00000f18 .LASF254
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11502  .debug_str:00000776 .LASF255
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11402  .debug_str:00000443 .LASF256
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12168  .debug_str:00001db1 .LASF257
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11736  .debug_str:00000e9e .LASF258
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11606  .debug_str:00000ab9 .LASF259
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12152  .debug_str:00001cea .LASF260
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11656  .debug_str:00000c47 .LASF261
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11488  .debug_str:000006dc .LASF262
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11608  .debug_str:00000acb .LASF263
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11628  .debug_str:00000b6f .LASF264
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11790  .debug_str:000010a9 .LASF265
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11508  .debug_str:000007b0 .LASF266
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12064  .debug_str:000019f3 .LASF267
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11586  .debug_str:00000a32 .LASF268
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11544  .debug_str:000008cd .LASF269
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12122  .debug_str:00001c0e .LASF270
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12098  .debug_str:00001b5a .LASF271
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12160  .debug_str:00001d54 .LASF272
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11710  .debug_str:00000dd1 .LASF273
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11916  .debug_str:000014d7 .LASF274
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11978  .debug_str:00001707 .LASF275
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11468  .debug_str:00000665 .LASF276
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12074  .debug_str:00001a3c .LASF277
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11976  .debug_str:000016fa .LASF278
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11892  .debug_str:00001435 .LASF279
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12114  .debug_str:00001bd7 .LASF280
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12202  .debug_str:00001ec8 .LASF281
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12144  .debug_str:00001cb5 .LASF282
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11898  .debug_str:0000145a .LASF283
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11972  .debug_str:000016db .LASF284
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11854  .debug_str:000012d8 .LASF285
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12146  .debug_str:00001cbd .LASF286
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12176  .debug_str:00001df3 .LASF287
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11870  .debug_str:00001349 .LASF288
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11674  .debug_str:00000cd0 .LASF289
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11676  .debug_str:00000cea .LASF290
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11322  .debug_str:0000018c .LASF291
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12090  .debug_str:00001ac4 .LASF292
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11616  .debug_str:00000b0f .LASF293
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12034  .debug_str:000018eb .LASF294
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11504  .debug_str:0000077c .LASF295
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11306  .debug_str:00000108 .LASF296
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12180  .debug_str:00001e19 .LASF297
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11612  .debug_str:00000ae4 .LASF298
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11716  .debug_str:00000e0d .LASF299
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11564  .debug_str:0000096e .LASF300
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11532  .debug_str:00000870 .LASF301
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11496  .debug_str:0000072f .LASF302
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11528  .debug_str:0000083f .LASF303
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11654  .debug_str:00000c22 .LASF304
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11926  .debug_str:00001529 .LASF305
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11886  .debug_str:000013ee .LASF306
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12050  .debug_str:0000196d .LASF307
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11640  .debug_str:00000bb8 .LASF308
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12092  .debug_str:00001ae8 .LASF309
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11818  .debug_str:000011a3 .LASF310
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11594  .debug_str:00000a5e .LASF311
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11388  .debug_str:000003c1 .LASF312
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11432  .debug_str:0000053e .LASF313
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12154  .debug_str:00001cf4 .LASF314
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11882  .debug_str:000013c4 .LASF315
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11872  .debug_str:0000135f .LASF316
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11766  .debug_str:00000fa4 .LASF317
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11500  .debug_str:0000075a .LASF318
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11636  .debug_str:00000b9d .LASF319
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11394  .debug_str:000003f1 .LASF320
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11774  .debug_str:00001002 .LASF321
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11294  .debug_str:00000081 .LASF322
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11554  .debug_str:00000916 .LASF323
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11380  .debug_str:0000036c .LASF324
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11830  .debug_str:00001211 .LASF325
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12052  .debug_str:0000198d .LASF326
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11360  .debug_str:000002c1 .LASF327
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11844  .debug_str:0000127d .LASF328
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11296  .debug_str:00000098 .LASF329
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11664  .debug_str:00000c7f .LASF330
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11748  .debug_str:00000f01 .LASF331
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11364  .debug_str:000002f9 .LASF332
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12126  .debug_str:00001c23 .LASF333
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11646  .debug_str:00000bf1 .LASF334
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11990  .debug_str:00001776 .LASF335
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11670  .debug_str:00000cac .LASF336
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11856  .debug_str:000012dd .LASF337
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11658  .debug_str:00000c53 .LASF338
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11858  .debug_str:000012ed .LASF339
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12206  .debug_str:00001eef .LASF340
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11494  .debug_str:0000071d .LASF341
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11672  .debug_str:00000cbf .LASF342
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11932  .debug_str:00001567 .LASF345
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11792  .debug_str:000010ba .LASF343
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12070  .debug_str:00001a23 .LASF344
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11398  .debug_str:0000041a .LASF383
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12076  .debug_str:00001a46 .LASF346
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11328  .debug_str:000001c1 .LASF347
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11688  .debug_str:00000d3b .LASF369
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11690  .debug_str:00000d53 .LASF348
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11334  .debug_str:000001f3 .LASF349
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11754  .debug_str:00000f29 .LASF467
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11302  .debug_str:000000e9 .LASF350
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11960  .debug_str:0000165a .LASF458
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11944  .debug_str:000015d9 .LASF351
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11668  .debug_str:00000c9d .LASF352
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11336  .debug_str:000001fb .LASF353
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11440  .debug_str:0000058e .LASF354
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11534  .debug_str:0000088a .LASF355
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:42     .text.FLT_checkForMotorFault:00000024 .LFE19
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11750  .debug_str:00000f11 .LASF357
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10391  .debug_loc:00000000 .LLST0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11614  .debug_str:00000aff .LASF356
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:90     .text.FLT_GetVS_timer:0000002d .LFE29
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10403  .debug_loc:0000001f .LLST1
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10416  .debug_loc:0000003f .LLST2
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10434  .debug_loc:0000006b .LLST3
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12190  .debug_str:00001e7a .LASF358
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:56     .text.FLT_GetVS_timer:00000008 .LVL4
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11782  .debug_str:00001048 .LASF474
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:121    .text.FLT_Reset_Circuit_Resistor_Fault:00000028 .LFE8
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:102    .text.FLT_Reset_Circuit_Resistor_Fault:0000000a .LVL11
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:108    .text.FLT_Reset_Circuit_Resistor_Fault:00000014 .LVL12
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:114    .text.FLT_Reset_Circuit_Resistor_Fault:0000001e .LVL13
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:120    .text.FLT_Reset_Circuit_Resistor_Fault:00000028 .LVL14
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:178    .text.FLT_Get_Motor_Timeout:00000042 .LFE23
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10455  .debug_loc:000000a1 .LLST4
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10468  .debug_loc:000000c1 .LLST5
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10482  .debug_loc:000000e2 .LLST6
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:138    .text.FLT_Get_Motor_Timeout:0000000a .LBB7
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:157    .text.FLT_Get_Motor_Timeout:00000023 .LBE7
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10516  .debug_loc:0000013a .LLST7
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:139    .text.FLT_Get_Motor_Timeout:0000000a .LBB8
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:156    .text.FLT_Get_Motor_Timeout:00000023 .LBE8
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:142    .text.FLT_Get_Motor_Timeout:0000000e .LVL18
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:160    .text.FLT_Get_Motor_Timeout:00000027 .LVL21
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:229    .text.FLT_PulseCounterStill_Reset:00000052 .LFE5
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:212    .text.FLT_PulseCounterStill_Reset:00000039 .LBB11
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:219    .text.FLT_PulseCounterStill_Reset:00000040 .LBE11
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:209    .text.FLT_PulseCounterStill_Reset:00000036 .LVL24
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:228    .text.FLT_PulseCounterStill_Reset:00000052 .LVL25
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:351    .text.FLT_checkLoadEV:000000a7 .LFE35
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10531  .debug_loc:00000163 .LLST8
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10544  .debug_loc:00000183 .LLST9
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:300    .text.FLT_checkLoadEV:00000068 .LBB15
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:338    .text.FLT_checkLoadEV:0000009b .LBE15
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:301    .text.FLT_checkLoadEV:00000068 .LBB16
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:337    .text.FLT_checkLoadEV:0000009b .LBE16
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:313    .text.FLT_checkLoadEV:0000007e .LVL35
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:326    .text.FLT_checkLoadEV:0000008e .LVL36
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:329    .text.FLT_checkLoadEV:00000092 .LVL37
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:244    .text.FLT_checkLoadEV:0000000b .LVL28
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:248    .text.FLT_checkLoadEV:00000012 .LVL29
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:274    .text.FLT_checkLoadEV:00000047 .LVL31
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:286    .text.FLT_checkLoadEV:00000057 .LVL33
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:292    .text.FLT_checkLoadEV:00000060 .LVL34
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:408    .text.FLT_Update_warning_proc:0000004f .LFE26
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10566  .debug_loc:000001ba .LLST10
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:367    .text.FLT_Update_warning_proc:00000010 .LBB19
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12068  .debug_str:00001a0a .LASF475
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:432    .text.FLT_checkForSettingFault:00000017 .LFE1
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11822  .debug_str:000011ca .LASF402
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:441    .text.FLT_safetyBitmapReset:00000001 .LFE2
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:545    .text.FLT_CheckPulseCounterStill:0000008f .LFE4
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10579  .debug_loc:000001da .LLST11
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10592  .debug_loc:000001fa .LLST12
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:516    .text.FLT_CheckPulseCounterStill:0000006c .LBB25
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:537    .text.FLT_CheckPulseCounterStill:00000088 .LBE25
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:517    .text.FLT_CheckPulseCounterStill:0000006c .LBB26
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:536    .text.FLT_CheckPulseCounterStill:00000088 .LBE26
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:521    .text.FLT_CheckPulseCounterStill:00000073 .LVL44
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:525    .text.FLT_CheckPulseCounterStill:0000007a .LVL45
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:531    .text.FLT_CheckPulseCounterStill:00000085 .LVL46
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:460    .text.FLT_CheckPulseCounterStill:0000000e .LVL39
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:475    .text.FLT_CheckPulseCounterStill:0000002a .LVL40
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:479    .text.FLT_CheckPulseCounterStill:00000031 .LVL41
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:501    .text.FLT_CheckPulseCounterStill:0000005b .LVL42
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:509    .text.FLT_CheckPulseCounterStill:00000064 .LVL43
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12170  .debug_str:00001dbb .LASF362
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:581    .text.FLT_PulseCounterCheckDelay_Mgmt:0000002b .LFE3
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:556    .text.FLT_PulseCounterCheckDelay_Mgmt:00000007 .LVL47
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:564    .text.FLT_PulseCounterCheckDelay_Mgmt:00000012 .LVL48
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:568    .text.FLT_PulseCounterCheckDelay_Mgmt:00000018 .LVL49
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:572    .text.FLT_PulseCounterCheckDelay_Mgmt:0000001e .LVL50
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:580    .text.FLT_PulseCounterCheckDelay_Mgmt:0000002b .LVL51
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11820  .debug_str:000011bb .LASF476
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1013   .text.FLT_getTimeout:00000295 .LFE6
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10603  .debug_loc:00000218 .LLST13
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10616  .debug_loc:00000238 .LLST14
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10630  .debug_loc:00000259 .LLST15
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11950  .debug_str:00001610 .LASF359
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10751  .debug_loc:00000371 .LLST16
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10850  .debug_loc:00000481 .LLST17
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:655    .text.FLT_getTimeout:0000005b .LVL55
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:680    .text.FLT_getTimeout:0000008a .LVL57
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:704    .text.FLT_getTimeout:000000a9 .LVL59
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:730    .text.FLT_getTimeout:000000db .LVL61
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:776    .text.FLT_getTimeout:00000127 .LVL65
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:818    .text.FLT_getTimeout:0000016a .LVL67
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:848    .text.FLT_getTimeout:000001a9 .LVL69
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:868    .text.FLT_getTimeout:000001c1 .LVL71
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:896    .text.FLT_getTimeout:000001f2 .LVL73
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:912    .text.FLT_getTimeout:00000208 .LVL75
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:921    .text.FLT_getTimeout:00000214 .LVL76
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:947    .text.FLT_getTimeout:00000234 .LVL79
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12220  .debug_str:00001f64 .LASF360
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11316  .debug_str:0000016c .LASF361
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12226  .debug_str:00001fa0 .LASF363
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1114   .text.FLT_BLDCUnblock_Mgmt:00000093 .LFE17
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10862  .debug_loc:000004a0 .LLST18
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10875  .debug_loc:000004c0 .LLST19
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11370  .debug_str:00000331 .LASF364
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1025   .text.FLT_BLDCUnblock_Mgmt:00000002 .LBB29
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1069   .text.FLT_BLDCUnblock_Mgmt:0000004a .LBE29
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10889  .debug_loc:000004e1 .LLST20
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1026   .text.FLT_BLDCUnblock_Mgmt:00000002 .LBB30
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1068   .text.FLT_BLDCUnblock_Mgmt:0000004a .LBE30
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10903  .debug_loc:00000502 .LLST21
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1044   .text.FLT_BLDCUnblock_Mgmt:00000027 .LVL86
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1072   .text.FLT_BLDCUnblock_Mgmt:0000004e .LVL90
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1102   .text.FLT_BLDCUnblock_Mgmt:00000083 .LVL91
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11712  .debug_str:00000dec .LASF365
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1162   .text.FLT_bldcFaultReset:0000004b .LFE20
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1149   .text.FLT_bldcFaultReset:0000002f .LVL92
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11888  .debug_str:00001407 .LASF366
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11684  .debug_str:00000d21 .LASF367
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11568  .debug_str:0000099a .LASF368
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12044  .debug_str:00001940 .LASF370
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11330  .debug_str:000001d1 .LASF371
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11730  .debug_str:00000e74 .LASF372
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11884  .debug_str:000013dc .LASF373
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11880  .debug_str:000013ae .LASF374
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11772  .debug_str:00000ff0 .LASF376
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1737   .text.FLT_bldcFaultMgmt:000003f0 .LFE15
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10924  .debug_loc:00000538 .LLST22
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11800  .debug_str:000010f4 .LASF375
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1222   .text.FLT_bldcFaultMgmt:0000006a .LBB39
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1314   .text.FLT_bldcFaultMgmt:000000f8 .LBE39
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1376   .text.FLT_bldcFaultMgmt:00000160 .LBB44
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1387   .text.FLT_bldcFaultMgmt:0000016c .LBE44
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1506   .text.FLT_bldcFaultMgmt:0000025c .LBB46
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11954  .debug_str:00001628 .LASF477
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1827   .text.FLT_bldcFaultLoadMgmt:00000090 .LFE24
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10937  .debug_loc:00000558 .LLST23
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12020  .debug_str:0000186b .LASF377
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2012   .text.FLT_pilotLoadEV_Mgmt:0000012f .LFE34
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10955  .debug_loc:00000584 .LLST24
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11832  .debug_str:00001234 .LASF378
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11378  .debug_str:00000363 .LASF379
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11692  .debug_str:00000d60 .LASF380
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12102  .debug_str:00001b70 .LASF381
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2171   .text.SFT_Timeout_4Loadrestore_Mgmt:0000011f .LFE36
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10973  .debug_loc:000005b0 .LLST25
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11354  .debug_str:00000295 .LASF382
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10987  .debug_loc:000005d1 .LLST26
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2066   .text.SFT_Timeout_4Loadrestore_Mgmt:00000065 .LVL94
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2091   .text.SFT_Timeout_4Loadrestore_Mgmt:00000087 .LVL98
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2095   .text.SFT_Timeout_4Loadrestore_Mgmt:0000008e .LVL99
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2110   .text.SFT_Timeout_4Loadrestore_Mgmt:000000a9 .LVL100
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2154   .text.SFT_Timeout_4Loadrestore_Mgmt:00000107 .LVL101
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2159   .text.SFT_Timeout_4Loadrestore_Mgmt:0000010e .LVL102
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2224   .text.FLT_warningSave:00000035 .LFE37
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10998  .debug_loc:000005ef .LLST27
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11016  .debug_loc:0000061b .LLST28
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11027  .debug_loc:00000639 .LLST29
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11045  .debug_loc:00000665 .LLST30
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2193   .text.FLT_warningSave:00000012 .LBB55
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2221   .text.FLT_warningSave:00000032 .LBE55
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11063  .debug_loc:00000691 .LLST31
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11070  .debug_loc:000006a4 .LLST32
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11077  .debug_loc:000006b7 .LLST33
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2194   .text.FLT_warningSave:00000012 .LBB56
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2220   .text.FLT_warningSave:00000032 .LBE56
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2217   .text.FLT_warningSave:00000032 .LVL106
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2189   .text.FLT_warningSave:0000000e .LVL104
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12024  .debug_str:00001891 .LASF384
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12042  .debug_str:0000192a .LASF385
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11784  .debug_str:00001069 .LASF386
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11412  .debug_str:000004a5 .LASF387
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12228  .debug_str:00001fb5 .LASF478
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11280  .debug_str:00000022 .LASF388
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11984  .debug_str:00001741 .LASF389
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11346  .debug_str:00000248 .LASF390
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12132  .debug_str:00001c50 .LASF391
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11806  .debug_str:00001126 .LASF392
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11622  .debug_str:00000b44 .LASF393
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11456  .debug_str:0000060d .LASF394
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11320  .debug_str:0000017c .LASF395
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11948  .debug_str:000015f7 .LASF396
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11918  .debug_str:000014ea .LASF397
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12222  .debug_str:00001f78 .LASF398
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11422  .debug_str:000004e6 .LASF399
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12066  .debug_str:000019ff .LASF400
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11462  .debug_str:0000063a .LASF401
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3806   .text.FLT_faultManagement:00000b64 .LFE0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11084  .debug_loc:000006ca .LLST34
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2234   .text.FLT_faultManagement:00000002 .LBB85
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2295   .text.FLT_faultManagement:0000005c .LBE85
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2296   .text.FLT_faultManagement:0000005c .LBB89
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2365   .text.FLT_faultManagement:000000ce .LBB91
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2376   .text.FLT_faultManagement:000000e2 .LBE91
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2407   .text.FLT_faultManagement:0000010c .LBB94
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2450   .text.FLT_faultManagement:00000152 .LBE94
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2451   .text.FLT_faultManagement:00000152 .LBB96
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2495   .text.FLT_faultManagement:00000190 .LBE96
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2496   .text.FLT_faultManagement:00000190 .LBB98
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2517   .text.FLT_faultManagement:000001ac .LBE98
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2518   .text.FLT_faultManagement:000001ac .LBB100
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2539   .text.FLT_faultManagement:000001c8 .LBE100
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2563   .text.FLT_faultManagement:000001f9 .LBB102
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2907   .text.FLT_faultManagement:00000496 .LBE102
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2914   .text.FLT_faultManagement:000004a7 .LBB107
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3194   .text.FLT_faultManagement:000006cc .LBE107
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3195   .text.FLT_faultManagement:000006cc .LBB112
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3232   .text.FLT_faultManagement:00000706 .LBE112
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3239   .text.FLT_faultManagement:00000715 .LBB116
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3510   .text.FLT_faultManagement:00000932 .LBE116
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3511   .text.FLT_faultManagement:00000932 .LBB120
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3599   .text.FLT_faultManagement:000009ce .LBE120
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3600   .text.FLT_faultManagement:000009ce .LBB126
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12156  .debug_str:00001d0a .LASF403
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3815   .text.FLT_SafetyBitmap_Cstm_Exclusion:00000001 .LFE38
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11338  .debug_str:00000209 .LASF404
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3824   .text.FLT_safetyBitmapStandard:00000001 .LFE39
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12120  .debug_str:00001c06 .LASF405
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11986  .debug_str:00001754 .LASF406
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11846  .debug_str:00001296 .LASF407
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11896  .debug_str:0000144b .LASF408
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12174  .debug_str:00001de1 .LASF409
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12212  .debug_str:00001f22 .LASF410
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11816  .debug_str:0000118e .LASF411
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11834  .debug_str:0000123c .LASF412
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12004  .debug_str:000017fd .LASF413
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11374  .debug_str:00000348 .LASF414
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11416  .debug_str:000004c0 .LASF415
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11464  .debug_str:0000064e .LASF416
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11480  .debug_str:000006b6 .LASF417
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12124  .debug_str:00001c18 .LASF418
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11344  .debug_str:0000023b .LASF419
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11796  .debug_str:000010d8 .LASF420
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11520  .debug_str:000007fb .LASF421
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11304  .debug_str:000000fc .LASF422
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11536  .debug_str:000008a1 .LASF423
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11682  .debug_str:00000d13 .LASF424
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11584  .debug_str:00000a24 .LASF425
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12036  .debug_str:00001900 .LASF426
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11762  .debug_str:00000f86 .LASF427
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11642  .debug_str:00000bd7 .LASF428
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11408  .debug_str:00000475 .LASF429
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11890  .debug_str:0000141a .LASF430
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11966  .debug_str:000016a5 .LASF431
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12178  .debug_str:00001e01 .LASF432
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11618  .debug_str:00000b23 .LASF433
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11448  .debug_str:000005c3 .LASF434
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11634  .debug_str:00000b91 .LASF435
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11798  .debug_str:000010e5 .LASF436
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11548  .debug_str:000008ec .LASF437
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11696  .debug_str:00000d7f .LASF438
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11680  .debug_str:00000d09 .LASF439
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11804  .debug_str:00001112 .LASF440
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12128  .debug_str:00001c31 .LASF441
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11650  .debug_str:00000c11 .LASF442
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12116  .debug_str:00001be5 .LASF443
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11660  .debug_str:00000c69 .LASF444
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11666  .debug_str:00000c8d .LASF445
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11778  .debug_str:00001022 .LASF446
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11390  .debug_str:000003d1 .LASF447
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11602  .debug_str:00000aa8 .LASF448
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11450  .debug_str:000005d6 .LASF449
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11392  .debug_str:000003df .LASF450
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11506  .debug_str:0000079e .LASF451
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11386  .debug_str:000003b2 .LASF452
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12148  .debug_str:00001ccd .LASF453
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12232  .debug_str:00001fde .LASF454
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11702  .debug_str:00000daf .LASF455
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11704  .debug_str:00000db7 .LASF456
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11706  .debug_str:00000dbf .LASF457
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12012  .debug_str:00001828 .LASF460
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11558  .debug_str:00000948 .LASF459
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11298  .debug_str:000000bf .LASF461
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11910  .debug_str:000014b1 .LASF462
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11570  .debug_str:000009a5 .LASF463
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11310  .debug_str:00000136 .LASF464
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11814  .debug_str:00001173 .LASF465
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:11996  .debug_str:000017c3 .LASF466
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12208  .debug_str:00001f05 .LASF468
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12082  .debug_str:00001a74 .LASF469
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12136  .debug_str:00001c68 .LASF470
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:12130  .debug_str:00001c3c .LASF471
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:10     .text.FLT_checkForMotorFault:00000000 .LVL0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:39     .text.FLT_checkForMotorFault:00000023 .LVL1
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:51     .text.FLT_GetVS_timer:00000002 .LCFI0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:49     .text.FLT_GetVS_timer:00000000 .LVL2
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:71     .text.FLT_GetVS_timer:0000001e .LVL6
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:53     .text.FLT_GetVS_timer:00000004 .LVL3
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:76     .text.FLT_GetVS_timer:00000023 .LVL7
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:78     .text.FLT_GetVS_timer:00000024 .LVL8
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:83     .text.FLT_GetVS_timer:00000028 .LVL9
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:88     .text.FLT_GetVS_timer:0000002a .LVL10
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:130    .text.FLT_Get_Motor_Timeout:00000002 .LCFI1
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:128    .text.FLT_Get_Motor_Timeout:00000000 .LVL15
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:144    .text.FLT_Get_Motor_Timeout:00000010 .LVL19
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:154    .text.FLT_Get_Motor_Timeout:00000023 .LVL20
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:162    .text.FLT_Get_Motor_Timeout:00000029 .LVL22
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:171    .text.FLT_Get_Motor_Timeout:00000039 .LVL23
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:137    .text.FLT_Get_Motor_Timeout:0000000a .LVL17
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:238    .text.FLT_checkLoadEV:00000002 .LCFI2
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:236    .text.FLT_checkLoadEV:00000000 .LVL26
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:242    .text.FLT_checkLoadEV:00000007 .LVL27
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:253    .text.FLT_checkLoadEV:00000019 .LVL30
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:277    .text.FLT_checkLoadEV:0000004a .LVL32
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:359    .text.FLT_Update_warning_proc:00000002 .LCFI3
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:452    .text.FLT_CheckPulseCounterStill:00000002 .LCFI4
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:449    .text.FLT_CheckPulseCounterStill:00000000 .LVL38
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:591    .text.FLT_getTimeout:00000002 .LCFI5
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:589    .text.FLT_getTimeout:00000000 .LVL52
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:598    .text.FLT_getTimeout:00000009 .LVL54
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:676    .text.FLT_getTimeout:00000086 .LVL56
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:700    .text.FLT_getTimeout:000000a5 .LVL58
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:726    .text.FLT_getTimeout:000000d7 .LVL60
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:764    .text.FLT_getTimeout:00000118 .LVL62
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:768    .text.FLT_getTimeout:0000011a .LVL63
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:772    .text.FLT_getTimeout:00000123 .LVL64
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:808    .text.FLT_getTimeout:0000015b .LVL66
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:860    .text.FLT_getTimeout:000001b6 .LVL70
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:891    .text.FLT_getTimeout:000001ec .LVL72
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:903    .text.FLT_getTimeout:000001fc .LVL74
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:928    .text.FLT_getTimeout:0000021d .LVL77
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:934    .text.FLT_getTimeout:00000223 .LVL78
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:840    .text.FLT_getTimeout:00000198 .LVL68
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1002   .text.FLT_getTimeout:0000028e .LVL80
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1006   .text.FLT_getTimeout:00000290 .LVL81
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:593    .text.FLT_getTimeout:00000004 .LVL53
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1011   .text.FLT_getTimeout:00000292 .LVL82
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1023   .text.FLT_BLDCUnblock_Mgmt:00000002 .LCFI6
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1021   .text.FLT_BLDCUnblock_Mgmt:00000000 .LVL83
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1041   .text.FLT_BLDCUnblock_Mgmt:00000021 .LVL85
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1024   .text.FLT_BLDCUnblock_Mgmt:00000002 .LVL84
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1046   .text.FLT_BLDCUnblock_Mgmt:00000029 .LVL87
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1048   .text.FLT_BLDCUnblock_Mgmt:0000002b .LVL88
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1063   .text.FLT_BLDCUnblock_Mgmt:00000048 .LVL89
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1171   .text.FLT_bldcFaultMgmt:00000002 .LCFI7
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1753   .text.FLT_bldcFaultLoadMgmt:00000012 .LCFI8
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1825   .text.FLT_bldcFaultLoadMgmt:0000008f .LCFI9
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1836   .text.FLT_pilotLoadEV_Mgmt:00000002 .LCFI10
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1838   .text.FLT_pilotLoadEV_Mgmt:00000004 .LCFI11
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2020   .text.SFT_Timeout_4Loadrestore_Mgmt:00000000 .LVL93
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2079   .text.SFT_Timeout_4Loadrestore_Mgmt:0000007b .LVL95
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2081   .text.SFT_Timeout_4Loadrestore_Mgmt:0000007c .LVL96
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2087   .text.SFT_Timeout_4Loadrestore_Mgmt:00000080 .LVL97
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2181   .text.FLT_warningSave:00000002 .LCFI12
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2183   .text.FLT_warningSave:00000004 .LCFI13
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2179   .text.FLT_warningSave:00000000 .LVL103
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2192   .text.FLT_warningSave:00000012 .LVL105
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2233   .text.FLT_faultManagement:00000002 .LCFI14
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:4198   .debug_info:00000000 .Ldebug_info0
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:396    .text.FLT_Update_warning_proc:00000046 .LBE19
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:399    .text.FLT_Update_warning_proc:00000048 .LBB22
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:405    .text.FLT_Update_warning_proc:0000004c .LBE22
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1221   .text.FLT_bldcFaultMgmt:0000006a .LBB38
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1616   .text.FLT_bldcFaultMgmt:0000031e .LBE38
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1719   .text.FLT_bldcFaultMgmt:000003d6 .LBB52
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1734   .text.FLT_bldcFaultMgmt:000003ed .LBE52
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1223   .text.FLT_bldcFaultMgmt:0000006a .LBB40
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1236   .text.FLT_bldcFaultMgmt:00000084 .LBE40
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1239   .text.FLT_bldcFaultMgmt:00000087 .LBB41
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1257   .text.FLT_bldcFaultMgmt:000000a4 .LBE41
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1260   .text.FLT_bldcFaultMgmt:000000a7 .LBB42
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1273   .text.FLT_bldcFaultMgmt:000000b8 .LBE42
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1276   .text.FLT_bldcFaultMgmt:000000bc .LBB43
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1313   .text.FLT_bldcFaultMgmt:000000f8 .LBE43
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1606   .text.FLT_bldcFaultMgmt:0000030c .LBE46
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1720   .text.FLT_bldcFaultMgmt:000003d6 .LBB51
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1733   .text.FLT_bldcFaultMgmt:000003ed .LBE51
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1507   .text.FLT_bldcFaultMgmt:0000025c .LBB47
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1526   .text.FLT_bldcFaultMgmt:0000027f .LBE47
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1531   .text.FLT_bldcFaultMgmt:00000286 .LBB48
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1579   .text.FLT_bldcFaultMgmt:000002e0 .LBE48
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1583   .text.FLT_bldcFaultMgmt:000002e5 .LBB49
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1605   .text.FLT_bldcFaultMgmt:0000030c .LBE49
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1721   .text.FLT_bldcFaultMgmt:000003d6 .LBB50
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:1732   .text.FLT_bldcFaultMgmt:000003ed .LBE50
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2406   .text.FLT_faultManagement:0000010c .LBE89
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3791   .text.FLT_faultManagement:00000b50 .LBB131
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3803   .text.FLT_faultManagement:00000b61 .LBE131
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2297   .text.FLT_faultManagement:0000005c .LBB90
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2405   .text.FLT_faultManagement:0000010c .LBE90
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3792   .text.FLT_faultManagement:00000b50 .LBB93
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3802   .text.FLT_faultManagement:00000b61 .LBE93
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2564   .text.FLT_faultManagement:000001f9 .LBB103
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2755   .text.FLT_faultManagement:00000379 .LBE103
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2759   .text.FLT_faultManagement:00000381 .LBB104
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2770   .text.FLT_faultManagement:00000398 .LBE104
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2774   .text.FLT_faultManagement:000003a0 .LBB105
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2860   .text.FLT_faultManagement:00000447 .LBE105
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2864   .text.FLT_faultManagement:0000044f .LBB106
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:2906   .text.FLT_faultManagement:00000496 .LBE106
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3760   .text.FLT_faultManagement:00000b25 .LBE126
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3763   .text.FLT_faultManagement:00000b27 .LBB130
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3790   .text.FLT_faultManagement:00000b50 .LBE130
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3601   .text.FLT_faultManagement:000009ce .LBB127
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3614   .text.FLT_faultManagement:000009f5 .LBE127
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3618   .text.FLT_faultManagement:000009fd .LBB128
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3759   .text.FLT_faultManagement:00000b25 .LBE128
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3764   .text.FLT_faultManagement:00000b27 .LBB129
C:\Users\Andrea\AppData\Local\Temp\ccoXgE1e.s:3789   .text.FLT_faultManagement:00000b50 .LBE129

UNDEFINED SYMBOLS
_FaultMgmt_Data
_SPV_isAutotestRunning
_Tab_VSFaultSpecial
_Tab_VSFault
_FLT_ResetFaultDetectProc
_SPV_isAutotestOrTestRunning
_Tab_ExtDevFaultDrainSpecial
_Tab_ExtDevFaultDrain
_Tab_ExtDevFault_Special
_Tab_ExtDevFault
_Flags_1
_HWC_Flags
_FltWarning
_FltFlagsKO
_Tab_LoadFault_Special
_Tab_LoadFault
_SWTC_SetMValue
_SWTC_Run
_SWTC_IsExpired
_LoadEVCheck
_PulseLoaded
_SWTC_SetSValue
_SWTC_Stop
_PM_PulseCounter_GetWarning
_FLT_checkForCurrentFault
_FLT_manageFault
_CurrentFault
_SWTC_GetRemainingTime
_PM_PulseCounter_Reset_Warning
_Tab_MainBoardFault_Special
_Tab_MainBoardFault
_Tab_HeatFault_Special
_Tab_HeatFault
_FltBLDCUnblock
_FltBLDCComm_Tout
_FltBLDCMotor_Tout
_RegDev_Pos
_LoadsReq_Old
_Interpreter_Data
_CP_GetExternalBoardCommStatus
_BLDC_PumpReq_New
_BLDC_Pump_InfoBuffer
_CP_ResetExternalBoardCommStatus
_CP_UART_EnableComm
_Res_Pos
_LoadsReq_New
_FltHeatToutData
_Set_SmallCounter
_SftPulseWarn
_Tab_SFT_EV
_LoadEVFltReq_New
_ReadVS_Data
_GICriteria
_Pump_Load_Data
_Tab_HWCVS_data
_EV_Pos
_MachineStatistics
_FLT_lastFaultUpdate
_GIValid
_FltGICriteria
_Consistency_Current
_FltGITemp
_uPDoorStatus
_Flags_3
_SWTC_GetElapsedTime
_Flags_2
_Virtual_Sensor_Value
_FltFlagsVS
_FltLoadToutData
_uP_Load_Data
_FltLoadEVKOStatus

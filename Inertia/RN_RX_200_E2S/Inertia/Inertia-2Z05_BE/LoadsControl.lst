   1                             		.file	"LoadsControl.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.LDC_pulseSeq_Init,"ax",@progbits
   5                             		.global	_LDC_pulseSeq_Init
   7                             	_LDC_pulseSeq_Init:
   8                             	.LFB1:
   9                             		.file 1 "C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules/LoadsControl.c"
   1:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /**
   2:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** Source File 
   3:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
   4:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \file    LoadsControl.c
   5:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \ingroup LoadsControl
   6:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \date    21/02/2008
   7:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \author  Roberto Fioravanti
   8:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \version 1.0.0
   9:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** */
  10:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
  11:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /*
  12:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** Copyright (c) 2004-2008, Indesit Company, IDD.
  13:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** Tutti i diritti sono riservati. All rights reserved.
  14:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** */
  15:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
  16:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* Old Versions
  17:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \version 
  18:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \date    
  19:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \author
  20:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** */
  21:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
  22:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
  23:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /** 
  24:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \note : 
  25:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** */ 
  26:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
  27:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
  28:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* ******** */
  29:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* Includes */
  30:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* ******** */
  31:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
  32:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** #include "CstmHeaders.h"
  33:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
  34:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* ****************** */
  35:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* Defines and Macros */
  36:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* ****************** */
  37:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** #define LDC_SEQ1_TABLE_LEN				3
  38:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
  39:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
  40:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
  41:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
  42:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* *************************** */
  43:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* Typedef, Structs and Unions */
  44:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* *************************** */
  45:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
  46:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /*
  47:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
  48:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** not used
  49:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
  50:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** struct up_Ldc_pulse_setting_data_s
  51:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** {
  52:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****   uint16_t bitmap1;
  53:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****   uint8_t Ton1;
  54:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****   uint8_t Td1:7;
  55:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****   uint8_t S1:1;
  56:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****   uint8_t Toff1;
  57:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****   uint16_t bitmap2;
  58:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****   
  59:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****   uint8_t Ton2;
  60:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****   uint8_t Td2:7;
  61:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****   uint8_t S2:1;
  62:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****   uint8_t Toff2;  
  63:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****   
  64:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** };
  65:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** */
  66:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
  67:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
  68:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* **************************** */
  69:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* Prototype of local functions */
  70:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* **************************** */
  71:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** void LDC_pulseSeq_Init(loadsPulse_Struct *p,SWTC_CountersType indice);
  72:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** void LDC_pulseSeq_Suspend(loadsPulse_Struct *p,SWTC_CountersType indice);
  73:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** bool_t LDC_pulseStepMgmt(loadsPulse_Struct *p, SWTC_CountersType indice);
  74:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** void LDC_pulseLoadMgmt(loadsPulse_Struct const *p);
  75:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** void LDC_activateLoads(uint16_t loadBitmap);
  76:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
  77:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* ****************** */
  78:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* Exported variables */
  79:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* ****************** */
  80:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
  81:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* **************** */
  82:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* Global variables */
  83:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* **************** */
  84:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
  85:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** uint16_t enabledloads_mask;
  86:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
  87:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* ***************** */
  88:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* Exported function */
  89:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* ***************** */
  90:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
  91:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /**
  92:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** Gestisce l'esecuzione del microprogramma LoadsControl.
  93:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** E' possibile attivare carichi in continua o a impulsi.
  94:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** Nella modalit� ad impulsi � possibile specificare il tipo di sequenza e 
  95:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** fino ad un massimo di due set di carichi indipendenti.
  96:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
  97:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** Lo stato dei carichi non selezionati nella/e bitmap viene ignorato.
  98:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
  99:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \param [in] HighStatement specifica l'high statement (opcode +  modificatori F0-F1 + N flag + T fla
 100:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \param [in] LowStatement specifica il low statement (displacement ai dati) del microprogramma.
 101:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****  
 102:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \return S_OK se la condizione di avanzamento passo per il microprogramma � verificata (nel caso d
 103:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** almeno una volta)
 104:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \return S_FALSE se non � ancora verificata
 105:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \return codice di errore in altri casi
 106:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 107:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \par \bSospensione del microprogramma
 108:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** Il microprogramma (ritorma sempre S_FALSE) viene sospeso durante:
 109:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** -porta aperta o timeout di porta aperta
 110:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** -Master rele
 111:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 112:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** In queste condizioni fa eccezione la pompa scarico che pu� continuare ad essere pilotata.
 113:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 114:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 115:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \note   Il controllo sulla sovrapposizione tra le due bitmap bitmap deve essere fatto in Editor.
 116:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 117:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \version		1.0.0
 118:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \date 			26/02/2008
 119:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \author			Roberto Fioravanti
 120:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 121:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 122:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** */
 123:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** uint8_t LDC_uP_LoadsControl_Exe (uint8_t highStatement,uint8_t lowStatement)
 124:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** {
 125:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** Loader_Struct lcDirect_SettingData;
 126:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** uint8_t nRet = S_FALSE;
 127:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** bool_t  suspend;
 128:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 129:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 130:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	if ( (FALSE == Interpreter_Data[0].stepInitialized) || (FALSE == Interpreter_Data[0].optionalStepI
 131:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	{/* Init passo o restore from backup */
 132:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 133:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		switch ( (highStatement & LDC_DRIVE_TYPE_MSK) )
 134:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		{
 135:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 136:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			case LDC_PULSE_DRIVE:
 137:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 138:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				/* LoadsControl con profilo: Init Data */
 139:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				if (BasicLoader(PTR_UP_LOADSCONTROL, lowStatement, &uPLoadsControl_setting_data) != S_OK )
 140:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				{
 141:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					/* Non esegue il uP, ma viene abilitato l'avanzamento passo */
 142:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					nRet = S_OK;
 143:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				}
 144:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				else
 145:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				{
 146:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					/* Dati caricati correttamente: Init */
 147:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 148:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					uP_LoadsControl_Data.status = LOADSCONTROL_INIT;
 149:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 150:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					/* seq #1 */
 151:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					loadsPulseData1.offset = SEQ1_OFFSET;				
 152:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					LDC_pulseSeq_Init(&loadsPulseData1,(SWTC_CountersType)MP_LOADCONTROL_M_COUNTER1);
 153:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 154:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					if (uPLoadsControl_setting_data.DataLenght > LDC_SEQ1_TABLE_LEN) 
 155:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					{				  
 156:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 						/* seq #2 */
 157:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 						loadsPulseData2.offset = SEQ2_OFFSET;
 158:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 						LDC_pulseSeq_Init(&loadsPulseData2,(SWTC_CountersType)MP_LOADCONTROL_M_COUNTER2);
 159:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					} 
 160:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				}
 161:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				break;
 162:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 163:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 164:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			default:
 165:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 166:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				/*			
 167:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				case LDC_NOSTOP_DRIVE:
 168:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 169:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				Per quanto riguarda LoadsControl in continua, nella prima iterazione
 170:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				non vengono pilotati i carichi, non viene data la condizione di uscita
 171:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				e soprattutto non vengono inizializzate le variabili relative alla
 172:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				modalit� di pilotaggio con profilo. In pratica non fa nulla, 
 173:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				ma lo fa con molta attenzione.
 174:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				(In questo modo si possono usare pi� LoadsControl in continua nello stesso passo)
 175:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				*/
 176:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 177:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				break;
 178:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		}
 179:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 180:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	}
 181:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	else 
 182:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	{
 183:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		suspend = FALSE;
 184:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 185:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		if ( uPDoorStatus == UP_DOOR_WAIT )
 186:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		{ /* porta aperta o in attesa di timeout dopo la chiusura o delay MR -> il uP va sospeso */   
 187:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			suspend=TRUE;          				    
 188:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		}
 189:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 190:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		if(suspend)
 191:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		{  	
 192:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			enabledloads_mask = 0;
 193:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			if( Pump_Pos[LD_DRAIN_PUMP_IND] != NO_LD_POS )
 194:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			{
 195:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				enabledloads_mask |= (1<<Pump_Pos[LD_DRAIN_PUMP_IND]);
 196:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			}
 197:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 198:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			nRet = S_FALSE;
 199:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		}
 200:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		else
 201:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		{
 202:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** #ifdef _CORRECT_LOADS_CONTROL_BUG_
 203:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			enabledloads_mask=0xFFFF;
 204:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** #else
 205:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			enabledloads_mask=0xFF;
 206:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** #endif /* !_CORRECT_LOADS_CONTROL_BUG_ */
 207:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			nRet = S_OK;
 208:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		}
 209:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 210:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		if ((highStatement & LDC_DRIVE_TYPE_MSK) == LDC_NOSTOP_DRIVE)
 211:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		{
 212:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		/* Esecuzione LoadsControl in continua */
 213:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 214:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			if (BasicLoader(PTR_UP_LOADSCONTROL, lowStatement, &lcDirect_SettingData) == S_OK)
 215:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			{
 216:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				/* Caricata la bitmap dei carichi */
 217:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 218:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				/* Viene effettuato il pilotaggio */
 219:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				LDC_activateLoads((*((uint16_t*) lcDirect_SettingData.Data)) & enabledloads_mask);
 220:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			}
 221:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			else
 222:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			{
 223:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				/* Errore nel caricamento */
 224:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				/* Non pilota i carichi, ma si abilita comunque l'avanzamento passo */
 225:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			}
 226:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		}
 227:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		else
 228:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		{
 229:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			/* Esecuzione LoadsControl con profilo */  		
 230:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 231:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			/* Pilotaggio carichi */ 
 232:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			LDC_pulseLoadMgmt(&loadsPulseData1);
 233:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			/**/
 234:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 235:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			/* Gestione transizione stati */
 236:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			if(LDC_pulseStepMgmt(&loadsPulseData1,(SWTC_CountersType)MP_LOADCONTROL_M_COUNTER1)) 
 237:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			{		  
 238:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				uP_LoadsControl_Data.status|=LOADSCONTROL_SEQ1_DONE_MSK;
 239:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			}
 240:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 241:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			/* seq 2 */
 242:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			if (uPLoadsControl_setting_data.DataLenght > LDC_SEQ1_TABLE_LEN)
 243:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			{/* Presente la sequenza 2 */
 244:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 245:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				/* Gestione transizione stati */
 246:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				if(LDC_pulseStepMgmt(&loadsPulseData2,(SWTC_CountersType)MP_LOADCONTROL_M_COUNTER2)) 
 247:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				{			  
 248:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					uP_LoadsControl_Data.status|=LOADSCONTROL_SEQ2_DONE_MSK;
 249:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				}
 250:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				/* Pilotaggio carichi */ 
 251:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				LDC_pulseLoadMgmt(&loadsPulseData2);			
 252:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			} 
 253:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			else 
 254:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			{	
 255:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				/* seq 2 non presente:
 256:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				viene rimosso il blocco all'avanzamento passo che la riguarda
 257:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				*/
 258:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				uP_LoadsControl_Data.status|=LOADSCONTROL_SEQ2_DONE_MSK;
 259:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			}
 260:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			/**/
 261:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 262:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			if (LOADSCONTROL_ALL_SEQ_DONE_MSK == (uP_LoadsControl_Data.status & LOADSCONTROL_ALL_SEQ_DONE_MS
 263:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			{
 264:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				/* Entrambi i profili sono stati eseguiti almeno una volta */
 265:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				nRet = S_OK;
 266:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			}
 267:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		}
 268:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 269:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	}
 270:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	return nRet;
 271:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** }
 272:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /**/
 273:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 274:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* ************** */
 275:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* Local Function */
 276:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /* ************** */
 277:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 278:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /**
 279:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** Gestisce l'inizializzazione delle sequenze temporali da eseguire.
 280:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****  
 281:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \param [in] 	*p : puntatore alla struttura della sequenza da inizializzare
 282:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****  
 283:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \version		1.0.0
 284:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \date 			20/07/2006
 285:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \author			Roberto Fioravanti
 286:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 287:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** */
 288:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** void LDC_pulseSeq_Init(loadsPulse_Struct *p, SWTC_CountersType indice)
 289:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** {
  10                             		.loc 1 289 0
  11                             	.LVL0:
 290:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** uint8_t cntTime;
 291:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 292:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	/* start seq con ON */
 293:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	p->step = LDC_PULSE_EXE_DELAY;
  12                             		.loc 1 293 0
  13 0000 3C 11 00                		mov.B	#0, 1[r1]
  14                             	.LVL1:
 294:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 295:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	cntTime = LDC_PULSE_TDELAY(p->offset);
  15                             		.loc 1 295 0
  16 0003 FB 42 00 00 00 00       		mov.L	#_uPLoadsControl_setting_data, r4
  17                             	.LVL2:
  18 0009 58 1E                   		movu.B	[r1], r14
  19 000b EC 44                   		mov.L	[r4], r4
  20                             	.LVL3:
 296:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 297:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	/*config+init timer*/
 298:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	
 299:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	(void)SWTC_SetMValue((SWTC_CountersType)indice,cntTime);
  21                             		.loc 1 299 0
  22 000d CF 21                   		mov.B	r2, r1
  23                             	.LVL4:
 295:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	cntTime = LDC_PULSE_TDELAY(p->offset);
  24                             		.loc 1 295 0
  25 000f 4B 4E                   		add	r4, r14
  26 0011 CD EE 03                		mov.B	3[r14], r14
  27                             		.loc 1 299 0
  28 0014 EF E2                   		mov.L	r14, r2
  29                             	.LVL5:
  30 0016 75 22 7F                		and	#0x7f, r2
  31 0019 04 00 00 00             		bra	_SWTC_SetMValue
  32                             	.LVL6:
  33                             	.LFE1:
  35                             		.section	.text.LDC_pulseSeq_Suspend,"ax",@progbits
  36                             		.global	_LDC_pulseSeq_Suspend
  38                             	_LDC_pulseSeq_Suspend:
  39                             	.LFB2:
 300:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** }
 301:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /**/
 302:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 303:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 304:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /**
 305:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** Sospende il conteggio del timer
 306:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****  
 307:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \param [in] 	*p : puntatore alla struttura della sequenza da inizializzare
 308:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****  
 309:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \version		1.0.0
 310:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \date 			20/07/2006
 311:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \author			Roberto Fioravanti
 312:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 313:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** */
 314:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** void LDC_pulseSeq_Suspend(loadsPulse_Struct *p , SWTC_CountersType indice)
 315:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** {
  40                             		.loc 1 315 0
  41                             	.LVL7:
 316:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	/*stop timer*/
 317:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /*	DisableCounter(&(p->timer)); */
 318:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	(void)SWTC_Stop((SWTC_CountersType)indice);
  42                             		.loc 1 318 0
  43 0000 CF 21                   		mov.B	r2, r1
  44                             	.LVL8:
  45 0002 04 00 00 00             		bra	_SWTC_Stop
  46                             	.LVL9:
  47                             	.LFE2:
  49                             		.section	.text.LDC_pulseStepMgmt,"ax",@progbits
  50                             		.global	_LDC_pulseStepMgmt
  52                             	_LDC_pulseStepMgmt:
  53                             	.LFB3:
 319:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** }
 320:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 321:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 322:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /**
 323:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** Gestisce il passaggio da uno step al successivo nella sequenza temporale di attivazione
 324:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****  
 325:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \param [in] 	*p : puntatore alla struttura della sequenza in questione
 326:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 327:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \return     bool_t  
 328:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \retvalue   FALSE   L'esecuzione del profilo non � terminata
 329:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \retvalue   TRUE    L'esecuzione del profilo � terminata, � stato apppena eseguito lo step fina
 330:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 331:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \version		1.0.0
 332:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \date 			20/07/2006
 333:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \author     Roberto Fioravanti
 334:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 335:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** */
 336:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** bool_t LDC_pulseStepMgmt(loadsPulse_Struct *p, SWTC_CountersType indice)
 337:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** {
  54                             		.loc 1 337 0
  55                             	.LVL10:
  56 0000 6E 7B                   		pushm	r7-r11
  57                             	.LCFI0:
  58                             		.loc 1 337 0
  59 0002 EF 1A                   		mov.L	r1, r10
 338:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** bool_t end=FALSE;
 339:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 340:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	if ( SWTC_IsExpired((SWTC_CountersType)indice) )
  60                             		.loc 1 340 0
  61 0004 CF 21                   		mov.B	r2, r1
  62                             	.LVL11:
 337:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** {
  63                             		.loc 1 337 0
  64 0006 CF 27                   		mov.B	r2, r7
  65                             		.loc 1 340 0
  66 0008 05 00 00 00             		bsr	_SWTC_IsExpired
  67                             	.LVL12:
  68 000c 61 01                   		cmp	#0, r1
  69 000e 3A 8D 00                		beq	.L11
 341:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	{/* conteggio terminato */
 342:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 343:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		switch (p->step)
  70                             		.loc 1 343 0
  71 0011 59 AB 01                		movu.B	1[r10], r11
  72 0014 61 1B                   		cmp	#1, r11
  73 0016 20 2C                   		beq	.L6
  74 0018 61 0B                   		cmp	#0, r11
  75 001a 20 09                   		beq	.L5
  76 001c 61 2B                   		cmp	#2, r11
  77 001e 3B 81 00                		bne	.L13
  78 0021 2E 50                   		bra	.L7
  79                             	.L5:
 344:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		{/* gestione passaggio di stato */
 345:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 346:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			case LDC_PULSE_EXE_DELAY:/* OFF1 -> ON */
 347:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				/* possibili transizioni:
 348:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				  -DELAY -> ON
 349:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				  -DELAY -> OFF
 350:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			  */
 351:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				 
 352:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				if ( LDC_PULSE_START(p->offset) == LDC_SEQ_START_ON ) 
  80                             		.loc 1 352 0
  81 0023 FB E2 00 00 00 00       		mov.L	#_uPLoadsControl_setting_data, r14
  82 0029 EC E4                   		mov.L	[r14], r4
  83 002b 58 AE                   		movu.B	[r10], r14
  84 002d 4B 4E                   		add	r4, r14
  85 002f CD E4 03                		mov.B	3[r14], r4
  86 0032 61 04                   		cmp	#0, r4
  87 0034 29 08                   		blt	.L8
 353:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				{
 354:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				  /* start con ON */
 355:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					p->step = LDC_PULSE_EXE_ON;
  88                             		.loc 1 355 0
  89 0036 F9 A4 01 01             		mov.B	#1, 1[r10]
  90 003a 2E 32                   		bra	.L9
  91                             	.L8:
 356:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 357:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					/*SetCounterVal(&(p->timer),LDC_PULSE_TON(p->offset));*/
 358:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					(void)SWTC_SetMValue((SWTC_CountersType)indice,LDC_PULSE_TON(p->offset));				
 359:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				}
 360:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				else 
 361:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				{
 362:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				  /* start con OFF */
 363:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					p->step = LDC_PULSE_EXE_OFF;
  92                             		.loc 1 363 0
  93 003c F9 A4 01 02             		mov.B	#2, 1[r10]
  94 0040 2E 56                   		bra	.L10
  95                             	.L6:
 364:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 365:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					/*SetCounterVal(&(p->timer),LDC_PULSE_TOFF(p->offset));*/
 366:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					(void)SWTC_SetMValue((SWTC_CountersType)indice,LDC_PULSE_TOFF(p->offset));				
 367:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				}				
 368:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			break;
 369:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 370:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			case LDC_PULSE_EXE_ON:
 371:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                 /* possibili transizioni:
 372:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                     -ON -> OFF 
 373:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                 */
 374:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			  
 375:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                 if ( LDC_PULSE_START(p->offset) == LDC_SEQ_START_OFF ) 
  96                             		.loc 1 375 0
  97 0042 FB B2 00 00 00 00       		mov.L	#_uPLoadsControl_setting_data, r11
  98 0048 EC B3                   		mov.L	[r11], r3
  99 004a 58 A4                   		movu.B	[r10], r4
 100 004c FF 2E 43                		add	r4, r3, r14
 376:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                 {
 377:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                     end=TRUE;					
 378:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                 } 
 379:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 380:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                 if(LDC_PULSE_TOFF(p->offset))
 101                             		.loc 1 380 0
 102 004f 62 44                   		add	#4, r4
 103 0051 4B 34                   		add	r3, r4
 375:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                 if ( LDC_PULSE_START(p->offset) == LDC_SEQ_START_OFF ) 
 104                             		.loc 1 375 0
 105 0053 CD EB 03                		mov.B	3[r14], r11
 106                             		.loc 1 380 0
 107 0056 58 43                   		movu.B	[r4], r3
 338:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** bool_t end=FALSE;
 108                             		.loc 1 338 0
 109 0058 69 FB                   		shlr	#31, r11
 110                             	.LVL13:
 111                             		.loc 1 380 0
 112 005a 61 03                   		cmp	#0, r3
 113 005c 20 10                   		beq	.L9
 381:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                 {                    
 382:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****       			    p->step = LDC_PULSE_EXE_OFF;
 114                             		.loc 1 382 0
 115 005e F9 A4 01 02             		mov.B	#2, 1[r10]
 116                             		.balign 2,3,3
 117                             	.L17:
 383:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 384:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****       			    /*SetCounterVal(&(p->timer),LDC_PULSE_TOFF(p->offset));*/
 385:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					(void)SWTC_SetMValue((SWTC_CountersType)indice,LDC_PULSE_TOFF(p->offset));
 118                             		.loc 1 385 0
 119 0062 58 42                   		movu.B	[r4], r2
 120                             	.LVL14:
 121                             		.balign 2,3,1
 122                             	.L16:
 123 0064 CF 71                   		mov.B	r7, r1
 124 0066 05 00 00 00             		bsr	_SWTC_SetMValue
 125                             	.LVL15:
 126 006a 2E 38                   		bra	.L4
 127                             	.L9:
 386:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                 }
 387:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                 else
 388:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                 {
 389:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                     /*SetCounterVal(&(p->timer),LDC_PULSE_TON(p->offset));*/
 390:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					(void)SWTC_SetMValue((SWTC_CountersType)indice,LDC_PULSE_TON(p->offset));
 128                             		.loc 1 390 0
 129 006c 59 E2 02                		movu.B	2[r14], r2
 130 006f 2E F5                   		bra	.L16
 131                             	.LVL16:
 132                             	.L7:
 391:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                 }
 392:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 393:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			break;
 394:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 395:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			case LDC_PULSE_EXE_OFF:
 396:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                 /* possibili transizioni:
 397:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                     -OFF -> ON 
 398:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                 */
 399:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                 if ( LDC_PULSE_START(p->offset) == LDC_SEQ_START_ON )
 133                             		.loc 1 399 0
 134 0071 FB B2 00 00 00 00       		mov.L	#_uPLoadsControl_setting_data, r11
 135 0077 EC B3                   		mov.L	[r11], r3
 136 0079 58 A4                   		movu.B	[r10], r4
 137 007b FF 2E 43                		add	r4, r3, r14
 138 007e CD EB 03                		mov.B	3[r14], r11
 338:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** bool_t end=FALSE;
 139                             		.loc 1 338 0
 140 0081 61 0B                   		cmp	#0, r11
 141 0083 FC DB B8                		scge.L	r11
 142                             	.LVL17:
 400:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                 {
 401:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                     end=TRUE;
 402:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                 } 
 403:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                 
 404:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                 if( LDC_PULSE_TON(p->offset) )
 143                             		.loc 1 404 0
 144 0086 62 24                   		add	#2, r4
 145 0088 4B 34                   		add	r3, r4
 146 008a 58 43                   		movu.B	[r4], r3
 147 008c 61 03                   		cmp	#0, r3
 148 008e 20 08                   		beq	.L10
 405:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                 {                    
 406:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****           			p->step = LDC_PULSE_EXE_ON;
 149                             		.loc 1 406 0
 150 0090 F9 A4 01 01             		mov.B	#1, 1[r10]
 151 0094 2E CE                   		bra	.L17
 152                             	.LVL18:
 153                             	.L10:
 407:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 408:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****           			/*SetCounterVal(&(p->timer),LDC_PULSE_TON(p->offset));*/
 409:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					(void)SWTC_SetMValue((SWTC_CountersType)indice,LDC_PULSE_TON(p->offset));
 410:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                 }
 411:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                 else
 412:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                 {
 413:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                     /*SetCounterVal(&(p->timer),LDC_PULSE_TOFF(p->offset));*/
 414:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					(void)SWTC_SetMValue((SWTC_CountersType)indice,LDC_PULSE_TOFF(p->offset));
 154                             		.loc 1 414 0
 155 0096 59 E2 04                		movu.B	4[r14], r2
 156 0099 2E CB                   		bra	.L16
 157                             	.LVL19:
 158                             	.L11:
 338:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** bool_t end=FALSE;
 159                             		.loc 1 338 0
 160 009b EF 1B                   		mov.L	r1, r11
 161 009d 2E 05                   		bra	.L4
 162                             	.L13:
 163 009f 66 0B                   		mov.L	#0, r11
 164                             	.LVL20:
 165 00a1 03                      		.balign 2,3,1
 166                             	.L4:
 415:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****                 }
 416:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			break;
 417:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 418:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			default:
 419:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				/* stato non possibile: errore */
 420:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			break;
 421:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		}
 422:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	}
 423:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 424:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	/*EnableCounter(&(p ->timer));*/
 425:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	(void)SWTC_Run((SWTC_CountersType)indice);
 167                             		.loc 1 425 0
 168 00a2 CF 71                   		mov.B	r7, r1
 169 00a4 05 00 00 00             		bsr	_SWTC_Run
 170                             	.LVL21:
 426:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	return end;
 427:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** }
 171                             		.loc 1 427 0
 172 00a8 EF B1                   		mov.L	r11, r1
 173 00aa 3F 7B 05                		rtsd	#20, r7-r11
 174                             	.LFE3:
 176 00ad 03                      		.section	.text.LDC_activateLoads,"ax",@progbits
 177                             		.global	_LDC_activateLoads
 179                             	_LDC_activateLoads:
 180                             	.LFB5:
 428:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /**/
 429:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 430:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /**
 431:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** Gestisce il pilotaggio carichi appartenenti alla sequenza in questione
 432:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 433:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \param [in] 	*p : puntatore alla struttura della sequenza in questione
 434:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****  
 435:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \version		1.0.0
 436:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \date 			20/07/2006
 437:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \author
 438:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 439:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** */
 440:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** void LDC_pulseLoadMgmt(loadsPulse_Struct const *p)
 441:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** {
 442:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** uint16_t loadBitmap;
 443:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** uint8_t* pBmpOffset;
 444:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 445:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	if (p->step == LDC_PULSE_EXE_ON)
 446:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	{
 447:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		pBmpOffset = (uint8_t*)(uPLoadsControl_setting_data.Data + p->offset);
 448:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 449:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		loadBitmap = MAKEWORD(OFFS_B(pBmpOffset, 0), OFFS_B(pBmpOffset, 1));
 450:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 451:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		LDC_activateLoads(loadBitmap & enabledloads_mask);
 452:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	}
 453:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** }
 454:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /**/
 455:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 456:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 457:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** /**
 458:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** Attiva i carichi appartenenti alla sequenza in questione
 459:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 460:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \param [in] 	loadBitmap : bitmap dei carichi da attivare
 461:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c ****  
 462:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \version		1.0.0
 463:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \date 			26/02/2008
 464:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** \author     Roberto Fioravanti
 465:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 466:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** */
 467:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** void LDC_activateLoads(uint16_t loadBitmap)
 468:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** {
 181                             		.loc 1 468 0
 182                             	.LVL22:
 183 0000 7E A7                   		push.l	r7
 184                             	.LCFI1:
 185                             		.loc 1 468 0
 186 0002 66 0E                   		mov.L	#0, r14
 469:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** uint8_t i;
 470:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** #ifdef _CORRECT_LOADS_CONTROL_BUG_
 471:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** uint16_t msk;
 472:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** #else
 473:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** uint8_t msk;
 474:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** #endif /* !_CORRECT_LOADS_CONTROL_BUG_ */
 475:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 
 476:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	for (i = 0, msk=1; i < N_LDC_BITMAP; i++, msk<<=1)
 187                             		.loc 1 476 0
 188 0004 66 14                   		mov	#1, r4
 477:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	{
 478:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		if (loadBitmap & msk)
 479:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		{		  
 480:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		  LoadsReq_New[i].b = LOAD_ON;		  		  
 189                             		.loc 1 480 0
 190 0006 FB 32 00 00 00 00       		mov.L	#_LoadsReq_New, r3
 191                             	.LVL23:
 192                             		.balign 2,3,4
 193                             	.L20:
 478:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		if (loadBitmap & msk)
 194                             		.loc 1 478 0
 195 000c FF 42 14                		and	r1, r4, r2
 196 000f 5F 22                   		movu.W	r2, r2
 197 0011 61 02                   		cmp	#0, r2
 198 0013 20 07                   		beq	.L19
 199                             		.loc 1 480 0
 200 0015 66 17                   		mov	#1, r7
 201 0017 FE 0E 37                		mov.B	r7, [r14,r3]
 202                             		.balign 2,3,1
 203                             	.L19:
 476:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	for (i = 0, msk=1; i < N_LDC_BITMAP; i++, msk<<=1)
 204                             		.loc 1 476 0
 205 001a 4B 44                   		add	r4, r4
 206                             	.LVL24:
 207 001c 62 1E                   		add	#1, r14
 208 001e 75 5E 10                		cmp	#16, r14
 209 0021 21 EB                   		bne	.L20
 481:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		}
 482:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	}
 483:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** }
 210                             		.loc 1 483 0
 211 0023 3F 77 01                		rtsd	#4, r7-r7
 212                             	.LFE5:
 214                             		.section	.text.LDC_pulseLoadMgmt,"ax",@progbits
 215                             		.global	_LDC_pulseLoadMgmt
 217                             	_LDC_pulseLoadMgmt:
 218                             	.LFB4:
 441:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** {
 219                             		.loc 1 441 0
 220                             	.LVL25:
 445:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	if (p->step == LDC_PULSE_EXE_ON)
 221                             		.loc 1 445 0
 222 0000 59 1E 01                		movu.B	1[r1], r14
 223 0003 61 1E                   		cmp	#1, r14
 224 0005 21 22                   		bne	.L26
 225                             	.LVL26:
 226                             	.LBB4:
 227                             	.LBB5:
 447:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		pBmpOffset = (uint8_t*)(uPLoadsControl_setting_data.Data + p->offset);
 228                             		.loc 1 447 0
 229 0007 FB 42 00 00 00 00       		mov.L	#_uPLoadsControl_setting_data, r4
 230 000d 58 1E                   		movu.B	[r1], r14
 231 000f EC 44                   		mov.L	[r4], r4
 232 0011 4B 4E                   		add	r4, r14
 233                             	.LVL27:
 449:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		loadBitmap = MAKEWORD(OFFS_B(pBmpOffset, 0), OFFS_B(pBmpOffset, 1));
 234                             		.loc 1 449 0
 235 0013 58 E1                   		movu.B	[r14], r1
 236                             	.LVL28:
 237 0015 6C 81                   		shll	#8, r1
 238 0017 55 E1 01                		or	1[r14].UB, r1
 451:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		LDC_activateLoads(loadBitmap & enabledloads_mask);
 239                             		.loc 1 451 0
 240 001a FB E2 00 00 00 00       		mov.L	#_enabledloads_mask, r14
 241                             	.LVL29:
 242 0020 06 50 E1                		and	[r14].W, r1
 243 0023 04 00 00 00             		bra	_LDC_activateLoads
 244                             	.LVL30:
 245                             	.L26:
 246 0027 02                      		rts
 247                             	.LBE5:
 248                             	.LBE4:
 249                             	.LFE4:
 251                             		.section	.text.LDC_uP_LoadsControl_Exe,"ax",@progbits
 252                             		.global	_LDC_uP_LoadsControl_Exe
 254                             	_LDC_uP_LoadsControl_Exe:
 255                             	.LFB0:
 124:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** {
 256                             		.loc 1 124 0
 257                             	.LVL31:
 258 0000 6E 7A                   		pushm	r7-r10
 259                             	.LCFI2:
 130:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	if ( (FALSE == Interpreter_Data[0].stepInitialized) || (FALSE == Interpreter_Data[0].optionalStepI
 260                             		.loc 1 130 0
 261 0002 FB 72 00 00 00 00       		mov.L	#_Interpreter_Data, r7
 262 0008 89 77                   		mov.B	4[r7], r7
 124:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** {
 263                             		.loc 1 124 0
 264 000a 60 80                   		sub	#8, r0
 265                             	.LCFI3:
 130:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	if ( (FALSE == Interpreter_Data[0].stepInitialized) || (FALSE == Interpreter_Data[0].optionalStepI
 266                             		.loc 1 130 0
 267 000c 64 67                   		and	#6, r7
 268 000e 61 67                   		cmp	#6, r7
 269 0010 20 57                   		beq	.L29
 133:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		switch ( (highStatement & LDC_DRIVE_TYPE_MSK) )
 270                             		.loc 1 133 0
 271 0012 75 21 30                		and	#48, r1
 272                             	.LVL32:
 273 0015 75 51 10                		cmp	#16, r1
 274 0018 3B 14 01                		bne	.L43
 139:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				if (BasicLoader(PTR_UP_LOADSCONTROL, lowStatement, &uPLoadsControl_setting_data) != S_OK )
 275                             		.loc 1 139 0
 276 001b 75 41 16                		mov	#22, r1
 277 001e FB 32 00 00 00 00       		mov.L	#_uPLoadsControl_setting_data, r3
 278 0024 05 00 00 00             		bsr	_BasicLoader
 279                             	.LVL33:
 280 0028 71 17 00                		add	#0, r1, r7
 281 002b 3B 05 01                		bne	.L44
 148:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					uP_LoadsControl_Data.status = LOADSCONTROL_INIT;
 282                             		.loc 1 148 0
 283 002e FB E2 00 00 00 00       		mov.L	#_uP_LoadsControl_Data, r14
 151:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					loadsPulseData1.offset = SEQ1_OFFSET;				
 284                             		.loc 1 151 0
 285 0034 FB 12 00 00 00 00       		mov.L	#_loadsPulseData1, r1
 148:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					uP_LoadsControl_Data.status = LOADSCONTROL_INIT;
 286                             		.loc 1 148 0
 287 003a C3 E7                   		mov.B	r7, [r14]
 151:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					loadsPulseData1.offset = SEQ1_OFFSET;				
 288                             		.loc 1 151 0
 289 003c C3 17                   		mov.B	r7, [r1]
 152:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					LDC_pulseSeq_Init(&loadsPulseData1,(SWTC_CountersType)MP_LOADCONTROL_M_COUNTER1);
 290                             		.loc 1 152 0
 291 003e 75 42 14                		mov	#20, r2
 154:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					if (uPLoadsControl_setting_data.DataLenght > LDC_SEQ1_TABLE_LEN) 
 292                             		.loc 1 154 0
 293 0041 FB 72 00 00 00 00       		mov.L	#_uPLoadsControl_setting_data, r7
 152:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					LDC_pulseSeq_Init(&loadsPulseData1,(SWTC_CountersType)MP_LOADCONTROL_M_COUNTER1);
 294                             		.loc 1 152 0
 295 0047 05 00 00 00             		bsr	_LDC_pulseSeq_Init
 296                             	.LVL34:
 154:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					if (uPLoadsControl_setting_data.DataLenght > LDC_SEQ1_TABLE_LEN) 
 297                             		.loc 1 154 0
 298 004b B1 77                   		movu.B	4[r7], r7
 299 004d 61 37                   		cmp	#3, r7
 300 004f 24 05 38 DB 00          		bleu	.L43
 157:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 						loadsPulseData2.offset = SEQ2_OFFSET;
 301                             		.loc 1 157 0
 302 0054 FB 12 00 00 00 00       		mov.L	#_loadsPulseData2, r1
 158:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 						LDC_pulseSeq_Init(&loadsPulseData2,(SWTC_CountersType)MP_LOADCONTROL_M_COUNTER2);
 303                             		.loc 1 158 0
 304 005a 75 42 15                		mov	#21, r2
 157:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 						loadsPulseData2.offset = SEQ2_OFFSET;
 305                             		.loc 1 157 0
 306 005d 3C 10 05                		mov.B	#5, [r1]
 158:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 						LDC_pulseSeq_Init(&loadsPulseData2,(SWTC_CountersType)MP_LOADCONTROL_M_COUNTER2);
 307                             		.loc 1 158 0
 308 0060 05 00 00 00             		bsr	_LDC_pulseSeq_Init
 309                             	.LVL35:
 310 0064 38 C8 00                		bra	.L43
 311                             	.LVL36:
 312                             	.L29:
 185:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		if ( uPDoorStatus == UP_DOOR_WAIT )
 313                             		.loc 1 185 0
 314 0067 FB 72 00 00 00 00       		mov.L	#_uPDoorStatus, r7
 315 006d 58 77                   		movu.B	[r7], r7
 316 006f CF 23                   		mov.B	r2, r3
 317                             	.LVL37:
 318 0071 61 07                   		cmp	#0, r7
 319 0073 FB E2 00 00 00 00       		mov.L	#_enabledloads_mask, r14
 320 0079 3A BD 00                		beq	.L32
 321 007c 38 CF 00                		bra	.L52
 322                             	.LVL38:
 323                             	.L39:
 195:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				enabledloads_mask |= (1<<Pump_Pos[LD_DRAIN_PUMP_IND]);
 324                             		.loc 1 195 0
 325 007f 66 17                   		mov.L	#1, r7
 326 0081 EF 7A                   		mov.L	r7, r10
 327 0083 FD 62 4A                		shll	r4, r10
 328 0086 D3 EA                   		mov.W	r10, [r14]
 329                             	.LVL39:
 330                             		.balign 2,3,2
 331                             	.L40:
 210:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 		if ((highStatement & LDC_DRIVE_TYPE_MSK) == LDC_NOSTOP_DRIVE)
 332                             		.loc 1 210 0
 333 0088 75 21 30                		and	#48, r1
 334                             	.LVL40:
 335 008b 21 28                   		bne	.L34
 214:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			if (BasicLoader(PTR_UP_LOADSCONTROL, lowStatement, &lcDirect_SettingData) == S_OK)
 336                             		.loc 1 214 0
 337 008d CF 32                   		mov.B	r3, r2
 338                             	.LVL41:
 339 008f 75 41 16                		mov	#22, r1
 340 0092 EF 03                   		mov.L	r0, r3
 341                             	.LVL42:
 342 0094 05 00 00 00             		bsr	_BasicLoader
 343                             	.LVL43:
 344 0098 5B 11                   		movu.B	r1, r1
 345 009a 61 01                   		cmp	#0, r1
 346 009c 3B 96 00                		bne	.L30
 219:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				LDC_activateLoads((*((uint16_t*) lcDirect_SettingData.Data)) & enabledloads_mask);
 347                             		.loc 1 219 0
 348 009f EC 0E                   		mov.L	[r0], r14
 349 00a1 DC E1                   		mov.W	[r14], r1
 350 00a3 FB E2 00 00 00 00       		mov.L	#_enabledloads_mask, r14
 351 00a9 06 50 E1                		and	[r14].W, r1
 352 00ac 05 00 00 00             		bsr	_LDC_activateLoads
 353                             	.LVL44:
 354 00b0 38 82 00                		bra	.L30
 355                             	.LVL45:
 356                             	.L34:
 232:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			LDC_pulseLoadMgmt(&loadsPulseData1);
 357                             		.loc 1 232 0
 358 00b3 FB 12 00 00 00 00       		mov.L	#_loadsPulseData1, r1
 359 00b9 05 00 00 00             		bsr	_LDC_pulseLoadMgmt
 360                             	.LVL46:
 236:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			if(LDC_pulseStepMgmt(&loadsPulseData1,(SWTC_CountersType)MP_LOADCONTROL_M_COUNTER1)) 
 361                             		.loc 1 236 0
 362 00bd FB 12 00 00 00 00       		mov.L	#_loadsPulseData1, r1
 363 00c3 75 42 14                		mov	#20, r2
 364 00c6 05 00 00 00             		bsr	_LDC_pulseStepMgmt
 365                             	.LVL47:
 366 00ca 61 01                   		cmp	#0, r1
 367 00cc 20 0E                   		beq	.L35
 238:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				uP_LoadsControl_Data.status|=LOADSCONTROL_SEQ1_DONE_MSK;
 368                             		.loc 1 238 0
 369 00ce FB E2 00 00 00 00       		mov.L	#_uP_LoadsControl_Data, r14
 370 00d4 CC E4                   		mov.B	[r14], r4
 371 00d6 65 14                   		or	#1, r4
 372 00d8 C3 E4                   		mov.B	r4, [r14]
 373                             		.balign 2,3,5
 374                             	.L35:
 242:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			if (uPLoadsControl_setting_data.DataLenght > LDC_SEQ1_TABLE_LEN)
 375                             		.loc 1 242 0
 376 00da FB E2 00 00 00 00       		mov.L	#_uPLoadsControl_setting_data, r14
 377 00e0 59 EE 04                		movu.B	4[r14], r14
 378 00e3 61 3E                   		cmp	#3, r14
 379 00e5 25 2B                   		bleu	.L36
 246:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				if(LDC_pulseStepMgmt(&loadsPulseData2,(SWTC_CountersType)MP_LOADCONTROL_M_COUNTER2)) 
 380                             		.loc 1 246 0
 381 00e7 FB 12 00 00 00 00       		mov.L	#_loadsPulseData2, r1
 382 00ed 75 42 15                		mov	#21, r2
 383 00f0 05 00 00 00             		bsr	_LDC_pulseStepMgmt
 384                             	.LVL48:
 385 00f4 61 01                   		cmp	#0, r1
 386 00f6 20 0E                   		beq	.L37
 248:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 					uP_LoadsControl_Data.status|=LOADSCONTROL_SEQ2_DONE_MSK;
 387                             		.loc 1 248 0
 388 00f8 FB E2 00 00 00 00       		mov.L	#_uP_LoadsControl_Data, r14
 389 00fe CC E4                   		mov.B	[r14], r4
 390 0100 65 24                   		or	#2, r4
 391 0102 C3 E4                   		mov.B	r4, [r14]
 392                             		.balign 2,3,5
 393                             	.L37:
 251:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				LDC_pulseLoadMgmt(&loadsPulseData2);			
 394                             		.loc 1 251 0
 395 0104 FB 12 00 00 00 00       		mov.L	#_loadsPulseData2, r1
 396 010a 05 00 00 00             		bsr	_LDC_pulseLoadMgmt
 397                             	.LVL49:
 398 010e 2E 0E                   		bra	.L38
 399                             	.L36:
 258:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				uP_LoadsControl_Data.status|=LOADSCONTROL_SEQ2_DONE_MSK;
 400                             		.loc 1 258 0
 401 0110 FB E2 00 00 00 00       		mov.L	#_uP_LoadsControl_Data, r14
 402 0116 CC E4                   		mov.B	[r14], r4
 403 0118 65 24                   		or	#2, r4
 404 011a C3 E4                   		mov.B	r4, [r14]
 405                             		.balign 2,3,5
 406                             	.L38:
 262:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			if (LOADSCONTROL_ALL_SEQ_DONE_MSK == (uP_LoadsControl_Data.status & LOADSCONTROL_ALL_SEQ_DONE_MS
 407                             		.loc 1 262 0
 408 011c FB E2 00 00 00 00       		mov.L	#_uP_LoadsControl_Data, r14
 409 0122 CC EE                   		mov.B	[r14], r14
 410 0124 64 3E                   		and	#3, r14
 411 0126 61 3E                   		cmp	#3, r14
 412 0128 21 0A                   		bne	.L30
 413 012a 2E 06                   		bra	.L44
 414                             	.LVL50:
 415                             	.L43:
 126:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** uint8_t nRet = S_FALSE;
 416                             		.loc 1 126 0
 417 012c 66 17                   		mov	#1, r7
 418 012e 2E 04                   		bra	.L30
 419                             	.LVL51:
 420                             	.L44:
 265:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 				nRet = S_OK;
 421                             		.loc 1 265 0
 422 0130 66 07                   		mov	#0, r7
 423                             		.balign 2,3,1
 424                             	.L30:
 425                             	.LVL52:
 270:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 	return nRet;
 426                             		.loc 1 270 0
 427 0132 5B 71                   		movu.B	r7, r1
 428 0134 2E 1F                   		bra	.L53
 429                             	.LVL53:
 430                             	.L32:
 192:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			enabledloads_mask = 0;
 431                             		.loc 1 192 0
 432 0136 D3 E7                   		mov.W	r7, [r14]
 193:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			if( Pump_Pos[LD_DRAIN_PUMP_IND] != NO_LD_POS )
 433                             		.loc 1 193 0
 434 0138 FB 72 00 00 00 00       		mov.L	#_Pump_Pos, r7
 435 013e B0 7C                   		movu.B	1[r7], r4
 436 0140 75 54 FF                		cmp	#0xff, r4
 437 0143 3B 3C FF                		bne	.L39
 198:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			nRet = S_FALSE;
 438                             		.loc 1 198 0
 439 0146 66 17                   		mov	#1, r7
 440 0148 38 40 FF                		bra	.L40
 441                             	.LVL54:
 442                             	.L52:
 203:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			enabledloads_mask=0xFFFF;
 443                             		.loc 1 203 0
 444 014b F8 E5 FF                		mov.W	#-1, [r14]
 445                             	.LVL55:
 207:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** 			nRet = S_OK;
 446                             		.loc 1 207 0
 447 014e 66 07                   		mov	#0, r7
 448 0150 38 38 FF                		bra	.L40
 449                             	.LVL56:
 450                             	.L53:
 271:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadsControl.c **** }
 451                             		.loc 1 271 0
 452 0153 3F 7A 06                		rtsd	#24, r7-r10
 453                             	.LFE0:
 455                             		.comm	_enabledloads_mask,2,2
 558                             	.Letext0:
 559                             		.file 2 "C:\\Workspace\\FW_Platform2_5\\trunk\\HAL\\HAL_General/StandardTypes.h"
 560                             		.file 3 "C:\\Workspace\\FW_Platform2_5\\trunk\\ProductModules\\PM_SwTimersCounters/SwTimersCounter
 561                             		.file 4 "C:\\Workspace\\FW_Platform2_5\\trunk\\ProductModules\\PM_Library/LIB_Utilities.h"
 562                             		.file 5 "C:\\Workspace\\FW_Platform2_5\\trunk\\CFG_DishWasher\\CFG_Inertia/ProductSafety_cfg.h"
 563                             		.file 6 "C:\\Workspace\\FW_Platform2_5\\trunk\\Inertia\\General/CstmDefines.h"
 564                             		.file 7 "C:\\Workspace\\FW_Platform2_5\\trunk\\Application_Platform/APP_Types.h"
 565                             		.file 8 "C:\\Workspace\\FW_Platform2_5\\trunk\\Inertia\\General/CstmTypes.h"
 566                             		.file 9 "C:\\Workspace\\FW_Platform2_5\\trunk\\PlatformLibrary\\LIB_IOManager/OutputManagerExp.h"
 567                             		.file 10 "C:\\Workspace\\FW_Platform2_5\\trunk\\Inertia\\General/CstmGlobal.h"
 568                             		.file 11 "C:\\Workspace\\FW_Platform2_5\\trunk\\Inertia\\Modules/LoadsControl.h"
 569                             		.file 12 "C:\\Workspace\\FW_Platform2_5\\trunk\\Application_Platform/APP_Global.h"

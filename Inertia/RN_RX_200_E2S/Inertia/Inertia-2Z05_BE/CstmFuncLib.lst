   1                             		.file	"CstmFuncLib.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.updateRegWaterLoaded,"ax",@progbits
   5                             		.global	_updateRegWaterLoaded
   7                             	_updateRegWaterLoaded:
   8                             	.LFB0:
   9                             		.file 1 "C:/Workspace/FW_Platform2_5/trunk/Inertia/General/CstmFuncLib.c"
   1:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**
   2:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \defgroup	CstmFuncLib Modulo funzioni di libreria
   3:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \ingroup	ApplGeneral
   4:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
   5:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** Il modulo e' una libreria di macro e funzioni condivise.
   6:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
   7:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** Contiene funzioni che non risultano legate a moduli specifici ma che
   8:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** coprono funzionalita' riutilizzabili trasversalmente.
   9:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** */
  10:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
  11:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**
  12:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** Source file del modulo Application Platform Library Functions
  13:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
  14:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \file		CstmFuncLib.c
  15:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \ingroup	CstmFuncLib
  16:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \date		27/07/2010
  17:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \version	01.00.00
  18:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \author		Emanuela Antognoli
  19:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
  20:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** */
  21:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
  22:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /*
  23:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** Copyright (c) 2004-2008, Indesit Company, EDT.
  24:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** Tutti i diritti sono riservati. All rights reserved.
  25:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** */
  26:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
  27:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* ******** */
  28:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* Includes */
  29:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* ******** */
  30:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** #include "CstmHeaders.h"
  31:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** #ifdef _ENABLE_USE_EMBOS_RESOURCES_
  32:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** #include "BusCommPltf_cfg.h"
  33:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** #endif /* _ENABLE_USE_EMBOS_RESOURCES_ */
  34:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
  35:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* ****************** */
  36:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* Defines and Macros */
  37:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* ****************** */
  38:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
  39:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* GetModifierData */
  40:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
  41:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /** Estrae la posizione della funzione che funge da modificatore */
  42:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** #define GMD_FUNCPOS(p)		((uint8_t)(*((uint8_t*)(p)) & 0x7F))
  43:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
  44:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /** Estrae il dato/id tabella relativo al modificatore corrente */
  45:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** #define GMD_MOD_DATA(p)		OFFS_B(p, 1)
  46:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
  47:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /** Verifica se il il dato � semplice o � l'id di una tabella*/
  48:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** #define GMD_HAVE_TABLE(p)	TESTBIT(*((uint8_t*)(p)), 7)
  49:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
  50:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**/
  51:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
  52:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* *************************** */
  53:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* Typedef, Structs and Unions */
  54:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* *************************** */
  55:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
  56:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* **************************** */
  57:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* Prototype of local functions */
  58:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* **************************** */
  59:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
  60:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* ****************** */
  61:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* Exported variables */
  62:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* ****************** */
  63:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
  64:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* ****************** */
  65:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* Imported variables */
  66:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* ****************** */
  67:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
  68:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* **************** */
  69:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* Global variables */
  70:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* **************** */
  71:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
  72:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* ***************** */
  73:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* Exported function */
  74:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /* ***************** */
  75:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
  76:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**
  77:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** Aggiornamento dei litri di acqua caricati ai fini di effettuare la rigenera.
  78:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** Chiamata da uP Drain 
  79:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \param  [in,out] Reg_WaterLoaded 	 
  80:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \param  [in,out] WaterInDW, decilitri di acqua caricati fino ad uno scarico
  81:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                  a V.P.+x sec. 	 
  82:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
  83:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \return 	none
  84:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
  85:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \retval		none 	 
  86:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
  87:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \warning	none		
  88:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
  89:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \author 	Stefano Ughi - modifica nomi var Valeria Catani
  90:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \date		14/09/2006
  91:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \version	1.0.1
  92:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
  93:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \bug
  94:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \todo   
  95:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \note		1.0.0 -> 1.0.1 
  96:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			poich� la variabile che contiene i litri accumulati prima di una rigenera
  97:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			� del tipo uint8_t non posso conteggiare pi� di 255 litri 
  98:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			viene quindi verificata la condizione di overflow dei litri accumulati
  99:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			se tale condizione si presenta la variabile viene posta a 255
 100:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** */
 101:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** void updateRegWaterLoaded( void )
 102:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** {
  10                             		.loc 1 102 0
 103:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** uint16_t waterLitresLoadedTemp;
 104:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 105:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	/*  
 106:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	N.B.: in teoria un overflow su Reg_WaterLoaded.dl non dovrebbe essere possibile 
 107:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	     visto che WaterInDW non dovrebbe superare il limite 
 108:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	     di tracimamento della macchina 110 dl c.a. e
 109:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	     Reg_WaterLoaded.dl parte dal valore '0' e viene comunque riportata
 110:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	     ad un valore inferiore a 10dl = 1l
 111:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	     Se comunque ci dovesse essere un overflow per "sporcamento" variabili
 112:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	     ci� non sarebbe preoccupante.  
 113:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	*/	
 114:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 115:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	Reg_WaterLoaded.dl += WaterInDW;	
  11                             		.loc 1 115 0
  12 0000 FB E2 00 00 00 00       		mov.L	#_Reg_WaterLoaded, r14
  13 0006 FB 42 00 00 00 00       		mov.L	#_WaterInDW, r4
  14 000c CC 43                   		mov.B	[r4], r3
  15 000e CD E4 01                		mov.B	1[r14], r4
 116:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 117:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	/* 
 118:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	check if overflow 
 119:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	N.B.: un overflow su Reg_WaterLoaded.l ( litri accumulati dalla macchina prima di effettuare
 120:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	      una rigenera � possibile e rappresenterebbe un problema perch� si rischierebbe di 
 121:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	      non effettuare una rigenera. 
 122:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	*/	
 123:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	waterLitresLoadedTemp = ( (uint16_t)Reg_WaterLoaded.l + (Reg_WaterLoaded.dl/10) );
  16                             		.loc 1 123 0
  17 0011 58 E2                   		movu.B	[r14], r2
 115:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	Reg_WaterLoaded.dl += WaterInDW;	
  18                             		.loc 1 115 0
  19 0013 4B 34                   		add	r3, r4
  20                             		.loc 1 123 0
  21 0015 5B 44                   		movu.B	r4, r4
  22 0017 EF 43                   		mov.L	r4, r3
  23 0019 FD 74 93 0A             		divu	#10, r3
  24 001d 4B 32                   		add	r3, r2
  25                             	.LVL0:
 124:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 125:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if ( waterLitresLoadedTemp < 255 )
  26                             		.loc 1 125 0
  27 001f 75 52 FE                		cmp	#0xfe, r2
  28 0022 24 0C                   		bgtu	.L2
 126:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{ 
 127:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		Reg_WaterLoaded.l = (uint8_t)waterLitresLoadedTemp;
 128:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		Reg_WaterLoaded.dl = Reg_WaterLoaded.dl%10; 
  29                             		.loc 1 128 0
  30 0024 63 A3                   		mul	#10, r3
  31 0026 43 34                   		sub	r3, r4
 127:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		Reg_WaterLoaded.l = (uint8_t)waterLitresLoadedTemp;
  32                             		.loc 1 127 0
  33 0028 C3 E2                   		mov.B	r2, [r14]
  34                             		.loc 1 128 0
  35 002a C7 E4 01                		mov.B	r4, 1[r14]
  36 002d 02                      		rts
  37                             	.L2:
 129:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
 130:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	else
 131:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
 132:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		/* Massimo valore consentito */
 133:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		Reg_WaterLoaded.l = 255;
  38                             		.loc 1 133 0
  39 002e F8 E4 FF                		mov.B	#-1, [r14]
 134:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		Reg_WaterLoaded.dl = 0;
  40                             		.loc 1 134 0
  41 0031 F9 E4 01 00             		mov.B	#0, 1[r14]
  42 0035 02                      		rts
  43                             	.LFE0:
  45                             		.section	.text.clearRegWaterLoaded,"ax",@progbits
  46                             		.global	_clearRegWaterLoaded
  48                             	_clearRegWaterLoaded:
  49                             	.LFB1:
 135:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
 136:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** }  
 137:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**/
 138:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 139:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**
 140:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** Azzeramento dei litri/dl di acqua caricati ai fini di effettuare la rigenera.
 141:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** Chiamata dal uP Load
 142:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 143:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \author 	Valeria Catani
 144:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \date		26/06/2008
 145:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \version	1.0.1
 146:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 147:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \bug
 148:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \todo   
 149:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \note	
 150:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 151:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 152:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** */
 153:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** void clearRegWaterLoaded( void )
 154:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** {
  50                             		.loc 1 154 0
 155:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	#if defined(REG_PARTIAL_WATER_RESET)
 156:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	Reg_WaterLoaded.l -= WaterForRegenerate;
 157:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	/* i decilitri li tengo invariati */
 158:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	#else
 159:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	Reg_WaterLoaded.l = 0;
  51                             		.loc 1 159 0
  52 0000 FB E2 00 00 00 00       		mov.L	#_Reg_WaterLoaded, r14
  53 0006 F8 E4 00                		mov.B	#0, [r14]
 160:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	Reg_WaterLoaded.dl = 0;
  54                             		.loc 1 160 0
  55 0009 F9 E4 01 00             		mov.B	#0, 1[r14]
  56 000d 02                      		rts
  57                             	.LFE1:
  59                             		.section	.text.WaterLoadedReset,"ax",@progbits
  60                             		.global	_WaterLoadedReset
  62                             	_WaterLoadedReset:
  63                             	.LFB2:
 161:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	#endif
 162:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** }
 163:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**/
 164:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 165:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**
 166:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** Reset variabili legate alla turbina
 167:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 168:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \author 	Valeria Catani
 169:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \date		4/06/2008
 170:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \version	1.0.1
 171:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 172:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \bug
 173:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \todo   
 174:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \note	
 175:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** */
 176:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 177:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** void WaterLoadedReset(void)
 178:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** {
  64                             		.loc 1 178 0
 179:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   
 180:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   PulseCounter_SetCount(0); /* init pulse counter per nuovo conteggio */	  
  65                             		.loc 1 180 0
  66 0000 66 01                   		mov.L	#0, r1
  67 0002 05 00 00 00             		bsr	_PulseCounter_SetCount
  68                             	.LVL1:
 181:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 182:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   GIWaterLoaded = 0;	 /* reset variabile acqua caricata */
  69                             		.loc 1 182 0
  70 0006 FB E2 00 00 00 00       		mov.L	#_GIWaterLoaded, r14
  71 000c F8 E5 00                		mov.W	#0, [r14]
  72 000f 02                      		rts
  73                             	.LFE2:
  75                             		.section	.text.UpdateMachineState,"ax",@progbits
  76                             		.global	_UpdateMachineState
  78                             	_UpdateMachineState:
  79                             	.LFB3:
 183:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** }
 184:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 185:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 186:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 187:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**
 188:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** Prepara il buffer per la lettura dello stato da parte della User Interface
 189:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 190:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \param [in]		TabMachineStateAddr[] (global)
 191:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \param [in]		TabMachineStateDim[] (global)
 192:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 193:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \param [out]	MachineStateBuf[] (global)
 194:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	 
 195:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \return 		none
 196:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \warning		none
 197:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 198:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \notes:			
 199:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 200:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \author			Marco Quintini
 201:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \date   		20/06/2006
 202:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \version    	0.0.1
 203:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 204:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** */
 205:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** void UpdateMachineState(void)
 206:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** {
  80                             		.loc 1 206 0
  81                             	.LVL2:
 207:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** uint8_t stateItem, stateItemByte, stateBufferIndex;
 208:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     
 209:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	stateBufferIndex=0;
 210:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 211:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	for( stateItem = 0; stateItem < (uint8_t)(sizeof(TabMachineStateDim)); stateItem ++ )
 212:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
 213:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		for( stateItemByte = 0; stateItemByte < TabMachineStateDim[stateItem]; stateItemByte ++ )
  82                             		.loc 1 213 0
  83 0000 66 0E                   		mov.L	#0, r14
 206:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** {
  84                             		.loc 1 206 0
  85 0002 6E 7B                   		pushm	r7-r11
  86                             	.LCFI0:
  87 0004 FB 12 00 00 00 00       		mov.L	#_TabMachineStateDim, r1
 209:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	stateBufferIndex=0;
  88                             		.loc 1 209 0
  89 000a CF E3                   		mov.B	r14, r3
 214:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		{
 215:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			MachineStateBuf[stateBufferIndex] = *( (uint8_t *)(TabMachineStateAddr[stateItem]) + stateItemBy
  90                             		.loc 1 215 0
  91 000c FB 72 00 00 00 00       		mov.L	#_MachineStateBuf, r7
  92 0012 2E 20                   		bra	.L7
  93                             	.LVL3:
  94                             	.L8:
  95                             		.loc 1 215 0 is_stmt 0 discriminator 2
  96 0014 EC 5A                   		mov.L	[r5], r10
  97 0016 5B BB                   		movu.B	r11, r11
  98 0018 FE 44 AA                		mov.B	[r4,r10], r10
  99 001b 62 14                   		add	#1, r4
 100 001d FE 0B 7A                		mov.B	r10, [r11,r7]
 101                             	.LVL4:
 102                             		.balign 2,3,2
 103                             	.L10:
 205:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** void UpdateMachineState(void)
 104                             		.loc 1 205 0 is_stmt 1 discriminator 1
 105 0020 FF 2B 34                		add	r3, r4, r11
 106                             	.LVL5:
 213:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		for( stateItemByte = 0; stateItemByte < TabMachineStateDim[stateItem]; stateItemByte ++ )
 107                             		.loc 1 213 0 discriminator 1
 108 0023 5B 4A                   		movu.B	r4, r10
 109 0025 47 FA                   		cmp	r15, r10
 110 0027 23 ED                   		bltu	.L8
 111 0029 4B 23                   		add	r2, r3
 112                             	.LVL6:
 113 002b 62 4E                   		add	#4, r14
 211:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	for( stateItem = 0; stateItem < (uint8_t)(sizeof(TabMachineStateDim)); stateItem ++ )
 114                             		.loc 1 211 0
 115 002d 75 5E 18                		cmp	#24, r14
 116 0030 20 11                   		beq	.L6
 117                             	.LVL7:
 118                             		.balign 2,3,5
 119                             	.L7:
 213:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		for( stateItemByte = 0; stateItemByte < TabMachineStateDim[stateItem]; stateItemByte ++ )
 120                             		.loc 1 213 0 discriminator 1
 121 0032 FD 28 12                		mov.B	[r1+], r2
 122 0035 66 04                   		mov.L	#0, r4
 123 0037 5B 2F                   		movu.B	r2, r15
 205:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** void UpdateMachineState(void)
 124                             		.loc 1 205 0 discriminator 1
 125 0039 70 E5 00 00 00 00       		add	#_TabMachineStateAddr, r14, r5
 126 003f 2E E1                   		bra	.L10
 127                             	.LVL8:
 128                             	.L6:
 216:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		    
 217:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		    stateBufferIndex++;
 218:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		}
 219:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
 220:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 221:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** }
 129                             		.loc 1 221 0
 130 0041 3F 7B 05                		rtsd	#20, r7-r11
 131                             	.LFE3:
 133                             		.section	.text.GetDeltaFromVariation,"ax",@progbits
 134                             		.global	_GetDeltaFromVariation
 136                             	_GetDeltaFromVariation:
 137                             	.LFB5:
 222:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**/
 223:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 224:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**
 225:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** Aggiorna ApplicationState e ApplicationFlags.
 226:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 227:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \param [in]		GICriteria (global)
 228:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \param [in]		CurrentFault (global)
 229:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 230:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \param [out]	ApplicationState (global)
 231:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \param [out]	ApplicationFlags (global)
 232:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	 
 233:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \return 		none
 234:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \warning		none
 235:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 236:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \notes:			non va chiamata in PC Control
 237:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 238:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \author			Marco Quintini
 239:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \date   		12/07/2006
 240:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \version    	1.0.0
 241:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 242:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** */
 243:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** void UpdateStateBitmaps(void)
 244:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** {
 245:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** uint8_t nRegMax;
 246:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** #ifdef _CORRECT_DELAY_TIMER_FOR_UI_
 247:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** SWTC_TimeType delaySeconds;
 248:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** #endif /* _CORRECT_DELAY_TIMER_FOR_UI_ */
 249:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 250:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	/**** Update ApplicationFlags ***/
 251:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 252:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	/* Vengono messi al valore di init tutti i bit di ApplicationFlags che poi saranno aggiornati */
 253:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	ApplicationFlags = BUILD_BMP(ApplicationFlags, APPL_FLAGS_INIT_VAL, APPL_FLAGS_MASK);
 254:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 255:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   /** Stato sale per UI */
 256:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   
 257:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if (HWC_Flags.bit.saltreed)
 258:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{/* reed sale presente */
 259:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 260:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		if (TESTBIT(GIValid, (GI_FIRST_CRITERION_BIT + GI_SALT_IND) ) != 0)
 261:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		{
 262:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			nRegMax = OFFS_B(Tab_HWCRegenerateData.Data,2); /* Introdurre delle define, qui e in tutti i pun
 263:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 264:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			if( (TESTBIT(GICriteria, GI_SALT_IND) == 0) && (uP_Regenerate_Data.nReg >= nRegMax ) )
 265:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			{
 266:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				/* Sale assente */
 267:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				SETBIT(ApplicationFlags, AF_NO_SALT_BIT);								
 268:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** #ifdef _STATISTICS_ON_
 269:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				if ( TESTBIT(Statistics_update_flag, STATISTIC_FLAG_NO_SALT)==0)
 270:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				{ 
 271:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 					IncWordWithCheck(&MachineStatistics.globalStats.salt_reset);
 272:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 					SETBIT(Statistics_update_flag, STATISTIC_FLAG_NO_SALT);
 273:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				}	
 274:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 275:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			}else
 276:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			{
 277:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				CLRBIT(Statistics_update_flag, STATISTIC_FLAG_NO_SALT);
 278:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** #endif	
 279:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			}
 280:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			
 281:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		}
 282:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
 283:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 284:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     /** Stato brillantante per UI */	 /*QUESTO VIENE AGGIORNATO ANCHE NEL UP SPARKLING AID... VA BE
 285:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	/*if( TESTBIT(GICriteria, GI_SPARKLING_AID_IND) == 0 )*/
 286:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if(Flags_2 & FLAGS2_NO_SPARKL_AID_MSK)
 287:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
 288:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		/* Brillantante assente */
 289:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		SETBIT(ApplicationFlags, AF_NO_SPARKLING_AID_BIT);
 290:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			
 291:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** #ifdef _STATISTICS_ON_
 292:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		if ( TESTBIT (GICriteriaOld, GI_SPARKLING_AID_IND) )
 293:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		{/* transizione brillantante presente -> assente*/
 294:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			IncWordWithCheck(&MachineStatistics.globalStats.sparkling_reset);
 295:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		}	
 296:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** #endif	
 297:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
 298:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 299:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 300:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	/** Stato warning H2O per UI */  
 301:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 302:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if( FltWarning.load )
 303:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
 304:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		/* Problemi caricamento acqua */
 305:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		SETBIT(ApplicationFlags, AF_H2O_WARN_BIT);
 306:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
 307:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 308:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 309:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	/** Stato porta per UI */
 310:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if( TESTBIT(GICriteria, GI_CR_DOOR_IND) == 0 )
 311:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
 312:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		/* Porta aperta */
 313:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		CLRBIT(ApplicationFlags, AF_DOOR_CLOSED_BIT);
 314:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
 315:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 316:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	/** Disabilitazione Standby durante lo scarico di sicurezza */
 317:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if ( TESTBIT(Flags_2,FLAG2_SAFETY_DRAIN_PP_ON_POS) )
 318:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
 319:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		SETBIT(ApplicationFlags,AF_STANDBY_DISABLE_BIT); 
 320:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
 321:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 322:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if ( TESTBIT(Flags_2, FLAG2_CLOGGED_FILTER))
 323:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
 324:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		SETBIT(ApplicationFlags,AF_DIRTY_FILTER_BIT); 
 325:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
 326:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 327:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	/* Aggiungere l'aggiornamento di eventuali altri bit */
 328:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 329:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 330:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	/**** Update ApplicationState ***/
 331:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 332:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	/* Vengono messi al valore di init tutti i bit di ApplicationState che poi saranno aggiornati */
 333:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	ApplicationState = BUILD_BMP(ApplicationState, APPL_STATE_INIT_VAL, APPL_STATE_MASK);
 334:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 335:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	/** Stato PC Control */
 336:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	/* Qui il bit AS_REMOTE_CTRL_ON_BIT viene solo resettato, il set avviene altrove */
 337:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 338:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	/** Stato di fault per UI */
 339:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	/*if( CurrentFault.faultCodes.code != CODE_NO_FAULT )
 340:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
 341:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		 Main in stato di FAULT
 342:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		SETBIT(ApplicationState, AS_APPL_FAULT_BIT);
 343:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}*/ /*AE FIXME fault a carico di Emanuela*/
 344:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 345:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	/** Validit� dati per UI */
 346:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if( FLT_checkForSettingFault() == TRUE )
 347:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
 348:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		/* Richiesta UI: se fault file di setting => azzerare il bit DATA_READY */
 349:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		CLRBIT(ApplicationState, AS_DATA_READY_BIT);
 350:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
 351:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 352:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** #if	(SBY_STANDBY_ENABLE == 1)
 353:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if (HarakiriLowPower.Mode != HKM_SBY_OFF_MODE)
 354:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{	/* aggiornamento bit relativo allo stato di Standby ON :
 355:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		si mette nei criteri perch� nei flag di applicazione non c'� posto */
 356:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 357:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		if (HarakiriLowPower.Req ==  HKM_LOW_POWER_REQ   )
 358:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		{
 359:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			SETBIT(ApplicationFlags, AF_SBY_SLEEP_ON_FLAG );	
 360:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		}
 361:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}	
 362:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 363:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if ( TESTBIT(GIValid,GI_FIRST_WAKEUP_SOURCE_IND) && (TESTBIT(GICriteria, GI_FIRST_WAKEUP_SOURCE_IN
 364:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
 365:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		SETBIT(ApplicationFlags, AF_WAKEUP_OFBUTTON_BIT );
 366:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}else
 367:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
 368:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		if (TESTBIT(GICriteria, GI_FIRST_WAKEUP_SOURCE_IND))
 369:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		{
 370:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			if  ( TESTBIT(Flags_2, FLAG2_SAFETY_TURB_TEST_BIT) || ( TESTBIT (GICriteria,GI_CR_OVFL_IND) != 0
 371:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			{
 372:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				SETBIT(ApplicationFlags, AF_STANDBY_DISABLE_BIT );	
 373:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			}	
 374:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		}else
 375:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		 {
 376:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		 /* ingresso circuito di standby non presente o comunque non valido
 377:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			i  flag sono sempre a 0 . la main non va in standby autonomamente, quindi la visual non dovrebbe
 378:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			per cui si simula un reset da tasto*/
 379:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			SETBIT(ApplicationFlags, AF_WAKEUP_OFBUTTON_BIT );
 380:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		 }	
 381:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
 382:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 383:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 384:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 385:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** #endif /* (SBY_STANDBY_ENABLE == 1) */
 386:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 387:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	/**** Update DelaySecondsForUI ***/
 388:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** #ifdef _CORRECT_DELAY_TIMER_FOR_UI_
 389:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 390:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	delaySeconds = SWTC_GetRemainingTime((SWTC_CountersType)SPV_DELAY_TIMER_S_COUNTER);
 391:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 392:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if( (delaySeconds >= 0) && ( delaySeconds <= UINT8_T_MAX) )
 393:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
 394:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		DelaySecondsForUI = delaySeconds;
 395:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
 396:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 397:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** #endif /* _CORRECT_DELAY_TIMER_FOR_UI_ */
 398:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 399:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** }
 400:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**/
 401:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 402:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**
 403:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** Dato un valore e la variazione percentuale (con segno) richiesta, restituisce il delta
 404:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** da applicare al valore in ingresso (es. target di conteggio).
 405:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****  
 406:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \param [in] variation: variazione percentuale (con segno) richiesta
 407:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \param [in] value: target a cui applicare 
 408:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 409:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \return il delta (con segno) da applicare al valore in ingresso
 410:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 411:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \version		1.0.0
 412:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \date 			16/11/2006
 413:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \author  		Valeria Catani
 414:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** */
 415:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 416:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** int16_t GetDeltaFromVariation(uint16_t value, int8_t variation)
 417:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** {
 138                             		.loc 1 417 0
 139                             	.LVL9:
 140 0000 7E A7                   		push.l	r7
 141                             	.LCFI1:
 418:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** ldiv_t deltadiv;
 419:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** int32_t delta;
 420:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 421:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	delta = ((int32_t)value * abs(variation));
 142                             		.loc 1 421 0
 143 0002 CF 27                   		mov.B	r2, r7
 144 0004 FC 0F 7E                		abs	r7, r14
 145 0007 5F 11                   		movu.W	r1, r1
 422:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 423:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	deltadiv = ldiv(delta,(int32_t)100);	
 146                             		.loc 1 423 0
 147 0009 4F E1                   		mul	r14, r1
 148                             	.LVL10:
 149 000b 75 42 64                		mov.L	#0x64, r2
 150                             	.LVL11:
 151 000e 05 00 00 00             		bsr	_ldiv
 152                             	.LVL12:
 424:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 425:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	delta = deltadiv.quot;
 426:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 427:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if ( deltadiv.rem > 50 )
 153                             		.loc 1 427 0
 154 0012 75 52 32                		cmp	#50, r2
 155 0015 2B 05                   		ble	.L13
 428:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
 429:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		delta++;
 156                             		.loc 1 429 0
 157 0017 62 11                   		add	#1, r1
 158                             	.LVL13:
 159 0019 03                      		.balign 2,3,1
 160                             	.L13:
 430:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
 431:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 432:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if (variation > 0)
 161                             		.loc 1 432 0
 162 001a 61 07                   		cmp	#0, r7
 163 001c 2A 04                   		bgt	.L15
 433:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
 434:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		/* value � sempre > 0, il segno di delta dipende da variation */
 435:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		return ((int16_t) delta);
 436:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
 437:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 438:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	return ((int16_t)(-delta));
 164                             		.loc 1 438 0
 165 001e 7E 11                   		neg	r1
 166                             	.LVL14:
 167                             		.balign 2,3,1
 168                             	.L15:
 439:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** }
 169                             		.loc 1 439 0
 170 0020 DF 11                   		mov.W	r1, r1
 171 0022 3F 77 01                		rtsd	#4, r7-r7
 172                             	.LFE5:
 174 0025 03                      		.section	.text.TabQueryB,"ax",@progbits
 175                             		.global	_TabQueryB
 177                             	_TabQueryB:
 178                             	.LFB6:
 440:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**/
 441:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 442:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 443:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**
 444:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** Dato il puntatore ad una tabella a word in cui il byte alto (1) � un indice
 445:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** ed il byte basso (2) un valore, preso il valore regVal restituisce 
 446:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** il valore (2) corrispondente all'indice (1) minore o uguale a regVal.
 447:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 448:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \param [in] pTable puntatore alla tabella
 449:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \param [in] regVal valore di confronto dell'indice
 450:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 451:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \return	il valore della tabella corrispondente all'indice fornito
 452:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** */
 453:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** uint8_t TabQueryB(const Loader_Struct* pTable, uint8_t regVal)
 454:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** {
 179                             		.loc 1 454 0
 180                             	.LVL15:
 455:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** uint16_t *pRegIndex;
 456:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** uint8_t tabValue;
 457:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 458:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	pRegIndex = (uint16_t*)(pTable->Data);
 459:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	tabValue = LOBYTE(*pRegIndex++);
 460:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 461:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	while ((pRegIndex < ((uint16_t*)(pTable->Data) + pTable->DataLenght)) && (HIBYTE(*pRegIndex) <= re
 181                             		.loc 1 461 0
 182 0000 B1 13                   		movu.B	4[r1], r3
 458:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	pRegIndex = (uint16_t*)(pTable->Data);
 183                             		.loc 1 458 0
 184 0002 EC 1E                   		mov.L	[r1], r14
 185                             	.LVL16:
 186                             		.loc 1 461 0
 187 0004 4B 33                   		add	r3, r3
 459:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	tabValue = LOBYTE(*pRegIndex++);
 188                             		.loc 1 459 0
 189 0006 CD E4 01                		mov.B	1[r14], r4
 190                             	.LVL17:
 191                             		.loc 1 461 0
 192 0009 4B E3                   		add	r14, r3
 193 000b 5B 22                   		movu.B	r2, r2
 459:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	tabValue = LOBYTE(*pRegIndex++);
 194                             		.loc 1 459 0
 195 000d 62 2E                   		add	#2, r14
 196                             	.LVL18:
 197                             		.loc 1 461 0
 198 000f 2E 05                   		bra	.L18
 199                             	.LVL19:
 200                             	.L20:
 462:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
 463:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 464:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		tabValue = LOBYTE(*pRegIndex++);
 201                             		.loc 1 464 0
 202 0011 CF 14                   		mov.B	r1, r4
 203                             	.LVL20:
 204 0013 03                      		.balign 2,3,1
 205                             	.L18:
 461:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	while ((pRegIndex < ((uint16_t*)(pTable->Data) + pTable->DataLenght)) && (HIBYTE(*pRegIndex) <= re
 206                             		.loc 1 461 0 discriminator 1
 207 0014 47 3E                   		cmp	r3, r14
 208 0016 23 05                   		bltu	.L19
 209                             		.balign 2,3,1
 210                             	.L21:
 465:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
 466:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 467:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	return tabValue;
 211                             		.loc 1 467 0
 212 0018 5B 41                   		movu.B	r4, r1
 213 001a 02                      		rts
 214                             	.L19:
 461:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	while ((pRegIndex < ((uint16_t*)(pTable->Data) + pTable->DataLenght)) && (HIBYTE(*pRegIndex) <= re
 215                             		.loc 1 461 0 discriminator 2
 216 001b FD 29 E1                		mov.W	[r14+], r1
 217 001e 5F 15                   		movu.W	r1, r5
 218 0020 68 85                   		shlr	#8, r5
 219 0022 47 25                   		cmp	r2, r5
 220 0024 25 ED                   		bleu	.L20
 221 0026 2E F2                   		bra	.L21
 222                             	.LFE6:
 224                             		.section	.text.GetModifierData,"ax",@progbits
 225                             		.global	_GetModifierData
 227                             	_GetModifierData:
 228                             	.LFB7:
 468:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** }
 469:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**/
 470:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 471:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 472:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 473:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**
 474:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** Ritorna la variazione assciata ad un modificatore
 475:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 476:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \param [in] pModTable � il puntatore ai dati relativi al modificatore
 477:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 478:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \return la variazione associata al modificatore
 479:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****  
 480:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \version		1.0.0
 481:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \date 			14/02/2006
 482:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \author  		Simone Costantini
 483:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** */
 484:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 485:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 486:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** int8_t GetModifierData(const uint8_t* pModTable)
 487:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** {
 229                             		.loc 1 487 0
 230                             	.LVL21:
 231 0000 6E 7B                   		pushm	r7-r11
 232                             	.LCFI2:
 488:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** Loader_Struct regTable;
 489:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** uint16_t regVal;
 490:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** uint8_t indReg;
 491:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** uint8_t modData;
 492:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** uint8_t funcPos = GMD_FUNCPOS(pModTable);
 233                             		.loc 1 492 0
 234 0002 CC 14                   		mov.B	[r1], r4
 493:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** int8_t variation = MOD_DONT_CARE;
 494:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 495:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	/* L'indice di regolazione ha un offset di 1 */
 496:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	indReg = BufNewReg[funcPos] - 1;
 235                             		.loc 1 496 0
 236 0004 FB 72 00 00 00 00       		mov.L	#_BufNewReg, r7
 492:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** uint8_t funcPos = GMD_FUNCPOS(pModTable);
 237                             		.loc 1 492 0
 238 000a EF 4E                   		mov.L	r4, r14
 239 000c 75 2E 7F                		and	#0x7f, r14
 240                             	.LVL22:
 241                             		.loc 1 496 0
 242 000f FE 4E 77                		mov.B	[r14,r7], r7
 487:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** {
 243                             		.loc 1 487 0
 244 0012 60 C0                   		sub	#12, r0
 245                             	.LCFI3:
 246                             		.loc 1 496 0
 247 0014 60 17                   		sub	#1, r7
 248                             	.LVL23:
 497:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 498:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if(0xFF == indReg)
 249                             		.loc 1 498 0
 250 0016 5B 7A                   		movu.B	r7, r10
 251 0018 75 5A FF                		cmp	#0xff, r10
 252 001b 21 08                   		bne	.L24
 253                             	.LVL24:
 254 001d 03                      		.balign 2,3,2
 255                             	.L27:
 499:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
 500:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		/*
 501:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		(BufNewReg[funcPos] == 0) � una situazione anomala che non dovrebbe	mai	verificarsi. 
 502:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		Tuttavia, nella remota possibilit� che ci� accada e considerato che questa 
 503:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		funzione deve ritornare sempre un valore, scegliamo MOD_DONT_CARE 
 504:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		(ovvero non vengono applicati i modificatori).
 505:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		*/
 506:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		variation = MOD_DONT_CARE;
 256                             		.loc 1 506 0
 257 001e 75 41 7F                		mov	#0x7f, r1
 258 0021 2E 3D                   		bra	.L25
 259                             	.LVL25:
 260                             	.L24:
 507:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
 508:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	else
 509:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
 510:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		/* 
 511:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		E' stato letto correttamente il valore di regolazione della
 512:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		funzione specificata.
 513:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		*/
 514:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		modData = GMD_MOD_DATA(pModTable);
 515:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 516:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		if (GMD_HAVE_TABLE(pModTable))
 261                             		.loc 1 516 0
 262 0023 CF 44                   		mov.B	r4, r4
 263 0025 61 04                   		cmp	#0, r4
 514:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		modData = GMD_MOD_DATA(pModTable);
 264                             		.loc 1 514 0
 265 0027 CD 1A 01                		mov.B	1[r1], r10
 266                             	.LVL26:
 267                             		.loc 1 516 0
 268 002a 28 1D                   		bge	.L26
 517:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		{
 518:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			/* La funzione ha pi� regolazioni */
 519:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 520:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			if (BasicLoader(PTR_MICROPROG_MODIFIERS_DATA, modData, &regTable) == S_OK)			
 269                             		.loc 1 520 0
 270 002c 75 41 29                		mov	#41, r1
 271                             	.LVL27:
 272 002f CF A2                   		mov.B	r10, r2
 273 0031 EF 03                   		mov.L	r0, r3
 274 0033 05 00 00 00             		bsr	_BasicLoader
 275                             	.LVL28:
 276 0037 5B 11                   		movu.B	r1, r1
 277 0039 61 01                   		cmp	#0, r1
 278 003b 21 E3                   		bne	.L27
 521:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			{							
 522:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				/* Si lavora su INDICE della Regolazione */
 523:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				/* 
 524:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				Viene presa nella tabella la variazione corrispondente al
 525:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				pi� grande valore di regolazione <= regVal.
 526:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				*/
 527:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				variation = (int8_t) TabQueryB(&regTable, indReg);
 279                             		.loc 1 527 0
 280 003d EF 01                   		mov.L	r0, r1
 281 003f CF 72                   		mov.B	r7, r2
 282 0041 05 00 00 00             		bsr	_TabQueryB
 283                             	.LVL29:
 284 0045 2E 19                   		bra	.L25
 285                             	.LVL30:
 286                             	.L26:
 528:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				/*
 529:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				Variante: tabella ad accesso diretto
 530:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				if (indReg < 2*regTable.DataLenght)
 531:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				{
 532:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 					variation = (int8_t) *((uint8_t*)regTable.Data+ indReg);
 533:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				}
 534:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				*/
 535:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			}
 536:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 537:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		}
 538:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		else
 539:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		{
 540:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			/* 
 541:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			La funzione � di tipo ON/OFF, 
 542:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			se � il valore � 0 (OFF) non viene applicata alcuna variazione
 543:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			*/
 544:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			
 545:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			if (REG_getFunctionValueByPos(funcPos, &regVal) == S_OK)
 287                             		.loc 1 545 0
 288 0047 71 02 08                		add	#8, r0, r2
 289 004a CF E1                   		mov.B	r14, r1
 290                             	.LVL31:
 291 004c 05 00 00 00             		bsr	_REG_getFunctionValueByPos
 292                             	.LVL32:
 293 0050 5B 11                   		movu.B	r1, r1
 294 0052 61 01                   		cmp	#0, r1
 295 0054 21 CA                   		bne	.L27
 296                             	.LVL33:
 546:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			{
 547:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				if (regVal != 0)
 297                             		.loc 1 547 0
 298 0056 B9 07                   		movu.W	8[r0], r7
 299                             	.LVL34:
 300 0058 61 07                   		cmp	#0, r7
 301                             	.LVL35:
 302 005a 20 C4                   		beq	.L27
 548:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				{		
 549:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 					variation = (int8_t) modData;
 303                             		.loc 1 549 0
 304 005c CF A1                   		mov.B	r10, r1
 305                             	.LVL36:
 306                             		.balign 2,3,1
 307                             	.L25:
 550:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				}
 551:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			}
 552:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		}
 553:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}	
 554:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 555:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	return variation;
 556:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** }
 308                             		.loc 1 556 0
 309 005e CF 11                   		mov.B	r1, r1
 310 0060 3F 7B 08                		rtsd	#32, r7-r11
 311                             	.LFE7:
 313 0063 03                      		.section	.text.TabQuery,"ax",@progbits
 314                             		.global	_TabQuery
 316                             	_TabQuery:
 317                             	.LFB8:
 557:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 558:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 559:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**
 560:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** Ricerca il valore ingresso nella tabella restituisce il corrispondente valore di uscita.
 561:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 562:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** E' applicabile a Generic Inputs 
 563:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** (ANALOG TO DEGREES, FREQ TO WATER LEVEL (PRESSURE SENSOR - LINEAR)
 564:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** ANALOG TO CRITERION, FREQ TO CRITERION, ANALOG TO LEVELS) e modificatori
 565:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 566:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** Formato dati supportato: Input 
 567:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                             8/16 bit unsigned
 568:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                          Output.
 569:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                             8/16 bit signed/unsigned
 570:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                         
 571:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** Operazione sui dati di uscita:interpolazione oppure no
 572:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 573:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****  
 574:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \param [in]		*_in : puntatore alla struttura TabQueryIn_t                                          
 575:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \param [out]	*_result : puntatore al risultato della conversione (TabQueryResult_t)
 576:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \return 			uint8_t
 577:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \retvalue 		S_OK se la conversione � andata a buon fine
 578:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \retvalue       S_FALSE se il numer di punti � nullo.o se la ricerca fallisce.
 579:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 580:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				
 581:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \version		1.0.1
 582:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \date 			30/06/2008
 583:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \author			Roberto Fioravanti
 584:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 585:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \note		\par \b Nota 1:           
 586:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \todo       -
 587:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             
 588:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** */
 589:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** uint8_t TabQuery(const TabQueryIn_t * _in, TabQueryResult_t * _result)
 590:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** {        
 318                             		.loc 1 590 0
 591:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     uint8_t *pInputData;                    /*pnt ai dati in ingresso*/
 592:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     uint8_t *pOutputData;	                /*pnt ai dati in uscita*/
 593:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     uint8_t *pCurrInputData;                /*pnt al valore range corrente  */
 594:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     uint8_t range_index = 0;                /*indice del range della lettura*/
 595:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     uint16_t currInputVal,prevInputVal;     /*valori ingresso range corrente e precendente*/
 596:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     uint16_t currOutputVal,prevOutputVal;	/*valori uscita range corernte e precedente*/
 597:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     uint16_t psLowerBound, psUpperBound;    /*limiti*/
 598:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     bool8_t bFound=FALSE;
 599:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     
 600:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if(_in->tab->pointNumber == 0)
 319                             		.loc 1 600 0
 320 0000 ED 1E 01                		mov.L	4[r1], r14
 321 0003 CD E5 01                		mov.B	1[r14], r5
 322 0006 5B 54                   		movu.B	r5, r4
 323 0008 61 04                   		cmp	#0, r4
 324 000a 21 05                   		bne	.L33
 325 000c 38 84 01                		bra	.L68
 326                             	.L33:
 590:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** {        
 327                             		.loc 1 590 0
 328 000f 6E 7D                   		pushm	r7-r13
 329                             	.LCFI4:
 601:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
 602:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		/* Numero di elementi della tabella nullo: non � possibile valorizzare *returnValue */
 603:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		return S_FALSE;
 604:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		
 605:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
 606:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 607:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	pInputData = ( (uint8_t*)_in->tab + FIXED_GI_TAB_LEN ); 
 608:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     /* puntatore al campo dati dei valori di output (allineato a word) */ 
 609:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	pOutputData = ( (uint8_t*)_in->tab + FIXED_GI_TAB_LEN + (_in->tab->pointNumber<<(_in->tab->S1&GI_W
 330                             		.loc 1 609 0
 331 0011 58 EB                   		movu.B	[r14], r11
 607:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	pInputData = ( (uint8_t*)_in->tab + FIXED_GI_TAB_LEN ); 
 332                             		.loc 1 607 0
 333 0013 71 E3 02                		add	#2, r14, r3
 334                             		.loc 1 609 0
 335 0016 68 5B                   		shlr	#5, r11
 336 0018 EF B7                   		mov.L	r11, r7
 337 001a 64 1B                   		and	#1, r11
 338 001c FD 62 B4                		shll	r11, r4
 339 001f 62 24                   		add	#2, r4
 340 0021 64 37                   		and	#3, r7
 341 0023 4B E4                   		add	r14, r4
 610:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if(((_in->tab->S1 & GI_WORD) == GI_BYTE) && (_in->tab->pointNumber&1))
 342                             		.loc 1 610 0
 343 0025 61 0B                   		cmp	#0, r11
 344 0027 21 0B                   		bne	.L35
 345                             		.loc 1 610 0 is_stmt 0 discriminator 1
 346 0029 FD 74 C5 01             		tst	#1, r5
 347 002d 20 05                   		beq	.L35
 611:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
 612:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	    pOutputData++;
 348                             		.loc 1 612 0 is_stmt 1
 349 002f 62 14                   		add	#1, r4
 350 0031 03                      		.balign 2,3,1
 351                             	.L35:
 613:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
 614:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 615:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	pCurrInputData=pInputData;
 616:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 617:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     /* Limite inferiore e superiore */
 618:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     switch(_in->tab->S1)
 352                             		.loc 1 618 0
 353 0032 5B 77                   		movu.B	r7, r7
 354 0034 61 07                   		cmp	#0, r7
 355 0036 20 08                   		beq	.L37
 356 0038 61 17                   		cmp	#1, r7
 357 003a 21 1E                   		bne	.L36
 358 003c 2E 0F                   		bra	.L38
 359                             	.L37:
 619:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     {
 620:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         case 0:
 621:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             /* uc */
 622:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             psLowerBound = (uint16_t)(*pInputData);
 623:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	        psUpperBound = (uint16_t)(*(pInputData+_in->tab->pointNumber-1));
 360                             		.loc 1 623 0
 361 003e 5B 55                   		movu.B	r5, r5
 362 0040 4B 35                   		add	r3, r5
 363 0042 60 15                   		sub	#1, r5
 622:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             psLowerBound = (uint16_t)(*pInputData);
 364                             		.loc 1 622 0
 365 0044 59 EF 02                		movu.B	2[r14], r15
 366                             		.loc 1 623 0
 367 0047 58 5A                   		movu.B	[r5], r10
 624:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	    break;
 368                             		.loc 1 624 0
 369 0049 2E 0F                   		bra	.L36
 370                             	.L38:
 625:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         
 626:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         case 1:
 627:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             /* us */
 628:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             psLowerBound = *((uint16_t*)pInputData);
 629:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	        psUpperBound = *((uint16_t*)pInputData+_in->tab->pointNumber-1);
 371                             		.loc 1 629 0
 372 004b 5B 55                   		movu.B	r5, r5
 373 004d 60 15                   		sub	#1, r5
 374 004f 4B 55                   		add	r5, r5
 375 0051 4B 35                   		add	r3, r5
 628:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             psLowerBound = *((uint16_t*)pInputData);
 376                             		.loc 1 628 0
 377 0053 DD EF 01                		mov.W	2[r14], r15
 378                             		.loc 1 629 0
 379 0056 DC 5A                   		mov.W	[r5], r10
 380                             		.balign 2,3,5
 381                             	.L36:
 630:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	       
 631:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         break;
 632:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     }
 633:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 634:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	 _result->b.lbound = (_in->cfr_val<psLowerBound)?TRUE:FALSE;
 382                             		.loc 1 634 0
 383 0058 DD 1B 04                		mov.W	8[r1], r11
 384 005b CD 2C 04                		mov.B	4[r2], r12
 385 005e 5F B7                   		movu.W	r11, r7
 386 0060 5F FF                   		movu.W	r15, r15
 387 0062 47 F7                   		cmp	r15, r7
 635:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	 _result->b.ubound = (_in->cfr_val>psUpperBound)?TRUE:FALSE;
 388                             		.loc 1 635 0
 389 0064 5F AA                   		movu.W	r10, r10
 634:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	 _result->b.lbound = (_in->cfr_val<psLowerBound)?TRUE:FALSE;
 390                             		.loc 1 634 0
 391 0066 FD E7 3C                		bmltu	#7, r12
 392                             		.loc 1 635 0
 393 0069 47 A7                   		cmp	r10, r7
 394 006b FD E6 4C                		bmgtu	#6, r12
 395 006e C7 2C 04                		mov.B	r12, 4[r2]
 594:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     uint8_t range_index = 0;                /*indice del range della lettura*/
 396                             		.loc 1 594 0
 397 0071 66 05                   		mov	#0, r5
 636:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	        
 637:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	 
 638:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	/* ricerca */
 639:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     while( (!bFound) && (range_index < _in->tab->pointNumber))  
 398                             		.loc 1 639 0
 399 0073 59 ED 01                		movu.B	1[r14], r13
 400 0076 EF 7C                   		mov.L	r7, r12
 401 0078 2E 3C                   		bra	.L39
 402                             	.L45:
 640:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     {	  
 641:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****  	     	    
 642:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         if(_in->tab->S1&GI_WORD) 
 403                             		.loc 1 642 0
 404 007a 58 E7                   		movu.B	[r14], r7
 643:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         {
 644:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****           /* formato input a WORD */
 645:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****           prevInputVal = *((uint16_t*)pCurrInputData);     
 405                             		.loc 1 645 0
 406 007c EF 3A                   		mov.L	r3, r10
 642:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         if(_in->tab->S1&GI_WORD) 
 407                             		.loc 1 642 0
 408 007e FD 74 C7 20             		tst	#32, r7
 409 0082 20 0A                   		beq	.L40
 410                             		.loc 1 645 0
 411 0084 FD 29 A7                		mov.W	[r10+], r7
 646:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****           pCurrInputData+=sizeof(uint16_t);
 647:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****          currInputVal = *((uint16_t*)pCurrInputData);     	
 412                             		.loc 1 647 0
 413 0087 DD 3F 01                		mov.W	2[r3], r15
 414 008a 2E 08                   		bra	.L69
 415                             	.L40:
 648:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             
 649:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         }
 650:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         else 
 651:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         { 
 652:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****           /* formato input a BYTE */      
 653:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****           prevInputVal = (uint16_t)*(pCurrInputData);   
 416                             		.loc 1 653 0
 417 008c FD 38 A7                		movu.B	[r10+], r7
 654:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****           pCurrInputData++;
 655:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****           currInputVal = (uint16_t)*(pCurrInputData);      
 418                             		.loc 1 655 0
 419 008f 59 3F 01                		movu.B	1[r3], r15
 420                             		.balign 2,3,1
 421                             	.L69:
 654:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****           pCurrInputData++;
 422                             		.loc 1 654 0
 423 0092 EF A3                   		mov.L	r10, r3
 656:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         	
 657:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         }
 658:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 659:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         /* verisfica della condizione di ricerca */
 660:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         if(_in->opt.b.findexactvalue == 0)
 424                             		.loc 1 660 0
 425 0094 EC 1A                   		mov.L	[r1], r10
 426 0096 61 0A                   		cmp	#0, r10
 427 0098 29 0B                   		blt	.L42
 661:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         {            
 662:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             if(_in->cfr_val <= currInputVal)
 428                             		.loc 1 662 0
 429 009a 5F FA                   		movu.W	r15, r10
 430 009c 47 AC                   		cmp	r10, r12
 431 009e FC DB A5                		scleu.L	r10
 432 00a1 2E 09                   		bra	.L43
 433                             	.L42:
 663:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             {
 664:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	bFound=TRUE;
 665:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             }
 666:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         }
 667:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         else
 668:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         {
 669:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             if(_in->cfr_val == prevInputVal)
 434                             		.loc 1 669 0
 435 00a3 5F 7A                   		movu.W	r7, r10
 436 00a5 47 AC                   		cmp	r10, r12
 437 00a7 FC DB A0                		sceq.L	r10
 438                             		.balign 2,3,1
 439                             	.L43:
 670:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             {
 671:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	bFound=TRUE;
 672:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             }
 673:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         }
 674:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         
 675:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         range_index++;
 440                             		.loc 1 675 0
 441 00aa 62 15                   		add	#1, r5
 639:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     while( (!bFound) && (range_index < _in->tab->pointNumber))  
 442                             		.loc 1 639 0
 443 00ac 5B AA                   		movu.B	r10, r10
 444 00ae 61 0A                   		cmp	#0, r10
 445 00b0 3B BC 00                		bne	.L44
 446 00b3 03                      		.balign 2,3,1
 447                             	.L39:
 639:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     while( (!bFound) && (range_index < _in->tab->pointNumber))  
 448                             		.loc 1 639 0 is_stmt 0 discriminator 2
 449 00b4 5B 57                   		movu.B	r5, r7
 450 00b6 47 D7                   		cmp	r13, r7
 451 00b8 21 C2                   		bne	.L45
 452 00ba 38 C2 00                		bra	.L64
 453                             	.L54:
 676:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         
 677:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     }
 678:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     
 679:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     if(bFound)
 680:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     {
 681:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         if(!_in->tab->Int)
 682:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         {            
 683:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             if(_in->tab->S2&GI_WORD)
 454                             		.loc 1 683 0 is_stmt 1
 455 00bd FD 83 AE                		shlr	#3, r10, r14
 456 00c0 64 1E                   		and	#1, r14
 457 00c2 5B 55                   		movu.B	r5, r5
 458 00c4 20 0C                   		beq	.L47
 684:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             {
 685:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                 
 686:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                 _result->data=*((uint16_t*)pOutputData + range_index - 1);
 459                             		.loc 1 686 0
 460 00c6 60 15                   		sub	#1, r5
 461 00c8 4B 55                   		add	r5, r5
 462 00ca 4B 54                   		add	r5, r4
 463 00cc DC 44                   		mov.W	[r4], r4
 464 00ce 2E 54                   		bra	.L72
 465                             	.L47:
 687:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             }
 688:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             else
 689:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             {
 690:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                 _result->data=(uint16_t)*(pOutputData + range_index - 1);
 466                             		.loc 1 690 0
 467 00d0 4B 45                   		add	r4, r5
 468 00d2 60 15                   		sub	#1, r5
 469 00d4 58 57                   		movu.B	[r5], r7
 470 00d6 D3 27                   		mov.W	r7, [r2]
 471 00d8 38 8E 00                		bra	.L57
 472                             	.L66:
 691:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             }
 692:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         }
 693:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         else
 694:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         {
 695:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             if(_in->tab->S2&GI_WORD)
 473                             		.loc 1 695 0
 474 00db FD 74 CA 08             		tst	#8, r10
 475 00df 5B 55                   		movu.B	r5, r5
 476 00e1 20 13                   		beq	.L48
 696:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             {/* Output dati a WORD con interpolazione */
 697:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	   		   
 698:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	currOutputVal = (uint16_t)(*((uint16_t*)pOutputData + range_index));
 477                             		.loc 1 698 0
 478 00e3 FF 2A 55                		add	r5, r5, r10
 699:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	prevOutputVal = (uint16_t)(*((uint16_t*)pOutputData + range_index - 1));
 479                             		.loc 1 699 0
 480 00e6 60 15                   		sub	#1, r5
 481 00e8 4B 55                   		add	r5, r5
 698:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	currOutputVal = (uint16_t)(*((uint16_t*)pOutputData + range_index));
 482                             		.loc 1 698 0
 483 00ea 4B 4A                   		add	r4, r10
 484                             		.loc 1 699 0
 485 00ec 4B 54                   		add	r5, r4
 698:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	currOutputVal = (uint16_t)(*((uint16_t*)pOutputData + range_index));
 486                             		.loc 1 698 0
 487 00ee DC AA                   		mov.W	[r10], r10
 488                             		.loc 1 699 0
 489 00f0 DC 44                   		mov.W	[r4], r4
 490 00f2 2E 0A                   		bra	.L49
 491                             	.L48:
 700:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             }
 701:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             else
 702:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             {/* Output dati a BYTE con interpolazione */
 703:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             			  
 704:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	currOutputVal = (uint8_t)(*((uint8_t*)pOutputData + range_index));			  
 492                             		.loc 1 704 0
 493 00f4 4B 45                   		add	r4, r5
 494 00f6 58 5A                   		movu.B	[r5], r10
 705:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	prevOutputVal = (uint8_t)(*((uint8_t*)pOutputData + range_index-1));				
 495                             		.loc 1 705 0
 496 00f8 60 15                   		sub	#1, r5
 497 00fa 58 54                   		movu.B	[r5], r4
 498                             		.balign 2,3,1
 499                             	.L49:
 706:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             }	
 707:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 708:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             _result->data = (uint16_t)(((((int32_t)_in->cfr_val - (int32_t)prevInputVal) * (int32_t
 500                             		.loc 1 708 0
 501 00fc 5F 77                   		movu.W	r7, r7
 502 00fe 5F B3                   		movu.W	r11, r3
 503 0100 5F AA                   		movu.W	r10, r10
 504 0102 5F 4B                   		movu.W	r4, r11
 505 0104 43 73                   		sub	r7, r3
 506 0106 43 BA                   		sub	r11, r10
 507 0108 5F FF                   		movu.W	r15, r15
 508 010a FF 07 7F                		sub	r7, r15, r7
 509 010d 4F A3                   		mul	r10, r3
 510 010f FC 23 73                		div	r7, r3
 511 0112 4B 34                   		add	r3, r4
 512 0114 D3 24                   		mov.W	r4, [r2]
 709:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             
 710:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             if((_in->tab->S2&GI_WORD)==0)
 513                             		.loc 1 710 0
 514 0116 58 E1                   		movu.B	[r14], r1
 515 0118 68 31                   		shlr	#3, r1
 516 011a 64 11                   		and	#1, r1
 517 011c 21 4A                   		bne	.L57
 711:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             {			  
 712:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                 _result->data=(uint8_t)_result->data;
 518                             		.loc 1 712 0
 519 011e 76 24 FF 00             		and	#0xff, r4
 520                             		.balign 2,3,1
 521                             	.L72:
 522 0122 D3 24                   		mov.W	r4, [r2]
 523 0124 2E 44                   		bra	.L34
 524                             	.L56:
 713:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             }
 714:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         }
 715:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         return S_OK;
 716:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     }
 717:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     
 718:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     if(_result->b.lbound)
 719:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     {        
 720:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         if(_in->tab->S2&GI_WORD)
 525                             		.loc 1 720 0
 526 0126 58 EA                   		movu.B	[r14], r10
 527 0128 FD 74 CA 08             		tst	#8, r10
 528 012c 20 06                   		beq	.L50
 721:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         {
 722:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             
 723:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             _result->oBoundVal=*((uint16_t*)pOutputData);
 529                             		.loc 1 723 0
 530 012e DC 4A                   		mov.W	[r4], r10
 531 0130 2E 04                   		bra	.L70
 532                             	.L50:
 724:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         }
 725:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         else
 726:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         {
 727:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             _result->oBoundVal=(uint16_t)*(pOutputData);
 533                             		.loc 1 727 0
 534 0132 58 4A                   		movu.B	[r4], r10
 535                             		.balign 2,3,5
 536                             	.L70:
 537 0134 D7 2A 01                		mov.W	r10, 2[r2]
 538 0137 03                      		.balign 2,3,3
 539                             	.L51:
 728:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         }
 729:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     }
 730:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     
 731:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     if(_result->b.ubound)
 540                             		.loc 1 731 0
 541 0138 76 27 00 40             		and	#0x4000, r7
 542 013c 5F 77                   		movu.W	r7, r7
 543 013e 61 07                   		cmp	#0, r7
 544 0140 20 22                   		beq	.L71
 732:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     {        
 733:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         if(_in->tab->S2&GI_WORD)
 545                             		.loc 1 733 0
 546 0142 58 EA                   		movu.B	[r14], r10
 547 0144 59 E7 01                		movu.B	1[r14], r7
 548 0147 FD 74 CA 08             		tst	#8, r10
 549 014b 20 0E                   		beq	.L53
 734:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         {
 735:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             
 736:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             _result->oBoundVal=*((uint16_t*)pOutputData+_in->tab->pointNumber-1);
 550                             		.loc 1 736 0
 551 014d 60 17                   		sub	#1, r7
 552 014f 4B 77                   		add	r7, r7
 553 0151 4B 74                   		add	r7, r4
 554 0153 DC 44                   		mov.W	[r4], r4
 555 0155 90 2C                   		mov.W	r4, 2[r2]
 556 0157 2E 0B                   		bra	.L71
 557                             	.L53:
 737:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         }
 738:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         else
 739:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         {
 740:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             _result->oBoundVal=(uint16_t)*(pOutputData+_in->tab->pointNumber-1);
 558                             		.loc 1 740 0
 559 0159 4B 47                   		add	r4, r7
 560 015b 60 17                   		sub	#1, r7
 561 015d 58 77                   		movu.B	[r7], r7
 562 015f 90 2F                   		mov.W	r7, 2[r2]
 563 0161 03                      		.balign 2,3,1
 564                             	.L71:
 741:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         }
 742:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     }
 743:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 744:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	return S_FALSE;
 565                             		.loc 1 744 0
 566 0162 66 11                   		mov	#1, r1
 567 0164 2E 04                   		bra	.L34
 568                             	.L57:
 715:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         return S_OK;
 569                             		.loc 1 715 0
 570 0166 66 01                   		mov	#0, r1
 571                             		.balign 2,3,1
 572                             	.L34:
 573 0168 5B 11                   		movu.B	r1, r1
 574 016a 2E 23                   		bra	.L65
 575                             	.L44:
 681:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         if(!_in->tab->Int)
 576                             		.loc 1 681 0
 577 016c CC E1                   		mov.B	[r14], r1
 578 016e 58 EA                   		movu.B	[r14], r10
 579 0170 64 41                   		and	#4, r1
 580 0172 5B 11                   		movu.B	r1, r1
 581 0174 61 01                   		cmp	#0, r1
 582 0176 3A 47 FF                		beq	.L54
 583 0179 38 62 FF                		bra	.L66
 584                             	.L64:
 718:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     if(_result->b.lbound)
 585                             		.loc 1 718 0
 586 017c 98 A7                   		mov.W	4[r2], r7
 587 017e EF 7A                   		mov.L	r7, r10
 588 0180 77 2A 00 80 00          		and	#0x8000, r10
 589 0185 5F AA                   		movu.W	r10, r10
 590 0187 61 0A                   		cmp	#0, r10
 591 0189 21 9D                   		bne	.L56
 592 018b 2E AD                   		bra	.L51
 593                             	.L65:
 745:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 746:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** }
 594                             		.loc 1 746 0
 595 018d 3F 7D 07                		rtsd	#28, r7-r13
 596                             	.L68:
 597                             	.LCFI5:
 603:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		return S_FALSE;
 598                             		.loc 1 603 0
 599 0190 66 11                   		mov	#1, r1
 600 0192 5B 11                   		movu.B	r1, r1
 601                             		.loc 1 746 0
 602 0194 02                      		rts
 603                             	.LFE8:
 605 0195 03                      		.section	.text.GetModifierValue,"ax",@progbits
 606                             		.global	_GetModifierValue
 608                             	_GetModifierValue:
 609                             	.LFB9:
 747:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 748:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**
 749:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** Data una lista di modificatori restituisce variazione percentuale associata con segno.
 750:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****  
 751:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \param [in] tableID indice della tabella dei modificatori
 752:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \param [out] pModifierValue  se S_OK restituisce il modificatore
 753:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 754:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \return uint8_t 
 755:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \retvalue   MOD_DONT_CARE modificatori non individuato o non attivo
 756:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			S_FALSE Indice tabella non valido (tabella variabili, tabella modificatori 1� lev)
 757:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			S_OK    modificatori attivo
 758:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****  
 759:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \version		1.0.0
 760:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \date 			01/07/2008
 761:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \author  		Roberto Fioravanti
 762:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** */
 763:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** uint8_t GetModifierValue(uint8_t tabIndex, int8_t *pModifierValue)
 764:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** {
 610                             		.loc 1 764 0
 611                             	.LVL37:
 612 0000 6E 6D                   		pushm	r6-r13
 613                             	.LCFI6:
 614 0002 71 00 D8                		add	#-40, r0
 615                             	.LCFI7:
 765:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** Loader_Struct ldVarTable, ldData;
 766:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** ModifierL1Table_t   *pL1Table;
 767:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** int16_t modifierVarValue=0, funcVal;
 768:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** uint8_t dataType, dataIndex;
 769:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** uint8_t sRet =S_FALSE;
 770:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** bool_t bModFound=FALSE,valid=TRUE;
 771:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** #ifdef _CORRECT_TABLE_MODIFIERS_BUG_
 772:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** uint16_t *pEndL1Table;
 773:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** #endif /* _CORRECT_TABLE_MODIFIERS_BUG_ */
 774:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 775:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     if(tabIndex==0xFF)
 616                             		.loc 1 775 0
 617 0005 5B 1A                   		movu.B	r1, r10
 618 0007 75 5A FF                		cmp	#0xff, r10
 764:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** {
 619                             		.loc 1 764 0
 620 000a CF 17                   		mov.B	r1, r7
 621 000c EF 2B                   		mov.L	r2, r11
 622                             		.loc 1 775 0
 623 000e 21 08                   		bne	.L74
 776:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     {
 777:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         
 778:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	    *pModifierValue=0;
 624                             		.loc 1 778 0
 625 0010 3C 20 00                		mov.B	#0, [r2]
 626 0013 38 1A 01                		bra	.L76
 627                             	.L74:
 779:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	    return S_FALSE;
 780:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     }
 781:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     
 782:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     /* Caricamento puntatore alla tabella delle variabili che agiscono da modificatori */
 783:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if( BasicLoader(PTR_HW_CONFIG_DATA, DSPL_HWC_MODIFIERS_VAR_TABLE, &ldVarTable) != S_OK)
 628                             		.loc 1 783 0
 629 0016 71 03 14                		add	#20, r0, r3
 630 0019 66 A1                   		mov	#10, r1
 631                             	.LVL38:
 632 001b 66 62                   		mov	#6, r2
 633                             	.LVL39:
 634 001d 05 00 00 00             		bsr	_BasicLoader
 635                             	.LVL40:
 636 0021 5B 11                   		movu.B	r1, r1
 637 0023 61 01                   		cmp	#0, r1
 638 0025 3B 08 01                		bne	.L76
 784:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
 785:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		return S_FALSE;
 786:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
 787:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 788:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 789:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if( BasicLoader(PTR_MICROPROG_MODIFIERS_DATA, tabIndex, &ldData) != S_OK)
 639                             		.loc 1 789 0
 640 0028 71 08 0C                		add	#12, r0, r8
 641 002b 75 41 29                		mov	#41, r1
 642 002e CF 72                   		mov.B	r7, r2
 643 0030 EF 83                   		mov.L	r8, r3
 644 0032 05 00 00 00             		bsr	_BasicLoader
 645                             	.LVL41:
 646 0036 5B 11                   		movu.B	r1, r1
 647 0038 61 01                   		cmp	#0, r1
 648 003a 3B F3 00                		bne	.L76
 790:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
 791:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		
 792:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		return S_FALSE;
 793:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
 794:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 795:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 796:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     /* Puntatore ai parametri della tabella di livello 1 */
 797:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	/*lint -e826 */
 798:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	pL1Table = (ModifierL1Table_t *)ldData.Data;
 799:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     /*lint +e826 */
 800:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 801:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** #ifdef _CORRECT_TABLE_MODIFIERS_BUG_
 802:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	pEndL1Table = (uint16_t*)ldData.Data + ldData.DataLenght;
 649                             		.loc 1 802 0
 650 003d 59 09 10                		movu.B	16[r0], r9
 798:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	pL1Table = (ModifierL1Table_t *)ldData.Data;
 651                             		.loc 1 798 0
 652 0040 A8 8F                   		mov.L	12[r0], r7
 653                             	.LVL42:
 654                             		.loc 1 802 0
 655 0042 4B 99                   		add	r9, r9
 656 0044 4B 79                   		add	r7, r9
 657                             	.LVL43:
 770:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** bool_t bModFound=FALSE,valid=TRUE;
 658                             		.loc 1 770 0
 659 0046 66 1A                   		mov.L	#1, r10
 660                             	.LVL44:
 767:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** int16_t modifierVarValue=0, funcVal;
 661                             		.loc 1 767 0
 662 0048 DF 1C                   		mov.W	r1, r12
 663 004a 38 DA 00                		bra	.L77
 664                             	.LVL45:
 665                             	.L88:
 803:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 804:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     while ( (!bModFound) && ((uint16_t*)pL1Table < pEndL1Table) )
 805:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** #else
 806:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     while ((!bModFound) && ((uint16_t*)pL1Table < ((uint16_t*)ldData.Data + ldData.DataLenght)))
 807:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** #endif /* _CORRECT_TABLE_MODIFIERS_BUG_ */
 808:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     {
 809:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         /* scorre la lista dei modificatori */
 810:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         
 811:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         	dataType=((Condition_SelDataStruct *)(ldVarTable.Data) + pL1Table->varPos)->dataType;
 666                             		.loc 1 811 0
 667 004d 58 7D                   		movu.B	[r7], r13
 668 004f ED 0E 05                		mov.L	20[r0], r14
 669                             	.LVL46:
 670 0052 68 2D                   		shlr	#2, r13
 671 0054 4B DD                   		add	r13, r13
 672 0056 4B ED                   		add	r14, r13
 673 0058 CD D6 01                		mov.B	1[r13], r6
 812:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         	dataIndex=((Condition_SelDataStruct *)(ldVarTable.Data) + pL1Table->varPos)->dataIndex;
 674                             		.loc 1 812 0
 675 005b CC D1                   		mov.B	[r13], r1
 813:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                 	
 814:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         	
 815:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             if(pL1Table->dataFormat == MOD_LEV1_DT_VALUE)
 676                             		.loc 1 815 0
 677 005d CC 7E                   		mov.B	[r7], r14
 812:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         	dataIndex=((Condition_SelDataStruct *)(ldVarTable.Data) + pL1Table->varPos)->dataIndex;
 678                             		.loc 1 812 0
 679 005f 75 21 3F                		and	#63, r1
 811:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         	dataType=((Condition_SelDataStruct *)(ldVarTable.Data) + pL1Table->varPos)->dataType;
 680                             		.loc 1 811 0
 681 0062 75 26 3F                		and	#63, r6
 682                             	.LVL47:
 683                             		.loc 1 815 0
 684 0065 64 1E                   		and	#1, r14
 812:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         	dataIndex=((Condition_SelDataStruct *)(ldVarTable.Data) + pL1Table->varPos)->dataIndex;
 685                             		.loc 1 812 0
 686 0067 CF 14                   		mov.B	r1, r4
 687                             	.LVL48:
 688                             		.loc 1 815 0
 689 0069 EF ED                   		mov.L	r14, r13
 690 006b 21 2D                   		bne	.L78
 816:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             {
 817:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                 /* il campo data � il dato */
 818:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                 switch(dataType)
 691                             		.loc 1 818 0
 692 006d 5B 66                   		movu.B	r6, r6
 693 006f 61 86                   		cmp	#8, r6
 694 0071 21 22                   		bne	.L98
 819:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	{
 820:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	    case JIF_TAB_FUNCTIONS_SEG:
 821:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	    
 822:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	        /* estrae il dato della funzione */
 823:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                 	    if (REG_getFunctionValueByPos(dataIndex, (uint16_t*)&funcVal) == S_OK)
 695                             		.loc 1 823 0
 696 0073 71 02 22                		add	#34, r0, r2
 697 0076 05 00 00 00             		bsr	_REG_getFunctionValueByPos
 698                             	.LVL49:
 699 007a 5B 11                   		movu.B	r1, r1
 700 007c 61 01                   		cmp	#0, r1
 701 007e 3B 9E 00                		bne	.L91
 702                             	.LVL50:
 824:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             			{
 825:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             				if (funcVal != 0)
 703                             		.loc 1 825 0
 704 0081 DD 0E 11                		mov.W	34[r0], r14
 705                             	.LVL51:
 706 0084 61 0E                   		cmp	#0, r14
 707                             	.LVL52:
 708 0086 3A 98 00                		beq	.L81
 826:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             				{		            					
 827:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             					*pModifierValue=(int8_t)pL1Table->data;
 709                             		.loc 1 827 0
 710 0089 CD 7D 01                		mov.B	1[r7], r13
 711 008c C3 BD                   		mov.B	r13, [r11]
 712                             	.LVL53:
 713                             		.balign 2,3,1
 714                             	.L104:
 828:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             					bModFound=TRUE;
 715                             		.loc 1 828 0
 716 008e 66 1E                   		mov.L	#1, r14
 717                             	.LVL54:
 718 0090 38 8E 00                		bra	.L81
 719                             	.LVL55:
 720                             	.L98:
 829:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             				}
 830:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             			}
 831:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	        break;
 832:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	        
 833:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	    default:
 834:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	        *pModifierValue=0;
 721                             		.loc 1 834 0
 722 0093 C3 BE                   		mov.B	r14, [r11]
 723 0095 38 87 00                		bra	.L91
 724                             	.L78:
 725                             	.LBB2:
 835:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	}
 836:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                 
 837:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                 
 838:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             }
 839:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             else
 840:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             {
 841:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                 
 842:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                 TabQueryIn_t        qin;                
 843:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                 TabQueryResult_t    qresult;
 844:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                 
 845:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                                               
 846:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	/* Caricamento della tabella di livello 2 dei modificatori */
 847:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	if(BasicLoader(PTR_MICROPROG_MODIFIERS_DATA, pL1Table->data, &ldData) != S_OK)
 726                             		.loc 1 847 0
 727 0098 88 7A                   		mov.B	1[r7], r2
 728 009a 75 41 29                		mov	#41, r1
 729                             	.LVL56:
 730 009d EF 83                   		mov.L	r8, r3
 731 009f A2 0C                   		mov.L	r4, 36[r0]
 732 00a1 05 00 00 00             		bsr	_BasicLoader
 733                             	.LVL57:
 734 00a5 5B 11                   		movu.B	r1, r1
 735 00a7 61 01                   		cmp	#0, r1
 736 00a9 AA 0C                   		mov.L	36[r0], r4
 737 00ab 20 05                   		beq	.L82
 738 00ad 38 80 00                		bra	.L76
 739                             	.L82:
 848:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	{
 849:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 850:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             		return S_FALSE;
 851:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	}
 852:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	
 853:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	switch(dataType)
 740                             		.loc 1 853 0
 741 00b0 5B 66                   		movu.B	r6, r6
 742 00b2 61 46                   		cmp	#4, r6
 743 00b4 20 08                   		beq	.L84
 744 00b6 61 86                   		cmp	#8, r6
 745 00b8 21 36                   		bne	.L99
 746 00ba 2E 1F                   		bra	.L85
 747                             	.L84:
 854:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	{
 855:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	    case JIF_TAB_GI_TURBIDITY_SEG: 
 856:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	     
 857:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	        if( HWC_Flags.bit.turbsens )
 748                             		.loc 1 857 0
 749 00bc FB A2 00 00 00 00       		mov.L	#_HWC_Flags, r10
 750 00c2 DC AA                   		mov.W	[r10], r10
 751 00c4 77 2A 00 80 00          		and	#0x8000, r10
 752 00c9 5F AA                   		movu.W	r10, r10
 753 00cb 61 0A                   		cmp	#0, r10
 754 00cd 20 4B                   		beq	.L105
 858:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	        {
 859:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	            
 860:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	            modifierVarValue=GITurbidity;
 755                             		.loc 1 860 0
 756 00cf FB A2 00 00 00 00       		mov.L	#_GITurbidity, r10
 757 00d5 58 AC                   		movu.B	[r10], r12
 758                             	.LVL58:
 759 00d7 2E 0F                   		bra	.L103
 760                             	.LVL59:
 761                             	.L85:
 861:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	            qin.opt.b.findexactvalue=1;
 862:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	            
 863:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	            valid=TRUE;
 864:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	            
 865:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	        }
 866:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	        else
 867:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	        {
 868:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	            valid=FALSE;
 869:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	        }
 870:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	        break;
 871:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	    case JIF_TAB_FUNCTIONS_SEG:
 872:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	        modifierVarValue=BufNewReg[dataIndex] - 1;
 762                             		.loc 1 872 0
 763 00d9 5B 44                   		movu.B	r4, r4
 764 00db FB A2 00 00 00 00       		mov.L	#_BufNewReg, r10
 765 00e1 FE C4 AC                		movu.B	[r4,r10], r12
 766 00e4 60 1C                   		sub	#1, r12
 767                             		.balign 2,3,5
 768                             	.L103:
 769                             	.LVL60:
 873:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	        qin.opt.b.findexactvalue=1;
 770                             		.loc 1 873 0
 771 00e6 CC 0A                   		mov.B	[r0], r10
 772 00e8 78 7A                   		bset	#7, r10
 773 00ea C3 0A                   		mov.B	r10, [r0]
 874:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	        valid=TRUE;
 875:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	        break;
 774                             		.loc 1 875 0
 775 00ec 2E 08                   		bra	.L90
 776                             	.LVL61:
 777                             	.L99:
 876:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 					
 877:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 					default:
 878:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 						break;
 879:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	}
 880:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	
 881:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	/**/
 882:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	
 883:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	if(valid)
 778                             		.loc 1 883 0
 779 00ee 61 0A                   		cmp	#0, r10
 780 00f0 EF 1E                   		mov.L	r1, r14
 781 00f2 20 2C                   		beq	.L81
 782                             	.LVL62:
 783                             		.balign 2,3,1
 784                             	.L90:
 884:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	{            	               	
 885:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                 	qin.cfr_val=modifierVarValue;
 886:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                     
 887:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                     qin.tab=(TabHeader_t *)ldData.Data;
 785                             		.loc 1 887 0
 786 00f4 ED 0A 03                		mov.L	12[r0], r10
 888:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                     
 889:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                 	if(S_OK == TabQuery(&qin, &qresult))
 787                             		.loc 1 889 0
 788 00f7 71 02 1C                		add	#28, r0, r2
 789 00fa EF 01                   		mov.L	r0, r1
 885:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                 	qin.cfr_val=modifierVarValue;
 790                             		.loc 1 885 0
 791 00fc D7 0C 04                		mov.W	r12, 8[r0]
 887:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                     qin.tab=(TabHeader_t *)ldData.Data;
 792                             		.loc 1 887 0
 793 00ff E7 0A 01                		mov.L	r10, 4[r0]
 794                             		.loc 1 889 0
 795 0102 05 00 00 00             		bsr	_TabQuery
 796                             	.LVL63:
 797 0106 5B 11                   		movu.B	r1, r1
 798 0108 61 01                   		cmp	#0, r1
 799 010a 21 0C                   		bne	.L95
 890:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                 	{
 891:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                 	    *pModifierValue=qresult.data;
 800                             		.loc 1 891 0
 801 010c CD 0D 1D                		mov.B	29[r0], r13
 802 010f 66 1A                   		mov.L	#1, r10
 803 0111 C3 BD                   		mov.B	r13, [r11]
 804                             	.LVL64:
 805 0113 38 7B FF                		bra	.L104
 806                             	.LVL65:
 807                             	.L95:
 889:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                 	if(S_OK == TabQuery(&qin, &qresult))
 808                             		.loc 1 889 0
 809 0116 66 1A                   		mov.L	#1, r10
 810                             	.LVL66:
 811                             		.balign 2,3,1
 812                             	.L105:
 813 0118 66 0E                   		mov.L	#0, r14
 814                             	.LVL67:
 815 011a 2E 04                   		bra	.L81
 816                             	.LVL68:
 817                             	.L91:
 818                             	.LBE2:
 823:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                 	    if (REG_getFunctionValueByPos(dataIndex, (uint16_t*)&funcVal) == S_OK)
 819                             		.loc 1 823 0
 820 011c EF DE                   		mov.L	r13, r14
 821                             	.LVL69:
 822                             		.balign 2,3,1
 823                             	.L81:
 892:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                 	    bModFound=TRUE;
 893:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                 	}
 894:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	}
 895:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	
 896:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             	
 897:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             }
 898:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     
 899:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         
 900:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         pL1Table++;
 824                             		.loc 1 900 0
 825 011e 62 27                   		add	#2, r7
 826                             	.LVL70:
 804:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     while ( (!bModFound) && ((uint16_t*)pL1Table < pEndL1Table) )
 827                             		.loc 1 804 0
 828 0120 61 0E                   		cmp	#0, r14
 829 0122 21 0F                   		bne	.L96
 830                             	.LVL71:
 831                             		.balign 2,3,1
 832                             	.L77:
 804:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     while ( (!bModFound) && ((uint16_t*)pL1Table < pEndL1Table) )
 833                             		.loc 1 804 0 is_stmt 0 discriminator 2
 834 0124 47 97                   		cmp	r9, r7
 835 0126 22 05 38 25 FF          		bltu	.L88
 836 012b 2E 0D                   		bra	.L100
 837                             	.LVL72:
 838                             	.L76:
 785:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		return S_FALSE;
 839                             		.loc 1 785 0 is_stmt 1
 840 012d 66 11                   		mov	#1, r1
 841 012f 2E 05                   		bra	.L75
 842                             	.LVL73:
 843                             	.L96:
 901:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     }
 902:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 903:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 904:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if(bModFound)
 905:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{	    
 906:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	    sRet=S_OK;
 844                             		.loc 1 906 0
 845 0131 66 01                   		mov	#0, r1
 846                             	.LVL74:
 847 0133 03                      		.balign 2,3,1
 848                             	.L75:
 849 0134 5B 11                   		movu.B	r1, r1
 850 0136 2E 0A                   		bra	.L101
 851                             	.LVL75:
 852                             	.L100:
 907:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
 908:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	else
 909:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
 910:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	    sRet=MOD_DONT_CARE;
 911:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	    *pModifierValue=0;
 853                             		.loc 1 911 0
 854 0138 F8 B4 00                		mov.B	#0, [r11]
 910:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	    sRet=MOD_DONT_CARE;
 855                             		.loc 1 910 0
 856 013b 75 41 7F                		mov	#0x7f, r1
 857 013e 2E F6                   		bra	.L75
 858                             	.LVL76:
 859                             	.L101:
 912:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
 913:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
 914:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     return sRet;
 915:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** }
 860                             		.loc 1 915 0
 861 0140 3F 6D 12                		rtsd	#72, r6-r13
 862                             	.LFE9:
 864 0143 03                      		.section	.text.TurbidityCalibrationCmd,"ax",@progbits
 865                             		.global	_TurbidityCalibrationCmd
 867                             	_TurbidityCalibrationCmd:
 868                             	.LFB10:
 916:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**/
 917:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 918:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**
 919:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     Comando di calibrazione per il sensore di torbidit�
 920:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     se non � in corso una operazione analoga.
 921:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     
 922:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     Forza lo stato del gestore della calibrazione a TURBSENS_CALIBR_REQUEST_STATE
 923:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     
 924:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 925:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \version		1.0.0
 926:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \date 			05/05/2008
 927:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \author  		Roberto Fioravanti
 928:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** */
 929:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** void TurbidityCalibrationCmd(void)
 930:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** {
 869                             		.loc 1 930 0
 870 0000 02                      		rts
 871                             	.LFE10:
 873                             		.section	.text.TurbidityPwmValManager,"ax",@progbits
 874                             		.global	_TurbidityPwmValManager
 876                             	_TurbidityPwmValManager:
 877                             	.LFB11:
 931:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /*    if((TurbiditySensorCal.state!=TURBSENS_CALIBR_REQUEST_STATE) &&
 932:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     (TurbiditySensorCal.state!=TURBSENS_WAIT_4_CALIBR_VAL_STATE))
 933:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     {
 934:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         TurbiditySensorCal.state=TURBSENS_CALIBR_REQUEST_STATE;
 935:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     }*/ /*AE FIXME manca il modulo di piattaforma*/
 936:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** }
 937:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**/
 938:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 939:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 940:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 941:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**
 942:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     Gestione del valore pwm per la calibrazione del sensore di torbidit�
 943:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     Tramite una password, � possibile utilizzare un valore custom di pwm 
 944:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     per la lettura del sensore.
 945:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     
 946:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
 947:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \version		1.0.0
 948:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \date 			05/05/2008
 949:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \author  		Roberto Fioravanti
 950:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** */
 951:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** void TurbidityPwmValManager(void)
 952:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** {
 878                             		.loc 1 952 0
 879 0000 02                      		rts
 880                             	.LFE11:
 882                             		.section	.text.TurbidityCalibrationManager,"ax",@progbits
 883                             		.global	_TurbidityCalibrationManager
 885                             	_TurbidityCalibrationManager:
 886                             	.LFB12:
 953:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /*	switch(TurbiditySensor.state)
 954:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
 955:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		case TURBIDITY_PWM_DEFAULT_STATE:	
 956:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     		if(TurbiditySensor.pwd == TURBIDITY_CONTINUOUS_READ_PWD)
 957:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     		{
 958:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     			TurbiditySensor.state=TURBIDITY_CONTINUOUS_READ_INIT_CUSTOM_STATE;
 959:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     		}
 960:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     		else if(TurbiditySensor.pwd == USE_TURBIDITY_PWM_CUSTOM_VAL_PWD)
 961:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     		{
 962:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     			TurbiditySensor.state=TURBIDITY_PWM_INIT_CUSTOM_STATE;
 963:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     		}
 964:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     		else
 965:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     		{
 966:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     		    if(TurbiditySensor.pwmval!=TurbiditySensorCal.val) 
 967:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     		    {
 968:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     		         valore pwm in tick � cambiato
 969:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     		         pwm (per mille) update ( da tick a per mille)
 970:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     		        TurbiditySensor.pwm=((uint32_t)(TurbiditySensorCal.val*1000))/TPM2_PERIOD;
 971:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     		         pwm tick update
 972:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     	            TurbiditySensor.pwmval=TurbiditySensorCal.val;
 973:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     		    }
 974:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     	        HIO_trbReadDisable(TURBSENS_READ_cstm_PWM);
 975:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     	        HIO_trbReadDisable(TURBSENS_READ_cstm_CONTINUOUS);
 976:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     	        
 977:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     	    }
 978:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		
 979:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		break;		
 980:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		
 981:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		case TURBIDITY_PWM_CUSTOM_STATE:
 982:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			if( (TurbiditySensor.pwd != USE_TURBIDITY_PWM_CUSTOM_VAL_PWD) )
 983:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			{
 984:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				TurbiditySensor.state=TURBIDITY_PWM_DEFAULT_STATE;
 985:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			}
 986:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			else if(TurbiditySensor.pwm!=TurbiditySensor.cstm_pwmval)
 987:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			{
 988:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			     valore pwm in per mille � cambiato
 989:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				//TurbiditySensor.pwmval=TurbiditySensor.cstm_pwmval; original
 990:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				
 991:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				 pwm (per mille) update
 992:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     		    TurbiditySensor.pwm=TurbiditySensor.cstm_pwmval;
 993:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		         pwm tick update  (da per mille a tick)
 994:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	            TurbiditySensor.pwmval=((uint32_t)(TurbiditySensor.cstm_pwmval*TPM2_PERIOD))/1000;
 995:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     	            
 996:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				TurbiditySensorCal.flags.bit.cmdAcquireDone=0;
 997:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			}
 998:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		break;
 999:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		
1000:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		case TURBIDITY_PWM_INIT_CUSTOM_STATE:
1001:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			
1002:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         	TurbiditySensor.state=TURBIDITY_PWM_CUSTOM_STATE;
1003:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         	HIO_trbReadEnable(TURBSENS_READ_cstm_PWM);
1004:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		break;
1005:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1006:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1007:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		
1008:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	    case TURBIDITY_CONTINUOUS_READ_INIT_CUSTOM_STATE:
1009:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	        TurbiditySensor.state=TURBIDITY_CONTINUOUS_READ_CUSTOM_STATE;
1010:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         	HIO_trbReadEnable(TURBSENS_READ_cstm_CONTINUOUS);
1011:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	    break;
1012:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	        
1013:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	     
1014:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	    case TURBIDITY_CONTINUOUS_READ_CUSTOM_STATE:
1015:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	        if( (TurbiditySensor.pwd != TURBIDITY_CONTINUOUS_READ_PWD) )
1016:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			{
1017:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				TurbiditySensor.state=TURBIDITY_PWM_DEFAULT_STATE;
1018:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			}
1019:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			
1020:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			if(TurbiditySensor.pwmval!=TurbiditySensorCal.val) 
1021:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			{
1022:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			     pwm di calibrazione (tick) cambiato, quindi forzare un nuovo comando di acquisizione
1023:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		         pwm (per mille) update ( da tick a per mille)
1024:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		        TurbiditySensor.pwm=((uint32_t)(TurbiditySensorCal.val*1000))/TPM2_PERIOD;
1025:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		         pwm tick update
1026:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			    TurbiditySensor.pwmval=TurbiditySensorCal.val;
1027:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     	            			    
1028:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			    TurbiditySensorCal.flags.bit.cmdAcquireDone=0;
1029:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			}
1030:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	    
1031:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	    break;
1032:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}*/ /*AE FIXME manca il modulo di piattaforma*/
1033:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** }
1034:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**/
1035:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1036:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**
1037:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     Gestione della calibrazione del sensore di torbidit� (anche in PROGRAMMING_MODE).
1038:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     
1039:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     Implementa la macchina a stati della calibrazione del sensore di torbidit�.
1040:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     Lo stato iniziale (dopo il reset) � TURBSENS_INVALID_CALIBR_VALUE_STATE (valore di calibrazio
1041:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     
1042:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     Dopo una calibrazione terminata con successo o in caso di valore valido lo stato si porta in 
1043:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     TURBSENS_VALID_CALIBR_VALUE_STATE.
1044:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     
1045:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     E' possibile forzare una calibrazione chiamando TurbidityCalibrationCmd.
1046:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     
1047:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     
1048:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1049:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \version		1.0.0
1050:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \date 			05/05/2008
1051:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \author  		Roberto Fioravanti
1052:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** */
1053:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1054:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /*TurbiditySensorCal_t turbidityCal;*/ /*AE FIXME */
1055:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1056:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** void TurbidityCalibrationManager(void)
1057:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** {
 887                             		.loc 1 1057 0
 888 0000 02                      		rts
 889                             	.LFE12:
 891                             		.section	.text.StopMicroprogCounters,"ax",@progbits
 892                             		.global	_StopMicroprogCounters
 894                             	_StopMicroprogCounters:
 895                             	.LFB13:
1058:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
1059:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	/*
1060:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   switch(TurbiditySensorCal.state)
1061:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   {
1062:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1063:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     case TURBSENS_INVALID_CALIBR_VALUE_STATE:
1064:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****       // se il valore di calibrazione non � valido rimane in questo stato 
1065:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     if(TurbiditySensorCal.val)
1066:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     {
1067:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         TurbiditySensorCal.state=TURBSENS_VALID_CALIBR_VALUE_STATE;
1068:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     }
1069:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****       
1070:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****       break;
1071:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1072:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     case TURBSENS_VALID_CALIBR_VALUE_STATE:
1073:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****        idle state
1074:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****       break;
1075:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             
1076:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     case TURBSENS_CALIBR_REQUEST_STATE:
1077:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     {
1078:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         TurbidityManager_t turbidityCmd;
1079:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1080:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         turbidityCmd.data=TURBIDITY_CAL_ADVAL;
1081:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         turbidityCmd.state=TURBIDITY_CALIBRATION;
1082:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****                  
1083:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****          avvia la richiesta di calibrazione
1084:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         TurbidityManagerSetConfig(turbidityCmd );
1085:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         
1086:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         TurbiditySensorCal.state=TURBSENS_WAIT_4_CALIBR_VAL_STATE;
1087:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     }
1088:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1089:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****       break;
1090:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****       
1091:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     case TURBSENS_WAIT_4_CALIBR_VAL_STATE:    
1092:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     {
1093:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1094:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			   legge il risultato
1095:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         turbidityCal=TurbidityGetCalibration();
1096:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****             
1097:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         if(turbidityCal.jobDone != 0)
1098:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         {
1099:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****           
1100:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****           TurbiditySensorCal.val=turbidityCal.pulseWidthCal;     
1101:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****           //INSERIRE TEST IN CASO DI SATURAZIONE (VALORE NON VALIDO!!!!)
1102:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****           
1103:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****           TurbiditySensorCal.flags.bit.cmdAcquireDone=0;
1104:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****           TurbiditySensorCal.state=TURBSENS_CALIBR_VALIDATE_STATE;
1105:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****           TurbiditySensorCal.pwd=RESET_TURBIDITY_CALIBRATION_PWD;
1106:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****           TurbiditySensorCal.idRead= TurbidityReads.id;
1107:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****           HIO_trbReadEnable(TURBSENS_READ_calib_FLB);
1108:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		  		  
1109:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****           TurbiditySensorCal.adH2oRef=0;          
1110:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         }
1111:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1112:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****         
1113:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     }
1114:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****       break;        
1115:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****       
1116:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     case TURBSENS_CALIBR_VALIDATE_STATE:
1117:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****     
1118:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		if((GIValid&GI_TURB_SENSOR_MSK) && (TurbiditySensorCal.idRead!= TurbidityReads.id))
1119:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		{          
1120:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			if((TurbidityReads.ADvalue<TURBIDITY_H2O_MIN_ADVAL))
1121:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			{
1122:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			    TurbiditySensorCal.val=TURBIDITY_PWM_MIN;
1123:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			    TurbiditySensorCal.adH2oRef=TURBIDITY_H2O_DEFAULT_ADVAL;
1124:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			}
1125:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			else if((TurbidityReads.ADvalue>TURBIDITY_H2O_MAX_ADVAL))
1126:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			{
1127:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			    TurbiditySensorCal.val=TURBIDITY_PWM_MIN;
1128:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			    TurbiditySensorCal.adH2oRef=TURBIDITY_H2O_DEFAULT_ADVAL;
1129:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			}
1130:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			else
1131:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			{
1132:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			     lettura in range
1133:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			    TurbiditySensorCal.adH2oRef=TurbidityReads.ADvalue;
1134:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			     la fase di validazione in aria pu� cambiare questo valore in uno di default
1135:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			}
1136:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1137:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			 delta is 1% of adH2oRef
1138:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			TurbiditySensorCal.adH2oRefDelta=TurbiditySensorCal.adH2oRef/100;
1139:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			TurbiditySensorCal.state=TURBSENS_VALID_CALIBR_VALUE_STATE;
1140:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			HIO_trbReadDisable(TURBSENS_READ_calib_FLB);
1141:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1142:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		}
1143:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		break;
1144:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   }*/ /*AE FIXME manca il mdoulo di piattaforma*/
1145:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1146:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1147:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** }
1148:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**/
1149:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1150:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**
1151:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** Disabilita i contatori utilizzati nei uPs : chiamata in PAUSE e al RESET FREDDO (Backup Data Analis
1152:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****  
1153:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \return 		
1154:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1155:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \version		1.0.0
1156:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \date 			28/04/2008
1157:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \author  		Valeria Catani	
1158:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** */
1159:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1160:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** void StopMicroprogCounters(void)
1161:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** {
 896                             		.loc 1 1161 0
1162:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_MAINTAIN_M_COUNTER);
 897                             		.loc 1 1162 0
 898 0000 66 21                   		mov	#2, r1
 899 0002 05 00 00 00             		bsr	_SWTC_Stop
 900                             	.LVL77:
1163:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   
1164:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_LOAD_LEVTOTIME_S_COUNTER);
 901                             		.loc 1 1164 0
 902 0006 66 31                   		mov	#3, r1
 903 0008 05 00 00 00             		bsr	_SWTC_Stop
 904                             	.LVL78:
1165:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_LOAD_FULLSTABILITY_S_COUNTER);
 905                             		.loc 1 1165 0
 906 000c 66 41                   		mov	#4, r1
 907 000e 05 00 00 00             		bsr	_SWTC_Stop
 908                             	.LVL79:
1166:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_LOAD_TIMELOAD_S_COUNTER); 
 909                             		.loc 1 1166 0
 910 0012 66 51                   		mov	#5, r1
 911 0014 05 00 00 00             		bsr	_SWTC_Stop
 912                             	.LVL80:
1167:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   
1168:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER);
 913                             		.loc 1 1168 0
 914 0018 66 61                   		mov	#6, r1
 915 001a 05 00 00 00             		bsr	_SWTC_Stop
 916                             	.LVL81:
1169:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   
1170:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
 917                             		.loc 1 1170 0
 918 001e 75 41 1F                		mov	#31, r1
 919 0021 05 00 00 00             		bsr	_SWTC_Stop
 920                             	.LVL82:
1171:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   
1172:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_PUMP_LOAD_M_COUNTER);
 921                             		.loc 1 1172 0
 922 0025 75 41 20                		mov	#32, r1
 923 0028 05 00 00 00             		bsr	_SWTC_Stop
 924                             	.LVL83:
1173:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   
1174:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_LOADRESTORE_S_COUNTER);
 925                             		.loc 1 1174 0
 926 002c 66 71                   		mov	#7, r1
 927 002e 05 00 00 00             		bsr	_SWTC_Stop
 928                             	.LVL84:
1175:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   
1176:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_REGENERATE_EVDELAY_S_COUNTER);
 929                             		.loc 1 1176 0
 930 0032 66 81                   		mov	#8, r1
 931 0034 05 00 00 00             		bsr	_SWTC_Stop
 932                             	.LVL85:
1177:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   
1178:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_ALTCTRL_S_COUNTER);
 933                             		.loc 1 1178 0
 934 0038 75 41 24                		mov	#36, r1
 935 003b 05 00 00 00             		bsr	_SWTC_Stop
 936                             	.LVL86:
1179:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   
1180:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_SETDRYPROFILE_M_COUNTER);
 937                             		.loc 1 1180 0
 938 003f 66 91                   		mov	#9, r1
 939 0041 05 00 00 00             		bsr	_SWTC_Stop
 940                             	.LVL87:
1181:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****  
1182:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)SFT_RES_PRES_STABLE_S_COUNTER);
 941                             		.loc 1 1182 0
 942 0045 66 A1                   		mov	#10, r1
 943 0047 05 00 00 00             		bsr	_SWTC_Stop
 944                             	.LVL88:
1183:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)FLT_HEATTOUT_M_COUNTER);
 945                             		.loc 1 1183 0
 946 004b 75 41 11                		mov	#17, r1
 947 004e 05 00 00 00             		bsr	_SWTC_Stop
 948                             	.LVL89:
1184:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)FLT_LOAD_TOUT_M_COUNTER);
 949                             		.loc 1 1184 0
 950 0052 75 41 12                		mov	#18, r1
 951 0055 05 00 00 00             		bsr	_SWTC_Stop
 952                             	.LVL90:
1185:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   
1186:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_DRAIN_M_COUNTER);
 953                             		.loc 1 1186 0
 954 0059 75 41 13                		mov	#19, r1
 955 005c 05 00 00 00             		bsr	_SWTC_Stop
 956                             	.LVL91:
1187:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_LOADCONTROL_M_COUNTER1);
 957                             		.loc 1 1187 0
 958 0060 75 41 14                		mov	#20, r1
 959 0063 05 00 00 00             		bsr	_SWTC_Stop
 960                             	.LVL92:
1188:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_LOADCONTROL_M_COUNTER2);
 961                             		.loc 1 1188 0
 962 0067 75 41 15                		mov	#21, r1
 963 006a 05 00 00 00             		bsr	_SWTC_Stop
 964                             	.LVL93:
1189:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   
1190:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1191:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   (void)SWTC_Stop((SWTC_CountersType)MP_SPARKLINGAID_M_COUNTER);
 965                             		.loc 1 1191 0
 966 006e 75 41 16                		mov	#22, r1
 967 0071 04 00 00 00             		bra	_SWTC_Stop
 968                             	.LVL94:
 969                             	.LFE13:
 971                             		.section	.text.IncWordWithCheck,"ax",@progbits
 972                             		.global	_IncWordWithCheck
 974                             	_IncWordWithCheck:
 975                             	.LFB14:
1192:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1193:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   
1194:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   /* &Delay: Delay deve proseguire anche in pausa */
1195:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   /* &OverflowFault_timer: il conteggio per fault overflow prosegue anche in pausa*/
1196:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   /* &ProbeFault_timer : il conteggio per fault probe prosegue anche in pausa */
1197:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   
1198:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   
1199:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   /*&DoorClosedEvent_Pause_timer: il conteggio prosegue anche in pausa */
1200:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****  
1201:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****   
1202:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** }
1203:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1204:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**/
1205:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1206:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1207:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**
1208:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** Incrementa il parametro se questo risulta inferiore a 0xFFFF, altrimenti lo lascia invariato.
1209:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1210:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \param [in] 	statisticWord � il parametro da incrementare
1211:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	 
1212:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \return     	none
1213:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1214:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \notes:			
1215:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1216:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \author			Marco Quintini
1217:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \date   		30/11/2006
1218:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \version    	1.0.0
1219:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1220:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** */
1221:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** void IncWordWithCheck(uint16_t *statisticWord)
1222:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** {
 976                             		.loc 1 1222 0
 977                             	.LVL95:
1223:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if((*statisticWord) < 0xFFFF)
 978                             		.loc 1 1223 0
 979 0000 DC 1E                   		mov.W	[r1], r14
 980 0002 5F E4                   		movu.W	r14, r4
 981 0004 77 04 FF FF 00          		cmp	#0xffff, r4
 982 0009 20 06                   		beq	.L110
1224:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
1225:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		(*statisticWord) ++;
 983                             		.loc 1 1225 0
 984 000b 62 1E                   		add	#1, r14
 985 000d D3 1E                   		mov.W	r14, [r1]
 986                             	.L110:
 987 000f 02                      		rts
 988                             	.LFE14:
 990                             		.section	.text.UpdateStateBitmaps,"ax",@progbits
 991                             		.global	_UpdateStateBitmaps
 993                             	_UpdateStateBitmaps:
 994                             	.LFB4:
 244:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** {
 995                             		.loc 1 244 0
 996 0000 6E 7A                   		pushm	r7-r10
 997                             	.LCFI8:
 253:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	ApplicationFlags = BUILD_BMP(ApplicationFlags, APPL_FLAGS_INIT_VAL, APPL_FLAGS_MASK);
 998                             		.loc 1 253 0
 999 0002 FB 72 00 00 00 00       		mov.L	#_ApplicationFlags, r7
 1000 0008 3C 70 08                		mov.B	#8, [r7]
 257:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if (HWC_Flags.bit.saltreed)
 1001                             		.loc 1 257 0
 1002 000b FB E2 00 00 00 00       		mov.L	#_HWC_Flags, r14
 1003 0011 DC EE                   		mov.W	[r14], r14
 1004 0013 76 2E 00 40             		and	#0x4000, r14
 1005 0017 5F EE                   		movu.W	r14, r14
 1006 0019 61 0E                   		cmp	#0, r14
 1007 001b 20 6B                   		beq	.L117
 260:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		if (TESTBIT(GIValid, (GI_FIRST_CRITERION_BIT + GI_SALT_IND) ) != 0)
 1008                             		.loc 1 260 0
 1009 001d FB E2 00 00 00 00       		mov.L	#_GIValid, r14
 1010 0023 DC EE                   		mov.W	[r14], r14
 1011 0025 64 8E                   		and	#8, r14
 1012 0027 5F EE                   		movu.W	r14, r14
 1013 0029 61 0E                   		cmp	#0, r14
 1014 002b 20 5B                   		beq	.L117
 264:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			if( (TESTBIT(GICriteria, GI_SALT_IND) == 0) && (uP_Regenerate_Data.nReg >= nRegMax ) )
 1015                             		.loc 1 264 0
 1016 002d FB 42 00 00 00 00       		mov.L	#_GICriteria, r4
 1017 0033 CC 44                   		mov.B	[r4], r4
 262:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			nRegMax = OFFS_B(Tab_HWCRegenerateData.Data,2); /* Introdurre delle define, qui e in tutti i pun
 1018                             		.loc 1 262 0
 1019 0035 FB E2 00 00 00 00       		mov.L	#_Tab_HWCRegenerateData, r14
 264:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			if( (TESTBIT(GICriteria, GI_SALT_IND) == 0) && (uP_Regenerate_Data.nReg >= nRegMax ) )
 1020                             		.loc 1 264 0
 1021 003b 64 84                   		and	#8, r4
 262:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			nRegMax = OFFS_B(Tab_HWCRegenerateData.Data,2); /* Introdurre delle define, qui e in tutti i pun
 1022                             		.loc 1 262 0
 1023 003d EC EE                   		mov.L	[r14], r14
 264:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			if( (TESTBIT(GICriteria, GI_SALT_IND) == 0) && (uP_Regenerate_Data.nReg >= nRegMax ) )
 1024                             		.loc 1 264 0
 1025 003f 5B 44                   		movu.B	r4, r4
 1026 0041 61 04                   		cmp	#0, r4
 262:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			nRegMax = OFFS_B(Tab_HWCRegenerateData.Data,2); /* Introdurre delle define, qui e in tutti i pun
 1027                             		.loc 1 262 0
 1028 0043 CD EE 02                		mov.B	2[r14], r14
 1029                             	.LVL96:
 264:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			if( (TESTBIT(GICriteria, GI_SALT_IND) == 0) && (uP_Regenerate_Data.nReg >= nRegMax ) )
 1030                             		.loc 1 264 0
 1031 0046 21 33                   		bne	.L119
 264:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			if( (TESTBIT(GICriteria, GI_SALT_IND) == 0) && (uP_Regenerate_Data.nReg >= nRegMax ) )
 1032                             		.loc 1 264 0 is_stmt 0 discriminator 1
 1033 0048 FB 42 00 00 00 00       		mov.L	#_uP_Regenerate_Data, r4
 1034 004e B1 CC                   		movu.B	7[r4], r4
 1035 0050 5B EE                   		movu.B	r14, r14
 1036 0052 47 E4                   		cmp	r14, r4
 1037 0054 23 25                   		bltu	.L119
 267:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				SETBIT(ApplicationFlags, AF_NO_SALT_BIT);								
 1038                             		.loc 1 267 0 is_stmt 1
 1039 0056 3C 70 09                		mov.B	#9, [r7]
 269:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				if ( TESTBIT(Statistics_update_flag, STATISTIC_FLAG_NO_SALT)==0)
 1040                             		.loc 1 269 0
 1041 0059 FB 72 00 00 00 00       		mov.L	#_Statistics_update_flag, r7
 1042 005f CC 7E                   		mov.B	[r7], r14
 1043                             	.LVL97:
 1044 0061 64 2E                   		and	#2, r14
 1045 0063 5B EE                   		movu.B	r14, r14
 1046 0065 61 0E                   		cmp	#0, r14
 1047 0067 21 1F                   		bne	.L117
 271:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 					IncWordWithCheck(&MachineStatistics.globalStats.salt_reset);
 1048                             		.loc 1 271 0
 1049 0069 FB 12 00 00 00 00       		mov.L	#_MachineStatistics+90, r1
 1050 006f 05 00 00 00             		bsr	_IncWordWithCheck
 1051                             	.LVL98:
 272:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 					SETBIT(Statistics_update_flag, STATISTIC_FLAG_NO_SALT);
 1052                             		.loc 1 272 0
 1053 0073 CC 7E                   		mov.B	[r7], r14
 1054 0075 65 2E                   		or	#2, r14
 1055 0077 2E 0D                   		bra	.L159
 1056                             	.LVL99:
 1057                             	.L119:
 277:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				CLRBIT(Statistics_update_flag, STATISTIC_FLAG_NO_SALT);
 1058                             		.loc 1 277 0
 1059 0079 FB 72 00 00 00 00       		mov.L	#_Statistics_update_flag, r7
 1060 007f CC 7E                   		mov.B	[r7], r14
 1061 0081 75 2E FD                		and	#-3, r14
 1062                             	.LVL100:
 1063                             		.balign 2,3,1
 1064                             	.L159:
 1065 0084 C3 7E                   		mov.B	r14, [r7]
 1066                             		.balign 2,3,5
 1067                             	.L117:
 286:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if(Flags_2 & FLAGS2_NO_SPARKL_AID_MSK)
 1068                             		.loc 1 286 0
 1069 0086 FB 72 00 00 00 00       		mov.L	#_Flags_2, r7
 1070 008c CC 77                   		mov.B	[r7], r7
 1071 008e FD 74 C7 03             		tst	#3, r7
 1072 0092 20 2A                   		beq	.L121
 289:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		SETBIT(ApplicationFlags, AF_NO_SPARKLING_AID_BIT);
 1073                             		.loc 1 289 0
 1074 0094 FB 72 00 00 00 00       		mov.L	#_ApplicationFlags, r7
 1075 009a CC 7E                   		mov.B	[r7], r14
 1076 009c 65 2E                   		or	#2, r14
 1077 009e C3 7E                   		mov.B	r14, [r7]
 292:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		if ( TESTBIT (GICriteriaOld, GI_SPARKLING_AID_IND) )
 1078                             		.loc 1 292 0
 1079 00a0 FB 72 00 00 00 00       		mov.L	#_GICriteriaOld, r7
 1080 00a6 CC 77                   		mov.B	[r7], r7
 1081 00a8 75 27 10                		and	#16, r7
 1082 00ab 5B 77                   		movu.B	r7, r7
 1083 00ad 61 07                   		cmp	#0, r7
 1084 00af 20 0D                   		beq	.L121
 294:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			IncWordWithCheck(&MachineStatistics.globalStats.sparkling_reset);
 1085                             		.loc 1 294 0
 1086 00b1 FB 12 00 00 00 00       		mov.L	#_MachineStatistics+92, r1
 1087 00b7 05 00 00 00             		bsr	_IncWordWithCheck
 1088                             	.LVL101:
 1089 00bb 03                      		.balign 2,3,5
 1090                             	.L121:
 302:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if( FltWarning.load )
 1091                             		.loc 1 302 0
 1092 00bc FB 72 00 00 00 00       		mov.L	#_FltWarning, r7
 1093 00c2 CC 77                   		mov.B	[r7], r7
 1094 00c4 76 27 80 00             		and	#0x80, r7
 1095 00c8 5B 77                   		movu.B	r7, r7
 1096 00ca 61 07                   		cmp	#0, r7
 1097 00cc 20 0E                   		beq	.L123
 305:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		SETBIT(ApplicationFlags, AF_H2O_WARN_BIT);
 1098                             		.loc 1 305 0
 1099 00ce FB 72 00 00 00 00       		mov.L	#_ApplicationFlags, r7
 1100 00d4 CC 7E                   		mov.B	[r7], r14
 1101 00d6 65 4E                   		or	#4, r14
 1102 00d8 C3 7E                   		mov.B	r14, [r7]
 1103                             		.balign 2,3,5
 1104                             	.L123:
 310:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if( TESTBIT(GICriteria, GI_CR_DOOR_IND) == 0 )
 1105                             		.loc 1 310 0
 1106 00da FB 72 00 00 00 00       		mov.L	#_GICriteria, r7
 1107 00e0 CC 77                   		mov.B	[r7], r7
 1108 00e2 64 47                   		and	#4, r7
 1109 00e4 5B 77                   		movu.B	r7, r7
 1110 00e6 61 07                   		cmp	#0, r7
 1111 00e8 21 10                   		bne	.L124
 313:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		CLRBIT(ApplicationFlags, AF_DOOR_CLOSED_BIT);
 1112                             		.loc 1 313 0
 1113 00ea FB 72 00 00 00 00       		mov.L	#_ApplicationFlags, r7
 1114 00f0 CC 7E                   		mov.B	[r7], r14
 1115 00f2 75 2E F7                		and	#-9, r14
 1116 00f5 C3 7E                   		mov.B	r14, [r7]
 1117 00f7 03                      		.balign 2,3,5
 1118                             	.L124:
 317:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if ( TESTBIT(Flags_2,FLAG2_SAFETY_DRAIN_PP_ON_POS) )
 1119                             		.loc 1 317 0
 1120 00f8 FB 72 00 00 00 00       		mov.L	#_Flags_2, r7
 1121 00fe CC 77                   		mov.B	[r7], r7
 1122 0100 EF 7E                   		mov.L	r7, r14
 1123 0102 64 8E                   		and	#8, r14
 1124 0104 5B EE                   		movu.B	r14, r14
 1125 0106 61 0E                   		cmp	#0, r14
 1126 0108 20 10                   		beq	.L125
 319:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		SETBIT(ApplicationFlags,AF_STANDBY_DISABLE_BIT); 
 1127                             		.loc 1 319 0
 1128 010a FB E2 00 00 00 00       		mov.L	#_ApplicationFlags, r14
 1129 0110 CC E4                   		mov.B	[r14], r4
 1130 0112 75 34 10                		or	#16, r4
 1131 0115 C3 E4                   		mov.B	r4, [r14]
 1132 0117 03                      		.balign 2,3,2
 1133                             	.L125:
 322:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if ( TESTBIT(Flags_2, FLAG2_CLOGGED_FILTER))
 1134                             		.loc 1 322 0
 1135 0118 75 27 20                		and	#32, r7
 1136 011b 5B 77                   		movu.B	r7, r7
 1137 011d 61 07                   		cmp	#0, r7
 1138 011f 20 0F                   		beq	.L126
 324:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		SETBIT(ApplicationFlags,AF_DIRTY_FILTER_BIT); 
 1139                             		.loc 1 324 0
 1140 0121 FB 72 00 00 00 00       		mov.L	#_ApplicationFlags, r7
 1141 0127 CC 7E                   		mov.B	[r7], r14
 1142 0129 75 3E 20                		or	#32, r14
 1143 012c C3 7E                   		mov.B	r14, [r7]
 1144                             		.balign 2,3,5
 1145                             	.L126:
 333:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	ApplicationState = BUILD_BMP(ApplicationState, APPL_STATE_INIT_VAL, APPL_STATE_MASK);
 1146                             		.loc 1 333 0
 1147 012e FB 72 00 00 00 00       		mov.L	#_ApplicationState, r7
 1148 0134 CC 7E                   		mov.B	[r7], r14
 1149 0136 75 2E BC                		and	#0xffffffbc, r14
 1150 0139 65 1E                   		or	#1, r14
 1151 013b C3 7E                   		mov.B	r14, [r7]
 346:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if( FLT_checkForSettingFault() == TRUE )
 1152                             		.loc 1 346 0
 1153 013d 05 00 00 00             		bsr	_FLT_checkForSettingFault
 1154                             	.LVL102:
 1155 0141 61 11                   		cmp	#1, r1
 1156 0143 21 09                   		bne	.L127
 349:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		CLRBIT(ApplicationState, AS_DATA_READY_BIT);
 1157                             		.loc 1 349 0
 1158 0145 CC 7E                   		mov.B	[r7], r14
 1159 0147 75 2E FE                		and	#-2, r14
 1160 014a C3 7E                   		mov.B	r14, [r7]
 1161                             		.balign 2,3,5
 1162                             	.L127:
 353:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if (HarakiriLowPower.Mode != HKM_SBY_OFF_MODE)
 1163                             		.loc 1 353 0
 1164 014c FB 72 00 00 00 00       		mov.L	#_HarakiriLowPower, r7
 1165 0152 CC 77                   		mov.B	[r7], r7
 1166 0154 EF 7E                   		mov.L	r7, r14
 1167 0156 76 2E C0 00             		and	#0xc0, r14
 1168 015a 20 16                   		beq	.L128
 357:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		if (HarakiriLowPower.Req ==  HKM_LOW_POWER_REQ   )
 1169                             		.loc 1 357 0
 1170 015c 64 77                   		and	#7, r7
 1171 015e 61 17                   		cmp	#1, r7
 1172 0160 21 10                   		bne	.L128
 359:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			SETBIT(ApplicationFlags, AF_SBY_SLEEP_ON_FLAG );	
 1173                             		.loc 1 359 0
 1174 0162 FB 72 00 00 00 00       		mov.L	#_ApplicationFlags, r7
 1175 0168 CC 7E                   		mov.B	[r7], r14
 1176 016a 75 3E 40                		or	#64, r14
 1177 016d C3 7E                   		mov.B	r14, [r7]
 1178 016f 03                      		.balign 2,3,5
 1179                             	.L128:
 363:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if ( TESTBIT(GIValid,GI_FIRST_WAKEUP_SOURCE_IND) && (TESTBIT(GICriteria, GI_FIRST_WAKEUP_SOURCE_IN
 1180                             		.loc 1 363 0
 1181 0170 FB 72 00 00 00 00       		mov.L	#_GIValid, r7
 1182 0176 DC 77                   		mov.W	[r7], r7
 1183 0178 75 27 20                		and	#32, r7
 1184 017b 5F 77                   		movu.W	r7, r7
 1185 017d 61 07                   		cmp	#0, r7
 1186 017f 20 15                   		beq	.L129
 363:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if ( TESTBIT(GIValid,GI_FIRST_WAKEUP_SOURCE_IND) && (TESTBIT(GICriteria, GI_FIRST_WAKEUP_SOURCE_IN
 1187                             		.loc 1 363 0 is_stmt 0 discriminator 1
 1188 0181 FB 72 00 00 00 00       		mov.L	#_GICriteria, r7
 1189 0187 CC 77                   		mov.B	[r7], r7
 1190 0189 75 27 20                		and	#32, r7
 1191 018c 5B 77                   		movu.B	r7, r7
 1192 018e 61 07                   		cmp	#0, r7
 1193 0190 21 04                   		bne	.L129
 1194 0192 2E 3B                   		bra	.L131
 1195                             	.L129:
 368:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		if (TESTBIT(GICriteria, GI_FIRST_WAKEUP_SOURCE_IND))
 1196                             		.loc 1 368 0 is_stmt 1
 1197 0194 FB 72 00 00 00 00       		mov.L	#_GICriteria, r7
 1198 019a CC 77                   		mov.B	[r7], r7
 1199 019c EF 7E                   		mov.L	r7, r14
 1200 019e 75 2E 20                		and	#32, r14
 1201 01a1 5B EE                   		movu.B	r14, r14
 1202 01a3 61 0E                   		cmp	#0, r14
 1203 01a5 20 28                   		beq	.L131
 370:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			if  ( TESTBIT(Flags_2, FLAG2_SAFETY_TURB_TEST_BIT) || ( TESTBIT (GICriteria,GI_CR_OVFL_IND) != 0
 1204                             		.loc 1 370 0
 1205 01a7 FB E2 00 00 00 00       		mov.L	#_Flags_2, r14
 1206 01ad CC EE                   		mov.B	[r14], r14
 1207 01af 75 2E 40                		and	#64, r14
 1208 01b2 5B EE                   		movu.B	r14, r14
 1209 01b4 61 0E                   		cmp	#0, r14
 1210 01b6 21 0A                   		bne	.L132
 370:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			if  ( TESTBIT(Flags_2, FLAG2_SAFETY_TURB_TEST_BIT) || ( TESTBIT (GICriteria,GI_CR_OVFL_IND) != 0
 1211                             		.loc 1 370 0 is_stmt 0 discriminator 1
 1212 01b8 64 27                   		and	#2, r7
 1213 01ba 5B 77                   		movu.B	r7, r7
 1214 01bc 61 07                   		cmp	#0, r7
 1215 01be 20 1C                   		beq	.L130
 1216                             		.balign 2,3,5
 1217                             	.L132:
 372:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 				SETBIT(ApplicationFlags, AF_STANDBY_DISABLE_BIT );	
 1218                             		.loc 1 372 0 is_stmt 1
 1219 01c0 FB 72 00 00 00 00       		mov.L	#_ApplicationFlags, r7
 1220 01c6 CC 7E                   		mov.B	[r7], r14
 1221 01c8 75 3E 10                		or	#16, r14
 1222 01cb 2E 0D                   		bra	.L160
 1223                             	.L131:
 379:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 			SETBIT(ApplicationFlags, AF_WAKEUP_OFBUTTON_BIT );
 1224                             		.loc 1 379 0
 1225 01cd FB 72 00 00 00 00       		mov.L	#_ApplicationFlags, r7
 1226 01d3 CC 7E                   		mov.B	[r7], r14
 1227 01d5 75 3E 80                		or	#0xffffff80, r14
 1228                             		.balign 2,3,1
 1229                             	.L160:
 1230 01d8 C3 7E                   		mov.B	r14, [r7]
 1231                             		.balign 2,3,1
 1232                             	.L130:
 390:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	delaySeconds = SWTC_GetRemainingTime((SWTC_CountersType)SPV_DELAY_TIMER_S_COUNTER);
 1233                             		.loc 1 390 0
 1234 01da 66 F1                   		mov	#15, r1
 1235 01dc 05 00 00 00             		bsr	_SWTC_GetRemainingTime
 1236                             	.LVL103:
 392:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if( (delaySeconds >= 0) && ( delaySeconds <= UINT8_T_MAX) )
 1237                             		.loc 1 392 0
 1238 01e0 75 51 FF                		cmp	#0xff, r1
 1239 01e3 24 0B                   		bgtu	.L115
 394:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		DelaySecondsForUI = delaySeconds;
 1240                             		.loc 1 394 0
 1241 01e5 FB 72 00 00 00 00       		mov.L	#_DelaySecondsForUI, r7
 1242 01eb C3 71                   		mov.B	r1, [r7]
 1243 01ed 03                      		.balign 2,3,2
 1244                             	.L115:
 399:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** }
 1245                             		.loc 1 399 0
 1246 01ee 3F 7A 04                		rtsd	#16, r7-r10
 1247                             	.LFE4:
 1249 01f1 03                      		.section	.text.IsOvenRunningDelay,"ax",@progbits
 1250                             		.global	_IsOvenRunningDelay
 1252                             	_IsOvenRunningDelay:
 1253                             	.LFB15:
1226:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
1227:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** }
1228:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**/
1229:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1230:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**
1231:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** restituisce TRUE se il ciclo se esiste almeno una cavit� che � in run o in delay
1232:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****  
1233:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \return 		
1234:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1235:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \version		1.0.0
1236:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \date 			02/02/2010
1237:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \author  		Emanuela Antognoli
1238:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** */
1239:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1240:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1241:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** uint8_t IsOvenRunningDelay (void)
1242:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** {
 1254                             		.loc 1 1242 0
1243:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if((Interpreter_Data[0].completeLabel.s.label == LBL_RUN)||(Interpreter_Data[0].completeLabel.s.la
 1255                             		.loc 1 1243 0
 1256 0000 FB E2 00 00 00 00       		mov.L	#_Interpreter_Data, r14
 1257 0006 CC E1                   		mov.B	[r14], r1
 1258 0008 64 F1                   		and	#15, r1
 1259 000a 60 11                   		sub	#1, r1
1244:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
1245:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		
1246:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		return TRUE;
1247:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
1248:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
1249:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	return FALSE;
1250:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** }
 1260                             		.loc 1 1250 0
 1261 000c 61 11                   		cmp	#1, r1
 1262 000e FC DB 15                		scleu.L	r1
 1263 0011 02                      		rts
 1264                             	.LFE15:
 1266                             		.section	.text.IsOvenPauseFAult,"ax",@progbits
 1267                             		.global	_IsOvenPauseFAult
 1269                             	_IsOvenPauseFAult:
 1270                             	.LFB16:
1251:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1252:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** /**
1253:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** restituisce TRUE se il ciclo se esiste almeno una cavit� che � in PAuSE o FAULT
1254:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c ****  
1255:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \return 		
1256:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1257:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \version		1.0.0
1258:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \date 			02/02/2010
1259:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** \author  		Emanuela Antognoli
1260:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** */
1261:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1262:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1263:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** uint8_t IsOvenPauseFAult (void)
1264:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** {
 1271                             		.loc 1 1264 0
1265:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	if((Interpreter_Data[0].completeLabel.s.label == LBL_PAUSE)||(Interpreter_Data[0].completeLabel.s.
 1272                             		.loc 1 1265 0
 1273 0000 FB E2 00 00 00 00       		mov.L	#_Interpreter_Data, r14
 1274 0006 CC E1                   		mov.B	[r14], r1
 1275 0008 64 F1                   		and	#15, r1
 1276 000a 60 41                   		sub	#4, r1
1266:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	{
1267:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		
1268:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 		return TRUE;
1269:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	}
1270:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	
1271:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 	return FALSE;
1272:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** 
1273:C:/Workspace/FW_Platform2_5/trunk/Inertia/General\CstmFuncLib.c **** }
 1277                             		.loc 1 1273 0
 1278 000c 61 11                   		cmp	#1, r1
 1279 000e FC DB 15                		scleu.L	r1
 1280 0011 02                      		rts
 1281                             	.LFE16:
 1540                             	.Letext0:
 1541                             		.file 2 "C:\\Renesas\\e2studio\\GNURXV~1.03-\\rx-elf/rx-elf/optlibinc/stdlib.h"
 1542                             		.file 3 "C:\\Workspace\\FW_Platform2_5\\trunk\\HAL\\HAL_General/StandardTypes.h"
 1543                             		.file 4 "C:\\Workspace\\FW_Platform2_5\\trunk\\ProductModules\\PM_SwTimersCounters/SwTimersCounter
 1544                             		.file 5 "C:\\Workspace\\FW_Platform2_5\\trunk\\ProductModules\\PM_Library/LIB_Utilities.h"
 1545                             		.file 6 "C:/Workspace/FW_Platform2_5/trunk/Inertia/General/CstmDefines.h"
 1546                             		.file 7 "C:\\Workspace\\FW_Platform2_5\\trunk\\Application_Platform/APP_Types.h"
 1547                             		.file 8 "C:/Workspace/FW_Platform2_5/trunk/Inertia/General/CstmTypes.h"
 1548                             		.file 9 "C:\\Workspace\\FW_Platform2_5\\trunk\\Application_Platform/APP_Global.h"
 1549                             		.file 10 "C:/Workspace/FW_Platform2_5/trunk/Inertia/General/CstmGlobal.h"
 1550                             		.file 11 "C:\\Workspace\\FW_Platform2_5\\trunk\\Inertia\\UserInterface/DW_Regulations.h"
 1551                             		.file 12 "C:\\Workspace\\FW_Platform2_5\\trunk\\Inertia\\Control/DW_Fault.h"

   1                             		.file	"LoadRestore.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.LOR_init,"ax",@progbits
   5                             		.global	_LOR_init
   7                             	_LOR_init:
   8                             	.LFB1:
   9                             		.file 1 "C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules/LoadRestore.c"
   1:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /**
   2:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** Source File 
   3:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
   4:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \file    LoadRestore.c
   5:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \ingroup LoadRestore
   6:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \date    18/03/2008
   7:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \author  Valeria Catani
   8:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \version 1.0.0
   9:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** */
  10:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
  11:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /*
  12:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** Copyright (c) 2004-2008, Indesit Company, IDD.
  13:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** Tutti i diritti sono riservati. All rights reserved.
  14:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** */
  15:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
  16:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* Old Versions
  17:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \version 
  18:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \date    
  19:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \author  
  20:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** */
  21:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
  22:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
  23:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* ******** */
  24:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* Includes */
  25:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* ******** */
  26:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
  27:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #include "CstmHeaders.h"
  28:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
  29:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* ****************** */
  30:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* Defines and Macros */
  31:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* ****************** */
  32:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
  33:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
  34:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
  35:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* *************************** */
  36:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* Typedef, Structs and Unions */
  37:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* *************************** */
  38:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
  39:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* **************************** */
  40:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* Prototype of local functions */
  41:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* **************************** */
  42:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** void LOR_init(void);
  43:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** void LOR_timeLoad_Init(void);
  44:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** uint8_t LOR_timeLoadEnd_Check(void);
  45:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** void LOR_waterInDW_timeBased_Update(void);
  46:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
  47:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* ****************** */
  48:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* Exported variables */
  49:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* ****************** */
  50:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
  51:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* **************** */
  52:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* Global variables */
  53:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* **************** */
  54:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
  55:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* ***************** */
  56:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* Exported function */
  57:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* ***************** */
  58:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
  59:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****  /**
  60:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** Gestisce l'esecuzione del microprogramma Load Restore .
  61:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****  
  62:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \param [in] HighStatement specifica l'high statement (opcode +  modificatori F0-F1 + N flag + T fla
  63:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \param [in] LowStatement specifica il low statement (displacement ai dati) del microprogramma.
  64:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****  
  65:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \return S_OK se la condizione di avanzamento passo per il microprogramma � verificata (caricament
  66:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \return S_FALSE se non � ancora verificata(caricamento acqua in corso),
  67:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
  68:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****  
  69:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \version		1.0.0
  70:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \date 			18/03/2008
  71:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \author			Valeria Catani
  72:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
  73:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \note	in sospeso pressostato lineare
  74:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
  75:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** */
  76:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** uint8_t LOR_uP_LoadRestore_Exe (uint8_t HighStatement,uint8_t LowStatement)
  77:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** {
  78:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	uint8_t loadMode;
  79:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	
  80:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	if (Interpreter_Data[0].stepInitialized == FALSE )
  81:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	{
  82:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		/* Prima iterazione del passo */
  83:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
  84:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		uP_LoadRestore_Data.status = LOAD_RESTORE_INIT;
  85:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	}
  86:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
  87:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	if (uPDoorStatus == UP_DOOR_WAIT)
  88:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****   	{/* porta aperta o in attesa di timeout dopo la chiusura o delay MR-> il uP va sospeso */
  89:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****    
  90:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	    
  91:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		(void)SWTC_Stop((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER);
  92:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	    (void)SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
  93:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		(void)SWTC_Stop((SWTC_CountersType)MP_PUMP_LOAD_M_COUNTER);
  94:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	    (void)SWTC_Stop((SWTC_CountersType)MP_LOADRESTORE_S_COUNTER);
  95:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
  96:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	    uP_LoadRestore_Data.init = TRUE;
  97:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
  98:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		return S_FALSE;
  99:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			    
 100:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	}
 101:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 102:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	/*Analisi modalit� di caricamento richiesta */
 103:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	loadMode = HighStatement & (F1|F0);	 
 104:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****   
 105:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****   /* Test validit� stato criterio pieno/vuoto */			 
 106:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	                                       
 107:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	if ( (TESTBIT (GIValid, (GI_FIRST_CRITERION_BIT + GI_PRESS_SENS_CR_FULL_IND) ) == 0) && (!loadMode
 108:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	{
 109:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		/*
 110:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		Il criterio pieno/vuoto � in uno stato non valido o non � presente:
 111:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		*/
 112:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 113:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		/* Non eseguo il uP, ma abilito avanzamento passo */
 114:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		return S_OK;
 115:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	}
 116:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 117:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 118:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	if (uP_LoadRestore_Data.status == LOAD_RESTORE_INIT)
 119:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	{
 120:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	 
 121:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	  /* Caricamento dati dalla flash */
 122:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 123:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 124:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		if (BasicLoader (PTR_UP_LOAD_RESTORE, LowStatement, &uPLoadRestore_setting_data) != S_OK)
 125:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		{
 126:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 127:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			/* Non eseguo il uP, ma abilito avanzamento passo */
 128:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			return S_OK;
 129:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		}
 130:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		
 131:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         TempCycle_Stats.flags.bit.restoreCntEn=1;
 132:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		 
 133:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         uP_LoadRestore_Data.maxWater = OFFS_B(uPLoadRestore_setting_data.Data,0);	
 134:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		
 135:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		/*CLRBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS);*/ /* reset flag overflow ripristini */
 136:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			
 137:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		
 138:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		/* Init variabili per caricamento a turbina */
 139:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		
 140:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		uP_LoadRestore_Data.init = TRUE;
 141:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /*
 142:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		
 143:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		PulseCounter_Reset_Warning(PULSECOUNTER_RESET_BOTH_WARNING);                         Reset di eve
 144:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		
 145:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** */ /*AE FIX ME*/
 146:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		uP_LoadRestore_Data.fullPulseIn = 0;                  /* init var per conteggio impulsi entranti 
 147:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 						
 148:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     LOR_init();                                           /* init per caricamento con fullPulseIn =
 149:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     
 150:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     (void)FLT_CheckPulseCounterStill(PULSE_COUNTER_STILL_INIT);     /* init funzione controllo turb
 151:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     CLRBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS);
 152:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		
 153:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		if (loadMode )
 154:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		{/* algoritmo di riconoscimento sporco / schiuma */
 155:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			uP_LoadRestore_Data.status = LOAD_RESTORE_SV_WAIT;
 156:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		}else
 157:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		{ /*  gestione col pressostato*/
 158:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			uP_LoadRestore_Data.status = LOAD_RESTORE_EXE;
 159:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		}
 160:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		/* Nella prima iterazione non vengono pilotati i carichi */
 161:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		return S_FALSE;
 162:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			  
 163:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	} /*LOAD_RESTORE_INIT*/
 164:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	
 165:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	if (loadMode )
 166:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****    	{   /* riconoscimento sporco/schiuma*/
 167:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 168:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	   if ((TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_WASH)))&& (!uP_AltCtrl_Data.SV
 169:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	   {
 170:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			/*Il criterio pieno/vuoto � in uno stato non valido o non � presente:
 171:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			*/
 172:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	   		uP_LoadRestore_Data.filter_foam_on=FALSE;
 173:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			
 174:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		   if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==0)
 175:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	   		{/* vedo il vuoto esco */
 176:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				/* Non eseguo il uP, ma abilito avanzamento passo */
 177:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				SETBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS); /* set flag overflow ripristini */	
 178:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           
 179:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		          /* incremento contatore KO Restore per statistiche
 180:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		          posso farlo qui perch� eseguo istruzione una volta soltanto dopo aver messo ad 1 il f
 181:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		          e poi cambio stato in LOAD_RESTORE_TRUE */
 182:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		#ifdef _STATISTICS_ON_                        
 183:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		          MachineStatistics.lastCyclesStats[MOST_RECENT_STAT_CYCLE_POS].restore_koRestore.b.koRes
 184:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		#endif       
 185:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				uP_LoadRestore_Data.status = LOAD_RESTORE_TRUE;
 186:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				
 187:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				return S_OK;
 188:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			} 
 189:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****    	   	
 190:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==3)
 191:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	   		{/* vedo una condizione di sporco/ schiuma */
 192:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				uP_LoadRestore_Data.filter_foam_on=TRUE;
 193:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				
 194:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				switch (uP_LoadRestore_Data.status)
 195:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				{
 196:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					case LOAD_RESTORE_SV_WAIT:
 197:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					/* devo ridurre la velocit� della prima percentuale */
 198:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 						uP_LoadRestore_Data.status= LOAD_1LIMIT_POWER_SV;
 199:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					break;
 200:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					case LOAD_1LIMIT_POWER_SV:
 201:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 						/* non sono passato per il pieno quindi rabbocco fino al pieno o al massimo  */						
 202:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 						uP_LoadRestore_Data.status= LOAD_RESTORE_SV;
 203:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					break;
 204:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					
 205:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					case LOAD_RESTORE_SV_WAIT_1:
 206:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					/* Se sono in questa condizione ho visto il pieno con la prima riduzione, quindi riduco di una
 207:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 						uP_LoadRestore_Data.status= LOAD_2LIMIT_POWER_SV;
 208:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					break;
 209:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					case LOAD_2LIMIT_POWER_SV:
 210:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					/*dopo la seconda riduzione , se non vedo mail il pieno il uP termina*/
 211:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		
 212:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					case LOAD_RESTORE_SV:
 213:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					default : 
 214:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					break;
 215:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					
 216:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				}
 217:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				
 218:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			
 219:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			}
 220:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		 	if (((Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==2) || (Virtual_Sensor_Value[GI_VIRTUAL_SENS
 221:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		   	{/* vedo il pieno , quindi non faccio nulla, mantengo la velocit� e la quantit� d'acqua*/
 222:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					/* Non eseguo il uP, e non abilito il passo  aspetto che torni vero */
 223:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					uP_LoadRestore_Data.filter_foam_on=FALSE;
 224:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					
 225:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					switch (uP_LoadRestore_Data.status)
 226:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				{
 227:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					case LOAD_RESTORE_SV_WAIT:
 228:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					case LOAD_RESTORE_SV_WAIT_1:
 229:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					/* vedo il pieno il uP permette l'avanzamento del passo*/
 230:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 						
 231:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					break;
 232:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					case LOAD_1LIMIT_POWER_SV:
 233:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					/* ho gi� ridotto la velocit� una volta, e quindi si mantiene lo stato di riduzione della 
 234:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 						uP_LoadRestore_Data.status= LOAD_RESTORE_SV_WAIT_1;
 235:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 						
 236:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					break;
 237:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					
 238:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					case LOAD_2LIMIT_POWER_SV:
 239:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 						/*uP_LoadRestore_Data.status= LOAD_RESTORE_SV;*/
 240:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					case LOAD_RESTORE_SV:
 241:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					default :
 242:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					break;
 243:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				}
 244:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			}  
 245:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	      
 246:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		}
 247:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		else
 248:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		{/* CRITERIO INVALIDO  RIMANE CON LO STATO VECCHIO.*/
 249:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		}
 250:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		uP_LoadRestore_Data.reduc_speed=0;
 251:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		
 252:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		if ((uP_LoadRestore_Data.status == LOAD_1LIMIT_POWER_SV)||
 253:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		(uP_LoadRestore_Data.status= LOAD_RESTORE_SV_WAIT_1))
 254:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	    {/* riduzione della velocit� della pompa per sporco*/
 255:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			uP_LoadRestore_Data.reduc_speed=1;
 256:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		
 257:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		}
 258:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		if (uP_LoadRestore_Data.status == LOAD_2LIMIT_POWER_SV)
 259:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	    {/* riduzione della velocit� della pompa per sporco*/
 260:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****   
 261:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			uP_LoadRestore_Data.reduc_speed=2;
 262:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		
 263:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		}
 264:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		 
 265:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		
 266:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	}	
 267:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	
 268:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	/* QI 05.11.09 gestione timeout caricamento dinamico: vale in Load Restore perch� 
 269:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	implicitamente si assume che con il Load Restore ci sia sempre attivazione pompa, ovvero sia
 270:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	sempre un caricamento dinamico */
 271:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	
 272:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	FLT_Pump_Load_Mgmt(FLT_PUMP_LOAD_EXE);
 273:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	
 274:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	if ( TESTBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS) )
 275:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	{
 276:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		
 277:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		/* in analogia con la dichiarazione del KO Restore per WaterInDW > maxWater
 278:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		non si prosegue nel caricamento e viene abilitato avanzalomento passo 
 279:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		Il Jump su KO Restore verr� processato nel passo successivo 
 280:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		se Load Restore � l'unico uP del passo*/
 281:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		
 282:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		uP_LoadRestore_Data.status = LOAD_RESTORE_TRUE; 
 283:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		
 284:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	}
 285:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	
 286:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	
 287:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	if ((uP_LoadRestore_Data.status == LOAD_RESTORE_EXE)||(uP_LoadRestore_Data.status == LOAD_RESTORE_
 288:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	{
 289:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	
 290:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	if ( (PulseCounter_GetWarning() == NO_PULSE_COUNTER_WARNING) && (TESTBIT(Flags_1,JIF_FLAG1_PULSE_C
 291:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     {/* Pulse counter OK && non bloccata */
 292:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     
 293:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       if ( WaterInDW >= uP_LoadRestore_Data.maxWater )
 294:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       {/* raggiunto livello massimo consentito */
 295:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         
 296:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         if ( (TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )&& (!loadMode) )
 297:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         {/*vuoto*/
 298:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           
 299:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           SETBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS); /* set flag overflow ripristini */	
 300:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           
 301:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           /* incremento contatore KO Restore per statistiche
 302:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           posso farlo qui perch� eseguo istruzione una volta soltanto dopo aver messo ad 1 il fla
 303:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           e poi cambio stato in LOAD_RESTORE_TRUE */
 304:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #ifdef _STATISTICS_ON_                        
 305:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           MachineStatistics.lastCyclesStats[MOST_RECENT_STAT_CYCLE_POS].restore_koRestore.b.koResto
 306:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #endif        
 307:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         /*DisableCounter(&PulseCounterStill_timer);viene fatto in LOAD_RESTORE_TRUE*/
 308:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 								
 309:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				uP_LoadRestore_Data.status = LOAD_RESTORE_TRUE;
 310:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				
 311:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     		}
 312:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     		else
 313:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     		{/* pieno -> interrompo il Restore */
 314:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             
 315:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     			/*uP_LoadRestore_Data.init = TRUE;*/
 316:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           		if (uP_LoadRestore_Data.status == LOAD_RESTORE_SV)
 317:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				{	/*  consento avanzamento passo e il uP termina */
 318:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					uP_LoadRestore_Data.status == LOAD_RESTORE_TRUE;
 319:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				} 
 320:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     			/* Rimango in questo stato anche se consento avanzamento passo */			
 321:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     			return S_OK; 
 322:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     			
 323:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             }		
 324:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       }
 325:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       else
 326:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       {/* ancora possibile caricare acqua - controllo stato pressostato */
 327:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       
 328:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         if ((( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )&& (!loadMode) )||
 329:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		(loadMode && (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==3)))
 330:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         { /* vuoto */
 331:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           
 332:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           if (uP_LoadRestore_Data.init == TRUE)
 333:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           {/* questa init potrebbe avvenire anche dopo un passaggio per il pieno per cui fullPulseI
 334:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             
 335:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             LOR_init();
 336:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             
 337:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             /* QI 28.10.09 init finestra di buio su controllo turbina. Messo qui per reinizializzar
 338:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #ifdef _CORRECT_BUG_PULSE_COUNTER_
 339:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****            (void)SWTC_SetSValue((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER, (SWTC_SCounterValue
 340:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #else
 341:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****            (void)Set_SmallCounter((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER, (SWTC_PrescalerTy
 342:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #endif /* _CORRECT_BUG_PULSE_COUNTER_ */
 343:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             
 344:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****               
 345:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             uP_LoadRestore_Data.init = FALSE;
 346:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****               
 347:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           }
 348:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           
 349:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           WaterInDW = (uP_LoadRestore_Data.waterInDWInit + GIWaterLoaded);  /* aggiornamento acqua 
 350:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 351:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 352:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           /* QI 27.10.09 gestione finestra di buio su check turbina */
 353:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           
 354:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           FLT_PulseCounterCheckDelay_Mgmt();
 355:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           
 356:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 357:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #ifdef _STATISTICS_ON_
 358:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           if((GIWaterLoaded>5) && (TempCycle_Stats.flags.bit.restoreCntEn==1)) 
 359:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           {                     
 360:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             MachineStatistics.lastCyclesStats[MOST_RECENT_STAT_CYCLE_POS].restore_koRestore.b.resto
 361:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             TempCycle_Stats.flags.bit.restoreCntEn =0 ;
 362:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           }
 363:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #endif
 364:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           
 365:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           uP_LoadRestore_Data.emptyPulseIn = (GIWaterLoaded * FlowMeterDivider);	 /* aggiornamento 
 366:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****                                                                                       rappresenta l
 367:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****                                                                                       valore salvat
 368:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****                     				
 369:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		      LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b = EV_ON; /* pilotaggio EV*/
 370:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				
 371:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		      /* controllo turbina bloccata */
 372:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           if ( FLT_CheckPulseCounterStill(PULSE_COUNTER_STILL_EXE) == TRUE )
 373:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           {
 374:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             
 375:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             /* entro qui una sola volta,poi cambio modalit� di ripristino */ 
 376:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             FLT_preFaultSet(CODE_PULSE_COUNTER,SUBCODE_PULSE_COUNTER);
 377:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             
 378:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             
 379:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             SETBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS); 
 380:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             
 381:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           }
 382:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	  
 383:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	      return S_FALSE;
 384:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	                
 385:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         }
 386:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         else
 387:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         {/* pieno */
 388:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****          
 389:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****          /*in pieno non piloto EV ma tengo conto di eventuali impulsi conteggiati dalla turbina */
 390:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****                     
 391:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           /*impulsi contati durante la permanenza in pieno */
 392:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           if ( PulseLoaded >= uP_LoadRestore_Data.emptyPulseIn )
 393:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           {
 394:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             uP_LoadRestore_Data.fullPulseIn = ( PulseLoaded - uP_LoadRestore_Data.emptyPulseIn );
 395:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           }
 396:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				
 397:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		  /*METTI GIWaterLoaded = 0, magari nella procedura di Init, qui manca*/
 398:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		  uP_LoadRestore_Data.init = TRUE;
 399:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 400:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           (void)SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
 401:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					
 402:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		  /* Rimango in questo stato anche se consento avanzamento passo */
 403:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					
 404:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		  return S_OK;
 405:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					
 406:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         }
 407:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         
 408:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       }
 409:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       
 410:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     }
 411:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     else
 412:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     {/* Warning Pulse Counter: il conteggio dell'acqua in ingresso non � affidabile ->
 413:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       non eseguo uP ma abilito avanzamento passo 	 */
 414:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       
 415:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       uP_LoadRestore_Data.status = LOAD_RESTORE_EXE_TIME;
 416:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       
 417:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       uP_LoadRestore_Data.init = TRUE;  /* uso la stessa var perch� sono in uno stato diverso */
 418:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       
 419:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     }
 420:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         
 421:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     /*return S_OK;*/
 422:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       
 423:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****    }/*LOAD_RESTORE_EXE*/
 424:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****    
 425:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****    if (uP_LoadRestore_Data.status == LOAD_RESTORE_EXE_TIME)
 426:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****    {/* ripristino a tempo */
 427:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****    
 428:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     if ((( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )&& (!loadMode) )||
 429:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		(loadMode && (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==3)))
 430:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     {/* vuoto -> posso ancora caricare acqua, se ho tempo residuo */
 431:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 432:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       if (uP_LoadRestore_Data.init == TRUE)
 433:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       {/* questa init potrebbe avvenire anche dopo un passaggio per il pieno per cui fullPulseIn !=
 434:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         
 435:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         LOR_timeLoad_Init();
 436:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 437:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         uP_LoadRestore_Data.init = FALSE;
 438:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           
 439:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       }
 440:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 441:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       if ( LOR_timeLoadEnd_Check() == S_OK )
 442:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       { /* Esaurito tempo a disposizione per ripristino -> 
 443:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****          Non potr� pi� caricare acqua neanche nei ripristini successivi, a meno che non 
 444:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****          abbiano un dato di maxWater maggiore */
 445:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 446:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			  /* Aggiornamento acqua in vasca */
 447:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				WaterInDW = uP_LoadRestore_Data.maxWater;
 448:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				
 449:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	      SETBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS); /* set flag overflow ripristini */	
 450:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           
 451:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           /* incremento contatore KO Restore per statistiche
 452:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           posso farlo qui perch� eseguo istruzione una volta soltanto dopo aver messo ad 1 il fla
 453:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           e poi cambio stato in LOAD_RESTORE_TRUE */
 454:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #ifdef _STATISTICS_ON_                        
 455:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         MachineStatistics.lastCyclesStats[MOST_RECENT_STAT_CYCLE_POS].restore_koRestore.b.koRestore
 456:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #endif
 457:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     	      
 458:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         uP_LoadRestore_Data.status = LOAD_RESTORE_TRUE;
 459:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			
 460:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       }
 461:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       /* else tempo di ripristino non esaurito */
 462:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         
 463:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       /* carico pilotato comunque per continuit� */
 464:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	    LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b = EV_ON; /* pilotaggio EV*/  
 465:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     }
 466:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     else
 467:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     {/* pieno -> interrompo il Restore */
 468:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         
 469:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       if ( uP_LoadRestore_Data.init == FALSE )
 470:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       {/* � stata eseguita init in LOAD_RESTORE_EXE_TIME -> var inizializzate 
 471:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           inoltre init == FALSE per un'unica iterazione-> aggiornamento un'unica volta */
 472:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         
 473:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         /* aggiornamento acqua caricata in base al tempo trascorso */  
 474:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         LOR_waterInDW_timeBased_Update();
 475:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         
 476:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         uP_LoadRestore_Data.init = TRUE;	 /* per eventuale restart con vuoto */
 477:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       }
 478:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 479:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			/* Rimango in questo stato anche se consento avanzamento passo */
 480:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			
 481:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			return S_OK; 
 482:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     }	
 483:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 484:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****    }/*LOAD_RESTORE_EXE_TIME*/
 485:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****    
 486:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****    if (uP_LoadRestore_Data.status == LOAD_RESTORE_TRUE)
 487:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	{
 488:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	
 489:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		(void)SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
 490:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		uP_LoadRestore_Data.filter_foam_on=FALSE;
 491:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	 
 492:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		return S_OK;
 493:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 494:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	}/*LOAD_RESTORE_TRUE*/
 495:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****   
 496:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****    return S_FALSE; 
 497:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****   
 498:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** }
 499:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /**/
 500:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 501:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 502:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 503:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* ************** */
 504:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* Local Function */
 505:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /* ************** */
 506:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 507:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /**
 508:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** Gestisce l'inizializzazione del caricamento.
 509:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****  
 510:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \param [in] HighStatement specifica l'high statement (opcode +  modificatori F0-F1 + N flag + T fla
 511:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \param [in] LowStatement specifica il low statement (displacement ai dati) del microprogramma.
 512:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****  
 513:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 514:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****  
 515:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \version		1.0.0
 516:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \date 			18/03/2008
 517:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \author			Valeria Catani
 518:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 519:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \note	in sospeso pressostato lineare
 520:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 521:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** */
 522:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 523:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #if defined (BUILD_FREESCALE_GB60)
 524:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #pragma INLINE
 525:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #elif defined (BUILD_RENESAS_36079)
 526:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #pragma inline(LOR_init)
 527:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #endif
 528:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** void LOR_init(void)
 529:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** {
  10                             		.loc 1 529 0
 530:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****  
 531:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****   GIWaterLoaded = 0;
  11                             		.loc 1 531 0
  12 0000 FB E2 00 00 00 00       		mov.L	#_GIWaterLoaded, r14
  13 0006 F8 E5 00                		mov.W	#0, [r14]
 532:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****   PulseLoaded = 0;
  14                             		.loc 1 532 0
  15 0009 FB E2 00 00 00 00       		mov.L	#_PulseLoaded, r14
  16 000f F8 E5 00                		mov.W	#0, [r14]
 533:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****   uP_LoadRestore_Data.emptyPulseIn = 0;
 534:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****  
 535:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****   uP_LoadRestore_Data.waterInDWInit = WaterInDW; 
  17                             		.loc 1 535 0
  18 0012 FB 42 00 00 00 00       		mov.L	#_WaterInDW, r4
 533:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****   uP_LoadRestore_Data.emptyPulseIn = 0;
  19                             		.loc 1 533 0
  20 0018 FB E2 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r14
  21                             		.loc 1 535 0
  22 001e CC 44                   		mov.B	[r4], r4
 536:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	         
 537:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****   PulseCounter_SetCount(uP_LoadRestore_Data.fullPulseIn);/* init pulse counter per nuovo conteggio 
  23                             		.loc 1 537 0
  24 0020 5D E1 03                		movu.W	6[r14], r1
 533:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****   uP_LoadRestore_Data.emptyPulseIn = 0;
  25                             		.loc 1 533 0
  26 0023 F9 E5 04 00             		mov.W	#0, 8[r14]
 535:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****   uP_LoadRestore_Data.waterInDWInit = WaterInDW; 
  27                             		.loc 1 535 0
  28 0027 C7 E4 02                		mov.B	r4, 2[r14]
  29                             		.loc 1 537 0
  30 002a 04 00 00 00             		bra	_PulseCounter_SetCount
  31                             	.LVL0:
  32                             	.LFE1:
  34                             		.section	.text.LOR_timeLoad_Init,"ax",@progbits
  35                             		.global	_LOR_timeLoad_Init
  37                             	_LOR_timeLoad_Init:
  38                             	.LFB2:
 538:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 539:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** }
 540:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 541:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /**
 542:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** Inizializza up counter per caricamento a tempo
 543:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 544:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \param [in]		
 545:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 546:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \note: 
 547:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \version		1.0.0
 548:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \date 			27/08/2008
 549:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \author			Valeria Catani
 550:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 551:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** */
 552:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #if defined (BUILD_FREESCALE_GB60)
 553:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #pragma INLINE
 554:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #elif defined (BUILD_RENESAS_36079)
 555:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #pragma inline(LOR_timeLoad_Init)
 556:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #endif
 557:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** void LOR_timeLoad_Init(void)
 558:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** {
  39                             		.loc 1 558 0
  40                             	.LVL1:
  41 0000 7E A7                   		push.l	r7
  42                             	.LCFI0:
 559:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** uint8_t loadingWater;	
 560:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	
 561:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	/* Calcolo tempo di caricamento residuo */
 562:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****   	loadingWater =  ( uP_LoadRestore_Data.maxWater - WaterInDW );	  /* acqua residua che � possibi
  43                             		.loc 1 562 0
  44 0002 FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
  45                             	.LVL2:
  46 0008 CC 71                   		mov.B	[r7], r1
  47 000a FB E2 00 00 00 00       		mov.L	#_WaterInDW, r14
  48                             	.LVL3:
 563:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           
 564:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	uP_LoadRestore_Data.time = LOA_levTOtime_Conv(loadingWater); /* Calcolo tempo totale di ripristino
  49                             		.loc 1 564 0
  50 0010 06 00 E1                		sub	[r14].B, r1
  51 0013 05 00 00 00             		bsr	_LOA_levTOtime_Conv
  52                             	.LVL4:
  53 0017 91 79                   		mov.W	r1, 10[r7]
 565:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		    		  	
 566:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	uP_LoadRestore_Data.timeAcc = 0;
  54                             		.loc 1 566 0
  55 0019 3D 76 00                		mov.W	#0, 12[r7]
 567:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 568:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	/* config + init UP counter per conteggio caricamento a tempo */
 569:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #ifdef _CORRECT_BUG_UP_COUNTERS_
 570:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	(void)Set_SmallCounter((SWTC_CountersType)MP_LOADRESTORE_S_COUNTER, (SWTC_PrescalerType)COUNTERS2_
 571:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #else
 572:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	(void)Set_SmallCounter((SWTC_CountersType)MP_LOADRESTORE_S_COUNTER, (SWTC_PrescalerType)COUNTERS2_
 573:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #endif /* _CORRECT_BUG_UP_COUNTERS_ */
 574:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** }
  56                             		.loc 1 574 0
  57 001c 7E B7                   		pop	r7
 570:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	(void)Set_SmallCounter((SWTC_CountersType)MP_LOADRESTORE_S_COUNTER, (SWTC_PrescalerType)COUNTERS2_
  58                             		.loc 1 570 0
  59 001e 66 71                   		mov	#7, r1
  60 0020 66 32                   		mov	#3, r2
  61 0022 75 43 7F                		mov	#0x7f, r3
  62 0025 04 00 00 00             		bra	_Set_SmallCounter
  63                             	.LVL5:
  64                             	.LFE2:
  66                             		.section	.text.LOR_timeLoadEnd_Check,"ax",@progbits
  67                             		.global	_LOR_timeLoadEnd_Check
  69                             	_LOR_timeLoadEnd_Check:
  70                             	.LFB3:
 575:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /**/
 576:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 577:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 578:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /**
 579:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** Valuta se il target per il ripristino a tempo � stato raggiunto -
 580:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 581:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 582:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \param [in]		
 583:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \return 		S_OK se il target � stato raggiunto
 584:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				S_FALSE se il target non � ancora raggiunto
 585:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				 
 586:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \version		1.0.0
 587:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \date 			27/08/2008
 588:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \author			Valeria Catani
 589:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 590:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** */
 591:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #if defined (BUILD_FREESCALE_GB60)
 592:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #pragma INLINE
 593:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #elif defined (BUILD_RENESAS_36079)
 594:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #pragma inline(LOR_timeLoadEnd_Check)
 595:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #endif		
 596:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** uint8_t LOR_timeLoadEnd_Check(void)
 597:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** {
  71                             		.loc 1 597 0
  72 0000 6E 7A                   		pushm	r7-r10
  73                             	.LCFI1:
 598:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** uint16_t timeElapsed_tmp;
 599:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 600:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	/* Caricamento in base alla portata (a tempo) */
 601:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 602:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	timeElapsed_tmp = (uP_LoadRestore_Data.timeAcc + (SWTC_TimeType)SWTC_GetElapsedTime((SWTC_Counters
  74                             		.loc 1 602 0
  75 0002 FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
  76 0008 DD 7A 06                		mov.W	12[r7], r10
  77 000b 66 71                   		mov	#7, r1
  78 000d 05 00 00 00             		bsr	_SWTC_GetElapsedTime
  79                             	.LVL6:
  80 0011 4B A1                   		add	r10, r1
  81                             	.LVL7:
 603:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 604:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	if (timeElapsed_tmp >= uP_LoadRestore_Data.time)
  82                             		.loc 1 604 0
  83 0013 5D 7E 05                		movu.W	10[r7], r14
  84 0016 5F 1A                   		movu.W	r1, r10
  85 0018 47 AE                   		cmp	r10, r14
 605:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	{
 606:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		/* End counting */
 607:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 608:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		(void)SWTC_Stop((SWTC_CountersType)MP_LOADRESTORE_S_COUNTER);
  86                             		.loc 1 608 0
  87 001a 66 71                   		mov	#7, r1
 604:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	if (timeElapsed_tmp >= uP_LoadRestore_Data.time)
  88                             		.loc 1 604 0
  89 001c 24 0A                   		bgtu	.L5
  90                             		.loc 1 608 0
  91 001e 05 00 00 00             		bsr	_SWTC_Stop
  92                             	.LVL8:
 609:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 610:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		return S_OK;
  93                             		.loc 1 610 0
  94 0022 66 01                   		mov	#0, r1
  95 0024 2E 24                   		bra	.L6
  96                             	.L5:
 611:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	}
 612:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	else
 613:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	{
 614:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		if (SWTC_IsExpired((SWTC_CountersType)MP_LOADRESTORE_S_COUNTER) )
  97                             		.loc 1 614 0
  98 0026 05 00 00 00             		bsr	_SWTC_IsExpired
  99                             	.LVL9:
 100 002a 61 01                   		cmp	#0, r1
 101 002c 20 14                   		beq	.L7
 615:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		{
 616:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			/* Restart counter */
 617:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 618:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			/* Update timeAcc */
 619:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			uP_LoadRestore_Data.timeAcc += TOUT_MAX_COUNTER;
 102                             		.loc 1 619 0
 103 002e DD 7A 06                		mov.W	12[r7], r10
 620:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 621:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			/* Restart timer */
 622:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #ifdef _CORRECT_BUG_UP_COUNTERS_
 623:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			(void)SWTC_SetSValue ((SWTC_CountersType)MP_LOADRESTORE_S_COUNTER,(SWTC_SCounterValue)TOUT_MAX_C
 104                             		.loc 1 623 0
 105 0031 66 71                   		mov	#7, r1
 619:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			uP_LoadRestore_Data.timeAcc += TOUT_MAX_COUNTER;
 106                             		.loc 1 619 0
 107 0033 71 AA 7F                		add	#0x7f, r10
 108                             		.loc 1 623 0
 109 0036 75 42 7F                		mov	#0x7f, r2
 619:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			uP_LoadRestore_Data.timeAcc += TOUT_MAX_COUNTER;
 110                             		.loc 1 619 0
 111 0039 D7 7A 06                		mov.W	r10, 12[r7]
 112                             		.loc 1 623 0
 113 003c 05 00 00 00             		bsr	_SWTC_SetSValue
 114                             	.LVL10:
 115                             		.balign 2,3,1
 116                             	.L7:
 624:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #else
 625:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			(void)SWTC_SetSValue ((SWTC_CountersType)MP_LOADRESTORE_S_COUNTER,(SWTC_SCounterValue)0);
 626:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #endif /* _CORRECT_BUG_UP_COUNTERS_ */
 627:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		}
 628:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 629:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		(void)SWTC_Run((SWTC_CountersType)MP_LOADRESTORE_S_COUNTER);
 117                             		.loc 1 629 0
 118 0040 66 71                   		mov	#7, r1
 119 0042 05 00 00 00             		bsr	_SWTC_Run
 120                             	.LVL11:
 630:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	}
 631:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 632:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	return S_FALSE;
 121                             		.loc 1 632 0
 122 0046 66 11                   		mov	#1, r1
 123                             		.balign 2,3,1
 124                             	.L6:
 633:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** }
 125                             		.loc 1 633 0
 126 0048 64 11                   		and	#1, r1
 127 004a 3F 7A 04                		rtsd	#16, r7-r10
 128                             	.LFE3:
 130 004d 03                      		.section	.text.LOR_waterInDW_timeBased_Update,"ax",@progbits
 131                             		.global	_LOR_waterInDW_timeBased_Update
 133                             	_LOR_waterInDW_timeBased_Update:
 134                             	.LFB4:
 634:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /**/
 635:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 636:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 637:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** /**
 638:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** Aggiorna la quantit� di acqua in vasca in base alla conversione del tempo di caricamento 
 639:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** appena applicato
 640:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 641:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \param [in]		
 642:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \return 		
 643:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 								 
 644:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \version		1.0.0
 645:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \date 			28/08/2008
 646:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** \author			Valeria Catani
 647:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 648:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** */
 649:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #if defined (BUILD_FREESCALE_GB60)
 650:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #pragma INLINE
 651:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #elif defined (BUILD_RENESAS_36079)
 652:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #pragma inline(LOR_waterInDW_timeBased_Update)
 653:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** #endif
 654:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** void LOR_waterInDW_timeBased_Update(void)
 655:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** {
 135                             		.loc 1 655 0
 136 0000 6E 7A                   		pushm	r7-r10
 137                             	.LCFI2:
 656:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** uint16_t timeElapsed_tmp;
 657:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** uint8_t loadedWater;
 658:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 659:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****   timeElapsed_tmp = (uP_LoadRestore_Data.timeAcc + (SWTC_TimeType)SWTC_GetElapsedTime((SWTC_Counter
 138                             		.loc 1 659 0
 139 0002 FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
 140 0008 99 F7                   		mov.W	12[r7], r7
 141 000a 66 71                   		mov	#7, r1
 142 000c 05 00 00 00             		bsr	_SWTC_GetElapsedTime
 143                             	.LVL12:
 660:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 
 661:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****   loadedWater =  LOA_timeTOlev_Conv(timeElapsed_tmp); 
 144                             		.loc 1 661 0
 145 0010 4B 71                   		add	r7, r1
 146                             	.LVL13:
 147 0012 05 00 00 00             		bsr	_LOA_timeTOlev_Conv
 148                             	.LVL14:
 662:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****   
 663:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****   WaterInDW += loadedWater;		 /* aggiornamento acqua in vasca con la quantit� caricata
 149                             		.loc 1 663 0
 150 0016 FB E2 00 00 00 00       		mov.L	#_WaterInDW, r14
 151 001c 06 08 E1                		add	[r14].B, r1
 152                             	.LVL15:
 153 001f C3 E1                   		mov.B	r1, [r14]
 664:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****                                   in base al tempo trascorso */
 665:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****   
 666:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** }
 154                             		.loc 1 666 0
 155 0021 3F 7A 04                		rtsd	#16, r7-r10
 156                             	.LFE4:
 158                             		.section	.text.LOR_uP_LoadRestore_Exe,"ax",@progbits
 159                             		.global	_LOR_uP_LoadRestore_Exe
 161                             	_LOR_uP_LoadRestore_Exe:
 162                             	.LFB0:
  77:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** {
 163                             		.loc 1 77 0
 164                             	.LVL16:
 165 0000 6E 7C                   		pushm	r7-r12
 166                             	.LCFI3:
  80:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	if (Interpreter_Data[0].stepInitialized == FALSE )
 167                             		.loc 1 80 0
 168 0002 FB 72 00 00 00 00       		mov.L	#_Interpreter_Data, r7
 169 0008 89 77                   		mov.B	4[r7], r7
 170 000a 64 27                   		and	#2, r7
 171 000c 21 0C                   		bne	.L15
  84:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		uP_LoadRestore_Data.status = LOAD_RESTORE_INIT;
 172                             		.loc 1 84 0
 173 000e FB A2 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r10
 174 0014 C7 A7 01                		mov.B	r7, 1[r10]
 175 0017 03                      		.balign 2,3,5
 176                             	.L15:
  87:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	if (uPDoorStatus == UP_DOOR_WAIT)
 177                             		.loc 1 87 0
 178 0018 FB 72 00 00 00 00       		mov.L	#_uPDoorStatus, r7
 179 001e 58 77                   		movu.B	[r7], r7
 180 0020 61 07                   		cmp	#0, r7
 181 0022 21 2D                   		bne	.L16
  91:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		(void)SWTC_Stop((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER);
 182                             		.loc 1 91 0
 183 0024 66 61                   		mov	#6, r1
 184                             	.LVL17:
 185 0026 05 00 00 00             		bsr	_SWTC_Stop
 186                             	.LVL18:
  92:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	    (void)SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
 187                             		.loc 1 92 0
 188 002a 75 41 1F                		mov	#31, r1
 189 002d 05 00 00 00             		bsr	_SWTC_Stop
 190                             	.LVL19:
  93:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		(void)SWTC_Stop((SWTC_CountersType)MP_PUMP_LOAD_M_COUNTER);
 191                             		.loc 1 93 0
 192 0031 75 41 20                		mov	#32, r1
 193 0034 05 00 00 00             		bsr	_SWTC_Stop
 194                             	.LVL20:
  96:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	    uP_LoadRestore_Data.init = TRUE;
 195                             		.loc 1 96 0
 196 0038 FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
  94:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	    (void)SWTC_Stop((SWTC_CountersType)MP_LOADRESTORE_S_COUNTER);
 197                             		.loc 1 94 0
 198 003e 66 71                   		mov	#7, r1
 199 0040 05 00 00 00             		bsr	_SWTC_Stop
 200                             	.LVL21:
  96:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	    uP_LoadRestore_Data.init = TRUE;
 201                             		.loc 1 96 0
 202 0044 CD 7A 03                		mov.B	3[r7], r10
 203 0047 78 7A                   		bset	#7, r10
 204 0049 C7 7A 03                		mov.B	r10, 3[r7]
 205 004c 38 86 00                		bra	.L87
 206                             	.LVL22:
 207                             	.L16:
 107:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	if ( (TESTBIT (GIValid, (GI_FIRST_CRITERION_BIT + GI_PRESS_SENS_CR_FULL_IND) ) == 0) && (!loadMode
 208                             		.loc 1 107 0
 209 004f FB 72 00 00 00 00       		mov.L	#_GIValid, r7
 103:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	loadMode = HighStatement & (F1|F0);	 
 210                             		.loc 1 103 0
 211 0055 EF 1A                   		mov.L	r1, r10
 107:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	if ( (TESTBIT (GIValid, (GI_FIRST_CRITERION_BIT + GI_PRESS_SENS_CR_FULL_IND) ) == 0) && (!loadMode
 212                             		.loc 1 107 0
 213 0057 DC 7B                   		mov.W	[r7], r11
 103:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	loadMode = HighStatement & (F1|F0);	 
 214                             		.loc 1 103 0
 215 0059 75 2A 30                		and	#48, r10
 216                             	.LVL23:
 107:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	if ( (TESTBIT (GIValid, (GI_FIRST_CRITERION_BIT + GI_PRESS_SENS_CR_FULL_IND) ) == 0) && (!loadMode
 217                             		.loc 1 107 0
 218 005c FD 74 CB 01             		tst	#1, r11
 219 0060 21 0B                   		bne	.L18
 107:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	if ( (TESTBIT (GIValid, (GI_FIRST_CRITERION_BIT + GI_PRESS_SENS_CR_FULL_IND) ) == 0) && (!loadMode
 220                             		.loc 1 107 0 is_stmt 0 discriminator 1
 221 0062 5B A7                   		movu.B	r10, r7
 222 0064 61 07                   		cmp	#0, r7
 223 0066 21 05                   		bne	.L18
 224 0068 38 0C 04                		bra	.L88
 225                             	.L18:
 118:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	if (uP_LoadRestore_Data.status == LOAD_RESTORE_INIT)
 226                             		.loc 1 118 0 is_stmt 1
 227 006b FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
 228 0071 59 7E 01                		movu.B	1[r7], r14
 229 0074 61 0E                   		cmp	#0, r14
 230 0076 21 66                   		bne	.L19
 124:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		if (BasicLoader (PTR_UP_LOAD_RESTORE, LowStatement, &uPLoadRestore_setting_data) != S_OK)
 231                             		.loc 1 124 0
 232 0078 75 41 12                		mov	#18, r1
 233                             	.LVL24:
 234 007b FB 32 00 00 00 00       		mov.L	#_uPLoadRestore_setting_data, r3
 235 0081 05 00 00 00             		bsr	_BasicLoader
 236                             	.LVL25:
 237 0085 5B 1B                   		movu.B	r1, r11
 238 0087 61 0B                   		cmp	#0, r11
 239 0089 3B EB 03                		bne	.L88
 131:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         TempCycle_Stats.flags.bit.restoreCntEn=1;
 240                             		.loc 1 131 0
 241 008c FB E2 00 00 00 00       		mov.L	#_TempCycle_Stats, r14
 242 0092 CD E4 02                		mov.B	2[r14], r4
 153:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		if (loadMode )
 243                             		.loc 1 153 0
 244 0095 5B AA                   		movu.B	r10, r10
 131:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         TempCycle_Stats.flags.bit.restoreCntEn=1;
 245                             		.loc 1 131 0
 246 0097 78 74                   		bset	#7, r4
 247 0099 C7 E4 02                		mov.B	r4, 2[r14]
 133:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         uP_LoadRestore_Data.maxWater = OFFS_B(uPLoadRestore_setting_data.Data,0);	
 248                             		.loc 1 133 0
 249 009c FB E2 00 00 00 00       		mov.L	#_uPLoadRestore_setting_data, r14
 250 00a2 EC EE                   		mov.L	[r14], r14
 251 00a4 CC EE                   		mov.B	[r14], r14
 146:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		uP_LoadRestore_Data.fullPulseIn = 0;                  /* init var per conteggio impulsi entranti 
 252                             		.loc 1 146 0
 253 00a6 D7 7B 03                		mov.W	r11, 6[r7]
 133:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         uP_LoadRestore_Data.maxWater = OFFS_B(uPLoadRestore_setting_data.Data,0);	
 254                             		.loc 1 133 0
 255 00a9 C3 7E                   		mov.B	r14, [r7]
 140:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		uP_LoadRestore_Data.init = TRUE;
 256                             		.loc 1 140 0
 257 00ab CD 7E 03                		mov.B	3[r7], r14
 258 00ae 78 7E                   		bset	#7, r14
 259 00b0 C7 7E 03                		mov.B	r14, 3[r7]
 148:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     LOR_init();                                           /* init per caricamento con fullPulseIn =
 260                             		.loc 1 148 0
 261 00b3 05 00 00 00             		bsr	_LOR_init
 262                             	.LVL26:
 150:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     (void)FLT_CheckPulseCounterStill(PULSE_COUNTER_STILL_INIT);     /* init funzione controllo turb
 263                             		.loc 1 150 0
 264 00b7 CF B1                   		mov.B	r11, r1
 265 00b9 05 00 00 00             		bsr	_FLT_CheckPulseCounterStill
 266                             	.LVL27:
 151:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     CLRBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS);
 267                             		.loc 1 151 0
 268 00bd FB B2 00 00 00 00       		mov.L	#_Flags_1, r11
 269 00c3 CC BE                   		mov.B	[r11], r14
 270 00c5 75 2E FB                		and	#-5, r14
 271 00c8 C3 BE                   		mov.B	r14, [r11]
 153:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		if (loadMode )
 272                             		.loc 1 153 0
 273 00ca 61 0A                   		cmp	#0, r10
 274 00cc 20 0B                   		beq	.L21
 155:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			uP_LoadRestore_Data.status = LOAD_RESTORE_SV_WAIT;
 275                             		.loc 1 155 0
 276 00ce 3C 71 07                		mov.B	#7, 1[r7]
 277                             	.LVL28:
 278 00d1 03                      		.balign 2,3,1
 279                             	.L87:
 161:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		return S_FALSE;
 280                             		.loc 1 161 0
 281 00d2 66 11                   		mov	#1, r1
 282 00d4 38 A2 03                		bra	.L17
 283                             	.LVL29:
 284                             	.L21:
 158:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			uP_LoadRestore_Data.status = LOAD_RESTORE_EXE;
 285                             		.loc 1 158 0
 286 00d7 3C 71 01                		mov.B	#1, 1[r7]
 287 00da 2E F8                   		bra	.L87
 288                             	.LVL30:
 289                             	.L19:
 165:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	if (loadMode )
 290                             		.loc 1 165 0
 291 00dc 5B A4                   		movu.B	r10, r4
 292 00de 61 04                   		cmp	#0, r4
 293 00e0 3A E2 00                		beq	.L23
 168:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	   if ((TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_WASH)))&& (!uP_AltCtrl_Data.SV
 294                             		.loc 1 168 0
 295 00e3 76 2B 00 04             		and	#0x400, r11
 296 00e7 5F BB                   		movu.W	r11, r11
 297 00e9 61 0B                   		cmp	#0, r11
 298 00eb 3A 9B 00                		beq	.L25
 168:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	   if ((TESTBIT(GIValid, (GI_FIRST_VIRTSENSOR_BIT+GI_VIRTUAL_SENSOR_WASH)))&& (!uP_AltCtrl_Data.SV
 299                             		.loc 1 168 0 is_stmt 0 discriminator 1
 300 00ee FB B2 00 00 00 00       		mov.L	#_uP_AltCtrl_Data, r11
 301 00f4 CD BB 04                		mov.B	4[r11], r11
 302 00f7 76 2B 80 00             		and	#0x80, r11
 303 00fb 5B BB                   		movu.B	r11, r11
 304 00fd 61 0B                   		cmp	#0, r11
 305 00ff 3B 87 00                		bne	.L25
 172:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	   		uP_LoadRestore_Data.filter_foam_on=FALSE;
 306                             		.loc 1 172 0 is_stmt 1
 307 0102 88 FC                   		mov.B	3[r7], r4
 174:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		   if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==0)
 308                             		.loc 1 174 0
 309 0104 FB B2 00 00 00 00       		mov.L	#_Virtual_Sensor_Value, r11
 172:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	   		uP_LoadRestore_Data.filter_foam_on=FALSE;
 310                             		.loc 1 172 0
 311 010a 7A 44                   		bclr	#4, r4
 312 010c 80 FC                   		mov.B	r4, 3[r7]
 174:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		   if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==0)
 313                             		.loc 1 174 0
 314 010e CC BB                   		mov.B	[r11], r11
 315 0110 5B B1                   		movu.B	r11, r1
 316                             	.LVL31:
 317 0112 61 01                   		cmp	#0, r1
 318 0114 21 2E                   		bne	.L27
 177:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				SETBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS); /* set flag overflow ripristini */	
 319                             		.loc 1 177 0
 320 0116 FB A2 00 00 00 00       		mov.L	#_Flags_1, r10
 321                             	.LVL32:
 322 011c CC AB                   		mov.B	[r10], r11
 323 011e 65 1B                   		or	#1, r11
 324 0120 C3 AB                   		mov.B	r11, [r10]
 183:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		          MachineStatistics.lastCyclesStats[MOST_RECENT_STAT_CYCLE_POS].restore_koRestore.b.koRes
 325                             		.loc 1 183 0
 326 0122 FB A2 00 00 00 00       		mov.L	#_MachineStatistics, r10
 327 0128 5D AE 35                		movu.W	106[r10], r14
 328 012b CD AB 6A                		mov.B	106[r10], r11
 329 012e 68 8E                   		shlr	#8, r14
 330 0130 62 1E                   		add	#1, r14
 331 0132 64 FE                   		and	#15, r14
 332 0134 75 2B F0                		and	#-16, r11
 333 0137 57 BE                   		or	r11, r14
 334 0139 C7 AE 6A                		mov.B	r14, 106[r10]
 185:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				uP_LoadRestore_Data.status = LOAD_RESTORE_TRUE;
 335                             		.loc 1 185 0
 336 013c 3C 71 03                		mov.B	#3, 1[r7]
 187:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				return S_OK;
 337                             		.loc 1 187 0
 338 013f 38 37 03                		bra	.L17
 339                             	.LVL33:
 340                             	.L27:
 190:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			if (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==3)
 341                             		.loc 1 190 0
 342 0142 61 31                   		cmp	#3, r1
 343 0144 21 22                   		bne	.L28
 192:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				uP_LoadRestore_Data.filter_foam_on=TRUE;
 344                             		.loc 1 192 0
 345 0146 78 44                   		bset	#4, r4
 346 0148 80 FC                   		mov.B	r4, 3[r7]
 194:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				switch (uP_LoadRestore_Data.status)
 347                             		.loc 1 194 0
 348 014a 61 7E                   		cmp	#7, r14
 349 014c 20 0C                   		beq	.L30
 350 014e 61 8E                   		cmp	#8, r14
 351 0150 20 12                   		beq	.L31
 352 0152 61 4E                   		cmp	#4, r14
 353 0154 21 12                   		bne	.L28
 354 0156 2E 07                   		bra	.L29
 355                             	.L30:
 198:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 						uP_LoadRestore_Data.status= LOAD_1LIMIT_POWER_SV;
 356                             		.loc 1 198 0
 357 0158 3C 71 04                		mov.B	#4, 1[r7]
 199:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					break;
 358                             		.loc 1 199 0
 359 015b 2E 0B                   		bra	.L28
 360                             	.L29:
 202:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 						uP_LoadRestore_Data.status= LOAD_RESTORE_SV;
 361                             		.loc 1 202 0
 362 015d 3C 71 06                		mov.B	#6, 1[r7]
 203:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					break;
 363                             		.loc 1 203 0
 364 0160 2E 06                   		bra	.L28
 365                             	.L31:
 207:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 						uP_LoadRestore_Data.status= LOAD_2LIMIT_POWER_SV;
 366                             		.loc 1 207 0
 367 0162 3C 71 05                		mov.B	#5, 1[r7]
 368 0165 03                      		.balign 2,3,1
 369                             	.L28:
 220:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		 	if (((Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==2) || (Virtual_Sensor_Value[GI_VIRTUAL_SENS
 370                             		.loc 1 220 0
 371 0166 60 1B                   		sub	#1, r11
 372 0168 5B BB                   		movu.B	r11, r11
 373 016a 61 1B                   		cmp	#1, r11
 374 016c 24 1A                   		bgtu	.L25
 223:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					uP_LoadRestore_Data.filter_foam_on=FALSE;
 375                             		.loc 1 223 0
 376 016e FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
 377 0174 CD 7B 03                		mov.B	3[r7], r11
 378 0177 7A 4B                   		bclr	#4, r11
 379 0179 C7 7B 03                		mov.B	r11, 3[r7]
 225:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 					switch (uP_LoadRestore_Data.status)
 380                             		.loc 1 225 0
 381 017c 59 7B 01                		movu.B	1[r7], r11
 382 017f 61 4B                   		cmp	#4, r11
 383 0181 21 05                   		bne	.L25
 234:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 						uP_LoadRestore_Data.status= LOAD_RESTORE_SV_WAIT_1;
 384                             		.loc 1 234 0
 385 0183 3C 71 08                		mov.B	#8, 1[r7]
 386                             		.balign 2,3,5
 387                             	.L25:
 250:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		uP_LoadRestore_Data.reduc_speed=0;
 388                             		.loc 1 250 0
 389 0186 FB E2 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r14
 390 018c CD E7 03                		mov.B	3[r14], r7
 391 018f 75 27 9F                		and	#0xffffff9f, r7
 392 0192 C7 E7 03                		mov.B	r7, 3[r14]
 252:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		if ((uP_LoadRestore_Data.status == LOAD_1LIMIT_POWER_SV)||
 393                             		.loc 1 252 0
 394 0195 59 E7 01                		movu.B	1[r14], r7
 395 0198 61 47                   		cmp	#4, r7
 396 019a 20 06                   		beq	.L33
 253:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		(uP_LoadRestore_Data.status= LOAD_RESTORE_SV_WAIT_1))
 397                             		.loc 1 253 0 discriminator 1
 398 019c F9 E4 01 08             		mov.B	#8, 1[r14]
 399                             		.balign 2,3,5
 400                             	.L33:
 255:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			uP_LoadRestore_Data.reduc_speed=1;
 401                             		.loc 1 255 0
 402 01a0 CD E7 03                		mov.B	3[r14], r7
 258:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		if (uP_LoadRestore_Data.status == LOAD_2LIMIT_POWER_SV)
 403                             		.loc 1 258 0
 404 01a3 59 EB 01                		movu.B	1[r14], r11
 255:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			uP_LoadRestore_Data.reduc_speed=1;
 405                             		.loc 1 255 0
 406 01a6 75 27 9F                		and	#0xffffff9f, r7
 407 01a9 75 37 20                		or	#32, r7
 408 01ac C7 E7 03                		mov.B	r7, 3[r14]
 258:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		if (uP_LoadRestore_Data.status == LOAD_2LIMIT_POWER_SV)
 409                             		.loc 1 258 0
 410 01af 61 5B                   		cmp	#5, r11
 411 01b1 21 11                   		bne	.L23
 261:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 			uP_LoadRestore_Data.reduc_speed=2;
 412                             		.loc 1 261 0
 413 01b3 75 27 9F                		and	#0xffffff9f, r7
 414 01b6 75 37 40                		or	#64, r7
 415 01b9 FB B2 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r11
 416 01bf C7 B7 03                		mov.B	r7, 3[r11]
 417                             		.balign 2,3,5
 418                             	.L23:
 274:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	if ( TESTBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS) )
 419                             		.loc 1 274 0
 420 01c2 FB 72 00 00 00 00       		mov.L	#_Flags_1, r7
 272:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	FLT_Pump_Load_Mgmt(FLT_PUMP_LOAD_EXE);
 421                             		.loc 1 272 0
 422 01c8 66 11                   		mov	#1, r1
 423 01ca 05 00 00 00             		bsr	_FLT_Pump_Load_Mgmt
 424                             	.LVL34:
 274:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	if ( TESTBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS) )
 425                             		.loc 1 274 0
 426 01ce CC 7B                   		mov.B	[r7], r11
 427 01d0 FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
 428 01d6 FD 74 CB 01             		tst	#1, r11
 429 01da 20 06                   		beq	.L35
 282:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		uP_LoadRestore_Data.status = LOAD_RESTORE_TRUE; 
 430                             		.loc 1 282 0
 431 01dc 3C 71 03                		mov.B	#3, 1[r7]
 432 01df 03                      		.balign 2,3,3
 433                             	.L35:
 287:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	if ((uP_LoadRestore_Data.status == LOAD_RESTORE_EXE)||(uP_LoadRestore_Data.status == LOAD_RESTORE_
 434                             		.loc 1 287 0
 435 01e0 B0 7F                   		movu.B	1[r7], r7
 436 01e2 61 17                   		cmp	#1, r7
 437 01e4 20 08                   		beq	.L36
 287:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	if ((uP_LoadRestore_Data.status == LOAD_RESTORE_EXE)||(uP_LoadRestore_Data.status == LOAD_RESTORE_
 438                             		.loc 1 287 0 is_stmt 0 discriminator 1
 439 01e6 61 67                   		cmp	#6, r7
 440 01e8 3B A0 01                		bne	.L37
 441 01eb 03                      		.balign 2,3,3
 442                             	.L36:
 443                             	.LBB2:
 290:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	if ( (PulseCounter_GetWarning() == NO_PULSE_COUNTER_WARNING) && (TESTBIT(Flags_1,JIF_FLAG1_PULSE_C
 444                             		.loc 1 290 0 is_stmt 1
 445 01ec 05 00 00 00             		bsr	_PulseCounter_GetWarning
 446                             	.LVL35:
 447 01f0 61 01                   		cmp	#0, r1
 448 01f2 3B 84 01                		bne	.L38
 290:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	if ( (PulseCounter_GetWarning() == NO_PULSE_COUNTER_WARNING) && (TESTBIT(Flags_1,JIF_FLAG1_PULSE_C
 449                             		.loc 1 290 0 is_stmt 0 discriminator 1
 450 01f5 FB E2 00 00 00 00       		mov.L	#_Flags_1, r14
 451 01fb CC E4                   		mov.B	[r14], r4
 452 01fd EF 47                   		mov.L	r4, r7
 453 01ff 64 47                   		and	#4, r7
 454 0201 5B 77                   		movu.B	r7, r7
 455 0203 61 07                   		cmp	#0, r7
 456 0205 3B 71 01                		bne	.L38
 293:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       if ( WaterInDW >= uP_LoadRestore_Data.maxWater )
 457                             		.loc 1 293 0 is_stmt 1
 458 0208 FB 72 00 00 00 00       		mov.L	#_WaterInDW, r7
 459 020e FB B2 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r11
 460 0214 58 72                   		movu.B	[r7], r2
 461 0216 58 B3                   		movu.B	[r11], r3
 462 0218 FB 72 00 00 00 00       		mov.L	#_GICriteria, r7
 463 021e 47 32                   		cmp	r3, r2
 296:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         if ( (TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )&& (!loadMode) )
 464                             		.loc 1 296 0
 465 0220 CC 77                   		mov.B	[r7], r7
 293:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       if ( WaterInDW >= uP_LoadRestore_Data.maxWater )
 466                             		.loc 1 293 0
 467 0222 23 35                   		bltu	.L39
 296:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         if ( (TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )&& (!loadMode) )
 468                             		.loc 1 296 0
 469 0224 FD 74 C7 01             		tst	#1, r7
 470 0228 3B 4C 02                		bne	.L88
 296:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         if ( (TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )&& (!loadMode) )
 471                             		.loc 1 296 0 is_stmt 0 discriminator 1
 472 022b 5B A7                   		movu.B	r10, r7
 473 022d 61 07                   		cmp	#0, r7
 474 022f 3B 45 02                		bne	.L88
 299:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           SETBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS); /* set flag overflow ripristini */	
 475                             		.loc 1 299 0 is_stmt 1
 476 0232 65 14                   		or	#1, r4
 477 0234 C3 E4                   		mov.B	r4, [r14]
 305:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           MachineStatistics.lastCyclesStats[MOST_RECENT_STAT_CYCLE_POS].restore_koRestore.b.koResto
 478                             		.loc 1 305 0
 479 0236 FB 72 00 00 00 00       		mov.L	#_MachineStatistics, r7
 480 023c 5D 7E 35                		movu.W	106[r7], r14
 481 023f CD 74 6A                		mov.B	106[r7], r4
 482 0242 68 8E                   		shlr	#8, r14
 483 0244 62 1E                   		add	#1, r14
 484 0246 64 FE                   		and	#15, r14
 485 0248 75 24 F0                		and	#-16, r4
 486 024b 57 4E                   		or	r4, r14
 487 024d C7 7E 6A                		mov.B	r14, 106[r7]
 309:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				uP_LoadRestore_Data.status = LOAD_RESTORE_TRUE;
 488                             		.loc 1 309 0
 489 0250 F9 B4 01 03             		mov.B	#3, 1[r11]
 490 0254 38 34 01                		bra	.L37
 491                             	.L39:
 328:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         if ((( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )&& (!loadMode) )||
 492                             		.loc 1 328 0
 493 0257 FD 74 C7 01             		tst	#1, r7
 494 025b 5B AA                   		movu.B	r10, r10
 495 025d 21 08                   		bne	.L40
 328:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         if ((( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )&& (!loadMode) )||
 496                             		.loc 1 328 0 is_stmt 0 discriminator 1
 497 025f 61 0A                   		cmp	#0, r10
 498 0261 20 17                   		beq	.L41
 499 0263 2E 07                   		bra	.L42
 500                             	.L40:
 328:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         if ((( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )&& (!loadMode) )||
 501                             		.loc 1 328 0 discriminator 2
 502 0265 61 0A                   		cmp	#0, r10
 503 0267 3A DD 00                		beq	.L43
 504                             		.balign 2,3,5
 505                             	.L42:
 329:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		(loadMode && (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==3)))
 506                             		.loc 1 329 0 is_stmt 1
 507 026a FB 72 00 00 00 00       		mov.L	#_Virtual_Sensor_Value, r7
 508 0270 58 77                   		movu.B	[r7], r7
 509 0272 61 37                   		cmp	#3, r7
 510 0274 3B D0 00                		bne	.L43
 511 0277 03                      		.balign 2,3,5
 512                             	.L41:
 332:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           if (uP_LoadRestore_Data.init == TRUE)
 513                             		.loc 1 332 0
 514 0278 FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
 515 027e DD 7A 01                		mov.W	2[r7], r10
 516                             	.LVL36:
 517 0281 76 2A 80 00             		and	#0x80, r10
 518 0285 5F AA                   		movu.W	r10, r10
 519 0287 61 0A                   		cmp	#0, r10
 520 0289 20 1D                   		beq	.L44
 335:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             LOR_init();
 521                             		.loc 1 335 0
 522 028b 05 00 00 00             		bsr	_LOR_init
 523                             	.LVL37:
 339:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****            (void)SWTC_SetSValue((SWTC_CountersType)PULSE_CHECK_DELAY_S_COUNTER, (SWTC_SCounterValue
 524                             		.loc 1 339 0
 525 028f FB A2 00 00 00 00       		mov.L	#_ToutPulseCounterCheckDelay, r10
 526 0295 CC A2                   		mov.B	[r10], r2
 527 0297 66 61                   		mov	#6, r1
 528 0299 05 00 00 00             		bsr	_SWTC_SetSValue
 529                             	.LVL38:
 345:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             uP_LoadRestore_Data.init = FALSE;
 530                             		.loc 1 345 0
 531 029d CD 7A 03                		mov.B	3[r7], r10
 532 02a0 7A 7A                   		bclr	#7, r10
 533 02a2 C7 7A 03                		mov.B	r10, 3[r7]
 534 02a5 03                      		.balign 2,3,5
 535                             	.L44:
 349:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           WaterInDW = (uP_LoadRestore_Data.waterInDWInit + GIWaterLoaded);  /* aggiornamento acqua 
 536                             		.loc 1 349 0
 537 02a6 FB 72 00 00 00 00       		mov.L	#_GIWaterLoaded, r7
 538 02ac CD 7B 01                		mov.B	1[r7], r11
 539 02af FB A2 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r10
 540 02b5 06 09 AB 02             		add	2[r10].B, r11
 541 02b9 FB A2 00 00 00 00       		mov.L	#_WaterInDW, r10
 542 02bf C3 AB                   		mov.B	r11, [r10]
 354:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           FLT_PulseCounterCheckDelay_Mgmt();
 543                             		.loc 1 354 0
 544 02c1 05 00 00 00             		bsr	_FLT_PulseCounterCheckDelay_Mgmt
 545                             	.LVL39:
 358:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           if((GIWaterLoaded>5) && (TempCycle_Stats.flags.bit.restoreCntEn==1)) 
 546                             		.loc 1 358 0
 547 02c5 DC 7A                   		mov.W	[r7], r10
 548 02c7 5F A7                   		movu.W	r10, r7
 549 02c9 61 57                   		cmp	#5, r7
 550 02cb 25 2D                   		bleu	.L45
 358:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           if((GIWaterLoaded>5) && (TempCycle_Stats.flags.bit.restoreCntEn==1)) 
 551                             		.loc 1 358 0 is_stmt 0 discriminator 1
 552 02cd FB 72 00 00 00 00       		mov.L	#_TempCycle_Stats, r7
 553 02d3 DD 7B 01                		mov.W	2[r7], r11
 554 02d6 77 2B 00 80 00          		and	#0x8000, r11
 555 02db 5F BB                   		movu.W	r11, r11
 556 02dd 61 0B                   		cmp	#0, r11
 557 02df 20 19                   		beq	.L45
 360:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             MachineStatistics.lastCyclesStats[MOST_RECENT_STAT_CYCLE_POS].restore_koRestore.b.resto
 558                             		.loc 1 360 0 is_stmt 1
 559 02e1 FB B2 00 00 00 00       		mov.L	#_MachineStatistics, r11
 560 02e7 CD BE 6A                		mov.B	106[r11], r14
 561 02ea 71 EE 10                		add	#16, r14
 562 02ed C7 BE 6A                		mov.B	r14, 106[r11]
 361:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             TempCycle_Stats.flags.bit.restoreCntEn =0 ;
 563                             		.loc 1 361 0
 564 02f0 CD 7B 02                		mov.B	2[r7], r11
 565 02f3 7A 7B                   		bclr	#7, r11
 566 02f5 C7 7B 02                		mov.B	r11, 2[r7]
 567                             		.balign 2,3,5
 568                             	.L45:
 365:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           uP_LoadRestore_Data.emptyPulseIn = (GIWaterLoaded * FlowMeterDivider);	 /* aggiornamento 
 569                             		.loc 1 365 0
 570 02f8 FB 72 00 00 00 00       		mov.L	#_FlowMeterDivider, r7
 571 02fe 4C 7A                   		mul	[r7].UB, r10
 572 0300 FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
 573 0306 D7 7A 04                		mov.W	r10, 8[r7]
 369:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		      LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b = EV_ON; /* pilotaggio EV*/
 574                             		.loc 1 369 0
 575 0309 FB 72 00 00 00 00       		mov.L	#_EV_Pos, r7
 576 030f 58 77                   		movu.B	[r7], r7
 577 0311 66 1C                   		mov	#1, r12
 578 0313 FB A2 00 00 00 00       		mov.L	#_LoadsReq_New, r10
 579 0319 FE 07 AC                		mov.B	r12, [r7,r10]
 372:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           if ( FLT_CheckPulseCounterStill(PULSE_COUNTER_STILL_EXE) == TRUE )
 580                             		.loc 1 372 0
 581 031c CF C1                   		mov.B	r12, r1
 582 031e 05 00 00 00             		bsr	_FLT_CheckPulseCounterStill
 583                             	.LVL40:
 584 0322 61 11                   		cmp	#1, r1
 585 0324 EF 17                   		mov.L	r1, r7
 586 0326 EF 12                   		mov.L	r1, r2
 587 0328 20 05                   		beq	.L46
 588 032a 38 A8 FD                		bra	.L87
 589                             	.L46:
 376:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             FLT_preFaultSet(CODE_PULSE_COUNTER,SUBCODE_PULSE_COUNTER);
 590                             		.loc 1 376 0
 591 032d 66 71                   		mov	#7, r1
 379:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             SETBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS); 
 592                             		.loc 1 379 0
 593 032f FB A2 00 00 00 00       		mov.L	#_Flags_1, r10
 376:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             FLT_preFaultSet(CODE_PULSE_COUNTER,SUBCODE_PULSE_COUNTER);
 594                             		.loc 1 376 0
 595 0335 05 00 00 00             		bsr	_FLT_preFaultSet
 596                             	.LVL41:
 379:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             SETBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS); 
 597                             		.loc 1 379 0
 598 0339 CC AB                   		mov.B	[r10], r11
 383:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	      return S_FALSE;
 599                             		.loc 1 383 0
 600 033b CF 71                   		mov.B	r7, r1
 379:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             SETBIT(Flags_1,JIF_FLAG1_PULSE_COUNTER_KO_POS); 
 601                             		.loc 1 379 0
 602 033d 65 4B                   		or	#4, r11
 603 033f C3 AB                   		mov.B	r11, [r10]
 604 0341 38 35 01                		bra	.L17
 605                             	.LVL42:
 606                             	.L43:
 392:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           if ( PulseLoaded >= uP_LoadRestore_Data.emptyPulseIn )
 607                             		.loc 1 392 0
 608 0344 FB 72 00 00 00 00       		mov.L	#_PulseLoaded, r7
 609 034a DC 7B                   		mov.W	[r7], r11
 610 034c FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
 611 0352 DD 7A 04                		mov.W	8[r7], r10
 612                             	.LVL43:
 613 0355 5F B4                   		movu.W	r11, r4
 614 0357 5F AE                   		movu.W	r10, r14
 615 0359 47 E4                   		cmp	r14, r4
 616 035b 23 09                   		bltu	.L47
 394:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****             uP_LoadRestore_Data.fullPulseIn = ( PulseLoaded - uP_LoadRestore_Data.emptyPulseIn );
 617                             		.loc 1 394 0
 618 035d FF 0A AB                		sub	r10, r11, r10
 619 0360 D7 7A 03                		mov.W	r10, 6[r7]
 620 0363 03                      		.balign 2,3,5
 621                             	.L47:
 398:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		  uP_LoadRestore_Data.init = TRUE;
 622                             		.loc 1 398 0
 623 0364 CD 7A 03                		mov.B	3[r7], r10
 400:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           (void)SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
 624                             		.loc 1 400 0
 625 0367 75 41 1F                		mov	#31, r1
 398:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		  uP_LoadRestore_Data.init = TRUE;
 626                             		.loc 1 398 0
 627 036a 78 7A                   		bset	#7, r10
 628 036c C7 7A 03                		mov.B	r10, 3[r7]
 400:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****           (void)SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
 629                             		.loc 1 400 0
 630 036f 05 00 00 00             		bsr	_SWTC_Stop
 631                             	.LVL44:
 632 0373 38 01 01                		bra	.L88
 633                             	.LVL45:
 634                             	.L38:
 415:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       uP_LoadRestore_Data.status = LOAD_RESTORE_EXE_TIME;
 635                             		.loc 1 415 0
 636 0376 FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
 417:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       uP_LoadRestore_Data.init = TRUE;  /* uso la stessa var perch� sono in uno stato diverso */
 637                             		.loc 1 417 0
 638 037c CD 7B 03                		mov.B	3[r7], r11
 415:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       uP_LoadRestore_Data.status = LOAD_RESTORE_EXE_TIME;
 639                             		.loc 1 415 0
 640 037f 3C 71 02                		mov.B	#2, 1[r7]
 417:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       uP_LoadRestore_Data.init = TRUE;  /* uso la stessa var perch� sono in uno stato diverso */
 641                             		.loc 1 417 0
 642 0382 78 7B                   		bset	#7, r11
 643 0384 C7 7B 03                		mov.B	r11, 3[r7]
 644 0387 03                      		.balign 2,3,5
 645                             	.L37:
 646                             	.LBE2:
 425:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****    if (uP_LoadRestore_Data.status == LOAD_RESTORE_EXE_TIME)
 647                             		.loc 1 425 0
 648 0388 FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
 649 038e B0 7F                   		movu.B	1[r7], r7
 650 0390 61 27                   		cmp	#2, r7
 651 0392 3B C4 00                		bne	.L48
 428:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     if ((( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )&& (!loadMode) )||
 652                             		.loc 1 428 0
 653 0395 FB 72 00 00 00 00       		mov.L	#_GICriteria, r7
 654 039b CC 77                   		mov.B	[r7], r7
 655 039d 5B AA                   		movu.B	r10, r10
 656 039f FD 74 C7 01             		tst	#1, r7
 657 03a3 21 08                   		bne	.L49
 428:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     if ((( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )&& (!loadMode) )||
 658                             		.loc 1 428 0 is_stmt 0 discriminator 1
 659 03a5 61 0A                   		cmp	#0, r10
 660 03a7 20 15                   		beq	.L50
 661 03a9 2E 07                   		bra	.L51
 662                             	.L49:
 428:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****     if ((( TESTBIT (GICriteria,GI_PRESS_SENS_CR_FULL_IND) == 0 )&& (!loadMode) )||
 663                             		.loc 1 428 0 discriminator 2
 664 03ab 61 0A                   		cmp	#0, r10
 665 03ad 3A 88 00                		beq	.L52
 666                             		.balign 2,3,5
 667                             	.L51:
 429:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		(loadMode && (Virtual_Sensor_Value[GI_VIRTUAL_SENSOR_WASH]==3)))
 668                             		.loc 1 429 0 is_stmt 1
 669 03b0 FB 72 00 00 00 00       		mov.L	#_Virtual_Sensor_Value, r7
 670 03b6 58 77                   		movu.B	[r7], r7
 671 03b8 61 37                   		cmp	#3, r7
 672 03ba 21 7B                   		bne	.L52
 673                             		.balign 2,3,5
 674                             	.L50:
 432:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       if (uP_LoadRestore_Data.init == TRUE)
 675                             		.loc 1 432 0
 676 03bc FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
 677 03c2 DD 7A 01                		mov.W	2[r7], r10
 678                             	.LVL46:
 679 03c5 76 2A 80 00             		and	#0x80, r10
 680 03c9 5F AA                   		movu.W	r10, r10
 681 03cb 61 0A                   		cmp	#0, r10
 682 03cd 20 0F                   		beq	.L53
 435:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         LOR_timeLoad_Init();
 683                             		.loc 1 435 0
 684 03cf 05 00 00 00             		bsr	_LOR_timeLoad_Init
 685                             	.LVL47:
 437:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         uP_LoadRestore_Data.init = FALSE;
 686                             		.loc 1 437 0
 687 03d3 CD 7A 03                		mov.B	3[r7], r10
 688 03d6 7A 7A                   		bclr	#7, r10
 689 03d8 C7 7A 03                		mov.B	r10, 3[r7]
 690 03db 03                      		.balign 2,3,3
 691                             	.L53:
 441:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       if ( LOR_timeLoadEnd_Check() == S_OK )
 692                             		.loc 1 441 0
 693 03dc 05 00 00 00             		bsr	_LOR_timeLoadEnd_Check
 694                             	.LVL48:
 695 03e0 5B 11                   		movu.B	r1, r1
 696 03e2 61 01                   		cmp	#0, r1
 697 03e4 21 3C                   		bne	.L54
 447:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 				WaterInDW = uP_LoadRestore_Data.maxWater;
 698                             		.loc 1 447 0
 699 03e6 FB B2 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r11
 700 03ec CC BC                   		mov.B	[r11], r12
 701 03ee FB 72 00 00 00 00       		mov.L	#_WaterInDW, r7
 702 03f4 C3 7C                   		mov.B	r12, [r7]
 449:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	      SETBIT(Flags_1,JIF_FLAG1_LOAD_RESTORE_KO_POS); /* set flag overflow ripristini */	
 703                             		.loc 1 449 0
 704 03f6 FB 72 00 00 00 00       		mov.L	#_Flags_1, r7
 705 03fc CC 7A                   		mov.B	[r7], r10
 706 03fe 65 1A                   		or	#1, r10
 707 0400 C3 7A                   		mov.B	r10, [r7]
 455:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         MachineStatistics.lastCyclesStats[MOST_RECENT_STAT_CYCLE_POS].restore_koRestore.b.koRestore
 708                             		.loc 1 455 0
 709 0402 FB 72 00 00 00 00       		mov.L	#_MachineStatistics, r7
 710 0408 5D 7A 35                		movu.W	106[r7], r10
 711 040b CD 7E 6A                		mov.B	106[r7], r14
 712 040e 68 8A                   		shlr	#8, r10
 713 0410 62 1A                   		add	#1, r10
 714 0412 64 FA                   		and	#15, r10
 715 0414 75 2E F0                		and	#-16, r14
 716 0417 57 EA                   		or	r14, r10
 717 0419 C7 7A 6A                		mov.B	r10, 106[r7]
 458:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         uP_LoadRestore_Data.status = LOAD_RESTORE_TRUE;
 718                             		.loc 1 458 0
 719 041c F9 B4 01 03             		mov.B	#3, 1[r11]
 720                             		.balign 2,3,5
 721                             	.L54:
 464:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 	    LoadsReq_New[EV_Pos[LD_WASH_EV_IND]].b = EV_ON; /* pilotaggio EV*/  
 722                             		.loc 1 464 0
 723 0420 FB 72 00 00 00 00       		mov.L	#_EV_Pos, r7
 724 0426 58 77                   		movu.B	[r7], r7
 725 0428 FB A2 00 00 00 00       		mov.L	#_LoadsReq_New, r10
 726 042e 66 1B                   		mov	#1, r11
 727 0430 FE 07 AB                		mov.B	r11, [r7,r10]
 728 0433 2E 23                   		bra	.L48
 729                             	.LVL49:
 730                             	.L52:
 469:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****       if ( uP_LoadRestore_Data.init == FALSE )
 731                             		.loc 1 469 0
 732 0435 FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
 733 043b DD 7A 01                		mov.W	2[r7], r10
 734                             	.LVL50:
 735 043e 76 2A 80 00             		and	#0x80, r10
 736 0442 5F AA                   		movu.W	r10, r10
 737 0444 61 0A                   		cmp	#0, r10
 738 0446 21 2E                   		bne	.L88
 474:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         LOR_waterInDW_timeBased_Update();
 739                             		.loc 1 474 0
 740 0448 05 00 00 00             		bsr	_LOR_waterInDW_timeBased_Update
 741                             	.LVL51:
 476:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****         uP_LoadRestore_Data.init = TRUE;	 /* per eventuale restart con vuoto */
 742                             		.loc 1 476 0
 743 044c CD 7B 03                		mov.B	3[r7], r11
 744 044f 78 7B                   		bset	#7, r11
 745 0451 C7 7B 03                		mov.B	r11, 3[r7]
 746 0454 2E 20                   		bra	.L88
 747                             	.L48:
 486:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c ****    if (uP_LoadRestore_Data.status == LOAD_RESTORE_TRUE)
 748                             		.loc 1 486 0
 749 0456 FB 72 00 00 00 00       		mov.L	#_uP_LoadRestore_Data, r7
 750 045c 59 7A 01                		movu.B	1[r7], r10
 751 045f 61 3A                   		cmp	#3, r10
 752 0461 3B 71 FC                		bne	.L87
 489:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		(void)SWTC_Stop((SWTC_CountersType)PULSE_STILL_M_COUNTER);
 753                             		.loc 1 489 0
 754 0464 75 41 1F                		mov	#31, r1
 755 0467 05 00 00 00             		bsr	_SWTC_Stop
 756                             	.LVL52:
 490:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		uP_LoadRestore_Data.filter_foam_on=FALSE;
 757                             		.loc 1 490 0
 758 046b CD 7A 03                		mov.B	3[r7], r10
 759 046e 7A 4A                   		bclr	#4, r10
 760 0470 C7 7A 03                		mov.B	r10, 3[r7]
 761 0473 03                      		.balign 2,3,1
 762                             	.L88:
 492:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** 		return S_OK;
 763                             		.loc 1 492 0
 764 0474 66 01                   		mov	#0, r1
 765                             		.balign 2,3,1
 766                             	.L17:
 498:C:/Workspace/FW_Platform2_5/trunk/Inertia/Modules\LoadRestore.c **** }
 767                             		.loc 1 498 0
 768 0476 5B 11                   		movu.B	r1, r1
 769 0478 3F 7C 06                		rtsd	#24, r7-r12
 770                             	.LFE0:
 876                             	.Letext0:
 877                             		.file 2 "C:\\Workspace\\FW_Platform2_5\\trunk\\HAL\\HAL_General/StandardTypes.h"
 878                             		.file 3 "C:\\Workspace\\FW_Platform2_5\\trunk\\ProductModules\\PM_SwTimersCounters/SwTimersCounter
 879                             		.file 4 "C:\\Workspace\\FW_Platform2_5\\trunk\\ProductModules\\PM_Library/LIB_Utilities.h"
 880                             		.file 5 "C:\\Workspace\\FW_Platform2_5\\trunk\\Inertia\\General/CstmDefines.h"
 881                             		.file 6 "C:\\Workspace\\FW_Platform2_5\\trunk\\Application_Platform/APP_Types.h"
 882                             		.file 7 "C:\\Workspace\\FW_Platform2_5\\trunk\\Inertia\\General/CstmTypes.h"
 883                             		.file 8 "C:\\Workspace\\FW_Platform2_5\\trunk\\PlatformLibrary\\LIB_IOManager/OutputManagerExp.h"
 884                             		.file 9 "C:\\Workspace\\FW_Platform2_5\\trunk\\Inertia\\General/CstmGlobal.h"
 885                             		.file 10 "C:\\Workspace\\FW_Platform2_5\\trunk\\Application_Platform/APP_Global.h"
 886                             		.file 11 "C:\\Workspace\\FW_Platform2_5\\trunk\\Application_Platform/APP_FuncLib.h"
 887                             		.file 12 "C:\\Workspace\\FW_Platform2_5\\trunk\\Inertia\\Modules/Load.h"
 888                             		.file 13 "C:\\Workspace\\FW_Platform2_5\\trunk\\Inertia\\Control/DW_Fault.h"

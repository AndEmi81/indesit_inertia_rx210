/**
\page pageWMSafety
\ingroup PM_Safety_WM
*/

/**
\defgroup PM_Safety_WM WM Safety Modules 
@{
\n      Here the software modules are defined related to the PECs for safety on Washing Machines
\n		
\n
\par    Configuration:
\n

@}
\ingroup   	PM_WashingMachine
*/


/**
\defgroup PM_SFT_DoorLock Safety Door Lock
@{
\n This module implements the logic for the safety management related to the Door Lock. 
\n It is able to detect potentially hazardous conditions and door lock failures and to intervene 
\n to put the system in a safety state.
\n
\n 		Possible faults are:
\n\li	The door does not close
\n\li	The door does not open
\n\li 	Door's Feedback KO

\n Moreover, this logic continually monitors the motor speed to prevent that door is unlocked whith the motor
\n running.
\n
\version 01.00
\n
\par Safety Functions:
\li PM_SFT_WM_Doorlock_Monitor()

\par Safety Variables:
\li DoorLockFaultStatus_t DL_faultStatus


\n
\n
\par Architecture Requirements ID:
\li		SARS_WMMT_MN_SDL_1
\li		SARS_WMMT_MN_SDL_2
\li 	SARS_WMMT_MN_SDL_3
\li 	SARS_WMMT_MN_SDL_4
\li 	SARS_WMMT_MN_SDL_5



@}
\ingroup PM_Safety_WM
*/



/**
\defgroup PM_SFT_DrainPump Safety Drain Pump
@{
\n This module implements the logic for the safety management related to the Drain Pump. 
\n It is able to detect potentially hazardous conditions and drain pump failures and to intervene 
\n to put the system in a safety state.
\n
\n 		Possible faults are:
\n\li	Blocked Rotor
\n\li	Triac in Diode Mode \ Feedback Shorted with GND
\n\li 	Triac Shorted \ Feedback Shorted with Vcc
\n
\version 01.00
\n
\par Safety Functions:
\li PM_SFT_WM_Drainpump_Monitor()

\par Safety Variables:
\li

\n
\n
\par Architecture Requirements ID:
\li	SARS_WMMT_MN_SDP_1
\li SARS_WMMT_MN_SDP_2
\li SARS_WMMT_MN_SDP_4
\li SARS_WMMT_MN_SDP_3
\li SARS_WMMT_MN_SDP_2
\li SARS_WMMT_MN_SDP_5

	

@}
\ingroup PM_Safety_WM
*/


/**
\defgroup PM_SFT_Motor Safety Motor Interface
@{
\n This module implements the logic for the safety management related to the Safety Motor Interface. 
\n It acquires info from DSP subsystem, especially speed value and potential fault states.
\n The module is also able to detect potentially hazardous conditions and motor interface failures and to intervene 
\n to put the system in a safety state.
\n
\n 		Possible faults are:
\n\li	Communication Breakdown
\n\li	Not Intact Data
\n\li 	Fault Signaling from DSP
\n
\version 01.00
\n

\par Safety Functions:
\li PM_SFT_WM_Motor_Monitor()

\par Safety Variables:
\li 



\n
\n
\par Architecture Requirements ID:
\li	SARS_WMMT_MN_SMI_1
\li SARS_WMMT_MN_SMI_2
\li SARS_WMMT_MN_SMI_3
\li SARS_WMMT_MN_SMI_4

@}
\ingroup PM_Safety_WM
*/

/**
\defgroup PM_SFT_NTCProbe Safety NTC Probe
@{
\n This module implements the control logic for the NTC probe. It is able to detect potentially
\n hazardous conditions and probe failures and to intervene to put the system in a safety state.
\n
\n 		Possible faults are:
\n\li	Open Probe
\n\li	Shorted Probe
\n\li 	Blocked Probe

\n This logic continually monitors temperature and also intervenes if it is too high in order to prevent hazardous
\n situations.
\n
\version 01.00
\n
\n
\par Safety Functions:
\li 	PM_SFT_WM_washNTCProbe_Monitor()
\n\li 	PM_SFT_WM_NTCProbe_GeneralManager()

\par Safety Variables:
\li  SafetyNTCProbe_t washNTCProbe

\n
\n
\par Architecture Requirements ID:
\li	SARS_WMMT_MN_SNTC_1
\li	SARS_WMMT_MN_SNTC_2
\li	SARS_WMMT_MN_SNTC_3
\li	SARS_WMMT_MN_SNTC_4
\li	SARS_WMMT_MN_SNTC_5
\li	SARS_WMMT_MN_SNTC_6
\li	SARS_WMMT_MN_SNTC_7

@}
\ingroup PM_Safety_WM
*/


/**
\defgroup PM_SFT_PressSwitch Safety Pressure Switch
@{
\n This module implements the logic for the safety management related to the Pressure Switch. 
\n It is able to detect potentially hazardous conditions and pressure switch failures and to intervene 
\n to put the system in a safety state.
\n
\n Possible faults are:
\n\li pressure switch's values out of range
\n\li pressure switch blocked 
\n
\version 01.00
\n
\n 
\par Safety Functions:
\li PM_SFT_WM_PressSwitch_Monitor()

\par Safety Variables:
\li PressSwitchSafety_t prsFltParams

\n
\n
\par Architecture Requirements ID:
\li		SARS_WMMT_MN_SPRS_1	
\li		SARS_WMMT_MN_SPRS_2
\li 	SARS_WMMT_MN_SPRS_3
\li		SARS_WMMT_MN_SPRS_4
\li		SARS_WMMT_MN_SPRS_5
\li		SARS_WMMT_MN_SPRS_6
\li		SARS_WMMT_MN_SPRS_7
\li		SARS_WMMT_MN_SPRS_8
\li		SARS_WMMT_MN_SPRS_9
\li		SARS_WMMT_MN_SPRS_10

	
@}
\ingroup PM_Safety_WM
*/


/**
\defgroup PM_SFT_washRes Safety Washing Resistor
@{
\n This module implements the logic for the safety management related to the Washing Resistor. 
\n It is able to detect potentially hazardous conditions and resistor circuit's faults and to intervene 
\n to put the system in a safety state.
\n
\n Possible faults are:
\n\li Washing Resistor's Relay Open \ Switch Relay stuck on Unloading side \ Feedback's Pin shorted with Vcc 
\n\li Washing Resistor's Relay Shorted \ Washing Resistor's Leakage
\n\li Washing Resistor's Feedback's failure
\n
\version 01.00
\n
\n 
\par Safety Functions:
\li PM_SFT_WM_washResMon()

\par Safety Variables:
\li

\n
\n
\par Architecture Requirements ID:
\li	SARS_WMMT_MN_SWR _1
\li SARS_WMMT_MN_SWR _2
\li SARS_WMMT_MN_SWR _3
\li SARS_WMMT_MN_SWR _4

	

@}
\ingroup PM_Safety_WM
*/


/**
\defgroup PM_SFT_SafetyActions Safety Actions Library
@{
\n This module is a library with an API for Safety Actions. These functions are called by the Action Manager 
\n to implement a safety procedure that puts the system in a safety state.
\n
\version 01.00
\n
\n
\par Safety Functions:
\li PM_SFT_WM_LoadsOff_Res()
\li PM_SFT_WM_SwitchRelayOff()
\li PM_SFT_WM_LoadsOff()
\li PM_SFT_WM_Drain()
\li PM_SFT_WM_UnlockDoor()
\li PM_SFT_WM_LoadsOffTotal()
\li PM_SFT_WM_RestoreCommWithExternalBoard()
\li PM_SFT_WM_DisableTmpCommWithExternalBoard()



\par Safety Variables:
\li

\n
\n
\par Architecture Requirements ID:
\li		SARS_WMMT_MN_SAL_1
\li	SARS_WMMT_MN_SAL_2
\li	SARS_WMMT_MN_SAL_3

@}
\ingroup PM_Safety_WM
*/


/**
\defgroup PM_Safety_WD WD Safety Modules 
@{
\n      Here the software modules are defined related to the PECs for safety only on Washing and Drying Machines
\n		
\n
\par    Configuration:
\n

@}
\ingroup   	PM_WashDryer
*/



/**
\defgroup PM_SFT_DryFan Safety Dry Fan
@{
\n\todo
\n
\version 01.00
\n
\n Possible faults are:
\n\li 

\n 
\par Safety Functions:
\li 

\par Safety Variables:
\li

\n
\n
\par Architecture Requirements ID:
\li		SARS_WDMT_MN_
\n\li	

@}
\ingroup PM_Safety_WD
*/
